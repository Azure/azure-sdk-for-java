// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.models.ApiDefinitionInfo;
import com.azure.resourcemanager.appservice.models.AutoHealRules;
import com.azure.resourcemanager.appservice.models.AzureStorageInfoValue;
import com.azure.resourcemanager.appservice.models.ConnStringInfo;
import com.azure.resourcemanager.appservice.models.CorsSettings;
import com.azure.resourcemanager.appservice.models.Experiments;
import com.azure.resourcemanager.appservice.models.FtpsState;
import com.azure.resourcemanager.appservice.models.HandlerMapping;
import com.azure.resourcemanager.appservice.models.IpSecurityRestriction;
import com.azure.resourcemanager.appservice.models.ManagedPipelineMode;
import com.azure.resourcemanager.appservice.models.NameValuePair;
import com.azure.resourcemanager.appservice.models.ProxyOnlyResource;
import com.azure.resourcemanager.appservice.models.ScmType;
import com.azure.resourcemanager.appservice.models.SiteLimits;
import com.azure.resourcemanager.appservice.models.SiteLoadBalancing;
import com.azure.resourcemanager.appservice.models.SiteMachineKey;
import com.azure.resourcemanager.appservice.models.SupportedTlsVersions;
import com.azure.resourcemanager.appservice.models.VirtualApplication;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Web app configuration ARM resource. */
@Fluent
public final class SiteConfigResourceInner extends ProxyOnlyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SiteConfigResourceInner.class);

    /*
     * Core resource properties
     */
    @JsonProperty(value = "properties")
    private SiteConfigInner innerProperties;

    /**
     * Get the innerProperties property: Core resource properties.
     *
     * @return the innerProperties value.
     */
    private SiteConfigInner innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public SiteConfigResourceInner withKind(String kind) {
        super.withKind(kind);
        return this;
    }

    /**
     * Get the numberOfWorkers property: Number of workers.
     *
     * @return the numberOfWorkers value.
     */
    public Integer numberOfWorkers() {
        return this.innerProperties() == null ? null : this.innerProperties().numberOfWorkers();
    }

    /**
     * Set the numberOfWorkers property: Number of workers.
     *
     * @param numberOfWorkers the numberOfWorkers value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withNumberOfWorkers(Integer numberOfWorkers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withNumberOfWorkers(numberOfWorkers);
        return this;
    }

    /**
     * Get the defaultDocuments property: Default documents.
     *
     * @return the defaultDocuments value.
     */
    public List<String> defaultDocuments() {
        return this.innerProperties() == null ? null : this.innerProperties().defaultDocuments();
    }

    /**
     * Set the defaultDocuments property: Default documents.
     *
     * @param defaultDocuments the defaultDocuments value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withDefaultDocuments(List<String> defaultDocuments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withDefaultDocuments(defaultDocuments);
        return this;
    }

    /**
     * Get the netFrameworkVersion property: .NET Framework version.
     *
     * @return the netFrameworkVersion value.
     */
    public String netFrameworkVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().netFrameworkVersion();
    }

    /**
     * Set the netFrameworkVersion property: .NET Framework version.
     *
     * @param netFrameworkVersion the netFrameworkVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withNetFrameworkVersion(String netFrameworkVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withNetFrameworkVersion(netFrameworkVersion);
        return this;
    }

    /**
     * Get the phpVersion property: Version of PHP.
     *
     * @return the phpVersion value.
     */
    public String phpVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().phpVersion();
    }

    /**
     * Set the phpVersion property: Version of PHP.
     *
     * @param phpVersion the phpVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withPhpVersion(String phpVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withPhpVersion(phpVersion);
        return this;
    }

    /**
     * Get the pythonVersion property: Version of Python.
     *
     * @return the pythonVersion value.
     */
    public String pythonVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().pythonVersion();
    }

    /**
     * Set the pythonVersion property: Version of Python.
     *
     * @param pythonVersion the pythonVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withPythonVersion(String pythonVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withPythonVersion(pythonVersion);
        return this;
    }

    /**
     * Get the nodeVersion property: Version of Node.js.
     *
     * @return the nodeVersion value.
     */
    public String nodeVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeVersion();
    }

    /**
     * Set the nodeVersion property: Version of Node.js.
     *
     * @param nodeVersion the nodeVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withNodeVersion(String nodeVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withNodeVersion(nodeVersion);
        return this;
    }

    /**
     * Get the linuxFxVersion property: Linux App Framework and version.
     *
     * @return the linuxFxVersion value.
     */
    public String linuxFxVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().linuxFxVersion();
    }

    /**
     * Set the linuxFxVersion property: Linux App Framework and version.
     *
     * @param linuxFxVersion the linuxFxVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withLinuxFxVersion(String linuxFxVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withLinuxFxVersion(linuxFxVersion);
        return this;
    }

    /**
     * Get the windowsFxVersion property: Xenon App Framework and version.
     *
     * @return the windowsFxVersion value.
     */
    public String windowsFxVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().windowsFxVersion();
    }

    /**
     * Set the windowsFxVersion property: Xenon App Framework and version.
     *
     * @param windowsFxVersion the windowsFxVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withWindowsFxVersion(String windowsFxVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withWindowsFxVersion(windowsFxVersion);
        return this;
    }

    /**
     * Get the requestTracingEnabled property: &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the requestTracingEnabled value.
     */
    public Boolean requestTracingEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().requestTracingEnabled();
    }

    /**
     * Set the requestTracingEnabled property: &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param requestTracingEnabled the requestTracingEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withRequestTracingEnabled(Boolean requestTracingEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withRequestTracingEnabled(requestTracingEnabled);
        return this;
    }

    /**
     * Get the requestTracingExpirationTime property: Request tracing expiration time.
     *
     * @return the requestTracingExpirationTime value.
     */
    public OffsetDateTime requestTracingExpirationTime() {
        return this.innerProperties() == null ? null : this.innerProperties().requestTracingExpirationTime();
    }

    /**
     * Set the requestTracingExpirationTime property: Request tracing expiration time.
     *
     * @param requestTracingExpirationTime the requestTracingExpirationTime value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withRequestTracingExpirationTime(OffsetDateTime requestTracingExpirationTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withRequestTracingExpirationTime(requestTracingExpirationTime);
        return this;
    }

    /**
     * Get the remoteDebuggingEnabled property: &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the remoteDebuggingEnabled value.
     */
    public Boolean remoteDebuggingEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().remoteDebuggingEnabled();
    }

    /**
     * Set the remoteDebuggingEnabled property: &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param remoteDebuggingEnabled the remoteDebuggingEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withRemoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withRemoteDebuggingEnabled(remoteDebuggingEnabled);
        return this;
    }

    /**
     * Get the remoteDebuggingVersion property: Remote debugging version.
     *
     * @return the remoteDebuggingVersion value.
     */
    public String remoteDebuggingVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().remoteDebuggingVersion();
    }

    /**
     * Set the remoteDebuggingVersion property: Remote debugging version.
     *
     * @param remoteDebuggingVersion the remoteDebuggingVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withRemoteDebuggingVersion(String remoteDebuggingVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withRemoteDebuggingVersion(remoteDebuggingVersion);
        return this;
    }

    /**
     * Get the httpLoggingEnabled property: &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the httpLoggingEnabled value.
     */
    public Boolean httpLoggingEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().httpLoggingEnabled();
    }

    /**
     * Set the httpLoggingEnabled property: &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param httpLoggingEnabled the httpLoggingEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withHttpLoggingEnabled(Boolean httpLoggingEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withHttpLoggingEnabled(httpLoggingEnabled);
        return this;
    }

    /**
     * Get the logsDirectorySizeLimit property: HTTP logs directory size limit.
     *
     * @return the logsDirectorySizeLimit value.
     */
    public Integer logsDirectorySizeLimit() {
        return this.innerProperties() == null ? null : this.innerProperties().logsDirectorySizeLimit();
    }

    /**
     * Set the logsDirectorySizeLimit property: HTTP logs directory size limit.
     *
     * @param logsDirectorySizeLimit the logsDirectorySizeLimit value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withLogsDirectorySizeLimit(Integer logsDirectorySizeLimit) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withLogsDirectorySizeLimit(logsDirectorySizeLimit);
        return this;
    }

    /**
     * Get the detailedErrorLoggingEnabled property: &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled;
     * otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the detailedErrorLoggingEnabled value.
     */
    public Boolean detailedErrorLoggingEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().detailedErrorLoggingEnabled();
    }

    /**
     * Set the detailedErrorLoggingEnabled property: &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled;
     * otherwise, &lt;code&gt;false&lt;/code&gt;.
     *
     * @param detailedErrorLoggingEnabled the detailedErrorLoggingEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withDetailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withDetailedErrorLoggingEnabled(detailedErrorLoggingEnabled);
        return this;
    }

    /**
     * Get the publishingUsername property: Publishing user name.
     *
     * @return the publishingUsername value.
     */
    public String publishingUsername() {
        return this.innerProperties() == null ? null : this.innerProperties().publishingUsername();
    }

    /**
     * Set the publishingUsername property: Publishing user name.
     *
     * @param publishingUsername the publishingUsername value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withPublishingUsername(String publishingUsername) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withPublishingUsername(publishingUsername);
        return this;
    }

    /**
     * Get the appSettings property: Application settings.
     *
     * @return the appSettings value.
     */
    public List<NameValuePair> appSettings() {
        return this.innerProperties() == null ? null : this.innerProperties().appSettings();
    }

    /**
     * Set the appSettings property: Application settings.
     *
     * @param appSettings the appSettings value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAppSettings(List<NameValuePair> appSettings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAppSettings(appSettings);
        return this;
    }

    /**
     * Get the azureStorageAccounts property: User-provided Azure storage accounts.
     *
     * @return the azureStorageAccounts value.
     */
    public Map<String, AzureStorageInfoValue> azureStorageAccounts() {
        return this.innerProperties() == null ? null : this.innerProperties().azureStorageAccounts();
    }

    /**
     * Set the azureStorageAccounts property: User-provided Azure storage accounts.
     *
     * @param azureStorageAccounts the azureStorageAccounts value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAzureStorageAccounts(Map<String, AzureStorageInfoValue> azureStorageAccounts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAzureStorageAccounts(azureStorageAccounts);
        return this;
    }

    /**
     * Get the connectionStrings property: Connection strings.
     *
     * @return the connectionStrings value.
     */
    public List<ConnStringInfo> connectionStrings() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionStrings();
    }

    /**
     * Set the connectionStrings property: Connection strings.
     *
     * @param connectionStrings the connectionStrings value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withConnectionStrings(List<ConnStringInfo> connectionStrings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withConnectionStrings(connectionStrings);
        return this;
    }

    /**
     * Get the machineKey property: Site MachineKey.
     *
     * @return the machineKey value.
     */
    public SiteMachineKey machineKey() {
        return this.innerProperties() == null ? null : this.innerProperties().machineKey();
    }

    /**
     * Get the handlerMappings property: Handler mappings.
     *
     * @return the handlerMappings value.
     */
    public List<HandlerMapping> handlerMappings() {
        return this.innerProperties() == null ? null : this.innerProperties().handlerMappings();
    }

    /**
     * Set the handlerMappings property: Handler mappings.
     *
     * @param handlerMappings the handlerMappings value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withHandlerMappings(List<HandlerMapping> handlerMappings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withHandlerMappings(handlerMappings);
        return this;
    }

    /**
     * Get the documentRoot property: Document root.
     *
     * @return the documentRoot value.
     */
    public String documentRoot() {
        return this.innerProperties() == null ? null : this.innerProperties().documentRoot();
    }

    /**
     * Set the documentRoot property: Document root.
     *
     * @param documentRoot the documentRoot value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withDocumentRoot(String documentRoot) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withDocumentRoot(documentRoot);
        return this;
    }

    /**
     * Get the scmType property: SCM type.
     *
     * @return the scmType value.
     */
    public ScmType scmType() {
        return this.innerProperties() == null ? null : this.innerProperties().scmType();
    }

    /**
     * Set the scmType property: SCM type.
     *
     * @param scmType the scmType value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withScmType(ScmType scmType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withScmType(scmType);
        return this;
    }

    /**
     * Get the use32BitWorkerProcess property: &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the use32BitWorkerProcess value.
     */
    public Boolean use32BitWorkerProcess() {
        return this.innerProperties() == null ? null : this.innerProperties().use32BitWorkerProcess();
    }

    /**
     * Set the use32BitWorkerProcess property: &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param use32BitWorkerProcess the use32BitWorkerProcess value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withUse32BitWorkerProcess(Boolean use32BitWorkerProcess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withUse32BitWorkerProcess(use32BitWorkerProcess);
        return this;
    }

    /**
     * Get the webSocketsEnabled property: &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the webSocketsEnabled value.
     */
    public Boolean webSocketsEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().webSocketsEnabled();
    }

    /**
     * Set the webSocketsEnabled property: &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param webSocketsEnabled the webSocketsEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withWebSocketsEnabled(Boolean webSocketsEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withWebSocketsEnabled(webSocketsEnabled);
        return this;
    }

    /**
     * Get the alwaysOn property: &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the alwaysOn value.
     */
    public Boolean alwaysOn() {
        return this.innerProperties() == null ? null : this.innerProperties().alwaysOn();
    }

    /**
     * Set the alwaysOn property: &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param alwaysOn the alwaysOn value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAlwaysOn(Boolean alwaysOn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAlwaysOn(alwaysOn);
        return this;
    }

    /**
     * Get the javaVersion property: Java version.
     *
     * @return the javaVersion value.
     */
    public String javaVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().javaVersion();
    }

    /**
     * Set the javaVersion property: Java version.
     *
     * @param javaVersion the javaVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withJavaVersion(String javaVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withJavaVersion(javaVersion);
        return this;
    }

    /**
     * Get the javaContainer property: Java container.
     *
     * @return the javaContainer value.
     */
    public String javaContainer() {
        return this.innerProperties() == null ? null : this.innerProperties().javaContainer();
    }

    /**
     * Set the javaContainer property: Java container.
     *
     * @param javaContainer the javaContainer value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withJavaContainer(String javaContainer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withJavaContainer(javaContainer);
        return this;
    }

    /**
     * Get the javaContainerVersion property: Java container version.
     *
     * @return the javaContainerVersion value.
     */
    public String javaContainerVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().javaContainerVersion();
    }

    /**
     * Set the javaContainerVersion property: Java container version.
     *
     * @param javaContainerVersion the javaContainerVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withJavaContainerVersion(String javaContainerVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withJavaContainerVersion(javaContainerVersion);
        return this;
    }

    /**
     * Get the appCommandLine property: App command line to launch.
     *
     * @return the appCommandLine value.
     */
    public String appCommandLine() {
        return this.innerProperties() == null ? null : this.innerProperties().appCommandLine();
    }

    /**
     * Set the appCommandLine property: App command line to launch.
     *
     * @param appCommandLine the appCommandLine value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAppCommandLine(String appCommandLine) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAppCommandLine(appCommandLine);
        return this;
    }

    /**
     * Get the managedPipelineMode property: Managed pipeline mode.
     *
     * @return the managedPipelineMode value.
     */
    public ManagedPipelineMode managedPipelineMode() {
        return this.innerProperties() == null ? null : this.innerProperties().managedPipelineMode();
    }

    /**
     * Set the managedPipelineMode property: Managed pipeline mode.
     *
     * @param managedPipelineMode the managedPipelineMode value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withManagedPipelineMode(ManagedPipelineMode managedPipelineMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withManagedPipelineMode(managedPipelineMode);
        return this;
    }

    /**
     * Get the virtualApplications property: Virtual applications.
     *
     * @return the virtualApplications value.
     */
    public List<VirtualApplication> virtualApplications() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualApplications();
    }

    /**
     * Set the virtualApplications property: Virtual applications.
     *
     * @param virtualApplications the virtualApplications value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withVirtualApplications(List<VirtualApplication> virtualApplications) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withVirtualApplications(virtualApplications);
        return this;
    }

    /**
     * Get the loadBalancing property: Site load balancing.
     *
     * @return the loadBalancing value.
     */
    public SiteLoadBalancing loadBalancing() {
        return this.innerProperties() == null ? null : this.innerProperties().loadBalancing();
    }

    /**
     * Set the loadBalancing property: Site load balancing.
     *
     * @param loadBalancing the loadBalancing value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withLoadBalancing(SiteLoadBalancing loadBalancing) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withLoadBalancing(loadBalancing);
        return this;
    }

    /**
     * Get the experiments property: This is work around for polymorphic types.
     *
     * @return the experiments value.
     */
    public Experiments experiments() {
        return this.innerProperties() == null ? null : this.innerProperties().experiments();
    }

    /**
     * Set the experiments property: This is work around for polymorphic types.
     *
     * @param experiments the experiments value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withExperiments(Experiments experiments) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withExperiments(experiments);
        return this;
    }

    /**
     * Get the limits property: Site limits.
     *
     * @return the limits value.
     */
    public SiteLimits limits() {
        return this.innerProperties() == null ? null : this.innerProperties().limits();
    }

    /**
     * Set the limits property: Site limits.
     *
     * @param limits the limits value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withLimits(SiteLimits limits) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withLimits(limits);
        return this;
    }

    /**
     * Get the autoHealEnabled property: &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the autoHealEnabled value.
     */
    public Boolean autoHealEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().autoHealEnabled();
    }

    /**
     * Set the autoHealEnabled property: &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param autoHealEnabled the autoHealEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAutoHealEnabled(Boolean autoHealEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAutoHealEnabled(autoHealEnabled);
        return this;
    }

    /**
     * Get the autoHealRules property: Auto Heal rules.
     *
     * @return the autoHealRules value.
     */
    public AutoHealRules autoHealRules() {
        return this.innerProperties() == null ? null : this.innerProperties().autoHealRules();
    }

    /**
     * Set the autoHealRules property: Auto Heal rules.
     *
     * @param autoHealRules the autoHealRules value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAutoHealRules(AutoHealRules autoHealRules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAutoHealRules(autoHealRules);
        return this;
    }

    /**
     * Get the tracingOptions property: Tracing options.
     *
     * @return the tracingOptions value.
     */
    public String tracingOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().tracingOptions();
    }

    /**
     * Set the tracingOptions property: Tracing options.
     *
     * @param tracingOptions the tracingOptions value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withTracingOptions(String tracingOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withTracingOptions(tracingOptions);
        return this;
    }

    /**
     * Get the vnetName property: Virtual Network name.
     *
     * @return the vnetName value.
     */
    public String vnetName() {
        return this.innerProperties() == null ? null : this.innerProperties().vnetName();
    }

    /**
     * Set the vnetName property: Virtual Network name.
     *
     * @param vnetName the vnetName value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withVnetName(String vnetName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withVnetName(vnetName);
        return this;
    }

    /**
     * Get the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @return the cors value.
     */
    public CorsSettings cors() {
        return this.innerProperties() == null ? null : this.innerProperties().cors();
    }

    /**
     * Set the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @param cors the cors value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withCors(CorsSettings cors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withCors(cors);
        return this;
    }

    /**
     * Get the push property: Push endpoint settings.
     *
     * @return the push value.
     */
    public PushSettingsInner push() {
        return this.innerProperties() == null ? null : this.innerProperties().push();
    }

    /**
     * Set the push property: Push endpoint settings.
     *
     * @param push the push value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withPush(PushSettingsInner push) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withPush(push);
        return this;
    }

    /**
     * Get the apiDefinition property: Information about the formal API definition for the app.
     *
     * @return the apiDefinition value.
     */
    public ApiDefinitionInfo apiDefinition() {
        return this.innerProperties() == null ? null : this.innerProperties().apiDefinition();
    }

    /**
     * Set the apiDefinition property: Information about the formal API definition for the app.
     *
     * @param apiDefinition the apiDefinition value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withApiDefinition(ApiDefinitionInfo apiDefinition) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withApiDefinition(apiDefinition);
        return this;
    }

    /**
     * Get the autoSwapSlotName property: Auto-swap slot name.
     *
     * @return the autoSwapSlotName value.
     */
    public String autoSwapSlotName() {
        return this.innerProperties() == null ? null : this.innerProperties().autoSwapSlotName();
    }

    /**
     * Set the autoSwapSlotName property: Auto-swap slot name.
     *
     * @param autoSwapSlotName the autoSwapSlotName value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withAutoSwapSlotName(String autoSwapSlotName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withAutoSwapSlotName(autoSwapSlotName);
        return this;
    }

    /**
     * Get the localMySqlEnabled property: &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @return the localMySqlEnabled value.
     */
    public Boolean localMySqlEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().localMySqlEnabled();
    }

    /**
     * Set the localMySqlEnabled property: &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise,
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param localMySqlEnabled the localMySqlEnabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withLocalMySqlEnabled(Boolean localMySqlEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withLocalMySqlEnabled(localMySqlEnabled);
        return this;
    }

    /**
     * Get the managedServiceIdentityId property: Managed Service Identity Id.
     *
     * @return the managedServiceIdentityId value.
     */
    public Integer managedServiceIdentityId() {
        return this.innerProperties() == null ? null : this.innerProperties().managedServiceIdentityId();
    }

    /**
     * Set the managedServiceIdentityId property: Managed Service Identity Id.
     *
     * @param managedServiceIdentityId the managedServiceIdentityId value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withManagedServiceIdentityId(Integer managedServiceIdentityId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withManagedServiceIdentityId(managedServiceIdentityId);
        return this;
    }

    /**
     * Get the xManagedServiceIdentityId property: Explicit Managed Service Identity Id.
     *
     * @return the xManagedServiceIdentityId value.
     */
    public Integer xManagedServiceIdentityId() {
        return this.innerProperties() == null ? null : this.innerProperties().xManagedServiceIdentityId();
    }

    /**
     * Set the xManagedServiceIdentityId property: Explicit Managed Service Identity Id.
     *
     * @param xManagedServiceIdentityId the xManagedServiceIdentityId value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withXManagedServiceIdentityId(Integer xManagedServiceIdentityId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withXManagedServiceIdentityId(xManagedServiceIdentityId);
        return this;
    }

    /**
     * Get the ipSecurityRestrictions property: IP security restrictions for main.
     *
     * @return the ipSecurityRestrictions value.
     */
    public List<IpSecurityRestriction> ipSecurityRestrictions() {
        return this.innerProperties() == null ? null : this.innerProperties().ipSecurityRestrictions();
    }

    /**
     * Set the ipSecurityRestrictions property: IP security restrictions for main.
     *
     * @param ipSecurityRestrictions the ipSecurityRestrictions value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withIpSecurityRestrictions(List<IpSecurityRestriction> ipSecurityRestrictions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withIpSecurityRestrictions(ipSecurityRestrictions);
        return this;
    }

    /**
     * Get the scmIpSecurityRestrictions property: IP security restrictions for scm.
     *
     * @return the scmIpSecurityRestrictions value.
     */
    public List<IpSecurityRestriction> scmIpSecurityRestrictions() {
        return this.innerProperties() == null ? null : this.innerProperties().scmIpSecurityRestrictions();
    }

    /**
     * Set the scmIpSecurityRestrictions property: IP security restrictions for scm.
     *
     * @param scmIpSecurityRestrictions the scmIpSecurityRestrictions value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withScmIpSecurityRestrictions(
        List<IpSecurityRestriction> scmIpSecurityRestrictions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withScmIpSecurityRestrictions(scmIpSecurityRestrictions);
        return this;
    }

    /**
     * Get the scmIpSecurityRestrictionsUseMain property: IP security restrictions for scm to use main.
     *
     * @return the scmIpSecurityRestrictionsUseMain value.
     */
    public Boolean scmIpSecurityRestrictionsUseMain() {
        return this.innerProperties() == null ? null : this.innerProperties().scmIpSecurityRestrictionsUseMain();
    }

    /**
     * Set the scmIpSecurityRestrictionsUseMain property: IP security restrictions for scm to use main.
     *
     * @param scmIpSecurityRestrictionsUseMain the scmIpSecurityRestrictionsUseMain value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withScmIpSecurityRestrictionsUseMain(Boolean scmIpSecurityRestrictionsUseMain) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withScmIpSecurityRestrictionsUseMain(scmIpSecurityRestrictionsUseMain);
        return this;
    }

    /**
     * Get the http20Enabled property: Http20Enabled: configures a web site to allow clients to connect over http2.0.
     *
     * @return the http20Enabled value.
     */
    public Boolean http20Enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().http20Enabled();
    }

    /**
     * Set the http20Enabled property: Http20Enabled: configures a web site to allow clients to connect over http2.0.
     *
     * @param http20Enabled the http20Enabled value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withHttp20Enabled(Boolean http20Enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withHttp20Enabled(http20Enabled);
        return this;
    }

    /**
     * Get the minTlsVersion property: MinTlsVersion: configures the minimum version of TLS required for SSL requests.
     *
     * @return the minTlsVersion value.
     */
    public SupportedTlsVersions minTlsVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().minTlsVersion();
    }

    /**
     * Set the minTlsVersion property: MinTlsVersion: configures the minimum version of TLS required for SSL requests.
     *
     * @param minTlsVersion the minTlsVersion value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withMinTlsVersion(SupportedTlsVersions minTlsVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withMinTlsVersion(minTlsVersion);
        return this;
    }

    /**
     * Get the ftpsState property: State of FTP / FTPS service.
     *
     * @return the ftpsState value.
     */
    public FtpsState ftpsState() {
        return this.innerProperties() == null ? null : this.innerProperties().ftpsState();
    }

    /**
     * Set the ftpsState property: State of FTP / FTPS service.
     *
     * @param ftpsState the ftpsState value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withFtpsState(FtpsState ftpsState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withFtpsState(ftpsState);
        return this;
    }

    /**
     * Get the reservedInstanceCount property: Number of reserved instances. This setting only applies to the
     * Consumption Plan.
     *
     * @return the reservedInstanceCount value.
     */
    public Integer reservedInstanceCount() {
        return this.innerProperties() == null ? null : this.innerProperties().reservedInstanceCount();
    }

    /**
     * Set the reservedInstanceCount property: Number of reserved instances. This setting only applies to the
     * Consumption Plan.
     *
     * @param reservedInstanceCount the reservedInstanceCount value to set.
     * @return the SiteConfigResourceInner object itself.
     */
    public SiteConfigResourceInner withReservedInstanceCount(Integer reservedInstanceCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SiteConfigInner();
        }
        this.innerProperties().withReservedInstanceCount(reservedInstanceCount);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
