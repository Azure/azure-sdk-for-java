// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migrationdiscoverysap.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the SAP Instance properties.
 */
@Immutable
public final class SapInstanceProperties implements JsonSerializable<SapInstanceProperties> {
    /*
     * This is the SID of SAP System. Keeping this not equal to ID as different landscapes can have repeated System SID
     * IDs.
     */
    private String systemSid;

    /*
     * The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the list of available dropdown
     * values.
     */
    private SapInstanceEnvironment environment;

    /*
     * This is the SID of the production system in a landscape. An SAP system could itself be a production SID or a part
     * of a landscape with a different Production SID. This field can be used to relate non-prod SIDs, other components,
     * SID (WEBDISP) to the prod SID. Enter the value of Production SID.
     */
    private String landscapeSid;

    /*
     * Enter a business function/department identifier to group multiple SIDs.
     */
    private String application;

    /*
     * Defines the provisioning states.
     */
    private ProvisioningState provisioningState;

    /*
     * Defines the errors related to SAP Instance resource.
     */
    private SapMigrateError errors;

    /**
     * Creates an instance of SapInstanceProperties class.
     */
    public SapInstanceProperties() {
    }

    /**
     * Get the systemSid property: This is the SID of SAP System. Keeping this not equal to ID as different landscapes
     * can have repeated System SID IDs.
     * 
     * @return the systemSid value.
     */
    public String systemSid() {
        return this.systemSid;
    }

    /**
     * Get the environment property: The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the
     * list of available dropdown values.
     * 
     * @return the environment value.
     */
    public SapInstanceEnvironment environment() {
        return this.environment;
    }

    /**
     * Get the landscapeSid property: This is the SID of the production system in a landscape. An SAP system could
     * itself be a production SID or a part of a landscape with a different Production SID. This field can be used to
     * relate non-prod SIDs, other components, SID (WEBDISP) to the prod SID. Enter the value of Production SID.
     * 
     * @return the landscapeSid value.
     */
    public String landscapeSid() {
        return this.landscapeSid;
    }

    /**
     * Get the application property: Enter a business function/department identifier to group multiple SIDs.
     * 
     * @return the application value.
     */
    public String application() {
        return this.application;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Defines the errors related to SAP Instance resource.
     * 
     * @return the errors value.
     */
    public SapMigrateError errors() {
        return this.errors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SapInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SapInstanceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SapInstanceProperties.
     */
    public static SapInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SapInstanceProperties deserializedSapInstanceProperties = new SapInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("systemSid".equals(fieldName)) {
                    deserializedSapInstanceProperties.systemSid = reader.getString();
                } else if ("environment".equals(fieldName)) {
                    deserializedSapInstanceProperties.environment
                        = SapInstanceEnvironment.fromString(reader.getString());
                } else if ("landscapeSid".equals(fieldName)) {
                    deserializedSapInstanceProperties.landscapeSid = reader.getString();
                } else if ("application".equals(fieldName)) {
                    deserializedSapInstanceProperties.application = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSapInstanceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    deserializedSapInstanceProperties.errors = SapMigrateError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSapInstanceProperties;
        });
    }
}
