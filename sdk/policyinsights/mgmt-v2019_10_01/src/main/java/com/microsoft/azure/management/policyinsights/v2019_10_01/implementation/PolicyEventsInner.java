/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryFailureException;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryOptions;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicyEvents.
 */
public class PolicyEventsInner {
    /** The Retrofit service to perform REST calls. */
    private PolicyEventsService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyEventsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyEventsInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(PolicyEventsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyEvents to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicyEventsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroup(@Path("policyEventsResource") String policyEventsResource, @Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupName") String managementGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscription(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroup(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResource(@Path("policyEventsResource") String policyEventsResource, @Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$expand") String expand, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicySetDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicySetDefinition(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policySetDefinitionName") String policySetDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicyDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicyDefinition(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyDefinitionName") String policyDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscriptionLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionLevelPolicyAssignment(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroupLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupLevelPolicyAssignment(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForManagementGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicySetDefinitionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForPolicySetDefinitionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicyDefinitionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForPolicyDefinitionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscriptionLevelPolicyAssignmentNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionLevelPolicyAssignmentNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroupLevelPolicyAssignmentNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupLevelPolicyAssignmentNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForManagementGroup(final String managementGroupName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForManagementGroupSinglePageAsync(managementGroupName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(managementGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final String managementGroupName) {
        return listQueryResultsForManagementGroupSinglePageAsync(managementGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupSinglePageAsync(final String managementGroupName) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForManagementGroup(final String managementGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param managementGroupName Management group name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupSinglePageAsync(final String managementGroupName, final QueryOptions queryOptions) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForManagementGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscription(final String subscriptionId) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionSinglePageAsync(subscriptionId).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final String subscriptionId) {
        return listQueryResultsForSubscriptionSinglePageAsync(subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionSinglePageAsync(final String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscription(final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionSinglePageAsync(final String subscriptionId, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForSubscriptionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroup(final String subscriptionId, final String resourceGroupName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupAsync(final String subscriptionId, final String resourceGroupName) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName) {
        return listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroup(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResource(final String resourceId) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceSinglePageAsync(resourceId).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceAsync(final String resourceId, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(resourceId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceAsync(final String resourceId) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceWithServiceResponseAsync(final String resourceId) {
        return listQueryResultsForResourceSinglePageAsync(resourceId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceSinglePageAsync(final String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String expand = null;
        String skipToken = null;
        return service.listQueryResultsForResource(policyEventsResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, expand, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResource(final String resourceId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceAsync(final String resourceId, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceAsync(final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceWithServiceResponseAsync(final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceSinglePageAsync(final String resourceId, final QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String expand = null;
        if (queryOptions != null) {
            expand = queryOptions.expand();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResource(policyEventsResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, expand, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicySetDefinition(final String subscriptionId, final String policySetDefinitionName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicySetDefinitionAsync(final String subscriptionId, final String policySetDefinitionName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicySetDefinitionAsync(final String subscriptionId, final String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(final String subscriptionId, final String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionSinglePageAsync(final String subscriptionId, final String policySetDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForPolicySetDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicySetDefinition(final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicySetDefinitionAsync(final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicySetDefinitionAsync(final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionSinglePageAsync(subscriptionId, policySetDefinitionName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param policySetDefinitionName Policy set definition name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionSinglePageAsync(final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForPolicySetDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForPolicySetDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicyDefinition(final String subscriptionId, final String policyDefinitionName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicyDefinitionAsync(final String subscriptionId, final String policyDefinitionName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicyDefinitionAsync(final String subscriptionId, final String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(final String subscriptionId, final String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionSinglePageAsync(final String subscriptionId, final String policyDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForPolicyDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicyDefinition(final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicyDefinitionAsync(final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicyDefinitionAsync(final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionSinglePageAsync(subscriptionId, policyDefinitionName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param policyDefinitionName Policy definition name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionSinglePageAsync(final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForPolicyDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForPolicyDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscriptionLevelPolicyAssignment(final String subscriptionId, final String policyAssignmentName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final String subscriptionId, final String policyAssignmentName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final String subscriptionId, final String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(final String subscriptionId, final String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(final String subscriptionId, final String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyEventsResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscriptionLevelPolicyAssignment(final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(subscriptionId, policyAssignmentName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param policyAssignmentName Policy assignment name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyEventsResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroupLevelPolicyAssignment(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyEventsResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroupLevelPolicyAssignment(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param policyAssignmentName Policy assignment name.
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyEventsResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForManagementGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForManagementGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForManagementGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForManagementGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForManagementGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForSubscriptionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicySetDefinitionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicySetDefinitionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicySetDefinitionNextAsync(final String nextPageLink) {
        return listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForPolicySetDefinitionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicySetDefinitionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForPolicySetDefinitionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForPolicyDefinitionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForPolicyDefinitionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForPolicyDefinitionNextAsync(final String nextPageLink) {
        return listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForPolicyDefinitionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForPolicyDefinitionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForPolicyDefinitionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForPolicyDefinitionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForSubscriptionLevelPolicyAssignmentNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForSubscriptionLevelPolicyAssignmentNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyEventInner&gt; object if successful.
     */
    public PagedList<PolicyEventInner> listQueryResultsForResourceGroupLevelPolicyAssignmentNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyEventInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyEventInner>(response.body()) {
            @Override
            public Page<PolicyEventInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyEventInner>> serviceFuture, final ListOperationCallback<PolicyEventInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<Page<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyEventInner>>, Page<PolicyEventInner>>() {
                @Override
                public Page<PolicyEventInner> call(ServiceResponse<Page<PolicyEventInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyEventInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyEventInner>>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(ServiceResponse<Page<PolicyEventInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyEventInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyEventInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyEventInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceGroupLevelPolicyAssignmentNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyEventInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyEventInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyEventInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyEventInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyEventInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyEventInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyEventInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

}
