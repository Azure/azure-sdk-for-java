/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryFailureException;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryOptions;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicyEvents.
 */
public class PolicyEventsInner {
    /** The Retrofit service to perform REST calls. */
    private PolicyEventsService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyEventsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyEventsInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(PolicyEventsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyEvents to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicyEventsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroup(@Path("policyEventsResource") String policyEventsResource, @Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupName") String managementGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscription(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroup(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResource(@Path("policyEventsResource") String policyEventsResource, @Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicySetDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicySetDefinition(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policySetDefinitionName") String policySetDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForPolicyDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicyDefinition(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyDefinitionName") String policyDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForSubscriptionLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionLevelPolicyAssignment(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents listQueryResultsForResourceGroupLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupLevelPolicyAssignment(@Path("policyEventsResource") String policyEventsResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents getMetadata" })
        @GET("{scope}/providers/Microsoft.PolicyInsights/policyEvents/$metadata")
        Observable<Response<ResponseBody>> getMetadata(@Path(value = "scope", encoded = true) String scope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForManagementGroup(String managementGroupName) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForManagementGroupAsync(String managementGroupName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForManagementGroupAsync(String managementGroupName) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForManagementGroupWithServiceResponseAsync(String managementGroupName) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForManagementGroup(String managementGroupName, QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForManagementGroupAsync(String managementGroupName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForManagementGroupAsync(String managementGroupName, QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForManagementGroupWithServiceResponseAsync(String managementGroupName, QueryOptions queryOptions) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForManagementGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForSubscription(String subscriptionId) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionAsync(String subscriptionId, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionAsync(String subscriptionId) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForSubscriptionWithServiceResponseAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForSubscription(String subscriptionId, QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionAsync(String subscriptionId, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionAsync(String subscriptionId, QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForSubscriptionWithServiceResponseAsync(String subscriptionId, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResourceGroup(String subscriptionId, String resourceGroupName) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupAsync(String subscriptionId, String resourceGroupName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupAsync(String subscriptionId, String resourceGroupName) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResourceGroup(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResource(String resourceId) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceAsync(String resourceId, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceWithServiceResponseAsync(resourceId), serviceCallback);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceAsync(String resourceId) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceWithServiceResponseAsync(String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForResource(policyEventsResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResource(String resourceId, QueryOptions queryOptions) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceAsync(String resourceId, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceWithServiceResponseAsync(resourceId, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceAsync(String resourceId, QueryOptions queryOptions) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceWithServiceResponseAsync(String resourceId, QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForResource(policyEventsResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForResourceDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForPolicySetDefinition(String subscriptionId, String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(String subscriptionId, String policySetDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForPolicySetDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForPolicySetDefinition(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForPolicySetDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForPolicySetDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForPolicyDefinition(String subscriptionId, String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(String subscriptionId, String policyDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForPolicyDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForPolicyDefinition(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForPolicyDefinition(policyEventsResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForPolicyDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForSubscriptionLevelPolicyAssignment(String subscriptionId, String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyEventsResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForSubscriptionLevelPolicyAssignment(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyEventsResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResourceGroupLevelPolicyAssignment(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName), serviceCallback);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyEventsResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PolicyEventsQueryResultsInner object if successful.
     */
    public PolicyEventsQueryResultsInner listQueryResultsForResourceGroupLevelPolicyAssignment(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).toBlocking().single().body();
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions, final ServiceCallback<PolicyEventsQueryResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions), serviceCallback);
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).map(new Func1<ServiceResponse<PolicyEventsQueryResultsInner>, PolicyEventsQueryResultsInner>() {
            @Override
            public PolicyEventsQueryResultsInner call(ServiceResponse<PolicyEventsQueryResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Queries policy events for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PolicyEventsQueryResultsInner object
     */
    public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyEventsResource = "default";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2018-04-04";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyEventsResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PolicyEventsQueryResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PolicyEventsQueryResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PolicyEventsQueryResultsInner> clientResponse = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PolicyEventsQueryResultsInner> listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PolicyEventsQueryResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PolicyEventsQueryResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Gets OData metadata XML document.
     *
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String getMetadata(String scope) {
        return getMetadataWithServiceResponseAsync(scope).toBlocking().single().body();
    }

    /**
     * Gets OData metadata XML document.
     *
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> getMetadataAsync(String scope, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(getMetadataWithServiceResponseAsync(scope), serviceCallback);
    }

    /**
     * Gets OData metadata XML document.
     *
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> getMetadataAsync(String scope) {
        return getMetadataWithServiceResponseAsync(scope).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets OData metadata XML document.
     *
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> getMetadataWithServiceResponseAsync(String scope) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        final String apiVersion = "2018-04-04";
        return service.getMetadata(scope, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = getMetadataDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> getMetadataDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<String, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

}
