/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.policyinsights.v2019_10_01.implementation.RemediationInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.policyinsights.v2019_10_01.implementation.PolicyInsightsManager;
import org.joda.time.DateTime;

/**
 * Type representing Remediation.
 */
public interface Remediation extends HasInner<RemediationInner>, Indexable, Updatable<Remediation.Update>, HasManager<PolicyInsightsManager> {
    /**
     * @return the createdOn value.
     */
    DateTime createdOn();

    /**
     * @return the deploymentStatus value.
     */
    RemediationDeploymentSummary deploymentStatus();

    /**
     * @return the filters value.
     */
    RemediationFilters filters();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the lastUpdatedOn value.
     */
    DateTime lastUpdatedOn();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the policyAssignmentId value.
     */
    String policyAssignmentId();

    /**
     * @return the policyDefinitionReferenceId value.
     */
    String policyDefinitionReferenceId();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the resourceDiscoveryMode value.
     */
    ResourceDiscoveryMode resourceDiscoveryMode();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the Remediation definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithManagementGroupId, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Remediation definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Remediation definition.
         */
        interface Blank extends WithManagementGroupId {
        }

        /**
         * The stage of the remediation definition allowing to specify Microsoft.PolicyInsight.
         */
        interface WithManagementGroupId {
           /**
            * Specifies managementGroupId.
            * @param managementGroupId Management group ID
            * @return the next definition stage
            */
            WithCreate withManagementGroupId(String managementGroupId);
        }

        /**
         * The stage of the remediation definition allowing to specify Filters.
         */
        interface WithFilters {
            /**
             * Specifies filters.
             * @param filters The filters that will be applied to determine which resources to remediate
             * @return the next definition stage
             */
            WithCreate withFilters(RemediationFilters filters);
        }

        /**
         * The stage of the remediation definition allowing to specify PolicyAssignmentId.
         */
        interface WithPolicyAssignmentId {
            /**
             * Specifies policyAssignmentId.
             * @param policyAssignmentId The resource ID of the policy assignment that should be remediated
             * @return the next definition stage
             */
            WithCreate withPolicyAssignmentId(String policyAssignmentId);
        }

        /**
         * The stage of the remediation definition allowing to specify PolicyDefinitionReferenceId.
         */
        interface WithPolicyDefinitionReferenceId {
            /**
             * Specifies policyDefinitionReferenceId.
             * @param policyDefinitionReferenceId The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition
             * @return the next definition stage
             */
            WithCreate withPolicyDefinitionReferenceId(String policyDefinitionReferenceId);
        }

        /**
         * The stage of the remediation definition allowing to specify ResourceDiscoveryMode.
         */
        interface WithResourceDiscoveryMode {
            /**
             * Specifies resourceDiscoveryMode.
             * @param resourceDiscoveryMode The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified. Possible values include: 'ExistingNonCompliant', 'ReEvaluateCompliance'
             * @return the next definition stage
             */
            WithCreate withResourceDiscoveryMode(ResourceDiscoveryMode resourceDiscoveryMode);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Remediation>, DefinitionStages.WithFilters, DefinitionStages.WithPolicyAssignmentId, DefinitionStages.WithPolicyDefinitionReferenceId, DefinitionStages.WithResourceDiscoveryMode {
        }
    }
    /**
     * The template for a Remediation update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Remediation>, UpdateStages.WithFilters, UpdateStages.WithPolicyAssignmentId, UpdateStages.WithPolicyDefinitionReferenceId, UpdateStages.WithResourceDiscoveryMode {
    }

    /**
     * Grouping of Remediation update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the remediation update allowing to specify Filters.
         */
        interface WithFilters {
            /**
             * Specifies filters.
             * @param filters The filters that will be applied to determine which resources to remediate
             * @return the next update stage
             */
            Update withFilters(RemediationFilters filters);
        }

        /**
         * The stage of the remediation update allowing to specify PolicyAssignmentId.
         */
        interface WithPolicyAssignmentId {
            /**
             * Specifies policyAssignmentId.
             * @param policyAssignmentId The resource ID of the policy assignment that should be remediated
             * @return the next update stage
             */
            Update withPolicyAssignmentId(String policyAssignmentId);
        }

        /**
         * The stage of the remediation update allowing to specify PolicyDefinitionReferenceId.
         */
        interface WithPolicyDefinitionReferenceId {
            /**
             * Specifies policyDefinitionReferenceId.
             * @param policyDefinitionReferenceId The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition
             * @return the next update stage
             */
            Update withPolicyDefinitionReferenceId(String policyDefinitionReferenceId);
        }

        /**
         * The stage of the remediation update allowing to specify ResourceDiscoveryMode.
         */
        interface WithResourceDiscoveryMode {
            /**
             * Specifies resourceDiscoveryMode.
             * @param resourceDiscoveryMode The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified. Possible values include: 'ExistingNonCompliant', 'ReEvaluateCompliance'
             * @return the next update stage
             */
            Update withResourceDiscoveryMode(ResourceDiscoveryMode resourceDiscoveryMode);
        }

    }
}
