/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEvents;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyEventsQueryResults;

class PolicyEventsImpl extends WrapperImpl<PolicyEventsInner> implements PolicyEvents {
    private final PolicyInsightsManager manager;

    PolicyEventsImpl(PolicyInsightsManager manager) {
        super(manager.inner().policyEvents());
        this.manager = manager;
    }

    public PolicyInsightsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForManagementGroupAsync(String managementGroupName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForManagementGroupAsync(managementGroupName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForSubscriptionAsync(String subscriptionId) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForSubscriptionAsync(subscriptionId)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForResourceGroupAsync(String subscriptionId, String resourceGroupName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForResourceGroupAsync(subscriptionId, resourceGroupName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForResourceAsync(String resourceId) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForResourceAsync(resourceId)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForPolicySetDefinitionAsync(subscriptionId, policySetDefinitionName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForPolicyDefinitionAsync(subscriptionId, policyDefinitionName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(subscriptionId, policyAssignmentName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PolicyEventsQueryResults> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        PolicyEventsInner client = this.inner();
        return client.listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(subscriptionId, resourceGroupName, policyAssignmentName)
        .map(new Func1<PolicyEventsQueryResultsInner, PolicyEventsQueryResults>() {
            @Override
            public PolicyEventsQueryResults call(PolicyEventsQueryResultsInner inner) {
                return new PolicyEventsQueryResultsImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<String> getMetadataAsync(String scope) {
        PolicyEventsInner client = this.inner();
        return client.getMetadataAsync(scope)
    ;}

}
