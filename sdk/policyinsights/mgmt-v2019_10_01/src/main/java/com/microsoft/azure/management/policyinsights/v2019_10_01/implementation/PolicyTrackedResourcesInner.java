/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryFailureException;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryOptions;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicyTrackedResources.
 */
public class PolicyTrackedResourcesInner {
    /** The Retrofit service to perform REST calls. */
    private PolicyTrackedResourcesService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyTrackedResourcesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyTrackedResourcesInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(PolicyTrackedResourcesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyTrackedResources to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicyTrackedResourcesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupName") String managementGroupName, @Path("policyTrackedResourcesResource") String policyTrackedResourcesResource, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscription(@Path("policyTrackedResourcesResource") String policyTrackedResourcesResource, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("policyTrackedResourcesResource") String policyTrackedResourcesResource, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("policyTrackedResourcesResource") String policyTrackedResourcesResource, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForManagementGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyTrackedResources listQueryResultsForResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForManagementGroup(final String managementGroupName) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForManagementGroupSinglePageAsync(managementGroupName).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(managementGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final String managementGroupName) {
        return listQueryResultsForManagementGroupSinglePageAsync(managementGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupSinglePageAsync(final String managementGroupName) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listQueryResultsForManagementGroup(managementGroupsNamespace, managementGroupName, policyTrackedResourcesResource, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForManagementGroup(final String managementGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final QueryOptions queryOptions, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupAsync(final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupSinglePageAsync(managementGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param managementGroupName Management group name.
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupSinglePageAsync(final String managementGroupName, final QueryOptions queryOptions) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String managementGroupsNamespace = "Microsoft.Management";
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listQueryResultsForManagementGroup(managementGroupsNamespace, managementGroupName, policyTrackedResourcesResource, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForSubscription(final String subscriptionId) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForSubscriptionSinglePageAsync(subscriptionId).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final String subscriptionId) {
        return listQueryResultsForSubscriptionSinglePageAsync(subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionSinglePageAsync(final String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listQueryResultsForSubscription(policyTrackedResourcesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForSubscription(final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionSinglePageAsync(subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionSinglePageAsync(final String subscriptionId, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listQueryResultsForSubscription(policyTrackedResourcesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResourceGroup(final String resourceGroupName, final String subscriptionId) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupAsync(final String resourceGroupName, final String subscriptionId, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupAsync(final String resourceGroupName, final String subscriptionId) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(resourceGroupName, subscriptionId)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String subscriptionId) {
        return listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupSinglePageAsync(final String resourceGroupName, final String subscriptionId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listQueryResultsForResourceGroup(resourceGroupName, policyTrackedResourcesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResourceGroup(final String resourceGroupName, final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupAsync(final String resourceGroupName, final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupAsync(final String resourceGroupName, final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(resourceGroupName, subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupSinglePageAsync(resourceGroupName, subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupSinglePageAsync(final String resourceGroupName, final String subscriptionId, final QueryOptions queryOptions) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listQueryResultsForResourceGroup(resourceGroupName, policyTrackedResourcesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResource(final String resourceId) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceSinglePageAsync(resourceId).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceAsync(final String resourceId, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(resourceId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceAsync(final String resourceId) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceWithServiceResponseAsync(final String resourceId) {
        return listQueryResultsForResourceSinglePageAsync(resourceId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceSinglePageAsync(final String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listQueryResultsForResource(resourceId, policyTrackedResourcesResource, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResource(final String resourceId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceAsync(final String resourceId, final QueryOptions queryOptions, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceAsync(final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceWithServiceResponseAsync(resourceId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceWithServiceResponseAsync(final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceSinglePageAsync(resourceId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceSinglePageAsync(final String resourceId, final QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyTrackedResourcesResource = "default";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listQueryResultsForResource(resourceId, policyTrackedResourcesResource, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForResourceDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForManagementGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyTrackedResourceInner>> serviceFuture, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the management group.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForManagementGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForManagementGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForManagementGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForManagementGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyTrackedResourceInner>> serviceFuture, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the subscription.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForSubscriptionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyTrackedResourceInner>> serviceFuture, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource group.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForResourceGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object if successful.
     */
    public PagedList<PolicyTrackedResourceInner> listQueryResultsForResourceNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyTrackedResourceInner>> response = listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyTrackedResourceInner>(response.body()) {
            @Override
            public Page<PolicyTrackedResourceInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyTrackedResourceInner>> listQueryResultsForResourceNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyTrackedResourceInner>> serviceFuture, final ListOperationCallback<PolicyTrackedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<Page<PolicyTrackedResourceInner>> listQueryResultsForResourceNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Page<PolicyTrackedResourceInner>>() {
                @Override
                public Page<PolicyTrackedResourceInner> call(ServiceResponse<Page<PolicyTrackedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyTrackedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyTrackedResourceInner>>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(ServiceResponse<Page<PolicyTrackedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy tracked resources under the resource.
     *
    ServiceResponse<PageImpl<PolicyTrackedResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyTrackedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> listQueryResultsForResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyTrackedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PolicyTrackedResourceInner>> result = listQueryResultsForResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyTrackedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PolicyTrackedResourceInner>> listQueryResultsForResourceNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PolicyTrackedResourceInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PolicyTrackedResourceInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

}
