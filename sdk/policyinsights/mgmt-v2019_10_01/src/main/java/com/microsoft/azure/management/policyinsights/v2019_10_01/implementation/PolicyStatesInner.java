/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2019_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStatesResource;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryFailureException;
import com.microsoft.azure.management.policyinsights.v2019_10_01.QueryOptions;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in PolicyStates.
 */
public class PolicyStatesInner {
    /** The Retrofit service to perform REST calls. */
    private PolicyStatesService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of PolicyStatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyStatesInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(PolicyStatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyStates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PolicyStatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroup(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupName") String managementGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForManagementGroup(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupName") String managementGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscription(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForSubscription(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroup(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForResourceGroup(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResource(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$expand") String expand, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForResource(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates triggerSubscriptionEvaluation" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation")
        Observable<Response<ResponseBody>> triggerSubscriptionEvaluation(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates beginTriggerSubscriptionEvaluation" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation")
        Observable<Response<ResponseBody>> beginTriggerSubscriptionEvaluation(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates triggerResourceGroupEvaluation" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation")
        Observable<Response<ResponseBody>> triggerResourceGroupEvaluation(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates beginTriggerResourceGroupEvaluation" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation")
        Observable<Response<ResponseBody>> beginTriggerResourceGroupEvaluation(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForPolicySetDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicySetDefinition(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policySetDefinitionName") String policySetDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForPolicySetDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForPolicySetDefinition(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policySetDefinitionName") String policySetDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForPolicyDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForPolicyDefinition(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyDefinitionName") String policyDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForPolicyDefinition" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForPolicyDefinition(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyDefinitionName") String policyDefinitionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForSubscriptionLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionLevelPolicyAssignment(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForSubscriptionLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForSubscriptionLevelPolicyAssignment(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResourceGroupLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults")
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupLevelPolicyAssignment(@Path("policyStatesResource") PolicyStatesResource policyStatesResource1, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$orderby") String orderBy, @Query("$select") String select, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Query("$apply") String apply, @Query("$skiptoken") String skipToken, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates summarizeForResourceGroupLevelPolicyAssignment" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize")
        Observable<Response<ResponseBody>> summarizeForResourceGroupLevelPolicyAssignment(@Path("policyStatesSummaryResource") String policyStatesSummaryResource, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("authorizationNamespace") String authorizationNamespace, @Path("policyAssignmentName") String policyAssignmentName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$from") DateTime from, @Query("$to") DateTime to, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForManagementGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForManagementGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForPolicySetDefinitionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForPolicySetDefinitionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForPolicyDefinitionNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForPolicyDefinitionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForSubscriptionLevelPolicyAssignmentNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForSubscriptionLevelPolicyAssignmentNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2019_10_01.PolicyStates listQueryResultsForResourceGroupLevelPolicyAssignmentNext" })
        @GET
        Observable<Response<ResponseBody>> listQueryResultsForResourceGroupLevelPolicyAssignmentNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForManagementGroup(final PolicyStatesResource policyStatesResource, final String managementGroupName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForManagementGroupAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForManagementGroupAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(policyStatesResource, managementGroupName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName) {
        return listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupSinglePageAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForManagementGroup(policyStatesResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForManagementGroup(final PolicyStatesResource policyStatesResource, final String managementGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForManagementGroupAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForManagementGroupAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupWithServiceResponseAsync(policyStatesResource, managementGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForManagementGroupSinglePageAsync(policyStatesResource, managementGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param managementGroupName Management group name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupSinglePageAsync(final PolicyStatesResource policyStatesResource, final String managementGroupName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForManagementGroup(policyStatesResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForManagementGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForManagementGroup(String managementGroupName) {
        return summarizeForManagementGroupWithServiceResponseAsync(managementGroupName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForManagementGroupAsync(String managementGroupName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForManagementGroupWithServiceResponseAsync(managementGroupName), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForManagementGroupAsync(String managementGroupName) {
        return summarizeForManagementGroupWithServiceResponseAsync(managementGroupName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForManagementGroupWithServiceResponseAsync(String managementGroupName) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForManagementGroup(policyStatesSummaryResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForManagementGroup(String managementGroupName, QueryOptions queryOptions) {
        return summarizeForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForManagementGroupAsync(String managementGroupName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForManagementGroupAsync(String managementGroupName, QueryOptions queryOptions) {
        return summarizeForManagementGroupWithServiceResponseAsync(managementGroupName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the management group.
     *
     * @param managementGroupName Management group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForManagementGroupWithServiceResponseAsync(String managementGroupName, QueryOptions queryOptions) {
        if (managementGroupName == null) {
            throw new IllegalArgumentException("Parameter managementGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForManagementGroup(policyStatesSummaryResource, managementGroupsNamespace, managementGroupName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForManagementGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscription(final PolicyStatesResource policyStatesResource, final String subscriptionId) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(policyStatesResource, subscriptionId)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId) {
        return listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForSubscription(policyStatesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscription(final PolicyStatesResource policyStatesResource, final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionWithServiceResponseAsync(policyStatesResource, subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionSinglePageAsync(policyStatesResource, subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForSubscription(policyStatesResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForSubscriptionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForSubscription(String subscriptionId) {
        return summarizeForSubscriptionWithServiceResponseAsync(subscriptionId).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForSubscriptionAsync(String subscriptionId, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForSubscriptionWithServiceResponseAsync(subscriptionId), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForSubscriptionAsync(String subscriptionId) {
        return summarizeForSubscriptionWithServiceResponseAsync(subscriptionId).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForSubscriptionWithServiceResponseAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForSubscription(policyStatesSummaryResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForSubscription(String subscriptionId, QueryOptions queryOptions) {
        return summarizeForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForSubscriptionAsync(String subscriptionId, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForSubscriptionAsync(String subscriptionId, QueryOptions queryOptions) {
        return summarizeForSubscriptionWithServiceResponseAsync(subscriptionId, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForSubscriptionWithServiceResponseAsync(String subscriptionId, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForSubscription(policyStatesSummaryResource, subscriptionId, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForSubscriptionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroup(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(policyStatesResource, subscriptionId, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName) {
        return listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroup(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupWithServiceResponseAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResourceGroup(policyStatesResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResourceGroup(String subscriptionId, String resourceGroupName) {
        return summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceGroupAsync(String subscriptionId, String resourceGroupName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceGroupAsync(String subscriptionId, String resourceGroupName) {
        return summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForResourceGroup(policyStatesSummaryResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResourceGroup(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        return summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceGroupAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceGroupAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        return summarizeForResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForResourceGroup(policyStatesSummaryResource, subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForResourceGroupDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResource(final PolicyStatesResource policyStatesResource, final String resourceId) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceAsync(final PolicyStatesResource policyStatesResource, final String resourceId, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceAsync(final PolicyStatesResource policyStatesResource, final String resourceId) {
        return listQueryResultsForResourceWithServiceResponseAsync(policyStatesResource, resourceId)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String resourceId) {
        return listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceSinglePageAsync(final PolicyStatesResource policyStatesResource, final String resourceId) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String expand = null;
        String skipToken = null;
        return service.listQueryResultsForResource(policyStatesResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, expand, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResource(final PolicyStatesResource policyStatesResource, final String resourceId, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceAsync(final PolicyStatesResource policyStatesResource, final String resourceId, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceAsync(final PolicyStatesResource policyStatesResource, final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceWithServiceResponseAsync(policyStatesResource, resourceId, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String resourceId, final QueryOptions queryOptions) {
        return listQueryResultsForResourceSinglePageAsync(policyStatesResource, resourceId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceSinglePageAsync(final PolicyStatesResource policyStatesResource, final String resourceId, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String expand = null;
        if (queryOptions != null) {
            expand = queryOptions.expand();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResource(policyStatesResource, resourceId, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, expand, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResource(String resourceId) {
        return summarizeForResourceWithServiceResponseAsync(resourceId).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceAsync(String resourceId, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceWithServiceResponseAsync(resourceId), serviceCallback);
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceAsync(String resourceId) {
        return summarizeForResourceWithServiceResponseAsync(resourceId).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceWithServiceResponseAsync(String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForResource(policyStatesSummaryResource, resourceId, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResource(String resourceId, QueryOptions queryOptions) {
        return summarizeForResourceWithServiceResponseAsync(resourceId, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceAsync(String resourceId, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceWithServiceResponseAsync(resourceId, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceAsync(String resourceId, QueryOptions queryOptions) {
        return summarizeForResourceWithServiceResponseAsync(resourceId, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceWithServiceResponseAsync(String resourceId, QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForResource(policyStatesSummaryResource, resourceId, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForResourceDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void triggerSubscriptionEvaluation(String subscriptionId) {
        triggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId).toBlocking().last().body();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> triggerSubscriptionEvaluationAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(triggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId), serviceCallback);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> triggerSubscriptionEvaluationAsync(String subscriptionId) {
        return triggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> triggerSubscriptionEvaluationWithServiceResponseAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        Observable<Response<ResponseBody>> observable = service.triggerSubscriptionEvaluation(subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginTriggerSubscriptionEvaluation(String subscriptionId) {
        beginTriggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId).toBlocking().single().body();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginTriggerSubscriptionEvaluationAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginTriggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId), serviceCallback);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginTriggerSubscriptionEvaluationAsync(String subscriptionId) {
        return beginTriggerSubscriptionEvaluationWithServiceResponseAsync(subscriptionId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginTriggerSubscriptionEvaluationWithServiceResponseAsync(String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.beginTriggerSubscriptionEvaluation(subscriptionId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginTriggerSubscriptionEvaluationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginTriggerSubscriptionEvaluationDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void triggerResourceGroupEvaluation(String subscriptionId, String resourceGroupName) {
        triggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> triggerResourceGroupEvaluationAsync(String subscriptionId, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(triggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName), serviceCallback);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> triggerResourceGroupEvaluationAsync(String subscriptionId, String resourceGroupName) {
        return triggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> triggerResourceGroupEvaluationWithServiceResponseAsync(String subscriptionId, String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        Observable<Response<ResponseBody>> observable = service.triggerResourceGroupEvaluation(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<Void>() { }.getType());
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginTriggerResourceGroupEvaluation(String subscriptionId, String resourceGroupName) {
        beginTriggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginTriggerResourceGroupEvaluationAsync(String subscriptionId, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginTriggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName), serviceCallback);
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginTriggerResourceGroupEvaluationAsync(String subscriptionId, String resourceGroupName) {
        return beginTriggerResourceGroupEvaluationWithServiceResponseAsync(subscriptionId, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers a policy evaluation scan for all the resources under the resource group.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginTriggerResourceGroupEvaluationWithServiceResponseAsync(String subscriptionId, String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-01";
        return service.beginTriggerResourceGroupEvaluation(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginTriggerResourceGroupEvaluationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginTriggerResourceGroupEvaluationDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicySetDefinition(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicySetDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicySetDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(policyStatesResource, subscriptionId, policySetDefinitionName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName) {
        return listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicySetDefinition(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicySetDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicySetDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicySetDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policySetDefinitionName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policySetDefinitionName Policy set definition name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policySetDefinitionName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForPolicySetDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicySetDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForPolicySetDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForPolicySetDefinition(String subscriptionId, String policySetDefinitionName) {
        return summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName) {
        return summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForPolicySetDefinitionWithServiceResponseAsync(String subscriptionId, String policySetDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForPolicySetDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForPolicySetDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForPolicySetDefinition(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        return summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForPolicySetDefinitionAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        return summarizeForPolicySetDefinitionWithServiceResponseAsync(subscriptionId, policySetDefinitionName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy set definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policySetDefinitionName Policy set definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForPolicySetDefinitionWithServiceResponseAsync(String subscriptionId, String policySetDefinitionName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForPolicySetDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policySetDefinitionName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForPolicySetDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForPolicySetDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicyDefinition(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicyDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicyDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(policyStatesResource, subscriptionId, policyDefinitionName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName) {
        return listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicyDefinition(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicyDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicyDefinitionAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionWithServiceResponseAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        return listQueryResultsForPolicyDefinitionSinglePageAsync(policyStatesResource, subscriptionId, policyDefinitionName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyDefinitionName Policy definition name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyDefinitionName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForPolicyDefinition(policyStatesResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicyDefinitionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForPolicyDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForPolicyDefinition(String subscriptionId, String policyDefinitionName) {
        return summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName) {
        return summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForPolicyDefinitionWithServiceResponseAsync(String subscriptionId, String policyDefinitionName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForPolicyDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForPolicyDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForPolicyDefinition(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        return summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForPolicyDefinitionAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        return summarizeForPolicyDefinitionWithServiceResponseAsync(subscriptionId, policyDefinitionName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy definition.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyDefinitionName Policy definition name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForPolicyDefinitionWithServiceResponseAsync(String subscriptionId, String policyDefinitionName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForPolicyDefinition(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyDefinitionName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForPolicyDefinitionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForPolicyDefinitionDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignment(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(policyStatesResource, subscriptionId, policyAssignmentName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignment(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, policyAssignmentName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyAssignmentName Policy assignment name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String policyAssignmentName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForSubscriptionLevelPolicyAssignment(String subscriptionId, String policyAssignmentName) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForSubscriptionLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForSubscriptionLevelPolicyAssignment(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        return summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, policyAssignmentName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the subscription level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForSubscriptionLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String policyAssignmentName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForSubscriptionLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForSubscriptionLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForSubscriptionLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignment(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String orderBy = null;
        String select = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        String apply = null;
        String skipToken = null;
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignment(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(policyStatesResource, subscriptionId, resourceGroupName, policyAssignmentName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s). Possible values include: 'default', 'latest'
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param policyAssignmentName Policy assignment name.
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentSinglePageAsync(final PolicyStatesResource policyStatesResource, final String subscriptionId, final String resourceGroupName, final String policyAssignmentName, final QueryOptions queryOptions) {
        if (policyStatesResource == null) {
            throw new IllegalArgumentException("Parameter policyStatesResource is required and cannot be null.");
        }
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String orderBy = null;
        if (queryOptions != null) {
            orderBy = queryOptions.orderBy();
        }
        String select = null;
        if (queryOptions != null) {
            select = queryOptions.select();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        String apply = null;
        if (queryOptions != null) {
            apply = queryOptions.apply();
        }
        String skipToken = null;
        if (queryOptions != null) {
            skipToken = queryOptions.skipToken();
        }
        return service.listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, orderBy, select, from, to, filter, apply, skipToken, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResourceGroupLevelPolicyAssignment(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName), serviceCallback);
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        final QueryOptions queryOptions = null;
        Integer top = null;
        DateTime from = null;
        DateTime to = null;
        String filter = null;
        return service.summarizeForResourceGroupLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SummarizeResultsInner object if successful.
     */
    public SummarizeResultsInner summarizeForResourceGroupLevelPolicyAssignment(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).toBlocking().single().body();
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions, final ServiceCallback<SummarizeResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions), serviceCallback);
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        return summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(subscriptionId, resourceGroupName, policyAssignmentName, queryOptions).map(new Func1<ServiceResponse<SummarizeResultsInner>, SummarizeResultsInner>() {
            @Override
            public SummarizeResultsInner call(ServiceResponse<SummarizeResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Summarizes policy states for the resource group level policy assignment.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param policyAssignmentName Policy assignment name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SummarizeResultsInner object
     */
    public Observable<ServiceResponse<SummarizeResultsInner>> summarizeForResourceGroupLevelPolicyAssignmentWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String policyAssignmentName, QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (policyAssignmentName == null) {
            throw new IllegalArgumentException("Parameter policyAssignmentName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String policyStatesSummaryResource = "latest";
        final String authorizationNamespace = "Microsoft.Authorization";
        final String apiVersion = "2019-10-01";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        DateTime from = null;
        if (queryOptions != null) {
            from = queryOptions.from();
        }
        DateTime to = null;
        if (queryOptions != null) {
            to = queryOptions.to();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.summarizeForResourceGroupLevelPolicyAssignment(policyStatesSummaryResource, subscriptionId, resourceGroupName, authorizationNamespace, policyAssignmentName, apiVersion, this.client.acceptLanguage(), top, from, to, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SummarizeResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<SummarizeResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SummarizeResultsInner> clientResponse = summarizeForResourceGroupLevelPolicyAssignmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SummarizeResultsInner> summarizeForResourceGroupLevelPolicyAssignmentDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SummarizeResultsInner, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SummarizeResultsInner>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForManagementGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForManagementGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForManagementGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the management group.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForManagementGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForManagementGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForManagementGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForManagementGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionNextAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the subscription.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForSubscriptionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resources under the resource group.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceGroupNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicySetDefinitionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicySetDefinitionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicySetDefinitionNextAsync(final String nextPageLink) {
        return listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForPolicySetDefinitionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicySetDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy set definition.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicySetDefinitionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForPolicySetDefinitionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicySetDefinitionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForPolicySetDefinitionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForPolicyDefinitionNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForPolicyDefinitionNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForPolicyDefinitionNextAsync(final String nextPageLink) {
        return listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForPolicyDefinitionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForPolicyDefinitionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy definition.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForPolicyDefinitionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForPolicyDefinitionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForPolicyDefinitionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForPolicyDefinitionNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForSubscriptionLevelPolicyAssignmentNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForSubscriptionLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the subscription level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForSubscriptionLevelPolicyAssignmentNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForSubscriptionLevelPolicyAssignmentNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForSubscriptionLevelPolicyAssignmentNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws QueryFailureException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PolicyStateInner&gt; object if successful.
     */
    public PagedList<PolicyStateInner> listQueryResultsForResourceGroupLevelPolicyAssignmentNext(final String nextPageLink) {
        ServiceResponse<Page<PolicyStateInner>> response = listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PolicyStateInner>(response.body()) {
            @Override
            public Page<PolicyStateInner> nextPage(String nextPageLink) {
                return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(final String nextPageLink, final ServiceFuture<List<PolicyStateInner>> serviceFuture, final ListOperationCallback<PolicyStateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(String nextPageLink) {
                    return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<Page<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PolicyStateInner>>, Page<PolicyStateInner>>() {
                @Override
                public Page<PolicyStateInner> call(ServiceResponse<Page<PolicyStateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PolicyStateInner&gt; object
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(final String nextPageLink) {
        return listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PolicyStateInner>>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(ServiceResponse<Page<PolicyStateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listQueryResultsForResourceGroupLevelPolicyAssignmentNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Queries policy states for the resource group level policy assignment.
     *
    ServiceResponse<PageImpl1<PolicyStateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PolicyStateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PolicyStateInner>>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listQueryResultsForResourceGroupLevelPolicyAssignmentNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PolicyStateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PolicyStateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PolicyStateInner>> result = listQueryResultsForResourceGroupLevelPolicyAssignmentNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PolicyStateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PolicyStateInner>> listQueryResultsForResourceGroupLevelPolicyAssignmentNextDelegate(Response<ResponseBody> response) throws QueryFailureException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PolicyStateInner>, QueryFailureException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PolicyStateInner>>() { }.getType())
                .registerError(QueryFailureException.class)
                .build(response);
    }

}
