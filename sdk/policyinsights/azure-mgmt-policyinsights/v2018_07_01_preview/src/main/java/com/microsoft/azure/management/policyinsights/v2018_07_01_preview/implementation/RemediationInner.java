/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2018_07_01_preview.implementation;

import org.joda.time.DateTime;
import com.microsoft.azure.management.policyinsights.v2018_07_01_preview.RemediationFilters;
import com.microsoft.azure.management.policyinsights.v2018_07_01_preview.RemediationDeploymentSummary;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * The remediation definition.
 */
@JsonFlatten
public class RemediationInner extends ProxyResource {
    /**
     * The resource ID of the policy assignment that should be remediated.
     */
    @JsonProperty(value = "properties.policyAssignmentId")
    private String policyAssignmentId;

    /**
     * The policy definition reference ID of the individual definition that
     * should be remediated. Required when the policy assignment being
     * remediated assigns a policy set definition.
     */
    @JsonProperty(value = "properties.policyDefinitionReferenceId")
    private String policyDefinitionReferenceId;

    /**
     * The status of the remediation.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * The time at which the remediation was created.
     */
    @JsonProperty(value = "properties.createdOn", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime createdOn;

    /**
     * The time at which the remediation was last updated.
     */
    @JsonProperty(value = "properties.lastUpdatedOn", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastUpdatedOn;

    /**
     * The filters that will be applied to determine which resources to
     * remediate.
     */
    @JsonProperty(value = "properties.filters")
    private RemediationFilters filters;

    /**
     * The deployment status summary for all deployments created by the
     * remediation.
     */
    @JsonProperty(value = "properties.deploymentStatus")
    private RemediationDeploymentSummary deploymentStatus;

    /**
     * Get the resource ID of the policy assignment that should be remediated.
     *
     * @return the policyAssignmentId value
     */
    public String policyAssignmentId() {
        return this.policyAssignmentId;
    }

    /**
     * Set the resource ID of the policy assignment that should be remediated.
     *
     * @param policyAssignmentId the policyAssignmentId value to set
     * @return the RemediationInner object itself.
     */
    public RemediationInner withPolicyAssignmentId(String policyAssignmentId) {
        this.policyAssignmentId = policyAssignmentId;
        return this;
    }

    /**
     * Get the policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     *
     * @return the policyDefinitionReferenceId value
     */
    public String policyDefinitionReferenceId() {
        return this.policyDefinitionReferenceId;
    }

    /**
     * Set the policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
     *
     * @param policyDefinitionReferenceId the policyDefinitionReferenceId value to set
     * @return the RemediationInner object itself.
     */
    public RemediationInner withPolicyDefinitionReferenceId(String policyDefinitionReferenceId) {
        this.policyDefinitionReferenceId = policyDefinitionReferenceId;
        return this;
    }

    /**
     * Get the status of the remediation.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the time at which the remediation was created.
     *
     * @return the createdOn value
     */
    public DateTime createdOn() {
        return this.createdOn;
    }

    /**
     * Get the time at which the remediation was last updated.
     *
     * @return the lastUpdatedOn value
     */
    public DateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Get the filters that will be applied to determine which resources to remediate.
     *
     * @return the filters value
     */
    public RemediationFilters filters() {
        return this.filters;
    }

    /**
     * Set the filters that will be applied to determine which resources to remediate.
     *
     * @param filters the filters value to set
     * @return the RemediationInner object itself.
     */
    public RemediationInner withFilters(RemediationFilters filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Get the deployment status summary for all deployments created by the remediation.
     *
     * @return the deploymentStatus value
     */
    public RemediationDeploymentSummary deploymentStatus() {
        return this.deploymentStatus;
    }

    /**
     * Set the deployment status summary for all deployments created by the remediation.
     *
     * @param deploymentStatus the deploymentStatus value to set
     * @return the RemediationInner object itself.
     */
    public RemediationInner withDeploymentStatus(RemediationDeploymentSummary deploymentStatus) {
        this.deploymentStatus = deploymentStatus;
        return this;
    }

}
