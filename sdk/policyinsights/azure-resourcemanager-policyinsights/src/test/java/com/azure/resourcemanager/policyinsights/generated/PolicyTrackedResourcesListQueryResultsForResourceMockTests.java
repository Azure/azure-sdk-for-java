// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyTrackedResource;
import com.azure.resourcemanager.policyinsights.models.PolicyTrackedResourcesResourceType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PolicyTrackedResourcesListQueryResultsForResourceMockTests {
    @Test
    public void testListQueryResultsForResource() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"trackedResourceId\":\"ppyostronzmyhgf\",\"policyDetails\":{\"policyDefinitionId\":\"sxkm\",\"policyAssignmentId\":\"a\",\"policyAssignmentDisplayName\":\"rrjreafxtsgu\",\"policyAssignmentScope\":\"jglikkxwslolb\",\"policySetDefinitionId\":\"vuzlm\",\"policyDefinitionReferenceId\":\"elfk\"},\"createdBy\":{\"policyDetails\":{\"policyDefinitionId\":\"crpw\",\"policyAssignmentId\":\"eznoig\",\"policyAssignmentDisplayName\":\"njwmwkpnbsazejj\",\"policyAssignmentScope\":\"kagfhsxtt\",\"policySetDefinitionId\":\"gzxnfaazpxdtnk\",\"policyDefinitionReferenceId\":\"kqjjlwuenvrkp\"},\"deploymentId\":\"uaibrebqaaysj\",\"deploymentTime\":\"2021-08-01T02:36:26Z\"},\"lastModifiedBy\":{\"policyDetails\":{\"policyDefinitionId\":\"qttezlwfffiakpjp\",\"policyAssignmentId\":\"m\",\"policyAssignmentDisplayName\":\"d\",\"policyAssignmentScope\":\"mmji\",\"policySetDefinitionId\":\"eozphv\",\"policyDefinitionReferenceId\":\"uyqncygupkvipmd\"},\"deploymentId\":\"wx\",\"deploymentTime\":\"2021-08-04T16:51:56Z\"},\"lastUpdateUtc\":\"2021-09-16T20:46:40Z\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PolicyInsightsManager manager =
            PolicyInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PolicyTrackedResource> response =
            manager
                .policyTrackedResources()
                .listQueryResultsForResource(
                    "ijnhyjsvfycxzbf", PolicyTrackedResourcesResourceType.DEFAULT, 1638099636, "wvrvmtg", Context.NONE);
    }
}
