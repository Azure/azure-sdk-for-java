// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForManagementGroupMockTests {
    @Test
    public void testListQueryResultsForManagementGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"ovmozsayebraz\",\"@odata.context\":\"lpzbtzuykykipf\",\"timestamp\":\"2021-10-13T08:28:59Z\",\"resourceId\":\"pfnocm\",\"policyAssignmentId\":\"zacfpztgazw\",\"policyDefinitionId\":\"ejgaaokct\",\"effectiveParameters\":\"ppgkqzkc\",\"isCompliant\":true,\"subscriptionId\":\"fngdyfcixr\",\"resourceType\":\"cqvhoejgoiutgwrm\",\"resourceLocation\":\"hpqhazyntacihn\",\"resourceGroup\":\"gmipnmliqmvlbhik\",\"resourceTags\":\"qgrvg\",\"policyAssignmentName\":\"mxpu\",\"policyAssignmentOwner\":\"tsdfjyieso\",\"policyAssignmentParameters\":\"iqbuou\",\"policyAssignmentScope\":\"py\",\"policyDefinitionName\":\"leofj\",\"policyDefinitionAction\":\"gbww\",\"policyDefinitionCategory\":\"dajfwnncfma\",\"policySetDefinitionId\":\"qgjjrlhiqlwixv\",\"policySetDefinitionName\":\"ougu\",\"policySetDefinitionOwner\":\"n\",\"policySetDefinitionCategory\":\"pg\",\"policySetDefinitionParameters\":\"tbasu\",\"managementGroupIds\":\"ap\",\"policyDefinitionReferenceId\":\"n\",\"complianceState\":\"eaqbkixv\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"pb\",\"expression\":\"qvzfj\",\"expressionKind\":\"pu\",\"path\":\"feuzjljmphfkye\",\"expressionValue\":\"datalgjzmi\",\"targetValue\":\"dataydoccnxshanzb\",\"operator\":\"adh\"},{\"result\":\"tecaa\",\"expression\":\"dohzniucbdaombwi\",\"expressionKind\":\"jdllwktle\",\"path\":\"wavvqxuajgcqwuly\",\"expressionValue\":\"datagfcfdruwsik\",\"targetValue\":\"datatclhuulriqbyokv\",\"operator\":\"bzsxebrslttfy\"},{\"result\":\"djws\",\"expression\":\"ardnagttpufpbpgn\",\"expressionKind\":\"olhujbfwxiplkyso\",\"path\":\"yjprxslw\",\"expressionValue\":\"datamcvht\",\"targetValue\":\"datazjhfvhuwzbxpc\",\"operator\":\"gihotjeco\"},{\"result\":\"xvvlrrsk\",\"expression\":\"bxwie\",\"expressionKind\":\"uyader\",\"path\":\"fokyks\",\"expressionValue\":\"datamyc\",\"targetValue\":\"datar\",\"operator\":\"cxzznnuife\"}],\"ifNotExistsDetails\":{\"resourceId\":\"jegprk\",\"totalResources\":508948816}},\"policyDefinitionGroupNames\":[\"jmwvvbtuqkxxi\",\"wgxql\",\"ekotjgxi\",\"qfkyfhiwvjaqu\"],\"components\":[{\"id\":\"nvskpaj\",\"type\":\"geumexm\",\"name\":\"xcbccwkqmt\",\"timestamp\":\"2021-04-29T14:27:12Z\",\"complianceState\":\"qis\",\"trqrejda\":\"datailg\"},{\"id\":\"uqimldahlfxl\",\"type\":\"ifmuadjnfsncsk\",\"name\":\"oshjgcze\",\"timestamp\":\"2021-12-06T10:30Z\",\"complianceState\":\"xgztlcgctjch\",\"ebecuvlbefv\":\"datamywj\",\"woxzgwpsyxji\":\"datacljkxpyl\",\"rdkdkgaw\":\"dataeypdvrbk\",\"q\":\"datawjxildfkcefeyg\"}],\"policyDefinitionVersion\":\"oisfmnaybdjn\",\"policySetDefinitionVersion\":\"mentqo\",\"policyAssignmentVersion\":\"why\",\"vqtow\":\"datamulw\",\"sycoybajasqub\":\"datah\",\"chqohtfxcpupuk\":\"dataajcywhjqw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForManagementGroup(PolicyStatesResource.DEFAULT, "cselqxovppqibuk", 274775952, "vzrlrmlcc",
                "etjsczivfqbqna", OffsetDateTime.parse("2021-02-08T00:23:48Z"),
                OffsetDateTime.parse("2021-05-07T07:43:47Z"), "yenzsieuscpl", "yvdgxlyzk", "itdshezsvkolru",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T08:28:59Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("pfnocm", response.iterator().next().resourceId());
        Assertions.assertEquals("zacfpztgazw", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("ejgaaokct", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("ppgkqzkc", response.iterator().next().effectiveParameters());
        Assertions.assertTrue(response.iterator().next().isCompliant());
        Assertions.assertEquals("fngdyfcixr", response.iterator().next().subscriptionId());
        Assertions.assertEquals("cqvhoejgoiutgwrm", response.iterator().next().resourceType());
        Assertions.assertEquals("hpqhazyntacihn", response.iterator().next().resourceLocation());
        Assertions.assertEquals("gmipnmliqmvlbhik", response.iterator().next().resourceGroup());
        Assertions.assertEquals("qgrvg", response.iterator().next().resourceTags());
        Assertions.assertEquals("mxpu", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("tsdfjyieso", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("iqbuou", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("py", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("leofj", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("gbww", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("dajfwnncfma", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("qgjjrlhiqlwixv", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("ougu", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("n", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("pg", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("tbasu", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("ap", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("n", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("eaqbkixv", response.iterator().next().complianceState());
        Assertions.assertEquals("pb",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("qvzfj",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("feuzjljmphfkye",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("adh",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("jegprk",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(508948816,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("jmwvvbtuqkxxi", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("nvskpaj", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("geumexm", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("xcbccwkqmt", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T14:27:12Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("qis", response.iterator().next().components().get(0).complianceState());
    }
}
