// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner;
import com.azure.resourcemanager.policyinsights.models.Remediation;
import com.azure.resourcemanager.policyinsights.models.RemediationFilters;
import com.azure.resourcemanager.policyinsights.models.RemediationPropertiesFailureThreshold;
import com.azure.resourcemanager.policyinsights.models.ResourceDiscoveryMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RemediationsCreateOrUpdateAtSubscriptionWithResponseMockTests {
    @Test
    public void testCreateOrUpdateAtSubscriptionWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyAssignmentId\":\"s\",\"policyDefinitionReferenceId\":\"qiqazugamxzkr\",\"resourceDiscoveryMode\":\"ReEvaluateCompliance\",\"provisioningState\":\"isbamnppcc\",\"createdOn\":\"2021-01-26T11:50:54Z\",\"lastUpdatedOn\":\"2021-06-25T00:19:43Z\",\"filters\":{\"locations\":[\"ezax\",\"f\",\"kzxuiz\",\"y\"],\"resourceIds\":[\"pkpetiarxqiu\",\"xdukecpxd\"]},\"deploymentStatus\":{\"totalDeployments\":2135814710,\"successfulDeployments\":1058585622,\"failedDeployments\":158409851},\"statusMessage\":\"koszu\",\"correlationId\":\"lnsntrpc\",\"resourceCount\":1674868292,\"parallelDeployments\":1354959128,\"failureThreshold\":{\"percentage\":96.12848}},\"id\":\"fmhklbnld\",\"name\":\"vcb\",\"type\":\"hez\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Remediation response
            = manager.remediations()
                .createOrUpdateAtSubscriptionWithResponse("bfqz",
                    new RemediationInner().withPolicyAssignmentId("njyixh")
                        .withPolicyDefinitionReferenceId("ratqxmbjro")
                        .withResourceDiscoveryMode(ResourceDiscoveryMode.EXISTING_NON_COMPLIANT)
                        .withFilters(new RemediationFilters()
                            .withLocations(Arrays.asList("zgfxonjtpusl", "ywpvt", "otz", "pdbollg"))
                            .withResourceIds(Arrays.asList("qiuasigrows")))
                        .withResourceCount(7044640)
                        .withParallelDeployments(1097578040)
                        .withFailureThreshold(new RemediationPropertiesFailureThreshold().withPercentage(69.9324F)),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("s", response.policyAssignmentId());
        Assertions.assertEquals("qiqazugamxzkr", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ResourceDiscoveryMode.RE_EVALUATE_COMPLIANCE, response.resourceDiscoveryMode());
        Assertions.assertEquals("ezax", response.filters().locations().get(0));
        Assertions.assertEquals("pkpetiarxqiu", response.filters().resourceIds().get(0));
        Assertions.assertEquals(1674868292, response.resourceCount());
        Assertions.assertEquals(1354959128, response.parallelDeployments());
        Assertions.assertEquals(96.12848F, response.failureThreshold().percentage());
    }
}
