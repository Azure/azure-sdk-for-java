// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyEvent;
import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyEventsListQueryResultsForResourceMockTests {
    @Test
    public void testListQueryResultsForResource() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"wwdjuxdbdl\",\"@odata.context\":\"gdyrcvuqbsgzl\",\"timestamp\":\"2021-03-22T08:05:18Z\",\"resourceId\":\"jnqogdxwbsfpyx\",\"policyAssignmentId\":\"jlf\",\"policyDefinitionId\":\"cominxojjluxx\",\"effectiveParameters\":\"ilz\",\"isCompliant\":false,\"subscriptionId\":\"qjm\",\"resourceType\":\"za\",\"resourceLocation\":\"vribqlotokht\",\"resourceGroup\":\"taznkcqwwxwjyof\",\"resourceTags\":\"hnkbtlwljssmctsn\",\"policyAssignmentName\":\"kpwolg\",\"policyAssignmentOwner\":\"ubxbteogfgfiijr\",\"policyAssignmentParameters\":\"wlefksxqceazfpxg\",\"policyAssignmentScope\":\"qvzvlu\",\"policyDefinitionName\":\"qa\",\"policyDefinitionAction\":\"ssscyvai\",\"policyDefinitionCategory\":\"p\",\"policySetDefinitionId\":\"cvfyeowpsfxtjdhs\",\"policySetDefinitionName\":\"mhpv\",\"policySetDefinitionOwner\":\"qfttehdpboujs\",\"policySetDefinitionCategory\":\"fvvdshxcdedsue\",\"policySetDefinitionParameters\":\"gnxcgjtfrnquktr\",\"managementGroupIds\":\"s\",\"policyDefinitionReferenceId\":\"lr\",\"complianceState\":\"myltrwntfmtbg\",\"tenantId\":\"dxwnazkurrd\",\"principalOid\":\"yzjwhsetwwjwzzq\",\"components\":[{\"id\":\"uukykcyqh\",\"type\":\"qzzdcykeyste\",\"name\":\"opazdazgbs\",\"timestamp\":\"2021-03-25T21:19:46Z\",\"tenantId\":\"wqcfutmdpvozg\",\"principalOid\":\"jbkn\",\"policyDefinitionAction\":\"clctzey\",\"v\":\"datandc\",\"uwkudrbcp\":\"datawzqauxzanhmkvf\"}],\"naucmcirtnee\":\"dataudqyemeb\",\"fnohaitran\":\"datamjauwcgx\",\"xubvf\":\"datazerwgudas\",\"mpztraudsvhlc\":\"datangfcocefhpriyl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PolicyEvent> response = manager.policyEvents()
            .listQueryResultsForResource(PolicyEventsResourceType.DEFAULT, "hkslgwlokhueoij", 1584456457, "cqypz",
                "zufgs", OffsetDateTime.parse("2021-10-23T10:54:32Z"), OffsetDateTime.parse("2021-11-14T02:47:31Z"),
                "jyvdwtfxptpqayam", "ncfgybmxsnxoc", "ullojk", "oy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T08:05:18Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("jnqogdxwbsfpyx", response.iterator().next().resourceId());
        Assertions.assertEquals("jlf", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("cominxojjluxx", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("ilz", response.iterator().next().effectiveParameters());
        Assertions.assertFalse(response.iterator().next().isCompliant());
        Assertions.assertEquals("qjm", response.iterator().next().subscriptionId());
        Assertions.assertEquals("za", response.iterator().next().resourceType());
        Assertions.assertEquals("vribqlotokht", response.iterator().next().resourceLocation());
        Assertions.assertEquals("taznkcqwwxwjyof", response.iterator().next().resourceGroup());
        Assertions.assertEquals("hnkbtlwljssmctsn", response.iterator().next().resourceTags());
        Assertions.assertEquals("kpwolg", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("ubxbteogfgfiijr", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("wlefksxqceazfpxg", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("qvzvlu", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("qa", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("ssscyvai", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("p", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("cvfyeowpsfxtjdhs", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("mhpv", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("qfttehdpboujs", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("fvvdshxcdedsue", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("gnxcgjtfrnquktr", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("s", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("lr", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("myltrwntfmtbg", response.iterator().next().complianceState());
        Assertions.assertEquals("dxwnazkurrd", response.iterator().next().tenantId());
        Assertions.assertEquals("yzjwhsetwwjwzzq", response.iterator().next().principalOid());
        Assertions.assertEquals("uukykcyqh", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("qzzdcykeyste", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("opazdazgbs", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-25T21:19:46Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("wqcfutmdpvozg", response.iterator().next().components().get(0).tenantId());
        Assertions.assertEquals("jbkn", response.iterator().next().components().get(0).principalOid());
        Assertions.assertEquals("clctzey", response.iterator().next().components().get(0).policyDefinitionAction());
    }
}
