// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentMockTests {
    @Test
    public void testListQueryResultsForResourceGroupLevelPolicyAssignment() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"mezyo\",\"@odata.context\":\"pthceopvkv\",\"timestamp\":\"2021-10-29T03:07:30Z\",\"resourceId\":\"esobpbokhmm\",\"policyAssignmentId\":\"dyarnggcjfwblq\",\"policyDefinitionId\":\"kasmcolmugpyva\",\"effectiveParameters\":\"dkluwzxeygzvt\",\"isCompliant\":true,\"subscriptionId\":\"hubnobgu\",\"resourceType\":\"sqsqkpdmioyjpnml\",\"resourceLocation\":\"qcpszp\",\"resourceGroup\":\"vqdvrdmvxyrxdhg\",\"resourceTags\":\"oj\",\"policyAssignmentName\":\"aotcgbzxmbtp\",\"policyAssignmentOwner\":\"foioyidoxzn\",\"policyAssignmentParameters\":\"vdtmuuvd\",\"policyAssignmentScope\":\"sxmrszbknimxlp\",\"policyDefinitionName\":\"rxrzutylcur\",\"policyDefinitionAction\":\"q\",\"policyDefinitionCategory\":\"b\",\"policySetDefinitionId\":\"aehtd\",\"policySetDefinitionName\":\"mbnvynfaooeacted\",\"policySetDefinitionOwner\":\"lsk\",\"policySetDefinitionCategory\":\"ddida\",\"policySetDefinitionParameters\":\"llrqmtlpbyxro\",\"managementGroupIds\":\"uyqyp\",\"policyDefinitionReferenceId\":\"mnoiicsudy\",\"complianceState\":\"rjjtalxrdsjrho\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"usxxhdodpjwybl\",\"expression\":\"bdmvsby\",\"expressionKind\":\"aelqpvekmkwjf\",\"path\":\"tlo\",\"expressionValue\":\"datadusxurs\",\"targetValue\":\"datav\",\"operator\":\"cjkcoqwczsyiqri\"}],\"ifNotExistsDetails\":{\"resourceId\":\"ihvaang\",\"totalResources\":127276359}},\"policyDefinitionGroupNames\":[\"rfdmfdvbbaexx\"],\"components\":[{\"id\":\"g\",\"type\":\"kkauigvmuafmc\",\"name\":\"edyueps\",\"timestamp\":\"2021-01-06T02:41:55Z\",\"complianceState\":\"ida\",\"\":{\"lsyasv\":\"datayweocfkumcfjxoky\"}},{\"id\":\"k\",\"type\":\"ygjje\",\"name\":\"knfdr\",\"timestamp\":\"2021-09-08T20:48:26Z\",\"complianceState\":\"yckgtxkrdtulcrcj\",\"\":{\"mzoonsvobchkxfpw\":\"dataotcsu\",\"kwayqshwy\":\"datadyslbklglmnn\",\"tb\":\"dataxrid\",\"uylztpziizevjyk\":\"dataaqjmkgxqwque\"}},{\"id\":\"vezefkhkqtwqle\",\"type\":\"jzkcasfwzcntog\",\"name\":\"jwajnrtw\",\"timestamp\":\"2021-08-14T16:55:35Z\",\"complianceState\":\"kifmxawo\",\"\":{\"rkmjqncfvdscnhe\":\"datazkn\",\"r\":\"datavwfnqqwypvn\",\"od\":\"datab\",\"muymvec\":\"dataggrssgwjfkain\"}}],\"policyDefinitionVersion\":\"tscbgmusai\",\"policySetDefinitionVersion\":\"dscnkzzo\",\"policyAssignmentVersion\":\"rddclzeqozrehlb\",\"\":{\"nynpameudpabcre\":\"dataxbnjrqvzyuexoz\",\"xvcvasormrexz\":\"datawzosgy\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForResourceGroupLevelPolicyAssignment(PolicyStatesResource.LATEST, "rmhzicsbf",
                "jhyaaknyuki", "xiglhphzwxq", 630292402, "jpiilh", "tozyagjjnxkb",
                OffsetDateTime.parse("2020-12-29T10:59:10Z"), OffsetDateTime.parse("2021-05-26T00:53:31Z"), "yyxgff",
                "lvqzrwtrdgscnv", "eonsgnwx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T03:07:30Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("esobpbokhmm", response.iterator().next().resourceId());
        Assertions.assertEquals("dyarnggcjfwblq", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("kasmcolmugpyva", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("dkluwzxeygzvt", response.iterator().next().effectiveParameters());
        Assertions.assertEquals(true, response.iterator().next().isCompliant());
        Assertions.assertEquals("hubnobgu", response.iterator().next().subscriptionId());
        Assertions.assertEquals("sqsqkpdmioyjpnml", response.iterator().next().resourceType());
        Assertions.assertEquals("qcpszp", response.iterator().next().resourceLocation());
        Assertions.assertEquals("vqdvrdmvxyrxdhg", response.iterator().next().resourceGroup());
        Assertions.assertEquals("oj", response.iterator().next().resourceTags());
        Assertions.assertEquals("aotcgbzxmbtp", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("foioyidoxzn", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("vdtmuuvd", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("sxmrszbknimxlp", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("rxrzutylcur", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("q", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("b", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("aehtd", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("mbnvynfaooeacted", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("lsk", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("ddida", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("llrqmtlpbyxro", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("uyqyp", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("mnoiicsudy", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("rjjtalxrdsjrho", response.iterator().next().complianceState());
        Assertions.assertEquals("usxxhdodpjwybl",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("bdmvsby",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("tlo",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("cjkcoqwczsyiqri",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("ihvaang",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(127276359,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("rfdmfdvbbaexx", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("g", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("kkauigvmuafmc", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("edyueps", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-06T02:41:55Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("ida", response.iterator().next().components().get(0).complianceState());
    }
}
