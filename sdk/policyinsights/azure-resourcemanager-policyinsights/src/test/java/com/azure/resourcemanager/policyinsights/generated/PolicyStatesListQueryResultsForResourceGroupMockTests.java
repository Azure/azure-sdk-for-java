// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForResourceGroupMockTests {
    @Test
    public void testListQueryResultsForResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"ppqib\",\"@odata.context\":\"klvzrl\",\"timestamp\":\"2021-05-11T23:30:44Z\",\"resourceId\":\"cme\",\"policyAssignmentId\":\"scz\",\"policyDefinitionId\":\"fqbqnasd\",\"effectiveParameters\":\"enz\",\"isCompliant\":true,\"subscriptionId\":\"scplhyvd\",\"resourceType\":\"lyzkxitds\",\"resourceLocation\":\"zsvko\",\"resourceGroup\":\"upjo\",\"resourceTags\":\"ozsaye\",\"policyAssignmentName\":\"azwzlpzbtzuykyki\",\"policyAssignmentOwner\":\"sdyepfno\",\"policyAssignmentParameters\":\"bezacfpztga\",\"policyAssignmentScope\":\"yqejga\",\"policyDefinitionName\":\"kctgkp\",\"policyDefinitionAction\":\"kqzkcyzmff\",\"policyDefinitionCategory\":\"dyfcix\",\"policySetDefinitionId\":\"lcqvhoejgoiutgw\",\"policySetDefinitionName\":\"kahpqhazynta\",\"policySetDefinitionOwner\":\"hncogmipnml\",\"policySetDefinitionCategory\":\"mvlbhikeaqgrv\",\"policySetDefinitionParameters\":\"omxp\",\"managementGroupIds\":\"dtsdfjy\",\"policyDefinitionReferenceId\":\"socwiqbuout\",\"complianceState\":\"yzgleofjs\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"zvdajfwnncf\",\"expression\":\"ciqgjjrlhiqlwixv\",\"expressionKind\":\"ougu\",\"path\":\"n\",\"expressionValue\":\"datapg\",\"targetValue\":\"datatbasu\",\"operator\":\"ap\"},{\"result\":\"n\",\"expression\":\"eaqbkixv\",\"expressionKind\":\"wy\",\"path\":\"bb\",\"expressionValue\":\"datavzfjm\",\"targetValue\":\"dataugzfeuzjl\",\"operator\":\"phfky\"}],\"ifNotExistsDetails\":{\"resourceId\":\"lgjzmi\",\"totalResources\":1157664524}},\"policyDefinitionGroupNames\":[\"ccn\"],\"components\":[{\"id\":\"nzbuia\",\"type\":\"batecaat\",\"name\":\"o\",\"timestamp\":\"2021-07-25T14:29:17Z\",\"complianceState\":\"ucbdaom\",\"\":{\"avv\":\"datainjdllwktlepo\"}},{\"id\":\"uajgcqwulynk\",\"type\":\"cfdruwsikxx\",\"name\":\"lhuulriqb\",\"timestamp\":\"2021-11-11T09:30:24Z\",\"complianceState\":\"jgb\",\"\":{\"rsltt\":\"datae\"}},{\"id\":\"hcdjwsuoardnagt\",\"type\":\"ufpbpgnrhol\",\"name\":\"jbfwxipl\",\"timestamp\":\"2021-09-23T02:14:14Z\",\"complianceState\":\"l\",\"\":{\"xslwhd\":\"datap\"}}],\"policyDefinitionVersion\":\"vhtbbzjhfvh\",\"policySetDefinitionVersion\":\"zb\",\"policyAssignmentVersion\":\"cqzgihotjecohmx\",\"\":{\"derltfokyksyim\":\"datarrskapbxwieexuy\",\"i\":\"dataccgrvkcxzznn\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForResourceGroup(PolicyStatesResource.LATEST, "shuvftwaivmuqkev", "gjypanhxmpdxxze",
                2033074123, "wzjwotnxlkfhg", "h", OffsetDateTime.parse("2021-07-29T16:57:51Z"),
                OffsetDateTime.parse("2021-09-22T13:44:39Z"), "x", "wecr", "nhpcselqx",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T23:30:44Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("cme", response.iterator().next().resourceId());
        Assertions.assertEquals("scz", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("fqbqnasd", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("enz", response.iterator().next().effectiveParameters());
        Assertions.assertEquals(true, response.iterator().next().isCompliant());
        Assertions.assertEquals("scplhyvd", response.iterator().next().subscriptionId());
        Assertions.assertEquals("lyzkxitds", response.iterator().next().resourceType());
        Assertions.assertEquals("zsvko", response.iterator().next().resourceLocation());
        Assertions.assertEquals("upjo", response.iterator().next().resourceGroup());
        Assertions.assertEquals("ozsaye", response.iterator().next().resourceTags());
        Assertions.assertEquals("azwzlpzbtzuykyki", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("sdyepfno", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("bezacfpztga", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("yqejga", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("kctgkp", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("kqzkcyzmff", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("dyfcix", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("lcqvhoejgoiutgw", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("kahpqhazynta", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("hncogmipnml", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("mvlbhikeaqgrv", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("omxp", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("dtsdfjy", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("socwiqbuout", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("yzgleofjs", response.iterator().next().complianceState());
        Assertions.assertEquals("zvdajfwnncf",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("ciqgjjrlhiqlwixv",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("n",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("ap",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("lgjzmi",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(1157664524,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("ccn", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("nzbuia", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("batecaat", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("o", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-25T14:29:17Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("ucbdaom", response.iterator().next().components().get(0).complianceState());
    }
}
