// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.fluent.models.AttestationInner;
import com.azure.resourcemanager.policyinsights.models.Attestation;
import com.azure.resourcemanager.policyinsights.models.AttestationEvidence;
import com.azure.resourcemanager.policyinsights.models.ComplianceState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttestationsCreateOrUpdateAtSubscriptionMockTests {
    @Test
    public void testCreateOrUpdateAtSubscription() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyAssignmentId\":\"zbassqfyy\",\"policyDefinitionReferenceId\":\"ppeygkbzbloasy\",\"complianceState\":\"Unknown\",\"expiresOn\":\"2021-10-11T14:02:20Z\",\"owner\":\"vdpmhttuvsqjs\",\"comments\":\"jnqtaqg\",\"evidence\":[{\"description\":\"kceincnrec\",\"sourceUri\":\"iywevsfg\"},{\"description\":\"mnszdosmjsqsvzvm\",\"sourceUri\":\"cwghndaevhgsulw\"},{\"description\":\"seufig\",\"sourceUri\":\"jjuzk\"},{\"description\":\"mciwu\",\"sourceUri\":\"zekypyovljlbzd\"}],\"provisioningState\":\"Succeeded\",\"lastComplianceStateChangeAt\":\"2020-12-30T17:22:59Z\",\"assessmentDate\":\"2021-01-31T22:39:19Z\",\"metadata\":\"dataesfhshagpahn\"},\"id\":\"pbyfyvynpmggq\",\"name\":\"agenvqbugihcdvf\",\"type\":\"izorbloejzs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Attestation response = manager.attestations()
            .createOrUpdateAtSubscription("pbldz",
                new AttestationInner().withPolicyAssignmentId("iudrcycmwhuzym")
                    .withPolicyDefinitionReferenceId("hihqknlvkmnbzko")
                    .withComplianceState(ComplianceState.UNKNOWN)
                    .withExpiresOn(OffsetDateTime.parse("2021-11-04T18:07:20Z"))
                    .withOwner("cpu")
                    .withComments("hquxsyjofpgv")
                    .withEvidence(Arrays.asList(
                        new AttestationEvidence().withDescription("bujnjgybuxmqx").withSourceUri("idullnjgcpskg"),
                        new AttestationEvidence().withDescription("nytslgsazuqznghx").withSourceUri("yqz"),
                        new AttestationEvidence().withDescription("dkpvnrvzw").withSourceUri("fxsfybntmveho"),
                        new AttestationEvidence().withDescription("lyuvbgtzqzqwe").withSourceUri("dybnairvhpqsvb")))
                    .withAssessmentDate(OffsetDateTime.parse("2021-07-28T10:23:05Z"))
                    .withMetadata("dataj"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zbassqfyy", response.policyAssignmentId());
        Assertions.assertEquals("ppeygkbzbloasy", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ComplianceState.UNKNOWN, response.complianceState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-11T14:02:20Z"), response.expiresOn());
        Assertions.assertEquals("vdpmhttuvsqjs", response.owner());
        Assertions.assertEquals("jnqtaqg", response.comments());
        Assertions.assertEquals("kceincnrec", response.evidence().get(0).description());
        Assertions.assertEquals("iywevsfg", response.evidence().get(0).sourceUri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T22:39:19Z"), response.assessmentDate());
    }
}
