// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.fluent.models.AttestationInner;
import com.azure.resourcemanager.policyinsights.models.Attestation;
import com.azure.resourcemanager.policyinsights.models.AttestationEvidence;
import com.azure.resourcemanager.policyinsights.models.ComplianceState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttestationsCreateOrUpdateAtSubscriptionMockTests {
    @Test
    public void testCreateOrUpdateAtSubscription() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyAssignmentId\":\"zrqnjxm\",\"policyDefinitionReferenceId\":\"s\",\"complianceState\":\"NonCompliant\",\"expiresOn\":\"2021-10-10T13:23:49Z\",\"owner\":\"wg\",\"comments\":\"hhqld\",\"evidence\":[{\"description\":\"nsw\",\"sourceUri\":\"exqwqnghxnimvy\"}],\"provisioningState\":\"Succeeded\",\"lastComplianceStateChangeAt\":\"2021-02-01T06:28:54Z\",\"assessmentDate\":\"2021-11-24T05:34:51Z\",\"metadata\":\"datalque\"},\"id\":\"mvyumgmmuebsnzn\",\"name\":\"gsqufmjxcyo\",\"type\":\"eqcazisvbrqgcy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Attestation response = manager.attestations()
            .createOrUpdateAtSubscription("ry",
                new AttestationInner().withPolicyAssignmentId("fjxlpiy")
                    .withPolicyDefinitionReferenceId("npfydrfb")
                    .withComplianceState(ComplianceState.COMPLIANT)
                    .withExpiresOn(OffsetDateTime.parse("2021-10-29T01:26:36Z"))
                    .withOwner("yxmkhmqyncgaul")
                    .withComments("styygjq")
                    .withEvidence(Arrays.asList(
                        new AttestationEvidence().withDescription("wqgmhmqmiwxz").withSourceUri("vzucqfgufjnb"),
                        new AttestationEvidence().withDescription("bmwdukinhlxhgde").withSourceUri("kzou")))
                    .withAssessmentDate(OffsetDateTime.parse("2021-05-01T07:03:38Z"))
                    .withMetadata("datadohgcandxfhhhte"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zrqnjxm", response.policyAssignmentId());
        Assertions.assertEquals("s", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ComplianceState.NON_COMPLIANT, response.complianceState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T13:23:49Z"), response.expiresOn());
        Assertions.assertEquals("wg", response.owner());
        Assertions.assertEquals("hhqld", response.comments());
        Assertions.assertEquals("nsw", response.evidence().get(0).description());
        Assertions.assertEquals("exqwqnghxnimvy", response.evidence().get(0).sourceUri());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-24T05:34:51Z"), response.assessmentDate());
    }
}
