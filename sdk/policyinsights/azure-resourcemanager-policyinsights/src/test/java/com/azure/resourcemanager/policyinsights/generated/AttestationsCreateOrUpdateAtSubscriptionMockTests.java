// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.fluent.models.AttestationInner;
import com.azure.resourcemanager.policyinsights.models.Attestation;
import com.azure.resourcemanager.policyinsights.models.ComplianceState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttestationsCreateOrUpdateAtSubscriptionMockTests {
    @Test
    public void testCreateOrUpdateAtSubscription() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"policyAssignmentId\":\"emmucfxh\",\"policyDefinitionReferenceId\":\"kflrmymy\",\"complianceState\":\"Compliant\",\"expiresOn\":\"2021-08-23T12:22:56Z\",\"owner\":\"riswslmiiio\",\"comments\":\"qcgxuug\",\"evidence\":[],\"provisioningState\":\"Succeeded\",\"lastComplianceStateChangeAt\":\"2021-04-05T19:15:27Z\",\"assessmentDate\":\"2021-10-18T23:51:32Z\"},\"id\":\"gukra\",\"name\":\"b\",\"type\":\"wphqlkccuzgygqw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PolicyInsightsManager manager =
            PolicyInsightsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Attestation response =
            manager
                .attestations()
                .createOrUpdateAtSubscription(
                    "vteo",
                    new AttestationInner()
                        .withPolicyAssignmentId("xvgpiude")
                        .withPolicyDefinitionReferenceId("fsxzecp")
                        .withComplianceState(ComplianceState.NON_COMPLIANT)
                        .withExpiresOn(OffsetDateTime.parse("2021-03-13T19:37:20Z"))
                        .withOwner("ykhv")
                        .withComments("xepmrut")
                        .withEvidence(Arrays.asList())
                        .withAssessmentDate(OffsetDateTime.parse("2021-12-06T21:47:13Z")),
                    Context.NONE);

        Assertions.assertEquals("emmucfxh", response.policyAssignmentId());
        Assertions.assertEquals("kflrmymy", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ComplianceState.COMPLIANT, response.complianceState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T12:22:56Z"), response.expiresOn());
        Assertions.assertEquals("riswslmiiio", response.owner());
        Assertions.assertEquals("qcgxuug", response.comments());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T23:51:32Z"), response.assessmentDate());
    }
}
