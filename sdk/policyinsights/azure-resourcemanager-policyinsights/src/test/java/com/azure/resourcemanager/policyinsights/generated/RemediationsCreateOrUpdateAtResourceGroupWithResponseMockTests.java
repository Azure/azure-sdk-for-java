// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.Remediation;
import com.azure.resourcemanager.policyinsights.models.RemediationFilters;
import com.azure.resourcemanager.policyinsights.models.RemediationPropertiesFailureThreshold;
import com.azure.resourcemanager.policyinsights.models.ResourceDiscoveryMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RemediationsCreateOrUpdateAtResourceGroupWithResponseMockTests {
    @Test
    public void testCreateOrUpdateAtResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyAssignmentId\":\"nsntrpcaqki\",\"policyDefinitionReferenceId\":\"kb\",\"resourceDiscoveryMode\":\"ExistingNonCompliant\",\"provisioningState\":\"kl\",\"createdOn\":\"2021-05-12T04:44:19Z\",\"lastUpdatedOn\":\"2021-03-27T21:42:59Z\",\"filters\":{\"locations\":[\"h\"]},\"deploymentStatus\":{\"totalDeployments\":395818123,\"successfulDeployments\":60684605,\"failedDeployments\":601819316},\"statusMessage\":\"qxutrpbrruyuua\",\"correlationId\":\"lmbjwcolbmxlbnw\",\"resourceCount\":894228771,\"parallelDeployments\":2038103191,\"failureThreshold\":{\"percentage\":21.169222}},\"id\":\"rvxhmtfhocnxzcm\",\"name\":\"hngxnoqrxtd\",\"type\":\"sn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Remediation response = manager.remediations()
            .define("evadrmmwiu")
            .withExistingResourceGroup("grmtqjk")
            .withPolicyAssignmentId("c")
            .withPolicyDefinitionReferenceId("z")
            .withResourceDiscoveryMode(ResourceDiscoveryMode.RE_EVALUATE_COMPLIANCE)
            .withFilters(new RemediationFilters().withLocations(Arrays.asList("gamxzkrrcoiis")))
            .withResourceCount(353211040)
            .withParallelDeployments(1432224999)
            .withFailureThreshold(new RemediationPropertiesFailureThreshold().withPercentage(81.5987F))
            .create();

        Assertions.assertEquals("nsntrpcaqki", response.policyAssignmentId());
        Assertions.assertEquals("kb", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ResourceDiscoveryMode.EXISTING_NON_COMPLIANT, response.resourceDiscoveryMode());
        Assertions.assertEquals("h", response.filters().locations().get(0));
        Assertions.assertEquals(894228771, response.resourceCount());
        Assertions.assertEquals(2038103191, response.parallelDeployments());
        Assertions.assertEquals(21.169222F, response.failureThreshold().percentage());
    }
}
