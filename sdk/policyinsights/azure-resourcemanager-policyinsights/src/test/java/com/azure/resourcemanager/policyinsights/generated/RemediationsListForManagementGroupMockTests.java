// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.Remediation;
import com.azure.resourcemanager.policyinsights.models.ResourceDiscoveryMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RemediationsListForManagementGroupMockTests {
    @Test
    public void testListForManagementGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"policyAssignmentId\":\"h\",\"policyDefinitionReferenceId\":\"qinfszpyglqd\",\"resourceDiscoveryMode\":\"ExistingNonCompliant\",\"provisioningState\":\"zralcxpjbyyps\",\"createdOn\":\"2021-09-08T05:57:50Z\",\"lastUpdatedOn\":\"2021-04-19T19:08:46Z\",\"filters\":{\"locations\":[\"yhfqzvsqxfxje\",\"gcm\",\"zqjhhhqxuwyvca\",\"oyvivbsiz\"]},\"deploymentStatus\":{\"totalDeployments\":1734765934,\"successfulDeployments\":1944956414,\"failedDeployments\":1663771},\"statusMessage\":\"mnlzijiufehgmvf\",\"correlationId\":\"wyvq\",\"resourceCount\":1693891675,\"parallelDeployments\":1520441581,\"failureThreshold\":{\"percentage\":49.01049}},\"id\":\"lylyfwxzutgqz\",\"name\":\"whghmup\",\"type\":\"xyjtcdxabbujf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Remediation> response = manager.remediations()
            .listForManagementGroup("czhcoeocnh", 331498127, "rottjzcfyjzptw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("h", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("qinfszpyglqd", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals(ResourceDiscoveryMode.EXISTING_NON_COMPLIANT,
            response.iterator().next().resourceDiscoveryMode());
        Assertions.assertEquals("yhfqzvsqxfxje", response.iterator().next().filters().locations().get(0));
        Assertions.assertEquals(1693891675, response.iterator().next().resourceCount());
        Assertions.assertEquals(1520441581, response.iterator().next().parallelDeployments());
        Assertions.assertEquals(49.01049F, response.iterator().next().failureThreshold().percentage());
    }
}
