// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesSummaryResourceType;
import com.azure.resourcemanager.policyinsights.models.SummarizeResults;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesSummarizeForResourceWithResponseMockTests {
    @Test
    public void testSummarizeForResourceWithResponse() throws Exception {
        String responseStr
            = "{\"@odata.context\":\"zjuegrh\",\"@odata.count\":700693046,\"value\":[{\"@odata.id\":\"jtv\",\"@odata.context\":\"nxvgjb\",\"results\":{\"queryResultsUri\":\"bpnjodf\",\"nonCompliantResources\":1840856398,\"nonCompliantPolicies\":721119965,\"resourceDetails\":[{},{},{}],\"policyDetails\":[{}],\"policyGroupDetails\":[{},{}]},\"policyAssignments\":[{\"policyAssignmentId\":\"azuxejgwecywnfy\",\"policySetDefinitionId\":\"za\",\"results\":{},\"policyDefinitions\":[{},{},{},{}],\"policyGroups\":[{}]},{\"policyAssignmentId\":\"dnddbbozsyv\",\"policySetDefinitionId\":\"kjmyitrchwudlx\",\"results\":{},\"policyDefinitions\":[{},{},{}],\"policyGroups\":[{},{},{}]},{\"policyAssignmentId\":\"noejhqlfmsibz\",\"policySetDefinitionId\":\"rfgxkyd\",\"results\":{},\"policyDefinitions\":[{},{},{}],\"policyGroups\":[{},{},{}]}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SummarizeResults response = manager.policyStates()
            .summarizeForResourceWithResponse(PolicyStatesSummaryResourceType.LATEST, "ntujmoilunwemhd", 148726664,
                OffsetDateTime.parse("2021-12-02T08:52:50Z"), OffsetDateTime.parse("2021-04-13T05:05:49Z"), "slkyozd",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("bpnjodf", response.value().get(0).results().queryResultsUri());
        Assertions.assertEquals(1840856398, response.value().get(0).results().nonCompliantResources());
        Assertions.assertEquals(721119965, response.value().get(0).results().nonCompliantPolicies());
        Assertions.assertEquals("azuxejgwecywnfy",
            response.value().get(0).policyAssignments().get(0).policyAssignmentId());
        Assertions.assertEquals("za", response.value().get(0).policyAssignments().get(0).policySetDefinitionId());
    }
}
