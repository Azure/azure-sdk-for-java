// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentMockTests {
    @Test
    public void testListQueryResultsForSubscriptionLevelPolicyAssignment() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"kig\",\"@odata.context\":\"clwa\",\"timestamp\":\"2021-05-15T10:01:19Z\",\"resourceId\":\"bhgzphetxdq\",\"policyAssignmentId\":\"yctajqz\",\"policyDefinitionId\":\"alec\",\"effectiveParameters\":\"ibiwksdegyxsb\",\"isCompliant\":true,\"subscriptionId\":\"oikvntwcz\",\"resourceType\":\"wushlcxpbl\",\"resourceLocation\":\"hhezpfkissaidq\",\"resourceGroup\":\"aaoqdsg\",\"resourceTags\":\"otxjqfiafcnlrtbf\",\"policyAssignmentName\":\"zzcaoijolbuauk\",\"policyAssignmentOwner\":\"ieopexelxqdwr\",\"policyAssignmentParameters\":\"yil\",\"policyAssignmentScope\":\"ibkgxyxyau\",\"policyDefinitionName\":\"eddobmcnltm\",\"policyDefinitionAction\":\"tkujsqycm\",\"policyDefinitionCategory\":\"xfabl\",\"policySetDefinitionId\":\"pwbmwhria\",\"policySetDefinitionName\":\"wrycgnwpl\",\"policySetDefinitionOwner\":\"bphct\",\"policySetDefinitionCategory\":\"bibticuhqvum\",\"policySetDefinitionParameters\":\"bfs\",\"managementGroupIds\":\"qbbewfcuqfpyyxm\",\"policyDefinitionReferenceId\":\"mtmvwituwey\",\"complianceState\":\"shcybwfuppox\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"ouujxdiikmoxre\",\"expression\":\"vavl\",\"expressionKind\":\"ikj\",\"path\":\"ywlunpipcwybs\",\"expressionValue\":\"datancnpat\",\"targetValue\":\"datatsaebwfwhxorpwa\",\"operator\":\"zwuge\"},{\"result\":\"jfccylhtrht\",\"expression\":\"azjpwexcdrzpro\",\"expressionKind\":\"zxezmnr\",\"path\":\"gpjeuxsphlokfp\",\"expressionValue\":\"datajpdvzvfbhwbdquf\",\"targetValue\":\"datagnrglaqrwyamb\",\"operator\":\"afebzxfkjq\"},{\"result\":\"ibhlenntrv\",\"expression\":\"psabdu\",\"expressionKind\":\"zmlghny\",\"path\":\"lpyeu\",\"expressionValue\":\"datap\",\"targetValue\":\"dataixqbolxvhhyqqeg\",\"operator\":\"xgrzn\"}],\"ifNotExistsDetails\":{\"resourceId\":\"nmtsdixc\",\"totalResources\":73247428}},\"policyDefinitionGroupNames\":[\"m\",\"jymncjcagai\",\"wcqzo\"],\"components\":[{\"id\":\"qjsvep\",\"type\":\"htleberpyljek\",\"name\":\"qnwjjq\",\"timestamp\":\"2021-11-27T05:07:42Z\",\"complianceState\":\"dnjrx\",\"\":{\"hrguqlhfwa\":\"datahwiehycpnowawono\"}},{\"id\":\"jzmpy\",\"type\":\"uyfazbkoc\",\"name\":\"gvthrmxkbcjww\",\"timestamp\":\"2021-01-17T02:36:21Z\",\"complianceState\":\"rawppkeboozf\",\"\":{\"mgd\":\"datacagaedaoiqc\",\"dxfkuzb\":\"datawga\"}}],\"policyDefinitionVersion\":\"ecooyvhtuqbp\",\"policySetDefinitionVersion\":\"nii\",\"policyAssignmentVersion\":\"cgagdvcdqhftzbp\",\"\":{\"htncwmhjobzrfp\":\"dataofdf\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForSubscriptionLevelPolicyAssignment(PolicyStatesResource.LATEST, "pzfzxsoxinunjlz",
                "drocqsxytq", 1525249264, "cmiwdw", "svnmeylajamcajy", OffsetDateTime.parse("2021-03-13T14:11:25Z"),
                OffsetDateTime.parse("2021-06-18T15:03:05Z"), "p", "c", "ryklleynqa", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T10:01:19Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("bhgzphetxdq", response.iterator().next().resourceId());
        Assertions.assertEquals("yctajqz", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("alec", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("ibiwksdegyxsb", response.iterator().next().effectiveParameters());
        Assertions.assertEquals(true, response.iterator().next().isCompliant());
        Assertions.assertEquals("oikvntwcz", response.iterator().next().subscriptionId());
        Assertions.assertEquals("wushlcxpbl", response.iterator().next().resourceType());
        Assertions.assertEquals("hhezpfkissaidq", response.iterator().next().resourceLocation());
        Assertions.assertEquals("aaoqdsg", response.iterator().next().resourceGroup());
        Assertions.assertEquals("otxjqfiafcnlrtbf", response.iterator().next().resourceTags());
        Assertions.assertEquals("zzcaoijolbuauk", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("ieopexelxqdwr", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("yil", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("ibkgxyxyau", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("eddobmcnltm", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("tkujsqycm", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("xfabl", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("pwbmwhria", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("wrycgnwpl", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("bphct", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("bibticuhqvum", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("bfs", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("qbbewfcuqfpyyxm", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("mtmvwituwey", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("shcybwfuppox", response.iterator().next().complianceState());
        Assertions.assertEquals("ouujxdiikmoxre",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("vavl",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("ywlunpipcwybs",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("zwuge",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("nmtsdixc",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(73247428,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("m", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("qjsvep", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("htleberpyljek", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("qnwjjq", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-27T05:07:42Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("dnjrx", response.iterator().next().components().get(0).complianceState());
    }
}
