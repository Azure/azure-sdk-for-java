// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentMockTests {
    @Test
    public void testListQueryResultsForSubscriptionLevelPolicyAssignment() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"poq\",\"@odata.context\":\"yemhkftba\",\"timestamp\":\"2021-11-09T17:40:52Z\",\"resourceId\":\"ec\",\"policyAssignmentId\":\"amfmxtllfl\",\"policyDefinitionId\":\"mq\",\"effectiveParameters\":\"rrfijhgg\",\"isCompliant\":false,\"subscriptionId\":\"gamk\",\"resourceType\":\"lirwdvf\",\"resourceLocation\":\"sdpzouhktqrxqwq\",\"resourceGroup\":\"xrdfddtu\",\"resourceTags\":\"ygta\",\"policyAssignmentName\":\"zcxdfweapyfmlxrl\",\"policyAssignmentOwner\":\"h\",\"policyAssignmentParameters\":\"spi\",\"policyAssignmentScope\":\"eimixlmdbgicehf\",\"policyDefinitionName\":\"mdrjuqbpxt\",\"policyDefinitionAction\":\"lj\",\"policyDefinitionCategory\":\"znpaxwfqtyyqiprc\",\"policySetDefinitionId\":\"ungbsoljc\",\"policySetDefinitionName\":\"iigz\",\"policySetDefinitionOwner\":\"uck\",\"policySetDefinitionCategory\":\"dsk\",\"policySetDefinitionParameters\":\"tiiqqcqikclsmaln\",\"managementGroupIds\":\"woykdnonaaxwm\",\"policyDefinitionReferenceId\":\"ru\",\"complianceState\":\"qcwnynl\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"cbgvsbt\",\"expression\":\"rtoxadhxuvjhxm\",\"expressionKind\":\"qstjc\",\"path\":\"twmlg\",\"expressionValue\":\"datavnpvvd\",\"targetValue\":\"datajnaqyq\",\"operator\":\"slz\"}],\"ifNotExistsDetails\":{\"resourceId\":\"dsvmwbitekdtf\",\"totalResources\":1288145851}},\"policyDefinitionGroupNames\":[\"ybxq\"],\"components\":[{\"id\":\"ybfzdqekivycp\",\"type\":\"vdizulrqtbh\",\"name\":\"ezp\",\"timestamp\":\"2021-11-14T04:34:41Z\",\"complianceState\":\"yfmx\",\"fkgilnoudccgnd\":\"datat\",\"gqqyeqfcbuulpyuf\":\"datagdpri\",\"igi\":\"dataqjfshtujcyo\",\"kqnqvkixnmbzme\":\"datawdcsk\"},{\"id\":\"yrzwim\",\"type\":\"ayspzvriet\",\"name\":\"phmdzxplgtp\",\"timestamp\":\"2021-11-09T07:45:01Z\",\"complianceState\":\"tlzmgs\",\"bkkz\":\"datazr\",\"ws\":\"datavlzdmnfm\",\"orimmo\":\"dataafofu\",\"ovanyrva\":\"datazwdehkkmvhz\"},{\"id\":\"tgelgwewikfy\",\"type\":\"a\",\"name\":\"mymnqoqjumovsf\",\"timestamp\":\"2021-01-05T16:22:17Z\",\"complianceState\":\"zo\",\"oxfaxdtn\":\"datamfmvsmc\"},{\"id\":\"fbsatroi\",\"type\":\"esugmocpcjycbo\",\"name\":\"rgttw\",\"timestamp\":\"2021-04-14T15:02:25Z\",\"complianceState\":\"iuorinikc\",\"mtmqrx\":\"dataksriw\"}],\"policyDefinitionVersion\":\"qvvyczyay\",\"policySetDefinitionVersion\":\"tg\",\"policyAssignmentVersion\":\"xiqahr\",\"o\":\"dataxmibplnu\",\"vyztxlno\":\"dataryefqmw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForSubscriptionLevelPolicyAssignment(PolicyStatesResource.DEFAULT, "ajuop", "y", 972582725,
                "mk", "lhvcwl", OffsetDateTime.parse("2020-12-27T08:55:26Z"),
                OffsetDateTime.parse("2021-07-04T15:44:06Z"), "ejkluxxr", "zobuzmsxgamtdtk", "ppthuzdprmimrl",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T17:40:52Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("ec", response.iterator().next().resourceId());
        Assertions.assertEquals("amfmxtllfl", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("mq", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("rrfijhgg", response.iterator().next().effectiveParameters());
        Assertions.assertFalse(response.iterator().next().isCompliant());
        Assertions.assertEquals("gamk", response.iterator().next().subscriptionId());
        Assertions.assertEquals("lirwdvf", response.iterator().next().resourceType());
        Assertions.assertEquals("sdpzouhktqrxqwq", response.iterator().next().resourceLocation());
        Assertions.assertEquals("xrdfddtu", response.iterator().next().resourceGroup());
        Assertions.assertEquals("ygta", response.iterator().next().resourceTags());
        Assertions.assertEquals("zcxdfweapyfmlxrl", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("h", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("spi", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("eimixlmdbgicehf", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("mdrjuqbpxt", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("lj", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("znpaxwfqtyyqiprc", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("ungbsoljc", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("iigz", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("uck", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("dsk", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("tiiqqcqikclsmaln", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("woykdnonaaxwm", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("ru", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("qcwnynl", response.iterator().next().complianceState());
        Assertions.assertEquals("cbgvsbt",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("rtoxadhxuvjhxm",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("twmlg",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("slz",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("dsvmwbitekdtf",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(1288145851,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("ybxq", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("ybfzdqekivycp", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("vdizulrqtbh", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("ezp", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T04:34:41Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("yfmx", response.iterator().next().components().get(0).complianceState());
    }
}
