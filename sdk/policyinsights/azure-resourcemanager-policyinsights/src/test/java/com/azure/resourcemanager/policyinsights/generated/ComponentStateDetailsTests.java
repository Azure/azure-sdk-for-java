// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.policyinsights.models.ComponentStateDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentStateDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentStateDetails model = BinaryData.fromString(
            "{\"id\":\"iiojnal\",\"type\":\"fk\",\"name\":\"vsexsowuelu\",\"timestamp\":\"2021-01-18T04:02:59Z\",\"complianceState\":\"hhxvrhmzkwpj\",\"ujxukndxd\":\"dataspughftqsxhq\",\"syqtfi\":\"datagrjguufzd\",\"phoszqz\":\"datawhbotzingamv\",\"kfwynw\":\"datadphqamv\"}")
            .toObject(ComponentStateDetails.class);
        Assertions.assertEquals("iiojnal", model.id());
        Assertions.assertEquals("fk", model.type());
        Assertions.assertEquals("vsexsowuelu", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T04:02:59Z"), model.timestamp());
        Assertions.assertEquals("hhxvrhmzkwpj", model.complianceState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentStateDetails model = new ComponentStateDetails().withId("iiojnal")
            .withType("fk")
            .withName("vsexsowuelu")
            .withTimestamp(OffsetDateTime.parse("2021-01-18T04:02:59Z"))
            .withComplianceState("hhxvrhmzkwpj")
            .withAdditionalProperties(mapOf("phoszqz", "datawhbotzingamv", "ujxukndxd", "dataspughftqsxhq", "syqtfi",
                "datagrjguufzd", "kfwynw", "datadphqamv"));
        model = BinaryData.fromObject(model).toObject(ComponentStateDetails.class);
        Assertions.assertEquals("iiojnal", model.id());
        Assertions.assertEquals("fk", model.type());
        Assertions.assertEquals("vsexsowuelu", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T04:02:59Z"), model.timestamp());
        Assertions.assertEquals("hhxvrhmzkwpj", model.complianceState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
