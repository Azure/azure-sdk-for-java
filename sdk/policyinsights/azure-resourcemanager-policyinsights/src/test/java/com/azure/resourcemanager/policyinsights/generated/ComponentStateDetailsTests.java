// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.policyinsights.models.ComponentStateDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentStateDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentStateDetails model = BinaryData.fromString(
            "{\"id\":\"heyd\",\"type\":\"dshmkxmaehvbbx\",\"name\":\"iplt\",\"timestamp\":\"2021-04-21T08:05:23Z\",\"complianceState\":\"baxk\",\"\":{\"yklyhpluodpvruud\":\"datawrck\",\"xeclzedqbcvhzlhp\":\"datagzibthostgktstv\"}}")
            .toObject(ComponentStateDetails.class);
        Assertions.assertEquals("heyd", model.id());
        Assertions.assertEquals("dshmkxmaehvbbx", model.type());
        Assertions.assertEquals("iplt", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T08:05:23Z"), model.timestamp());
        Assertions.assertEquals("baxk", model.complianceState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentStateDetails model = new ComponentStateDetails().withId("heyd")
            .withType("dshmkxmaehvbbx")
            .withName("iplt")
            .withTimestamp(OffsetDateTime.parse("2021-04-21T08:05:23Z"))
            .withComplianceState("baxk")
            .withAdditionalProperties(mapOf());
        model = BinaryData.fromObject(model).toObject(ComponentStateDetails.class);
        Assertions.assertEquals("heyd", model.id());
        Assertions.assertEquals("dshmkxmaehvbbx", model.type());
        Assertions.assertEquals("iplt", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T08:05:23Z"), model.timestamp());
        Assertions.assertEquals("baxk", model.complianceState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
