// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner;
import com.azure.resourcemanager.policyinsights.models.Remediation;
import com.azure.resourcemanager.policyinsights.models.RemediationFilters;
import com.azure.resourcemanager.policyinsights.models.RemediationPropertiesFailureThreshold;
import com.azure.resourcemanager.policyinsights.models.ResourceDiscoveryMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RemediationsCreateOrUpdateAtResourceWithResponseMockTests {
    @Test
    public void testCreateOrUpdateAtResourceWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyAssignmentId\":\"pdqwtygevgwmse\",\"policyDefinitionReferenceId\":\"rxifvqnrx\",\"resourceDiscoveryMode\":\"ReEvaluateCompliance\",\"provisioningState\":\"jptnvwjhrsidqpx\",\"createdOn\":\"2021-05-15T14:07:39Z\",\"lastUpdatedOn\":\"2021-10-13T04:51:51Z\",\"filters\":{\"locations\":[\"ngatwmy\",\"yutrymd\",\"mfjhpycvjqdvdwkq\"],\"resourceIds\":[\"rlefgnaavu\",\"gnteta\",\"utnpdctuhspfefyi\",\"duyeuyl\"]},\"deploymentStatus\":{\"totalDeployments\":121038362,\"successfulDeployments\":2119468951,\"failedDeployments\":121614822},\"statusMessage\":\"gsut\",\"correlationId\":\"llnmwyn\",\"resourceCount\":42753735,\"parallelDeployments\":37203877,\"failureThreshold\":{\"percentage\":59.278442}},\"id\":\"atxtjrrlkmdskjhh\",\"name\":\"dl\",\"type\":\"jfoxcxscvslxl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Remediation response = manager.remediations()
            .createOrUpdateAtResourceWithResponse("ywmhmptyrilkfbnr", "qxvztpbnfnqtxjt",
                new RemediationInner().withPolicyAssignmentId("lswbnf")
                    .withPolicyDefinitionReferenceId("epl")
                    .withResourceDiscoveryMode(ResourceDiscoveryMode.EXISTING_NON_COMPLIANT)
                    .withFilters(new RemediationFilters().withLocations(Arrays.asList("ahvmywhsbrc"))
                        .withResourceIds(Arrays.asList("csjjzyvoaqajuve")))
                    .withResourceCount(560583996)
                    .withParallelDeployments(1887019251)
                    .withFailureThreshold(new RemediationPropertiesFailureThreshold().withPercentage(43.213737F)),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pdqwtygevgwmse", response.policyAssignmentId());
        Assertions.assertEquals("rxifvqnrx", response.policyDefinitionReferenceId());
        Assertions.assertEquals(ResourceDiscoveryMode.RE_EVALUATE_COMPLIANCE, response.resourceDiscoveryMode());
        Assertions.assertEquals("ngatwmy", response.filters().locations().get(0));
        Assertions.assertEquals("rlefgnaavu", response.filters().resourceIds().get(0));
        Assertions.assertEquals(42753735, response.resourceCount());
        Assertions.assertEquals(37203877, response.parallelDeployments());
        Assertions.assertEquals(59.278442F, response.failureThreshold().percentage());
    }
}
