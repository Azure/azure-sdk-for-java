// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyState;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesListQueryResultsForPolicySetDefinitionMockTests {
    @Test
    public void testListQueryResultsForPolicySetDefinition() throws Exception {
        String responseStr
            = "{\"value\":[{\"@odata.id\":\"fbklciichgjsysmv\",\"@odata.context\":\"dgwxfkzsifcu\",\"timestamp\":\"2021-12-03T02:20:55Z\",\"resourceId\":\"jgc\",\"policyAssignmentId\":\"vecb\",\"policyDefinitionId\":\"jtrdxr\",\"effectiveParameters\":\"agbbgia\",\"isCompliant\":false,\"subscriptionId\":\"kpgdqxwabzrwiq\",\"resourceType\":\"ha\",\"resourceLocation\":\"cdosqkptj\",\"resourceGroup\":\"kifmmainw\",\"resourceTags\":\"d\",\"policyAssignmentName\":\"pbqwuntobu\",\"policyAssignmentOwner\":\"azz\",\"policyAssignmentParameters\":\"wgvydjufb\",\"policyAssignmentScope\":\"lblaxpegj\",\"policyDefinitionName\":\"abalfdxaglz\",\"policyDefinitionAction\":\"tlbtlqho\",\"policyDefinitionCategory\":\"ouvmrsiflik\",\"policySetDefinitionId\":\"pzkgxfxfmyrqsd\",\"policySetDefinitionName\":\"oksz\",\"policySetDefinitionOwner\":\"mhwgp\",\"policySetDefinitionCategory\":\"rdiuwkirksk\",\"policySetDefinitionParameters\":\"tsdetjygowifcq\",\"managementGroupIds\":\"lzkgysdgzyybzo\",\"policyDefinitionReferenceId\":\"v\",\"complianceState\":\"ptvdxxheigm\",\"policyEvaluationDetails\":{\"evaluatedExpressions\":[{\"result\":\"ghjhjvmabzzbwa\",\"expression\":\"fmdafbgymqtnap\",\"expressionKind\":\"ojxrjnbsconxavi\",\"path\":\"eychbji\",\"expressionValue\":\"datafsgnw\",\"targetValue\":\"datazed\",\"operator\":\"l\"},{\"result\":\"borx\",\"expression\":\"mlnfyz\",\"expressionKind\":\"frbypi\",\"path\":\"bkpdjtaqhsmq\",\"expressionValue\":\"datapdgonjhxs\",\"targetValue\":\"datahmgpczqulpt\",\"operator\":\"vcpxtzhigqqbtimp\"}],\"ifNotExistsDetails\":{\"resourceId\":\"lornsihqh\",\"totalResources\":37153931}},\"policyDefinitionGroupNames\":[\"suaawj\",\"kxwj\"],\"components\":[{\"id\":\"mnn\",\"type\":\"xyxvqban\",\"name\":\"jtgirnb\",\"timestamp\":\"2021-06-12T11:43:38Z\",\"complianceState\":\"ddorgmynltwmpft\",\"\":{\"jogsyx\":\"datae\",\"nrecchdidrm\":\"dataetamfddrvlkpzwb\"}},{\"id\":\"kahmjedbiucvkhhw\",\"type\":\"pjbweunxcq\",\"name\":\"ihufoihp\",\"timestamp\":\"2021-08-30T04:57:16Z\",\"complianceState\":\"xvgnzuzpbgkzcs\",\"\":{\"irzkaugpucdo\":\"datauzvkunhdimjuk\",\"lwgofm\":\"datafq\",\"lvzkl\":\"dataxwr\",\"kakvlbishjvpza\":\"datavbgikyj\"}},{\"id\":\"uoskaoizjixwf\",\"type\":\"d\",\"name\":\"kkcxwnujvqynvav\",\"timestamp\":\"2021-04-22T12:28:29Z\",\"complianceState\":\"muqohh\",\"\":{\"quddrwjclj\":\"dataa\"}}],\"policyDefinitionVersion\":\"hlhpvzadb\",\"policySetDefinitionVersion\":\"nnin\",\"policyAssignmentVersion\":\"h\",\"\":{\"tiucwv\":\"datafrmv\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PolicyState> response = manager.policyStates()
            .listQueryResultsForPolicySetDefinition(PolicyStatesResource.LATEST, "aujegqdtadra", "gddhjkrukizyhgs",
                1804989920, "nqskt", "qfpjb", OffsetDateTime.parse("2021-07-05T06:41:06Z"),
                OffsetDateTime.parse("2021-09-18T07:56:18Z"), "weeiwdhdmnc", "bf", "uscstunmlh",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T02:20:55Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("jgc", response.iterator().next().resourceId());
        Assertions.assertEquals("vecb", response.iterator().next().policyAssignmentId());
        Assertions.assertEquals("jtrdxr", response.iterator().next().policyDefinitionId());
        Assertions.assertEquals("agbbgia", response.iterator().next().effectiveParameters());
        Assertions.assertEquals(false, response.iterator().next().isCompliant());
        Assertions.assertEquals("kpgdqxwabzrwiq", response.iterator().next().subscriptionId());
        Assertions.assertEquals("ha", response.iterator().next().resourceType());
        Assertions.assertEquals("cdosqkptj", response.iterator().next().resourceLocation());
        Assertions.assertEquals("kifmmainw", response.iterator().next().resourceGroup());
        Assertions.assertEquals("d", response.iterator().next().resourceTags());
        Assertions.assertEquals("pbqwuntobu", response.iterator().next().policyAssignmentName());
        Assertions.assertEquals("azz", response.iterator().next().policyAssignmentOwner());
        Assertions.assertEquals("wgvydjufb", response.iterator().next().policyAssignmentParameters());
        Assertions.assertEquals("lblaxpegj", response.iterator().next().policyAssignmentScope());
        Assertions.assertEquals("abalfdxaglz", response.iterator().next().policyDefinitionName());
        Assertions.assertEquals("tlbtlqho", response.iterator().next().policyDefinitionAction());
        Assertions.assertEquals("ouvmrsiflik", response.iterator().next().policyDefinitionCategory());
        Assertions.assertEquals("pzkgxfxfmyrqsd", response.iterator().next().policySetDefinitionId());
        Assertions.assertEquals("oksz", response.iterator().next().policySetDefinitionName());
        Assertions.assertEquals("mhwgp", response.iterator().next().policySetDefinitionOwner());
        Assertions.assertEquals("rdiuwkirksk", response.iterator().next().policySetDefinitionCategory());
        Assertions.assertEquals("tsdetjygowifcq", response.iterator().next().policySetDefinitionParameters());
        Assertions.assertEquals("lzkgysdgzyybzo", response.iterator().next().managementGroupIds());
        Assertions.assertEquals("v", response.iterator().next().policyDefinitionReferenceId());
        Assertions.assertEquals("ptvdxxheigm", response.iterator().next().complianceState());
        Assertions.assertEquals("ghjhjvmabzzbwa",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).result());
        Assertions.assertEquals("fmdafbgymqtnap",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).expression());
        Assertions.assertEquals("eychbji",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).path());
        Assertions.assertEquals("l",
            response.iterator().next().policyEvaluationDetails().evaluatedExpressions().get(0).operator());
        Assertions.assertEquals("lornsihqh",
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().resourceId());
        Assertions.assertEquals(37153931,
            response.iterator().next().policyEvaluationDetails().ifNotExistsDetails().totalResources());
        Assertions.assertEquals("suaawj", response.iterator().next().policyDefinitionGroupNames().get(0));
        Assertions.assertEquals("mnn", response.iterator().next().components().get(0).id());
        Assertions.assertEquals("xyxvqban", response.iterator().next().components().get(0).type());
        Assertions.assertEquals("jtgirnb", response.iterator().next().components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T11:43:38Z"),
            response.iterator().next().components().get(0).timestamp());
        Assertions.assertEquals("ddorgmynltwmpft", response.iterator().next().components().get(0).complianceState());
    }
}
