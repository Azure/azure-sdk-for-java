// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.policyinsights.PolicyInsightsManager;
import com.azure.resourcemanager.policyinsights.models.PolicyStatesSummaryResourceType;
import com.azure.resourcemanager.policyinsights.models.SummarizeResults;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PolicyStatesSummarizeForPolicyDefinitionWithResponseMockTests {
    @Test
    public void testSummarizeForPolicyDefinitionWithResponse() throws Exception {
        String responseStr
            = "{\"@odata.context\":\"phmpoejnglpwsada\",\"@odata.count\":1265588943,\"value\":[{\"@odata.id\":\"pezco\",\"@odata.context\":\"yjrmfqzwqd\",\"results\":{\"queryResultsUri\":\"eedcnwmywx\",\"nonCompliantResources\":1432972249,\"nonCompliantPolicies\":2144785001,\"resourceDetails\":[{},{},{}],\"policyDetails\":[{},{}],\"policyGroupDetails\":[{},{},{}]},\"policyAssignments\":[{\"policyAssignmentId\":\"qpqifdbmptrwtxz\",\"policySetDefinitionId\":\"samonat\",\"results\":{},\"policyDefinitions\":[{},{},{},{}],\"policyGroups\":[{}]},{\"policyAssignmentId\":\"qsqjghrmthsplwst\",\"policySetDefinitionId\":\"srgxfq\",\"results\":{},\"policyDefinitions\":[{},{},{}],\"policyGroups\":[{},{},{},{}]}]},{\"@odata.id\":\"vxgzwhsxyrujmt\",\"@odata.context\":\"eslikyohzixyqhf\",\"results\":{\"queryResultsUri\":\"yc\",\"nonCompliantResources\":1630150713,\"nonCompliantPolicies\":933918342,\"resourceDetails\":[{},{},{},{}],\"policyDetails\":[{},{},{},{}],\"policyGroupDetails\":[{},{}]},\"policyAssignments\":[{\"policyAssignmentId\":\"hrptyodlhkfktltd\",\"policySetDefinitionId\":\"objopnou\",\"results\":{},\"policyDefinitions\":[{},{},{}],\"policyGroups\":[{}]},{\"policyAssignmentId\":\"xs\",\"policySetDefinitionId\":\"uzyigfcvcewbwqhd\",\"results\":{},\"policyDefinitions\":[{},{}],\"policyGroups\":[{},{}]},{\"policyAssignmentId\":\"rncmazdfsqxh\",\"policySetDefinitionId\":\"mrejparnpvgr\",\"results\":{},\"policyDefinitions\":[{},{}],\"policyGroups\":[{},{},{}]},{\"policyAssignmentId\":\"rcwgzwllxzlhhf\",\"policySetDefinitionId\":\"acfculzjrmhpf\",\"results\":{},\"policyDefinitions\":[{},{},{}],\"policyGroups\":[{}]}]}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PolicyInsightsManager manager = PolicyInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SummarizeResults response = manager.policyStates()
            .summarizeForPolicyDefinitionWithResponse(PolicyStatesSummaryResourceType.LATEST, "kvyhzokpoyu", "h",
                1528413732, OffsetDateTime.parse("2021-07-03T07:01:32Z"), OffsetDateTime.parse("2021-05-30T03:06:19Z"),
                "na", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("eedcnwmywx", response.value().get(0).results().queryResultsUri());
        Assertions.assertEquals(1432972249, response.value().get(0).results().nonCompliantResources());
        Assertions.assertEquals(2144785001, response.value().get(0).results().nonCompliantPolicies());
        Assertions.assertEquals("qpqifdbmptrwtxz",
            response.value().get(0).policyAssignments().get(0).policyAssignmentId());
        Assertions.assertEquals("samonat", response.value().get(0).policyAssignments().get(0).policySetDefinitionId());
    }
}
