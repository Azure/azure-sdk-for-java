// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.policyinsights.models.ComponentEventDetails;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ComponentEventDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ComponentEventDetails model = BinaryData.fromString(
            "{\"id\":\"us\",\"type\":\"touwaboekqv\",\"name\":\"lns\",\"timestamp\":\"2021-06-29T22:28:15Z\",\"tenantId\":\"wyjsflhhcaalnjix\",\"principalOid\":\"xyawj\",\"policyDefinitionAction\":\"aq\",\"eli\":\"datayjpkiidzyexz\",\"bnxknalaulppg\":\"datahnrztfol\"}")
            .toObject(ComponentEventDetails.class);
        Assertions.assertEquals("us", model.id());
        Assertions.assertEquals("touwaboekqv", model.type());
        Assertions.assertEquals("lns", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-29T22:28:15Z"), model.timestamp());
        Assertions.assertEquals("wyjsflhhcaalnjix", model.tenantId());
        Assertions.assertEquals("xyawj", model.principalOid());
        Assertions.assertEquals("aq", model.policyDefinitionAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ComponentEventDetails model = new ComponentEventDetails().withId("us")
            .withType("touwaboekqv")
            .withName("lns")
            .withTimestamp(OffsetDateTime.parse("2021-06-29T22:28:15Z"))
            .withTenantId("wyjsflhhcaalnjix")
            .withPrincipalOid("xyawj")
            .withPolicyDefinitionAction("aq")
            .withAdditionalProperties(mapOf("eli", "datayjpkiidzyexz", "bnxknalaulppg", "datahnrztfol"));
        model = BinaryData.fromObject(model).toObject(ComponentEventDetails.class);
        Assertions.assertEquals("us", model.id());
        Assertions.assertEquals("touwaboekqv", model.type());
        Assertions.assertEquals("lns", model.name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-29T22:28:15Z"), model.timestamp());
        Assertions.assertEquals("wyjsflhhcaalnjix", model.tenantId());
        Assertions.assertEquals("xyawj", model.principalOid());
        Assertions.assertEquals("aq", model.policyDefinitionAction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
