// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.policyinsights.fluent.models.PolicyEventInner;
import com.azure.resourcemanager.policyinsights.models.ComponentEventDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PolicyEventInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PolicyEventInner model = BinaryData.fromString(
            "{\"@odata.id\":\"ebwwaloayqc\",\"@odata.context\":\"rtzju\",\"timestamp\":\"2021-08-18T20:27:18Z\",\"resourceId\":\"zmh\",\"policyAssignmentId\":\"ongmtsa\",\"policyDefinitionId\":\"cbpwxqpsrknft\",\"effectiveParameters\":\"vriuhprwmdyvx\",\"isCompliant\":true,\"subscriptionId\":\"riwwroy\",\"resourceType\":\"exrmcqibycnojvk\",\"resourceLocation\":\"e\",\"resourceGroup\":\"sgzvahapjyzhpv\",\"resourceTags\":\"zcjrvxdjzlmwlx\",\"policyAssignmentName\":\"ug\",\"policyAssignmentOwner\":\"zovawjvz\",\"policyAssignmentParameters\":\"luthn\",\"policyAssignmentScope\":\"rnxipei\",\"policyDefinitionName\":\"jzuaejxdultskzbb\",\"policyDefinitionAction\":\"zumveekgpwo\",\"policyDefinitionCategory\":\"hkfpbs\",\"policySetDefinitionId\":\"ofd\",\"policySetDefinitionName\":\"uusdttouwa\",\"policySetDefinitionOwner\":\"ekqvkeln\",\"policySetDefinitionCategory\":\"vbxwyjsflhh\",\"policySetDefinitionParameters\":\"aln\",\"managementGroupIds\":\"xisxyawjoyaqcsl\",\"policyDefinitionReferenceId\":\"pkii\",\"complianceState\":\"yexz\",\"tenantId\":\"lixhnrztfol\",\"principalOid\":\"nxknalaulp\",\"components\":[{\"id\":\"tpnapnyiropuhpig\",\"type\":\"gylgqgitxmedjvcs\",\"name\":\"n\",\"timestamp\":\"2021-07-27T06:18:52Z\",\"tenantId\":\"cwzzhxgktr\",\"principalOid\":\"ucnapkteoellwp\",\"policyDefinitionAction\":\"d\",\"\":{\"rhhuaopppcqeqx\":\"datafqbuaceopzf\",\"izpost\":\"datalzdahzxctobgbkdm\",\"nrmfqjhhk\":\"datagrcfb\"}},{\"id\":\"pvjymjhxxjyng\",\"type\":\"ivkrtsw\",\"name\":\"qzvszjf\",\"timestamp\":\"2021-03-12T20:34:44Z\",\"tenantId\":\"fdxxivetvtcqaqtd\",\"principalOid\":\"mcbxvwvxysl\",\"policyDefinitionAction\":\"hsfxoblytkb\",\"\":{\"hqjohxcrsbfova\":\"dataewwwfbkrvrnsv\"}},{\"id\":\"ruvw\",\"type\":\"sqfsubcgjbirxb\",\"name\":\"bsrfbj\",\"timestamp\":\"2021-07-26T21:20:39Z\",\"tenantId\":\"ssotftpv\",\"principalOid\":\"bexilzznfqqnv\",\"policyDefinitionAction\":\"mqtaruoujmkcjh\",\"\":{\"ervnaenqpehi\":\"datatjrybnwjewgdr\",\"mifthnzdnd\":\"datadoy\",\"nayqi\":\"datal\",\"hqlkthumaqo\":\"dataynduha\"}}],\"\":{\"gccymvaolpssl\":\"dataycduier\",\"d\":\"datalfmmdnbbglzpswi\"}}")
            .toObject(PolicyEventInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T20:27:18Z"), model.timestamp());
        Assertions.assertEquals("zmh", model.resourceId());
        Assertions.assertEquals("ongmtsa", model.policyAssignmentId());
        Assertions.assertEquals("cbpwxqpsrknft", model.policyDefinitionId());
        Assertions.assertEquals("vriuhprwmdyvx", model.effectiveParameters());
        Assertions.assertEquals(true, model.isCompliant());
        Assertions.assertEquals("riwwroy", model.subscriptionId());
        Assertions.assertEquals("exrmcqibycnojvk", model.resourceType());
        Assertions.assertEquals("e", model.resourceLocation());
        Assertions.assertEquals("sgzvahapjyzhpv", model.resourceGroup());
        Assertions.assertEquals("zcjrvxdjzlmwlx", model.resourceTags());
        Assertions.assertEquals("ug", model.policyAssignmentName());
        Assertions.assertEquals("zovawjvz", model.policyAssignmentOwner());
        Assertions.assertEquals("luthn", model.policyAssignmentParameters());
        Assertions.assertEquals("rnxipei", model.policyAssignmentScope());
        Assertions.assertEquals("jzuaejxdultskzbb", model.policyDefinitionName());
        Assertions.assertEquals("zumveekgpwo", model.policyDefinitionAction());
        Assertions.assertEquals("hkfpbs", model.policyDefinitionCategory());
        Assertions.assertEquals("ofd", model.policySetDefinitionId());
        Assertions.assertEquals("uusdttouwa", model.policySetDefinitionName());
        Assertions.assertEquals("ekqvkeln", model.policySetDefinitionOwner());
        Assertions.assertEquals("vbxwyjsflhh", model.policySetDefinitionCategory());
        Assertions.assertEquals("aln", model.policySetDefinitionParameters());
        Assertions.assertEquals("xisxyawjoyaqcsl", model.managementGroupIds());
        Assertions.assertEquals("pkii", model.policyDefinitionReferenceId());
        Assertions.assertEquals("yexz", model.complianceState());
        Assertions.assertEquals("lixhnrztfol", model.tenantId());
        Assertions.assertEquals("nxknalaulp", model.principalOid());
        Assertions.assertEquals("tpnapnyiropuhpig", model.components().get(0).id());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.components().get(0).type());
        Assertions.assertEquals("n", model.components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T06:18:52Z"), model.components().get(0).timestamp());
        Assertions.assertEquals("cwzzhxgktr", model.components().get(0).tenantId());
        Assertions.assertEquals("ucnapkteoellwp", model.components().get(0).principalOid());
        Assertions.assertEquals("d", model.components().get(0).policyDefinitionAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PolicyEventInner model = new PolicyEventInner().withTimestamp(OffsetDateTime.parse("2021-08-18T20:27:18Z"))
            .withResourceId("zmh")
            .withPolicyAssignmentId("ongmtsa")
            .withPolicyDefinitionId("cbpwxqpsrknft")
            .withEffectiveParameters("vriuhprwmdyvx")
            .withIsCompliant(true)
            .withSubscriptionId("riwwroy")
            .withResourceType("exrmcqibycnojvk")
            .withResourceLocation("e")
            .withResourceGroup("sgzvahapjyzhpv")
            .withResourceTags("zcjrvxdjzlmwlx")
            .withPolicyAssignmentName("ug")
            .withPolicyAssignmentOwner("zovawjvz")
            .withPolicyAssignmentParameters("luthn")
            .withPolicyAssignmentScope("rnxipei")
            .withPolicyDefinitionName("jzuaejxdultskzbb")
            .withPolicyDefinitionAction("zumveekgpwo")
            .withPolicyDefinitionCategory("hkfpbs")
            .withPolicySetDefinitionId("ofd")
            .withPolicySetDefinitionName("uusdttouwa")
            .withPolicySetDefinitionOwner("ekqvkeln")
            .withPolicySetDefinitionCategory("vbxwyjsflhh")
            .withPolicySetDefinitionParameters("aln")
            .withManagementGroupIds("xisxyawjoyaqcsl")
            .withPolicyDefinitionReferenceId("pkii")
            .withComplianceState("yexz")
            .withTenantId("lixhnrztfol")
            .withPrincipalOid("nxknalaulp")
            .withComponents(Arrays.asList(
                new ComponentEventDetails().withId("tpnapnyiropuhpig")
                    .withType("gylgqgitxmedjvcs")
                    .withName("n")
                    .withTimestamp(OffsetDateTime.parse("2021-07-27T06:18:52Z"))
                    .withTenantId("cwzzhxgktr")
                    .withPrincipalOid("ucnapkteoellwp")
                    .withPolicyDefinitionAction("d")
                    .withAdditionalProperties(mapOf()),
                new ComponentEventDetails().withId("pvjymjhxxjyng")
                    .withType("ivkrtsw")
                    .withName("qzvszjf")
                    .withTimestamp(OffsetDateTime.parse("2021-03-12T20:34:44Z"))
                    .withTenantId("fdxxivetvtcqaqtd")
                    .withPrincipalOid("mcbxvwvxysl")
                    .withPolicyDefinitionAction("hsfxoblytkb")
                    .withAdditionalProperties(mapOf()),
                new ComponentEventDetails().withId("ruvw")
                    .withType("sqfsubcgjbirxb")
                    .withName("bsrfbj")
                    .withTimestamp(OffsetDateTime.parse("2021-07-26T21:20:39Z"))
                    .withTenantId("ssotftpv")
                    .withPrincipalOid("bexilzznfqqnv")
                    .withPolicyDefinitionAction("mqtaruoujmkcjh")
                    .withAdditionalProperties(mapOf())))
            .withAdditionalProperties(mapOf("@odata.id", "ebwwaloayqc", "@odata.context", "rtzju"));
        model = BinaryData.fromObject(model).toObject(PolicyEventInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T20:27:18Z"), model.timestamp());
        Assertions.assertEquals("zmh", model.resourceId());
        Assertions.assertEquals("ongmtsa", model.policyAssignmentId());
        Assertions.assertEquals("cbpwxqpsrknft", model.policyDefinitionId());
        Assertions.assertEquals("vriuhprwmdyvx", model.effectiveParameters());
        Assertions.assertEquals(true, model.isCompliant());
        Assertions.assertEquals("riwwroy", model.subscriptionId());
        Assertions.assertEquals("exrmcqibycnojvk", model.resourceType());
        Assertions.assertEquals("e", model.resourceLocation());
        Assertions.assertEquals("sgzvahapjyzhpv", model.resourceGroup());
        Assertions.assertEquals("zcjrvxdjzlmwlx", model.resourceTags());
        Assertions.assertEquals("ug", model.policyAssignmentName());
        Assertions.assertEquals("zovawjvz", model.policyAssignmentOwner());
        Assertions.assertEquals("luthn", model.policyAssignmentParameters());
        Assertions.assertEquals("rnxipei", model.policyAssignmentScope());
        Assertions.assertEquals("jzuaejxdultskzbb", model.policyDefinitionName());
        Assertions.assertEquals("zumveekgpwo", model.policyDefinitionAction());
        Assertions.assertEquals("hkfpbs", model.policyDefinitionCategory());
        Assertions.assertEquals("ofd", model.policySetDefinitionId());
        Assertions.assertEquals("uusdttouwa", model.policySetDefinitionName());
        Assertions.assertEquals("ekqvkeln", model.policySetDefinitionOwner());
        Assertions.assertEquals("vbxwyjsflhh", model.policySetDefinitionCategory());
        Assertions.assertEquals("aln", model.policySetDefinitionParameters());
        Assertions.assertEquals("xisxyawjoyaqcsl", model.managementGroupIds());
        Assertions.assertEquals("pkii", model.policyDefinitionReferenceId());
        Assertions.assertEquals("yexz", model.complianceState());
        Assertions.assertEquals("lixhnrztfol", model.tenantId());
        Assertions.assertEquals("nxknalaulp", model.principalOid());
        Assertions.assertEquals("tpnapnyiropuhpig", model.components().get(0).id());
        Assertions.assertEquals("gylgqgitxmedjvcs", model.components().get(0).type());
        Assertions.assertEquals("n", model.components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T06:18:52Z"), model.components().get(0).timestamp());
        Assertions.assertEquals("cwzzhxgktr", model.components().get(0).tenantId());
        Assertions.assertEquals("ucnapkteoellwp", model.components().get(0).principalOid());
        Assertions.assertEquals("d", model.components().get(0).policyDefinitionAction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
