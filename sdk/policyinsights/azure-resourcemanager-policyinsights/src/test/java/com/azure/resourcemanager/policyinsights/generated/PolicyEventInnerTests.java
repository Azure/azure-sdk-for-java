// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.policyinsights.fluent.models.PolicyEventInner;
import com.azure.resourcemanager.policyinsights.models.ComponentEventDetails;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PolicyEventInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PolicyEventInner model = BinaryData.fromString(
            "{\"@odata.id\":\"ccm\",\"@odata.context\":\"udxytlmoyrx\",\"timestamp\":\"2021-08-04T10:24:08Z\",\"resourceId\":\"dw\",\"policyAssignmentId\":\"ntxhdzhlrqjbhck\",\"policyDefinitionId\":\"lhrxsbkyvpyc\",\"effectiveParameters\":\"uzbpzkafku\",\"isCompliant\":false,\"subscriptionId\":\"nwbmeh\",\"resourceType\":\"eyvjusrtslhspkde\",\"resourceLocation\":\"aofmxagkvtme\",\"resourceGroup\":\"qkrhahvljua\",\"resourceTags\":\"quhcdhmduala\",\"policyAssignmentName\":\"qpv\",\"policyAssignmentOwner\":\"dmwsrcrgvxpvgomz\",\"policyAssignmentParameters\":\"misgwbnb\",\"policyAssignmentScope\":\"ldawkzbaliourqha\",\"policyDefinitionName\":\"uhashsfwx\",\"policyDefinitionAction\":\"owzxcu\",\"policyDefinitionCategory\":\"cjooxdjebwpucwwf\",\"policySetDefinitionId\":\"vbvmeu\",\"policySetDefinitionName\":\"ivyhzceuojgjrwju\",\"policySetDefinitionOwner\":\"otwmcdyt\",\"policySetDefinitionCategory\":\"wit\",\"policySetDefinitionParameters\":\"rjaw\",\"managementGroupIds\":\"wgxhn\",\"policyDefinitionReferenceId\":\"kxfbkpycgklwndn\",\"complianceState\":\"dauwhvylwzbtd\",\"tenantId\":\"ujznb\",\"principalOid\":\"ow\",\"components\":[{\"id\":\"zqlveualupjmkhf\",\"type\":\"bbcswsrtjri\",\"name\":\"rbpbewtghfgblcg\",\"timestamp\":\"2021-05-16T18:46:25Z\",\"tenantId\":\"lvqhjkbegibtnmx\",\"principalOid\":\"bwwaloa\",\"policyDefinitionAction\":\"cgwrtzjuz\",\"xongmtsavjcbpwxq\":\"datazmh\"},{\"id\":\"rknftguvriuhprwm\",\"type\":\"vxqtayriwwroyqbe\",\"name\":\"mcqibycnojv\",\"timestamp\":\"2021-02-06T03:19:14Z\",\"tenantId\":\"qsgzvahapj\",\"principalOid\":\"hpvgqz\",\"policyDefinitionAction\":\"rvxdjzlmw\",\"fhzovawjvzunluth\":\"datavu\",\"rnxipei\":\"datan\",\"e\":\"datapjzu\",\"kzbbtd\":\"dataxdult\"}],\"sjyofdx\":\"dataveekgpwozuhkfp\"}")
            .toObject(PolicyEventInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T10:24:08Z"), model.timestamp());
        Assertions.assertEquals("dw", model.resourceId());
        Assertions.assertEquals("ntxhdzhlrqjbhck", model.policyAssignmentId());
        Assertions.assertEquals("lhrxsbkyvpyc", model.policyDefinitionId());
        Assertions.assertEquals("uzbpzkafku", model.effectiveParameters());
        Assertions.assertFalse(model.isCompliant());
        Assertions.assertEquals("nwbmeh", model.subscriptionId());
        Assertions.assertEquals("eyvjusrtslhspkde", model.resourceType());
        Assertions.assertEquals("aofmxagkvtme", model.resourceLocation());
        Assertions.assertEquals("qkrhahvljua", model.resourceGroup());
        Assertions.assertEquals("quhcdhmduala", model.resourceTags());
        Assertions.assertEquals("qpv", model.policyAssignmentName());
        Assertions.assertEquals("dmwsrcrgvxpvgomz", model.policyAssignmentOwner());
        Assertions.assertEquals("misgwbnb", model.policyAssignmentParameters());
        Assertions.assertEquals("ldawkzbaliourqha", model.policyAssignmentScope());
        Assertions.assertEquals("uhashsfwx", model.policyDefinitionName());
        Assertions.assertEquals("owzxcu", model.policyDefinitionAction());
        Assertions.assertEquals("cjooxdjebwpucwwf", model.policyDefinitionCategory());
        Assertions.assertEquals("vbvmeu", model.policySetDefinitionId());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.policySetDefinitionName());
        Assertions.assertEquals("otwmcdyt", model.policySetDefinitionOwner());
        Assertions.assertEquals("wit", model.policySetDefinitionCategory());
        Assertions.assertEquals("rjaw", model.policySetDefinitionParameters());
        Assertions.assertEquals("wgxhn", model.managementGroupIds());
        Assertions.assertEquals("kxfbkpycgklwndn", model.policyDefinitionReferenceId());
        Assertions.assertEquals("dauwhvylwzbtd", model.complianceState());
        Assertions.assertEquals("ujznb", model.tenantId());
        Assertions.assertEquals("ow", model.principalOid());
        Assertions.assertEquals("zqlveualupjmkhf", model.components().get(0).id());
        Assertions.assertEquals("bbcswsrtjri", model.components().get(0).type());
        Assertions.assertEquals("rbpbewtghfgblcg", model.components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-16T18:46:25Z"), model.components().get(0).timestamp());
        Assertions.assertEquals("lvqhjkbegibtnmx", model.components().get(0).tenantId());
        Assertions.assertEquals("bwwaloa", model.components().get(0).principalOid());
        Assertions.assertEquals("cgwrtzjuz", model.components().get(0).policyDefinitionAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PolicyEventInner model = new PolicyEventInner().withTimestamp(OffsetDateTime.parse("2021-08-04T10:24:08Z"))
            .withResourceId("dw")
            .withPolicyAssignmentId("ntxhdzhlrqjbhck")
            .withPolicyDefinitionId("lhrxsbkyvpyc")
            .withEffectiveParameters("uzbpzkafku")
            .withIsCompliant(false)
            .withSubscriptionId("nwbmeh")
            .withResourceType("eyvjusrtslhspkde")
            .withResourceLocation("aofmxagkvtme")
            .withResourceGroup("qkrhahvljua")
            .withResourceTags("quhcdhmduala")
            .withPolicyAssignmentName("qpv")
            .withPolicyAssignmentOwner("dmwsrcrgvxpvgomz")
            .withPolicyAssignmentParameters("misgwbnb")
            .withPolicyAssignmentScope("ldawkzbaliourqha")
            .withPolicyDefinitionName("uhashsfwx")
            .withPolicyDefinitionAction("owzxcu")
            .withPolicyDefinitionCategory("cjooxdjebwpucwwf")
            .withPolicySetDefinitionId("vbvmeu")
            .withPolicySetDefinitionName("ivyhzceuojgjrwju")
            .withPolicySetDefinitionOwner("otwmcdyt")
            .withPolicySetDefinitionCategory("wit")
            .withPolicySetDefinitionParameters("rjaw")
            .withManagementGroupIds("wgxhn")
            .withPolicyDefinitionReferenceId("kxfbkpycgklwndn")
            .withComplianceState("dauwhvylwzbtd")
            .withTenantId("ujznb")
            .withPrincipalOid("ow")
            .withComponents(Arrays.asList(
                new ComponentEventDetails().withId("zqlveualupjmkhf")
                    .withType("bbcswsrtjri")
                    .withName("rbpbewtghfgblcg")
                    .withTimestamp(OffsetDateTime.parse("2021-05-16T18:46:25Z"))
                    .withTenantId("lvqhjkbegibtnmx")
                    .withPrincipalOid("bwwaloa")
                    .withPolicyDefinitionAction("cgwrtzjuz")
                    .withAdditionalProperties(mapOf("xongmtsavjcbpwxq", "datazmh")),
                new ComponentEventDetails().withId("rknftguvriuhprwm")
                    .withType("vxqtayriwwroyqbe")
                    .withName("mcqibycnojv")
                    .withTimestamp(OffsetDateTime.parse("2021-02-06T03:19:14Z"))
                    .withTenantId("qsgzvahapj")
                    .withPrincipalOid("hpvgqz")
                    .withPolicyDefinitionAction("rvxdjzlmw")
                    .withAdditionalProperties(mapOf("rnxipei", "datan", "kzbbtd", "dataxdult", "e", "datapjzu",
                        "fhzovawjvzunluth", "datavu"))))
            .withAdditionalProperties(
                mapOf("@odata.id", "ccm", "sjyofdx", "dataveekgpwozuhkfp", "@odata.context", "udxytlmoyrx"));
        model = BinaryData.fromObject(model).toObject(PolicyEventInner.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T10:24:08Z"), model.timestamp());
        Assertions.assertEquals("dw", model.resourceId());
        Assertions.assertEquals("ntxhdzhlrqjbhck", model.policyAssignmentId());
        Assertions.assertEquals("lhrxsbkyvpyc", model.policyDefinitionId());
        Assertions.assertEquals("uzbpzkafku", model.effectiveParameters());
        Assertions.assertFalse(model.isCompliant());
        Assertions.assertEquals("nwbmeh", model.subscriptionId());
        Assertions.assertEquals("eyvjusrtslhspkde", model.resourceType());
        Assertions.assertEquals("aofmxagkvtme", model.resourceLocation());
        Assertions.assertEquals("qkrhahvljua", model.resourceGroup());
        Assertions.assertEquals("quhcdhmduala", model.resourceTags());
        Assertions.assertEquals("qpv", model.policyAssignmentName());
        Assertions.assertEquals("dmwsrcrgvxpvgomz", model.policyAssignmentOwner());
        Assertions.assertEquals("misgwbnb", model.policyAssignmentParameters());
        Assertions.assertEquals("ldawkzbaliourqha", model.policyAssignmentScope());
        Assertions.assertEquals("uhashsfwx", model.policyDefinitionName());
        Assertions.assertEquals("owzxcu", model.policyDefinitionAction());
        Assertions.assertEquals("cjooxdjebwpucwwf", model.policyDefinitionCategory());
        Assertions.assertEquals("vbvmeu", model.policySetDefinitionId());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.policySetDefinitionName());
        Assertions.assertEquals("otwmcdyt", model.policySetDefinitionOwner());
        Assertions.assertEquals("wit", model.policySetDefinitionCategory());
        Assertions.assertEquals("rjaw", model.policySetDefinitionParameters());
        Assertions.assertEquals("wgxhn", model.managementGroupIds());
        Assertions.assertEquals("kxfbkpycgklwndn", model.policyDefinitionReferenceId());
        Assertions.assertEquals("dauwhvylwzbtd", model.complianceState());
        Assertions.assertEquals("ujznb", model.tenantId());
        Assertions.assertEquals("ow", model.principalOid());
        Assertions.assertEquals("zqlveualupjmkhf", model.components().get(0).id());
        Assertions.assertEquals("bbcswsrtjri", model.components().get(0).type());
        Assertions.assertEquals("rbpbewtghfgblcg", model.components().get(0).name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-16T18:46:25Z"), model.components().get(0).timestamp());
        Assertions.assertEquals("lvqhjkbegibtnmx", model.components().get(0).tenantId());
        Assertions.assertEquals("bwwaloa", model.components().get(0).principalOid());
        Assertions.assertEquals("cgwrtzjuz", model.components().get(0).policyDefinitionAction());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
