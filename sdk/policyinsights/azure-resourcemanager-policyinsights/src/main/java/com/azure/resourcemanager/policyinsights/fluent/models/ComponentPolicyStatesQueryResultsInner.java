// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.policyinsights.models.ComponentPolicyState;
import java.io.IOException;
import java.util.List;

/**
 * Query results.
 */
@Fluent
public final class ComponentPolicyStatesQueryResultsInner
    implements JsonSerializable<ComponentPolicyStatesQueryResultsInner> {
    /*
     * OData context string; used by OData clients to resolve type information based on metadata.
     */
    private String odataContext;

    /*
     * OData entity count; represents the number of policy state records returned.
     */
    private Integer odataCount;

    /*
     * Query results.
     */
    private List<ComponentPolicyState> value;

    /**
     * Creates an instance of ComponentPolicyStatesQueryResultsInner class.
     */
    public ComponentPolicyStatesQueryResultsInner() {
    }

    /**
     * Get the odataContext property: OData context string; used by OData clients to resolve type information based on
     * metadata.
     * 
     * @return the odataContext value.
     */
    public String odataContext() {
        return this.odataContext;
    }

    /**
     * Set the odataContext property: OData context string; used by OData clients to resolve type information based on
     * metadata.
     * 
     * @param odataContext the odataContext value to set.
     * @return the ComponentPolicyStatesQueryResultsInner object itself.
     */
    public ComponentPolicyStatesQueryResultsInner withOdataContext(String odataContext) {
        this.odataContext = odataContext;
        return this;
    }

    /**
     * Get the odataCount property: OData entity count; represents the number of policy state records returned.
     * 
     * @return the odataCount value.
     */
    public Integer odataCount() {
        return this.odataCount;
    }

    /**
     * Set the odataCount property: OData entity count; represents the number of policy state records returned.
     * 
     * @param odataCount the odataCount value to set.
     * @return the ComponentPolicyStatesQueryResultsInner object itself.
     */
    public ComponentPolicyStatesQueryResultsInner withOdataCount(Integer odataCount) {
        this.odataCount = odataCount;
        return this;
    }

    /**
     * Get the value property: Query results.
     * 
     * @return the value value.
     */
    public List<ComponentPolicyState> value() {
        return this.value;
    }

    /**
     * Set the value property: Query results.
     * 
     * @param value the value value to set.
     * @return the ComponentPolicyStatesQueryResultsInner object itself.
     */
    public ComponentPolicyStatesQueryResultsInner withValue(List<ComponentPolicyState> value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.context", this.odataContext);
        jsonWriter.writeNumberField("@odata.count", this.odataCount);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentPolicyStatesQueryResultsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentPolicyStatesQueryResultsInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentPolicyStatesQueryResultsInner.
     */
    public static ComponentPolicyStatesQueryResultsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentPolicyStatesQueryResultsInner deserializedComponentPolicyStatesQueryResultsInner
                = new ComponentPolicyStatesQueryResultsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@odata.context".equals(fieldName)) {
                    deserializedComponentPolicyStatesQueryResultsInner.odataContext = reader.getString();
                } else if ("@odata.count".equals(fieldName)) {
                    deserializedComponentPolicyStatesQueryResultsInner.odataCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("value".equals(fieldName)) {
                    List<ComponentPolicyState> value
                        = reader.readArray(reader1 -> ComponentPolicyState.fromJson(reader1));
                    deserializedComponentPolicyStatesQueryResultsInner.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponentPolicyStatesQueryResultsInner;
        });
    }
}
