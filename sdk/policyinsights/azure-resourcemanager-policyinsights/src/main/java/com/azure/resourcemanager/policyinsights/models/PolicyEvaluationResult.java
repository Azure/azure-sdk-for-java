// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The result of a non-compliant policy evaluation against the given resource content.
 */
@Immutable
public final class PolicyEvaluationResult implements JsonSerializable<PolicyEvaluationResult> {
    /*
     * The details of the policy that was evaluated.
     */
    private PolicyReference policyInfo;

    /*
     * The result of the policy evaluation against the resource. This will typically be 'NonCompliant' but may contain
     * other values if errors were encountered.
     */
    private String evaluationResult;

    /*
     * The detailed results of the policy expressions and values that were evaluated.
     */
    private PolicyEvaluationDetails evaluationDetails;

    /**
     * Creates an instance of PolicyEvaluationResult class.
     */
    public PolicyEvaluationResult() {
    }

    /**
     * Get the policyInfo property: The details of the policy that was evaluated.
     * 
     * @return the policyInfo value.
     */
    public PolicyReference policyInfo() {
        return this.policyInfo;
    }

    /**
     * Get the evaluationResult property: The result of the policy evaluation against the resource. This will typically
     * be 'NonCompliant' but may contain other values if errors were encountered.
     * 
     * @return the evaluationResult value.
     */
    public String evaluationResult() {
        return this.evaluationResult;
    }

    /**
     * Get the evaluationDetails property: The detailed results of the policy expressions and values that were
     * evaluated.
     * 
     * @return the evaluationDetails value.
     */
    public PolicyEvaluationDetails evaluationDetails() {
        return this.evaluationDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyInfo() != null) {
            policyInfo().validate();
        }
        if (evaluationDetails() != null) {
            evaluationDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyEvaluationResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyEvaluationResult.
     */
    public static PolicyEvaluationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyEvaluationResult deserializedPolicyEvaluationResult = new PolicyEvaluationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyInfo".equals(fieldName)) {
                    deserializedPolicyEvaluationResult.policyInfo = PolicyReference.fromJson(reader);
                } else if ("evaluationResult".equals(fieldName)) {
                    deserializedPolicyEvaluationResult.evaluationResult = reader.getString();
                } else if ("evaluationDetails".equals(fieldName)) {
                    deserializedPolicyEvaluationResult.evaluationDetails = PolicyEvaluationDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyEvaluationResult;
        });
    }
}
