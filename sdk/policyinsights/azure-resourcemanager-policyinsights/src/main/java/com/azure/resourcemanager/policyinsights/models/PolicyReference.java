// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource identifiers for a policy.
 */
@Immutable
public final class PolicyReference implements JsonSerializable<PolicyReference> {
    /*
     * The resource identifier of the policy definition.
     */
    private String policyDefinitionId;

    /*
     * The resource identifier of the policy set definition.
     */
    private String policySetDefinitionId;

    /*
     * The reference identifier of a specific policy definition within a policy set definition.
     */
    private String policyDefinitionReferenceId;

    /*
     * The resource identifier of the policy assignment.
     */
    private String policyAssignmentId;

    /**
     * Creates an instance of PolicyReference class.
     */
    public PolicyReference() {
    }

    /**
     * Get the policyDefinitionId property: The resource identifier of the policy definition.
     * 
     * @return the policyDefinitionId value.
     */
    public String policyDefinitionId() {
        return this.policyDefinitionId;
    }

    /**
     * Get the policySetDefinitionId property: The resource identifier of the policy set definition.
     * 
     * @return the policySetDefinitionId value.
     */
    public String policySetDefinitionId() {
        return this.policySetDefinitionId;
    }

    /**
     * Get the policyDefinitionReferenceId property: The reference identifier of a specific policy definition within a
     * policy set definition.
     * 
     * @return the policyDefinitionReferenceId value.
     */
    public String policyDefinitionReferenceId() {
        return this.policyDefinitionReferenceId;
    }

    /**
     * Get the policyAssignmentId property: The resource identifier of the policy assignment.
     * 
     * @return the policyAssignmentId value.
     */
    public String policyAssignmentId() {
        return this.policyAssignmentId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyReference.
     */
    public static PolicyReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyReference deserializedPolicyReference = new PolicyReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyDefinitionId".equals(fieldName)) {
                    deserializedPolicyReference.policyDefinitionId = reader.getString();
                } else if ("policySetDefinitionId".equals(fieldName)) {
                    deserializedPolicyReference.policySetDefinitionId = reader.getString();
                } else if ("policyDefinitionReferenceId".equals(fieldName)) {
                    deserializedPolicyReference.policyDefinitionReferenceId = reader.getString();
                } else if ("policyAssignmentId".equals(fieldName)) {
                    deserializedPolicyReference.policyAssignmentId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyReference;
        });
    }
}
