// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Policy metadata resource definition.
 */
@Immutable
public final class PolicyMetadataInner implements JsonSerializable<PolicyMetadataInner> {
    /*
     * Properties of the policy metadata.
     */
    private PolicyMetadataProperties innerProperties;

    /*
     * The ID of the policy metadata.
     */
    private String id;

    /*
     * The type of the policy metadata.
     */
    private String type;

    /*
     * The name of the policy metadata.
     */
    private String name;

    /**
     * Creates an instance of PolicyMetadataInner class.
     */
    public PolicyMetadataInner() {
    }

    /**
     * Get the innerProperties property: Properties of the policy metadata.
     * 
     * @return the innerProperties value.
     */
    private PolicyMetadataProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: The ID of the policy metadata.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: The type of the policy metadata.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the policy metadata.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the description property: The description of the policy metadata.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the requirements property: The requirements of the policy metadata.
     * 
     * @return the requirements value.
     */
    public String requirements() {
        return this.innerProperties() == null ? null : this.innerProperties().requirements();
    }

    /**
     * Get the metadataId property: The policy metadata identifier.
     * 
     * @return the metadataId value.
     */
    public String metadataId() {
        return this.innerProperties() == null ? null : this.innerProperties().metadataId();
    }

    /**
     * Get the category property: The category of the policy metadata.
     * 
     * @return the category value.
     */
    public String category() {
        return this.innerProperties() == null ? null : this.innerProperties().category();
    }

    /**
     * Get the title property: The title of the policy metadata.
     * 
     * @return the title value.
     */
    public String title() {
        return this.innerProperties() == null ? null : this.innerProperties().title();
    }

    /**
     * Get the owner property: The owner of the policy metadata.
     * 
     * @return the owner value.
     */
    public String owner() {
        return this.innerProperties() == null ? null : this.innerProperties().owner();
    }

    /**
     * Get the additionalContentUrl property: Url for getting additional content about the resource metadata.
     * 
     * @return the additionalContentUrl value.
     */
    public String additionalContentUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().additionalContentUrl();
    }

    /**
     * Get the metadata property: Additional metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyMetadataInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyMetadataInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyMetadataInner.
     */
    public static PolicyMetadataInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyMetadataInner deserializedPolicyMetadataInner = new PolicyMetadataInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedPolicyMetadataInner.innerProperties = PolicyMetadataProperties.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedPolicyMetadataInner.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPolicyMetadataInner.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPolicyMetadataInner.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyMetadataInner;
        });
    }
}
