// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Policy evaluation details.
 */
@Fluent
public final class CheckRestrictionEvaluationDetails implements JsonSerializable<CheckRestrictionEvaluationDetails> {
    /*
     * Details of the evaluated expressions.
     */
    private List<ExpressionEvaluationDetails> evaluatedExpressions;

    /*
     * Evaluation details of IfNotExists effect.
     */
    private IfNotExistsEvaluationDetails ifNotExistsDetails;

    /*
     * The reason for the evaluation result.
     */
    private String reason;

    /**
     * Creates an instance of CheckRestrictionEvaluationDetails class.
     */
    public CheckRestrictionEvaluationDetails() {
    }

    /**
     * Get the evaluatedExpressions property: Details of the evaluated expressions.
     * 
     * @return the evaluatedExpressions value.
     */
    public List<ExpressionEvaluationDetails> evaluatedExpressions() {
        return this.evaluatedExpressions;
    }

    /**
     * Set the evaluatedExpressions property: Details of the evaluated expressions.
     * 
     * @param evaluatedExpressions the evaluatedExpressions value to set.
     * @return the CheckRestrictionEvaluationDetails object itself.
     */
    public CheckRestrictionEvaluationDetails
        withEvaluatedExpressions(List<ExpressionEvaluationDetails> evaluatedExpressions) {
        this.evaluatedExpressions = evaluatedExpressions;
        return this;
    }

    /**
     * Get the ifNotExistsDetails property: Evaluation details of IfNotExists effect.
     * 
     * @return the ifNotExistsDetails value.
     */
    public IfNotExistsEvaluationDetails ifNotExistsDetails() {
        return this.ifNotExistsDetails;
    }

    /**
     * Set the ifNotExistsDetails property: Evaluation details of IfNotExists effect.
     * 
     * @param ifNotExistsDetails the ifNotExistsDetails value to set.
     * @return the CheckRestrictionEvaluationDetails object itself.
     */
    public CheckRestrictionEvaluationDetails withIfNotExistsDetails(IfNotExistsEvaluationDetails ifNotExistsDetails) {
        this.ifNotExistsDetails = ifNotExistsDetails;
        return this;
    }

    /**
     * Get the reason property: The reason for the evaluation result.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (evaluatedExpressions() != null) {
            evaluatedExpressions().forEach(e -> e.validate());
        }
        if (ifNotExistsDetails() != null) {
            ifNotExistsDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("evaluatedExpressions", this.evaluatedExpressions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("ifNotExistsDetails", this.ifNotExistsDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckRestrictionEvaluationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckRestrictionEvaluationDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckRestrictionEvaluationDetails.
     */
    public static CheckRestrictionEvaluationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckRestrictionEvaluationDetails deserializedCheckRestrictionEvaluationDetails
                = new CheckRestrictionEvaluationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluatedExpressions".equals(fieldName)) {
                    List<ExpressionEvaluationDetails> evaluatedExpressions
                        = reader.readArray(reader1 -> ExpressionEvaluationDetails.fromJson(reader1));
                    deserializedCheckRestrictionEvaluationDetails.evaluatedExpressions = evaluatedExpressions;
                } else if ("ifNotExistsDetails".equals(fieldName)) {
                    deserializedCheckRestrictionEvaluationDetails.ifNotExistsDetails
                        = IfNotExistsEvaluationDetails.fromJson(reader);
                } else if ("reason".equals(fieldName)) {
                    deserializedCheckRestrictionEvaluationDetails.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckRestrictionEvaluationDetails;
        });
    }
}
