// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Component Policy State record.
 */
@Fluent
public final class ComponentPolicyState implements JsonSerializable<ComponentPolicyState> {
    /*
     * OData entity ID; always set to null since component policy state records do not have an entity ID.
     */
    private String odataId;

    /*
     * OData context string; used by OData clients to resolve type information based on metadata.
     */
    private String odataContext;

    /*
     * Timestamp for the component policy state record.
     */
    private OffsetDateTime timestamp;

    /*
     * Component Id.
     */
    private String componentId;

    /*
     * Component type.
     */
    private String componentType;

    /*
     * Component name.
     */
    private String componentName;

    /*
     * Resource ID.
     */
    private String resourceId;

    /*
     * Policy assignment ID.
     */
    private String policyAssignmentId;

    /*
     * Policy definition ID.
     */
    private String policyDefinitionId;

    /*
     * Subscription ID.
     */
    private String subscriptionId;

    /*
     * Resource type.
     */
    private String resourceType;

    /*
     * Resource location.
     */
    private String resourceLocation;

    /*
     * Resource group name.
     */
    private String resourceGroup;

    /*
     * Policy assignment name.
     */
    private String policyAssignmentName;

    /*
     * Policy assignment owner.
     */
    private String policyAssignmentOwner;

    /*
     * Policy assignment parameters.
     */
    private String policyAssignmentParameters;

    /*
     * Policy assignment scope.
     */
    private String policyAssignmentScope;

    /*
     * Policy definition name.
     */
    private String policyDefinitionName;

    /*
     * Policy definition action, i.e. effect.
     */
    private String policyDefinitionAction;

    /*
     * Policy definition category.
     */
    private String policyDefinitionCategory;

    /*
     * Policy set definition ID, if the policy assignment is for a policy set.
     */
    private String policySetDefinitionId;

    /*
     * Policy set definition name, if the policy assignment is for a policy set.
     */
    private String policySetDefinitionName;

    /*
     * Policy set definition owner, if the policy assignment is for a policy set.
     */
    private String policySetDefinitionOwner;

    /*
     * Policy set definition category, if the policy assignment is for a policy set.
     */
    private String policySetDefinitionCategory;

    /*
     * Policy set definition parameters, if the policy assignment is for a policy set.
     */
    private String policySetDefinitionParameters;

    /*
     * Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
     */
    private String policyDefinitionReferenceId;

    /*
     * Compliance state of the resource.
     */
    private String complianceState;

    /*
     * Policy evaluation details. This is only included in the response if the request contains
     * $expand=PolicyEvaluationDetails.
     */
    private ComponentPolicyEvaluationDetails policyEvaluationDetails;

    /*
     * Policy definition group names.
     */
    private List<String> policyDefinitionGroupNames;

    /*
     * Evaluated policy definition version.
     */
    private String policyDefinitionVersion;

    /*
     * Evaluated policy set definition version.
     */
    private String policySetDefinitionVersion;

    /*
     * Evaluated policy assignment version.
     */
    private String policyAssignmentVersion;

    /*
     * Component Policy State record.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of ComponentPolicyState class.
     */
    public ComponentPolicyState() {
    }

    /**
     * Get the odataId property: OData entity ID; always set to null since component policy state records do not have an
     * entity ID.
     * 
     * @return the odataId value.
     */
    public String odataId() {
        return this.odataId;
    }

    /**
     * Get the odataContext property: OData context string; used by OData clients to resolve type information based on
     * metadata.
     * 
     * @return the odataContext value.
     */
    public String odataContext() {
        return this.odataContext;
    }

    /**
     * Get the timestamp property: Timestamp for the component policy state record.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the componentId property: Component Id.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the componentType property: Component type.
     * 
     * @return the componentType value.
     */
    public String componentType() {
        return this.componentType;
    }

    /**
     * Get the componentName property: Component name.
     * 
     * @return the componentName value.
     */
    public String componentName() {
        return this.componentName;
    }

    /**
     * Get the resourceId property: Resource ID.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the policyAssignmentId property: Policy assignment ID.
     * 
     * @return the policyAssignmentId value.
     */
    public String policyAssignmentId() {
        return this.policyAssignmentId;
    }

    /**
     * Get the policyDefinitionId property: Policy definition ID.
     * 
     * @return the policyDefinitionId value.
     */
    public String policyDefinitionId() {
        return this.policyDefinitionId;
    }

    /**
     * Get the subscriptionId property: Subscription ID.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the resourceType property: Resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the resourceLocation property: Resource location.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Get the resourceGroup property: Resource group name.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the policyAssignmentName property: Policy assignment name.
     * 
     * @return the policyAssignmentName value.
     */
    public String policyAssignmentName() {
        return this.policyAssignmentName;
    }

    /**
     * Get the policyAssignmentOwner property: Policy assignment owner.
     * 
     * @return the policyAssignmentOwner value.
     */
    public String policyAssignmentOwner() {
        return this.policyAssignmentOwner;
    }

    /**
     * Get the policyAssignmentParameters property: Policy assignment parameters.
     * 
     * @return the policyAssignmentParameters value.
     */
    public String policyAssignmentParameters() {
        return this.policyAssignmentParameters;
    }

    /**
     * Get the policyAssignmentScope property: Policy assignment scope.
     * 
     * @return the policyAssignmentScope value.
     */
    public String policyAssignmentScope() {
        return this.policyAssignmentScope;
    }

    /**
     * Get the policyDefinitionName property: Policy definition name.
     * 
     * @return the policyDefinitionName value.
     */
    public String policyDefinitionName() {
        return this.policyDefinitionName;
    }

    /**
     * Get the policyDefinitionAction property: Policy definition action, i.e. effect.
     * 
     * @return the policyDefinitionAction value.
     */
    public String policyDefinitionAction() {
        return this.policyDefinitionAction;
    }

    /**
     * Get the policyDefinitionCategory property: Policy definition category.
     * 
     * @return the policyDefinitionCategory value.
     */
    public String policyDefinitionCategory() {
        return this.policyDefinitionCategory;
    }

    /**
     * Get the policySetDefinitionId property: Policy set definition ID, if the policy assignment is for a policy set.
     * 
     * @return the policySetDefinitionId value.
     */
    public String policySetDefinitionId() {
        return this.policySetDefinitionId;
    }

    /**
     * Get the policySetDefinitionName property: Policy set definition name, if the policy assignment is for a policy
     * set.
     * 
     * @return the policySetDefinitionName value.
     */
    public String policySetDefinitionName() {
        return this.policySetDefinitionName;
    }

    /**
     * Get the policySetDefinitionOwner property: Policy set definition owner, if the policy assignment is for a policy
     * set.
     * 
     * @return the policySetDefinitionOwner value.
     */
    public String policySetDefinitionOwner() {
        return this.policySetDefinitionOwner;
    }

    /**
     * Get the policySetDefinitionCategory property: Policy set definition category, if the policy assignment is for a
     * policy set.
     * 
     * @return the policySetDefinitionCategory value.
     */
    public String policySetDefinitionCategory() {
        return this.policySetDefinitionCategory;
    }

    /**
     * Get the policySetDefinitionParameters property: Policy set definition parameters, if the policy assignment is for
     * a policy set.
     * 
     * @return the policySetDefinitionParameters value.
     */
    public String policySetDefinitionParameters() {
        return this.policySetDefinitionParameters;
    }

    /**
     * Get the policyDefinitionReferenceId property: Reference ID for the policy definition inside the policy set, if
     * the policy assignment is for a policy set.
     * 
     * @return the policyDefinitionReferenceId value.
     */
    public String policyDefinitionReferenceId() {
        return this.policyDefinitionReferenceId;
    }

    /**
     * Get the complianceState property: Compliance state of the resource.
     * 
     * @return the complianceState value.
     */
    public String complianceState() {
        return this.complianceState;
    }

    /**
     * Get the policyEvaluationDetails property: Policy evaluation details. This is only included in the response if the
     * request contains $expand=PolicyEvaluationDetails.
     * 
     * @return the policyEvaluationDetails value.
     */
    public ComponentPolicyEvaluationDetails policyEvaluationDetails() {
        return this.policyEvaluationDetails;
    }

    /**
     * Set the policyEvaluationDetails property: Policy evaluation details. This is only included in the response if the
     * request contains $expand=PolicyEvaluationDetails.
     * 
     * @param policyEvaluationDetails the policyEvaluationDetails value to set.
     * @return the ComponentPolicyState object itself.
     */
    public ComponentPolicyState withPolicyEvaluationDetails(ComponentPolicyEvaluationDetails policyEvaluationDetails) {
        this.policyEvaluationDetails = policyEvaluationDetails;
        return this;
    }

    /**
     * Get the policyDefinitionGroupNames property: Policy definition group names.
     * 
     * @return the policyDefinitionGroupNames value.
     */
    public List<String> policyDefinitionGroupNames() {
        return this.policyDefinitionGroupNames;
    }

    /**
     * Get the policyDefinitionVersion property: Evaluated policy definition version.
     * 
     * @return the policyDefinitionVersion value.
     */
    public String policyDefinitionVersion() {
        return this.policyDefinitionVersion;
    }

    /**
     * Get the policySetDefinitionVersion property: Evaluated policy set definition version.
     * 
     * @return the policySetDefinitionVersion value.
     */
    public String policySetDefinitionVersion() {
        return this.policySetDefinitionVersion;
    }

    /**
     * Get the policyAssignmentVersion property: Evaluated policy assignment version.
     * 
     * @return the policyAssignmentVersion value.
     */
    public String policyAssignmentVersion() {
        return this.policyAssignmentVersion;
    }

    /**
     * Get the additionalProperties property: Component Policy State record.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Component Policy State record.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ComponentPolicyState object itself.
     */
    public ComponentPolicyState withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyEvaluationDetails() != null) {
            policyEvaluationDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("policyEvaluationDetails", this.policyEvaluationDetails);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentPolicyState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentPolicyState if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentPolicyState.
     */
    public static ComponentPolicyState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentPolicyState deserializedComponentPolicyState = new ComponentPolicyState();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@odata.id".equals(fieldName)) {
                    deserializedComponentPolicyState.odataId = reader.getString();
                } else if ("@odata.context".equals(fieldName)) {
                    deserializedComponentPolicyState.odataContext = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedComponentPolicyState.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("componentId".equals(fieldName)) {
                    deserializedComponentPolicyState.componentId = reader.getString();
                } else if ("componentType".equals(fieldName)) {
                    deserializedComponentPolicyState.componentType = reader.getString();
                } else if ("componentName".equals(fieldName)) {
                    deserializedComponentPolicyState.componentName = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedComponentPolicyState.resourceId = reader.getString();
                } else if ("policyAssignmentId".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentId = reader.getString();
                } else if ("policyDefinitionId".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionId = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedComponentPolicyState.subscriptionId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedComponentPolicyState.resourceType = reader.getString();
                } else if ("resourceLocation".equals(fieldName)) {
                    deserializedComponentPolicyState.resourceLocation = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedComponentPolicyState.resourceGroup = reader.getString();
                } else if ("policyAssignmentName".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentName = reader.getString();
                } else if ("policyAssignmentOwner".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentOwner = reader.getString();
                } else if ("policyAssignmentParameters".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentParameters = reader.getString();
                } else if ("policyAssignmentScope".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentScope = reader.getString();
                } else if ("policyDefinitionName".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionName = reader.getString();
                } else if ("policyDefinitionAction".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionAction = reader.getString();
                } else if ("policyDefinitionCategory".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionCategory = reader.getString();
                } else if ("policySetDefinitionId".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionId = reader.getString();
                } else if ("policySetDefinitionName".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionName = reader.getString();
                } else if ("policySetDefinitionOwner".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionOwner = reader.getString();
                } else if ("policySetDefinitionCategory".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionCategory = reader.getString();
                } else if ("policySetDefinitionParameters".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionParameters = reader.getString();
                } else if ("policyDefinitionReferenceId".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionReferenceId = reader.getString();
                } else if ("complianceState".equals(fieldName)) {
                    deserializedComponentPolicyState.complianceState = reader.getString();
                } else if ("policyEvaluationDetails".equals(fieldName)) {
                    deserializedComponentPolicyState.policyEvaluationDetails
                        = ComponentPolicyEvaluationDetails.fromJson(reader);
                } else if ("policyDefinitionGroupNames".equals(fieldName)) {
                    List<String> policyDefinitionGroupNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedComponentPolicyState.policyDefinitionGroupNames = policyDefinitionGroupNames;
                } else if ("policyDefinitionVersion".equals(fieldName)) {
                    deserializedComponentPolicyState.policyDefinitionVersion = reader.getString();
                } else if ("policySetDefinitionVersion".equals(fieldName)) {
                    deserializedComponentPolicyState.policySetDefinitionVersion = reader.getString();
                } else if ("policyAssignmentVersion".equals(fieldName)) {
                    deserializedComponentPolicyState.policyAssignmentVersion = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedComponentPolicyState.additionalProperties = additionalProperties;

            return deserializedComponentPolicyState;
        });
    }
}
