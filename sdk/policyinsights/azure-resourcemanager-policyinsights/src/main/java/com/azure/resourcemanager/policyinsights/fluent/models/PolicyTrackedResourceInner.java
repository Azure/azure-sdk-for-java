// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.policyinsights.models.PolicyDetails;
import com.azure.resourcemanager.policyinsights.models.TrackedResourceModificationDetails;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Policy tracked resource record.
 */
@Immutable
public final class PolicyTrackedResourceInner implements JsonSerializable<PolicyTrackedResourceInner> {
    /*
     * The ID of the policy tracked resource.
     */
    private String trackedResourceId;

    /*
     * The details of the policy that require the tracked resource.
     */
    private PolicyDetails policyDetails;

    /*
     * The details of the policy triggered deployment that created the tracked resource.
     */
    private TrackedResourceModificationDetails createdBy;

    /*
     * The details of the policy triggered deployment that modified the tracked resource.
     */
    private TrackedResourceModificationDetails lastModifiedBy;

    /*
     * Timestamp of the last update to the tracked resource.
     */
    private OffsetDateTime lastUpdateUtc;

    /**
     * Creates an instance of PolicyTrackedResourceInner class.
     */
    public PolicyTrackedResourceInner() {
    }

    /**
     * Get the trackedResourceId property: The ID of the policy tracked resource.
     * 
     * @return the trackedResourceId value.
     */
    public String trackedResourceId() {
        return this.trackedResourceId;
    }

    /**
     * Get the policyDetails property: The details of the policy that require the tracked resource.
     * 
     * @return the policyDetails value.
     */
    public PolicyDetails policyDetails() {
        return this.policyDetails;
    }

    /**
     * Get the createdBy property: The details of the policy triggered deployment that created the tracked resource.
     * 
     * @return the createdBy value.
     */
    public TrackedResourceModificationDetails createdBy() {
        return this.createdBy;
    }

    /**
     * Get the lastModifiedBy property: The details of the policy triggered deployment that modified the tracked
     * resource.
     * 
     * @return the lastModifiedBy value.
     */
    public TrackedResourceModificationDetails lastModifiedBy() {
        return this.lastModifiedBy;
    }

    /**
     * Get the lastUpdateUtc property: Timestamp of the last update to the tracked resource.
     * 
     * @return the lastUpdateUtc value.
     */
    public OffsetDateTime lastUpdateUtc() {
        return this.lastUpdateUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyDetails() != null) {
            policyDetails().validate();
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (lastModifiedBy() != null) {
            lastModifiedBy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyTrackedResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyTrackedResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyTrackedResourceInner.
     */
    public static PolicyTrackedResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyTrackedResourceInner deserializedPolicyTrackedResourceInner = new PolicyTrackedResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trackedResourceId".equals(fieldName)) {
                    deserializedPolicyTrackedResourceInner.trackedResourceId = reader.getString();
                } else if ("policyDetails".equals(fieldName)) {
                    deserializedPolicyTrackedResourceInner.policyDetails = PolicyDetails.fromJson(reader);
                } else if ("createdBy".equals(fieldName)) {
                    deserializedPolicyTrackedResourceInner.createdBy
                        = TrackedResourceModificationDetails.fromJson(reader);
                } else if ("lastModifiedBy".equals(fieldName)) {
                    deserializedPolicyTrackedResourceInner.lastModifiedBy
                        = TrackedResourceModificationDetails.fromJson(reader);
                } else if ("lastUpdateUtc".equals(fieldName)) {
                    deserializedPolicyTrackedResourceInner.lastUpdateUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyTrackedResourceInner;
        });
    }
}
