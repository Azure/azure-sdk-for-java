// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Details of a single deployment created by the remediation.
 */
@Immutable
public final class RemediationDeploymentInner implements JsonSerializable<RemediationDeploymentInner> {
    /*
     * Resource ID of the resource that is being remediated by the deployment.
     */
    private String remediatedResourceId;

    /*
     * Resource ID of the template deployment that will remediate the resource.
     */
    private String deploymentId;

    /*
     * Status of the remediation deployment.
     */
    private String status;

    /*
     * Location of the resource that is being remediated.
     */
    private String resourceLocation;

    /*
     * Error encountered while remediated the resource.
     */
    private ManagementError error;

    /*
     * The time at which the remediation was created.
     */
    private OffsetDateTime createdOn;

    /*
     * The time at which the remediation deployment was last updated.
     */
    private OffsetDateTime lastUpdatedOn;

    /**
     * Creates an instance of RemediationDeploymentInner class.
     */
    public RemediationDeploymentInner() {
    }

    /**
     * Get the remediatedResourceId property: Resource ID of the resource that is being remediated by the deployment.
     * 
     * @return the remediatedResourceId value.
     */
    public String remediatedResourceId() {
        return this.remediatedResourceId;
    }

    /**
     * Get the deploymentId property: Resource ID of the template deployment that will remediate the resource.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Get the status property: Status of the remediation deployment.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the resourceLocation property: Location of the resource that is being remediated.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Get the error property: Error encountered while remediated the resource.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the createdOn property: The time at which the remediation was created.
     * 
     * @return the createdOn value.
     */
    public OffsetDateTime createdOn() {
        return this.createdOn;
    }

    /**
     * Get the lastUpdatedOn property: The time at which the remediation deployment was last updated.
     * 
     * @return the lastUpdatedOn value.
     */
    public OffsetDateTime lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemediationDeploymentInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemediationDeploymentInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemediationDeploymentInner.
     */
    public static RemediationDeploymentInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemediationDeploymentInner deserializedRemediationDeploymentInner = new RemediationDeploymentInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("remediatedResourceId".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.remediatedResourceId = reader.getString();
                } else if ("deploymentId".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.deploymentId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.status = reader.getString();
                } else if ("resourceLocation".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.resourceLocation = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.error = ManagementError.fromJson(reader);
                } else if ("createdOn".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.createdOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedOn".equals(fieldName)) {
                    deserializedRemediationDeploymentInner.lastUpdatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemediationDeploymentInner;
        });
    }
}
