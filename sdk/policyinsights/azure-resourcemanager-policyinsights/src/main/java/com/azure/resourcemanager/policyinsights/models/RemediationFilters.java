// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The filters that will be applied to determine which resources to remediate.
 */
@Fluent
public final class RemediationFilters implements JsonSerializable<RemediationFilters> {
    /*
     * The resource locations that will be remediated.
     */
    private List<String> locations;

    /**
     * Creates an instance of RemediationFilters class.
     */
    public RemediationFilters() {
    }

    /**
     * Get the locations property: The resource locations that will be remediated.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The resource locations that will be remediated.
     * 
     * @param locations the locations value to set.
     * @return the RemediationFilters object itself.
     */
    public RemediationFilters withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemediationFilters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemediationFilters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemediationFilters.
     */
    public static RemediationFilters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemediationFilters deserializedRemediationFilters = new RemediationFilters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedRemediationFilters.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemediationFilters;
        });
    }
}
