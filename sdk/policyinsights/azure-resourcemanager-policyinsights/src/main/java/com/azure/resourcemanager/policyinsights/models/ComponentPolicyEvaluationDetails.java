// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Policy evaluation details.
 */
@Fluent
public final class ComponentPolicyEvaluationDetails implements JsonSerializable<ComponentPolicyEvaluationDetails> {
    /*
     * Details of the evaluated expressions.
     */
    private List<ComponentExpressionEvaluationDetails> evaluatedExpressions;

    /*
     * Additional textual reason for the evaluation outcome.
     */
    private String reason;

    /**
     * Creates an instance of ComponentPolicyEvaluationDetails class.
     */
    public ComponentPolicyEvaluationDetails() {
    }

    /**
     * Get the evaluatedExpressions property: Details of the evaluated expressions.
     * 
     * @return the evaluatedExpressions value.
     */
    public List<ComponentExpressionEvaluationDetails> evaluatedExpressions() {
        return this.evaluatedExpressions;
    }

    /**
     * Get the reason property: Additional textual reason for the evaluation outcome.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Additional textual reason for the evaluation outcome.
     * 
     * @param reason the reason value to set.
     * @return the ComponentPolicyEvaluationDetails object itself.
     */
    public ComponentPolicyEvaluationDetails withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (evaluatedExpressions() != null) {
            evaluatedExpressions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reason", this.reason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentPolicyEvaluationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentPolicyEvaluationDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentPolicyEvaluationDetails.
     */
    public static ComponentPolicyEvaluationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentPolicyEvaluationDetails deserializedComponentPolicyEvaluationDetails
                = new ComponentPolicyEvaluationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluatedExpressions".equals(fieldName)) {
                    List<ComponentExpressionEvaluationDetails> evaluatedExpressions
                        = reader.readArray(reader1 -> ComponentExpressionEvaluationDetails.fromJson(reader1));
                    deserializedComponentPolicyEvaluationDetails.evaluatedExpressions = evaluatedExpressions;
                } else if ("reason".equals(fieldName)) {
                    deserializedComponentPolicyEvaluationDetails.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComponentPolicyEvaluationDetails;
        });
    }
}
