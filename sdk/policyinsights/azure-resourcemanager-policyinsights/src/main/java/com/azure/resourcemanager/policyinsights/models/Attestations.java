// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.policyinsights.fluent.models.AttestationInner;

/** Resource collection API of Attestations. */
public interface Attestations {
    /**
     * Gets all attestations for the subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for the subscription.
     */
    PagedIterable<Attestation> list();

    /**
     * Gets all attestations for the subscription.
     *
     * @param top Maximum number of records to return.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for the subscription.
     */
    PagedIterable<Attestation> list(Integer top, String filter, Context context);

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an attestation resource.
     */
    Attestation createOrUpdateAtSubscription(String attestationName, AttestationInner parameters);

    /**
     * Creates or updates an attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an attestation resource.
     */
    Attestation createOrUpdateAtSubscription(String attestationName, AttestationInner parameters, Context context);

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at subscription scope.
     */
    Attestation getAtSubscription(String attestationName);

    /**
     * Gets an existing attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at subscription scope.
     */
    Response<Attestation> getAtSubscriptionWithResponse(String attestationName, Context context);

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteAtSubscription(String attestationName);

    /**
     * Deletes an existing attestation at subscription scope.
     *
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteAtSubscriptionWithResponse(String attestationName, Context context);

    /**
     * Gets all attestations for the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for the resource group.
     */
    PagedIterable<Attestation> listByResourceGroup(String resourceGroupName);

    /**
     * Gets all attestations for the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param top Maximum number of records to return.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for the resource group.
     */
    PagedIterable<Attestation> listByResourceGroup(
        String resourceGroupName, Integer top, String filter, Context context);

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource group scope.
     */
    Attestation getByResourceGroup(String resourceGroupName, String attestationName);

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource group scope.
     */
    Response<Attestation> getByResourceGroupWithResponse(
        String resourceGroupName, String attestationName, Context context);

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String attestationName);

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String attestationName, Context context);

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for a resource.
     */
    PagedIterable<Attestation> listForResource(String resourceId);

    /**
     * Gets all attestations for a resource.
     *
     * @param resourceId Resource ID.
     * @param top Maximum number of records to return.
     * @param filter OData filter expression.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all attestations for a resource.
     */
    PagedIterable<Attestation> listForResource(String resourceId, Integer top, String filter, Context context);

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an attestation resource.
     */
    Attestation createOrUpdateAtResource(String resourceId, String attestationName, AttestationInner parameters);

    /**
     * Creates or updates an attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param parameters The attestation parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an attestation resource.
     */
    Attestation createOrUpdateAtResource(
        String resourceId, String attestationName, AttestationInner parameters, Context context);

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource scope.
     */
    Attestation getAtResource(String resourceId, String attestationName);

    /**
     * Gets an existing attestation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource scope.
     */
    Response<Attestation> getAtResourceWithResponse(String resourceId, String attestationName, Context context);

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteAtResource(String resourceId, String attestationName);

    /**
     * Deletes an existing attestation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param attestationName The name of the attestation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteAtResourceWithResponse(String resourceId, String attestationName, Context context);

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource group scope.
     */
    Attestation getById(String id);

    /**
     * Gets an existing attestation at resource group scope.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing attestation at resource group scope.
     */
    Response<Attestation> getByIdWithResponse(String id, Context context);

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes an existing attestation at resource group scope.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Attestation resource.
     *
     * @param name resource name.
     * @return the first stage of the new Attestation definition.
     */
    Attestation.DefinitionStages.Blank define(String name);
}
