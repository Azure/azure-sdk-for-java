// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Component event details.
 */
@Fluent
public final class ComponentEventDetails implements JsonSerializable<ComponentEventDetails> {
    /*
     * Component Id.
     */
    private String id;

    /*
     * Component type.
     */
    private String type;

    /*
     * Component name.
     */
    private String name;

    /*
     * Timestamp for component policy event record.
     */
    private OffsetDateTime timestamp;

    /*
     * Tenant ID for the policy event record.
     */
    private String tenantId;

    /*
     * Principal object ID for the user who initiated the resource component operation that triggered the policy event.
     */
    private String principalOid;

    /*
     * Policy definition action, i.e. effect.
     */
    private String policyDefinitionAction;

    /*
     * Component event details.
     */
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of ComponentEventDetails class.
     */
    public ComponentEventDetails() {
    }

    /**
     * Get the id property: Component Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Component Id.
     * 
     * @param id the id value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the type property: Component type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Component type.
     * 
     * @param type the type value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Component name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Component name.
     * 
     * @param name the name value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the timestamp property: Timestamp for component policy event record.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Timestamp for component policy event record.
     * 
     * @param timestamp the timestamp value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the tenantId property: Tenant ID for the policy event record.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant ID for the policy event record.
     * 
     * @param tenantId the tenantId value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the principalOid property: Principal object ID for the user who initiated the resource component operation
     * that triggered the policy event.
     * 
     * @return the principalOid value.
     */
    public String principalOid() {
        return this.principalOid;
    }

    /**
     * Set the principalOid property: Principal object ID for the user who initiated the resource component operation
     * that triggered the policy event.
     * 
     * @param principalOid the principalOid value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withPrincipalOid(String principalOid) {
        this.principalOid = principalOid;
        return this;
    }

    /**
     * Get the policyDefinitionAction property: Policy definition action, i.e. effect.
     * 
     * @return the policyDefinitionAction value.
     */
    public String policyDefinitionAction() {
        return this.policyDefinitionAction;
    }

    /**
     * Set the policyDefinitionAction property: Policy definition action, i.e. effect.
     * 
     * @param policyDefinitionAction the policyDefinitionAction value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withPolicyDefinitionAction(String policyDefinitionAction) {
        this.policyDefinitionAction = policyDefinitionAction;
        return this;
    }

    /**
     * Get the additionalProperties property: Component event details.
     * 
     * @return the additionalProperties value.
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Component event details.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ComponentEventDetails object itself.
     */
    public ComponentEventDetails withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("principalOid", this.principalOid);
        jsonWriter.writeStringField("policyDefinitionAction", this.policyDefinitionAction);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentEventDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentEventDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComponentEventDetails.
     */
    public static ComponentEventDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComponentEventDetails deserializedComponentEventDetails = new ComponentEventDetails();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedComponentEventDetails.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedComponentEventDetails.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedComponentEventDetails.name = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedComponentEventDetails.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("tenantId".equals(fieldName)) {
                    deserializedComponentEventDetails.tenantId = reader.getString();
                } else if ("principalOid".equals(fieldName)) {
                    deserializedComponentEventDetails.principalOid = reader.getString();
                } else if ("policyDefinitionAction".equals(fieldName)) {
                    deserializedComponentEventDetails.policyDefinitionAction = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedComponentEventDetails.additionalProperties = additionalProperties;

            return deserializedComponentEventDetails;
        });
    }
}
