// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.policyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Evaluation details of IfNotExists effect. */
@Fluent
public final class IfNotExistsEvaluationDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IfNotExistsEvaluationDetails.class);

    /*
     * ID of the last evaluated resource for IfNotExists effect.
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * Total number of resources to which the existence condition is
     * applicable.
     */
    @JsonProperty(value = "totalResources")
    private Integer totalResources;

    /**
     * Get the resourceId property: ID of the last evaluated resource for IfNotExists effect.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ID of the last evaluated resource for IfNotExists effect.
     *
     * @param resourceId the resourceId value to set.
     * @return the IfNotExistsEvaluationDetails object itself.
     */
    public IfNotExistsEvaluationDetails withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the totalResources property: Total number of resources to which the existence condition is applicable.
     *
     * @return the totalResources value.
     */
    public Integer totalResources() {
        return this.totalResources;
    }

    /**
     * Set the totalResources property: Total number of resources to which the existence condition is applicable.
     *
     * @param totalResources the totalResources value to set.
     * @return the IfNotExistsEvaluationDetails object itself.
     */
    public IfNotExistsEvaluationDetails withTotalResources(Integer totalResources) {
        this.totalResources = totalResources;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
