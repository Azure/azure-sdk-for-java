/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.policyinsights.v2018_07_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.policyinsights.v2018_07_01_preview.ErrorResponseException;
import com.microsoft.azure.management.policyinsights.v2018_07_01_preview.QueryOptions;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Remediations.
 */
public class RemediationsInner {
    /** The Retrofit service to perform REST calls. */
    private RemediationsService service;
    /** The service client containing this operation class. */
    private PolicyInsightsClientImpl client;

    /**
     * Initializes an instance of RemediationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RemediationsInner(Retrofit retrofit, PolicyInsightsClientImpl client) {
        this.service = retrofit.create(RemediationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Remediations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RemediationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments")
        Observable<Response<ResponseBody>> listDeploymentsAtManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations cancelAtManagementGroup" })
        @POST("providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel")
        Observable<Response<ResponseBody>> cancelAtManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listForManagementGroup" })
        @GET("providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations")
        Observable<Response<ResponseBody>> listForManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations createOrUpdateAtManagementGroup" })
        @PUT("providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Body RemediationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations getAtManagementGroup" })
        @GET("providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> getAtManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations deleteAtManagementGroup" })
        @HTTP(path = "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtManagementGroup(@Path("managementGroupsNamespace") String managementGroupsNamespace, @Path("managementGroupId") String managementGroupId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments")
        Observable<Response<ResponseBody>> listDeploymentsAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations cancelAtSubscription" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel")
        Observable<Response<ResponseBody>> cancelAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations createOrUpdateAtSubscription" })
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Body RemediationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations getAtSubscription" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> getAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations deleteAtSubscription" })
        @HTTP(path = "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtSubscription(@Path("subscriptionId") String subscriptionId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments")
        Observable<Response<ResponseBody>> listDeploymentsAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations cancelAtResourceGroup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel")
        Observable<Response<ResponseBody>> cancelAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations createOrUpdateAtResourceGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Body RemediationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations deleteAtResourceGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments")
        Observable<Response<ResponseBody>> listDeploymentsAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations cancelAtResource" })
        @POST("{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel")
        Observable<Response<ResponseBody>> cancelAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listForResource" })
        @GET("{resourceId}/providers/Microsoft.PolicyInsights/remediations")
        Observable<Response<ResponseBody>> listForResource(@Path(value = "resourceId", encoded = true) String resourceId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Query("$top") Integer top, @Query("$filter") String filter, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations createOrUpdateAtResource" })
        @PUT("{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> createOrUpdateAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Body RemediationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations getAtResource" })
        @GET("{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}")
        Observable<Response<ResponseBody>> getAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations deleteAtResource" })
        @HTTP(path = "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAtResource(@Path(value = "resourceId", encoded = true) String resourceId, @Path("remediationName") String remediationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtManagementGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listDeploymentsAtManagementGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listForManagementGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listForManagementGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtSubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listDeploymentsAtSubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listDeploymentsAtResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listDeploymentsAtResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listDeploymentsAtResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.policyinsights.v2018_07_01_preview.Remediations listForResourceNext" })
        @GET
        Observable<Response<ResponseBody>> listForResourceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtManagementGroup(final String managementGroupId, final String remediationName) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtManagementGroupAsync(final String managementGroupId, final String remediationName, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtManagementGroupAsync(final String managementGroupId, final String remediationName) {
        return listDeploymentsAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupWithServiceResponseAsync(final String managementGroupId, final String remediationName) {
        return listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupSinglePageAsync(final String managementGroupId, final String remediationName) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        return service.listDeploymentsAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtManagementGroup(final String managementGroupId, final String remediationName, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName, queryOptions).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtManagementGroupAsync(final String managementGroupId, final String remediationName, final QueryOptions queryOptions, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtManagementGroupAsync(final String managementGroupId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupWithServiceResponseAsync(final String managementGroupId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtManagementGroupSinglePageAsync(managementGroupId, remediationName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param managementGroupId Management group ID.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param remediationName The name of the remediation.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupSinglePageAsync(final String managementGroupId, final String remediationName, final QueryOptions queryOptions) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        return service.listDeploymentsAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancels a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner cancelAtManagementGroup(String managementGroupId, String remediationName) {
        return cancelAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).toBlocking().single().body();
    }

    /**
     * Cancels a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> cancelAtManagementGroupAsync(String managementGroupId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName), serviceCallback);
    }

    /**
     * Cancels a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> cancelAtManagementGroupAsync(String managementGroupId, String remediationName) {
        return cancelAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> cancelAtManagementGroupWithServiceResponseAsync(String managementGroupId, String remediationName) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        return service.cancelAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = cancelAtManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> cancelAtManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForManagementGroup(final String managementGroupId) {
        ServiceResponse<Page<RemediationInner>> response = listForManagementGroupSinglePageAsync(managementGroupId).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForManagementGroupAsync(final String managementGroupId, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForManagementGroupSinglePageAsync(managementGroupId),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForManagementGroupAsync(final String managementGroupId) {
        return listForManagementGroupWithServiceResponseAsync(managementGroupId)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupWithServiceResponseAsync(final String managementGroupId) {
        return listForManagementGroupSinglePageAsync(managementGroupId)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupSinglePageAsync(final String managementGroupId) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listForManagementGroup(managementGroupsNamespace, managementGroupId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForManagementGroup(final String managementGroupId, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationInner>> response = listForManagementGroupSinglePageAsync(managementGroupId, queryOptions).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForManagementGroupAsync(final String managementGroupId, final QueryOptions queryOptions, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForManagementGroupSinglePageAsync(managementGroupId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForManagementGroupAsync(final String managementGroupId, final QueryOptions queryOptions) {
        return listForManagementGroupWithServiceResponseAsync(managementGroupId, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param managementGroupId Management group ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupWithServiceResponseAsync(final String managementGroupId, final QueryOptions queryOptions) {
        return listForManagementGroupSinglePageAsync(managementGroupId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param managementGroupId Management group ID.
    ServiceResponse<PageImpl<RemediationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupSinglePageAsync(final String managementGroupId, final QueryOptions queryOptions) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listForManagementGroup(managementGroupsNamespace, managementGroupId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForManagementGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listForManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner createOrUpdateAtManagementGroup(String managementGroupId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> createOrUpdateAtManagementGroupAsync(String managementGroupId, String remediationName, RemediationInner parameters, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> createOrUpdateAtManagementGroupAsync(String managementGroupId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName, parameters).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> createOrUpdateAtManagementGroupWithServiceResponseAsync(String managementGroupId, String remediationName, RemediationInner parameters) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        return service.createOrUpdateAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = createOrUpdateAtManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> createOrUpdateAtManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(201, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner getAtManagementGroup(String managementGroupId, String remediationName) {
        return getAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).toBlocking().single().body();
    }

    /**
     * Gets an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> getAtManagementGroupAsync(String managementGroupId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName), serviceCallback);
    }

    /**
     * Gets an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> getAtManagementGroupAsync(String managementGroupId, String remediationName) {
        return getAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> getAtManagementGroupWithServiceResponseAsync(String managementGroupId, String remediationName) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        return service.getAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = getAtManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> getAtManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner deleteAtManagementGroup(String managementGroupId, String remediationName) {
        return deleteAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> deleteAtManagementGroupAsync(String managementGroupId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName), serviceCallback);
    }

    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> deleteAtManagementGroupAsync(String managementGroupId, String remediationName) {
        return deleteAtManagementGroupWithServiceResponseAsync(managementGroupId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing remediation at management group scope.
     *
     * @param managementGroupId Management group ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> deleteAtManagementGroupWithServiceResponseAsync(String managementGroupId, String remediationName) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String managementGroupsNamespace = "Microsoft.Management";
        final String apiVersion = "2018-07-01-preview";
        return service.deleteAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = deleteAtManagementGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> deleteAtManagementGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtSubscription(final String subscriptionId, final String remediationName) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtSubscriptionAsync(final String subscriptionId, final String remediationName, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtSubscriptionAsync(final String subscriptionId, final String remediationName) {
        return listDeploymentsAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionWithServiceResponseAsync(final String subscriptionId, final String remediationName) {
        return listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionSinglePageAsync(final String subscriptionId, final String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        return service.listDeploymentsAtSubscription(subscriptionId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtSubscription(final String subscriptionId, final String remediationName, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName, queryOptions).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtSubscriptionAsync(final String subscriptionId, final String remediationName, final QueryOptions queryOptions, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtSubscriptionAsync(final String subscriptionId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionWithServiceResponseAsync(final String subscriptionId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtSubscriptionSinglePageAsync(subscriptionId, remediationName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param remediationName The name of the remediation.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionSinglePageAsync(final String subscriptionId, final String remediationName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        return service.listDeploymentsAtSubscription(subscriptionId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancels a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner cancelAtSubscription(String subscriptionId, String remediationName) {
        return cancelAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).toBlocking().single().body();
    }

    /**
     * Cancels a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> cancelAtSubscriptionAsync(String subscriptionId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName), serviceCallback);
    }

    /**
     * Cancels a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> cancelAtSubscriptionAsync(String subscriptionId, String remediationName) {
        return cancelAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> cancelAtSubscriptionWithServiceResponseAsync(String subscriptionId, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.cancelAtSubscription(subscriptionId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = cancelAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> cancelAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> list(final String subscriptionId) {
        ServiceResponse<Page<RemediationInner>> response = listSinglePageAsync(subscriptionId).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listAsync(final String subscriptionId, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listAsync(final String subscriptionId) {
        return listWithServiceResponseAsync(subscriptionId)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listWithServiceResponseAsync(final String subscriptionId) {
        return listSinglePageAsync(subscriptionId)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listSinglePageAsync(final String subscriptionId) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.list(subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> list(final String subscriptionId, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationInner>> response = listSinglePageAsync(subscriptionId, queryOptions).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listAsync(final String subscriptionId, final QueryOptions queryOptions, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(subscriptionId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listWithServiceResponseAsync(subscriptionId, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listWithServiceResponseAsync(final String subscriptionId, final QueryOptions queryOptions) {
        return listSinglePageAsync(subscriptionId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<RemediationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listSinglePageAsync(final String subscriptionId, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.list(subscriptionId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner createOrUpdateAtSubscription(String subscriptionId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> createOrUpdateAtSubscriptionAsync(String subscriptionId, String remediationName, RemediationInner parameters, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> createOrUpdateAtSubscriptionAsync(String subscriptionId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName, parameters).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> createOrUpdateAtSubscriptionWithServiceResponseAsync(String subscriptionId, String remediationName, RemediationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-07-01-preview";
        return service.createOrUpdateAtSubscription(subscriptionId, remediationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = createOrUpdateAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> createOrUpdateAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(201, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner getAtSubscription(String subscriptionId, String remediationName) {
        return getAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).toBlocking().single().body();
    }

    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> getAtSubscriptionAsync(String subscriptionId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName), serviceCallback);
    }

    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> getAtSubscriptionAsync(String subscriptionId, String remediationName) {
        return getAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> getAtSubscriptionWithServiceResponseAsync(String subscriptionId, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.getAtSubscription(subscriptionId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = getAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> getAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner deleteAtSubscription(String subscriptionId, String remediationName) {
        return deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> deleteAtSubscriptionAsync(String subscriptionId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName), serviceCallback);
    }

    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> deleteAtSubscriptionAsync(String subscriptionId, String remediationName) {
        return deleteAtSubscriptionWithServiceResponseAsync(subscriptionId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing remediation at subscription scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> deleteAtSubscriptionWithServiceResponseAsync(String subscriptionId, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.deleteAtSubscription(subscriptionId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = deleteAtSubscriptionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> deleteAtSubscriptionDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResourceGroup(final String subscriptionId, final String resourceGroupName, final String remediationName) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final String remediationName, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final String remediationName) {
        return listDeploymentsAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String remediationName) {
        return listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        return service.listDeploymentsAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResourceGroup(final String subscriptionId, final String resourceGroupName, final String remediationName, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName, queryOptions).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final String remediationName, final QueryOptions queryOptions, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, remediationName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param remediationName The name of the remediation.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName, final String remediationName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        return service.listDeploymentsAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancels a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner cancelAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName) {
        return cancelAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).toBlocking().single().body();
    }

    /**
     * Cancels a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> cancelAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName), serviceCallback);
    }

    /**
     * Cancels a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> cancelAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        return cancelAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> cancelAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.cancelAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = cancelAtResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> cancelAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listByResourceGroup(final String subscriptionId, final String resourceGroupName) {
        ServiceResponse<Page<RemediationInner>> response = listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listByResourceGroup(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listByResourceGroup(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationInner>> response = listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listByResourceGroupAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupWithServiceResponseAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        return listByResourceGroupSinglePageAsync(subscriptionId, resourceGroupName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param subscriptionId Microsoft Azure subscription ID.
    ServiceResponse<PageImpl<RemediationInner>> * @param resourceGroupName Resource group name.
    ServiceResponse<PageImpl<RemediationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupSinglePageAsync(final String subscriptionId, final String resourceGroupName, final QueryOptions queryOptions) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listByResourceGroup(subscriptionId, resourceGroupName, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner createOrUpdateAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> createOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, RemediationInner parameters, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> createOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName, parameters).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> createOrUpdateAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String remediationName, RemediationInner parameters) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-07-01-preview";
        return service.createOrUpdateAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = createOrUpdateAtResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> createOrUpdateAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(201, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner getByResourceGroup(String subscriptionId, String resourceGroupName, String remediationName) {
        return getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).toBlocking().single().body();
    }

    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName), serviceCallback);
    }

    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> getByResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        return getByResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> getByResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.getByResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner deleteAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName) {
        return deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName), serviceCallback);
    }

    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> deleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        return deleteAtResourceGroupWithServiceResponseAsync(subscriptionId, resourceGroupName, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing remediation at resource group scope.
     *
     * @param subscriptionId Microsoft Azure subscription ID.
     * @param resourceGroupName Resource group name.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> deleteAtResourceGroupWithServiceResponseAsync(String subscriptionId, String resourceGroupName, String remediationName) {
        if (subscriptionId == null) {
            throw new IllegalArgumentException("Parameter subscriptionId is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.deleteAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = deleteAtResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> deleteAtResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResource(final String resourceId, final String remediationName) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceAsync(final String resourceId, final String remediationName, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceAsync(final String resourceId, final String remediationName) {
        return listDeploymentsAtResourceWithServiceResponseAsync(resourceId, remediationName)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceWithServiceResponseAsync(final String resourceId, final String remediationName) {
        return listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceSinglePageAsync(final String resourceId, final String remediationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        return service.listDeploymentsAtResource(resourceId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResource(final String resourceId, final String remediationName, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName, queryOptions).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceAsync(final String resourceId, final String remediationName, final QueryOptions queryOptions, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceAsync(final String resourceId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtResourceWithServiceResponseAsync(resourceId, remediationName, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceWithServiceResponseAsync(final String resourceId, final String remediationName, final QueryOptions queryOptions) {
        return listDeploymentsAtResourceSinglePageAsync(resourceId, remediationName, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param remediationName The name of the remediation.
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceSinglePageAsync(final String resourceId, final String remediationName, final QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        return service.listDeploymentsAtResource(resourceId, remediationName, apiVersion, this.client.acceptLanguage(), top, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancel a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner cancelAtResource(String resourceId, String remediationName) {
        return cancelAtResourceWithServiceResponseAsync(resourceId, remediationName).toBlocking().single().body();
    }

    /**
     * Cancel a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> cancelAtResourceAsync(String resourceId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelAtResourceWithServiceResponseAsync(resourceId, remediationName), serviceCallback);
    }

    /**
     * Cancel a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> cancelAtResourceAsync(String resourceId, String remediationName) {
        return cancelAtResourceWithServiceResponseAsync(resourceId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancel a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> cancelAtResourceWithServiceResponseAsync(String resourceId, String remediationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.cancelAtResource(resourceId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = cancelAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> cancelAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForResource(final String resourceId) {
        ServiceResponse<Page<RemediationInner>> response = listForResourceSinglePageAsync(resourceId).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForResourceAsync(final String resourceId, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceSinglePageAsync(resourceId),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForResourceAsync(final String resourceId) {
        return listForResourceWithServiceResponseAsync(resourceId)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceWithServiceResponseAsync(final String resourceId) {
        return listForResourceSinglePageAsync(resourceId)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceSinglePageAsync(final String resourceId) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        final QueryOptions queryOptions = null;
        Integer top = null;
        String filter = null;
        return service.listForResource(resourceId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForResource(final String resourceId, final QueryOptions queryOptions) {
        ServiceResponse<Page<RemediationInner>> response = listForResourceSinglePageAsync(resourceId, queryOptions).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForResourceAsync(final String resourceId, final QueryOptions queryOptions, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceSinglePageAsync(resourceId, queryOptions),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForResourceAsync(final String resourceId, final QueryOptions queryOptions) {
        return listForResourceWithServiceResponseAsync(resourceId, queryOptions)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param resourceId Resource ID.
     * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceWithServiceResponseAsync(final String resourceId, final QueryOptions queryOptions) {
        return listForResourceSinglePageAsync(resourceId, queryOptions)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param resourceId Resource ID.
    ServiceResponse<PageImpl<RemediationInner>> * @param queryOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceSinglePageAsync(final String resourceId, final QueryOptions queryOptions) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        Validator.validate(queryOptions);
        final String apiVersion = "2018-07-01-preview";
        Integer top = null;
        if (queryOptions != null) {
            top = queryOptions.top();
        }
        String filter = null;
        if (queryOptions != null) {
            filter = queryOptions.filter();
        }
        return service.listForResource(resourceId, apiVersion, this.client.acceptLanguage(), top, filter, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForResourceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listForResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner createOrUpdateAtResource(String resourceId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtResourceWithServiceResponseAsync(resourceId, remediationName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> createOrUpdateAtResourceAsync(String resourceId, String remediationName, RemediationInner parameters, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateAtResourceWithServiceResponseAsync(resourceId, remediationName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> createOrUpdateAtResourceAsync(String resourceId, String remediationName, RemediationInner parameters) {
        return createOrUpdateAtResourceWithServiceResponseAsync(resourceId, remediationName, parameters).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param parameters The remediation parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> createOrUpdateAtResourceWithServiceResponseAsync(String resourceId, String remediationName, RemediationInner parameters) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-07-01-preview";
        return service.createOrUpdateAtResource(resourceId, remediationName, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = createOrUpdateAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> createOrUpdateAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(201, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an existing remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner getAtResource(String resourceId, String remediationName) {
        return getAtResourceWithServiceResponseAsync(resourceId, remediationName).toBlocking().single().body();
    }

    /**
     * Gets an existing remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> getAtResourceAsync(String resourceId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getAtResourceWithServiceResponseAsync(resourceId, remediationName), serviceCallback);
    }

    /**
     * Gets an existing remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> getAtResourceAsync(String resourceId, String remediationName) {
        return getAtResourceWithServiceResponseAsync(resourceId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing remediation at resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> getAtResourceWithServiceResponseAsync(String resourceId, String remediationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.getAtResource(resourceId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = getAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> getAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RemediationInner object if successful.
     */
    public RemediationInner deleteAtResource(String resourceId, String remediationName) {
        return deleteAtResourceWithServiceResponseAsync(resourceId, remediationName).toBlocking().single().body();
    }

    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RemediationInner> deleteAtResourceAsync(String resourceId, String remediationName, final ServiceCallback<RemediationInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAtResourceWithServiceResponseAsync(resourceId, remediationName), serviceCallback);
    }

    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<RemediationInner> deleteAtResourceAsync(String resourceId, String remediationName) {
        return deleteAtResourceWithServiceResponseAsync(resourceId, remediationName).map(new Func1<ServiceResponse<RemediationInner>, RemediationInner>() {
            @Override
            public RemediationInner call(ServiceResponse<RemediationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing remediation at individual resource scope.
     *
     * @param resourceId Resource ID.
     * @param remediationName The name of the remediation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RemediationInner object
     */
    public Observable<ServiceResponse<RemediationInner>> deleteAtResourceWithServiceResponseAsync(String resourceId, String remediationName) {
        if (resourceId == null) {
            throw new IllegalArgumentException("Parameter resourceId is required and cannot be null.");
        }
        if (remediationName == null) {
            throw new IllegalArgumentException("Parameter remediationName is required and cannot be null.");
        }
        final String apiVersion = "2018-07-01-preview";
        return service.deleteAtResource(resourceId, remediationName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RemediationInner>>>() {
                @Override
                public Observable<ServiceResponse<RemediationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RemediationInner> clientResponse = deleteAtResourceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RemediationInner> deleteAtResourceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RemediationInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RemediationInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtManagementGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtManagementGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationDeploymentInner>> serviceFuture, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtManagementGroupNextAsync(final String nextPageLink) {
        return listDeploymentsAtManagementGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listDeploymentsAtManagementGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at management group scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtManagementGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDeploymentsAtManagementGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtManagementGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtManagementGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForManagementGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationInner>> response = listForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForManagementGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForManagementGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationInner>> serviceFuture, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForManagementGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForManagementGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForManagementGroupNextAsync(final String nextPageLink) {
        return listForManagementGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listForManagementGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForManagementGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the management group.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForManagementGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForManagementGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForManagementGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listForManagementGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationDeploymentInner>> serviceFuture, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtSubscriptionNextAsync(final String nextPageLink) {
        return listDeploymentsAtSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listDeploymentsAtSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at subscription scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDeploymentsAtSubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtSubscriptionNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationInner>> serviceFuture, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationDeploymentInner>> serviceFuture, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceGroupNextAsync(final String nextPageLink) {
        return listDeploymentsAtResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listDeploymentsAtResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource group scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDeploymentsAtResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationInner>> serviceFuture, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for the subscription.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object if successful.
     */
    public PagedList<RemediationDeploymentInner> listDeploymentsAtResourceNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationDeploymentInner>> response = listDeploymentsAtResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationDeploymentInner>(response.body()) {
            @Override
            public Page<RemediationDeploymentInner> nextPage(String nextPageLink) {
                return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationDeploymentInner>> listDeploymentsAtResourceNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationDeploymentInner>> serviceFuture, final ListOperationCallback<RemediationDeploymentInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDeploymentsAtResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(String nextPageLink) {
                    return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<Page<RemediationDeploymentInner>> listDeploymentsAtResourceNextAsync(final String nextPageLink) {
        return listDeploymentsAtResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Page<RemediationDeploymentInner>>() {
                @Override
                public Page<RemediationDeploymentInner> call(ServiceResponse<Page<RemediationDeploymentInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationDeploymentInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listDeploymentsAtResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationDeploymentInner>>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(ServiceResponse<Page<RemediationDeploymentInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDeploymentsAtResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all deployments for a remediation at resource scope.
     *
    ServiceResponse<PageImpl<RemediationDeploymentInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationDeploymentInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> listDeploymentsAtResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDeploymentsAtResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationDeploymentInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationDeploymentInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationDeploymentInner>> result = listDeploymentsAtResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationDeploymentInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationDeploymentInner>> listDeploymentsAtResourceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationDeploymentInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationDeploymentInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;RemediationInner&gt; object if successful.
     */
    public PagedList<RemediationInner> listForResourceNext(final String nextPageLink) {
        ServiceResponse<Page<RemediationInner>> response = listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RemediationInner>(response.body()) {
            @Override
            public Page<RemediationInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RemediationInner>> listForResourceNextAsync(final String nextPageLink, final ServiceFuture<List<RemediationInner>> serviceFuture, final ListOperationCallback<RemediationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(String nextPageLink) {
                    return listForResourceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<Page<RemediationInner>> listForResourceNextAsync(final String nextPageLink) {
        return listForResourceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RemediationInner>>, Page<RemediationInner>>() {
                @Override
                public Page<RemediationInner> call(ServiceResponse<Page<RemediationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;RemediationInner&gt; object
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceNextWithServiceResponseAsync(final String nextPageLink) {
        return listForResourceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RemediationInner>>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(ServiceResponse<Page<RemediationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all remediations for a resource.
     *
    ServiceResponse<PageImpl<RemediationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;RemediationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RemediationInner>>> listForResourceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RemediationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RemediationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RemediationInner>> result = listForResourceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RemediationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RemediationInner>> listForResourceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<RemediationInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<RemediationInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
