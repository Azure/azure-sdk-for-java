// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.test.http.AssertingHttpClientBuilder;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.iot.deviceupdate.DeviceManagementClient;
import com.azure.iot.deviceupdate.DeviceManagementClientBuilder;
import com.azure.iot.deviceupdate.DeviceUpdateClient;
import com.azure.iot.deviceupdate.DeviceUpdateClientBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class DeviceUpdateClientTestBase extends TestProxyTestBase {
    protected DeviceUpdateClient deviceUpdateClient;

    protected DeviceManagementClient deviceManagementClient;

    @Override
    protected void beforeTest() {
        DeviceUpdateClientBuilder deviceUpdateClientbuilder =
                new DeviceUpdateClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "contosoint.api.int.adu.microsoft.com"))
                        .instanceId(Configuration.getGlobalConfiguration().get("INSTANCEID", "blue"))
                        .httpClient(buildSyncAssertingClient(HttpClient.createDefault()))
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            deviceUpdateClientbuilder
                    .httpClient(buildSyncAssertingClient(interceptorManager.getPlaybackClient()))
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            deviceUpdateClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            deviceUpdateClientbuilder.credential(request -> Mono.just(new AccessToken("eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJ4NXQiOiJ2c0liZmF6Y1JQOEdhYlRXT2F2TjNBbGgwZFUiLCJ6aXAiOiJERUYifQ.hgsfAgVS-VVd9P5d3bg5XenZx95biyU2pInJY8Ai_vqKxaPiQWrpQ6pHDJoWGpf_J5QnHbExiDgFqorr7SUg8I8baQJZ7K-WM3bWXKcVoqiIzT7IOxZ4r-BZn6sgAlG8iUiM_sBizwbc9_T0oMp5tri8nzRcdoqrUfWEBfM1_OZARXkui0SPXYjXvx8Fbu-bGvOPSFK9WYtBHl9UP4xovg_-4sFcfUKqBuvKWwLJeUULxQI2EHzIp2poRZuoTi7tRoLaUlVRU-UzpLQX2RcDCs_A3Uvw5hsStWfeWezbK-zW3edshb-CURg9_v3JT1baOS1LuqEMAYb5Pa6WvGANhg.2WZRbv4E8OgKkIzMyTvYQQ.vcPgaPCPg46HG-jgOc6UZMozgM2KCRwEKSPSTgRxHdGxft6JtGaK3FbdmoznqihBNf49wChKZBY-y9kMeHfn_4kOUN0Fh6aeucdZap3MiCibyzx2Fc5h30BZOpT_2rvIlm5GMlTDs8g__XacwlHZy8uirasyI6iryl0hhqC4oOtx3QcTUCRSmwoW05cHwSaRvbE_nohhUedDv17YaKNaV2oIb-x7VJ2pMLj3zm3NmHMOyZ0F_bVhoSiQaKfwfz9ddqS27CgtRoJc9q2Z92J-1Swuda4J94gvytayr1QwGlrphmNuS-BkHbo7VWFyMu8xxgCJkpXBKTQwrj8pEW-6d5Ps93FkDNJKr14WKsfT17NCNarjKO7Kb1glcH1mwnvXVkD-CVf4vU-_nvu72LMe20vflNU69DKoUvtYoatccI_FO2zDg5pVS9bhjVQ1OcMUadoKvUx-DjDqyrdLcxas35UoNF7e_oBTk3dR0R3EIhr6qUz2PhxTLUntihomhDaqN5qPTbLdUnf3LFbMzcaXJYz00vOypyHacO96M1f46GiKXzznSjlekbf9jLaESLOw38CsZV9V_KexuhSlfTxGPYNQohH1gu_6SJ0wVGniaCBifn4ZnROJNb3KoVXaiHHHSV_S_EYnUUyC4fY9CTvPKrxkTUHkg60Te8KDOhbPP89EG84lfqkxDD6ReSGQVmilKHYnB7RYEi5ca7xNRmgBl-i2vfC8LLPQVw5Lu95uuKfmVZ93H68E-2XBaWJmvg7fv9ZJ796hxTYf1V2SHEPy6uniwF5QAjc0y-c6cIO20K8cdiMTiZLPciOZUPUkb3fDQUnaCobTmLPosDXRvtVULxZhxWT3Fk6q1fBhK1fp57RShgF8pOcAI-7TLkXaEJRe3hp0LFIo0DJM6EJMdxGJCo2yJ9oQJeIDasrCa-HKq3eHa5GT3V_0jhPTrXv3aDOr_c5UlcQ--jOB4xTBtGNj7YRMMk1QRruk-XGQaXUodpfKdaNidW1LaI8vdw9MfER5iQK8bPwzTLChevocXNrHXQWXhuAEQHRnOCYtShOaxS2eby38e8bn4SX8qPekwi5EN_jSmkzbHd3CoZ07-6T4aA.n22U_m6EIe3-kU-SX_eRiw", OffsetDateTime.MAX)));

        }
        deviceUpdateClient = deviceUpdateClientbuilder.buildClient();

        DeviceManagementClientBuilder deviceManagementClientbuilder =
                new DeviceManagementClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "contosoint.api.int.adu.microsoft.com"))
                        .instanceId(Configuration.getGlobalConfiguration().get("INSTANCEID", "blue"))
                        .httpClient(buildSyncAssertingClient(HttpClient.createDefault()))
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            deviceManagementClientbuilder
                    .httpClient(buildSyncAssertingClient(interceptorManager.getPlaybackClient()))
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            deviceManagementClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            //deviceManagementClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
            deviceManagementClientbuilder.credential(request -> Mono.just(new AccessToken("eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJ4NXQiOiJ2c0liZmF6Y1JQOEdhYlRXT2F2TjNBbGgwZFUiLCJ6aXAiOiJERUYifQ.hgsfAgVS-VVd9P5d3bg5XenZx95biyU2pInJY8Ai_vqKxaPiQWrpQ6pHDJoWGpf_J5QnHbExiDgFqorr7SUg8I8baQJZ7K-WM3bWXKcVoqiIzT7IOxZ4r-BZn6sgAlG8iUiM_sBizwbc9_T0oMp5tri8nzRcdoqrUfWEBfM1_OZARXkui0SPXYjXvx8Fbu-bGvOPSFK9WYtBHl9UP4xovg_-4sFcfUKqBuvKWwLJeUULxQI2EHzIp2poRZuoTi7tRoLaUlVRU-UzpLQX2RcDCs_A3Uvw5hsStWfeWezbK-zW3edshb-CURg9_v3JT1baOS1LuqEMAYb5Pa6WvGANhg.2WZRbv4E8OgKkIzMyTvYQQ.vcPgaPCPg46HG-jgOc6UZMozgM2KCRwEKSPSTgRxHdGxft6JtGaK3FbdmoznqihBNf49wChKZBY-y9kMeHfn_4kOUN0Fh6aeucdZap3MiCibyzx2Fc5h30BZOpT_2rvIlm5GMlTDs8g__XacwlHZy8uirasyI6iryl0hhqC4oOtx3QcTUCRSmwoW05cHwSaRvbE_nohhUedDv17YaKNaV2oIb-x7VJ2pMLj3zm3NmHMOyZ0F_bVhoSiQaKfwfz9ddqS27CgtRoJc9q2Z92J-1Swuda4J94gvytayr1QwGlrphmNuS-BkHbo7VWFyMu8xxgCJkpXBKTQwrj8pEW-6d5Ps93FkDNJKr14WKsfT17NCNarjKO7Kb1glcH1mwnvXVkD-CVf4vU-_nvu72LMe20vflNU69DKoUvtYoatccI_FO2zDg5pVS9bhjVQ1OcMUadoKvUx-DjDqyrdLcxas35UoNF7e_oBTk3dR0R3EIhr6qUz2PhxTLUntihomhDaqN5qPTbLdUnf3LFbMzcaXJYz00vOypyHacO96M1f46GiKXzznSjlekbf9jLaESLOw38CsZV9V_KexuhSlfTxGPYNQohH1gu_6SJ0wVGniaCBifn4ZnROJNb3KoVXaiHHHSV_S_EYnUUyC4fY9CTvPKrxkTUHkg60Te8KDOhbPP89EG84lfqkxDD6ReSGQVmilKHYnB7RYEi5ca7xNRmgBl-i2vfC8LLPQVw5Lu95uuKfmVZ93H68E-2XBaWJmvg7fv9ZJ796hxTYf1V2SHEPy6uniwF5QAjc0y-c6cIO20K8cdiMTiZLPciOZUPUkb3fDQUnaCobTmLPosDXRvtVULxZhxWT3Fk6q1fBhK1fp57RShgF8pOcAI-7TLkXaEJRe3hp0LFIo0DJM6EJMdxGJCo2yJ9oQJeIDasrCa-HKq3eHa5GT3V_0jhPTrXv3aDOr_c5UlcQ--jOB4xTBtGNj7YRMMk1QRruk-XGQaXUodpfKdaNidW1LaI8vdw9MfER5iQK8bPwzTLChevocXNrHXQWXhuAEQHRnOCYtShOaxS2eby38e8bn4SX8qPekwi5EN_jSmkzbHd3CoZ07-6T4aA.n22U_m6EIe3-kU-SX_eRiw", OffsetDateTime.MAX)));
        }
        deviceManagementClient = deviceManagementClientbuilder.buildClient();
    }

    protected HttpClient buildSyncAssertingClient(HttpClient httpClient) {
        return new AssertingHttpClientBuilder(httpClient)
            .skipRequest((ignored1, ignored2) -> false)
            .assertSync()
            .build();
    }
}
