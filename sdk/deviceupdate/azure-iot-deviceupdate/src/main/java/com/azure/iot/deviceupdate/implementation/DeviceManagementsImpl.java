// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DeviceManagements. */
public final class DeviceManagementsImpl {
    /** The proxy service used to perform REST calls. */
    private final DeviceManagementsService service;

    /** The service client containing this operation class. */
    private final DeviceUpdateClientImpl client;

    /**
     * Initializes an instance of DeviceManagementsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DeviceManagementsImpl(DeviceUpdateClientImpl client) {
        this.service =
                RestProxy.create(
                        DeviceManagementsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DeviceUpdateClientDeviceManagements to be used by the proxy service
     * to perform REST calls.
     */
    @Host("https://{endpoint}")
    @ServiceInterface(name = "DeviceUpdateClientDe")
    public interface DeviceManagementsService {
        @Get("/deviceUpdate/{instanceId}/management/deviceClasses")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClasses(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClass(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Patch("/deviceUpdate/{instanceId}/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> updateDeviceClass(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/merge-patch+json") BinaryData deviceClassPatch,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/deviceUpdate/{instanceId}/management/deviceClasses/{deviceClassId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeviceClass(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceClasses/{deviceClassId}/installableUpdates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listInstallableUpdatesForDeviceClass(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/devices")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevices(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/deviceUpdate/{instanceId}/management/devices:import")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> importDevices(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData importType,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/devices/{deviceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDevice(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceId") String deviceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/devices/{deviceId}/modules/{moduleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceModule(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deviceId") String deviceId,
                @PathParam("moduleId") String moduleId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/updateCompliance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getUpdateCompliance(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listGroups(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/deviceUpdate/{instanceId}/management/groups/{groupId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/updateCompliance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getGroupUpdateCompliance(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/bestUpdates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBestUpdatesForGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/deviceUpdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdateDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData deployment,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/deviceUpdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deployments/{deploymentId}/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentStatus(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClassSubgroupsForGroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroupDetails(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete("/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeviceClassSubgroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/updateCompliance")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateCompliance(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/bestUpdates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBestUpdatesForDeviceClassSubgroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForDeviceClassSubgroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroup(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Delete(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeviceClassSubgroupDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> stopDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}:retry")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> retryDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatus(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/deviceUpdate/{instanceId}/management/groups/{groupId}/deviceClassSubgroups/{deviceClassId}/deployments/{deploymentId}/devicestates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevicesForDeviceClassSubgroupDeployment(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("groupId") String groupId,
                @PathParam("deviceClassId") String deviceClassId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/operations/{operationId}")
        @ExpectedResponses({200, 304})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listOperations(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Put("/deviceUpdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> collectLogs(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") BinaryData logCollectionRequest,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLogCollectionOperation(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceDiagnostics/logCollections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLogCollectionOperations(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceDiagnostics/logCollections/{operationId}/detailedStatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLogCollectionOperationDetailedStatus(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("operationId") String operationId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/deviceUpdate/{instanceId}/management/deviceDiagnostics/deviceHealth")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceHealth(
                @HostParam("endpoint") String endpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("filter") String filter,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeviceClassesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listInstallableUpdatesForDeviceClassNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevicesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listGroupsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listBestUpdatesForGroupNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForGroupNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDeploymentsForDeviceClassSubgroupNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDevicesForDeviceClassSubgroupDeploymentNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listOperationsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listLogCollectionOperationsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeviceClassesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeviceClasses(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeviceClassesSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeviceClasses(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClassesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDeviceClassesSinglePageAsync(requestOptions),
                nextLink -> listDeviceClassesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeviceClassesAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDeviceClassesSinglePageAsync(requestOptions, context),
                nextLink -> listDeviceClassesNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeviceClasses(RequestOptions requestOptions) {
        return new PagedIterable<>(listDeviceClassesAsync(requestOptions));
    }

    /**
     * Gets the properties of a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassWithResponseAsync(
            String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeviceClass(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the properties of a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassWithResponseAsync(
            String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeviceClass(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the properties of a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return getDeviceClassWithResponseAsync(deviceClassId, requestOptions).block();
    }

    /**
     * Update device class details.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     friendlyName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param deviceClassPatch The device class json merge patch body. Currently only supports patching friendlyName.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateDeviceClassWithResponseAsync(
            String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.updateDeviceClass(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                deviceClassPatch,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Update device class details.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     friendlyName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param deviceClassPatch The device class json merge patch body. Currently only supports patching friendlyName.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> updateDeviceClassWithResponseAsync(
            String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.updateDeviceClass(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                deviceClassPatch,
                accept,
                requestOptions,
                context);
    }

    /**
     * Update device class details.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     friendlyName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param deviceClassPatch The device class json merge patch body. Currently only supports patching friendlyName.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateDeviceClassWithResponse(
            String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions) {
        return updateDeviceClassWithResponseAsync(deviceClassId, deviceClassPatch, requestOptions).block();
    }

    /**
     * Deletes a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassWithResponseAsync(
            String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteDeviceClass(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassWithResponseAsync(
            String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteDeviceClass(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Deletes a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return deleteDeviceClassWithResponseAsync(deviceClassId, requestOptions).block();
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassSinglePageAsync(
            String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listInstallableUpdatesForDeviceClass(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        deviceClassId,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassSinglePageAsync(
            String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listInstallableUpdatesForDeviceClass(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        deviceClassId,
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listInstallableUpdatesForDeviceClassAsync(
            String deviceClassId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listInstallableUpdatesForDeviceClassSinglePageAsync(deviceClassId, requestOptions),
                nextLink ->
                        listInstallableUpdatesForDeviceClassNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listInstallableUpdatesForDeviceClassAsync(
            String deviceClassId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listInstallableUpdatesForDeviceClassSinglePageAsync(deviceClassId, requestOptions, context),
                nextLink ->
                        listInstallableUpdatesForDeviceClassNextSinglePageAsync(
                                nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listInstallableUpdatesForDeviceClass(
            String deviceClassId, RequestOptions requestOptions) {
        return new PagedIterable<>(listInstallableUpdatesForDeviceClassAsync(deviceClassId, requestOptions));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDevices(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesSinglePageAsync(RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDevices(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevicesAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDevicesSinglePageAsync(requestOptions),
                nextLink -> listDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevicesAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDevicesSinglePageAsync(requestOptions, context),
                nextLink -> listDevicesNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevices(RequestOptions requestOptions) {
        return new PagedIterable<>(listDevicesAsync(requestOptions));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> importDevicesWithResponseAsync(BinaryData importType, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.importDevices(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                this.client.getServiceVersion().getVersion(),
                                importType,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> importDevicesWithResponseAsync(
            BinaryData importType, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.importDevices(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                this.client.getServiceVersion().getVersion(),
                importType,
                accept,
                requestOptions,
                context);
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginImportDevicesAsync(
            BinaryData importType, RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.importDevicesWithResponseAsync(importType, requestOptions),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginImportDevicesAsync(
            BinaryData importType, RequestOptions requestOptions, Context context) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () -> this.importDevicesWithResponseAsync(importType, requestOptions, context),
                new DefaultPollingStrategy<>(
                        this.client.getHttpPipeline(),
                        null,
                        requestOptions != null && requestOptions.getContext() != null
                                ? requestOptions.getContext()
                                : Context.NONE),
                new TypeReferenceBinaryData(),
                new TypeReferenceBinaryData());
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginImportDevices(BinaryData importType, RequestOptions requestOptions) {
        return this.beginImportDevicesAsync(importType, requestOptions).getSyncPoller();
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceWithResponseAsync(String deviceId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDevice(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                deviceId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceWithResponseAsync(
            String deviceId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDevice(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                deviceId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceWithResponse(String deviceId, RequestOptions requestOptions) {
        return getDeviceWithResponseAsync(deviceId, requestOptions).block();
    }

    /**
     * Gets the device module properties and latest deployment status for a device module connected to Device Update for
     * IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device module connected to Device Update
     *     for IoT Hub along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceModuleWithResponseAsync(
            String deviceId, String moduleId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeviceModule(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                deviceId,
                                moduleId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the device module properties and latest deployment status for a device module connected to Device Update for
     * IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device module connected to Device Update
     *     for IoT Hub along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceModuleWithResponseAsync(
            String deviceId, String moduleId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeviceModule(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                deviceId,
                moduleId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the device module properties and latest deployment status for a device module connected to Device Update for
     * IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device module connected to Device Update
     *     for IoT Hub along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceModuleWithResponse(
            String deviceId, String moduleId, RequestOptions requestOptions) {
        return getDeviceModuleWithResponseAsync(deviceId, moduleId, requestOptions).block();
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getUpdateCompliance(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUpdateComplianceWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getUpdateCompliance(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpdateComplianceWithResponse(RequestOptions requestOptions) {
        return getUpdateComplianceWithResponseAsync(requestOptions).block();
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listGroupsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listGroups(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listGroupsSinglePageAsync(RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listGroups(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listGroupsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listGroupsSinglePageAsync(requestOptions),
                nextLink -> listGroupsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listGroupsAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listGroupsSinglePageAsync(requestOptions, context),
                nextLink -> listGroupsNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listGroups(RequestOptions requestOptions) {
        return new PagedIterable<>(listGroupsAsync(requestOptions));
    }

    /**
     * Gets the device group properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     groupType: String(IoTHubTag/DefaultNoTag)
     *     createdDateTime: String
     *     deviceCount: Integer
     *     subgroupsWithNewUpdatesAvailableCount: Integer
     *     subgroupsWithUpdatesInProgressCount: Integer
     *     subgroupsWithOnLatestUpdateCount: Integer
     *     deployments: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupWithResponseAsync(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getGroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the device group properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     groupType: String(IoTHubTag/DefaultNoTag)
     *     createdDateTime: String
     *     deviceCount: Integer
     *     subgroupsWithNewUpdatesAvailableCount: Integer
     *     subgroupsWithUpdatesInProgressCount: Integer
     *     subgroupsWithOnLatestUpdateCount: Integer
     *     deployments: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupWithResponseAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getGroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the device group properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     groupType: String(IoTHubTag/DefaultNoTag)
     *     createdDateTime: String
     *     deviceCount: Integer
     *     subgroupsWithNewUpdatesAvailableCount: Integer
     *     subgroupsWithUpdatesInProgressCount: Integer
     *     subgroupsWithOnLatestUpdateCount: Integer
     *     deployments: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return getGroupWithResponseAsync(groupId, requestOptions).block();
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteGroupWithResponseAsync(String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteGroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteGroupWithResponseAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteGroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return deleteGroupWithResponseAsync(groupId, requestOptions).block();
    }

    /**
     * Get device group update compliance information such as how many devices are on their latest update, how many need
     * new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on their latest update, how many
     *     need new updates, and how many are in progress on receiving a new update along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupUpdateComplianceWithResponseAsync(
            String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getGroupUpdateCompliance(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get device group update compliance information such as how many devices are on their latest update, how many need
     * new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on their latest update, how many
     *     need new updates, and how many are in progress on receiving a new update along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getGroupUpdateComplianceWithResponseAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getGroupUpdateCompliance(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get device group update compliance information such as how many devices are on their latest update, how many need
     * new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on their latest update, how many
     *     need new updates, and how many are in progress on receiving a new update along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupUpdateComplianceWithResponse(String groupId, RequestOptions requestOptions) {
        return getGroupUpdateComplianceWithResponseAsync(groupId, requestOptions).block();
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupSinglePageAsync(
            String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listBestUpdatesForGroup(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        groupId,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update along with
     *     {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupSinglePageAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listBestUpdatesForGroup(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        groupId,
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listBestUpdatesForGroupAsync(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listBestUpdatesForGroupSinglePageAsync(groupId, requestOptions),
                nextLink -> listBestUpdatesForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update as
     *     paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listBestUpdatesForGroupAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listBestUpdatesForGroupSinglePageAsync(groupId, requestOptions, context),
                nextLink -> listBestUpdatesForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update as
     *     paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listBestUpdatesForGroup(String groupId, RequestOptions requestOptions) {
        return new PagedIterable<>(listBestUpdatesForGroupAsync(groupId, requestOptions));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForGroupSinglePageAsync(
            String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeploymentsForGroup(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        groupId,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForGroupSinglePageAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeploymentsForGroup(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        groupId,
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForGroupAsync(String groupId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDeploymentsForGroupSinglePageAsync(groupId, requestOptions),
                nextLink -> listDeploymentsForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForGroupAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDeploymentsForGroupSinglePageAsync(groupId, requestOptions, context),
                nextLink -> listDeploymentsForGroupNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForGroup(String groupId, RequestOptions requestOptions) {
        return new PagedIterable<>(listDeploymentsForGroupAsync(groupId, requestOptions));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return getDeploymentWithResponseAsync(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponseAsync(
            String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                deployment,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponseAsync(
            String groupId,
            String deploymentId,
            BinaryData deployment,
            RequestOptions requestOptions,
            Context context) {
        final String accept = "application/json";
        return service.createOrUpdateDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                deployment,
                accept,
                requestOptions,
                context);
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDeploymentWithResponse(
            String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        return createOrUpdateDeploymentWithResponseAsync(groupId, deploymentId, deployment, requestOptions).block();
    }

    /**
     * Deletes a deployment.
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a deployment.
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Deletes a deployment.
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return deleteDeploymentWithResponseAsync(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     subgroupStatus: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             deploymentState: String(Active/Failed/Inactive/Canceled)
     *             error: (recursive schema, see error above)
     *             totalDevices: Integer
     *             devicesInProgressCount: Integer
     *             devicesCompletedFailedCount: Integer
     *             devicesCompletedSucceededCount: Integer
     *             devicesCanceledCount: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeploymentStatus(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     subgroupStatus: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             deploymentState: String(Active/Failed/Inactive/Canceled)
     *             error: (recursive schema, see error above)
     *             totalDevices: Integer
     *             devicesInProgressCount: Integer
     *             devicesCompletedFailedCount: Integer
     *             devicesCompletedSucceededCount: Integer
     *             devicesCanceledCount: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentStatusWithResponseAsync(
            String groupId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeploymentStatus(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     subgroupStatus: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             deploymentState: String(Active/Failed/Inactive/Canceled)
     *             error: (recursive schema, see error above)
     *             totalDevices: Integer
     *             devicesInProgressCount: Integer
     *             devicesCompletedFailedCount: Integer
     *             devicesCompletedSucceededCount: Integer
     *             devicesCanceledCount: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return getDeploymentStatusWithResponseAsync(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Get the device class subgroups for the group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of device class subgroups returned. You can filter on compat properties by name and value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             groupId: String
     *             createdDateTime: String
     *             deviceCount: Integer
     *             deploymentId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDeviceClassSubgroupsForGroupWithResponseAsync(
            String groupId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listDeviceClassSubgroupsForGroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get the device class subgroups for the group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of device class subgroups returned. You can filter on compat properties by name and value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             groupId: String
     *             createdDateTime: String
     *             deviceCount: Integer
     *             deploymentId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDeviceClassSubgroupsForGroupWithResponseAsync(
            String groupId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeviceClassSubgroupsForGroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get the device class subgroups for the group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of device class subgroups returned. You can filter on compat properties by name and value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             groupId: String
     *             createdDateTime: String
     *             deviceCount: Integer
     *             deploymentId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDeviceClassSubgroupsForGroupWithResponse(
            String groupId, RequestOptions requestOptions) {
        return listDeviceClassSubgroupsForGroupWithResponseAsync(groupId, requestOptions).block();
    }

    /**
     * Gets device class subgroup details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     groupId: String
     *     createdDateTime: String
     *     deviceCount: Integer
     *     deploymentId: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDetailsWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeviceClassSubgroupDetails(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets device class subgroup details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     groupId: String
     *     createdDateTime: String
     *     deviceCount: Integer
     *     deploymentId: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDetailsWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupDetails(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets device class subgroup details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     groupId: String
     *     createdDateTime: String
     *     deviceCount: Integer
     *     deploymentId: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupDetailsWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return getDeviceClassSubgroupDetailsWithResponseAsync(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Deletes a device class subgroup.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteDeviceClassSubgroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a device class subgroup.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteDeviceClassSubgroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Deletes a device class subgroup.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return deleteDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Get device class subgroup update compliance information such as how many devices are on their latest update, how
     * many need new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many devices are on their latest update,
     *     how many need new updates, and how many are in progress on receiving a new update along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateComplianceWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeviceClassSubgroupUpdateCompliance(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get device class subgroup update compliance information such as how many devices are on their latest update, how
     * many need new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many devices are on their latest update,
     *     how many need new updates, and how many are in progress on receiving a new update along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateComplianceWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupUpdateCompliance(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get device class subgroup update compliance information such as how many devices are on their latest update, how
     * many need new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many devices are on their latest update,
     *     how many need new updates, and how many are in progress on receiving a new update along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupUpdateComplianceWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return getDeviceClassSubgroupUpdateComplianceWithResponseAsync(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Get the best available update for a device class subgroup and a count of how many devices need this update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how many devices need this update
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listBestUpdatesForDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listBestUpdatesForDeviceClassSubgroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get the best available update for a device class subgroup and a count of how many devices need this update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how many devices need this update
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listBestUpdatesForDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listBestUpdatesForDeviceClassSubgroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get the best available update for a device class subgroup and a count of how many devices need this update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how many devices need this update
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBestUpdatesForDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return listBestUpdatesForDeviceClassSubgroupWithResponseAsync(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupSinglePageAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeploymentsForDeviceClassSubgroup(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        groupId,
                                        deviceClassId,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupSinglePageAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeploymentsForDeviceClassSubgroup(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        groupId,
                        deviceClassId,
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForDeviceClassSubgroupAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listDeploymentsForDeviceClassSubgroupSinglePageAsync(groupId, deviceClassId, requestOptions),
                nextLink ->
                        listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDeploymentsForDeviceClassSubgroupAsync(
            String groupId, String deviceClassId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () ->
                        listDeploymentsForDeviceClassSubgroupSinglePageAsync(
                                groupId, deviceClassId, requestOptions, context),
                nextLink ->
                        listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(
                                nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForDeviceClassSubgroup(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return new PagedIterable<>(listDeploymentsForDeviceClassSubgroupAsync(groupId, deviceClassId, requestOptions));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeploymentForDeviceClassSubgroup(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroupWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeploymentForDeviceClassSubgroup(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentForDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return getDeploymentForDeviceClassSubgroupWithResponseAsync(
                        groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Deletes a device class subgroup deployment.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteDeviceClassSubgroupDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Deletes a device class subgroup deployment.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeviceClassSubgroupDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.deleteDeviceClassSubgroupDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Deletes a device class subgroup deployment.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassSubgroupDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return deleteDeviceClassSubgroupDeploymentWithResponseAsync(
                        groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Stops a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Stops a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stopDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.stopDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Stops a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stopDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return stopDeploymentWithResponseAsync(groupId, deviceClassId, deploymentId, requestOptions).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.retryDeployment(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> retryDeploymentWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.retryDeployment(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retryDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return retryDeploymentWithResponseAsync(groupId, deviceClassId, deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     deploymentState: String(Active/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     totalDevices: Integer
     *     devicesInProgressCount: Integer
     *     devicesCompletedFailedCount: Integer
     *     devicesCompletedSucceededCount: Integer
     *     devicesCanceledCount: Integer
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatusWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeviceClassSubgroupDeploymentStatus(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                groupId,
                                deviceClassId,
                                deploymentId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     deploymentState: String(Active/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     totalDevices: Integer
     *     devicesInProgressCount: Integer
     *     devicesCompletedFailedCount: Integer
     *     devicesCompletedSucceededCount: Integer
     *     devicesCanceledCount: Integer
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatusWithResponseAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getDeviceClassSubgroupDeploymentStatus(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                groupId,
                deviceClassId,
                deploymentId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     deploymentState: String(Active/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     totalDevices: Integer
     *     devicesInProgressCount: Integer
     *     devicesCompletedFailedCount: Integer
     *     devicesCompletedSucceededCount: Integer
     *     devicesCanceledCount: Integer
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupDeploymentStatusWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return getDeviceClassSubgroupDeploymentStatusWithResponseAsync(
                        groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesForDeviceClassSubgroupDeploymentSinglePageAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDevicesForDeviceClassSubgroupDeployment(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        groupId,
                                        deviceClassId,
                                        deploymentId,
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesForDeviceClassSubgroupDeploymentSinglePageAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDevicesForDeviceClassSubgroupDeployment(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        groupId,
                        deviceClassId,
                        deploymentId,
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevicesForDeviceClassSubgroupDeploymentAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () ->
                        listDevicesForDeviceClassSubgroupDeploymentSinglePageAsync(
                                groupId, deviceClassId, deploymentId, requestOptions),
                nextLink ->
                        listDevicesForDeviceClassSubgroupDeploymentNextSinglePageAsync(
                                nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listDevicesForDeviceClassSubgroupDeploymentAsync(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () ->
                        listDevicesForDeviceClassSubgroupDeploymentSinglePageAsync(
                                groupId, deviceClassId, deploymentId, requestOptions, context),
                nextLink ->
                        listDevicesForDeviceClassSubgroupDeploymentNextSinglePageAsync(
                                nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevicesForDeviceClassSubgroupDeployment(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return new PagedIterable<>(
                listDevicesForDeviceClassSubgroupDeploymentAsync(groupId, deviceClassId, deploymentId, requestOptions));
    }

    /**
     * Retrieve operation status.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     traceId: String
     *     lastActionDateTime: OffsetDateTime
     *     createdDateTime: OffsetDateTime
     *     etag: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponseAsync(String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getOperation(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve operation status.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     traceId: String
     *     lastActionDateTime: OffsetDateTime
     *     createdDateTime: OffsetDateTime
     *     etag: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation metadata along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getOperationWithResponseAsync(
            String operationId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getOperation(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Retrieve operation status.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     traceId: String
     *     lastActionDateTime: OffsetDateTime
     *     createdDateTime: OffsetDateTime
     *     etag: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation metadata along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return getOperationWithResponseAsync(operationId, requestOptions).block();
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listOperationsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listOperations(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listOperationsSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listOperations(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listOperationsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(requestOptions),
                nextLink -> listOperationsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listOperationsAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listOperationsSinglePageAsync(requestOptions, context),
                nextLink -> listOperationsNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listOperations(RequestOptions requestOptions) {
        return new PagedIterable<>(listOperationsAsync(requestOptions));
    }

    /**
     * Start the device diagnostics log collection operation on specified devices.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param logCollectionRequest The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> collectLogsWithResponseAsync(
            String operationId, BinaryData logCollectionRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.collectLogs(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                logCollectionRequest,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Start the device diagnostics log collection operation on specified devices.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param logCollectionRequest The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> collectLogsWithResponseAsync(
            String operationId, BinaryData logCollectionRequest, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.collectLogs(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                logCollectionRequest,
                accept,
                requestOptions,
                context);
    }

    /**
     * Start the device diagnostics log collection operation on specified devices.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param logCollectionRequest The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> collectLogsWithResponse(
            String operationId, BinaryData logCollectionRequest, RequestOptions requestOptions) {
        return collectLogsWithResponseAsync(operationId, logCollectionRequest, requestOptions).block();
    }

    /**
     * Get the device diagnostics log collection operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection operation along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionOperationWithResponseAsync(
            String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getLogCollectionOperation(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get the device diagnostics log collection operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection operation along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionOperationWithResponseAsync(
            String operationId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getLogCollectionOperation(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get the device diagnostics log collection operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionOperationWithResponse(
            String operationId, RequestOptions requestOptions) {
        return getLogCollectionOperationWithResponseAsync(operationId, requestOptions).block();
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLogCollectionOperationsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listLogCollectionOperations(
                                        this.client.getEndpoint(),
                                        this.client.getInstanceId(),
                                        this.client.getServiceVersion().getVersion(),
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLogCollectionOperationsSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listLogCollectionOperations(
                        this.client.getEndpoint(),
                        this.client.getInstanceId(),
                        this.client.getServiceVersion().getVersion(),
                        accept,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLogCollectionOperationsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listLogCollectionOperationsSinglePageAsync(requestOptions),
                nextLink -> listLogCollectionOperationsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLogCollectionOperationsAsync(RequestOptions requestOptions, Context context) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listLogCollectionOperationsSinglePageAsync(requestOptions, context),
                nextLink ->
                        listLogCollectionOperationsNextSinglePageAsync(nextLink, requestOptionsForNextPage, context));
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listLogCollectionOperations(RequestOptions requestOptions) {
        return new PagedIterable<>(listLogCollectionOperationsAsync(requestOptions));
    }

    /**
     * Get device diagnostics log collection operation with detailed status.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     deviceStatus: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             resultCode: String
     *             extendedResultCode: String
     *             logLocation: String
     *         }
     *     ]
     *     description: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device diagnostics log collection operation with detailed status along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionOperationDetailedStatusWithResponseAsync(
            String operationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getLogCollectionOperationDetailedStatus(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                operationId,
                                this.client.getServiceVersion().getVersion(),
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get device diagnostics log collection operation with detailed status.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     deviceStatus: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             resultCode: String
     *             extendedResultCode: String
     *             logLocation: String
     *         }
     *     ]
     *     description: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device diagnostics log collection operation with detailed status along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLogCollectionOperationDetailedStatusWithResponseAsync(
            String operationId, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.getLogCollectionOperationDetailedStatus(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                operationId,
                this.client.getServiceVersion().getVersion(),
                accept,
                requestOptions,
                context);
    }

    /**
     * Get device diagnostics log collection operation with detailed status.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     deviceStatus: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             resultCode: String
     *             extendedResultCode: String
     *             logLocation: String
     *         }
     *     ]
     *     description: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device diagnostics log collection operation with detailed status along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionOperationDetailedStatusWithResponse(
            String operationId, RequestOptions requestOptions) {
        return getLogCollectionOperationDetailedStatusWithResponseAsync(operationId, requestOptions).block();
    }

    /**
     * Get list of device health.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             state: String(healthy/unhealthy)
     *             digitalTwinModelId: String
     *             healthChecks: [
     *                 {
     *                     name: String
     *                     result: String(success/userError)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param filter Filter list by specified properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDeviceHealthWithResponseAsync(String filter, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.listDeviceHealth(
                                this.client.getEndpoint(),
                                this.client.getInstanceId(),
                                this.client.getServiceVersion().getVersion(),
                                filter,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Get list of device health.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             state: String(healthy/unhealthy)
     *             digitalTwinModelId: String
     *             healthChecks: [
     *                 {
     *                     name: String
     *                     result: String(success/userError)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param filter Filter list by specified properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDeviceHealthWithResponseAsync(
            String filter, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeviceHealth(
                this.client.getEndpoint(),
                this.client.getInstanceId(),
                this.client.getServiceVersion().getVersion(),
                filter,
                accept,
                requestOptions,
                context);
    }

    /**
     * Get list of device health.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             state: String(healthy/unhealthy)
     *             digitalTwinModelId: String
     *             healthChecks: [
     *                 {
     *                     name: String
     *                     result: String(success/userError)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param filter Filter list by specified properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDeviceHealthWithResponse(String filter, RequestOptions requestOptions) {
        return listDeviceHealthWithResponseAsync(filter, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of device classes along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeviceClassesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeviceClassesNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of device classes along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeviceClassesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeviceClassesNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of update information along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listInstallableUpdatesForDeviceClassNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of update information along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listInstallableUpdatesForDeviceClassNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listInstallableUpdatesForDeviceClassNext(
                        nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of devices along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDevicesNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of devices along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDevicesNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of groups along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listGroupsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listGroupsNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of groups along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listGroupsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listGroupsNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of updatable devices for a device class subgroup along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listBestUpdatesForGroupNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of updatable devices for a device class subgroup along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listBestUpdatesForGroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listBestUpdatesForGroupNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForGroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeploymentsForGroupNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForGroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeploymentsForGroupNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDeploymentsForDeviceClassSubgroupNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployments along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDeploymentsForDeviceClassSubgroupNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDeploymentsForDeviceClassSubgroupNext(
                        nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployment device states along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesForDeviceClassSubgroupDeploymentNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listDevicesForDeviceClassSubgroupDeploymentNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of deployment device states along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listDevicesForDeviceClassSubgroupDeploymentNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listDevicesForDeviceClassSubgroupDeploymentNext(
                        nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of device operations with server paging support along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listOperationsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listOperationsNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of device operations with server paging support along with {@link PagedResponse} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listOperationsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listOperationsNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of diagnostics operations with server paging support along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLogCollectionOperationsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listLogCollectionOperationsNext(
                                        nextLink, this.client.getEndpoint(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the list of diagnostics operations with server paging support along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listLogCollectionOperationsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        return service.listLogCollectionOperationsNext(
                        nextLink, this.client.getEndpoint(), accept, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private static final class TypeReferenceBinaryData extends TypeReference<BinaryData> {
        // empty
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
