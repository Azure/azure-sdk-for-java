// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.iot.deviceupdate.models.Deployment;
import com.azure.iot.deviceupdate.models.DeploymentDeviceState;
import com.azure.iot.deviceupdate.models.DeploymentStatus;
import com.azure.iot.deviceupdate.models.PageableListOfDeploymentDeviceStates;
import com.azure.iot.deviceupdate.models.PageableListOfDeployments;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Deployments. */
public final class DeploymentsImpl {
    /** The proxy service used to perform REST calls. */
    private final DeploymentsService service;

    /** The service client containing this operation class. */
    private final DeviceUpdateClientImpl client;

    /**
     * Initializes an instance of DeploymentsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DeploymentsImpl(DeviceUpdateClientImpl client) {
        this.service =
                RestProxy.create(DeploymentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DeviceUpdateClientDeployments to be used by the proxy service to
     * perform REST calls.
     */
    @Host("https://{accountEndpoint}")
    @ServiceInterface(name = "DeviceUpdateClientDe")
    private interface DeploymentsService {
        @Get("/deviceupdate/{instanceId}/v2/management/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfDeployments>> getAllDeployments(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("$filter") String filter,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Deployment>> getDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Put("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Deployment>> createOrUpdateDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @BodyParam("application/json") Deployment deployment,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<DeploymentStatus>> getDeploymentStatus(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}/devicestates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfDeploymentDeviceStates>> getDeploymentDevices(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("$filter") String filter,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Deployment>> cancelDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("action") String action,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/deviceupdate/{instanceId}/v2/management/deployments/{deploymentId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Deployment>> retryDeployment(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("deploymentId") String deploymentId,
                @QueryParam("action") String action,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfDeployments>> getAllDeploymentsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfDeploymentDeviceStates>> getDeploymentDevicesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsSinglePageAsync(String filter) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllDeployments(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        filter,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsSinglePageAsync(String filter, Context context) {
        final String accept = "application/json";
        return service.getAllDeployments(
                        this.client.getAccountEndpoint(), this.client.getInstanceId(), filter, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Deployment> getAllDeploymentsAsync(String filter) {
        return new PagedFlux<>(
                () -> getAllDeploymentsSinglePageAsync(filter),
                nextLink -> getAllDeploymentsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Deployment> getAllDeploymentsAsync(String filter, Context context) {
        return new PagedFlux<>(
                () -> getAllDeploymentsSinglePageAsync(filter, context),
                nextLink -> getAllDeploymentsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Deployment> getAllDeployments(String filter) {
        return new PagedIterable<>(getAllDeploymentsAsync(filter));
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Deployment> getAllDeployments(String filter, Context context) {
        return new PagedIterable<>(getAllDeploymentsAsync(filter, context));
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> getDeploymentWithResponseAsync(String deploymentId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                accept,
                                context));
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> getDeploymentWithResponseAsync(String deploymentId, Context context) {
        final String accept = "application/json";
        return service.getDeployment(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, accept, context);
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> getDeploymentAsync(String deploymentId) {
        return getDeploymentWithResponseAsync(deploymentId)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> getDeploymentAsync(String deploymentId, Context context) {
        return getDeploymentWithResponseAsync(deploymentId, context)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment getDeployment(String deploymentId) {
        return getDeploymentAsync(deploymentId).block();
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> getDeploymentWithResponse(String deploymentId, Context context) {
        return getDeploymentWithResponseAsync(deploymentId, context).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> createOrUpdateDeploymentWithResponseAsync(
            String deploymentId, Deployment deployment) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createOrUpdateDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                deployment,
                                accept,
                                context));
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> createOrUpdateDeploymentWithResponseAsync(
            String deploymentId, Deployment deployment, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateDeployment(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                deploymentId,
                deployment,
                accept,
                context);
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> createOrUpdateDeploymentAsync(String deploymentId, Deployment deployment) {
        return createOrUpdateDeploymentWithResponseAsync(deploymentId, deployment)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> createOrUpdateDeploymentAsync(String deploymentId, Deployment deployment, Context context) {
        return createOrUpdateDeploymentWithResponseAsync(deploymentId, deployment, context)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment createOrUpdateDeployment(String deploymentId, Deployment deployment) {
        return createOrUpdateDeploymentAsync(deploymentId, deployment).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> createOrUpdateDeploymentWithResponse(
            String deploymentId, Deployment deployment, Context context) {
        return createOrUpdateDeploymentWithResponseAsync(deploymentId, deployment, context).block();
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(String deploymentId) {
        return FluxUtil.withContext(
                context ->
                        service.deleteDeployment(
                                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, context));
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(String deploymentId, Context context) {
        return service.deleteDeployment(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, context);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeploymentAsync(String deploymentId) {
        return deleteDeploymentWithResponseAsync(deploymentId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeploymentAsync(String deploymentId, Context context) {
        return deleteDeploymentWithResponseAsync(deploymentId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDeployment(String deploymentId) {
        deleteDeploymentAsync(deploymentId).block();
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(String deploymentId, Context context) {
        return deleteDeploymentWithResponseAsync(deploymentId, context).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeploymentStatus>> getDeploymentStatusWithResponseAsync(String deploymentId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDeploymentStatus(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                accept,
                                context));
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeploymentStatus>> getDeploymentStatusWithResponseAsync(String deploymentId, Context context) {
        final String accept = "application/json";
        return service.getDeploymentStatus(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, accept, context);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentStatus> getDeploymentStatusAsync(String deploymentId) {
        return getDeploymentStatusWithResponseAsync(deploymentId)
                .flatMap(
                        (Response<DeploymentStatus> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentStatus> getDeploymentStatusAsync(String deploymentId, Context context) {
        return getDeploymentStatusWithResponseAsync(deploymentId, context)
                .flatMap(
                        (Response<DeploymentStatus> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentStatus getDeploymentStatus(String deploymentId) {
        return getDeploymentStatusAsync(deploymentId).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentStatus> getDeploymentStatusWithResponse(String deploymentId, Context context) {
        return getDeploymentStatusWithResponseAsync(deploymentId, context).block();
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesSinglePageAsync(
            String deploymentId, String filter) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getDeploymentDevices(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        deploymentId,
                                        filter,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesSinglePageAsync(
            String deploymentId, String filter, Context context) {
        final String accept = "application/json";
        return service.getDeploymentDevices(
                        this.client.getAccountEndpoint(),
                        this.client.getInstanceId(),
                        deploymentId,
                        filter,
                        accept,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentDeviceState> getDeploymentDevicesAsync(String deploymentId, String filter) {
        return new PagedFlux<>(
                () -> getDeploymentDevicesSinglePageAsync(deploymentId, filter),
                nextLink -> getDeploymentDevicesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentDeviceState> getDeploymentDevicesAsync(
            String deploymentId, String filter, Context context) {
        return new PagedFlux<>(
                () -> getDeploymentDevicesSinglePageAsync(deploymentId, filter, context),
                nextLink -> getDeploymentDevicesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentDeviceState> getDeploymentDevices(String deploymentId, String filter) {
        return new PagedIterable<>(getDeploymentDevicesAsync(deploymentId, filter));
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentDeviceState> getDeploymentDevices(
            String deploymentId, String filter, Context context) {
        return new PagedIterable<>(getDeploymentDevicesAsync(deploymentId, filter, context));
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> cancelDeploymentWithResponseAsync(String deploymentId) {
        final String action = "cancel";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                action,
                                accept,
                                context));
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> cancelDeploymentWithResponseAsync(String deploymentId, Context context) {
        final String action = "cancel";
        final String accept = "application/json";
        return service.cancelDeployment(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, action, accept, context);
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> cancelDeploymentAsync(String deploymentId) {
        return cancelDeploymentWithResponseAsync(deploymentId)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> cancelDeploymentAsync(String deploymentId, Context context) {
        return cancelDeploymentWithResponseAsync(deploymentId, context)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment cancelDeployment(String deploymentId) {
        return cancelDeploymentAsync(deploymentId).block();
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> cancelDeploymentWithResponse(String deploymentId, Context context) {
        return cancelDeploymentWithResponseAsync(deploymentId, context).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> retryDeploymentWithResponseAsync(String deploymentId) {
        final String action = "retry";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.retryDeployment(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                deploymentId,
                                action,
                                accept,
                                context));
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> retryDeploymentWithResponseAsync(String deploymentId, Context context) {
        final String action = "retry";
        final String accept = "application/json";
        return service.retryDeployment(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), deploymentId, action, accept, context);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> retryDeploymentAsync(String deploymentId) {
        return retryDeploymentWithResponseAsync(deploymentId)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> retryDeploymentAsync(String deploymentId, Context context) {
        return retryDeploymentWithResponseAsync(deploymentId, context)
                .flatMap(
                        (Response<Deployment> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment retryDeployment(String deploymentId) {
        return retryDeploymentAsync(deploymentId).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> retryDeploymentWithResponse(String deploymentId, Context context) {
        return retryDeploymentWithResponseAsync(deploymentId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getAllDeploymentsNext(
                                        nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployments.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getAllDeploymentsNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployment device states.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getDeploymentDevicesNext(
                                        nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployment device states.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.getDeploymentDevicesNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
