// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.iot.deviceupdate.implementation.DevicesImpl;
import com.azure.iot.deviceupdate.models.Device;
import com.azure.iot.deviceupdate.models.DeviceClass;
import com.azure.iot.deviceupdate.models.DeviceTag;
import com.azure.iot.deviceupdate.models.Group;
import com.azure.iot.deviceupdate.models.UpdatableDevices;
import com.azure.iot.deviceupdate.models.UpdateCompliance;
import com.azure.iot.deviceupdate.models.UpdateId;

/** Initializes a new instance of the synchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceUpdateClientBuilder.class)
public final class DevicesClient {
    private final DevicesImpl serviceClient;

    /**
     * Initializes an instance of Devices client.
     *
     * @param serviceClient the service client implementation.
     */
    DevicesClient(DevicesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceClass> getAllDeviceClasses() {
        return this.serviceClient.getAllDeviceClasses();
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceClass> getAllDeviceClasses(Context context) {
        return this.serviceClient.getAllDeviceClasses(context);
    }

    /**
     * Gets the properties of a device class.
     *
     * @param deviceClassId Device class identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a device class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceClass getDeviceClass(String deviceClassId) {
        return this.serviceClient.getDeviceClass(deviceClassId);
    }

    /**
     * Gets the properties of a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a device class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceClass> getDeviceClassWithResponse(String deviceClassId, Context context) {
        return this.serviceClient.getDeviceClassWithResponse(deviceClassId, context);
    }

    /**
     * Gets a list of device identifiers in a device class.
     *
     * @param deviceClassId Device class identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of device identifiers in a device class.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getDeviceClassDeviceIds(String deviceClassId) {
        return this.serviceClient.getDeviceClassDeviceIds(deviceClassId);
    }

    /**
     * Gets a list of device identifiers in a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of device identifiers in a device class.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getDeviceClassDeviceIds(String deviceClassId, Context context) {
        return this.serviceClient.getDeviceClassDeviceIds(deviceClassId, context);
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * @param deviceClassId Device class identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of installable updates for a device class.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UpdateId> getDeviceClassInstallableUpdates(String deviceClassId) {
        return this.serviceClient.getDeviceClassInstallableUpdates(deviceClassId);
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of installable updates for a device class.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UpdateId> getDeviceClassInstallableUpdates(String deviceClassId, Context context) {
        return this.serviceClient.getDeviceClassInstallableUpdates(deviceClassId, context);
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * @param filter Restricts the set of devices returned. You can only filter on device GroupId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Device> getAllDevices(String filter) {
        return this.serviceClient.getAllDevices(filter);
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * @param filter Restricts the set of devices returned. You can only filter on device GroupId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Device> getAllDevices(String filter, Context context) {
        return this.serviceClient.getAllDevices(filter, context);
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * @param deviceId Device identifier in Azure IOT Hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Device getDevice(String deviceId) {
        return this.serviceClient.getDevice(deviceId);
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * @param deviceId Device identifier in Azure IOT Hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Device> getDeviceWithResponse(String deviceId, Context context) {
        return this.serviceClient.getDeviceWithResponse(deviceId, context);
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateCompliance getUpdateCompliance() {
        return this.serviceClient.getUpdateCompliance();
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UpdateCompliance> getUpdateComplianceWithResponse(Context context) {
        return this.serviceClient.getUpdateComplianceWithResponse(context);
    }

    /**
     * Gets a list of available group device tags for all devices connected to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of available group device tags for all devices connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceTag> getAllDeviceTags() {
        return this.serviceClient.getAllDeviceTags();
    }

    /**
     * Gets a list of available group device tags for all devices connected to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of available group device tags for all devices connected to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeviceTag> getAllDeviceTags(Context context) {
        return this.serviceClient.getAllDeviceTags(context);
    }

    /**
     * Gets a count of how many devices have a device tag.
     *
     * @param tagName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a count of how many devices have a device tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeviceTag getDeviceTag(String tagName) {
        return this.serviceClient.getDeviceTag(tagName);
    }

    /**
     * Gets a count of how many devices have a device tag.
     *
     * @param tagName Tag name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a count of how many devices have a device tag.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeviceTag> getDeviceTagWithResponse(String tagName, Context context) {
        return this.serviceClient.getDeviceTagWithResponse(tagName, context);
    }

    /**
     * Gets a list of all device groups.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Group> getAllGroups() {
        return this.serviceClient.getAllGroups();
    }

    /**
     * Gets a list of all device groups.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all device groups.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Group> getAllGroups(Context context) {
        return this.serviceClient.getAllGroups(context);
    }

    /**
     * Gets the properties of a group.
     *
     * @param groupId Group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Group getGroup(String groupId) {
        return this.serviceClient.getGroup(groupId);
    }

    /**
     * Gets the properties of a group.
     *
     * @param groupId Group identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Group> getGroupWithResponse(String groupId, Context context) {
        return this.serviceClient.getGroupWithResponse(groupId, context);
    }

    /**
     * Create or update a device group.
     *
     * @param groupId Group identifier.
     * @param group The group properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Group createOrUpdateGroup(String groupId, Group group) {
        return this.serviceClient.createOrUpdateGroup(groupId, group);
    }

    /**
     * Create or update a device group.
     *
     * @param groupId Group identifier.
     * @param group The group properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Group> createOrUpdateGroupWithResponse(String groupId, Group group, Context context) {
        return this.serviceClient.createOrUpdateGroupWithResponse(groupId, group, context);
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteGroup(String groupId) {
        this.serviceClient.deleteGroup(groupId);
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String groupId, Context context) {
        return this.serviceClient.deleteGroupWithResponse(groupId, context);
    }

    /**
     * Get group update compliance information such as how many devices are on their latest update, how many need new
     * updates, and how many are in progress on receiving a new update.
     *
     * @param groupId Group identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group update compliance information such as how many devices are on their latest update, how many need
     *     new updates, and how many are in progress on receiving a new update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateCompliance getGroupUpdateCompliance(String groupId) {
        return this.serviceClient.getGroupUpdateCompliance(groupId);
    }

    /**
     * Get group update compliance information such as how many devices are on their latest update, how many need new
     * updates, and how many are in progress on receiving a new update.
     *
     * @param groupId Group identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return group update compliance information such as how many devices are on their latest update, how many need
     *     new updates, and how many are in progress on receiving a new update.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<UpdateCompliance> getGroupUpdateComplianceWithResponse(String groupId, Context context) {
        return this.serviceClient.getGroupUpdateComplianceWithResponse(groupId, context);
    }

    /**
     * Get the best available updates for a group and a count of how many devices need each update.
     *
     * @param groupId Group identifier.
     * @param filter Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the best available updates for a group and a count of how many devices need each update.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UpdatableDevices> getGroupBestUpdates(String groupId, String filter) {
        return this.serviceClient.getGroupBestUpdates(groupId, filter);
    }

    /**
     * Get the best available updates for a group and a count of how many devices need each update.
     *
     * @param groupId Group identifier.
     * @param filter Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version
     *     property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the best available updates for a group and a count of how many devices need each update.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UpdatableDevices> getGroupBestUpdates(String groupId, String filter, Context context) {
        return this.serviceClient.getGroupBestUpdates(groupId, filter, context);
    }
}
