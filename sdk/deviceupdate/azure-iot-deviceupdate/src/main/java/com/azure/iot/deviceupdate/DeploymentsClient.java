// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.iot.deviceupdate.implementation.DeploymentsImpl;
import com.azure.iot.deviceupdate.models.Deployment;
import com.azure.iot.deviceupdate.models.DeploymentDeviceState;
import com.azure.iot.deviceupdate.models.DeploymentStatus;

/** Initializes a new instance of the synchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceUpdateClientBuilder.class)
public final class DeploymentsClient {
    private final DeploymentsImpl serviceClient;

    /**
     * Initializes an instance of Deployments client.
     *
     * @param serviceClient the service client implementation.
     */
    DeploymentsClient(DeploymentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Deployment> getAllDeployments(String filter) {
        return this.serviceClient.getAllDeployments(filter);
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Deployment> getAllDeployments(String filter, Context context) {
        return this.serviceClient.getAllDeployments(filter, context);
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment getDeployment(String deploymentId) {
        return this.serviceClient.getDeployment(deploymentId);
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> getDeploymentWithResponse(String deploymentId, Context context) {
        return this.serviceClient.getDeploymentWithResponse(deploymentId, context);
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment createOrUpdateDeployment(String deploymentId, Deployment deployment) {
        return this.serviceClient.createOrUpdateDeployment(deploymentId, deployment);
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> createOrUpdateDeploymentWithResponse(
            String deploymentId, Deployment deployment, Context context) {
        return this.serviceClient.createOrUpdateDeploymentWithResponse(deploymentId, deployment, context);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDeployment(String deploymentId) {
        this.serviceClient.deleteDeployment(deploymentId);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(String deploymentId, Context context) {
        return this.serviceClient.deleteDeploymentWithResponse(deploymentId, context);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentStatus getDeploymentStatus(String deploymentId) {
        return this.serviceClient.getDeploymentStatus(deploymentId);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeploymentStatus> getDeploymentStatusWithResponse(String deploymentId, Context context) {
        return this.serviceClient.getDeploymentStatusWithResponse(deploymentId, context);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentDeviceState> getDeploymentDevices(String deploymentId, String filter) {
        return this.serviceClient.getDeploymentDevices(deploymentId, filter);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentDeviceState> getDeploymentDevices(
            String deploymentId, String filter, Context context) {
        return this.serviceClient.getDeploymentDevices(deploymentId, filter, context);
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment cancelDeployment(String deploymentId) {
        return this.serviceClient.cancelDeployment(deploymentId);
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> cancelDeploymentWithResponse(String deploymentId, Context context) {
        return this.serviceClient.cancelDeploymentWithResponse(deploymentId, context);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Deployment retryDeployment(String deploymentId) {
        return this.serviceClient.retryDeployment(deploymentId);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Deployment> retryDeploymentWithResponse(String deploymentId, Context context) {
        return this.serviceClient.retryDeploymentWithResponse(deploymentId, context);
    }
}
