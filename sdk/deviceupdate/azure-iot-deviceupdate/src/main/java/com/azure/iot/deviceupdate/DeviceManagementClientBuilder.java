// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.iot.deviceupdate.implementation.DeviceUpdateClientBuilderImpl;

/** A builder for creating a new instance of the DeviceUpdateClient type. */
@ServiceClientBuilder(
    serviceClients = {
        DeviceManagementClient.class,
        DeviceManagementAsyncClient.class,
    })
public final class DeviceManagementClientBuilder {
    @Generated private final DeviceUpdateClientBuilderImpl clientBuilder;

    /** Create an instance of the DeviceUpdateClientBuilder. */
    @Generated
    public DeviceManagementClientBuilder() {
        clientBuilder = new DeviceUpdateClientBuilderImpl();
    }

    /**
     * Sets Account endpoint.
     *
     * @param endpoint the endpoint value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder endpoint(String endpoint) {
        clientBuilder.endpoint(endpoint);
        return this;
    }

    /**
     * Sets Account instance identifier.
     *
     * @param instanceId the instanceId value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder instanceId(String instanceId) {
        clientBuilder.instanceId(instanceId);
        return this;
    }

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder serviceVersion(DeviceUpdateServiceVersion serviceVersion) {
        clientBuilder.serviceVersion(serviceVersion);
        return this;
    }

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder pipeline(HttpPipeline pipeline) {
        clientBuilder.pipeline(pipeline);
        return this;
    }

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder httpClient(HttpClient httpClient) {
        clientBuilder.httpClient(httpClient);
        return this;
    }

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder configuration(Configuration configuration) {
        clientBuilder.configuration(configuration);
        return this;
    }

    /**
     * Sets The TokenCredential used for authentication.
     *
     * @param tokenCredential the tokenCredential value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder credential(TokenCredential tokenCredential) {
        clientBuilder.credential(tokenCredential);
        return this;
    }

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        clientBuilder.httpLogOptions(httpLogOptions);
        return this;
    }

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        clientBuilder.retryPolicy(retryPolicy);
        return this;
    }

    /**
     * Sets The client options such as application ID and custom headers to set on a request.
     *
     * @param clientOptions the clientOptions value.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder clientOptions(ClientOptions clientOptions) {
        clientBuilder.clientOptions(clientOptions);
        return this;
    }

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the DeviceUpdateClientBuilder.
     */
    @Generated
    public DeviceManagementClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        clientBuilder.addPolicy(customPolicy);
        return this;
    }

    /**
     * Builds an instance of DeviceManagementAsyncClient async client.
     *
     * @return an instance of DeviceManagementAsyncClient.
     */
    @Generated
    public DeviceManagementAsyncClient buildAsyncClient() {
        return new DeviceManagementAsyncClient(clientBuilder.buildInnerClient().getDeviceManagements());
    }

    /**
     * Builds an instance of DeviceManagementClient sync client.
     *
     * @return an instance of DeviceManagementClient.
     */
    @Generated
    public DeviceManagementClient buildClient() {
        return new DeviceManagementClient(clientBuilder.buildInnerClient().getDeviceManagements());
    }
}
