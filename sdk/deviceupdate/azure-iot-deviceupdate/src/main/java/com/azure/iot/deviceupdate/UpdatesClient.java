// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.iot.deviceupdate.implementation.UpdatesImpl;
import com.azure.iot.deviceupdate.models.AccessCondition;
import com.azure.iot.deviceupdate.models.File;
import com.azure.iot.deviceupdate.models.ImportUpdateInput;
import com.azure.iot.deviceupdate.models.Operation;
import com.azure.iot.deviceupdate.models.Update;

/** Initializes a new instance of the synchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceUpdateClientBuilder.class)
public final class UpdatesClient {
    private final UpdatesImpl serviceClient;

    /**
     * Initializes an instance of Updates client.
     *
     * @param serviceClient the service client implementation.
     */
    UpdatesClient(UpdatesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void importUpdate(ImportUpdateInput updateToImport) {
        this.serviceClient.importUpdate(updateToImport);
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> importUpdateWithResponse(ImportUpdateInput updateToImport, Context context) {
        return this.serviceClient.importUpdateWithResponse(updateToImport, context);
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Update getUpdate(String provider, String name, String version, AccessCondition accessCondition) {
        return this.serviceClient.getUpdate(provider, name, version, accessCondition);
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Update> getUpdateWithResponse(
            String provider, String name, String version, AccessCondition accessCondition, Context context) {
        return this.serviceClient.getUpdateWithResponse(provider, name, version, accessCondition, context);
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUpdate(String provider, String name, String version) {
        this.serviceClient.deleteUpdate(provider, name, version);
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteUpdateWithResponse(String provider, String name, String version, Context context) {
        return this.serviceClient.deleteUpdateWithResponse(provider, name, version, context);
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getProviders() {
        return this.serviceClient.getProviders();
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getProviders(Context context) {
        return this.serviceClient.getProviders(context);
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getNames(String provider) {
        return this.serviceClient.getNames(provider);
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getNames(String provider, Context context) {
        return this.serviceClient.getNames(provider, context);
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getVersions(String provider, String name) {
        return this.serviceClient.getVersions(provider, name);
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getVersions(String provider, String name, Context context) {
        return this.serviceClient.getVersions(provider, name, context);
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getFiles(String provider, String name, String version) {
        return this.serviceClient.getFiles(provider, name, version);
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getFiles(String provider, String name, String version, Context context) {
        return this.serviceClient.getFiles(provider, name, version, context);
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public File getFile(String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        return this.serviceClient.getFile(provider, name, version, fileId, accessCondition);
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<File> getFileWithResponse(
            String provider,
            String name,
            String version,
            String fileId,
            AccessCondition accessCondition,
            Context context) {
        return this.serviceClient.getFileWithResponse(provider, name, version, fileId, accessCondition, context);
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Operation> getOperations(String filter, Integer top) {
        return this.serviceClient.getOperations(filter, top);
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Operation> getOperations(String filter, Integer top, Context context) {
        return this.serviceClient.getOperations(filter, top, context);
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Operation getOperation(String operationId, AccessCondition accessCondition) {
        return this.serviceClient.getOperation(operationId, accessCondition);
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Operation> getOperationWithResponse(
            String operationId, AccessCondition accessCondition, Context context) {
        return this.serviceClient.getOperationWithResponse(operationId, accessCondition, context);
    }
}
