// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;

/** Initializes a new instance of the synchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceManagementClientBuilder.class)
public final class DeviceManagementClient {
    @Generated private final DeviceManagementAsyncClient client;

    /**
     * Initializes an instance of DeviceManagementClient class.
     *
     * @param client the async client.
     */
    @Generated
    DeviceManagementClient(DeviceManagementAsyncClient client) {
        this.client = client;
    }

    /**
     * Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices
     * connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             friendlyName: String
     *             deviceClassProperties: {
     *                 contractModel: {
     *                     id: String
     *                     name: String
     *                 }
     *                 compatProperties: {
     *                     String: String
     *                 }
     *             }
     *             bestCompatibleUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device classes (unique combinations of device manufacturer and model) for all devices
     *     connected to Device Update for IoT Hub as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeviceClasses(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listDeviceClasses(requestOptions));
    }

    /**
     * Gets the properties of a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of a device class along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return this.client.getDeviceClassWithResponse(deviceClassId, requestOptions).block();
    }

    /**
     * Update device class details.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     friendlyName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     friendlyName: String
     *     deviceClassProperties: {
     *         contractModel: {
     *             id: String
     *             name: String
     *         }
     *         compatProperties: {
     *             String: String
     *         }
     *     }
     *     bestCompatibleUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param deviceClassPatch The device class json merge patch body. Currently only supports patching friendlyName.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> updateDeviceClassWithResponse(
            String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions) {
        return this.client.updateDeviceClassWithResponse(deviceClassId, deviceClassPatch, requestOptions).block();
    }

    /**
     * Deletes a device class.
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions) {
        return this.client.deleteDeviceClassWithResponse(deviceClassId, requestOptions).block();
    }

    /**
     * Gets a list of installable updates for a device class.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             updateId: {
     *                 provider: String
     *                 name: String
     *                 version: String
     *             }
     *             description: String
     *             friendlyName: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of installable updates for a device class as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listInstallableUpdatesForDeviceClass(
            String deviceClassId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listInstallableUpdatesForDeviceClass(deviceClassId, requestOptions));
    }

    /**
     * Gets a list of devices connected to Device Update for IoT Hub.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             deviceClassId: String
     *             groupId: String
     *             lastAttemptedUpdate: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *             installedUpdate: (recursive schema, see installedUpdate above)
     *             onLatestUpdate: boolean
     *             lastDeploymentId: String
     *             lastInstallResult: {
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *                 stepResults: [
     *                     {
     *                         update: (recursive schema, see update above)
     *                         description: String
     *                         resultCode: int
     *                         extendedResultCode: int
     *                         resultDetails: String
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices connected to Device Update for IoT Hub as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevices(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listDevices(requestOptions));
    }

    /**
     * Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header
     * value to check for operation status.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String(Devices/Modules/All)
     * }</pre>
     *
     * @param importType The types of devices to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginImportDevices(BinaryData importType, RequestOptions requestOptions) {
        return this.client.beginImportDevices(importType, requestOptions).getSyncPoller();
    }

    /**
     * Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device properties and latest deployment status for a device connected to Device Update for IoT Hub
     *     along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceWithResponse(String deviceId, RequestOptions requestOptions) {
        return this.client.getDeviceWithResponse(deviceId, requestOptions).block();
    }

    /**
     * Gets the device module properties and latest deployment status for a device module connected to Device Update for
     * IoT Hub.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceId: String
     *     moduleId: String
     *     deviceClassId: String
     *     groupId: String
     *     lastAttemptedUpdate: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed)
     *     installedUpdate: (recursive schema, see installedUpdate above)
     *     onLatestUpdate: boolean
     *     lastDeploymentId: String
     *     lastInstallResult: {
     *         resultCode: int
     *         extendedResultCode: int
     *         resultDetails: String
     *         stepResults: [
     *             {
     *                 update: (recursive schema, see update above)
     *                 description: String
     *                 resultCode: int
     *                 extendedResultCode: int
     *                 resultDetails: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param deviceId Device identifier in Azure IoT Hub.
     * @param moduleId Device module identifier in Azure IoT Hub.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device module properties and latest deployment status for a device module connected to Device Update
     *     for IoT Hub along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceModuleWithResponse(
            String deviceId, String moduleId, RequestOptions requestOptions) {
        return this.client.getDeviceModuleWithResponse(deviceId, moduleId, requestOptions).block();
    }

    /**
     * Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress
     * receiving new updates.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the breakdown of how many devices are on their latest update, have new updates available, or are in
     *     progress receiving new updates along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUpdateComplianceWithResponse(RequestOptions requestOptions) {
        return this.client.getUpdateComplianceWithResponse(requestOptions).block();
    }

    /**
     * Gets a list of all device groups. The $default group will always be returned first.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             groupType: String(IoTHubTag/DefaultNoTag)
     *             createdDateTime: String
     *             deviceCount: Integer
     *             subgroupsWithNewUpdatesAvailableCount: Integer
     *             subgroupsWithUpdatesInProgressCount: Integer
     *             subgroupsWithOnLatestUpdateCount: Integer
     *             deployments: [
     *                 String
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device groups as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listGroups(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listGroups(requestOptions));
    }

    /**
     * Gets the device group properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     groupType: String(IoTHubTag/DefaultNoTag)
     *     createdDateTime: String
     *     deviceCount: Integer
     *     subgroupsWithNewUpdatesAvailableCount: Integer
     *     subgroupsWithUpdatesInProgressCount: Integer
     *     subgroupsWithOnLatestUpdateCount: Integer
     *     deployments: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device group properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return this.client.getGroupWithResponse(groupId, requestOptions).block();
    }

    /**
     * Deletes a device group.
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteGroupWithResponse(String groupId, RequestOptions requestOptions) {
        return this.client.deleteGroupWithResponse(groupId, requestOptions).block();
    }

    /**
     * Get device group update compliance information such as how many devices are on their latest update, how many need
     * new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device group update compliance information such as how many devices are on their latest update, how many
     *     need new updates, and how many are in progress on receiving a new update along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getGroupUpdateComplianceWithResponse(String groupId, RequestOptions requestOptions) {
        return this.client.getGroupUpdateComplianceWithResponse(groupId, requestOptions).block();
    }

    /**
     * Get the best available updates for a device group and a count of how many devices need each update.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             deviceCount: int
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available updates for a device group and a count of how many devices need each update as
     *     paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listBestUpdatesForGroup(String groupId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listBestUpdatesForGroup(groupId, requestOptions));
    }

    /**
     * Gets a list of deployments for a device group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device group as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForGroup(String groupId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listDeploymentsForGroup(groupId, requestOptions));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return this.client.getDeploymentWithResponse(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Creates or updates a deployment.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateDeploymentWithResponse(
            String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions) {
        return this.client
                .createOrUpdateDeploymentWithResponse(groupId, deploymentId, deployment, requestOptions)
                .block();
    }

    /**
     * Deletes a deployment.
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeploymentWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return this.client.deleteDeploymentWithResponse(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     subgroupStatus: [
     *         {
     *             groupId: String
     *             deviceClassId: String
     *             deploymentState: String(Active/Failed/Inactive/Canceled)
     *             error: (recursive schema, see error above)
     *             totalDevices: Integer
     *             devicesInProgressCount: Integer
     *             devicesCompletedFailedCount: Integer
     *             devicesCompletedSucceededCount: Integer
     *             devicesCanceledCount: Integer
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(
            String groupId, String deploymentId, RequestOptions requestOptions) {
        return this.client.getDeploymentStatusWithResponse(groupId, deploymentId, requestOptions).block();
    }

    /**
     * Get the device class subgroups for the group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of device class subgroups returned. You can filter on compat properties by name and value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceClassId: String
     *             groupId: String
     *             createdDateTime: String
     *             deviceCount: Integer
     *             deploymentId: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device class subgroups for the group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDeviceClassSubgroupsForGroupWithResponse(
            String groupId, RequestOptions requestOptions) {
        return this.client.listDeviceClassSubgroupsForGroupWithResponse(groupId, requestOptions).block();
    }

    /**
     * Gets device class subgroup details.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deviceClassId: String
     *     groupId: String
     *     createdDateTime: String
     *     deviceCount: Integer
     *     deploymentId: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup details along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupDetailsWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return this.client.getDeviceClassSubgroupDetailsWithResponse(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Deletes a device class subgroup.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return this.client.deleteDeviceClassSubgroupWithResponse(groupId, deviceClassId, requestOptions).block();
    }

    /**
     * Get device class subgroup update compliance information such as how many devices are on their latest update, how
     * many need new updates, and how many are in progress on receiving a new update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     totalDeviceCount: int
     *     onLatestUpdateDeviceCount: int
     *     newUpdatesAvailableDeviceCount: int
     *     updatesInProgressDeviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device class subgroup update compliance information such as how many devices are on their latest update,
     *     how many need new updates, and how many are in progress on receiving a new update along with {@link
     *     Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupUpdateComplianceWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return this.client
                .getDeviceClassSubgroupUpdateComplianceWithResponse(groupId, deviceClassId, requestOptions)
                .block();
    }

    /**
     * Get the best available update for a device class subgroup and a count of how many devices need this update.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     deviceCount: int
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the best available update for a device class subgroup and a count of how many devices need this update
     *     along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listBestUpdatesForDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return this.client
                .listBestUpdatesForDeviceClassSubgroupWithResponse(groupId, deviceClassId, requestOptions)
                .block();
    }

    /**
     * Gets a list of deployments for a device class subgroup.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>Orders the set of deployments returned. You can order by start date.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deploymentId: String
     *             startDateTime: OffsetDateTime
     *             update: {
     *                 updateId: {
     *                     provider: String
     *                     name: String
     *                     version: String
     *                 }
     *                 description: String
     *                 friendlyName: String
     *             }
     *             groupId: String
     *             deviceClassSubgroups: [
     *                 String
     *             ]
     *             isCanceled: Boolean
     *             isRetried: Boolean
     *             rollbackPolicy: {
     *                 update: (recursive schema, see update above)
     *                 failure: {
     *                     devicesFailedPercentage: int
     *                     devicesFailedCount: int
     *                 }
     *             }
     *             isCloudInitiatedRollback: Boolean
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of deployments for a device class subgroup as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentsForDeviceClassSubgroup(
            String groupId, String deviceClassId, RequestOptions requestOptions) {
        return new PagedIterable<>(
                this.client.listDeploymentsForDeviceClassSubgroup(groupId, deviceClassId, requestOptions));
    }

    /**
     * Gets the deployment properties.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the deployment properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentForDeviceClassSubgroupWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.client
                .getDeploymentForDeviceClassSubgroupWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Deletes a device class subgroup deployment.
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDeviceClassSubgroupDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.client
                .deleteDeviceClassSubgroupDeploymentWithResponse(groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Stops a deployment.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stopDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.client.stopDeploymentWithResponse(groupId, deviceClassId, deploymentId, requestOptions).block();
    }

    /**
     * Retries a deployment with failed devices.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     deploymentId: String
     *     startDateTime: OffsetDateTime
     *     update: {
     *         updateId: {
     *             provider: String
     *             name: String
     *             version: String
     *         }
     *         description: String
     *         friendlyName: String
     *     }
     *     groupId: String
     *     deviceClassSubgroups: [
     *         String
     *     ]
     *     isCanceled: Boolean
     *     isRetried: Boolean
     *     rollbackPolicy: {
     *         update: (recursive schema, see update above)
     *         failure: {
     *             devicesFailedPercentage: int
     *             devicesFailedCount: int
     *         }
     *     }
     *     isCloudInitiatedRollback: Boolean
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return deployment metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retryDeploymentWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.client.retryDeploymentWithResponse(groupId, deviceClassId, deploymentId, requestOptions).block();
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     groupId: String
     *     deviceClassId: String
     *     deploymentState: String(Active/Failed/Inactive/Canceled)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     totalDevices: Integer
     *     devicesInProgressCount: Integer
     *     devicesCompletedFailedCount: Integer
     *     devicesCompletedSucceededCount: Integer
     *     devicesCanceledCount: Integer
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeviceClassSubgroupDeploymentStatusWithResponse(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return this.client
                .getDeviceClassSubgroupDeploymentStatusWithResponse(
                        groupId, deviceClassId, deploymentId, requestOptions)
                .block();
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             retryCount: int
     *             movedOnToNewDeployment: boolean
     *             deviceState: String(Succeeded/InProgress/Canceled/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param groupId Group identity.
     * @param deviceClassId Device class identifier.
     * @param deploymentId Deployment identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of devices in a deployment along with their state as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDevicesForDeviceClassSubgroupDeployment(
            String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions) {
        return new PagedIterable<>(
                this.client.listDevicesForDeviceClassSubgroupDeployment(
                        groupId, deviceClassId, deploymentId, requestOptions));
    }

    /**
     * Retrieve operation status.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>If-None-Match</td><td>String</td><td>No</td><td>Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     error: {
     *         code: String
     *         message: String
     *         target: String
     *         details: [
     *             (recursive schema, see above)
     *         ]
     *         innererror: {
     *             code: String
     *             message: String
     *             errorDetail: String
     *             innerError: (recursive schema, see innerError above)
     *         }
     *         occurredDateTime: OffsetDateTime
     *     }
     *     traceId: String
     *     lastActionDateTime: OffsetDateTime
     *     createdDateTime: OffsetDateTime
     *     etag: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return operation metadata along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationWithResponse(String operationId, RequestOptions requestOptions) {
        return this.client.getOperationWithResponse(operationId, requestOptions).block();
    }

    /**
     * Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'"</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             error: {
     *                 code: String
     *                 message: String
     *                 target: String
     *                 details: [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror: {
     *                     code: String
     *                     message: String
     *                     errorDetail: String
     *                     innerError: (recursive schema, see innerError above)
     *                 }
     *                 occurredDateTime: OffsetDateTime
     *             }
     *             traceId: String
     *             lastActionDateTime: OffsetDateTime
     *             createdDateTime: OffsetDateTime
     *             etag: String
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of all device import operations as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listOperations(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listOperations(requestOptions));
    }

    /**
     * Start the device diagnostics log collection operation on specified devices.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param logCollectionRequest The deployment properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return diagnostics request body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> collectLogsWithResponse(
            String operationId, BinaryData logCollectionRequest, RequestOptions requestOptions) {
        return this.client.collectLogsWithResponse(operationId, logCollectionRequest, requestOptions).block();
    }

    /**
     * Get the device diagnostics log collection operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     deviceList: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *         }
     *     ]
     *     description: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the device diagnostics log collection operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionOperationWithResponse(
            String operationId, RequestOptions requestOptions) {
        return this.client.getLogCollectionOperationWithResponse(operationId, requestOptions).block();
    }

    /**
     * Get all device diagnostics log collection operations.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             operationId: String
     *             deviceList: [
     *                 {
     *                     deviceId: String
     *                     moduleId: String
     *                 }
     *             ]
     *             description: String
     *             createdDateTime: String
     *             lastActionDateTime: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return all device diagnostics log collection operations as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listLogCollectionOperations(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listLogCollectionOperations(requestOptions));
    }

    /**
     * Get device diagnostics log collection operation with detailed status.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String
     *     createdDateTime: String
     *     lastActionDateTime: String
     *     status: String(NotStarted/Running/Succeeded/Failed)
     *     deviceStatus: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             status: String(NotStarted/Running/Succeeded/Failed)
     *             resultCode: String
     *             extendedResultCode: String
     *             logLocation: String
     *         }
     *     ]
     *     description: String
     * }
     * }</pre>
     *
     * @param operationId Operation identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return device diagnostics log collection operation with detailed status along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLogCollectionOperationDetailedStatusWithResponse(
            String operationId, RequestOptions requestOptions) {
        return this.client.getLogCollectionOperationDetailedStatusWithResponse(operationId, requestOptions).block();
    }

    /**
     * Get list of device health.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             deviceId: String
     *             moduleId: String
     *             state: String(healthy/unhealthy)
     *             digitalTwinModelId: String
     *             healthChecks: [
     *                 {
     *                     name: String
     *                     result: String(success/userError)
     *                 }
     *             ]
     *         }
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param filter Filter list by specified properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list of device health along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDeviceHealthWithResponse(String filter, RequestOptions requestOptions) {
        return this.client.listDeviceHealthWithResponse(filter, requestOptions).block();
    }
}
