// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.iot.deviceupdate.implementation.UpdatesImpl;
import com.azure.iot.deviceupdate.models.AccessCondition;
import com.azure.iot.deviceupdate.models.File;
import com.azure.iot.deviceupdate.models.ImportUpdateInput;
import com.azure.iot.deviceupdate.models.Operation;
import com.azure.iot.deviceupdate.models.Update;
import com.azure.iot.deviceupdate.models.UpdatesDeleteUpdateResponse;
import com.azure.iot.deviceupdate.models.UpdatesGetOperationResponse;
import com.azure.iot.deviceupdate.models.UpdatesImportUpdateResponse;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceUpdateClientBuilder.class, isAsync = true)
public final class UpdatesAsyncClient {
    private final UpdatesImpl serviceClient;

    /**
     * Initializes an instance of Updates client.
     *
     * @param serviceClient the service client implementation.
     */
    UpdatesAsyncClient(UpdatesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesImportUpdateResponse> importUpdateWithResponse(ImportUpdateInput updateToImport) {
        return this.serviceClient.importUpdateWithResponseAsync(updateToImport);
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> importUpdate(ImportUpdateInput updateToImport) {
        return this.serviceClient.importUpdateAsync(updateToImport);
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Update>> getUpdateWithResponse(
            String provider, String name, String version, AccessCondition accessCondition) {
        return this.serviceClient.getUpdateWithResponseAsync(provider, name, version, accessCondition);
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Update> getUpdate(String provider, String name, String version, AccessCondition accessCondition) {
        return this.serviceClient.getUpdateAsync(provider, name, version, accessCondition);
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesDeleteUpdateResponse> deleteUpdateWithResponse(String provider, String name, String version) {
        return this.serviceClient.deleteUpdateWithResponseAsync(provider, name, version);
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteUpdate(String provider, String name, String version) {
        return this.serviceClient.deleteUpdateAsync(provider, name, version);
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getProvidersSinglePage() {
        return this.serviceClient.getProvidersSinglePageAsync();
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getProviders() {
        return this.serviceClient.getProvidersAsync();
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getNamesSinglePage(String provider) {
        return this.serviceClient.getNamesSinglePageAsync(provider);
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getNames(String provider) {
        return this.serviceClient.getNamesAsync(provider);
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getVersionsSinglePage(String provider, String name) {
        return this.serviceClient.getVersionsSinglePageAsync(provider, name);
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getVersions(String provider, String name) {
        return this.serviceClient.getVersionsAsync(provider, name);
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getFilesSinglePage(String provider, String name, String version) {
        return this.serviceClient.getFilesSinglePageAsync(provider, name, version);
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getFiles(String provider, String name, String version) {
        return this.serviceClient.getFilesAsync(provider, name, version);
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<File>> getFileWithResponse(
            String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        return this.serviceClient.getFileWithResponseAsync(provider, name, version, fileId, accessCondition);
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<File> getFile(
            String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        return this.serviceClient.getFileAsync(provider, name, version, fileId, accessCondition);
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Operation>> getOperationsSinglePage(String filter, Integer top) {
        return this.serviceClient.getOperationsSinglePageAsync(filter, top);
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Operation> getOperations(String filter, Integer top) {
        return this.serviceClient.getOperationsAsync(filter, top);
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesGetOperationResponse> getOperationWithResponse(
            String operationId, AccessCondition accessCondition) {
        return this.serviceClient.getOperationWithResponseAsync(operationId, accessCondition);
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getOperation(String operationId, AccessCondition accessCondition) {
        return this.serviceClient.getOperationAsync(operationId, accessCondition);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getProvidersNextSinglePage(String nextLink) {
        return this.serviceClient.getProvidersNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getNamesNextSinglePage(String nextLink) {
        return this.serviceClient.getNamesNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getVersionsNextSinglePage(String nextLink) {
        return this.serviceClient.getVersionsNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<String>> getFilesNextSinglePage(String nextLink) {
        return this.serviceClient.getFilesNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of operations with server paging support.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Operation>> getOperationsNextSinglePage(String nextLink) {
        return this.serviceClient.getOperationsNextSinglePageAsync(nextLink);
    }
}
