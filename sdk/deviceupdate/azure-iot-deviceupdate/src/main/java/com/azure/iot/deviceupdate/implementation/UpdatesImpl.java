// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.iot.deviceupdate.models.AccessCondition;
import com.azure.iot.deviceupdate.models.File;
import com.azure.iot.deviceupdate.models.ImportUpdateInput;
import com.azure.iot.deviceupdate.models.Operation;
import com.azure.iot.deviceupdate.models.PageableListOfOperations;
import com.azure.iot.deviceupdate.models.PageableListOfStrings;
import com.azure.iot.deviceupdate.models.Update;
import com.azure.iot.deviceupdate.models.UpdatesDeleteUpdateResponse;
import com.azure.iot.deviceupdate.models.UpdatesGetOperationResponse;
import com.azure.iot.deviceupdate.models.UpdatesImportUpdateResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Updates. */
public final class UpdatesImpl {
    /** The proxy service used to perform REST calls. */
    private final UpdatesService service;

    /** The service client containing this operation class. */
    private final DeviceUpdateClientImpl client;

    /**
     * Initializes an instance of UpdatesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    UpdatesImpl(DeviceUpdateClientImpl client) {
        this.service = RestProxy.create(UpdatesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DeviceUpdateClientUpdates to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://{accountEndpoint}")
    @ServiceInterface(name = "DeviceUpdateClientUp")
    private interface UpdatesService {
        @Post("/deviceupdate/{instanceId}/v2/updates")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<UpdatesImportUpdateResponse> importUpdate(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("action") String action,
                @BodyParam("application/json") ImportUpdateInput updateToImport,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}")
        @ExpectedResponses({200, 304})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Update>> getUpdate(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @PathParam("name") String name,
                @PathParam("version") String version,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<UpdatesDeleteUpdateResponse> deleteUpdate(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @PathParam("name") String name,
                @PathParam("version") String version,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/providers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getProviders(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getNames(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getVersions(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @PathParam("name") String name,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getFiles(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @PathParam("name") String name,
                @PathParam("version") String version,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get(
                "/deviceupdate/{instanceId}/v2/updates/providers/{provider}/names/{name}/versions/{version}/files/{fileId}")
        @ExpectedResponses({200, 304})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<File>> getFile(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("provider") String provider,
                @PathParam("name") String name,
                @PathParam("version") String version,
                @PathParam("fileId") String fileId,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfOperations>> getOperations(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @QueryParam("$filter") String filter,
                @QueryParam("$top") Integer top,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/deviceupdate/{instanceId}/v2/updates/operations/{operationId}")
        @ExpectedResponses({200, 304})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<UpdatesGetOperationResponse> getOperation(
                @HostParam("accountEndpoint") String accountEndpoint,
                @PathParam(value = "instanceId", encoded = true) String instanceId,
                @PathParam("operationId") String operationId,
                @HeaderParam("If-None-Match") String ifNoneMatch,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getProvidersNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getNamesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getVersionsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfStrings>> getFilesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<PageableListOfOperations>> getOperationsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("accountEndpoint") String accountEndpoint,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesImportUpdateResponse> importUpdateWithResponseAsync(ImportUpdateInput updateToImport) {
        final String action = "import";
        return FluxUtil.withContext(
                context ->
                        service.importUpdate(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                action,
                                updateToImport,
                                context));
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesImportUpdateResponse> importUpdateWithResponseAsync(
            ImportUpdateInput updateToImport, Context context) {
        final String action = "import";
        return service.importUpdate(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), action, updateToImport, context);
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> importUpdateAsync(ImportUpdateInput updateToImport) {
        return importUpdateWithResponseAsync(updateToImport).flatMap((UpdatesImportUpdateResponse res) -> Mono.empty());
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> importUpdateAsync(ImportUpdateInput updateToImport, Context context) {
        return importUpdateWithResponseAsync(updateToImport, context)
                .flatMap((UpdatesImportUpdateResponse res) -> Mono.empty());
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void importUpdate(ImportUpdateInput updateToImport) {
        importUpdateAsync(updateToImport).block();
    }

    /**
     * Import new update version.
     *
     * @param updateToImport The update to be imported.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> importUpdateWithResponse(ImportUpdateInput updateToImport, Context context) {
        return importUpdateWithResponseAsync(updateToImport, context).block();
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Update>> getUpdateWithResponseAsync(
            String provider, String name, String version, AccessCondition accessCondition) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return FluxUtil.withContext(
                context ->
                        service.getUpdate(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                provider,
                                name,
                                version,
                                ifNoneMatch,
                                accept,
                                context));
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Update>> getUpdateWithResponseAsync(
            String provider, String name, String version, AccessCondition accessCondition, Context context) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return service.getUpdate(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                provider,
                name,
                version,
                ifNoneMatch,
                accept,
                context);
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Update> getUpdateAsync(String provider, String name, String version, AccessCondition accessCondition) {
        return getUpdateWithResponseAsync(provider, name, version, accessCondition)
                .flatMap(
                        (Response<Update> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Update> getUpdateAsync(
            String provider, String name, String version, AccessCondition accessCondition, Context context) {
        return getUpdateWithResponseAsync(provider, name, version, accessCondition, context)
                .flatMap(
                        (Response<Update> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Update getUpdate(String provider, String name, String version, AccessCondition accessCondition) {
        return getUpdateAsync(provider, name, version, accessCondition).block();
    }

    /**
     * Get a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Update> getUpdateWithResponse(
            String provider, String name, String version, AccessCondition accessCondition, Context context) {
        return getUpdateWithResponseAsync(provider, name, version, accessCondition, context).block();
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesDeleteUpdateResponse> deleteUpdateWithResponseAsync(
            String provider, String name, String version) {
        return FluxUtil.withContext(
                context ->
                        service.deleteUpdate(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                provider,
                                name,
                                version,
                                context));
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesDeleteUpdateResponse> deleteUpdateWithResponseAsync(
            String provider, String name, String version, Context context) {
        return service.deleteUpdate(
                this.client.getAccountEndpoint(), this.client.getInstanceId(), provider, name, version, context);
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteUpdateAsync(String provider, String name, String version) {
        return deleteUpdateWithResponseAsync(provider, name, version)
                .flatMap((UpdatesDeleteUpdateResponse res) -> Mono.empty());
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteUpdateAsync(String provider, String name, String version, Context context) {
        return deleteUpdateWithResponseAsync(provider, name, version, context)
                .flatMap((UpdatesDeleteUpdateResponse res) -> Mono.empty());
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUpdate(String provider, String name, String version) {
        deleteUpdateAsync(provider, name, version).block();
    }

    /**
     * Delete a specific update version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteUpdateWithResponse(String provider, String name, String version, Context context) {
        return deleteUpdateWithResponseAsync(provider, name, version, context).block();
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getProvidersSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getProviders(
                                        this.client.getAccountEndpoint(), this.client.getInstanceId(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getProvidersSinglePageAsync(Context context) {
        final String accept = "application/json";
        return service.getProviders(this.client.getAccountEndpoint(), this.client.getInstanceId(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getProvidersAsync() {
        return new PagedFlux<>(
                () -> getProvidersSinglePageAsync(), nextLink -> getProvidersNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getProvidersAsync(Context context) {
        return new PagedFlux<>(
                () -> getProvidersSinglePageAsync(context),
                nextLink -> getProvidersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getProviders() {
        return new PagedIterable<>(getProvidersAsync());
    }

    /**
     * Get a list of all update providers that have been imported to Device Update for IoT Hub.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update providers that have been imported to Device Update for IoT Hub.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getProviders(Context context) {
        return new PagedIterable<>(getProvidersAsync(context));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getNamesSinglePageAsync(String provider) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getNames(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        provider,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getNamesSinglePageAsync(String provider, Context context) {
        final String accept = "application/json";
        return service.getNames(
                        this.client.getAccountEndpoint(), this.client.getInstanceId(), provider, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getNamesAsync(String provider) {
        return new PagedFlux<>(
                () -> getNamesSinglePageAsync(provider), nextLink -> getNamesNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getNamesAsync(String provider, Context context) {
        return new PagedFlux<>(
                () -> getNamesSinglePageAsync(provider, context),
                nextLink -> getNamesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getNames(String provider) {
        return new PagedIterable<>(getNamesAsync(provider));
    }

    /**
     * Get a list of all update names that match the specified provider.
     *
     * @param provider Update provider.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update names that match the specified provider.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getNames(String provider, Context context) {
        return new PagedIterable<>(getNamesAsync(provider, context));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getVersionsSinglePageAsync(String provider, String name) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getVersions(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        provider,
                                        name,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getVersionsSinglePageAsync(String provider, String name, Context context) {
        final String accept = "application/json";
        return service.getVersions(
                        this.client.getAccountEndpoint(), this.client.getInstanceId(), provider, name, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getVersionsAsync(String provider, String name) {
        return new PagedFlux<>(
                () -> getVersionsSinglePageAsync(provider, name), nextLink -> getVersionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getVersionsAsync(String provider, String name, Context context) {
        return new PagedFlux<>(
                () -> getVersionsSinglePageAsync(provider, name, context),
                nextLink -> getVersionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getVersions(String provider, String name) {
        return new PagedIterable<>(getVersionsAsync(provider, name));
    }

    /**
     * Get a list of all update versions that match the specified provider and name.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update versions that match the specified provider and name.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getVersions(String provider, String name, Context context) {
        return new PagedIterable<>(getVersionsAsync(provider, name, context));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getFilesSinglePageAsync(String provider, String name, String version) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getFiles(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        provider,
                                        name,
                                        version,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getFilesSinglePageAsync(
            String provider, String name, String version, Context context) {
        final String accept = "application/json";
        return service.getFiles(
                        this.client.getAccountEndpoint(),
                        this.client.getInstanceId(),
                        provider,
                        name,
                        version,
                        accept,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getFilesAsync(String provider, String name, String version) {
        return new PagedFlux<>(
                () -> getFilesSinglePageAsync(provider, name, version),
                nextLink -> getFilesNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getFilesAsync(String provider, String name, String version, Context context) {
        return new PagedFlux<>(
                () -> getFilesSinglePageAsync(provider, name, version, context),
                nextLink -> getFilesNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getFiles(String provider, String name, String version) {
        return new PagedIterable<>(getFilesAsync(provider, name, version));
    }

    /**
     * Get a list of all update file identifiers for the specified version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all update file identifiers for the specified version.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getFiles(String provider, String name, String version, Context context) {
        return new PagedIterable<>(getFilesAsync(provider, name, version, context));
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<File>> getFileWithResponseAsync(
            String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return FluxUtil.withContext(
                context ->
                        service.getFile(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                provider,
                                name,
                                version,
                                fileId,
                                ifNoneMatch,
                                accept,
                                context));
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<File>> getFileWithResponseAsync(
            String provider,
            String name,
            String version,
            String fileId,
            AccessCondition accessCondition,
            Context context) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return service.getFile(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                provider,
                name,
                version,
                fileId,
                ifNoneMatch,
                accept,
                context);
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<File> getFileAsync(
            String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        return getFileWithResponseAsync(provider, name, version, fileId, accessCondition)
                .flatMap(
                        (Response<File> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<File> getFileAsync(
            String provider,
            String name,
            String version,
            String fileId,
            AccessCondition accessCondition,
            Context context) {
        return getFileWithResponseAsync(provider, name, version, fileId, accessCondition, context)
                .flatMap(
                        (Response<File> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public File getFile(String provider, String name, String version, String fileId, AccessCondition accessCondition) {
        return getFileAsync(provider, name, version, fileId, accessCondition).block();
    }

    /**
     * Get a specific update file from the version.
     *
     * @param provider Update provider.
     * @param name Update name.
     * @param version Update version.
     * @param fileId File identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific update file from the version.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<File> getFileWithResponse(
            String provider,
            String name,
            String version,
            String fileId,
            AccessCondition accessCondition,
            Context context) {
        return getFileWithResponseAsync(provider, name, version, fileId, accessCondition, context).block();
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Operation>> getOperationsSinglePageAsync(String filter, Integer top) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getOperations(
                                        this.client.getAccountEndpoint(),
                                        this.client.getInstanceId(),
                                        filter,
                                        top,
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Operation>> getOperationsSinglePageAsync(String filter, Integer top, Context context) {
        final String accept = "application/json";
        return service.getOperations(
                        this.client.getAccountEndpoint(), this.client.getInstanceId(), filter, top, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Operation> getOperationsAsync(String filter, Integer top) {
        return new PagedFlux<>(
                () -> getOperationsSinglePageAsync(filter, top),
                nextLink -> getOperationsNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Operation> getOperationsAsync(String filter, Integer top, Context context) {
        return new PagedFlux<>(
                () -> getOperationsSinglePageAsync(filter, top, context),
                nextLink -> getOperationsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Operation> getOperations(String filter, Integer top) {
        return new PagedIterable<>(getOperationsAsync(filter, top));
    }

    /**
     * Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete
     * operations are not returned by this API version.
     *
     * @param filter Restricts the set of operations returned. Only one specific filter is supported: "status eq
     *     'NotStarted' or status eq 'Running'".
     * @param top Specifies a non-negative integer n that limits the number of items returned from a collection. The
     *     service returns the number of available items up to but not greater than the specified value n.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all import update operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Operation> getOperations(String filter, Integer top, Context context) {
        return new PagedIterable<>(getOperationsAsync(filter, top, context));
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesGetOperationResponse> getOperationWithResponseAsync(
            String operationId, AccessCondition accessCondition) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return FluxUtil.withContext(
                context ->
                        service.getOperation(
                                this.client.getAccountEndpoint(),
                                this.client.getInstanceId(),
                                operationId,
                                ifNoneMatch,
                                accept,
                                context));
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UpdatesGetOperationResponse> getOperationWithResponseAsync(
            String operationId, AccessCondition accessCondition, Context context) {
        final String accept = "application/json";
        String ifNoneMatchInternal = null;
        if (accessCondition != null) {
            ifNoneMatchInternal = accessCondition.getIfNoneMatch();
        }
        String ifNoneMatch = ifNoneMatchInternal;
        return service.getOperation(
                this.client.getAccountEndpoint(),
                this.client.getInstanceId(),
                operationId,
                ifNoneMatch,
                accept,
                context);
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getOperationAsync(String operationId, AccessCondition accessCondition) {
        return getOperationWithResponseAsync(operationId, accessCondition)
                .flatMap(
                        (UpdatesGetOperationResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Operation> getOperationAsync(String operationId, AccessCondition accessCondition, Context context) {
        return getOperationWithResponseAsync(operationId, accessCondition, context)
                .flatMap(
                        (UpdatesGetOperationResponse res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Operation getOperation(String operationId, AccessCondition accessCondition) {
        return getOperationAsync(operationId, accessCondition).block();
    }

    /**
     * Retrieve operation status.
     *
     * @param operationId Operation identifier.
     * @param accessCondition Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return operation metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Operation> getOperationWithResponse(
            String operationId, AccessCondition accessCondition, Context context) {
        return getOperationWithResponseAsync(operationId, accessCondition, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getProvidersNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getProvidersNext(nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getProvidersNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getProvidersNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getNamesNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getNamesNext(nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getNamesNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getNamesNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getVersionsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getVersionsNext(nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getVersionsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getVersionsNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getFilesNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.getFilesNext(nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of strings with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getFilesNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getFilesNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of operations with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Operation>> getOperationsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.getOperationsNext(nextLink, this.client.getAccountEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of operations with server paging support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Operation>> getOperationsNextSinglePageAsync(String nextLink, Context context) {
        final String accept = "application/json";
        return service.getOperationsNext(nextLink, this.client.getAccountEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
