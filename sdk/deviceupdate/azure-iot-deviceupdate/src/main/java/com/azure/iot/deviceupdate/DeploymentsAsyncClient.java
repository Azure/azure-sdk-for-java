// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.iot.deviceupdate;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.Response;
import com.azure.iot.deviceupdate.implementation.DeploymentsImpl;
import com.azure.iot.deviceupdate.models.Deployment;
import com.azure.iot.deviceupdate.models.DeploymentDeviceState;
import com.azure.iot.deviceupdate.models.DeploymentStatus;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous DeviceUpdateClient type. */
@ServiceClient(builder = DeviceUpdateClientBuilder.class, isAsync = true)
public final class DeploymentsAsyncClient {
    private final DeploymentsImpl serviceClient;

    /**
     * Initializes an instance of Deployments client.
     *
     * @param serviceClient the service client implementation.
     */
    DeploymentsAsyncClient(DeploymentsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsSinglePage(String filter) {
        return this.serviceClient.getAllDeploymentsSinglePageAsync(filter);
    }

    /**
     * Gets a list of deployments.
     *
     * @param filter Restricts the set of deployments returned. You can filter on update Provider, Name and Version
     *     property.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Deployment> getAllDeployments(String filter) {
        return this.serviceClient.getAllDeploymentsAsync(filter);
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> getDeploymentWithResponse(String deploymentId) {
        return this.serviceClient.getDeploymentWithResponseAsync(deploymentId);
    }

    /**
     * Gets the properties of a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a deployment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> getDeployment(String deploymentId) {
        return this.serviceClient.getDeploymentAsync(deploymentId);
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> createOrUpdateDeploymentWithResponse(String deploymentId, Deployment deployment) {
        return this.serviceClient.createOrUpdateDeploymentWithResponseAsync(deploymentId, deployment);
    }

    /**
     * Creates or updates a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @param deployment The deployment properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> createOrUpdateDeployment(String deploymentId, Deployment deployment) {
        return this.serviceClient.createOrUpdateDeploymentAsync(deploymentId, deployment);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponse(String deploymentId) {
        return this.serviceClient.deleteDeploymentWithResponseAsync(deploymentId);
    }

    /**
     * Deletes a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeployment(String deploymentId) {
        return this.serviceClient.deleteDeploymentAsync(deploymentId);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DeploymentStatus>> getDeploymentStatusWithResponse(String deploymentId) {
        return this.serviceClient.getDeploymentStatusWithResponseAsync(deploymentId);
    }

    /**
     * Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     * completed, or failed.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of a deployment including a breakdown of how many devices in the deployment are in progress,
     *     completed, or failed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentStatus> getDeploymentStatus(String deploymentId) {
        return this.serviceClient.getDeploymentStatusAsync(deploymentId);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesSinglePage(
            String deploymentId, String filter) {
        return this.serviceClient.getDeploymentDevicesSinglePageAsync(deploymentId, filter);
    }

    /**
     * Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @param filter Restricts the set of deployment device states returned. You can filter on deviceId and/or
     *     deviceState.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of devices in a deployment along with their state.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentDeviceState> getDeploymentDevices(String deploymentId, String filter) {
        return this.serviceClient.getDeploymentDevicesAsync(deploymentId, filter);
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> cancelDeploymentWithResponse(String deploymentId) {
        return this.serviceClient.cancelDeploymentWithResponseAsync(deploymentId);
    }

    /**
     * Cancels a deployment.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> cancelDeployment(String deploymentId) {
        return this.serviceClient.cancelDeploymentAsync(deploymentId);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Deployment>> retryDeploymentWithResponse(String deploymentId) {
        return this.serviceClient.retryDeploymentWithResponseAsync(deploymentId);
    }

    /**
     * Retries a deployment with failed devices.
     *
     * @param deploymentId Deployment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deployment metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Deployment> retryDeployment(String deploymentId) {
        return this.serviceClient.retryDeploymentAsync(deploymentId);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployments.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<Deployment>> getAllDeploymentsNextSinglePage(String nextLink) {
        return this.serviceClient.getAllDeploymentsNextSinglePageAsync(nextLink);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of deployment device states.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Mono<PagedResponse<DeploymentDeviceState>> getDeploymentDevicesNextSinglePage(String nextLink) {
        return this.serviceClient.getDeploymentDevicesNextSinglePageAsync(nextLink);
    }
}
