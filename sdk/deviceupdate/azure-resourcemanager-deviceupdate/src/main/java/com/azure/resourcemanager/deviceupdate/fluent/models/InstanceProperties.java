// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.deviceupdate.models.DiagnosticStorageProperties;
import com.azure.resourcemanager.deviceupdate.models.IotHubSettings;
import com.azure.resourcemanager.deviceupdate.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Device Update instance properties.
 */
@Fluent
public final class InstanceProperties implements JsonSerializable<InstanceProperties> {
    /*
     * Provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Parent Device Update Account name which Instance belongs to.
     */
    private String accountName;

    /*
     * List of IoT Hubs associated with the account.
     */
    private List<IotHubSettings> iotHubs;

    /*
     * Enables or Disables the diagnostic logs collection
     */
    private Boolean enableDiagnostics;

    /*
     * Customer-initiated diagnostic log collection storage properties
     */
    private DiagnosticStorageProperties diagnosticStorageProperties;

    /**
     * Creates an instance of InstanceProperties class.
     */
    public InstanceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the accountName property: Parent Device Update Account name which Instance belongs to.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Get the iotHubs property: List of IoT Hubs associated with the account.
     * 
     * @return the iotHubs value.
     */
    public List<IotHubSettings> iotHubs() {
        return this.iotHubs;
    }

    /**
     * Set the iotHubs property: List of IoT Hubs associated with the account.
     * 
     * @param iotHubs the iotHubs value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withIotHubs(List<IotHubSettings> iotHubs) {
        this.iotHubs = iotHubs;
        return this;
    }

    /**
     * Get the enableDiagnostics property: Enables or Disables the diagnostic logs collection.
     * 
     * @return the enableDiagnostics value.
     */
    public Boolean enableDiagnostics() {
        return this.enableDiagnostics;
    }

    /**
     * Set the enableDiagnostics property: Enables or Disables the diagnostic logs collection.
     * 
     * @param enableDiagnostics the enableDiagnostics value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withEnableDiagnostics(Boolean enableDiagnostics) {
        this.enableDiagnostics = enableDiagnostics;
        return this;
    }

    /**
     * Get the diagnosticStorageProperties property: Customer-initiated diagnostic log collection storage properties.
     * 
     * @return the diagnosticStorageProperties value.
     */
    public DiagnosticStorageProperties diagnosticStorageProperties() {
        return this.diagnosticStorageProperties;
    }

    /**
     * Set the diagnosticStorageProperties property: Customer-initiated diagnostic log collection storage properties.
     * 
     * @param diagnosticStorageProperties the diagnosticStorageProperties value to set.
     * @return the InstanceProperties object itself.
     */
    public InstanceProperties withDiagnosticStorageProperties(DiagnosticStorageProperties diagnosticStorageProperties) {
        this.diagnosticStorageProperties = diagnosticStorageProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (iotHubs() != null) {
            iotHubs().forEach(e -> e.validate());
        }
        if (diagnosticStorageProperties() != null) {
            diagnosticStorageProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("iotHubs", this.iotHubs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("enableDiagnostics", this.enableDiagnostics);
        jsonWriter.writeJsonField("diagnosticStorageProperties", this.diagnosticStorageProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceProperties.
     */
    public static InstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceProperties deserializedInstanceProperties = new InstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedInstanceProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("accountName".equals(fieldName)) {
                    deserializedInstanceProperties.accountName = reader.getString();
                } else if ("iotHubs".equals(fieldName)) {
                    List<IotHubSettings> iotHubs = reader.readArray(reader1 -> IotHubSettings.fromJson(reader1));
                    deserializedInstanceProperties.iotHubs = iotHubs;
                } else if ("enableDiagnostics".equals(fieldName)) {
                    deserializedInstanceProperties.enableDiagnostics = reader.getNullable(JsonReader::getBoolean);
                } else if ("diagnosticStorageProperties".equals(fieldName)) {
                    deserializedInstanceProperties.diagnosticStorageProperties
                        = DiagnosticStorageProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceProperties;
        });
    }
}
