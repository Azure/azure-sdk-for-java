// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Private endpoint update details. */
@Fluent
public final class PrivateEndpointUpdate {
    /*
     * Remote endpoint resource ID.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * ARM location of the remote private endpoint.
     */
    @JsonProperty(value = "location")
    private String location;

    /*
     * Original subscription ID needed by Microsoft.Network.
     */
    @JsonProperty(value = "immutableSubscriptionId")
    private String immutableSubscriptionId;

    /*
     * Original resource ID needed by Microsoft.Network.
     */
    @JsonProperty(value = "immutableResourceId")
    private String immutableResourceId;

    /*
     * Virtual network traffic tag.
     */
    @JsonProperty(value = "vnetTrafficTag")
    private String vnetTrafficTag;

    /**
     * Get the id property: Remote endpoint resource ID.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Remote endpoint resource ID.
     *
     * @param id the id value to set.
     * @return the PrivateEndpointUpdate object itself.
     */
    public PrivateEndpointUpdate withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the location property: ARM location of the remote private endpoint.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: ARM location of the remote private endpoint.
     *
     * @param location the location value to set.
     * @return the PrivateEndpointUpdate object itself.
     */
    public PrivateEndpointUpdate withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the immutableSubscriptionId property: Original subscription ID needed by Microsoft.Network.
     *
     * @return the immutableSubscriptionId value.
     */
    public String immutableSubscriptionId() {
        return this.immutableSubscriptionId;
    }

    /**
     * Set the immutableSubscriptionId property: Original subscription ID needed by Microsoft.Network.
     *
     * @param immutableSubscriptionId the immutableSubscriptionId value to set.
     * @return the PrivateEndpointUpdate object itself.
     */
    public PrivateEndpointUpdate withImmutableSubscriptionId(String immutableSubscriptionId) {
        this.immutableSubscriptionId = immutableSubscriptionId;
        return this;
    }

    /**
     * Get the immutableResourceId property: Original resource ID needed by Microsoft.Network.
     *
     * @return the immutableResourceId value.
     */
    public String immutableResourceId() {
        return this.immutableResourceId;
    }

    /**
     * Set the immutableResourceId property: Original resource ID needed by Microsoft.Network.
     *
     * @param immutableResourceId the immutableResourceId value to set.
     * @return the PrivateEndpointUpdate object itself.
     */
    public PrivateEndpointUpdate withImmutableResourceId(String immutableResourceId) {
        this.immutableResourceId = immutableResourceId;
        return this;
    }

    /**
     * Get the vnetTrafficTag property: Virtual network traffic tag.
     *
     * @return the vnetTrafficTag value.
     */
    public String vnetTrafficTag() {
        return this.vnetTrafficTag;
    }

    /**
     * Set the vnetTrafficTag property: Virtual network traffic tag.
     *
     * @param vnetTrafficTag the vnetTrafficTag value to set.
     * @return the PrivateEndpointUpdate object itself.
     */
    public PrivateEndpointUpdate withVnetTrafficTag(String vnetTrafficTag) {
        this.vnetTrafficTag = vnetTrafficTag;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
