// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Group connectivity details.
 */
@Fluent
public final class GroupConnectivityInformation implements JsonSerializable<GroupConnectivityInformation> {
    /*
     * Group ID.
     */
    private String groupId;

    /*
     * Member name.
     */
    private String memberName;

    /*
     * List of customer visible FQDNs.
     */
    private List<String> customerVisibleFqdns;

    /*
     * Internal FQDN.
     */
    private String internalFqdn;

    /*
     * Redirect map ID.
     */
    private String redirectMapId;

    /*
     * PrivateLinkService ARM region.
     */
    private String privateLinkServiceArmRegion;

    /**
     * Creates an instance of GroupConnectivityInformation class.
     */
    public GroupConnectivityInformation() {
    }

    /**
     * Get the groupId property: Group ID.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Get the memberName property: Member name.
     * 
     * @return the memberName value.
     */
    public String memberName() {
        return this.memberName;
    }

    /**
     * Get the customerVisibleFqdns property: List of customer visible FQDNs.
     * 
     * @return the customerVisibleFqdns value.
     */
    public List<String> customerVisibleFqdns() {
        return this.customerVisibleFqdns;
    }

    /**
     * Set the customerVisibleFqdns property: List of customer visible FQDNs.
     * 
     * @param customerVisibleFqdns the customerVisibleFqdns value to set.
     * @return the GroupConnectivityInformation object itself.
     */
    public GroupConnectivityInformation withCustomerVisibleFqdns(List<String> customerVisibleFqdns) {
        this.customerVisibleFqdns = customerVisibleFqdns;
        return this;
    }

    /**
     * Get the internalFqdn property: Internal FQDN.
     * 
     * @return the internalFqdn value.
     */
    public String internalFqdn() {
        return this.internalFqdn;
    }

    /**
     * Get the redirectMapId property: Redirect map ID.
     * 
     * @return the redirectMapId value.
     */
    public String redirectMapId() {
        return this.redirectMapId;
    }

    /**
     * Set the redirectMapId property: Redirect map ID.
     * 
     * @param redirectMapId the redirectMapId value to set.
     * @return the GroupConnectivityInformation object itself.
     */
    public GroupConnectivityInformation withRedirectMapId(String redirectMapId) {
        this.redirectMapId = redirectMapId;
        return this;
    }

    /**
     * Get the privateLinkServiceArmRegion property: PrivateLinkService ARM region.
     * 
     * @return the privateLinkServiceArmRegion value.
     */
    public String privateLinkServiceArmRegion() {
        return this.privateLinkServiceArmRegion;
    }

    /**
     * Set the privateLinkServiceArmRegion property: PrivateLinkService ARM region.
     * 
     * @param privateLinkServiceArmRegion the privateLinkServiceArmRegion value to set.
     * @return the GroupConnectivityInformation object itself.
     */
    public GroupConnectivityInformation withPrivateLinkServiceArmRegion(String privateLinkServiceArmRegion) {
        this.privateLinkServiceArmRegion = privateLinkServiceArmRegion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("customerVisibleFqdns", this.customerVisibleFqdns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("redirectMapId", this.redirectMapId);
        jsonWriter.writeStringField("privateLinkServiceArmRegion", this.privateLinkServiceArmRegion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupConnectivityInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupConnectivityInformation if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupConnectivityInformation.
     */
    public static GroupConnectivityInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupConnectivityInformation deserializedGroupConnectivityInformation = new GroupConnectivityInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("groupId".equals(fieldName)) {
                    deserializedGroupConnectivityInformation.groupId = reader.getString();
                } else if ("memberName".equals(fieldName)) {
                    deserializedGroupConnectivityInformation.memberName = reader.getString();
                } else if ("customerVisibleFqdns".equals(fieldName)) {
                    List<String> customerVisibleFqdns = reader.readArray(reader1 -> reader1.getString());
                    deserializedGroupConnectivityInformation.customerVisibleFqdns = customerVisibleFqdns;
                } else if ("internalFqdn".equals(fieldName)) {
                    deserializedGroupConnectivityInformation.internalFqdn = reader.getString();
                } else if ("redirectMapId".equals(fieldName)) {
                    deserializedGroupConnectivityInformation.redirectMapId = reader.getString();
                } else if ("privateLinkServiceArmRegion".equals(fieldName)) {
                    deserializedGroupConnectivityInformation.privateLinkServiceArmRegion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupConnectivityInformation;
        });
    }
}
