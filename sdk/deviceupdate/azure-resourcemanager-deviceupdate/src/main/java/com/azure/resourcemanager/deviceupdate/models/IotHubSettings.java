// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Device Update account integration with IoT Hub settings.
 */
@Fluent
public final class IotHubSettings implements JsonSerializable<IotHubSettings> {
    /*
     * IoTHub resource ID
     */
    private String resourceId;

    /**
     * Creates an instance of IotHubSettings class.
     */
    public IotHubSettings() {
    }

    /**
     * Get the resourceId property: IoTHub resource ID.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: IoTHub resource ID.
     * 
     * @param resourceId the resourceId value to set.
     * @return the IotHubSettings object itself.
     */
    public IotHubSettings withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceId in model IotHubSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IotHubSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotHubSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotHubSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IotHubSettings.
     */
    public static IotHubSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IotHubSettings deserializedIotHubSettings = new IotHubSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedIotHubSettings.resourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIotHubSettings;
        });
    }
}
