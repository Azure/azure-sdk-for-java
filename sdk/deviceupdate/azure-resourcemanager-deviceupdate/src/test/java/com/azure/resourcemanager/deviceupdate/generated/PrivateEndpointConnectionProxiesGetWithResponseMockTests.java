// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.deviceupdate.DeviceUpdateManager;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointConnectionProxy;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionProxiesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Deleting\"},\"eTag\":\"zqzdw\",\"remotePrivateEndpoint\":{\"id\":\"lyoupfgfbkju\",\"location\":\"yhgk\",\"immutableSubscriptionId\":\"in\",\"immutableResourceId\":\"owzfttsttkt\",\"vnetTrafficTag\":\"hbq\",\"manualPrivateLinkServiceConnections\":[{\"name\":\"tgzukxitmmqt\",\"groupIds\":[\"q\",\"hrnxrxc\",\"juisavokqdzf\"],\"requestMessage\":\"zivj\"}],\"privateLinkServiceConnections\":[{\"name\":\"ttbaj\",\"groupIds\":[\"tnwxy\",\"opidkqqfkuv\",\"cxkdmligovi\"],\"requestMessage\":\"xk\"},{\"name\":\"loazuruocbgoo\",\"groupIds\":[\"eoybfhjxakvvjgs\"],\"requestMessage\":\"r\"},{\"name\":\"lmywwtkgkxnyed\",\"groupIds\":[\"yvudtjuewbci\",\"xuuwhcj\",\"xccybvpa\"],\"requestMessage\":\"kkudzp\"},{\"name\":\"wjplma\",\"groupIds\":[\"cyohpfkyrkdbd\",\"iogsjkmnwq\",\"nobaiyhddviacegf\"],\"requestMessage\":\"ntfpmvmemfnc\"}],\"privateLinkServiceProxies\":[{\"id\":\"vbalxlllc\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"zevwrdnhfukuv\",\"actionsRequired\":\"cswsmystul\"},\"remotePrivateEndpointConnection\":{\"id\":\"pfcvlerchpqbmfp\"},\"groupConnectivityInformation\":[{},{},{},{}]}],\"connectionDetails\":[{\"id\":\"dfc\",\"privateIpAddress\":\"spuunnoxyhkxgq\",\"linkIdentifier\":\"rihpfhoq\",\"groupId\":\"a\",\"memberName\":\"dao\"}]},\"status\":\"jvlpjxxkzbr\",\"id\":\"sgeivsiy\",\"name\":\"zkdnc\",\"type\":\"dxonbzoggculap\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DeviceUpdateManager manager = DeviceUpdateManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnectionProxy response = manager.privateEndpointConnectionProxies()
            .getWithResponse("thjoxoism", "ksbpimlqoljx", "cgxxlxs", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("lyoupfgfbkju", response.remotePrivateEndpoint().id());
        Assertions.assertEquals("yhgk", response.remotePrivateEndpoint().location());
        Assertions.assertEquals("in", response.remotePrivateEndpoint().immutableSubscriptionId());
        Assertions.assertEquals("owzfttsttkt", response.remotePrivateEndpoint().immutableResourceId());
        Assertions.assertEquals("hbq", response.remotePrivateEndpoint().vnetTrafficTag());
        Assertions.assertEquals("tgzukxitmmqt",
            response.remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("q",
            response.remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("zivj",
            response.remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("ttbaj",
            response.remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("tnwxy",
            response.remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("xk",
            response.remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("vbalxlllc", response.remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            response.remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .status());
        Assertions.assertEquals("zevwrdnhfukuv",
            response.remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .description());
        Assertions.assertEquals("cswsmystul",
            response.remotePrivateEndpoint()
                .privateLinkServiceProxies()
                .get(0)
                .remotePrivateLinkServiceConnectionState()
                .actionsRequired());
        Assertions.assertEquals("jvlpjxxkzbr", response.status());
    }
}
