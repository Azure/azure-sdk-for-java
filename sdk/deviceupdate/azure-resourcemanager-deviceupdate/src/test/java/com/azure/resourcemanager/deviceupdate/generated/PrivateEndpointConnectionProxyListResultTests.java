// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceupdate.fluent.models.PrivateEndpointConnectionProxyInner;
import com.azure.resourcemanager.deviceupdate.models.ConnectionDetails;
import com.azure.resourcemanager.deviceupdate.models.GroupConnectivityInformation;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointConnectionProxyListResult;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceConnection;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceProxy;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceProxyRemotePrivateEndpointConnection;
import com.azure.resourcemanager.deviceupdate.models.RemotePrivateEndpoint;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionProxyListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProxyListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleting\"},\"eTag\":\"hqyudxorrqnbpoc\",\"remotePrivateEndpoint\":{\"id\":\"i\",\"location\":\"rvkdvjsllrm\",\"immutableSubscriptionId\":\"d\",\"immutableResourceId\":\"atkpnp\",\"vnetTrafficTag\":\"exxbczwtr\",\"manualPrivateLinkServiceConnections\":[{\"name\":\"zb\",\"groupIds\":[\"sovmyokacspkwl\",\"zdobpxjmflbvvnch\",\"kcciwwzjuqkhr\"],\"requestMessage\":\"jiwkuofoskghsau\"},{\"name\":\"mjmvxieduugidyjr\",\"groupIds\":[\"y\"],\"requestMessage\":\"svexcsonpclhoco\"}],\"privateLinkServiceConnections\":[{\"name\":\"ev\",\"groupIds\":[\"gz\",\"buhfmvfaxkffeiit\"],\"requestMessage\":\"vmezy\"},{\"name\":\"hxmzsbbzoggig\",\"groupIds\":[\"burvjxxjnspy\",\"ptkoenkoukn\",\"udwtiukbl\",\"ngkpocipazy\"],\"requestMessage\":\"egukgjnpiucg\"}],\"privateLinkServiceProxies\":[{\"id\":\"qzntypm\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{},{}]},{\"id\":\"drqjsdpy\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{}]},{\"id\":\"de\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{},{},{}]}],\"connectionDetails\":[{\"id\":\"fsj\",\"privateIpAddress\":\"gzfbishcbk\",\"linkIdentifier\":\"jdeyeamdpha\",\"groupId\":\"lpbuxwgipwhonowk\",\"memberName\":\"hwankixzbinjepu\"}]},\"status\":\"mryw\",\"id\":\"uzoqft\",\"name\":\"yqzrnkcqvyxlw\",\"type\":\"zlsico\"}],\"nextLink\":\"qqn\"}")
            .toObject(PrivateEndpointConnectionProxyListResult.class);
        Assertions.assertEquals("i", model.value().get(0).remotePrivateEndpoint().id());
        Assertions.assertEquals("rvkdvjsllrm", model.value().get(0).remotePrivateEndpoint().location());
        Assertions.assertEquals("d", model.value().get(0).remotePrivateEndpoint().immutableSubscriptionId());
        Assertions.assertEquals("atkpnp", model.value().get(0).remotePrivateEndpoint().immutableResourceId());
        Assertions.assertEquals("exxbczwtr", model.value().get(0).remotePrivateEndpoint().vnetTrafficTag());
        Assertions.assertEquals("zb",
            model.value().get(0).remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("sovmyokacspkwl", model.value().get(0).remotePrivateEndpoint()
            .manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("jiwkuofoskghsau",
            model.value().get(0).remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("ev",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("gz",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("vmezy",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("qzntypm",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals("mryw", model.value().get(0).status());
        Assertions.assertEquals("qqn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProxyListResult model
            = new PrivateEndpointConnectionProxyListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PrivateEndpointConnectionProxyInner()
                                .withRemotePrivateEndpoint(
                                    new RemotePrivateEndpoint().withId("i").withLocation("rvkdvjsllrm")
                                        .withImmutableSubscriptionId("d").withImmutableResourceId("atkpnp")
                                        .withVnetTrafficTag("exxbczwtr")
                                        .withManualPrivateLinkServiceConnections(Arrays.asList(
                                            new PrivateLinkServiceConnection().withName("zb")
                                                .withGroupIds(Arrays.asList("sovmyokacspkwl", "zdobpxjmflbvvnch",
                                                    "kcciwwzjuqkhr"))
                                                .withRequestMessage("jiwkuofoskghsau"),
                                            new PrivateLinkServiceConnection()
                                                .withName("mjmvxieduugidyjr").withGroupIds(Arrays.asList("y"))
                                                .withRequestMessage("svexcsonpclhoco")))
                                        .withPrivateLinkServiceConnections(Arrays.asList(
                                            new PrivateLinkServiceConnection().withName("ev")
                                                .withGroupIds(Arrays.asList("gz", "buhfmvfaxkffeiit"))
                                                .withRequestMessage("vmezy"),
                                            new PrivateLinkServiceConnection().withName("hxmzsbbzoggig")
                                                .withGroupIds(Arrays.asList("burvjxxjnspy", "ptkoenkoukn", "udwtiukbl",
                                                    "ngkpocipazy"))
                                                .withRequestMessage("egukgjnpiucg")))
                                        .withPrivateLinkServiceProxies(Arrays.asList(new PrivateLinkServiceProxy()
                                            .withId("qzntypm")
                                            .withRemotePrivateLinkServiceConnectionState(
                                                new PrivateLinkServiceConnectionState())
                                            .withRemotePrivateEndpointConnection(
                                                new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                                            .withGroupConnectivityInformation(
                                                Arrays.asList(new GroupConnectivityInformation(),
                                                    new GroupConnectivityInformation(),
                                                    new GroupConnectivityInformation(),
                                                    new GroupConnectivityInformation())),
                                            new PrivateLinkServiceProxy().withId("drqjsdpy")
                                                .withRemotePrivateLinkServiceConnectionState(
                                                    new PrivateLinkServiceConnectionState())
                                                .withRemotePrivateEndpointConnection(
                                                    new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                                                .withGroupConnectivityInformation(
                                                    Arrays.asList(new GroupConnectivityInformation(),
                                                        new GroupConnectivityInformation())),
                                            new PrivateLinkServiceProxy().withId("de")
                                                .withRemotePrivateLinkServiceConnectionState(
                                                    new PrivateLinkServiceConnectionState())
                                                .withRemotePrivateEndpointConnection(
                                                    new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                                                .withGroupConnectivityInformation(
                                                    Arrays.asList(new GroupConnectivityInformation(),
                                                        new GroupConnectivityInformation(),
                                                        new GroupConnectivityInformation()))))
                                        .withConnectionDetails(Arrays.asList(new ConnectionDetails())))
                                .withStatus("mryw")))
                .withNextLink("qqn");
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProxyListResult.class);
        Assertions.assertEquals("i", model.value().get(0).remotePrivateEndpoint().id());
        Assertions.assertEquals("rvkdvjsllrm", model.value().get(0).remotePrivateEndpoint().location());
        Assertions.assertEquals("d", model.value().get(0).remotePrivateEndpoint().immutableSubscriptionId());
        Assertions.assertEquals("atkpnp", model.value().get(0).remotePrivateEndpoint().immutableResourceId());
        Assertions.assertEquals("exxbczwtr", model.value().get(0).remotePrivateEndpoint().vnetTrafficTag());
        Assertions.assertEquals("zb",
            model.value().get(0).remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("sovmyokacspkwl", model.value().get(0).remotePrivateEndpoint()
            .manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("jiwkuofoskghsau",
            model.value().get(0).remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("ev",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("gz",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("vmezy",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("qzntypm",
            model.value().get(0).remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals("mryw", model.value().get(0).status());
        Assertions.assertEquals("qqn", model.nextLink());
    }
}
