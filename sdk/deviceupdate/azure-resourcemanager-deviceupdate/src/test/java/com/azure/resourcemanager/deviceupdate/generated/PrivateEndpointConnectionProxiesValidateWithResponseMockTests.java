// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceupdate.DeviceUpdateManager;
import com.azure.resourcemanager.deviceupdate.fluent.models.PrivateEndpointConnectionProxyInner;
import com.azure.resourcemanager.deviceupdate.models.ConnectionDetails;
import com.azure.resourcemanager.deviceupdate.models.GroupConnectivityInformation;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceConnection;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceProxy;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceProxyRemotePrivateEndpointConnection;
import com.azure.resourcemanager.deviceupdate.models.RemotePrivateEndpoint;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionProxiesValidateWithResponseMockTests {
    @Test
    public void testValidateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr = "{}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DeviceUpdateManager manager = DeviceUpdateManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        manager.privateEndpointConnectionProxies().validateWithResponse("xcv", "srhnjivo", "v",
            new PrivateEndpointConnectionProxyInner()
                .withRemotePrivateEndpoint(new RemotePrivateEndpoint().withId("eamtmcz").withLocation("m")
                    .withImmutableSubscriptionId("wcw").withImmutableResourceId("ioknssxmoj")
                    .withVnetTrafficTag("vpkjpr")
                    .withManualPrivateLinkServiceConnections(Arrays.asList(
                        new PrivateLinkServiceConnection().withName("fz")
                            .withGroupIds(Arrays.asList("yxgtczh", "ydbsd")).withRequestMessage("m"),
                        new PrivateLinkServiceConnection().withName("maehvbbxurip")
                            .withGroupIds(Arrays.asList("n", "tbaxk", "xywr")).withRequestMessage("pyklyhpluodpvru"),
                        new PrivateLinkServiceConnection().withName("lgzi")
                            .withGroupIds(Arrays.asList("ostgkts", "vdxec", "zedqbcvhzlhplo", "qkdlw"))
                            .withRequestMessage("fbumlkx")))
                    .withPrivateLinkServiceConnections(Arrays.asList(
                        new PrivateLinkServiceConnection().withName("fsmlmbtxhwgfw").withGroupIds(Arrays.asList("a"))
                            .withRequestMessage("oezbrhubsk"),
                        new PrivateLinkServiceConnection()
                            .withName("dyg").withGroupIds(Arrays.asList("kkqfqjbvle", "rfmluiqtq", "fa"))
                            .withRequestMessage("vnqqybaryeua"),
                        new PrivateLinkServiceConnection()
                            .withName("kq").withGroupIds(Arrays.asList("gzslesjcbhernnti", "w"))
                            .withRequestMessage("cv")))
                    .withPrivateLinkServiceProxies(Arrays.asList(
                        new PrivateLinkServiceProxy().withId("rbe")
                            .withRemotePrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.APPROVED)
                                .withDescription("hbuffkmrq").withActionsRequired("vvhmxtdrj"))
                            .withRemotePrivateEndpointConnection(
                                new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                            .withGroupConnectivityInformation(
                                Arrays.asList(new GroupConnectivityInformation(), new GroupConnectivityInformation(),
                                    new GroupConnectivityInformation(), new GroupConnectivityInformation())),
                        new PrivateLinkServiceProxy().withId("cjznmwcpmg")
                            .withRemotePrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                                .withDescription("aufactkahzovajjz").withActionsRequired("xxpshneeku"))
                            .withRemotePrivateEndpointConnection(
                                new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                            .withGroupConnectivityInformation(Arrays.asList(new GroupConnectivityInformation())),
                        new PrivateLinkServiceProxy().withId("sutujba")
                            .withRemotePrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                                .withDescription("hminyflnorwmduv").withActionsRequired("klvxwmyg"))
                            .withRemotePrivateEndpointConnection(
                                new PrivateLinkServiceProxyRemotePrivateEndpointConnection())
                            .withGroupConnectivityInformation(Arrays.asList(new GroupConnectivityInformation()))))
                    .withConnectionDetails(Arrays.asList(new ConnectionDetails(), new ConnectionDetails())))
                .withStatus("dieuzaofj"),
            com.azure.core.util.Context.NONE);

    }
}
