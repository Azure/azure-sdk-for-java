// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceupdate.DeviceUpdateManager;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointConnectionProxy;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointServiceConnectionStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionProxiesListByAccountMockTests {
    @Test
    public void testListByAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Creating\"},\"eTag\":\"qfi\",\"remotePrivateEndpoint\":{\"id\":\"qknp\",\"location\":\"gnepttwqmsni\",\"immutableSubscriptionId\":\"cdm\",\"immutableResourceId\":\"r\",\"vnetTrafficTag\":\"lpijnkrxfrd\",\"manualPrivateLinkServiceConnections\":[{\"name\":\"atiz\",\"groupIds\":[\"nasx\",\"ft\",\"zq\"],\"requestMessage\":\"hftwesgog\"}],\"privateLinkServiceConnections\":[{\"name\":\"nnxk\",\"groupIds\":[\"nyhmossxkkgthr\",\"gh\",\"jbdhqxvc\"],\"requestMessage\":\"frpdsofbshrns\"},{\"name\":\"uswdv\",\"groupIds\":[\"bycnunvjsrtkf\",\"wnopqgikyzirtx\",\"yuxzejntpsewgi\"],\"requestMessage\":\"l\"},{\"name\":\"kr\",\"groupIds\":[\"tqmieox\",\"rgguf\",\"yaomtb\"],\"requestMessage\":\"havgrvk\"},{\"name\":\"ovjzhpjbibgjmfx\",\"groupIds\":[\"fcluyov\",\"xnbkfezzxscyhwzd\",\"irujbz\",\"omvzzbtd\"],\"requestMessage\":\"vp\"}],\"privateLinkServiceProxies\":[{\"id\":\"jviylwdshfs\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"ye\",\"actionsRequired\":\"ymsgaojfmwnc\"},\"remotePrivateEndpointConnection\":{\"id\":\"rfh\"},\"groupConnectivityInformation\":[{},{},{}]},{\"id\":\"ymoxoftpipiwyczu\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"qjlihhyuspska\",\"actionsRequired\":\"vlmfwdgzxulucv\"},\"remotePrivateEndpointConnection\":{\"id\":\"rsre\"},\"groupConnectivityInformation\":[{},{},{},{}]},{\"id\":\"urisjnhnytxifqj\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"hu\",\"actionsRequired\":\"wp\"},\"remotePrivateEndpointConnection\":{\"id\":\"utr\"},\"groupConnectivityInformation\":[{},{}]},{\"id\":\"auutpwoqhihe\",\"remotePrivateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"pnfqntcyp\",\"actionsRequired\":\"jv\"},\"remotePrivateEndpointConnection\":{\"id\":\"mwks\"},\"groupConnectivityInformation\":[{},{},{}]}],\"connectionDetails\":[{\"id\":\"jxv\",\"privateIpAddress\":\"fceacvlhvygd\",\"linkIdentifier\":\"t\",\"groupId\":\"rtwnawjslbi\",\"memberName\":\"ojgcyzt\"}]},\"status\":\"mznbaeqphch\",\"id\":\"nrnrp\",\"name\":\"ehuwrykqgaifmvik\",\"type\":\"bydvkhbejdz\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DeviceUpdateManager manager = DeviceUpdateManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PrivateEndpointConnectionProxy> response = manager.privateEndpointConnectionProxies()
            .listByAccount("fdlwg", "ytsbwtovv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qknp", response.iterator().next().remotePrivateEndpoint().id());
        Assertions.assertEquals("gnepttwqmsni", response.iterator().next().remotePrivateEndpoint().location());
        Assertions.assertEquals("cdm", response.iterator().next().remotePrivateEndpoint().immutableSubscriptionId());
        Assertions.assertEquals("r", response.iterator().next().remotePrivateEndpoint().immutableResourceId());
        Assertions.assertEquals("lpijnkrxfrd", response.iterator().next().remotePrivateEndpoint().vnetTrafficTag());
        Assertions.assertEquals("atiz",
            response.iterator().next().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("nasx", response.iterator().next().remotePrivateEndpoint()
            .manualPrivateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("hftwesgog", response.iterator().next().remotePrivateEndpoint()
            .manualPrivateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("nnxk",
            response.iterator().next().remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("nyhmossxkkgthr", response.iterator().next().remotePrivateEndpoint()
            .privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("frpdsofbshrns",
            response.iterator().next().remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("jviylwdshfs",
            response.iterator().next().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            response.iterator().next().remotePrivateEndpoint().privateLinkServiceProxies().get(0)
                .remotePrivateLinkServiceConnectionState().status());
        Assertions.assertEquals("ye", response.iterator().next().remotePrivateEndpoint().privateLinkServiceProxies()
            .get(0).remotePrivateLinkServiceConnectionState().description());
        Assertions.assertEquals("ymsgaojfmwnc", response.iterator().next().remotePrivateEndpoint()
            .privateLinkServiceProxies().get(0).remotePrivateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("mznbaeqphch", response.iterator().next().status());
    }
}
