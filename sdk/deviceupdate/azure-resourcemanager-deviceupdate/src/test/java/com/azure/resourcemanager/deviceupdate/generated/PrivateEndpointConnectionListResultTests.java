// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.deviceupdate.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpoint;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointConnectionListResult;
import com.azure.resourcemanager.deviceupdate.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.deviceupdate.models.PrivateLinkServiceConnectionState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"yqrimzin\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"jdkirsoodqx\",\"actionsRequired\":\"rmnohj\"},\"groupIds\":[\"whdsoifiyip\"],\"provisioningState\":\"Creating\"},\"id\":\"wpgrjbzno\",\"name\":\"cjxvsnbyxqab\",\"type\":\"mocpc\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"urzafb\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"pbtoqcjmkl\",\"actionsRequired\":\"vbqid\"},\"groupIds\":[\"jzyulpk\",\"dj\"],\"provisioningState\":\"Creating\"},\"id\":\"hbzhfepg\",\"name\":\"gqexzlocxs\",\"type\":\"paierh\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"sglumma\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"odxobnbdxkqpxok\",\"actionsRequired\":\"ionpimexg\"},\"groupIds\":[\"gcpo\"],\"provisioningState\":\"Failed\"},\"id\":\"ajrmvdjwzrlovmc\",\"name\":\"whijcoejctbza\",\"type\":\"s\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"cbkbfkg\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"exxppofmxaxcfjp\",\"actionsRequired\":\"dtocj\"},\"groupIds\":[\"vpmouexhdzxib\",\"eojnxqbzvddn\"],\"provisioningState\":\"Succeeded\"},\"id\":\"eic\",\"name\":\"twnpzaoqvuhrhcf\",\"type\":\"cyddglmjthjqk\"}]}")
            .toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("jdkirsoodqx", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rmnohj", model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("whdsoifiyip", model.value().get(0).groupIds().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionListResult model
            = new PrivateEndpointConnectionListResult()
                .withValue(
                    Arrays.asList(
                        new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                                .withDescription("jdkirsoodqx").withActionsRequired("rmnohj"))
                            .withGroupIds(Arrays.asList("whdsoifiyip")),
                        new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.REJECTED)
                                .withDescription("pbtoqcjmkl").withActionsRequired("vbqid"))
                            .withGroupIds(Arrays.asList("jzyulpk", "dj")),
                        new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                                .withDescription("odxobnbdxkqpxok").withActionsRequired("ionpimexg"))
                            .withGroupIds(Arrays.asList("gcpo")),
                        new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                                .withDescription("exxppofmxaxcfjp").withActionsRequired("dtocj"))
                            .withGroupIds(Arrays.asList("vpmouexhdzxib", "eojnxqbzvddn"))));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionListResult.class);
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.value().get(0).privateLinkServiceConnectionState().status());
        Assertions.assertEquals("jdkirsoodqx", model.value().get(0).privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rmnohj", model.value().get(0).privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("whdsoifiyip", model.value().get(0).groupIds().get(0));
    }
}
