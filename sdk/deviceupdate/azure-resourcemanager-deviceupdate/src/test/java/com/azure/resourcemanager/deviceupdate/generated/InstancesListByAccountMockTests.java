// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.deviceupdate.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.deviceupdate.DeviceUpdateManager;
import com.azure.resourcemanager.deviceupdate.models.AuthenticationType;
import com.azure.resourcemanager.deviceupdate.models.Instance;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class InstancesListByAccountMockTests {
    @Test
    public void testListByAccount() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"accountName\":\"wbtlhflsjcdh\",\"iotHubs\":[{\"resourceId\":\"jvfbgofelja\"},{\"resourceId\":\"rqmq\"},{\"resourceId\":\"ldvriiiojnalghfk\"},{\"resourceId\":\"tvsexsowuel\"}],\"enableDiagnostics\":true,\"diagnosticStorageProperties\":{\"authenticationType\":\"KeyBased\",\"connectionString\":\"hxvrhmzkwpjg\",\"resourceId\":\"wspughftqsxhqx\"}},\"location\":\"xukndxdigr\",\"tags\":{\"fi\":\"ufzdmsyq\",\"phoszqz\":\"whbotzingamv\",\"kfwynw\":\"dphqamv\",\"tnvyqiatkzwp\":\"vtbvkayh\"},\"id\":\"npwzcjaes\",\"name\":\"vvsccyajguq\",\"type\":\"hwyg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DeviceUpdateManager manager = DeviceUpdateManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Instance> response
            = manager.instances().listByAccount("frl", "zszrnwoiindfpw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xukndxdigr", response.iterator().next().location());
        Assertions.assertEquals("ufzdmsyq", response.iterator().next().tags().get("fi"));
        Assertions.assertEquals("jvfbgofelja", response.iterator().next().iotHubs().get(0).resourceId());
        Assertions.assertEquals(true, response.iterator().next().enableDiagnostics());
        Assertions.assertEquals(AuthenticationType.KEY_BASED,
            response.iterator().next().diagnosticStorageProperties().authenticationType());
        Assertions.assertEquals("hxvrhmzkwpjg",
            response.iterator().next().diagnosticStorageProperties().connectionString());
        Assertions.assertEquals("wspughftqsxhqx",
            response.iterator().next().diagnosticStorageProperties().resourceId());
    }
}
