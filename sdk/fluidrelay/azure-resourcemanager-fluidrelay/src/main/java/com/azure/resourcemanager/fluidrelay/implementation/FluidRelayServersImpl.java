// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fluidrelay.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.fluidrelay.fluent.FluidRelayServersClient;
import com.azure.resourcemanager.fluidrelay.fluent.models.FluidRelayServerInner;
import com.azure.resourcemanager.fluidrelay.fluent.models.FluidRelayServerKeysInner;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServer;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServerKeys;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServers;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServersDeleteResponse;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServersGetKeysResponse;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayServersRegenerateKeyResponse;
import com.azure.resourcemanager.fluidrelay.models.RegenerateKeyRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class FluidRelayServersImpl implements FluidRelayServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FluidRelayServersImpl.class);

    private final FluidRelayServersClient innerClient;

    private final com.azure.resourcemanager.fluidrelay.FluidRelayManager serviceManager;

    public FluidRelayServersImpl(
        FluidRelayServersClient innerClient, com.azure.resourcemanager.fluidrelay.FluidRelayManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public FluidRelayServer getByResourceGroup(String resourceGroup, String name) {
        FluidRelayServerInner inner = this.serviceClient().getByResourceGroup(resourceGroup, name);
        if (inner != null) {
            return new FluidRelayServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FluidRelayServer> getByResourceGroupWithResponse(
        String resourceGroup, String name, Context context) {
        Response<FluidRelayServerInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroup, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FluidRelayServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroup, String name) {
        this.serviceClient().delete(resourceGroup, name);
    }

    public FluidRelayServersDeleteResponse deleteWithResponse(String resourceGroup, String name, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroup, name, context);
    }

    public FluidRelayServerKeys regenerateKey(String resourceGroup, String name, RegenerateKeyRequest parameters) {
        FluidRelayServerKeysInner inner = this.serviceClient().regenerateKey(resourceGroup, name, parameters);
        if (inner != null) {
            return new FluidRelayServerKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FluidRelayServerKeys> regenerateKeyWithResponse(
        String resourceGroup, String name, RegenerateKeyRequest parameters, Context context) {
        FluidRelayServersRegenerateKeyResponse inner =
            this.serviceClient().regenerateKeyWithResponse(resourceGroup, name, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FluidRelayServerKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FluidRelayServerKeys getKeys(String resourceGroup, String name) {
        FluidRelayServerKeysInner inner = this.serviceClient().getKeys(resourceGroup, name);
        if (inner != null) {
            return new FluidRelayServerKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FluidRelayServerKeys> getKeysWithResponse(String resourceGroup, String name, Context context) {
        FluidRelayServersGetKeysResponse inner = this.serviceClient().getKeysWithResponse(resourceGroup, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FluidRelayServerKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<FluidRelayServer> list() {
        PagedIterable<FluidRelayServerInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new FluidRelayServerImpl(inner1, this.manager()));
    }

    public PagedIterable<FluidRelayServer> list(Context context) {
        PagedIterable<FluidRelayServerInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new FluidRelayServerImpl(inner1, this.manager()));
    }

    public PagedIterable<FluidRelayServer> listByResourceGroup(String resourceGroup) {
        PagedIterable<FluidRelayServerInner> inner = this.serviceClient().listByResourceGroup(resourceGroup);
        return Utils.mapPage(inner, inner1 -> new FluidRelayServerImpl(inner1, this.manager()));
    }

    public PagedIterable<FluidRelayServer> listByResourceGroup(String resourceGroup, Context context) {
        PagedIterable<FluidRelayServerInner> inner = this.serviceClient().listByResourceGroup(resourceGroup, context);
        return Utils.mapPage(inner, inner1 -> new FluidRelayServerImpl(inner1, this.manager()));
    }

    public FluidRelayServer getById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "fluidRelayServers");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'fluidRelayServers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroup, name, Context.NONE).getValue();
    }

    public Response<FluidRelayServer> getByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "fluidRelayServers");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'fluidRelayServers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroup, name, context);
    }

    public void deleteById(String id) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "fluidRelayServers");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'fluidRelayServers'.", id)));
        }
        this.deleteWithResponse(resourceGroup, name, Context.NONE).getValue();
    }

    public FluidRelayServersDeleteResponse deleteByIdWithResponse(String id, Context context) {
        String resourceGroup = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroup == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "fluidRelayServers");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'fluidRelayServers'.", id)));
        }
        return this.deleteWithResponse(resourceGroup, name, context);
    }

    private FluidRelayServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.fluidrelay.FluidRelayManager manager() {
        return this.serviceManager;
    }

    public FluidRelayServerImpl define(String name) {
        return new FluidRelayServerImpl(name, this.manager());
    }
}
