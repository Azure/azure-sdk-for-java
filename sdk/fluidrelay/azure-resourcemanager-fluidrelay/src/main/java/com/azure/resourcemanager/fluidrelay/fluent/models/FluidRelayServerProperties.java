// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fluidrelay.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.fluidrelay.models.EncryptionProperties;
import com.azure.resourcemanager.fluidrelay.models.FluidRelayEndpoints;
import com.azure.resourcemanager.fluidrelay.models.ProvisioningState;
import com.azure.resourcemanager.fluidrelay.models.StorageSku;
import java.io.IOException;

/**
 * The properties of a Fluid Relay Service resource.
 */
@Fluent
public final class FluidRelayServerProperties implements JsonSerializable<FluidRelayServerProperties> {
    /*
     * The Fluid tenantId for this server
     */
    private String frsTenantId;

    /*
     * The Fluid Relay Service endpoints for this server.
     */
    private FluidRelayEndpoints fluidRelayEndpoints;

    /*
     * Provision states for FluidRelay RP
     */
    private ProvisioningState provisioningState;

    /*
     * All encryption configuration for a resource.
     */
    private EncryptionProperties encryption;

    /*
     * Sku of the storage associated with the resource
     */
    private StorageSku storagesku;

    /**
     * Creates an instance of FluidRelayServerProperties class.
     */
    public FluidRelayServerProperties() {
    }

    /**
     * Get the frsTenantId property: The Fluid tenantId for this server.
     * 
     * @return the frsTenantId value.
     */
    public String frsTenantId() {
        return this.frsTenantId;
    }

    /**
     * Get the fluidRelayEndpoints property: The Fluid Relay Service endpoints for this server.
     * 
     * @return the fluidRelayEndpoints value.
     */
    public FluidRelayEndpoints fluidRelayEndpoints() {
        return this.fluidRelayEndpoints;
    }

    /**
     * Get the provisioningState property: Provision states for FluidRelay RP.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provision states for FluidRelay RP.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the FluidRelayServerProperties object itself.
     */
    public FluidRelayServerProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the encryption property: All encryption configuration for a resource.
     * 
     * @return the encryption value.
     */
    public EncryptionProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: All encryption configuration for a resource.
     * 
     * @param encryption the encryption value to set.
     * @return the FluidRelayServerProperties object itself.
     */
    public FluidRelayServerProperties withEncryption(EncryptionProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the storagesku property: Sku of the storage associated with the resource.
     * 
     * @return the storagesku value.
     */
    public StorageSku storagesku() {
        return this.storagesku;
    }

    /**
     * Set the storagesku property: Sku of the storage associated with the resource.
     * 
     * @param storagesku the storagesku value to set.
     * @return the FluidRelayServerProperties object itself.
     */
    public FluidRelayServerProperties withStoragesku(StorageSku storagesku) {
        this.storagesku = storagesku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fluidRelayEndpoints() != null) {
            fluidRelayEndpoints().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeStringField("storagesku", this.storagesku == null ? null : this.storagesku.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FluidRelayServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FluidRelayServerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FluidRelayServerProperties.
     */
    public static FluidRelayServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FluidRelayServerProperties deserializedFluidRelayServerProperties = new FluidRelayServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frsTenantId".equals(fieldName)) {
                    deserializedFluidRelayServerProperties.frsTenantId = reader.getString();
                } else if ("fluidRelayEndpoints".equals(fieldName)) {
                    deserializedFluidRelayServerProperties.fluidRelayEndpoints = FluidRelayEndpoints.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFluidRelayServerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("encryption".equals(fieldName)) {
                    deserializedFluidRelayServerProperties.encryption = EncryptionProperties.fromJson(reader);
                } else if ("storagesku".equals(fieldName)) {
                    deserializedFluidRelayServerProperties.storagesku = StorageSku.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFluidRelayServerProperties;
        });
    }
}
