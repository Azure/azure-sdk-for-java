// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fluidrelay.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of FluidRelayServers. */
public interface FluidRelayServers {
    /**
     * Get a Fluid Relay server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Fluid Relay server.
     */
    FluidRelayServer getByResourceGroup(String resourceGroup, String name);

    /**
     * Get a Fluid Relay server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Fluid Relay server.
     */
    Response<FluidRelayServer> getByResourceGroupWithResponse(String resourceGroup, String name, Context context);

    /**
     * Delete a Fluid Relay server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroup, String name);

    /**
     * Delete a Fluid Relay server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    FluidRelayServersDeleteResponse deleteWithResponse(String resourceGroup, String name, Context context);

    /**
     * Regenerate the primary or secondary key for this server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @param parameters The details of which keys to generate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of available keys for this server.
     */
    FluidRelayServerKeys regenerateKey(String resourceGroup, String name, RegenerateKeyRequest parameters);

    /**
     * Regenerate the primary or secondary key for this server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @param parameters The details of which keys to generate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of available keys for this server.
     */
    Response<FluidRelayServerKeys> regenerateKeyWithResponse(
        String resourceGroup, String name, RegenerateKeyRequest parameters, Context context);

    /**
     * Regenerate the primary or secondary key for this server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of available keys for this server.
     */
    FluidRelayServerKeys getKeys(String resourceGroup, String name);

    /**
     * Regenerate the primary or secondary key for this server.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param name The resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the set of available keys for this server.
     */
    Response<FluidRelayServerKeys> getKeysWithResponse(String resourceGroup, String name, Context context);

    /**
     * List all Fluid Relay servers in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response.
     */
    PagedIterable<FluidRelayServer> list();

    /**
     * List all Fluid Relay servers in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response.
     */
    PagedIterable<FluidRelayServer> list(Context context);

    /**
     * List all Fluid Relay servers in a resource group.
     *
     * @param resourceGroup The resource group containing the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response.
     */
    PagedIterable<FluidRelayServer> listByResourceGroup(String resourceGroup);

    /**
     * List all Fluid Relay servers in a resource group.
     *
     * @param resourceGroup The resource group containing the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response.
     */
    PagedIterable<FluidRelayServer> listByResourceGroup(String resourceGroup, Context context);

    /**
     * Get a Fluid Relay server.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Fluid Relay server.
     */
    FluidRelayServer getById(String id);

    /**
     * Get a Fluid Relay server.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Fluid Relay server.
     */
    Response<FluidRelayServer> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Fluid Relay server.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Fluid Relay server.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    FluidRelayServersDeleteResponse deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new FluidRelayServer resource.
     *
     * @param name resource name.
     * @return the first stage of the new FluidRelayServer definition.
     */
    FluidRelayServer.DefinitionStages.Blank define(String name);
}
