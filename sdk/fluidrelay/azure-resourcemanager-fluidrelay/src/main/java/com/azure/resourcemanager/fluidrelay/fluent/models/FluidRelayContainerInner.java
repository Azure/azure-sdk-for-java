// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.fluidrelay.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.fluidrelay.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A FluidRelay Container.
 */
@Immutable
public final class FluidRelayContainerInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private FluidRelayContainerProperties innerProperties;

    /*
     * System meta data for this resource, including creation and modification information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of FluidRelayContainerInner class.
     */
    public FluidRelayContainerInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private FluidRelayContainerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: System meta data for this resource, including creation and modification information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the frsTenantId property: The Fluid tenantId for this container.
     * 
     * @return the frsTenantId value.
     */
    public String frsTenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().frsTenantId();
    }

    /**
     * Get the frsContainerId property: The frsContainerId for this container.
     * 
     * @return the frsContainerId value.
     */
    public String frsContainerId() {
        return this.innerProperties() == null ? null : this.innerProperties().frsContainerId();
    }

    /**
     * Get the provisioningState property: Provision states for FluidRelay RP.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the creationTime property: The creation time of this resource.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTime();
    }

    /**
     * Get the lastAccessTime property: Last time when user access this resource.
     * 
     * @return the lastAccessTime value.
     */
    public OffsetDateTime lastAccessTime() {
        return this.innerProperties() == null ? null : this.innerProperties().lastAccessTime();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FluidRelayContainerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FluidRelayContainerInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FluidRelayContainerInner.
     */
    public static FluidRelayContainerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FluidRelayContainerInner deserializedFluidRelayContainerInner = new FluidRelayContainerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFluidRelayContainerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedFluidRelayContainerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFluidRelayContainerInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedFluidRelayContainerInner.innerProperties
                        = FluidRelayContainerProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedFluidRelayContainerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFluidRelayContainerInner;
        });
    }
}
