// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dell.storage.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * EncryptionIdentityUpdateProperties of Dell FileSystem resource.
 */
@Fluent
public final class EncryptionIdentityUpdateProperties implements JsonSerializable<EncryptionIdentityUpdateProperties> {
    /*
     * Identity type - SystemAssigned/UserAssigned - Only UserAssigned is supported now
     */
    private EncryptionIdentityType identityType;

    /*
     * User-assigned identity resource id - Only when user opts for UserAssigned identity and hence optional
     */
    private String identityResourceId;

    /**
     * Creates an instance of EncryptionIdentityUpdateProperties class.
     */
    public EncryptionIdentityUpdateProperties() {
    }

    /**
     * Get the identityType property: Identity type - SystemAssigned/UserAssigned - Only UserAssigned is supported now.
     * 
     * @return the identityType value.
     */
    public EncryptionIdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: Identity type - SystemAssigned/UserAssigned - Only UserAssigned is supported now.
     * 
     * @param identityType the identityType value to set.
     * @return the EncryptionIdentityUpdateProperties object itself.
     */
    public EncryptionIdentityUpdateProperties withIdentityType(EncryptionIdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the identityResourceId property: User-assigned identity resource id - Only when user opts for UserAssigned
     * identity and hence optional.
     * 
     * @return the identityResourceId value.
     */
    public String identityResourceId() {
        return this.identityResourceId;
    }

    /**
     * Set the identityResourceId property: User-assigned identity resource id - Only when user opts for UserAssigned
     * identity and hence optional.
     * 
     * @param identityResourceId the identityResourceId value to set.
     * @return the EncryptionIdentityUpdateProperties object itself.
     */
    public EncryptionIdentityUpdateProperties withIdentityResourceId(String identityResourceId) {
        this.identityResourceId = identityResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeStringField("identityResourceId", this.identityResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionIdentityUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionIdentityUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionIdentityUpdateProperties.
     */
    public static EncryptionIdentityUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionIdentityUpdateProperties deserializedEncryptionIdentityUpdateProperties
                = new EncryptionIdentityUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityType".equals(fieldName)) {
                    deserializedEncryptionIdentityUpdateProperties.identityType
                        = EncryptionIdentityType.fromString(reader.getString());
                } else if ("identityResourceId".equals(fieldName)) {
                    deserializedEncryptionIdentityUpdateProperties.identityResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionIdentityUpdateProperties;
        });
    }
}
