// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dell.storage.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the FileSystemResource.
 */
@Fluent
public final class FileSystemResourceUpdateProperties implements JsonSerializable<FileSystemResourceUpdateProperties> {
    /*
     * Delegated subnet id for Vnet injection
     */
    private String delegatedSubnetId;

    /*
     * Capacity for Dell Filesystem
     */
    private Capacity capacity;

    /*
     * Encryption Details of the resource
     */
    private EncryptionUpdateProperties encryption;

    /**
     * Creates an instance of FileSystemResourceUpdateProperties class.
     */
    public FileSystemResourceUpdateProperties() {
    }

    /**
     * Get the delegatedSubnetId property: Delegated subnet id for Vnet injection.
     * 
     * @return the delegatedSubnetId value.
     */
    public String delegatedSubnetId() {
        return this.delegatedSubnetId;
    }

    /**
     * Set the delegatedSubnetId property: Delegated subnet id for Vnet injection.
     * 
     * @param delegatedSubnetId the delegatedSubnetId value to set.
     * @return the FileSystemResourceUpdateProperties object itself.
     */
    public FileSystemResourceUpdateProperties withDelegatedSubnetId(String delegatedSubnetId) {
        this.delegatedSubnetId = delegatedSubnetId;
        return this;
    }

    /**
     * Get the capacity property: Capacity for Dell Filesystem.
     * 
     * @return the capacity value.
     */
    public Capacity capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: Capacity for Dell Filesystem.
     * 
     * @param capacity the capacity value to set.
     * @return the FileSystemResourceUpdateProperties object itself.
     */
    public FileSystemResourceUpdateProperties withCapacity(Capacity capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the encryption property: Encryption Details of the resource.
     * 
     * @return the encryption value.
     */
    public EncryptionUpdateProperties encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: Encryption Details of the resource.
     * 
     * @param encryption the encryption value to set.
     * @return the FileSystemResourceUpdateProperties object itself.
     */
    public FileSystemResourceUpdateProperties withEncryption(EncryptionUpdateProperties encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capacity() != null) {
            capacity().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("delegatedSubnetId", this.delegatedSubnetId);
        jsonWriter.writeJsonField("capacity", this.capacity);
        jsonWriter.writeJsonField("encryption", this.encryption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSystemResourceUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSystemResourceUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSystemResourceUpdateProperties.
     */
    public static FileSystemResourceUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSystemResourceUpdateProperties deserializedFileSystemResourceUpdateProperties
                = new FileSystemResourceUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("delegatedSubnetId".equals(fieldName)) {
                    deserializedFileSystemResourceUpdateProperties.delegatedSubnetId = reader.getString();
                } else if ("capacity".equals(fieldName)) {
                    deserializedFileSystemResourceUpdateProperties.capacity = Capacity.fromJson(reader);
                } else if ("encryption".equals(fieldName)) {
                    deserializedFileSystemResourceUpdateProperties.encryption
                        = EncryptionUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileSystemResourceUpdateProperties;
        });
    }
}
