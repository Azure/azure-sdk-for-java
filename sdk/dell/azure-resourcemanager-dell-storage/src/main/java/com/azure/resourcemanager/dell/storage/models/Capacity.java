// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dell.storage.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Capacity for a Resource.
 */
@Fluent
public final class Capacity implements JsonSerializable<Capacity> {
    /*
     * Minimum Capacity
     */
    private String min;

    /*
     * Maximum Capacity
     */
    private String max;

    /*
     * Units to be increased
     */
    private String incremental;

    /*
     * Current Capacity of the resource
     */
    private String current;

    /**
     * Creates an instance of Capacity class.
     */
    public Capacity() {
    }

    /**
     * Get the min property: Minimum Capacity.
     * 
     * @return the min value.
     */
    public String min() {
        return this.min;
    }

    /**
     * Set the min property: Minimum Capacity.
     * 
     * @param min the min value to set.
     * @return the Capacity object itself.
     */
    public Capacity withMin(String min) {
        this.min = min;
        return this;
    }

    /**
     * Get the max property: Maximum Capacity.
     * 
     * @return the max value.
     */
    public String max() {
        return this.max;
    }

    /**
     * Set the max property: Maximum Capacity.
     * 
     * @param max the max value to set.
     * @return the Capacity object itself.
     */
    public Capacity withMax(String max) {
        this.max = max;
        return this;
    }

    /**
     * Get the incremental property: Units to be increased.
     * 
     * @return the incremental value.
     */
    public String incremental() {
        return this.incremental;
    }

    /**
     * Set the incremental property: Units to be increased.
     * 
     * @param incremental the incremental value to set.
     * @return the Capacity object itself.
     */
    public Capacity withIncremental(String incremental) {
        this.incremental = incremental;
        return this;
    }

    /**
     * Get the current property: Current Capacity of the resource.
     * 
     * @return the current value.
     */
    public String current() {
        return this.current;
    }

    /**
     * Set the current property: Current Capacity of the resource.
     * 
     * @param current the current value to set.
     * @return the Capacity object itself.
     */
    public Capacity withCurrent(String current) {
        this.current = current;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("min", this.min);
        jsonWriter.writeStringField("max", this.max);
        jsonWriter.writeStringField("incremental", this.incremental);
        jsonWriter.writeStringField("current", this.current);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Capacity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Capacity if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Capacity.
     */
    public static Capacity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Capacity deserializedCapacity = new Capacity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("min".equals(fieldName)) {
                    deserializedCapacity.min = reader.getString();
                } else if ("max".equals(fieldName)) {
                    deserializedCapacity.max = reader.getString();
                } else if ("incremental".equals(fieldName)) {
                    deserializedCapacity.incremental = reader.getString();
                } else if ("current".equals(fieldName)) {
                    deserializedCapacity.current = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapacity;
        });
    }
}
