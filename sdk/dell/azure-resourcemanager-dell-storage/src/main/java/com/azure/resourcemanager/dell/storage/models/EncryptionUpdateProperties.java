// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dell.storage.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * EncryptionUpdateProperties of Dell FileSystem resource.
 */
@Fluent
public final class EncryptionUpdateProperties implements JsonSerializable<EncryptionUpdateProperties> {
    /*
     * Encryption Type - MMK/CMK
     */
    private ResourceEncryptionType encryptionType;

    /*
     * Versioned Encryption Key Url - Only when user opts for CMK and hence optional
     */
    private String keyUrl;

    /*
     * Identity configuration for Customer-managed key settings defining which identity should be used to auth to Key
     * Vault - Only when user opts for CMK and hence optional
     */
    private EncryptionIdentityUpdateProperties encryptionIdentityProperties;

    /**
     * Creates an instance of EncryptionUpdateProperties class.
     */
    public EncryptionUpdateProperties() {
    }

    /**
     * Get the encryptionType property: Encryption Type - MMK/CMK.
     * 
     * @return the encryptionType value.
     */
    public ResourceEncryptionType encryptionType() {
        return this.encryptionType;
    }

    /**
     * Set the encryptionType property: Encryption Type - MMK/CMK.
     * 
     * @param encryptionType the encryptionType value to set.
     * @return the EncryptionUpdateProperties object itself.
     */
    public EncryptionUpdateProperties withEncryptionType(ResourceEncryptionType encryptionType) {
        this.encryptionType = encryptionType;
        return this;
    }

    /**
     * Get the keyUrl property: Versioned Encryption Key Url - Only when user opts for CMK and hence optional.
     * 
     * @return the keyUrl value.
     */
    public String keyUrl() {
        return this.keyUrl;
    }

    /**
     * Set the keyUrl property: Versioned Encryption Key Url - Only when user opts for CMK and hence optional.
     * 
     * @param keyUrl the keyUrl value to set.
     * @return the EncryptionUpdateProperties object itself.
     */
    public EncryptionUpdateProperties withKeyUrl(String keyUrl) {
        this.keyUrl = keyUrl;
        return this;
    }

    /**
     * Get the encryptionIdentityProperties property: Identity configuration for Customer-managed key settings defining
     * which identity should be used to auth to Key Vault - Only when user opts for CMK and hence optional.
     * 
     * @return the encryptionIdentityProperties value.
     */
    public EncryptionIdentityUpdateProperties encryptionIdentityProperties() {
        return this.encryptionIdentityProperties;
    }

    /**
     * Set the encryptionIdentityProperties property: Identity configuration for Customer-managed key settings defining
     * which identity should be used to auth to Key Vault - Only when user opts for CMK and hence optional.
     * 
     * @param encryptionIdentityProperties the encryptionIdentityProperties value to set.
     * @return the EncryptionUpdateProperties object itself.
     */
    public EncryptionUpdateProperties
        withEncryptionIdentityProperties(EncryptionIdentityUpdateProperties encryptionIdentityProperties) {
        this.encryptionIdentityProperties = encryptionIdentityProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encryptionType",
            this.encryptionType == null ? null : this.encryptionType.toString());
        jsonWriter.writeStringField("keyUrl", this.keyUrl);
        jsonWriter.writeJsonField("encryptionIdentityProperties", this.encryptionIdentityProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionUpdateProperties.
     */
    public static EncryptionUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionUpdateProperties deserializedEncryptionUpdateProperties = new EncryptionUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encryptionType".equals(fieldName)) {
                    deserializedEncryptionUpdateProperties.encryptionType
                        = ResourceEncryptionType.fromString(reader.getString());
                } else if ("keyUrl".equals(fieldName)) {
                    deserializedEncryptionUpdateProperties.keyUrl = reader.getString();
                } else if ("encryptionIdentityProperties".equals(fieldName)) {
                    deserializedEncryptionUpdateProperties.encryptionIdentityProperties
                        = EncryptionIdentityUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionUpdateProperties;
        });
    }
}
