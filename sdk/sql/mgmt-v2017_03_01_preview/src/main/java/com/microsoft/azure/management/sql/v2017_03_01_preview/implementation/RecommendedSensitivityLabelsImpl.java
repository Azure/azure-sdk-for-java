/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.RecommendedSensitivityLabels;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.DatabasisServerSensitivityLabelModel;

class RecommendedSensitivityLabelsImpl extends WrapperImpl<RecommendedSensitivityLabelsInner> implements RecommendedSensitivityLabels {
    private final SqlManager manager;

    RecommendedSensitivityLabelsImpl(SqlManager manager) {
        super(manager.inner().recommendedSensitivityLabels());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private DatabasisServerSensitivityLabelModelImpl wrapModel(SensitivityLabelInner inner) {
        return  new DatabasisServerSensitivityLabelModelImpl(inner, manager());
    }

    @Override
    public Observable<DatabasisServerSensitivityLabelModel> listByDatabaseAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        RecommendedSensitivityLabelsInner client = this.inner();
        return client.listByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .flatMapIterable(new Func1<Page<SensitivityLabelInner>, Iterable<SensitivityLabelInner>>() {
            @Override
            public Iterable<SensitivityLabelInner> call(Page<SensitivityLabelInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SensitivityLabelInner, DatabasisServerSensitivityLabelModel>() {
            @Override
            public DatabasisServerSensitivityLabelModel call(SensitivityLabelInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
