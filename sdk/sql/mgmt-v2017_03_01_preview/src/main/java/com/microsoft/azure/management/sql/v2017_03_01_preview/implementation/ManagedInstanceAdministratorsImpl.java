/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.ManagedInstanceAdministrators;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2017_03_01_preview.ManagedInstanceAdministrator;
import com.microsoft.azure.Page;
import rx.Completable;

class ManagedInstanceAdministratorsImpl extends WrapperImpl<ManagedInstanceAdministratorsInner> implements ManagedInstanceAdministrators {
    private final SqlManager manager;

    ManagedInstanceAdministratorsImpl(SqlManager manager) {
        super(manager.inner().managedInstanceAdministrators());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public ManagedInstanceAdministratorImpl defineAdministrator(String name) {
        return wrapAdministratorModel(name);
    }

    private ManagedInstanceAdministratorImpl wrapAdministratorModel(String name) {
        return new ManagedInstanceAdministratorImpl(name, this.manager());
    }

    private ManagedInstanceAdministratorImpl wrapManagedInstanceAdministratorModel(ManagedInstanceAdministratorInner inner) {
        return  new ManagedInstanceAdministratorImpl(inner, manager());
    }

    private Observable<ManagedInstanceAdministratorInner> getManagedInstanceAdministratorInnerUsingManagedInstanceAdministratorsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String managedInstanceName = IdParsingUtils.getValueFromIdByName(id, "managedInstances");
        ManagedInstanceAdministratorsInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName);
    }

    @Override
    public Observable<ManagedInstanceAdministrator> getAsync(String resourceGroupName, String managedInstanceName) {
        ManagedInstanceAdministratorsInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName)
        .flatMap(new Func1<ManagedInstanceAdministratorInner, Observable<ManagedInstanceAdministrator>>() {
            @Override
            public Observable<ManagedInstanceAdministrator> call(ManagedInstanceAdministratorInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ManagedInstanceAdministrator)wrapManagedInstanceAdministratorModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<ManagedInstanceAdministrator> listByInstanceAsync(final String resourceGroupName, final String managedInstanceName) {
        ManagedInstanceAdministratorsInner client = this.inner();
        return client.listByInstanceAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<ManagedInstanceAdministratorInner>, Iterable<ManagedInstanceAdministratorInner>>() {
            @Override
            public Iterable<ManagedInstanceAdministratorInner> call(Page<ManagedInstanceAdministratorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceAdministratorInner, ManagedInstanceAdministrator>() {
            @Override
            public ManagedInstanceAdministrator call(ManagedInstanceAdministratorInner inner) {
                return wrapManagedInstanceAdministratorModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String managedInstanceName) {
        ManagedInstanceAdministratorsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, managedInstanceName).toCompletable();
    }

}
