/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains the information necessary to perform import/export operation.
 */
public class ImportExportDatabaseDefinition {
    /**
     * Name of the import database.
     */
    @JsonProperty(value = "databaseName")
    private String databaseName;

    /**
     * Edition of the import database.
     */
    @JsonProperty(value = "edition")
    private String edition;

    /**
     * Service level objective name of the import database.
     */
    @JsonProperty(value = "serviceObjectiveName")
    private String serviceObjectiveName;

    /**
     * Max size in bytes for the import database.
     */
    @JsonProperty(value = "maxSizeBytes")
    private String maxSizeBytes;

    /**
     * Storage key type.
     */
    @JsonProperty(value = "storageKeyType", required = true)
    private String storageKeyType;

    /**
     * Storage key.
     */
    @JsonProperty(value = "storageKey", required = true)
    private String storageKey;

    /**
     * Storage Uri.
     */
    @JsonProperty(value = "storageUri", required = true)
    private String storageUri;

    /**
     * Administrator login name.
     */
    @JsonProperty(value = "administratorLogin", required = true)
    private String administratorLogin;

    /**
     * Administrator login password.
     */
    @JsonProperty(value = "administratorLoginPassword", required = true)
    private String administratorLoginPassword;

    /**
     * Authentication type.
     */
    @JsonProperty(value = "authenticationType")
    private String authenticationType;

    /**
     * Get name of the import database.
     *
     * @return the databaseName value
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set name of the import database.
     *
     * @param databaseName the databaseName value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get edition of the import database.
     *
     * @return the edition value
     */
    public String edition() {
        return this.edition;
    }

    /**
     * Set edition of the import database.
     *
     * @param edition the edition value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withEdition(String edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get service level objective name of the import database.
     *
     * @return the serviceObjectiveName value
     */
    public String serviceObjectiveName() {
        return this.serviceObjectiveName;
    }

    /**
     * Set service level objective name of the import database.
     *
     * @param serviceObjectiveName the serviceObjectiveName value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withServiceObjectiveName(String serviceObjectiveName) {
        this.serviceObjectiveName = serviceObjectiveName;
        return this;
    }

    /**
     * Get max size in bytes for the import database.
     *
     * @return the maxSizeBytes value
     */
    public String maxSizeBytes() {
        return this.maxSizeBytes;
    }

    /**
     * Set max size in bytes for the import database.
     *
     * @param maxSizeBytes the maxSizeBytes value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withMaxSizeBytes(String maxSizeBytes) {
        this.maxSizeBytes = maxSizeBytes;
        return this;
    }

    /**
     * Get storage key type.
     *
     * @return the storageKeyType value
     */
    public String storageKeyType() {
        return this.storageKeyType;
    }

    /**
     * Set storage key type.
     *
     * @param storageKeyType the storageKeyType value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withStorageKeyType(String storageKeyType) {
        this.storageKeyType = storageKeyType;
        return this;
    }

    /**
     * Get storage key.
     *
     * @return the storageKey value
     */
    public String storageKey() {
        return this.storageKey;
    }

    /**
     * Set storage key.
     *
     * @param storageKey the storageKey value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withStorageKey(String storageKey) {
        this.storageKey = storageKey;
        return this;
    }

    /**
     * Get storage Uri.
     *
     * @return the storageUri value
     */
    public String storageUri() {
        return this.storageUri;
    }

    /**
     * Set storage Uri.
     *
     * @param storageUri the storageUri value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withStorageUri(String storageUri) {
        this.storageUri = storageUri;
        return this;
    }

    /**
     * Get administrator login name.
     *
     * @return the administratorLogin value
     */
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Set administrator login name.
     *
     * @param administratorLogin the administratorLogin value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withAdministratorLogin(String administratorLogin) {
        this.administratorLogin = administratorLogin;
        return this;
    }

    /**
     * Get administrator login password.
     *
     * @return the administratorLoginPassword value
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set administrator login password.
     *
     * @param administratorLoginPassword the administratorLoginPassword value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get authentication type.
     *
     * @return the authenticationType value
     */
    public String authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set authentication type.
     *
     * @param authenticationType the authenticationType value to set
     * @return the ImportExportDatabaseDefinition object itself.
     */
    public ImportExportDatabaseDefinition withAuthenticationType(String authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

}
