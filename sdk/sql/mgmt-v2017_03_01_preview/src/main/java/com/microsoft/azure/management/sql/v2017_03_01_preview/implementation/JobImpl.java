/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_03_01_preview.Job;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobSchedule;

class JobImpl extends CreatableUpdatableImpl<Job, JobInner, JobImpl> implements Job, Job.Definition, Job.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String jobAgentName;
    private String jobName;

    JobImpl(String name, SqlManager manager) {
        super(name, new JobInner());
        this.manager = manager;
        // Set resource name
        this.jobName = name;
        //
    }

    JobImpl(JobInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.jobName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.jobAgentName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobAgents");
        this.jobName = IdParsingUtils.getValueFromIdByName(inner.id(), "jobs");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Job> createResourceAsync() {
        JobsInner client = this.manager().inner().jobs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.jobName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Job> updateResourceAsync() {
        JobsInner client = this.manager().inner().jobs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.jobName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JobInner> getInnerAsync() {
        JobsInner client = this.manager().inner().jobs();
        return client.getAsync(this.resourceGroupName, this.serverName, this.jobAgentName, this.jobName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public JobSchedule schedule() {
        return this.inner().schedule();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public Integer version() {
        return this.inner().version();
    }

    @Override
    public JobImpl withExistingJobAgent(String resourceGroupName, String serverName, String jobAgentName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.jobAgentName = jobAgentName;
        return this;
    }

    @Override
    public JobImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public JobImpl withSchedule(JobSchedule schedule) {
        this.inner().withSchedule(schedule);
        return this;
    }

}
