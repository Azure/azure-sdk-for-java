// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ServerBlobAuditingPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerBlobAuditingPolicyInner;
import com.azure.resourcemanager.sql.generated.models.ServerBlobAuditingPolicies;
import com.azure.resourcemanager.sql.generated.models.ServerBlobAuditingPolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerBlobAuditingPoliciesImpl implements ServerBlobAuditingPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerBlobAuditingPoliciesImpl.class);

    private final ServerBlobAuditingPoliciesClient innerClient;

    private final SqlManager serviceManager;

    public ServerBlobAuditingPoliciesImpl(ServerBlobAuditingPoliciesClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerBlobAuditingPolicy get(String resourceGroupName, String serverName) {
        ServerBlobAuditingPolicyInner inner = this.serviceClient().get(resourceGroupName, serverName);
        if (inner != null) {
            return new ServerBlobAuditingPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerBlobAuditingPolicy> getWithResponse(
        String resourceGroupName, String serverName, Context context) {
        Response<ServerBlobAuditingPolicyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerBlobAuditingPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ServerBlobAuditingPolicy> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<ServerBlobAuditingPolicyInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName);
        return inner.mapPage(inner1 -> new ServerBlobAuditingPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerBlobAuditingPolicy> listByServer(
        String resourceGroupName, String serverName, Context context) {
        PagedIterable<ServerBlobAuditingPolicyInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return inner.mapPage(inner1 -> new ServerBlobAuditingPolicyImpl(inner1, this.manager()));
    }

    public ServerBlobAuditingPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, Context.NONE).getValue();
    }

    public Response<ServerBlobAuditingPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, context);
    }

    private ServerBlobAuditingPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public ServerBlobAuditingPolicyImpl define(String name) {
        return new ServerBlobAuditingPolicyImpl(name, this.manager());
    }
}
