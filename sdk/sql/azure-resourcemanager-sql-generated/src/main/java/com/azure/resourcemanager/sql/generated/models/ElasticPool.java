// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ElasticPoolInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of ElasticPool. */
public interface ElasticPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The elastic pool SKU.
     *
     * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
     * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
     * `Capabilities_ListByLocation` REST API or the following command:
     *
     * <p>```azurecli az sql elastic-pool list-editions -l &lt;location&gt; -o table ````.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the kind property: Kind of elastic pool. This is metadata used for the Azure portal experience.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the state property: The state of the elastic pool.
     *
     * @return the state value.
     */
    ElasticPoolState state();

    /**
     * Gets the creationDate property: The creation date of the elastic pool (ISO8601 format).
     *
     * @return the creationDate value.
     */
    OffsetDateTime creationDate();

    /**
     * Gets the maxSizeBytes property: The storage limit for the database elastic pool in bytes.
     *
     * @return the maxSizeBytes value.
     */
    Long maxSizeBytes();

    /**
     * Gets the perDatabaseSettings property: The per database settings for the elastic pool.
     *
     * @return the perDatabaseSettings value.
     */
    ElasticPoolPerDatabaseSettings perDatabaseSettings();

    /**
     * Gets the zoneRedundant property: Whether or not this elastic pool is zone redundant, which means the replicas of
     * this elastic pool will be spread across multiple availability zones.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the licenseType property: The license type to apply for this elastic pool.
     *
     * @return the licenseType value.
     */
    ElasticPoolLicenseType licenseType();

    /**
     * Gets the maintenanceConfigurationId property: Maintenance configuration id assigned to the elastic pool. This
     * configuration defines the period when the maintenance updates will will occur.
     *
     * @return the maintenanceConfigurationId value.
     */
    String maintenanceConfigurationId();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.ElasticPoolInner object.
     *
     * @return the inner object.
     */
    ElasticPoolInner innerModel();

    /** The entirety of the ElasticPool definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The ElasticPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the ElasticPool definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ElasticPool definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the ElasticPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String serverName);
        }
        /**
         * The stage of the ElasticPool definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithMaxSizeBytes,
                DefinitionStages.WithPerDatabaseSettings,
                DefinitionStages.WithZoneRedundant,
                DefinitionStages.WithLicenseType,
                DefinitionStages.WithMaintenanceConfigurationId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ElasticPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ElasticPool create(Context context);
        }
        /** The stage of the ElasticPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ElasticPool definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The elastic pool SKU.
             *
             * <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name,
             * tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the
             * `Capabilities_ListByLocation` REST API or the following command:
             *
             * <p>```azurecli az sql elastic-pool list-editions -l &lt;location&gt; -o table ```` .
             *
             * @param sku The elastic pool SKU.
             *     <p>The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU
             *     name, tier/edition, family, and capacity) that are available to your subscription in an Azure region,
             *     use the `Capabilities_ListByLocation` REST API or the following command:
             *     <p>```azurecli az sql elastic-pool list-editions -l &lt;location&gt; -o table ````.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /** The stage of the ElasticPool definition allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The storage limit for the database elastic pool in bytes..
             *
             * @param maxSizeBytes The storage limit for the database elastic pool in bytes.
             * @return the next definition stage.
             */
            WithCreate withMaxSizeBytes(Long maxSizeBytes);
        }
        /** The stage of the ElasticPool definition allowing to specify perDatabaseSettings. */
        interface WithPerDatabaseSettings {
            /**
             * Specifies the perDatabaseSettings property: The per database settings for the elastic pool..
             *
             * @param perDatabaseSettings The per database settings for the elastic pool.
             * @return the next definition stage.
             */
            WithCreate withPerDatabaseSettings(ElasticPoolPerDatabaseSettings perDatabaseSettings);
        }
        /** The stage of the ElasticPool definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this elastic pool is zone redundant, which means the
             * replicas of this elastic pool will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this elastic pool is zone redundant, which means the replicas of this
             *     elastic pool will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
        /** The stage of the ElasticPool definition allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: The license type to apply for this elastic pool..
             *
             * @param licenseType The license type to apply for this elastic pool.
             * @return the next definition stage.
             */
            WithCreate withLicenseType(ElasticPoolLicenseType licenseType);
        }
        /** The stage of the ElasticPool definition allowing to specify maintenanceConfigurationId. */
        interface WithMaintenanceConfigurationId {
            /**
             * Specifies the maintenanceConfigurationId property: Maintenance configuration id assigned to the elastic
             * pool. This configuration defines the period when the maintenance updates will will occur..
             *
             * @param maintenanceConfigurationId Maintenance configuration id assigned to the elastic pool. This
             *     configuration defines the period when the maintenance updates will will occur.
             * @return the next definition stage.
             */
            WithCreate withMaintenanceConfigurationId(String maintenanceConfigurationId);
        }
    }
    /**
     * Begins update for the ElasticPool resource.
     *
     * @return the stage of resource update.
     */
    ElasticPool.Update update();

    /** The template for ElasticPool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithMaxSizeBytes,
            UpdateStages.WithPerDatabaseSettings,
            UpdateStages.WithZoneRedundant,
            UpdateStages.WithLicenseType,
            UpdateStages.WithMaintenanceConfigurationId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ElasticPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ElasticPool apply(Context context);
    }
    /** The ElasticPool update stages. */
    interface UpdateStages {
        /** The stage of the ElasticPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ElasticPool update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: An ARM Resource SKU..
             *
             * @param sku An ARM Resource SKU.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the ElasticPool update allowing to specify maxSizeBytes. */
        interface WithMaxSizeBytes {
            /**
             * Specifies the maxSizeBytes property: The storage limit for the database elastic pool in bytes..
             *
             * @param maxSizeBytes The storage limit for the database elastic pool in bytes.
             * @return the next definition stage.
             */
            Update withMaxSizeBytes(Long maxSizeBytes);
        }
        /** The stage of the ElasticPool update allowing to specify perDatabaseSettings. */
        interface WithPerDatabaseSettings {
            /**
             * Specifies the perDatabaseSettings property: The per database settings for the elastic pool..
             *
             * @param perDatabaseSettings The per database settings for the elastic pool.
             * @return the next definition stage.
             */
            Update withPerDatabaseSettings(ElasticPoolPerDatabaseSettings perDatabaseSettings);
        }
        /** The stage of the ElasticPool update allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not this elastic pool is zone redundant, which means the
             * replicas of this elastic pool will be spread across multiple availability zones..
             *
             * @param zoneRedundant Whether or not this elastic pool is zone redundant, which means the replicas of this
             *     elastic pool will be spread across multiple availability zones.
             * @return the next definition stage.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }
        /** The stage of the ElasticPool update allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: The license type to apply for this elastic pool..
             *
             * @param licenseType The license type to apply for this elastic pool.
             * @return the next definition stage.
             */
            Update withLicenseType(ElasticPoolLicenseType licenseType);
        }
        /** The stage of the ElasticPool update allowing to specify maintenanceConfigurationId. */
        interface WithMaintenanceConfigurationId {
            /**
             * Specifies the maintenanceConfigurationId property: Maintenance configuration id assigned to the elastic
             * pool. This configuration defines the period when the maintenance updates will will occur..
             *
             * @param maintenanceConfigurationId Maintenance configuration id assigned to the elastic pool. This
             *     configuration defines the period when the maintenance updates will will occur.
             * @return the next definition stage.
             */
            Update withMaintenanceConfigurationId(String maintenanceConfigurationId);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ElasticPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ElasticPool refresh(Context context);
}
