// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ServerTrustGroupsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerTrustGroupInner;
import com.azure.resourcemanager.sql.generated.models.ServerTrustGroup;
import com.azure.resourcemanager.sql.generated.models.ServerTrustGroups;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerTrustGroupsImpl implements ServerTrustGroups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerTrustGroupsImpl.class);

    private final ServerTrustGroupsClient innerClient;

    private final SqlManager serviceManager;

    public ServerTrustGroupsImpl(ServerTrustGroupsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerTrustGroup get(String resourceGroupName, String locationName, String serverTrustGroupName) {
        ServerTrustGroupInner inner = this.serviceClient().get(resourceGroupName, locationName, serverTrustGroupName);
        if (inner != null) {
            return new ServerTrustGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerTrustGroup> getWithResponse(
        String resourceGroupName, String locationName, String serverTrustGroupName, Context context) {
        Response<ServerTrustGroupInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, locationName, serverTrustGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerTrustGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String locationName, String serverTrustGroupName) {
        this.serviceClient().delete(resourceGroupName, locationName, serverTrustGroupName);
    }

    public void delete(String resourceGroupName, String locationName, String serverTrustGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, locationName, serverTrustGroupName, context);
    }

    public PagedIterable<ServerTrustGroup> listByLocation(String resourceGroupName, String locationName) {
        PagedIterable<ServerTrustGroupInner> inner =
            this.serviceClient().listByLocation(resourceGroupName, locationName);
        return inner.mapPage(inner1 -> new ServerTrustGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerTrustGroup> listByLocation(
        String resourceGroupName, String locationName, Context context) {
        PagedIterable<ServerTrustGroupInner> inner =
            this.serviceClient().listByLocation(resourceGroupName, locationName, context);
        return inner.mapPage(inner1 -> new ServerTrustGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerTrustGroup> listByInstance(String resourceGroupName, String managedInstanceName) {
        PagedIterable<ServerTrustGroupInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return inner.mapPage(inner1 -> new ServerTrustGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerTrustGroup> listByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<ServerTrustGroupInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return inner.mapPage(inner1 -> new ServerTrustGroupImpl(inner1, this.manager()));
    }

    public ServerTrustGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String locationName = Utils.getValueFromIdByName(id, "locations");
        if (locationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String serverTrustGroupName = Utils.getValueFromIdByName(id, "serverTrustGroups");
        if (serverTrustGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, locationName, serverTrustGroupName, Context.NONE).getValue();
    }

    public Response<ServerTrustGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String locationName = Utils.getValueFromIdByName(id, "locations");
        if (locationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String serverTrustGroupName = Utils.getValueFromIdByName(id, "serverTrustGroups");
        if (serverTrustGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, locationName, serverTrustGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String locationName = Utils.getValueFromIdByName(id, "locations");
        if (locationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String serverTrustGroupName = Utils.getValueFromIdByName(id, "serverTrustGroups");
        if (serverTrustGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustGroups'.", id)));
        }
        this.delete(resourceGroupName, locationName, serverTrustGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String locationName = Utils.getValueFromIdByName(id, "locations");
        if (locationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locations'.", id)));
        }
        String serverTrustGroupName = Utils.getValueFromIdByName(id, "serverTrustGroups");
        if (serverTrustGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustGroups'.", id)));
        }
        this.delete(resourceGroupName, locationName, serverTrustGroupName, context);
    }

    private ServerTrustGroupsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public ServerTrustGroupImpl define(String name) {
        return new ServerTrustGroupImpl(name, this.manager());
    }
}
