// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.DatabaseAutomaticTuningsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseAutomaticTuningInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseAutomaticTuning;
import com.azure.resourcemanager.sql.generated.models.DatabaseAutomaticTunings;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DatabaseAutomaticTuningsImpl implements DatabaseAutomaticTunings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatabaseAutomaticTuningsImpl.class);

    private final DatabaseAutomaticTuningsClient innerClient;

    private final SqlManager serviceManager;

    public DatabaseAutomaticTuningsImpl(DatabaseAutomaticTuningsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DatabaseAutomaticTuning get(String resourceGroupName, String serverName, String databaseName) {
        DatabaseAutomaticTuningInner inner = this.serviceClient().get(resourceGroupName, serverName, databaseName);
        if (inner != null) {
            return new DatabaseAutomaticTuningImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseAutomaticTuning> getWithResponse(
        String resourceGroupName, String serverName, String databaseName, Context context) {
        Response<DatabaseAutomaticTuningInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseAutomaticTuningImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseAutomaticTuning update(
        String resourceGroupName, String serverName, String databaseName, DatabaseAutomaticTuningInner parameters) {
        DatabaseAutomaticTuningInner inner =
            this.serviceClient().update(resourceGroupName, serverName, databaseName, parameters);
        if (inner != null) {
            return new DatabaseAutomaticTuningImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseAutomaticTuning> updateWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        DatabaseAutomaticTuningInner parameters,
        Context context) {
        Response<DatabaseAutomaticTuningInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, serverName, databaseName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseAutomaticTuningImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private DatabaseAutomaticTuningsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
