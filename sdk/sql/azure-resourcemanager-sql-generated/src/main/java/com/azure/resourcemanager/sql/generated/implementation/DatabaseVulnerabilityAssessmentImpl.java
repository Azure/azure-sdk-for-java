// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseVulnerabilityAssessmentInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessment;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentRecurringScansProperties;

public final class DatabaseVulnerabilityAssessmentImpl
    implements DatabaseVulnerabilityAssessment,
        DatabaseVulnerabilityAssessment.Definition,
        DatabaseVulnerabilityAssessment.Update {
    private DatabaseVulnerabilityAssessmentInner innerObject;

    private final SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String storageContainerPath() {
        return this.innerModel().storageContainerPath();
    }

    public String storageContainerSasKey() {
        return this.innerModel().storageContainerSasKey();
    }

    public String storageAccountAccessKey() {
        return this.innerModel().storageAccountAccessKey();
    }

    public VulnerabilityAssessmentRecurringScansProperties recurringScans() {
        return this.innerModel().recurringScans();
    }

    public DatabaseVulnerabilityAssessmentInner innerModel() {
        return this.innerObject;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serverName;

    private String databaseName;

    private VulnerabilityAssessmentName vulnerabilityAssessmentName;

    public DatabaseVulnerabilityAssessmentImpl withExistingDatabase(
        String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    public DatabaseVulnerabilityAssessment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    serverName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    this.innerModel(),
                    Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    serverName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    this.innerModel(),
                    context)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl(VulnerabilityAssessmentName name, SqlManager serviceManager) {
        this.innerObject = new DatabaseVulnerabilityAssessmentInner();
        this.serviceManager = serviceManager;
        this.vulnerabilityAssessmentName = name;
    }

    public DatabaseVulnerabilityAssessmentImpl update() {
        return this;
    }

    public DatabaseVulnerabilityAssessment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    serverName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    this.innerModel(),
                    Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    serverName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    this.innerModel(),
                    context)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl(
        DatabaseVulnerabilityAssessmentInner innerObject, SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serverName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
        this.vulnerabilityAssessmentName =
            VulnerabilityAssessmentName
                .fromString(Utils.getValueFromIdByName(innerObject.id(), "vulnerabilityAssessments"));
    }

    public DatabaseVulnerabilityAssessment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .getWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, Context.NONE)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabaseVulnerabilityAssessments()
                .getWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, context)
                .getValue();
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl withStorageContainerPath(String storageContainerPath) {
        this.innerModel().withStorageContainerPath(storageContainerPath);
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl withStorageContainerSasKey(String storageContainerSasKey) {
        this.innerModel().withStorageContainerSasKey(storageContainerSasKey);
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl withStorageAccountAccessKey(String storageAccountAccessKey) {
        this.innerModel().withStorageAccountAccessKey(storageAccountAccessKey);
        return this;
    }

    public DatabaseVulnerabilityAssessmentImpl withRecurringScans(
        VulnerabilityAssessmentRecurringScansProperties recurringScans) {
        this.innerModel().withRecurringScans(recurringScans);
        return this;
    }
}
