// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentScansClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseVulnerabilityAssessmentScansExportInner;
import com.azure.resourcemanager.sql.generated.fluent.models.VulnerabilityAssessmentScanRecordInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessmentScansExport;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessmentScans;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentScanRecord;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedDatabaseVulnerabilityAssessmentScansImpl
    implements ManagedDatabaseVulnerabilityAssessmentScans {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(ManagedDatabaseVulnerabilityAssessmentScansImpl.class);

    private final ManagedDatabaseVulnerabilityAssessmentScansClient innerClient;

    private final SqlManager serviceManager;

    public ManagedDatabaseVulnerabilityAssessmentScansImpl(
        ManagedDatabaseVulnerabilityAssessmentScansClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<VulnerabilityAssessmentScanRecord> listByDatabase(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        PagedIterable<VulnerabilityAssessmentScanRecordInner> inner =
            this
                .serviceClient()
                .listByDatabase(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName);
        return inner.mapPage(inner1 -> new VulnerabilityAssessmentScanRecordImpl(inner1, this.manager()));
    }

    public PagedIterable<VulnerabilityAssessmentScanRecord> listByDatabase(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        PagedIterable<VulnerabilityAssessmentScanRecordInner> inner =
            this
                .serviceClient()
                .listByDatabase(
                    resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, context);
        return inner.mapPage(inner1 -> new VulnerabilityAssessmentScanRecordImpl(inner1, this.manager()));
    }

    public VulnerabilityAssessmentScanRecord get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId) {
        VulnerabilityAssessmentScanRecordInner inner =
            this
                .serviceClient()
                .get(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId);
        if (inner != null) {
            return new VulnerabilityAssessmentScanRecordImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VulnerabilityAssessmentScanRecord> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId,
        Context context) {
        Response<VulnerabilityAssessmentScanRecordInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VulnerabilityAssessmentScanRecordImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void initiateScan(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId) {
        this
            .serviceClient()
            .initiateScan(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId);
    }

    public void initiateScan(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId,
        Context context) {
        this
            .serviceClient()
            .initiateScan(
                resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId, context);
    }

    public DatabaseVulnerabilityAssessmentScansExport export(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId) {
        DatabaseVulnerabilityAssessmentScansExportInner inner =
            this
                .serviceClient()
                .export(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId);
        if (inner != null) {
            return new DatabaseVulnerabilityAssessmentScansExportImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseVulnerabilityAssessmentScansExport> exportWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        String scanId,
        Context context) {
        Response<DatabaseVulnerabilityAssessmentScansExportInner> inner =
            this
                .serviceClient()
                .exportWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, scanId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseVulnerabilityAssessmentScansExportImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ManagedDatabaseVulnerabilityAssessmentScansClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
