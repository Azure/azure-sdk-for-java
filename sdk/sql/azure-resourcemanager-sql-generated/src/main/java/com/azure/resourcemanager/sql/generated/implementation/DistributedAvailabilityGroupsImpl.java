// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.DistributedAvailabilityGroupsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DistributedAvailabilityGroupInner;
import com.azure.resourcemanager.sql.generated.models.DistributedAvailabilityGroup;
import com.azure.resourcemanager.sql.generated.models.DistributedAvailabilityGroups;

public final class DistributedAvailabilityGroupsImpl implements DistributedAvailabilityGroups {
    private static final ClientLogger LOGGER = new ClientLogger(DistributedAvailabilityGroupsImpl.class);

    private final DistributedAvailabilityGroupsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public DistributedAvailabilityGroupsImpl(
        DistributedAvailabilityGroupsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DistributedAvailabilityGroup> listByInstance(
        String resourceGroupName, String managedInstanceName) {
        PagedIterable<DistributedAvailabilityGroupInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new DistributedAvailabilityGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<DistributedAvailabilityGroup> listByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<DistributedAvailabilityGroupInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new DistributedAvailabilityGroupImpl(inner1, this.manager()));
    }

    public DistributedAvailabilityGroup get(
        String resourceGroupName, String managedInstanceName, String distributedAvailabilityGroupName) {
        DistributedAvailabilityGroupInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
        if (inner != null) {
            return new DistributedAvailabilityGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DistributedAvailabilityGroup> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String distributedAvailabilityGroupName,
        Context context) {
        Response<DistributedAvailabilityGroupInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DistributedAvailabilityGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String managedInstanceName, String distributedAvailabilityGroupName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
    }

    public void delete(
        String resourceGroupName,
        String managedInstanceName,
        String distributedAvailabilityGroupName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
    }

    public DistributedAvailabilityGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "distributedAvailabilityGroups");
        if (distributedAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'distributedAvailabilityGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    public Response<DistributedAvailabilityGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "distributedAvailabilityGroups");
        if (distributedAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'distributedAvailabilityGroups'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "distributedAvailabilityGroups");
        if (distributedAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'distributedAvailabilityGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String distributedAvailabilityGroupName = Utils.getValueFromIdByName(id, "distributedAvailabilityGroups");
        if (distributedAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'distributedAvailabilityGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, managedInstanceName, distributedAvailabilityGroupName, context);
    }

    private DistributedAvailabilityGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public DistributedAvailabilityGroupImpl define(String name) {
        return new DistributedAvailabilityGroupImpl(name, this.manager());
    }
}
