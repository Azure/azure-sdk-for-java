// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerTrustCertificatesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerTrustCertificateInner;
import com.azure.resourcemanager.sql.generated.models.ServerTrustCertificate;
import com.azure.resourcemanager.sql.generated.models.ServerTrustCertificates;

public final class ServerTrustCertificatesImpl implements ServerTrustCertificates {
    private static final ClientLogger LOGGER = new ClientLogger(ServerTrustCertificatesImpl.class);

    private final ServerTrustCertificatesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerTrustCertificatesImpl(
        ServerTrustCertificatesClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServerTrustCertificate> listByInstance(String resourceGroupName, String managedInstanceName) {
        PagedIterable<ServerTrustCertificateInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ServerTrustCertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerTrustCertificate> listByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<ServerTrustCertificateInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ServerTrustCertificateImpl(inner1, this.manager()));
    }

    public ServerTrustCertificate get(String resourceGroupName, String managedInstanceName, String certificateName) {
        ServerTrustCertificateInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, certificateName);
        if (inner != null) {
            return new ServerTrustCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerTrustCertificate> getWithResponse(
        String resourceGroupName, String managedInstanceName, String certificateName, Context context) {
        Response<ServerTrustCertificateInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, managedInstanceName, certificateName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerTrustCertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String managedInstanceName, String certificateName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, certificateName);
    }

    public void delete(String resourceGroupName, String managedInstanceName, String certificateName, Context context) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, certificateName, context);
    }

    public ServerTrustCertificate getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String certificateName = Utils.getValueFromIdByName(id, "serverTrustCertificates");
        if (certificateName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustCertificates'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, certificateName, Context.NONE).getValue();
    }

    public Response<ServerTrustCertificate> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String certificateName = Utils.getValueFromIdByName(id, "serverTrustCertificates");
        if (certificateName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustCertificates'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, certificateName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String certificateName = Utils.getValueFromIdByName(id, "serverTrustCertificates");
        if (certificateName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustCertificates'.",
                                id)));
        }
        this.delete(resourceGroupName, managedInstanceName, certificateName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String certificateName = Utils.getValueFromIdByName(id, "serverTrustCertificates");
        if (certificateName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serverTrustCertificates'.",
                                id)));
        }
        this.delete(resourceGroupName, managedInstanceName, certificateName, context);
    }

    private ServerTrustCertificatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ServerTrustCertificateImpl define(String name) {
        return new ServerTrustCertificateImpl(name, this.manager());
    }
}
