// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerDnsAliasesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerDnsAliasInner;
import com.azure.resourcemanager.sql.generated.models.ServerDnsAlias;
import com.azure.resourcemanager.sql.generated.models.ServerDnsAliasAcquisition;
import com.azure.resourcemanager.sql.generated.models.ServerDnsAliases;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerDnsAliasesImpl implements ServerDnsAliases {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerDnsAliasesImpl.class);

    private final ServerDnsAliasesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerDnsAliasesImpl(
        ServerDnsAliasesClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerDnsAlias get(String resourceGroupName, String serverName, String dnsAliasName) {
        ServerDnsAliasInner inner = this.serviceClient().get(resourceGroupName, serverName, dnsAliasName);
        if (inner != null) {
            return new ServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerDnsAlias> getWithResponse(
        String resourceGroupName, String serverName, String dnsAliasName, Context context) {
        Response<ServerDnsAliasInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, dnsAliasName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerDnsAliasImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerDnsAlias createOrUpdate(String resourceGroupName, String serverName, String dnsAliasName) {
        ServerDnsAliasInner inner = this.serviceClient().createOrUpdate(resourceGroupName, serverName, dnsAliasName);
        if (inner != null) {
            return new ServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ServerDnsAlias createOrUpdate(
        String resourceGroupName, String serverName, String dnsAliasName, Context context) {
        ServerDnsAliasInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, serverName, dnsAliasName, context);
        if (inner != null) {
            return new ServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serverName, String dnsAliasName) {
        this.serviceClient().delete(resourceGroupName, serverName, dnsAliasName);
    }

    public void delete(String resourceGroupName, String serverName, String dnsAliasName, Context context) {
        this.serviceClient().delete(resourceGroupName, serverName, dnsAliasName, context);
    }

    public PagedIterable<ServerDnsAlias> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<ServerDnsAliasInner> inner = this.serviceClient().listByServer(resourceGroupName, serverName);
        return Utils.mapPage(inner, inner1 -> new ServerDnsAliasImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerDnsAlias> listByServer(String resourceGroupName, String serverName, Context context) {
        PagedIterable<ServerDnsAliasInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return Utils.mapPage(inner, inner1 -> new ServerDnsAliasImpl(inner1, this.manager()));
    }

    public ServerDnsAlias acquire(
        String resourceGroupName, String serverName, String dnsAliasName, ServerDnsAliasAcquisition parameters) {
        ServerDnsAliasInner inner =
            this.serviceClient().acquire(resourceGroupName, serverName, dnsAliasName, parameters);
        if (inner != null) {
            return new ServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ServerDnsAlias acquire(
        String resourceGroupName,
        String serverName,
        String dnsAliasName,
        ServerDnsAliasAcquisition parameters,
        Context context) {
        ServerDnsAliasInner inner =
            this.serviceClient().acquire(resourceGroupName, serverName, dnsAliasName, parameters, context);
        if (inner != null) {
            return new ServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ServerDnsAliasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }
}
