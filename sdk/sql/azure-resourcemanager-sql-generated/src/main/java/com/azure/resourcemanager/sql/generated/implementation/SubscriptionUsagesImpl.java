// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.SubscriptionUsagesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.SubscriptionUsageInner;
import com.azure.resourcemanager.sql.generated.models.SubscriptionUsage;
import com.azure.resourcemanager.sql.generated.models.SubscriptionUsages;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SubscriptionUsagesImpl implements SubscriptionUsages {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SubscriptionUsagesImpl.class);

    private final SubscriptionUsagesClient innerClient;

    private final SqlManager serviceManager;

    public SubscriptionUsagesImpl(SubscriptionUsagesClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SubscriptionUsage> listByLocation(String locationName) {
        PagedIterable<SubscriptionUsageInner> inner = this.serviceClient().listByLocation(locationName);
        return inner.mapPage(inner1 -> new SubscriptionUsageImpl(inner1, this.manager()));
    }

    public PagedIterable<SubscriptionUsage> listByLocation(String locationName, Context context) {
        PagedIterable<SubscriptionUsageInner> inner = this.serviceClient().listByLocation(locationName, context);
        return inner.mapPage(inner1 -> new SubscriptionUsageImpl(inner1, this.manager()));
    }

    public SubscriptionUsage get(String locationName, String usageName) {
        SubscriptionUsageInner inner = this.serviceClient().get(locationName, usageName);
        if (inner != null) {
            return new SubscriptionUsageImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SubscriptionUsage> getWithResponse(String locationName, String usageName, Context context) {
        Response<SubscriptionUsageInner> inner = this.serviceClient().getWithResponse(locationName, usageName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SubscriptionUsageImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private SubscriptionUsagesClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
