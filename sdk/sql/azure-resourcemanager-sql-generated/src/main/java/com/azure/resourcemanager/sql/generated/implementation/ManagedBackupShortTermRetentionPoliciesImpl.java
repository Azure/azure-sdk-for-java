// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.ManagedBackupShortTermRetentionPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedBackupShortTermRetentionPolicyInner;
import com.azure.resourcemanager.sql.generated.models.ManagedBackupShortTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.ManagedBackupShortTermRetentionPolicy;
import com.azure.resourcemanager.sql.generated.models.ManagedShortTermRetentionPolicyName;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedBackupShortTermRetentionPoliciesImpl implements ManagedBackupShortTermRetentionPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedBackupShortTermRetentionPoliciesImpl.class);

    private final ManagedBackupShortTermRetentionPoliciesClient innerClient;

    private final SqlManager serviceManager;

    public ManagedBackupShortTermRetentionPoliciesImpl(
        ManagedBackupShortTermRetentionPoliciesClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedBackupShortTermRetentionPolicy get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        ManagedShortTermRetentionPolicyName policyName) {
        ManagedBackupShortTermRetentionPolicyInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, databaseName, policyName);
        if (inner != null) {
            return new ManagedBackupShortTermRetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedBackupShortTermRetentionPolicy> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        ManagedShortTermRetentionPolicyName policyName,
        Context context) {
        Response<ManagedBackupShortTermRetentionPolicyInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedBackupShortTermRetentionPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ManagedBackupShortTermRetentionPolicy> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        PagedIterable<ManagedBackupShortTermRetentionPolicyInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName);
        return inner.mapPage(inner1 -> new ManagedBackupShortTermRetentionPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedBackupShortTermRetentionPolicy> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName, Context context) {
        PagedIterable<ManagedBackupShortTermRetentionPolicyInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName, context);
        return inner.mapPage(inner1 -> new ManagedBackupShortTermRetentionPolicyImpl(inner1, this.manager()));
    }

    public ManagedBackupShortTermRetentionPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        ManagedShortTermRetentionPolicyName policyName =
            ManagedShortTermRetentionPolicyName
                .fromString(Utils.getValueFromIdByName(id, "backupShortTermRetentionPolicies"));
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'backupShortTermRetentionPolicies'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, Context.NONE)
            .getValue();
    }

    public Response<ManagedBackupShortTermRetentionPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        ManagedShortTermRetentionPolicyName policyName =
            ManagedShortTermRetentionPolicyName
                .fromString(Utils.getValueFromIdByName(id, "backupShortTermRetentionPolicies"));
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'backupShortTermRetentionPolicies'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, context);
    }

    private ManagedBackupShortTermRetentionPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedBackupShortTermRetentionPolicyImpl define(ManagedShortTermRetentionPolicyName name) {
        return new ManagedBackupShortTermRetentionPolicyImpl(name, this.manager());
    }
}
