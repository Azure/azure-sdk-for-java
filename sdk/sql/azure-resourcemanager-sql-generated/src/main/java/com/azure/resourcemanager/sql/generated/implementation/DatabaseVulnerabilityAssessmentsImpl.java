// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.DatabaseVulnerabilityAssessmentsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseVulnerabilityAssessmentInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessment;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessments;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DatabaseVulnerabilityAssessmentsImpl implements DatabaseVulnerabilityAssessments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatabaseVulnerabilityAssessmentsImpl.class);

    private final DatabaseVulnerabilityAssessmentsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public DatabaseVulnerabilityAssessmentsImpl(
        DatabaseVulnerabilityAssessmentsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DatabaseVulnerabilityAssessment get(
        String resourceGroupName,
        String serverName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        DatabaseVulnerabilityAssessmentInner inner =
            this.serviceClient().get(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName);
        if (inner != null) {
            return new DatabaseVulnerabilityAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseVulnerabilityAssessment> getWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        Response<DatabaseVulnerabilityAssessmentInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseVulnerabilityAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String serverName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        this.serviceClient().delete(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String serverName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, context);
    }

    public PagedIterable<DatabaseVulnerabilityAssessment> listByDatabase(
        String resourceGroupName, String serverName, String databaseName) {
        PagedIterable<DatabaseVulnerabilityAssessmentInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, serverName, databaseName);
        return Utils.mapPage(inner, inner1 -> new DatabaseVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseVulnerabilityAssessment> listByDatabase(
        String resourceGroupName, String serverName, String databaseName, Context context) {
        PagedIterable<DatabaseVulnerabilityAssessmentInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, serverName, databaseName, context);
        return Utils.mapPage(inner, inner1 -> new DatabaseVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public DatabaseVulnerabilityAssessment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, Context.NONE)
            .getValue();
    }

    public Response<DatabaseVulnerabilityAssessment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        this
            .deleteWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        VulnerabilityAssessmentName vulnerabilityAssessmentName =
            VulnerabilityAssessmentName.fromString(Utils.getValueFromIdByName(id, "vulnerabilityAssessments"));
        if (vulnerabilityAssessmentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vulnerabilityAssessments'.",
                                id)));
        }
        return this
            .deleteWithResponse(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, context);
    }

    private DatabaseVulnerabilityAssessmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public DatabaseVulnerabilityAssessmentImpl define(VulnerabilityAssessmentName name) {
        return new DatabaseVulnerabilityAssessmentImpl(name, this.manager());
    }
}
