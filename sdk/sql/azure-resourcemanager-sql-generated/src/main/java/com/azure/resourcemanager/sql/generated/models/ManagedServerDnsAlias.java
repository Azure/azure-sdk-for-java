// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedServerDnsAliasInner;

/** An immutable client-side representation of ManagedServerDnsAlias. */
public interface ManagedServerDnsAlias {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the azureDnsRecord property: The fully qualified DNS record for managed server alias.
     *
     * @return the azureDnsRecord value.
     */
    String azureDnsRecord();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.ManagedServerDnsAliasInner object.
     *
     * @return the inner object.
     */
    ManagedServerDnsAliasInner innerModel();

    /** The entirety of the ManagedServerDnsAlias definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ManagedServerDnsAlias definition stages. */
    interface DefinitionStages {
        /** The first stage of the ManagedServerDnsAlias definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ManagedServerDnsAlias definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, managedInstanceName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param managedInstanceName The name of the managed instance.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedInstance(String resourceGroupName, String managedInstanceName);
        }
        /**
         * The stage of the ManagedServerDnsAlias definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithCreateDnsRecord {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ManagedServerDnsAlias create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedServerDnsAlias create(Context context);
        }
        /** The stage of the ManagedServerDnsAlias definition allowing to specify createDnsRecord. */
        interface WithCreateDnsRecord {
            /**
             * Specifies the createDnsRecord property: Whether or not DNS record should be created for this alias..
             *
             * @param createDnsRecord Whether or not DNS record should be created for this alias.
             * @return the next definition stage.
             */
            WithCreate withCreateDnsRecord(Boolean createDnsRecord);
        }
    }
    /**
     * Begins update for the ManagedServerDnsAlias resource.
     *
     * @return the stage of resource update.
     */
    ManagedServerDnsAlias.Update update();

    /** The template for ManagedServerDnsAlias update. */
    interface Update extends UpdateStages.WithCreateDnsRecord {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ManagedServerDnsAlias apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedServerDnsAlias apply(Context context);
    }
    /** The ManagedServerDnsAlias update stages. */
    interface UpdateStages {
        /** The stage of the ManagedServerDnsAlias update allowing to specify createDnsRecord. */
        interface WithCreateDnsRecord {
            /**
             * Specifies the createDnsRecord property: Whether or not DNS record should be created for this alias..
             *
             * @param createDnsRecord Whether or not DNS record should be created for this alias.
             * @return the next definition stage.
             */
            Update withCreateDnsRecord(Boolean createDnsRecord);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ManagedServerDnsAlias refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedServerDnsAlias refresh(Context context);

    /**
     * Acquires managed server DNS alias from another managed server.
     *
     * @param parameters A managed server DNS alias acquisition request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a managed server DNS alias.
     */
    ManagedServerDnsAlias acquire(ManagedServerDnsAliasAcquisition parameters);

    /**
     * Acquires managed server DNS alias from another managed server.
     *
     * @param parameters A managed server DNS alias acquisition request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a managed server DNS alias.
     */
    ManagedServerDnsAlias acquire(ManagedServerDnsAliasAcquisition parameters, Context context);
}
