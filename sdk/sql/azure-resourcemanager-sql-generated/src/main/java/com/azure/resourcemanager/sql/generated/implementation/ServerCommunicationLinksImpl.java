// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerCommunicationLinksClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerCommunicationLinkInner;
import com.azure.resourcemanager.sql.generated.models.ServerCommunicationLink;
import com.azure.resourcemanager.sql.generated.models.ServerCommunicationLinks;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerCommunicationLinksImpl implements ServerCommunicationLinks {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerCommunicationLinksImpl.class);

    private final ServerCommunicationLinksClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerCommunicationLinksImpl(
        ServerCommunicationLinksClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String serverName, String communicationLinkName) {
        this.serviceClient().delete(resourceGroupName, serverName, communicationLinkName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String serverName, String communicationLinkName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, serverName, communicationLinkName, context);
    }

    public ServerCommunicationLink get(String resourceGroupName, String serverName, String communicationLinkName) {
        ServerCommunicationLinkInner inner =
            this.serviceClient().get(resourceGroupName, serverName, communicationLinkName);
        if (inner != null) {
            return new ServerCommunicationLinkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerCommunicationLink> getWithResponse(
        String resourceGroupName, String serverName, String communicationLinkName, Context context) {
        Response<ServerCommunicationLinkInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, communicationLinkName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerCommunicationLinkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ServerCommunicationLink> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<ServerCommunicationLinkInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName);
        return Utils.mapPage(inner, inner1 -> new ServerCommunicationLinkImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerCommunicationLink> listByServer(
        String resourceGroupName, String serverName, Context context) {
        PagedIterable<ServerCommunicationLinkInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return Utils.mapPage(inner, inner1 -> new ServerCommunicationLinkImpl(inner1, this.manager()));
    }

    public ServerCommunicationLink getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String communicationLinkName = Utils.getValueFromIdByName(id, "communicationLinks");
        if (communicationLinkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'communicationLinks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, communicationLinkName, Context.NONE).getValue();
    }

    public Response<ServerCommunicationLink> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String communicationLinkName = Utils.getValueFromIdByName(id, "communicationLinks");
        if (communicationLinkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'communicationLinks'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, communicationLinkName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String communicationLinkName = Utils.getValueFromIdByName(id, "communicationLinks");
        if (communicationLinkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'communicationLinks'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, serverName, communicationLinkName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String communicationLinkName = Utils.getValueFromIdByName(id, "communicationLinks");
        if (communicationLinkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'communicationLinks'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, serverName, communicationLinkName, context);
    }

    private ServerCommunicationLinksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ServerCommunicationLinkImpl define(String name) {
        return new ServerCommunicationLinkImpl(name, this.manager());
    }
}
