// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerAzureADAdministratorsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ServerAzureADAdministratorInner;
import com.azure.resourcemanager.sql.generated.models.AdministratorName;
import com.azure.resourcemanager.sql.generated.models.ServerAzureADAdministrator;
import com.azure.resourcemanager.sql.generated.models.ServerAzureADAdministrators;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerAzureADAdministratorsImpl implements ServerAzureADAdministrators {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerAzureADAdministratorsImpl.class);

    private final ServerAzureADAdministratorsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerAzureADAdministratorsImpl(
        ServerAzureADAdministratorsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerAzureADAdministrator get(
        String resourceGroupName, String serverName, AdministratorName administratorName) {
        ServerAzureADAdministratorInner inner =
            this.serviceClient().get(resourceGroupName, serverName, administratorName);
        if (inner != null) {
            return new ServerAzureADAdministratorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerAzureADAdministrator> getWithResponse(
        String resourceGroupName, String serverName, AdministratorName administratorName, Context context) {
        Response<ServerAzureADAdministratorInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, administratorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerAzureADAdministratorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serverName, AdministratorName administratorName) {
        this.serviceClient().delete(resourceGroupName, serverName, administratorName);
    }

    public void delete(
        String resourceGroupName, String serverName, AdministratorName administratorName, Context context) {
        this.serviceClient().delete(resourceGroupName, serverName, administratorName, context);
    }

    public PagedIterable<ServerAzureADAdministrator> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<ServerAzureADAdministratorInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName);
        return Utils.mapPage(inner, inner1 -> new ServerAzureADAdministratorImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerAzureADAdministrator> listByServer(
        String resourceGroupName, String serverName, Context context) {
        PagedIterable<ServerAzureADAdministratorInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return Utils.mapPage(inner, inner1 -> new ServerAzureADAdministratorImpl(inner1, this.manager()));
    }

    public ServerAzureADAdministrator getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        AdministratorName administratorName =
            AdministratorName.fromString(Utils.getValueFromIdByName(id, "administrators"));
        if (administratorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'administrators'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, administratorName, Context.NONE).getValue();
    }

    public Response<ServerAzureADAdministrator> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        AdministratorName administratorName =
            AdministratorName.fromString(Utils.getValueFromIdByName(id, "administrators"));
        if (administratorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'administrators'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, administratorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        AdministratorName administratorName =
            AdministratorName.fromString(Utils.getValueFromIdByName(id, "administrators"));
        if (administratorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'administrators'.", id)));
        }
        this.delete(resourceGroupName, serverName, administratorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        AdministratorName administratorName =
            AdministratorName.fromString(Utils.getValueFromIdByName(id, "administrators"));
        if (administratorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'administrators'.", id)));
        }
        this.delete(resourceGroupName, serverName, administratorName, context);
    }

    private ServerAzureADAdministratorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ServerAzureADAdministratorImpl define(AdministratorName name) {
        return new ServerAzureADAdministratorImpl(name, this.manager());
    }
}
