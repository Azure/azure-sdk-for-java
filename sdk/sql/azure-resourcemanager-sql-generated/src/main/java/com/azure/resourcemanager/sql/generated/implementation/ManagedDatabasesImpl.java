// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabasesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedDatabaseInner;
import com.azure.resourcemanager.sql.generated.models.CompleteDatabaseRestoreDefinition;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabase;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabases;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedDatabasesImpl implements ManagedDatabases {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedDatabasesImpl.class);

    private final ManagedDatabasesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedDatabasesImpl(
        ManagedDatabasesClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedDatabase> listByInstance(String resourceGroupName, String managedInstanceName) {
        PagedIterable<ManagedDatabaseInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ManagedDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedDatabase> listByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<ManagedDatabaseInner> inner =
            this.serviceClient().listByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedDatabaseImpl(inner1, this.manager()));
    }

    public ManagedDatabase get(String resourceGroupName, String managedInstanceName, String databaseName) {
        ManagedDatabaseInner inner = this.serviceClient().get(resourceGroupName, managedInstanceName, databaseName);
        if (inner != null) {
            return new ManagedDatabaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedDatabase> getWithResponse(
        String resourceGroupName, String managedInstanceName, String databaseName, Context context) {
        Response<ManagedDatabaseInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, managedInstanceName, databaseName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedDatabaseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String managedInstanceName, String databaseName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, databaseName);
    }

    public void delete(String resourceGroupName, String managedInstanceName, String databaseName, Context context) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, databaseName, context);
    }

    public void completeRestore(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        CompleteDatabaseRestoreDefinition parameters) {
        this.serviceClient().completeRestore(resourceGroupName, managedInstanceName, databaseName, parameters);
    }

    public void completeRestore(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        CompleteDatabaseRestoreDefinition parameters,
        Context context) {
        this.serviceClient().completeRestore(resourceGroupName, managedInstanceName, databaseName, parameters, context);
    }

    public PagedIterable<ManagedDatabase> listInaccessibleByInstance(
        String resourceGroupName, String managedInstanceName) {
        PagedIterable<ManagedDatabaseInner> inner =
            this.serviceClient().listInaccessibleByInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ManagedDatabaseImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedDatabase> listInaccessibleByInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<ManagedDatabaseInner> inner =
            this.serviceClient().listInaccessibleByInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedDatabaseImpl(inner1, this.manager()));
    }

    public ManagedDatabase getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, databaseName, Context.NONE).getValue();
    }

    public Response<ManagedDatabase> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, databaseName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, managedInstanceName, databaseName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        this.delete(resourceGroupName, managedInstanceName, databaseName, context);
    }

    private ManagedDatabasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedDatabaseImpl define(String name) {
        return new ManagedDatabaseImpl(name, this.manager());
    }
}
