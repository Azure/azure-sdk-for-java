// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.JobStepsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.JobStepInner;
import com.azure.resourcemanager.sql.generated.models.JobStep;
import com.azure.resourcemanager.sql.generated.models.JobSteps;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class JobStepsImpl implements JobSteps {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobStepsImpl.class);

    private final JobStepsClient innerClient;

    private final SqlManager serviceManager;

    public JobStepsImpl(JobStepsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<JobStep> listByVersion(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, int jobVersion) {
        PagedIterable<JobStepInner> inner =
            this.serviceClient().listByVersion(resourceGroupName, serverName, jobAgentName, jobName, jobVersion);
        return inner.mapPage(inner1 -> new JobStepImpl(inner1, this.manager()));
    }

    public PagedIterable<JobStep> listByVersion(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        int jobVersion,
        Context context) {
        PagedIterable<JobStepInner> inner =
            this
                .serviceClient()
                .listByVersion(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, context);
        return inner.mapPage(inner1 -> new JobStepImpl(inner1, this.manager()));
    }

    public JobStep getByVersion(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        int jobVersion,
        String stepName) {
        JobStepInner inner =
            this
                .serviceClient()
                .getByVersion(resourceGroupName, serverName, jobAgentName, jobName, jobVersion, stepName);
        if (inner != null) {
            return new JobStepImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<JobStep> getByVersionWithResponse(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        int jobVersion,
        String stepName,
        Context context) {
        Response<JobStepInner> inner =
            this
                .serviceClient()
                .getByVersionWithResponse(
                    resourceGroupName, serverName, jobAgentName, jobName, jobVersion, stepName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobStepImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<JobStep> listByJob(
        String resourceGroupName, String serverName, String jobAgentName, String jobName) {
        PagedIterable<JobStepInner> inner =
            this.serviceClient().listByJob(resourceGroupName, serverName, jobAgentName, jobName);
        return inner.mapPage(inner1 -> new JobStepImpl(inner1, this.manager()));
    }

    public PagedIterable<JobStep> listByJob(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, Context context) {
        PagedIterable<JobStepInner> inner =
            this.serviceClient().listByJob(resourceGroupName, serverName, jobAgentName, jobName, context);
        return inner.mapPage(inner1 -> new JobStepImpl(inner1, this.manager()));
    }

    public JobStep get(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, String stepName) {
        JobStepInner inner = this.serviceClient().get(resourceGroupName, serverName, jobAgentName, jobName, stepName);
        if (inner != null) {
            return new JobStepImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<JobStep> getWithResponse(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        String stepName,
        Context context) {
        Response<JobStepInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobStepImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, String stepName) {
        this.serviceClient().delete(resourceGroupName, serverName, jobAgentName, jobName, stepName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        String stepName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, context);
    }

    public JobStep getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        String stepName = Utils.getValueFromIdByName(id, "steps");
        if (stepName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'steps'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, Context.NONE)
            .getValue();
    }

    public Response<JobStep> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        String stepName = Utils.getValueFromIdByName(id, "steps");
        if (stepName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'steps'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        String stepName = Utils.getValueFromIdByName(id, "steps");
        if (stepName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'steps'.", id)));
        }
        this
            .deleteWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String jobAgentName = Utils.getValueFromIdByName(id, "jobAgents");
        if (jobAgentName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobAgents'.", id)));
        }
        String jobName = Utils.getValueFromIdByName(id, "jobs");
        if (jobName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'jobs'.", id)));
        }
        String stepName = Utils.getValueFromIdByName(id, "steps");
        if (stepName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'steps'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, serverName, jobAgentName, jobName, stepName, context);
    }

    private JobStepsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public JobStepImpl define(String name) {
        return new JobStepImpl(name, this.manager());
    }
}
