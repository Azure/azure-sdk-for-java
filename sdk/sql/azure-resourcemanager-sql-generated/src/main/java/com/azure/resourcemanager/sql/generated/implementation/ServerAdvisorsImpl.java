// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ServerAdvisorsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.AdvisorInner;
import com.azure.resourcemanager.sql.generated.models.Advisor;
import com.azure.resourcemanager.sql.generated.models.ServerAdvisors;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class ServerAdvisorsImpl implements ServerAdvisors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerAdvisorsImpl.class);

    private final ServerAdvisorsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ServerAdvisorsImpl(
        ServerAdvisorsClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public List<Advisor> listByServer(String resourceGroupName, String serverName) {
        List<AdvisorInner> inner = this.serviceClient().listByServer(resourceGroupName, serverName);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new AdvisorImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<Advisor>> listByServerWithResponse(
        String resourceGroupName, String serverName, String expand, Context context) {
        Response<List<AdvisorInner>> inner =
            this.serviceClient().listByServerWithResponse(resourceGroupName, serverName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new AdvisorImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public Advisor get(String resourceGroupName, String serverName, String advisorName) {
        AdvisorInner inner = this.serviceClient().get(resourceGroupName, serverName, advisorName);
        if (inner != null) {
            return new AdvisorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Advisor> getWithResponse(
        String resourceGroupName, String serverName, String advisorName, Context context) {
        Response<AdvisorInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, advisorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Advisor update(String resourceGroupName, String serverName, String advisorName, AdvisorInner parameters) {
        AdvisorInner inner = this.serviceClient().update(resourceGroupName, serverName, advisorName, parameters);
        if (inner != null) {
            return new AdvisorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Advisor> updateWithResponse(
        String resourceGroupName, String serverName, String advisorName, AdvisorInner parameters, Context context) {
        Response<AdvisorInner> inner =
            this.serviceClient().updateWithResponse(resourceGroupName, serverName, advisorName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AdvisorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ServerAdvisorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }
}
