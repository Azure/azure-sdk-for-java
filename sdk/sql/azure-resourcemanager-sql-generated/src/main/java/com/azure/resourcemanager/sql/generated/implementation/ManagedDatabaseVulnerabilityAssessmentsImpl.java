// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseVulnerabilityAssessmentsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseVulnerabilityAssessmentInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseVulnerabilityAssessment;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseVulnerabilityAssessments;
import com.azure.resourcemanager.sql.generated.models.VulnerabilityAssessmentName;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedDatabaseVulnerabilityAssessmentsImpl implements ManagedDatabaseVulnerabilityAssessments {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedDatabaseVulnerabilityAssessmentsImpl.class);

    private final ManagedDatabaseVulnerabilityAssessmentsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedDatabaseVulnerabilityAssessmentsImpl(
        ManagedDatabaseVulnerabilityAssessmentsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DatabaseVulnerabilityAssessment get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        DatabaseVulnerabilityAssessmentInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName);
        if (inner != null) {
            return new DatabaseVulnerabilityAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseVulnerabilityAssessment> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        Response<DatabaseVulnerabilityAssessmentInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseVulnerabilityAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseVulnerabilityAssessment createOrUpdate(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        DatabaseVulnerabilityAssessmentInner parameters) {
        DatabaseVulnerabilityAssessmentInner inner =
            this
                .serviceClient()
                .createOrUpdate(
                    resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, parameters);
        if (inner != null) {
            return new DatabaseVulnerabilityAssessmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseVulnerabilityAssessment> createOrUpdateWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        DatabaseVulnerabilityAssessmentInner parameters,
        Context context) {
        Response<DatabaseVulnerabilityAssessmentInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    vulnerabilityAssessmentName,
                    parameters,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DatabaseVulnerabilityAssessmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        VulnerabilityAssessmentName vulnerabilityAssessmentName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, context);
    }

    public PagedIterable<DatabaseVulnerabilityAssessment> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        PagedIterable<DatabaseVulnerabilityAssessmentInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName);
        return Utils.mapPage(inner, inner1 -> new DatabaseVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseVulnerabilityAssessment> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName, Context context) {
        PagedIterable<DatabaseVulnerabilityAssessmentInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName, context);
        return Utils.mapPage(inner, inner1 -> new DatabaseVulnerabilityAssessmentImpl(inner1, this.manager()));
    }

    private ManagedDatabaseVulnerabilityAssessmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }
}
