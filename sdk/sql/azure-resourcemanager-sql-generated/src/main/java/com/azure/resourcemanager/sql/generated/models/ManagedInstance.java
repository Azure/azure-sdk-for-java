// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of ManagedInstance. */
public interface ManagedInstance {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: The Azure Active Directory identity of the managed instance.
     *
     * @return the identity value.
     */
    ResourceIdentity identity();

    /**
     * Gets the sku property: Managed instance SKU. Allowed values for sku.name: GP_Gen4, GP_Gen5, BC_Gen4, BC_Gen5.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the provisioningState property: The provisioningState property.
     *
     * @return the provisioningState value.
     */
    ManagedInstancePropertiesProvisioningState provisioningState();

    /**
     * Gets the managedInstanceCreateMode property: Specifies the mode of database creation.
     *
     * <p>Default: Regular instance creation.
     *
     * <p>Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and
     * SourceManagedInstanceId must be specified.
     *
     * @return the managedInstanceCreateMode value.
     */
    ManagedServerCreateMode managedInstanceCreateMode();

    /**
     * Gets the fullyQualifiedDomainName property: The fully qualified domain name of the managed instance.
     *
     * @return the fullyQualifiedDomainName value.
     */
    String fullyQualifiedDomainName();

    /**
     * Gets the administratorLogin property: Administrator username for the managed instance. Can only be specified when
     * the managed instance is being created (and is required for creation).
     *
     * @return the administratorLogin value.
     */
    String administratorLogin();

    /**
     * Gets the administratorLoginPassword property: The administrator login password (required for managed instance
     * creation).
     *
     * @return the administratorLoginPassword value.
     */
    String administratorLoginPassword();

    /**
     * Gets the subnetId property: Subnet resource ID for the managed instance.
     *
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the state property: The state of the managed instance.
     *
     * @return the state value.
     */
    String state();

    /**
     * Gets the licenseType property: The license type. Possible values are 'LicenseIncluded' (regular price inclusive
     * of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
     *
     * @return the licenseType value.
     */
    ManagedInstanceLicenseType licenseType();

    /**
     * Gets the vCores property: The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
     *
     * @return the vCores value.
     */
    Integer vCores();

    /**
     * Gets the storageSizeInGB property: Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32
     * GB allowed only.
     *
     * @return the storageSizeInGB value.
     */
    Integer storageSizeInGB();

    /**
     * Gets the collation property: Collation of the managed instance.
     *
     * @return the collation value.
     */
    String collation();

    /**
     * Gets the dnsZone property: The Dns Zone that the managed instance is in.
     *
     * @return the dnsZone value.
     */
    String dnsZone();

    /**
     * Gets the dnsZonePartner property: The resource id of another managed instance whose DNS zone this managed
     * instance will share after creation.
     *
     * @return the dnsZonePartner value.
     */
    String dnsZonePartner();

    /**
     * Gets the publicDataEndpointEnabled property: Whether or not the public data endpoint is enabled.
     *
     * @return the publicDataEndpointEnabled value.
     */
    Boolean publicDataEndpointEnabled();

    /**
     * Gets the sourceManagedInstanceId property: The resource identifier of the source managed instance associated with
     * create operation of this instance.
     *
     * @return the sourceManagedInstanceId value.
     */
    String sourceManagedInstanceId();

    /**
     * Gets the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source database that
     * will be restored to create the new database.
     *
     * @return the restorePointInTime value.
     */
    OffsetDateTime restorePointInTime();

    /**
     * Gets the proxyOverride property: Connection type used for connecting to the instance.
     *
     * @return the proxyOverride value.
     */
    ManagedInstanceProxyOverride proxyOverride();

    /**
     * Gets the timezoneId property: Id of the timezone. Allowed values are timezones supported by Windows. Windows
     * keeps details on supported timezones, including the id, in registry under
     * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. You can get those registry values via
     * SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info. List of Ids can also be obtained by
     * executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. An example of valid timezone id is "Pacific
     * Standard Time" or "W. Europe Standard Time".
     *
     * @return the timezoneId value.
     */
    String timezoneId();

    /**
     * Gets the instancePoolId property: The Id of the instance pool this managed server belongs to.
     *
     * @return the instancePoolId value.
     */
    String instancePoolId();

    /**
     * Gets the maintenanceConfigurationId property: Specifies maintenance configuration id to apply to this managed
     * instance.
     *
     * @return the maintenanceConfigurationId value.
     */
    String maintenanceConfigurationId();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connections on a managed instance.
     *
     * @return the privateEndpointConnections value.
     */
    List<ManagedInstancePecProperty> privateEndpointConnections();

    /**
     * Gets the minimalTlsVersion property: Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'.
     *
     * @return the minimalTlsVersion value.
     */
    String minimalTlsVersion();

    /**
     * Gets the storageAccountType property: The storage account type used to store backups for this instance. The
     * options are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS (GeoRedundantStorage).
     *
     * @return the storageAccountType value.
     */
    StorageAccountType storageAccountType();

    /**
     * Gets the zoneRedundant property: Whether or not the multi-az is enabled.
     *
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * Gets the primaryUserAssignedIdentityId property: The resource id of a user assigned identity to be used by
     * default.
     *
     * @return the primaryUserAssignedIdentityId value.
     */
    String primaryUserAssignedIdentityId();

    /**
     * Gets the keyId property: A CMK URI of the key to use for encryption.
     *
     * @return the keyId value.
     */
    String keyId();

    /**
     * Gets the administrators property: The Azure Active Directory administrator of the server.
     *
     * @return the administrators value.
     */
    ManagedInstanceExternalAdministrator administrators();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceInner object.
     *
     * @return the inner object.
     */
    ManagedInstanceInner innerModel();

    /** The entirety of the ManagedInstance definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The ManagedInstance definition stages. */
    interface DefinitionStages {
        /** The first stage of the ManagedInstance definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ManagedInstance definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ManagedInstance definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the ManagedInstance definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithSku,
                DefinitionStages.WithManagedInstanceCreateMode,
                DefinitionStages.WithAdministratorLogin,
                DefinitionStages.WithAdministratorLoginPassword,
                DefinitionStages.WithSubnetId,
                DefinitionStages.WithLicenseType,
                DefinitionStages.WithVCores,
                DefinitionStages.WithStorageSizeInGB,
                DefinitionStages.WithCollation,
                DefinitionStages.WithDnsZonePartner,
                DefinitionStages.WithPublicDataEndpointEnabled,
                DefinitionStages.WithSourceManagedInstanceId,
                DefinitionStages.WithRestorePointInTime,
                DefinitionStages.WithProxyOverride,
                DefinitionStages.WithTimezoneId,
                DefinitionStages.WithInstancePoolId,
                DefinitionStages.WithMaintenanceConfigurationId,
                DefinitionStages.WithMinimalTlsVersion,
                DefinitionStages.WithStorageAccountType,
                DefinitionStages.WithZoneRedundant,
                DefinitionStages.WithPrimaryUserAssignedIdentityId,
                DefinitionStages.WithKeyId,
                DefinitionStages.WithAdministrators {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ManagedInstance create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedInstance create(Context context);
        }
        /** The stage of the ManagedInstance definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ManagedInstance definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The Azure Active Directory identity of the managed instance..
             *
             * @param identity The Azure Active Directory identity of the managed instance.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ResourceIdentity identity);
        }
        /** The stage of the ManagedInstance definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Managed instance SKU. Allowed values for sku.name: GP_Gen4, GP_Gen5, BC_Gen4,
             * BC_Gen5.
             *
             * @param sku Managed instance SKU. Allowed values for sku.name: GP_Gen4, GP_Gen5, BC_Gen4, BC_Gen5.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /** The stage of the ManagedInstance definition allowing to specify managedInstanceCreateMode. */
        interface WithManagedInstanceCreateMode {
            /**
             * Specifies the managedInstanceCreateMode property: Specifies the mode of database creation.
             *
             * <p>Default: Regular instance creation.
             *
             * <p>Restore: Creates an instance by restoring a set of backups to specific point in time.
             * RestorePointInTime and SourceManagedInstanceId must be specified..
             *
             * @param managedInstanceCreateMode Specifies the mode of database creation.
             *     <p>Default: Regular instance creation.
             *     <p>Restore: Creates an instance by restoring a set of backups to specific point in time.
             *     RestorePointInTime and SourceManagedInstanceId must be specified.
             * @return the next definition stage.
             */
            WithCreate withManagedInstanceCreateMode(ManagedServerCreateMode managedInstanceCreateMode);
        }
        /** The stage of the ManagedInstance definition allowing to specify administratorLogin. */
        interface WithAdministratorLogin {
            /**
             * Specifies the administratorLogin property: Administrator username for the managed instance. Can only be
             * specified when the managed instance is being created (and is required for creation)..
             *
             * @param administratorLogin Administrator username for the managed instance. Can only be specified when the
             *     managed instance is being created (and is required for creation).
             * @return the next definition stage.
             */
            WithCreate withAdministratorLogin(String administratorLogin);
        }
        /** The stage of the ManagedInstance definition allowing to specify administratorLoginPassword. */
        interface WithAdministratorLoginPassword {
            /**
             * Specifies the administratorLoginPassword property: The administrator login password (required for managed
             * instance creation)..
             *
             * @param administratorLoginPassword The administrator login password (required for managed instance
             *     creation).
             * @return the next definition stage.
             */
            WithCreate withAdministratorLoginPassword(String administratorLoginPassword);
        }
        /** The stage of the ManagedInstance definition allowing to specify subnetId. */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: Subnet resource ID for the managed instance..
             *
             * @param subnetId Subnet resource ID for the managed instance.
             * @return the next definition stage.
             */
            WithCreate withSubnetId(String subnetId);
        }
        /** The stage of the ManagedInstance definition allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: The license type. Possible values are 'LicenseIncluded' (regular
             * price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL
             * licenses)..
             *
             * @param licenseType The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a
             *     new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
             * @return the next definition stage.
             */
            WithCreate withLicenseType(ManagedInstanceLicenseType licenseType);
        }
        /** The stage of the ManagedInstance definition allowing to specify vCores. */
        interface WithVCores {
            /**
             * Specifies the vCores property: The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80..
             *
             * @param vCores The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
             * @return the next definition stage.
             */
            WithCreate withVCores(Integer vCores);
        }
        /** The stage of the ManagedInstance definition allowing to specify storageSizeInGB. */
        interface WithStorageSizeInGB {
            /**
             * Specifies the storageSizeInGB property: Storage size in GB. Minimum value: 32. Maximum value: 8192.
             * Increments of 32 GB allowed only..
             *
             * @param storageSizeInGB Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB
             *     allowed only.
             * @return the next definition stage.
             */
            WithCreate withStorageSizeInGB(Integer storageSizeInGB);
        }
        /** The stage of the ManagedInstance definition allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: Collation of the managed instance..
             *
             * @param collation Collation of the managed instance.
             * @return the next definition stage.
             */
            WithCreate withCollation(String collation);
        }
        /** The stage of the ManagedInstance definition allowing to specify dnsZonePartner. */
        interface WithDnsZonePartner {
            /**
             * Specifies the dnsZonePartner property: The resource id of another managed instance whose DNS zone this
             * managed instance will share after creation..
             *
             * @param dnsZonePartner The resource id of another managed instance whose DNS zone this managed instance
             *     will share after creation.
             * @return the next definition stage.
             */
            WithCreate withDnsZonePartner(String dnsZonePartner);
        }
        /** The stage of the ManagedInstance definition allowing to specify publicDataEndpointEnabled. */
        interface WithPublicDataEndpointEnabled {
            /**
             * Specifies the publicDataEndpointEnabled property: Whether or not the public data endpoint is enabled..
             *
             * @param publicDataEndpointEnabled Whether or not the public data endpoint is enabled.
             * @return the next definition stage.
             */
            WithCreate withPublicDataEndpointEnabled(Boolean publicDataEndpointEnabled);
        }
        /** The stage of the ManagedInstance definition allowing to specify sourceManagedInstanceId. */
        interface WithSourceManagedInstanceId {
            /**
             * Specifies the sourceManagedInstanceId property: The resource identifier of the source managed instance
             * associated with create operation of this instance..
             *
             * @param sourceManagedInstanceId The resource identifier of the source managed instance associated with
             *     create operation of this instance.
             * @return the next definition stage.
             */
            WithCreate withSourceManagedInstanceId(String sourceManagedInstanceId);
        }
        /** The stage of the ManagedInstance definition allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source
             * database that will be restored to create the new database..
             *
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will
             *     be restored to create the new database.
             * @return the next definition stage.
             */
            WithCreate withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the ManagedInstance definition allowing to specify proxyOverride. */
        interface WithProxyOverride {
            /**
             * Specifies the proxyOverride property: Connection type used for connecting to the instance..
             *
             * @param proxyOverride Connection type used for connecting to the instance.
             * @return the next definition stage.
             */
            WithCreate withProxyOverride(ManagedInstanceProxyOverride proxyOverride);
        }
        /** The stage of the ManagedInstance definition allowing to specify timezoneId. */
        interface WithTimezoneId {
            /**
             * Specifies the timezoneId property: Id of the timezone. Allowed values are timezones supported by Windows.
             * Windows keeps details on supported timezones, including the id, in registry under
             * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. You can get those registry
             * values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info. List of Ids can
             * also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. An example of
             * valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time"..
             *
             * @param timezoneId Id of the timezone. Allowed values are timezones supported by Windows. Windows keeps
             *     details on supported timezones, including the id, in registry under
             *     KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. You can get those registry
             *     values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info. List of Ids can
             *     also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. An example
             *     of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
             * @return the next definition stage.
             */
            WithCreate withTimezoneId(String timezoneId);
        }
        /** The stage of the ManagedInstance definition allowing to specify instancePoolId. */
        interface WithInstancePoolId {
            /**
             * Specifies the instancePoolId property: The Id of the instance pool this managed server belongs to..
             *
             * @param instancePoolId The Id of the instance pool this managed server belongs to.
             * @return the next definition stage.
             */
            WithCreate withInstancePoolId(String instancePoolId);
        }
        /** The stage of the ManagedInstance definition allowing to specify maintenanceConfigurationId. */
        interface WithMaintenanceConfigurationId {
            /**
             * Specifies the maintenanceConfigurationId property: Specifies maintenance configuration id to apply to
             * this managed instance..
             *
             * @param maintenanceConfigurationId Specifies maintenance configuration id to apply to this managed
             *     instance.
             * @return the next definition stage.
             */
            WithCreate withMaintenanceConfigurationId(String maintenanceConfigurationId);
        }
        /** The stage of the ManagedInstance definition allowing to specify minimalTlsVersion. */
        interface WithMinimalTlsVersion {
            /**
             * Specifies the minimalTlsVersion property: Minimal TLS version. Allowed values: 'None', '1.0', '1.1',
             * '1.2'.
             *
             * @param minimalTlsVersion Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'.
             * @return the next definition stage.
             */
            WithCreate withMinimalTlsVersion(String minimalTlsVersion);
        }
        /** The stage of the ManagedInstance definition allowing to specify storageAccountType. */
        interface WithStorageAccountType {
            /**
             * Specifies the storageAccountType property: The storage account type used to store backups for this
             * instance. The options are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS
             * (GeoRedundantStorage).
             *
             * @param storageAccountType The storage account type used to store backups for this instance. The options
             *     are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS (GeoRedundantStorage).
             * @return the next definition stage.
             */
            WithCreate withStorageAccountType(StorageAccountType storageAccountType);
        }
        /** The stage of the ManagedInstance definition allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not the multi-az is enabled..
             *
             * @param zoneRedundant Whether or not the multi-az is enabled.
             * @return the next definition stage.
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }
        /** The stage of the ManagedInstance definition allowing to specify primaryUserAssignedIdentityId. */
        interface WithPrimaryUserAssignedIdentityId {
            /**
             * Specifies the primaryUserAssignedIdentityId property: The resource id of a user assigned identity to be
             * used by default..
             *
             * @param primaryUserAssignedIdentityId The resource id of a user assigned identity to be used by default.
             * @return the next definition stage.
             */
            WithCreate withPrimaryUserAssignedIdentityId(String primaryUserAssignedIdentityId);
        }
        /** The stage of the ManagedInstance definition allowing to specify keyId. */
        interface WithKeyId {
            /**
             * Specifies the keyId property: A CMK URI of the key to use for encryption..
             *
             * @param keyId A CMK URI of the key to use for encryption.
             * @return the next definition stage.
             */
            WithCreate withKeyId(String keyId);
        }
        /** The stage of the ManagedInstance definition allowing to specify administrators. */
        interface WithAdministrators {
            /**
             * Specifies the administrators property: The Azure Active Directory administrator of the server..
             *
             * @param administrators The Azure Active Directory administrator of the server.
             * @return the next definition stage.
             */
            WithCreate withAdministrators(ManagedInstanceExternalAdministrator administrators);
        }
    }
    /**
     * Begins update for the ManagedInstance resource.
     *
     * @return the stage of resource update.
     */
    ManagedInstance.Update update();

    /** The template for ManagedInstance update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSku,
            UpdateStages.WithIdentity,
            UpdateStages.WithManagedInstanceCreateMode,
            UpdateStages.WithAdministratorLogin,
            UpdateStages.WithAdministratorLoginPassword,
            UpdateStages.WithSubnetId,
            UpdateStages.WithLicenseType,
            UpdateStages.WithVCores,
            UpdateStages.WithStorageSizeInGB,
            UpdateStages.WithCollation,
            UpdateStages.WithDnsZonePartner,
            UpdateStages.WithPublicDataEndpointEnabled,
            UpdateStages.WithSourceManagedInstanceId,
            UpdateStages.WithRestorePointInTime,
            UpdateStages.WithProxyOverride,
            UpdateStages.WithTimezoneId,
            UpdateStages.WithInstancePoolId,
            UpdateStages.WithMaintenanceConfigurationId,
            UpdateStages.WithMinimalTlsVersion,
            UpdateStages.WithStorageAccountType,
            UpdateStages.WithZoneRedundant,
            UpdateStages.WithPrimaryUserAssignedIdentityId,
            UpdateStages.WithKeyId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ManagedInstance apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedInstance apply(Context context);
    }
    /** The ManagedInstance update stages. */
    interface UpdateStages {
        /** The stage of the ManagedInstance update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ManagedInstance update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Managed instance sku.
             *
             * @param sku Managed instance sku.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the ManagedInstance update allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: Managed instance identity.
             *
             * @param identity Managed instance identity.
             * @return the next definition stage.
             */
            Update withIdentity(ResourceIdentity identity);
        }
        /** The stage of the ManagedInstance update allowing to specify managedInstanceCreateMode. */
        interface WithManagedInstanceCreateMode {
            /**
             * Specifies the managedInstanceCreateMode property: Specifies the mode of database creation.
             *
             * <p>Default: Regular instance creation.
             *
             * <p>Restore: Creates an instance by restoring a set of backups to specific point in time.
             * RestorePointInTime and SourceManagedInstanceId must be specified..
             *
             * @param managedInstanceCreateMode Specifies the mode of database creation.
             *     <p>Default: Regular instance creation.
             *     <p>Restore: Creates an instance by restoring a set of backups to specific point in time.
             *     RestorePointInTime and SourceManagedInstanceId must be specified.
             * @return the next definition stage.
             */
            Update withManagedInstanceCreateMode(ManagedServerCreateMode managedInstanceCreateMode);
        }
        /** The stage of the ManagedInstance update allowing to specify administratorLogin. */
        interface WithAdministratorLogin {
            /**
             * Specifies the administratorLogin property: Administrator username for the managed instance. Can only be
             * specified when the managed instance is being created (and is required for creation)..
             *
             * @param administratorLogin Administrator username for the managed instance. Can only be specified when the
             *     managed instance is being created (and is required for creation).
             * @return the next definition stage.
             */
            Update withAdministratorLogin(String administratorLogin);
        }
        /** The stage of the ManagedInstance update allowing to specify administratorLoginPassword. */
        interface WithAdministratorLoginPassword {
            /**
             * Specifies the administratorLoginPassword property: The administrator login password (required for managed
             * instance creation)..
             *
             * @param administratorLoginPassword The administrator login password (required for managed instance
             *     creation).
             * @return the next definition stage.
             */
            Update withAdministratorLoginPassword(String administratorLoginPassword);
        }
        /** The stage of the ManagedInstance update allowing to specify subnetId. */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: Subnet resource ID for the managed instance..
             *
             * @param subnetId Subnet resource ID for the managed instance.
             * @return the next definition stage.
             */
            Update withSubnetId(String subnetId);
        }
        /** The stage of the ManagedInstance update allowing to specify licenseType. */
        interface WithLicenseType {
            /**
             * Specifies the licenseType property: The license type. Possible values are 'LicenseIncluded' (regular
             * price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL
             * licenses)..
             *
             * @param licenseType The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a
             *     new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
             * @return the next definition stage.
             */
            Update withLicenseType(ManagedInstanceLicenseType licenseType);
        }
        /** The stage of the ManagedInstance update allowing to specify vCores. */
        interface WithVCores {
            /**
             * Specifies the vCores property: The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80..
             *
             * @param vCores The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
             * @return the next definition stage.
             */
            Update withVCores(Integer vCores);
        }
        /** The stage of the ManagedInstance update allowing to specify storageSizeInGB. */
        interface WithStorageSizeInGB {
            /**
             * Specifies the storageSizeInGB property: Storage size in GB. Minimum value: 32. Maximum value: 8192.
             * Increments of 32 GB allowed only..
             *
             * @param storageSizeInGB Storage size in GB. Minimum value: 32. Maximum value: 8192. Increments of 32 GB
             *     allowed only.
             * @return the next definition stage.
             */
            Update withStorageSizeInGB(Integer storageSizeInGB);
        }
        /** The stage of the ManagedInstance update allowing to specify collation. */
        interface WithCollation {
            /**
             * Specifies the collation property: Collation of the managed instance..
             *
             * @param collation Collation of the managed instance.
             * @return the next definition stage.
             */
            Update withCollation(String collation);
        }
        /** The stage of the ManagedInstance update allowing to specify dnsZonePartner. */
        interface WithDnsZonePartner {
            /**
             * Specifies the dnsZonePartner property: The resource id of another managed instance whose DNS zone this
             * managed instance will share after creation..
             *
             * @param dnsZonePartner The resource id of another managed instance whose DNS zone this managed instance
             *     will share after creation.
             * @return the next definition stage.
             */
            Update withDnsZonePartner(String dnsZonePartner);
        }
        /** The stage of the ManagedInstance update allowing to specify publicDataEndpointEnabled. */
        interface WithPublicDataEndpointEnabled {
            /**
             * Specifies the publicDataEndpointEnabled property: Whether or not the public data endpoint is enabled..
             *
             * @param publicDataEndpointEnabled Whether or not the public data endpoint is enabled.
             * @return the next definition stage.
             */
            Update withPublicDataEndpointEnabled(Boolean publicDataEndpointEnabled);
        }
        /** The stage of the ManagedInstance update allowing to specify sourceManagedInstanceId. */
        interface WithSourceManagedInstanceId {
            /**
             * Specifies the sourceManagedInstanceId property: The resource identifier of the source managed instance
             * associated with create operation of this instance..
             *
             * @param sourceManagedInstanceId The resource identifier of the source managed instance associated with
             *     create operation of this instance.
             * @return the next definition stage.
             */
            Update withSourceManagedInstanceId(String sourceManagedInstanceId);
        }
        /** The stage of the ManagedInstance update allowing to specify restorePointInTime. */
        interface WithRestorePointInTime {
            /**
             * Specifies the restorePointInTime property: Specifies the point in time (ISO8601 format) of the source
             * database that will be restored to create the new database..
             *
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will
             *     be restored to create the new database.
             * @return the next definition stage.
             */
            Update withRestorePointInTime(OffsetDateTime restorePointInTime);
        }
        /** The stage of the ManagedInstance update allowing to specify proxyOverride. */
        interface WithProxyOverride {
            /**
             * Specifies the proxyOverride property: Connection type used for connecting to the instance..
             *
             * @param proxyOverride Connection type used for connecting to the instance.
             * @return the next definition stage.
             */
            Update withProxyOverride(ManagedInstanceProxyOverride proxyOverride);
        }
        /** The stage of the ManagedInstance update allowing to specify timezoneId. */
        interface WithTimezoneId {
            /**
             * Specifies the timezoneId property: Id of the timezone. Allowed values are timezones supported by Windows.
             * Windows keeps details on supported timezones, including the id, in registry under
             * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. You can get those registry
             * values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info. List of Ids can
             * also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. An example of
             * valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time"..
             *
             * @param timezoneId Id of the timezone. Allowed values are timezones supported by Windows. Windows keeps
             *     details on supported timezones, including the id, in registry under
             *     KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones. You can get those registry
             *     values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info. List of Ids can
             *     also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. An example
             *     of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
             * @return the next definition stage.
             */
            Update withTimezoneId(String timezoneId);
        }
        /** The stage of the ManagedInstance update allowing to specify instancePoolId. */
        interface WithInstancePoolId {
            /**
             * Specifies the instancePoolId property: The Id of the instance pool this managed server belongs to..
             *
             * @param instancePoolId The Id of the instance pool this managed server belongs to.
             * @return the next definition stage.
             */
            Update withInstancePoolId(String instancePoolId);
        }
        /** The stage of the ManagedInstance update allowing to specify maintenanceConfigurationId. */
        interface WithMaintenanceConfigurationId {
            /**
             * Specifies the maintenanceConfigurationId property: Specifies maintenance configuration id to apply to
             * this managed instance..
             *
             * @param maintenanceConfigurationId Specifies maintenance configuration id to apply to this managed
             *     instance.
             * @return the next definition stage.
             */
            Update withMaintenanceConfigurationId(String maintenanceConfigurationId);
        }
        /** The stage of the ManagedInstance update allowing to specify minimalTlsVersion. */
        interface WithMinimalTlsVersion {
            /**
             * Specifies the minimalTlsVersion property: Minimal TLS version. Allowed values: 'None', '1.0', '1.1',
             * '1.2'.
             *
             * @param minimalTlsVersion Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'.
             * @return the next definition stage.
             */
            Update withMinimalTlsVersion(String minimalTlsVersion);
        }
        /** The stage of the ManagedInstance update allowing to specify storageAccountType. */
        interface WithStorageAccountType {
            /**
             * Specifies the storageAccountType property: The storage account type used to store backups for this
             * instance. The options are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS
             * (GeoRedundantStorage).
             *
             * @param storageAccountType The storage account type used to store backups for this instance. The options
             *     are LRS (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS (GeoRedundantStorage).
             * @return the next definition stage.
             */
            Update withStorageAccountType(StorageAccountType storageAccountType);
        }
        /** The stage of the ManagedInstance update allowing to specify zoneRedundant. */
        interface WithZoneRedundant {
            /**
             * Specifies the zoneRedundant property: Whether or not the multi-az is enabled..
             *
             * @param zoneRedundant Whether or not the multi-az is enabled.
             * @return the next definition stage.
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }
        /** The stage of the ManagedInstance update allowing to specify primaryUserAssignedIdentityId. */
        interface WithPrimaryUserAssignedIdentityId {
            /**
             * Specifies the primaryUserAssignedIdentityId property: The resource id of a user assigned identity to be
             * used by default..
             *
             * @param primaryUserAssignedIdentityId The resource id of a user assigned identity to be used by default.
             * @return the next definition stage.
             */
            Update withPrimaryUserAssignedIdentityId(String primaryUserAssignedIdentityId);
        }
        /** The stage of the ManagedInstance update allowing to specify keyId. */
        interface WithKeyId {
            /**
             * Specifies the keyId property: A CMK URI of the key to use for encryption..
             *
             * @param keyId A CMK URI of the key to use for encryption.
             * @return the next definition stage.
             */
            Update withKeyId(String keyId);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ManagedInstance refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedInstance refresh(Context context);

    /**
     * Failovers a managed instance.
     *
     * @param replicaType The type of replica to be failed over.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void failover(ReplicaType replicaType);

    /**
     * Failovers a managed instance.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void failover();

    /**
     * Failovers a managed instance.
     *
     * @param replicaType The type of replica to be failed over.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void failover(ReplicaType replicaType, Context context);
}
