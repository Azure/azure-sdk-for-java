// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.SyncGroupsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.SyncDatabaseIdPropertiesInner;
import com.azure.resourcemanager.sql.generated.fluent.models.SyncFullSchemaPropertiesInner;
import com.azure.resourcemanager.sql.generated.fluent.models.SyncGroupInner;
import com.azure.resourcemanager.sql.generated.fluent.models.SyncGroupLogPropertiesInner;
import com.azure.resourcemanager.sql.generated.models.SyncDatabaseIdProperties;
import com.azure.resourcemanager.sql.generated.models.SyncFullSchemaProperties;
import com.azure.resourcemanager.sql.generated.models.SyncGroup;
import com.azure.resourcemanager.sql.generated.models.SyncGroupLogProperties;
import com.azure.resourcemanager.sql.generated.models.SyncGroups;
import com.azure.resourcemanager.sql.generated.models.SyncGroupsType;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SyncGroupsImpl implements SyncGroups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SyncGroupsImpl.class);

    private final SyncGroupsClient innerClient;

    private final SqlManager serviceManager;

    public SyncGroupsImpl(SyncGroupsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SyncDatabaseIdProperties> listSyncDatabaseIds(String locationName) {
        PagedIterable<SyncDatabaseIdPropertiesInner> inner = this.serviceClient().listSyncDatabaseIds(locationName);
        return inner.mapPage(inner1 -> new SyncDatabaseIdPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncDatabaseIdProperties> listSyncDatabaseIds(String locationName, Context context) {
        PagedIterable<SyncDatabaseIdPropertiesInner> inner =
            this.serviceClient().listSyncDatabaseIds(locationName, context);
        return inner.mapPage(inner1 -> new SyncDatabaseIdPropertiesImpl(inner1, this.manager()));
    }

    public void refreshHubSchema(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        this.serviceClient().refreshHubSchema(resourceGroupName, serverName, databaseName, syncGroupName);
    }

    public void refreshHubSchema(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        this.serviceClient().refreshHubSchema(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    public PagedIterable<SyncFullSchemaProperties> listHubSchemas(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        PagedIterable<SyncFullSchemaPropertiesInner> inner =
            this.serviceClient().listHubSchemas(resourceGroupName, serverName, databaseName, syncGroupName);
        return inner.mapPage(inner1 -> new SyncFullSchemaPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncFullSchemaProperties> listHubSchemas(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        PagedIterable<SyncFullSchemaPropertiesInner> inner =
            this.serviceClient().listHubSchemas(resourceGroupName, serverName, databaseName, syncGroupName, context);
        return inner.mapPage(inner1 -> new SyncFullSchemaPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncGroupLogProperties> listLogs(
        String resourceGroupName,
        String serverName,
        String databaseName,
        String syncGroupName,
        String startTime,
        String endTime,
        SyncGroupsType type) {
        PagedIterable<SyncGroupLogPropertiesInner> inner =
            this
                .serviceClient()
                .listLogs(resourceGroupName, serverName, databaseName, syncGroupName, startTime, endTime, type);
        return inner.mapPage(inner1 -> new SyncGroupLogPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncGroupLogProperties> listLogs(
        String resourceGroupName,
        String serverName,
        String databaseName,
        String syncGroupName,
        String startTime,
        String endTime,
        SyncGroupsType type,
        String continuationToken,
        Context context) {
        PagedIterable<SyncGroupLogPropertiesInner> inner =
            this
                .serviceClient()
                .listLogs(
                    resourceGroupName,
                    serverName,
                    databaseName,
                    syncGroupName,
                    startTime,
                    endTime,
                    type,
                    continuationToken,
                    context);
        return inner.mapPage(inner1 -> new SyncGroupLogPropertiesImpl(inner1, this.manager()));
    }

    public void cancelSync(String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        this.serviceClient().cancelSync(resourceGroupName, serverName, databaseName, syncGroupName);
    }

    public Response<Void> cancelSyncWithResponse(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        return this
            .serviceClient()
            .cancelSyncWithResponse(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    public void triggerSync(String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        this.serviceClient().triggerSync(resourceGroupName, serverName, databaseName, syncGroupName);
    }

    public Response<Void> triggerSyncWithResponse(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        return this
            .serviceClient()
            .triggerSyncWithResponse(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    public SyncGroup get(String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        SyncGroupInner inner = this.serviceClient().get(resourceGroupName, serverName, databaseName, syncGroupName);
        if (inner != null) {
            return new SyncGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SyncGroup> getWithResponse(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        Response<SyncGroupInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, databaseName, syncGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SyncGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        this.serviceClient().delete(resourceGroupName, serverName, databaseName, syncGroupName);
    }

    public void delete(
        String resourceGroupName, String serverName, String databaseName, String syncGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    public PagedIterable<SyncGroup> listByDatabase(String resourceGroupName, String serverName, String databaseName) {
        PagedIterable<SyncGroupInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, serverName, databaseName);
        return inner.mapPage(inner1 -> new SyncGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<SyncGroup> listByDatabase(
        String resourceGroupName, String serverName, String databaseName, Context context) {
        PagedIterable<SyncGroupInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, serverName, databaseName, context);
        return inner.mapPage(inner1 -> new SyncGroupImpl(inner1, this.manager()));
    }

    public SyncGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, serverName, databaseName, syncGroupName, Context.NONE)
            .getValue();
    }

    public Response<SyncGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        this.delete(resourceGroupName, serverName, databaseName, syncGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        this.delete(resourceGroupName, serverName, databaseName, syncGroupName, context);
    }

    private SyncGroupsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }

    public SyncGroupImpl define(String name) {
        return new SyncGroupImpl(name, this.manager());
    }
}
