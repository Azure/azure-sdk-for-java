// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.InstancePoolInner;
import com.azure.resourcemanager.sql.generated.models.InstancePool;
import com.azure.resourcemanager.sql.generated.models.InstancePoolLicenseType;
import com.azure.resourcemanager.sql.generated.models.InstancePoolUpdate;
import com.azure.resourcemanager.sql.generated.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class InstancePoolImpl implements InstancePool, InstancePool.Definition, InstancePool.Update {
    private InstancePoolInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public String subnetId() {
        return this.innerModel().subnetId();
    }

    public Integer vCores() {
        return this.innerModel().vCores();
    }

    public InstancePoolLicenseType licenseType() {
        return this.innerModel().licenseType();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public InstancePoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String instancePoolName;

    private InstancePoolUpdate updateParameters;

    public InstancePoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public InstancePool create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .createOrUpdate(resourceGroupName, instancePoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public InstancePool create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .createOrUpdate(resourceGroupName, instancePoolName, this.innerModel(), context);
        return this;
    }

    InstancePoolImpl(String name, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new InstancePoolInner();
        this.serviceManager = serviceManager;
        this.instancePoolName = name;
    }

    public InstancePoolImpl update() {
        this.updateParameters = new InstancePoolUpdate();
        return this;
    }

    public InstancePool apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .update(resourceGroupName, instancePoolName, updateParameters, Context.NONE);
        return this;
    }

    public InstancePool apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .update(resourceGroupName, instancePoolName, updateParameters, context);
        return this;
    }

    InstancePoolImpl(InstancePoolInner innerObject, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.instancePoolName = Utils.getValueFromIdByName(innerObject.id(), "instancePools");
    }

    public InstancePool refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .getByResourceGroupWithResponse(resourceGroupName, instancePoolName, Context.NONE)
                .getValue();
        return this;
    }

    public InstancePool refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstancePools()
                .getByResourceGroupWithResponse(resourceGroupName, instancePoolName, context)
                .getValue();
        return this;
    }

    public InstancePoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public InstancePoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public InstancePoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public InstancePoolImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public InstancePoolImpl withSubnetId(String subnetId) {
        this.innerModel().withSubnetId(subnetId);
        return this;
    }

    public InstancePoolImpl withVCores(Integer vCores) {
        this.innerModel().withVCores(vCores);
        return this;
    }

    public InstancePoolImpl withLicenseType(InstancePoolLicenseType licenseType) {
        this.innerModel().withLicenseType(licenseType);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
