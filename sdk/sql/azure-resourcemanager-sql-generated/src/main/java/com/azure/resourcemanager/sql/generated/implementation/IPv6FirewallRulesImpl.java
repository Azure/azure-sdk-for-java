// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.IPv6FirewallRulesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.IPv6FirewallRuleInner;
import com.azure.resourcemanager.sql.generated.models.IPv6FirewallRule;
import com.azure.resourcemanager.sql.generated.models.IPv6FirewallRules;

public final class IPv6FirewallRulesImpl implements IPv6FirewallRules {
    private static final ClientLogger LOGGER = new ClientLogger(IPv6FirewallRulesImpl.class);

    private final IPv6FirewallRulesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public IPv6FirewallRulesImpl(
        IPv6FirewallRulesClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IPv6FirewallRule> listByServer(String resourceGroupName, String serverName) {
        PagedIterable<IPv6FirewallRuleInner> inner = this.serviceClient().listByServer(resourceGroupName, serverName);
        return Utils.mapPage(inner, inner1 -> new IPv6FirewallRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<IPv6FirewallRule> listByServer(String resourceGroupName, String serverName, Context context) {
        PagedIterable<IPv6FirewallRuleInner> inner =
            this.serviceClient().listByServer(resourceGroupName, serverName, context);
        return Utils.mapPage(inner, inner1 -> new IPv6FirewallRuleImpl(inner1, this.manager()));
    }

    public IPv6FirewallRule get(String resourceGroupName, String serverName, String firewallRuleName) {
        IPv6FirewallRuleInner inner = this.serviceClient().get(resourceGroupName, serverName, firewallRuleName);
        if (inner != null) {
            return new IPv6FirewallRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<IPv6FirewallRule> getWithResponse(
        String resourceGroupName, String serverName, String firewallRuleName, Context context) {
        Response<IPv6FirewallRuleInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, serverName, firewallRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IPv6FirewallRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String serverName, String firewallRuleName) {
        this.serviceClient().delete(resourceGroupName, serverName, firewallRuleName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String serverName, String firewallRuleName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, serverName, firewallRuleName, context);
    }

    public IPv6FirewallRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String firewallRuleName = Utils.getValueFromIdByName(id, "ipv6FirewallRules");
        if (firewallRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'ipv6FirewallRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, firewallRuleName, Context.NONE).getValue();
    }

    public Response<IPv6FirewallRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String firewallRuleName = Utils.getValueFromIdByName(id, "ipv6FirewallRules");
        if (firewallRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'ipv6FirewallRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, serverName, firewallRuleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String firewallRuleName = Utils.getValueFromIdByName(id, "ipv6FirewallRules");
        if (firewallRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'ipv6FirewallRules'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, serverName, firewallRuleName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serverName = Utils.getValueFromIdByName(id, "servers");
        if (serverName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'servers'.", id)));
        }
        String firewallRuleName = Utils.getValueFromIdByName(id, "ipv6FirewallRules");
        if (firewallRuleName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'ipv6FirewallRules'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, serverName, firewallRuleName, context);
    }

    private IPv6FirewallRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public IPv6FirewallRuleImpl define(String name) {
        return new IPv6FirewallRuleImpl(name, this.manager());
    }
}
