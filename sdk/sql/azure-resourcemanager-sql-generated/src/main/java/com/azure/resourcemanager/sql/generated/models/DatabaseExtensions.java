// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseExtensionsProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/** An export managed database operation result resource. */
@Fluent
public final class DatabaseExtensions extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties")
    private DatabaseExtensionsProperties innerProperties;

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private DatabaseExtensionsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the operationMode property: Operation Mode.
     *
     * @return the operationMode value.
     */
    public OperationMode operationMode() {
        return this.innerProperties() == null ? null : this.innerProperties().operationMode();
    }

    /**
     * Set the operationMode property: Operation Mode.
     *
     * @param operationMode the operationMode value to set.
     * @return the DatabaseExtensions object itself.
     */
    public DatabaseExtensions withOperationMode(OperationMode operationMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseExtensionsProperties();
        }
        this.innerProperties().withOperationMode(operationMode);
        return this;
    }

    /**
     * Get the storageKeyType property: Storage key type.
     *
     * @return the storageKeyType value.
     */
    public StorageKeyType storageKeyType() {
        return this.innerProperties() == null ? null : this.innerProperties().storageKeyType();
    }

    /**
     * Set the storageKeyType property: Storage key type.
     *
     * @param storageKeyType the storageKeyType value to set.
     * @return the DatabaseExtensions object itself.
     */
    public DatabaseExtensions withStorageKeyType(StorageKeyType storageKeyType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseExtensionsProperties();
        }
        this.innerProperties().withStorageKeyType(storageKeyType);
        return this;
    }

    /**
     * Get the storageKey property: Storage key.
     *
     * @return the storageKey value.
     */
    public String storageKey() {
        return this.innerProperties() == null ? null : this.innerProperties().storageKey();
    }

    /**
     * Set the storageKey property: Storage key.
     *
     * @param storageKey the storageKey value to set.
     * @return the DatabaseExtensions object itself.
     */
    public DatabaseExtensions withStorageKey(String storageKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseExtensionsProperties();
        }
        this.innerProperties().withStorageKey(storageKey);
        return this;
    }

    /**
     * Get the storageUri property: Storage Uri.
     *
     * @return the storageUri value.
     */
    public String storageUri() {
        return this.innerProperties() == null ? null : this.innerProperties().storageUri();
    }

    /**
     * Set the storageUri property: Storage Uri.
     *
     * @param storageUri the storageUri value to set.
     * @return the DatabaseExtensions object itself.
     */
    public DatabaseExtensions withStorageUri(String storageUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DatabaseExtensionsProperties();
        }
        this.innerProperties().withStorageUri(storageUri);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
