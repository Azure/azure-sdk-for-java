// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.LongTermRetentionManagedInstanceBackupsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceLongTermRetentionBackupInner;
import com.azure.resourcemanager.sql.generated.models.DatabaseState;
import com.azure.resourcemanager.sql.generated.models.LongTermRetentionManagedInstanceBackups;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLongTermRetentionBackup;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LongTermRetentionManagedInstanceBackupsImpl implements LongTermRetentionManagedInstanceBackups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LongTermRetentionManagedInstanceBackupsImpl.class);

    private final LongTermRetentionManagedInstanceBackupsClient innerClient;

    private final SqlManager serviceManager;

    public LongTermRetentionManagedInstanceBackupsImpl(
        LongTermRetentionManagedInstanceBackupsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedInstanceLongTermRetentionBackup get(
        String locationName, String managedInstanceName, String databaseName, String backupName) {
        ManagedInstanceLongTermRetentionBackupInner inner =
            this.serviceClient().get(locationName, managedInstanceName, databaseName, backupName);
        if (inner != null) {
            return new ManagedInstanceLongTermRetentionBackupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedInstanceLongTermRetentionBackup> getWithResponse(
        String locationName, String managedInstanceName, String databaseName, String backupName, Context context) {
        Response<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().getWithResponse(locationName, managedInstanceName, databaseName, backupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedInstanceLongTermRetentionBackupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String locationName, String managedInstanceName, String databaseName, String backupName) {
        this.serviceClient().delete(locationName, managedInstanceName, databaseName, backupName);
    }

    public void delete(
        String locationName, String managedInstanceName, String databaseName, String backupName, Context context) {
        this.serviceClient().delete(locationName, managedInstanceName, databaseName, backupName, context);
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByDatabase(
        String locationName, String managedInstanceName, String databaseName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByDatabase(locationName, managedInstanceName, databaseName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByDatabase(
        String locationName,
        String managedInstanceName,
        String databaseName,
        Boolean onlyLatestPerDatabase,
        DatabaseState databaseState,
        Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByDatabase(
                    locationName, managedInstanceName, databaseName, onlyLatestPerDatabase, databaseState, context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByInstance(
        String locationName, String managedInstanceName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByInstance(locationName, managedInstanceName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByInstance(
        String locationName,
        String managedInstanceName,
        Boolean onlyLatestPerDatabase,
        DatabaseState databaseState,
        Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByInstance(locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByLocation(String locationName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByLocation(locationName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByLocation(
        String locationName, Boolean onlyLatestPerDatabase, DatabaseState databaseState, Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByLocation(locationName, onlyLatestPerDatabase, databaseState, context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public ManagedInstanceLongTermRetentionBackup getByResourceGroup(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        String databaseName,
        String backupName) {
        ManagedInstanceLongTermRetentionBackupInner inner =
            this
                .serviceClient()
                .getByResourceGroup(resourceGroupName, locationName, managedInstanceName, databaseName, backupName);
        if (inner != null) {
            return new ManagedInstanceLongTermRetentionBackupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedInstanceLongTermRetentionBackup> getByResourceGroupWithResponse(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        String databaseName,
        String backupName,
        Context context) {
        Response<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(
                    resourceGroupName, locationName, managedInstanceName, databaseName, backupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedInstanceLongTermRetentionBackupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        String databaseName,
        String backupName) {
        this
            .serviceClient()
            .deleteByResourceGroup(resourceGroupName, locationName, managedInstanceName, databaseName, backupName);
    }

    public void deleteByResourceGroup(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        String databaseName,
        String backupName,
        Context context) {
        this
            .serviceClient()
            .deleteByResourceGroup(
                resourceGroupName, locationName, managedInstanceName, databaseName, backupName, context);
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupDatabase(
        String resourceGroupName, String locationName, String managedInstanceName, String databaseName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByResourceGroupDatabase(resourceGroupName, locationName, managedInstanceName, databaseName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupDatabase(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        String databaseName,
        Boolean onlyLatestPerDatabase,
        DatabaseState databaseState,
        Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByResourceGroupDatabase(
                    resourceGroupName,
                    locationName,
                    managedInstanceName,
                    databaseName,
                    onlyLatestPerDatabase,
                    databaseState,
                    context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupInstance(
        String resourceGroupName, String locationName, String managedInstanceName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByResourceGroupInstance(resourceGroupName, locationName, managedInstanceName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupInstance(
        String resourceGroupName,
        String locationName,
        String managedInstanceName,
        Boolean onlyLatestPerDatabase,
        DatabaseState databaseState,
        Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByResourceGroupInstance(
                    resourceGroupName,
                    locationName,
                    managedInstanceName,
                    onlyLatestPerDatabase,
                    databaseState,
                    context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupLocation(
        String resourceGroupName, String locationName) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this.serviceClient().listByResourceGroupLocation(resourceGroupName, locationName);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupLocation(
        String resourceGroupName,
        String locationName,
        Boolean onlyLatestPerDatabase,
        DatabaseState databaseState,
        Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionBackupInner> inner =
            this
                .serviceClient()
                .listByResourceGroupLocation(
                    resourceGroupName, locationName, onlyLatestPerDatabase, databaseState, context);
        return inner.mapPage(inner1 -> new ManagedInstanceLongTermRetentionBackupImpl(inner1, this.manager()));
    }

    private LongTermRetentionManagedInstanceBackupsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
