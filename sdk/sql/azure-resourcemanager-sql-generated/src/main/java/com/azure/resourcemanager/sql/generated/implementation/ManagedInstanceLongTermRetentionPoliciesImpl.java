// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedInstanceLongTermRetentionPoliciesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedInstanceLongTermRetentionPolicyInner;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLongTermRetentionPolicies;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLongTermRetentionPolicy;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLongTermRetentionPolicyName;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedInstanceLongTermRetentionPoliciesImpl implements ManagedInstanceLongTermRetentionPolicies {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(ManagedInstanceLongTermRetentionPoliciesImpl.class);

    private final ManagedInstanceLongTermRetentionPoliciesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedInstanceLongTermRetentionPoliciesImpl(
        ManagedInstanceLongTermRetentionPoliciesClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedInstanceLongTermRetentionPolicy get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        ManagedInstanceLongTermRetentionPolicyName policyName) {
        ManagedInstanceLongTermRetentionPolicyInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, databaseName, policyName);
        if (inner != null) {
            return new ManagedInstanceLongTermRetentionPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedInstanceLongTermRetentionPolicy> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        ManagedInstanceLongTermRetentionPolicyName policyName,
        Context context) {
        Response<ManagedInstanceLongTermRetentionPolicyInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedInstanceLongTermRetentionPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ManagedInstanceLongTermRetentionPolicy> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        PagedIterable<ManagedInstanceLongTermRetentionPolicyInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceLongTermRetentionPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedInstanceLongTermRetentionPolicy> listByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName, Context context) {
        PagedIterable<ManagedInstanceLongTermRetentionPolicyInner> inner =
            this.serviceClient().listByDatabase(resourceGroupName, managedInstanceName, databaseName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedInstanceLongTermRetentionPolicyImpl(inner1, this.manager()));
    }

    public ManagedInstanceLongTermRetentionPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        ManagedInstanceLongTermRetentionPolicyName policyName =
            ManagedInstanceLongTermRetentionPolicyName
                .fromString(Utils.getValueFromIdByName(id, "backupLongTermRetentionPolicies"));
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'backupLongTermRetentionPolicies'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, Context.NONE)
            .getValue();
    }

    public Response<ManagedInstanceLongTermRetentionPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        ManagedInstanceLongTermRetentionPolicyName policyName =
            ManagedInstanceLongTermRetentionPolicyName
                .fromString(Utils.getValueFromIdByName(id, "backupLongTermRetentionPolicies"));
        if (policyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'backupLongTermRetentionPolicies'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, databaseName, policyName, context);
    }

    private ManagedInstanceLongTermRetentionPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedInstanceLongTermRetentionPolicyImpl define(ManagedInstanceLongTermRetentionPolicyName name) {
        return new ManagedInstanceLongTermRetentionPolicyImpl(name, this.manager());
    }
}
