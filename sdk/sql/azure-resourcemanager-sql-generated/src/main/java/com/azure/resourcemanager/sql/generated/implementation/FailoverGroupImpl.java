// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.FailoverGroupInner;
import com.azure.resourcemanager.sql.generated.models.FailoverGroup;
import com.azure.resourcemanager.sql.generated.models.FailoverGroupReadOnlyEndpoint;
import com.azure.resourcemanager.sql.generated.models.FailoverGroupReadWriteEndpoint;
import com.azure.resourcemanager.sql.generated.models.FailoverGroupReplicationRole;
import com.azure.resourcemanager.sql.generated.models.FailoverGroupUpdate;
import com.azure.resourcemanager.sql.generated.models.PartnerInfo;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class FailoverGroupImpl implements FailoverGroup, FailoverGroup.Definition, FailoverGroup.Update {
    private FailoverGroupInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public FailoverGroupReadWriteEndpoint readWriteEndpoint() {
        return this.innerModel().readWriteEndpoint();
    }

    public FailoverGroupReadOnlyEndpoint readOnlyEndpoint() {
        return this.innerModel().readOnlyEndpoint();
    }

    public FailoverGroupReplicationRole replicationRole() {
        return this.innerModel().replicationRole();
    }

    public String replicationState() {
        return this.innerModel().replicationState();
    }

    public List<PartnerInfo> partnerServers() {
        List<PartnerInfo> inner = this.innerModel().partnerServers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> databases() {
        List<String> inner = this.innerModel().databases();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public FailoverGroupInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serverName;

    private String failoverGroupName;

    private FailoverGroupUpdate updateParameters;

    public FailoverGroupImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    public FailoverGroup create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .createOrUpdate(resourceGroupName, serverName, failoverGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public FailoverGroup create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .createOrUpdate(resourceGroupName, serverName, failoverGroupName, this.innerModel(), context);
        return this;
    }

    FailoverGroupImpl(String name, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new FailoverGroupInner();
        this.serviceManager = serviceManager;
        this.failoverGroupName = name;
    }

    public FailoverGroupImpl update() {
        this.updateParameters = new FailoverGroupUpdate();
        return this;
    }

    public FailoverGroup apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .update(resourceGroupName, serverName, failoverGroupName, updateParameters, Context.NONE);
        return this;
    }

    public FailoverGroup apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .update(resourceGroupName, serverName, failoverGroupName, updateParameters, context);
        return this;
    }

    FailoverGroupImpl(
        FailoverGroupInner innerObject, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serverName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.failoverGroupName = Utils.getValueFromIdByName(innerObject.id(), "failoverGroups");
    }

    public FailoverGroup refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .getWithResponse(resourceGroupName, serverName, failoverGroupName, Context.NONE)
                .getValue();
        return this;
    }

    public FailoverGroup refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getFailoverGroups()
                .getWithResponse(resourceGroupName, serverName, failoverGroupName, context)
                .getValue();
        return this;
    }

    public FailoverGroup failover() {
        return serviceManager.failoverGroups().failover(resourceGroupName, serverName, failoverGroupName);
    }

    public FailoverGroup failover(Context context) {
        return serviceManager.failoverGroups().failover(resourceGroupName, serverName, failoverGroupName, context);
    }

    public FailoverGroup forceFailoverAllowDataLoss() {
        return serviceManager
            .failoverGroups()
            .forceFailoverAllowDataLoss(resourceGroupName, serverName, failoverGroupName);
    }

    public FailoverGroup forceFailoverAllowDataLoss(Context context) {
        return serviceManager
            .failoverGroups()
            .forceFailoverAllowDataLoss(resourceGroupName, serverName, failoverGroupName, context);
    }

    public FailoverGroupImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public FailoverGroupImpl withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
        if (isInCreateMode()) {
            this.innerModel().withReadWriteEndpoint(readWriteEndpoint);
            return this;
        } else {
            this.updateParameters.withReadWriteEndpoint(readWriteEndpoint);
            return this;
        }
    }

    public FailoverGroupImpl withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
        if (isInCreateMode()) {
            this.innerModel().withReadOnlyEndpoint(readOnlyEndpoint);
            return this;
        } else {
            this.updateParameters.withReadOnlyEndpoint(readOnlyEndpoint);
            return this;
        }
    }

    public FailoverGroupImpl withPartnerServers(List<PartnerInfo> partnerServers) {
        this.innerModel().withPartnerServers(partnerServers);
        return this;
    }

    public FailoverGroupImpl withDatabases(List<String> databases) {
        if (isInCreateMode()) {
            this.innerModel().withDatabases(databases);
            return this;
        } else {
            this.updateParameters.withDatabases(databases);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
