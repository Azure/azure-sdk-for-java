// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedDatabaseSensitivityLabelsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.SensitivityLabelInner;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabaseSensitivityLabels;
import com.azure.resourcemanager.sql.generated.models.SensitivityLabel;
import com.azure.resourcemanager.sql.generated.models.SensitivityLabelSource;
import com.azure.resourcemanager.sql.generated.models.SensitivityLabelUpdateList;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedDatabaseSensitivityLabelsImpl implements ManagedDatabaseSensitivityLabels {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedDatabaseSensitivityLabelsImpl.class);

    private final ManagedDatabaseSensitivityLabelsClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedDatabaseSensitivityLabelsImpl(
        ManagedDatabaseSensitivityLabelsClient innerClient,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SensitivityLabel get(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName,
        SensitivityLabelSource sensitivityLabelSource) {
        SensitivityLabelInner inner =
            this
                .serviceClient()
                .get(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    schemaName,
                    tableName,
                    columnName,
                    sensitivityLabelSource);
        if (inner != null) {
            return new SensitivityLabelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SensitivityLabel> getWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName,
        SensitivityLabelSource sensitivityLabelSource,
        Context context) {
        Response<SensitivityLabelInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    schemaName,
                    tableName,
                    columnName,
                    sensitivityLabelSource,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SensitivityLabelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName) {
        this
            .serviceClient()
            .delete(resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, context);
    }

    public void disableRecommendation(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName) {
        this
            .serviceClient()
            .disableRecommendation(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName);
    }

    public Response<Void> disableRecommendationWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName,
        Context context) {
        return this
            .serviceClient()
            .disableRecommendationWithResponse(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, context);
    }

    public void enableRecommendation(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName) {
        this
            .serviceClient()
            .enableRecommendation(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName);
    }

    public Response<Void> enableRecommendationWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String schemaName,
        String tableName,
        String columnName,
        Context context) {
        return this
            .serviceClient()
            .enableRecommendationWithResponse(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, context);
    }

    public PagedIterable<SensitivityLabel> listCurrentByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        PagedIterable<SensitivityLabelInner> inner =
            this.serviceClient().listCurrentByDatabase(resourceGroupName, managedInstanceName, databaseName);
        return Utils.mapPage(inner, inner1 -> new SensitivityLabelImpl(inner1, this.manager()));
    }

    public PagedIterable<SensitivityLabel> listCurrentByDatabase(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String skipToken,
        Boolean count,
        String filter,
        Context context) {
        PagedIterable<SensitivityLabelInner> inner =
            this
                .serviceClient()
                .listCurrentByDatabase(
                    resourceGroupName, managedInstanceName, databaseName, skipToken, count, filter, context);
        return Utils.mapPage(inner, inner1 -> new SensitivityLabelImpl(inner1, this.manager()));
    }

    public void update(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        SensitivityLabelUpdateList parameters) {
        this.serviceClient().update(resourceGroupName, managedInstanceName, databaseName, parameters);
    }

    public Response<Void> updateWithResponse(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        SensitivityLabelUpdateList parameters,
        Context context) {
        return this
            .serviceClient()
            .updateWithResponse(resourceGroupName, managedInstanceName, databaseName, parameters, context);
    }

    public PagedIterable<SensitivityLabel> listRecommendedByDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        PagedIterable<SensitivityLabelInner> inner =
            this.serviceClient().listRecommendedByDatabase(resourceGroupName, managedInstanceName, databaseName);
        return Utils.mapPage(inner, inner1 -> new SensitivityLabelImpl(inner1, this.manager()));
    }

    public PagedIterable<SensitivityLabel> listRecommendedByDatabase(
        String resourceGroupName,
        String managedInstanceName,
        String databaseName,
        String skipToken,
        Boolean includeDisabledRecommendations,
        String filter,
        Context context) {
        PagedIterable<SensitivityLabelInner> inner =
            this
                .serviceClient()
                .listRecommendedByDatabase(
                    resourceGroupName,
                    managedInstanceName,
                    databaseName,
                    skipToken,
                    includeDisabledRecommendations,
                    filter,
                    context);
        return Utils.mapPage(inner, inner1 -> new SensitivityLabelImpl(inner1, this.manager()));
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String schemaName = Utils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        String columnName = Utils.getValueFromIdByName(id, "columns");
        if (columnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'columns'.", id)));
        }
        this
            .deleteWithResponse(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String databaseName = Utils.getValueFromIdByName(id, "databases");
        if (databaseName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String schemaName = Utils.getValueFromIdByName(id, "schemas");
        if (schemaName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'schemas'.", id)));
        }
        String tableName = Utils.getValueFromIdByName(id, "tables");
        if (tableName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'tables'.", id)));
        }
        String columnName = Utils.getValueFromIdByName(id, "columns");
        if (columnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'columns'.", id)));
        }
        return this
            .deleteWithResponse(
                resourceGroupName, managedInstanceName, databaseName, schemaName, tableName, columnName, context);
    }

    private ManagedDatabaseSensitivityLabelsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public SensitivityLabelImpl define() {
        return new SensitivityLabelImpl(this.manager());
    }
}
