// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.LedgerDigestUploadsInner;
import com.azure.resourcemanager.sql.generated.models.LedgerDigestUploads;
import com.azure.resourcemanager.sql.generated.models.LedgerDigestUploadsName;
import com.azure.resourcemanager.sql.generated.models.LedgerDigestUploadsState;

public final class LedgerDigestUploadsImpl
    implements LedgerDigestUploads, LedgerDigestUploads.Definition, LedgerDigestUploads.Update {
    private LedgerDigestUploadsInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String digestStorageEndpoint() {
        return this.innerModel().digestStorageEndpoint();
    }

    public LedgerDigestUploadsState state() {
        return this.innerModel().state();
    }

    public LedgerDigestUploadsInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String serverName;

    private String databaseName;

    private LedgerDigestUploadsName ledgerDigestUploads;

    public LedgerDigestUploadsImpl withExistingDatabase(
        String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    public LedgerDigestUploads create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, ledgerDigestUploads, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LedgerDigestUploads create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, ledgerDigestUploads, this.innerModel(), context)
                .getValue();
        return this;
    }

    LedgerDigestUploadsImpl(
        LedgerDigestUploadsName name, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new LedgerDigestUploadsInner();
        this.serviceManager = serviceManager;
        this.ledgerDigestUploads = name;
    }

    public LedgerDigestUploadsImpl update() {
        return this;
    }

    public LedgerDigestUploads apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, ledgerDigestUploads, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LedgerDigestUploads apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .createOrUpdateWithResponse(
                    resourceGroupName, serverName, databaseName, ledgerDigestUploads, this.innerModel(), context)
                .getValue();
        return this;
    }

    LedgerDigestUploadsImpl(
        LedgerDigestUploadsInner innerObject, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.serverName = Utils.getValueFromIdByName(innerObject.id(), "servers");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
        this.ledgerDigestUploads =
            LedgerDigestUploadsName.fromString(Utils.getValueFromIdByName(innerObject.id(), "ledgerDigestUploads"));
    }

    public LedgerDigestUploads refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .getWithResponse(resourceGroupName, serverName, databaseName, ledgerDigestUploads, Context.NONE)
                .getValue();
        return this;
    }

    public LedgerDigestUploads refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLedgerDigestUploadsOperations()
                .getWithResponse(resourceGroupName, serverName, databaseName, ledgerDigestUploads, context)
                .getValue();
        return this;
    }

    public LedgerDigestUploads disable() {
        return serviceManager
            .ledgerDigestUploadsOperations()
            .disable(resourceGroupName, serverName, databaseName, ledgerDigestUploads);
    }

    public Response<LedgerDigestUploads> disableWithResponse(Context context) {
        return serviceManager
            .ledgerDigestUploadsOperations()
            .disableWithResponse(resourceGroupName, serverName, databaseName, ledgerDigestUploads, context);
    }

    public LedgerDigestUploadsImpl withDigestStorageEndpoint(String digestStorageEndpoint) {
        this.innerModel().withDigestStorageEndpoint(digestStorageEndpoint);
        return this;
    }
}
