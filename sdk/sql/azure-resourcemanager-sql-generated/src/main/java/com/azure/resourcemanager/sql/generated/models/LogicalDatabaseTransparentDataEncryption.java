// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.LogicalDatabaseTransparentDataEncryptionInner;

/** An immutable client-side representation of LogicalDatabaseTransparentDataEncryption. */
public interface LogicalDatabaseTransparentDataEncryption {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the state property: Specifies the state of the transparent data encryption.
     *
     * @return the state value.
     */
    TransparentDataEncryptionState state();

    /**
     * Gets the inner
     * com.azure.resourcemanager.sql.generated.fluent.models.LogicalDatabaseTransparentDataEncryptionInner object.
     *
     * @return the inner object.
     */
    LogicalDatabaseTransparentDataEncryptionInner innerModel();

    /** The entirety of the LogicalDatabaseTransparentDataEncryption definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The LogicalDatabaseTransparentDataEncryption definition stages. */
    interface DefinitionStages {
        /** The first stage of the LogicalDatabaseTransparentDataEncryption definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the LogicalDatabaseTransparentDataEncryption definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName, databaseName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @param databaseName The name of the logical database for which the security alert policy is defined.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabase(String resourceGroupName, String serverName, String databaseName);
        }
        /**
         * The stage of the LogicalDatabaseTransparentDataEncryption definition which contains all the minimum required
         * properties for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            LogicalDatabaseTransparentDataEncryption create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            LogicalDatabaseTransparentDataEncryption create(Context context);
        }
        /** The stage of the LogicalDatabaseTransparentDataEncryption definition allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: Specifies the state of the transparent data encryption..
             *
             * @param state Specifies the state of the transparent data encryption.
             * @return the next definition stage.
             */
            WithCreate withState(TransparentDataEncryptionState state);
        }
    }
    /**
     * Begins update for the LogicalDatabaseTransparentDataEncryption resource.
     *
     * @return the stage of resource update.
     */
    LogicalDatabaseTransparentDataEncryption.Update update();

    /** The template for LogicalDatabaseTransparentDataEncryption update. */
    interface Update extends UpdateStages.WithState {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        LogicalDatabaseTransparentDataEncryption apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        LogicalDatabaseTransparentDataEncryption apply(Context context);
    }
    /** The LogicalDatabaseTransparentDataEncryption update stages. */
    interface UpdateStages {
        /** The stage of the LogicalDatabaseTransparentDataEncryption update allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: Specifies the state of the transparent data encryption..
             *
             * @param state Specifies the state of the transparent data encryption.
             * @return the next definition stage.
             */
            Update withState(TransparentDataEncryptionState state);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    LogicalDatabaseTransparentDataEncryption refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    LogicalDatabaseTransparentDataEncryption refresh(Context context);
}
