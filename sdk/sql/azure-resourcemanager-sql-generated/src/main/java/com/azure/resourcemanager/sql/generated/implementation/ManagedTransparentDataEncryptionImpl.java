// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedTransparentDataEncryptionInner;
import com.azure.resourcemanager.sql.generated.models.ManagedTransparentDataEncryption;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryptionName;
import com.azure.resourcemanager.sql.generated.models.TransparentDataEncryptionState;

public final class ManagedTransparentDataEncryptionImpl
    implements ManagedTransparentDataEncryption,
        ManagedTransparentDataEncryption.Definition,
        ManagedTransparentDataEncryption.Update {
    private ManagedTransparentDataEncryptionInner innerObject;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public TransparentDataEncryptionState state() {
        return this.innerModel().state();
    }

    public ManagedTransparentDataEncryptionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedInstanceName;

    private String databaseName;

    private TransparentDataEncryptionName tdeName;

    public ManagedTransparentDataEncryptionImpl withExistingDatabase(
        String resourceGroupName, String managedInstanceName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.managedInstanceName = managedInstanceName;
        this.databaseName = databaseName;
        return this;
    }

    public ManagedTransparentDataEncryption create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .createOrUpdateWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, tdeName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ManagedTransparentDataEncryption create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .createOrUpdateWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, tdeName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ManagedTransparentDataEncryptionImpl(
        TransparentDataEncryptionName name, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = new ManagedTransparentDataEncryptionInner();
        this.serviceManager = serviceManager;
        this.tdeName = name;
    }

    public ManagedTransparentDataEncryptionImpl update() {
        return this;
    }

    public ManagedTransparentDataEncryption apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .createOrUpdateWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, tdeName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ManagedTransparentDataEncryption apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .createOrUpdateWithResponse(
                    resourceGroupName, managedInstanceName, databaseName, tdeName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ManagedTransparentDataEncryptionImpl(
        ManagedTransparentDataEncryptionInner innerObject,
        com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedInstanceName = Utils.getValueFromIdByName(innerObject.id(), "managedInstances");
        this.databaseName = Utils.getValueFromIdByName(innerObject.id(), "databases");
        this.tdeName =
            TransparentDataEncryptionName
                .fromString(Utils.getValueFromIdByName(innerObject.id(), "transparentDataEncryption"));
    }

    public ManagedTransparentDataEncryption refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .getWithResponse(resourceGroupName, managedInstanceName, databaseName, tdeName, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedTransparentDataEncryption refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedDatabaseTransparentDataEncryptions()
                .getWithResponse(resourceGroupName, managedInstanceName, databaseName, tdeName, context)
                .getValue();
        return this;
    }

    public ManagedTransparentDataEncryptionImpl withState(TransparentDataEncryptionState state) {
        this.innerModel().withState(state);
        return this;
    }
}
