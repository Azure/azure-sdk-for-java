// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.DeletedServersClient;
import com.azure.resourcemanager.sql.generated.fluent.models.DeletedServerInner;
import com.azure.resourcemanager.sql.generated.models.DeletedServer;
import com.azure.resourcemanager.sql.generated.models.DeletedServers;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DeletedServersImpl implements DeletedServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DeletedServersImpl.class);

    private final DeletedServersClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public DeletedServersImpl(
        DeletedServersClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DeletedServer> list() {
        PagedIterable<DeletedServerInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DeletedServerImpl(inner1, this.manager()));
    }

    public PagedIterable<DeletedServer> list(Context context) {
        PagedIterable<DeletedServerInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new DeletedServerImpl(inner1, this.manager()));
    }

    public DeletedServer get(String locationName, String deletedServerName) {
        DeletedServerInner inner = this.serviceClient().get(locationName, deletedServerName);
        if (inner != null) {
            return new DeletedServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeletedServer> getWithResponse(String locationName, String deletedServerName, Context context) {
        Response<DeletedServerInner> inner =
            this.serviceClient().getWithResponse(locationName, deletedServerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeletedServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<DeletedServer> listByLocation(String locationName) {
        PagedIterable<DeletedServerInner> inner = this.serviceClient().listByLocation(locationName);
        return Utils.mapPage(inner, inner1 -> new DeletedServerImpl(inner1, this.manager()));
    }

    public PagedIterable<DeletedServer> listByLocation(String locationName, Context context) {
        PagedIterable<DeletedServerInner> inner = this.serviceClient().listByLocation(locationName, context);
        return Utils.mapPage(inner, inner1 -> new DeletedServerImpl(inner1, this.manager()));
    }

    public DeletedServer recover(String locationName, String deletedServerName) {
        DeletedServerInner inner = this.serviceClient().recover(locationName, deletedServerName);
        if (inner != null) {
            return new DeletedServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DeletedServer recover(String locationName, String deletedServerName, Context context) {
        DeletedServerInner inner = this.serviceClient().recover(locationName, deletedServerName, context);
        if (inner != null) {
            return new DeletedServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private DeletedServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }
}
