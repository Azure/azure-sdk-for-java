// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.DatabaseSecurityAlertPolicyInner;

/** An immutable client-side representation of DatabaseSecurityAlertPolicy. */
public interface DatabaseSecurityAlertPolicy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the kind property: Resource kind.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the state property: Specifies the state of the policy. If state is Enabled, storageEndpoint and
     * storageAccountAccessKey are required.
     *
     * @return the state value.
     */
    SecurityAlertPolicyState state();

    /**
     * Gets the disabledAlerts property: Specifies the semicolon-separated list of alerts that are disabled, or empty
     * string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly;
     * Data_Exfiltration; Unsafe_Action.
     *
     * @return the disabledAlerts value.
     */
    String disabledAlerts();

    /**
     * Gets the emailAddresses property: Specifies the semicolon-separated list of e-mail addresses to which the alert
     * is sent.
     *
     * @return the emailAddresses value.
     */
    String emailAddresses();

    /**
     * Gets the emailAccountAdmins property: Specifies that the alert is sent to the account administrators.
     *
     * @return the emailAccountAdmins value.
     */
    SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins();

    /**
     * Gets the storageEndpoint property: Specifies the blob storage endpoint (e.g.
     * https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state
     * is Enabled, storageEndpoint is required.
     *
     * @return the storageEndpoint value.
     */
    String storageEndpoint();

    /**
     * Gets the storageAccountAccessKey property: Specifies the identifier key of the Threat Detection audit storage
     * account. If state is Enabled, storageAccountAccessKey is required.
     *
     * @return the storageAccountAccessKey value.
     */
    String storageAccountAccessKey();

    /**
     * Gets the retentionDays property: Specifies the number of days to keep in the Threat Detection audit logs.
     *
     * @return the retentionDays value.
     */
    Integer retentionDays();

    /**
     * Gets the useServerDefault property: Specifies whether to use the default server policy.
     *
     * @return the useServerDefault value.
     */
    SecurityAlertPolicyUseServerDefault useServerDefault();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.DatabaseSecurityAlertPolicyInner object.
     *
     * @return the inner object.
     */
    DatabaseSecurityAlertPolicyInner innerModel();

    /** The entirety of the DatabaseSecurityAlertPolicy definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DatabaseSecurityAlertPolicy definition stages. */
    interface DefinitionStages {
        /** The first stage of the DatabaseSecurityAlertPolicy definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName, databaseName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server.
             * @param databaseName The name of the database for which database Threat Detection policy is defined.
             * @return the next definition stage.
             */
            WithCreate withExistingDatabase(String resourceGroupName, String serverName, String databaseName);
        }
        /**
         * The stage of the DatabaseSecurityAlertPolicy definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation,
                DefinitionStages.WithState,
                DefinitionStages.WithDisabledAlerts,
                DefinitionStages.WithEmailAddresses,
                DefinitionStages.WithEmailAccountAdmins,
                DefinitionStages.WithStorageEndpoint,
                DefinitionStages.WithStorageAccountAccessKey,
                DefinitionStages.WithRetentionDays,
                DefinitionStages.WithUseServerDefault {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DatabaseSecurityAlertPolicy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseSecurityAlertPolicy create(Context context);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: Specifies the state of the policy. If state is Enabled, storageEndpoint and
             * storageAccountAccessKey are required..
             *
             * @param state Specifies the state of the policy. If state is Enabled, storageEndpoint and
             *     storageAccountAccessKey are required.
             * @return the next definition stage.
             */
            WithCreate withState(SecurityAlertPolicyState state);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify disabledAlerts. */
        interface WithDisabledAlerts {
            /**
             * Specifies the disabledAlerts property: Specifies the semicolon-separated list of alerts that are
             * disabled, or empty string to disable no alerts. Possible values: Sql_Injection;
             * Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action..
             *
             * @param disabledAlerts Specifies the semicolon-separated list of alerts that are disabled, or empty string
             *     to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly;
             *     Data_Exfiltration; Unsafe_Action.
             * @return the next definition stage.
             */
            WithCreate withDisabledAlerts(String disabledAlerts);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify emailAddresses. */
        interface WithEmailAddresses {
            /**
             * Specifies the emailAddresses property: Specifies the semicolon-separated list of e-mail addresses to
             * which the alert is sent..
             *
             * @param emailAddresses Specifies the semicolon-separated list of e-mail addresses to which the alert is
             *     sent.
             * @return the next definition stage.
             */
            WithCreate withEmailAddresses(String emailAddresses);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify emailAccountAdmins. */
        interface WithEmailAccountAdmins {
            /**
             * Specifies the emailAccountAdmins property: Specifies that the alert is sent to the account
             * administrators..
             *
             * @param emailAccountAdmins Specifies that the alert is sent to the account administrators.
             * @return the next definition stage.
             */
            WithCreate withEmailAccountAdmins(SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify storageEndpoint. */
        interface WithStorageEndpoint {
            /**
             * Specifies the storageEndpoint property: Specifies the blob storage endpoint (e.g.
             * https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If
             * state is Enabled, storageEndpoint is required..
             *
             * @param storageEndpoint Specifies the blob storage endpoint (e.g.
             *     https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit
             *     logs. If state is Enabled, storageEndpoint is required.
             * @return the next definition stage.
             */
            WithCreate withStorageEndpoint(String storageEndpoint);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify storageAccountAccessKey. */
        interface WithStorageAccountAccessKey {
            /**
             * Specifies the storageAccountAccessKey property: Specifies the identifier key of the Threat Detection
             * audit storage account. If state is Enabled, storageAccountAccessKey is required..
             *
             * @param storageAccountAccessKey Specifies the identifier key of the Threat Detection audit storage
             *     account. If state is Enabled, storageAccountAccessKey is required.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountAccessKey(String storageAccountAccessKey);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify retentionDays. */
        interface WithRetentionDays {
            /**
             * Specifies the retentionDays property: Specifies the number of days to keep in the Threat Detection audit
             * logs..
             *
             * @param retentionDays Specifies the number of days to keep in the Threat Detection audit logs.
             * @return the next definition stage.
             */
            WithCreate withRetentionDays(Integer retentionDays);
        }
        /** The stage of the DatabaseSecurityAlertPolicy definition allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Specifies whether to use the default server policy..
             *
             * @param useServerDefault Specifies whether to use the default server policy.
             * @return the next definition stage.
             */
            WithCreate withUseServerDefault(SecurityAlertPolicyUseServerDefault useServerDefault);
        }
    }
    /**
     * Begins update for the DatabaseSecurityAlertPolicy resource.
     *
     * @return the stage of resource update.
     */
    DatabaseSecurityAlertPolicy.Update update();

    /** The template for DatabaseSecurityAlertPolicy update. */
    interface Update
        extends UpdateStages.WithState,
            UpdateStages.WithDisabledAlerts,
            UpdateStages.WithEmailAddresses,
            UpdateStages.WithEmailAccountAdmins,
            UpdateStages.WithStorageEndpoint,
            UpdateStages.WithStorageAccountAccessKey,
            UpdateStages.WithRetentionDays,
            UpdateStages.WithUseServerDefault {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DatabaseSecurityAlertPolicy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseSecurityAlertPolicy apply(Context context);
    }
    /** The DatabaseSecurityAlertPolicy update stages. */
    interface UpdateStages {
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify state. */
        interface WithState {
            /**
             * Specifies the state property: Specifies the state of the policy. If state is Enabled, storageEndpoint and
             * storageAccountAccessKey are required..
             *
             * @param state Specifies the state of the policy. If state is Enabled, storageEndpoint and
             *     storageAccountAccessKey are required.
             * @return the next definition stage.
             */
            Update withState(SecurityAlertPolicyState state);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify disabledAlerts. */
        interface WithDisabledAlerts {
            /**
             * Specifies the disabledAlerts property: Specifies the semicolon-separated list of alerts that are
             * disabled, or empty string to disable no alerts. Possible values: Sql_Injection;
             * Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action..
             *
             * @param disabledAlerts Specifies the semicolon-separated list of alerts that are disabled, or empty string
             *     to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly;
             *     Data_Exfiltration; Unsafe_Action.
             * @return the next definition stage.
             */
            Update withDisabledAlerts(String disabledAlerts);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify emailAddresses. */
        interface WithEmailAddresses {
            /**
             * Specifies the emailAddresses property: Specifies the semicolon-separated list of e-mail addresses to
             * which the alert is sent..
             *
             * @param emailAddresses Specifies the semicolon-separated list of e-mail addresses to which the alert is
             *     sent.
             * @return the next definition stage.
             */
            Update withEmailAddresses(String emailAddresses);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify emailAccountAdmins. */
        interface WithEmailAccountAdmins {
            /**
             * Specifies the emailAccountAdmins property: Specifies that the alert is sent to the account
             * administrators..
             *
             * @param emailAccountAdmins Specifies that the alert is sent to the account administrators.
             * @return the next definition stage.
             */
            Update withEmailAccountAdmins(SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify storageEndpoint. */
        interface WithStorageEndpoint {
            /**
             * Specifies the storageEndpoint property: Specifies the blob storage endpoint (e.g.
             * https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If
             * state is Enabled, storageEndpoint is required..
             *
             * @param storageEndpoint Specifies the blob storage endpoint (e.g.
             *     https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit
             *     logs. If state is Enabled, storageEndpoint is required.
             * @return the next definition stage.
             */
            Update withStorageEndpoint(String storageEndpoint);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify storageAccountAccessKey. */
        interface WithStorageAccountAccessKey {
            /**
             * Specifies the storageAccountAccessKey property: Specifies the identifier key of the Threat Detection
             * audit storage account. If state is Enabled, storageAccountAccessKey is required..
             *
             * @param storageAccountAccessKey Specifies the identifier key of the Threat Detection audit storage
             *     account. If state is Enabled, storageAccountAccessKey is required.
             * @return the next definition stage.
             */
            Update withStorageAccountAccessKey(String storageAccountAccessKey);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify retentionDays. */
        interface WithRetentionDays {
            /**
             * Specifies the retentionDays property: Specifies the number of days to keep in the Threat Detection audit
             * logs..
             *
             * @param retentionDays Specifies the number of days to keep in the Threat Detection audit logs.
             * @return the next definition stage.
             */
            Update withRetentionDays(Integer retentionDays);
        }
        /** The stage of the DatabaseSecurityAlertPolicy update allowing to specify useServerDefault. */
        interface WithUseServerDefault {
            /**
             * Specifies the useServerDefault property: Specifies whether to use the default server policy..
             *
             * @param useServerDefault Specifies whether to use the default server policy.
             * @return the next definition stage.
             */
            Update withUseServerDefault(SecurityAlertPolicyUseServerDefault useServerDefault);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DatabaseSecurityAlertPolicy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseSecurityAlertPolicy refresh(Context context);
}
