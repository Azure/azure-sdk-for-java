// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.fluent.models.FailoverGroupInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of FailoverGroup. */
public interface FailoverGroup {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: Resource location.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the readWriteEndpoint property: Read-write endpoint of the failover group instance.
     *
     * @return the readWriteEndpoint value.
     */
    FailoverGroupReadWriteEndpoint readWriteEndpoint();

    /**
     * Gets the readOnlyEndpoint property: Read-only endpoint of the failover group instance.
     *
     * @return the readOnlyEndpoint value.
     */
    FailoverGroupReadOnlyEndpoint readOnlyEndpoint();

    /**
     * Gets the replicationRole property: Local replication role of the failover group instance.
     *
     * @return the replicationRole value.
     */
    FailoverGroupReplicationRole replicationRole();

    /**
     * Gets the replicationState property: Replication state of the failover group instance.
     *
     * @return the replicationState value.
     */
    String replicationState();

    /**
     * Gets the partnerServers property: List of partner server information for the failover group.
     *
     * @return the partnerServers value.
     */
    List<PartnerInfo> partnerServers();

    /**
     * Gets the databases property: List of databases in the failover group.
     *
     * @return the databases value.
     */
    List<String> databases();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.sql.generated.fluent.models.FailoverGroupInner object.
     *
     * @return the inner object.
     */
    FailoverGroupInner innerModel();

    /** The entirety of the FailoverGroup definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The FailoverGroup definition stages. */
    interface DefinitionStages {
        /** The first stage of the FailoverGroup definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the FailoverGroup definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, serverName.
             *
             * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this
             *     value from the Azure Resource Manager API or the portal.
             * @param serverName The name of the server containing the failover group.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String serverName);
        }
        /**
         * The stage of the FailoverGroup definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithReadWriteEndpoint,
                DefinitionStages.WithReadOnlyEndpoint,
                DefinitionStages.WithPartnerServers,
                DefinitionStages.WithDatabases {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            FailoverGroup create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            FailoverGroup create(Context context);
        }
        /** The stage of the FailoverGroup definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the FailoverGroup definition allowing to specify readWriteEndpoint. */
        interface WithReadWriteEndpoint {
            /**
             * Specifies the readWriteEndpoint property: Read-write endpoint of the failover group instance..
             *
             * @param readWriteEndpoint Read-write endpoint of the failover group instance.
             * @return the next definition stage.
             */
            WithCreate withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint);
        }
        /** The stage of the FailoverGroup definition allowing to specify readOnlyEndpoint. */
        interface WithReadOnlyEndpoint {
            /**
             * Specifies the readOnlyEndpoint property: Read-only endpoint of the failover group instance..
             *
             * @param readOnlyEndpoint Read-only endpoint of the failover group instance.
             * @return the next definition stage.
             */
            WithCreate withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint);
        }
        /** The stage of the FailoverGroup definition allowing to specify partnerServers. */
        interface WithPartnerServers {
            /**
             * Specifies the partnerServers property: List of partner server information for the failover group..
             *
             * @param partnerServers List of partner server information for the failover group.
             * @return the next definition stage.
             */
            WithCreate withPartnerServers(List<PartnerInfo> partnerServers);
        }
        /** The stage of the FailoverGroup definition allowing to specify databases. */
        interface WithDatabases {
            /**
             * Specifies the databases property: List of databases in the failover group..
             *
             * @param databases List of databases in the failover group.
             * @return the next definition stage.
             */
            WithCreate withDatabases(List<String> databases);
        }
    }
    /**
     * Begins update for the FailoverGroup resource.
     *
     * @return the stage of resource update.
     */
    FailoverGroup.Update update();

    /** The template for FailoverGroup update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithReadWriteEndpoint,
            UpdateStages.WithReadOnlyEndpoint,
            UpdateStages.WithDatabases {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        FailoverGroup apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        FailoverGroup apply(Context context);
    }
    /** The FailoverGroup update stages. */
    interface UpdateStages {
        /** The stage of the FailoverGroup update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the FailoverGroup update allowing to specify readWriteEndpoint. */
        interface WithReadWriteEndpoint {
            /**
             * Specifies the readWriteEndpoint property: Read-write endpoint of the failover group instance..
             *
             * @param readWriteEndpoint Read-write endpoint of the failover group instance.
             * @return the next definition stage.
             */
            Update withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint);
        }
        /** The stage of the FailoverGroup update allowing to specify readOnlyEndpoint. */
        interface WithReadOnlyEndpoint {
            /**
             * Specifies the readOnlyEndpoint property: Read-only endpoint of the failover group instance..
             *
             * @param readOnlyEndpoint Read-only endpoint of the failover group instance.
             * @return the next definition stage.
             */
            Update withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint);
        }
        /** The stage of the FailoverGroup update allowing to specify databases. */
        interface WithDatabases {
            /**
             * Specifies the databases property: List of databases in the failover group..
             *
             * @param databases List of databases in the failover group.
             * @return the next definition stage.
             */
            Update withDatabases(List<String> databases);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    FailoverGroup refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    FailoverGroup refresh(Context context);

    /**
     * Fails over from the current primary server to this server.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group.
     */
    FailoverGroup failover();

    /**
     * Fails over from the current primary server to this server.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group.
     */
    FailoverGroup failover(Context context);

    /**
     * Fails over from the current primary server to this server. This operation might result in data loss.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group.
     */
    FailoverGroup forceFailoverAllowDataLoss();

    /**
     * Fails over from the current primary server to this server. This operation might result in data loss.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a failover group.
     */
    FailoverGroup forceFailoverAllowDataLoss(Context context);
}
