// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.SqlManager;
import com.azure.resourcemanager.sql.generated.fluent.JobExecutionsClient;
import com.azure.resourcemanager.sql.generated.fluent.models.JobExecutionInner;
import com.azure.resourcemanager.sql.generated.models.JobExecution;
import com.azure.resourcemanager.sql.generated.models.JobExecutions;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.OffsetDateTime;
import java.util.UUID;

public final class JobExecutionsImpl implements JobExecutions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(JobExecutionsImpl.class);

    private final JobExecutionsClient innerClient;

    private final SqlManager serviceManager;

    public JobExecutionsImpl(JobExecutionsClient innerClient, SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<JobExecution> listByAgent(String resourceGroupName, String serverName, String jobAgentName) {
        PagedIterable<JobExecutionInner> inner =
            this.serviceClient().listByAgent(resourceGroupName, serverName, jobAgentName);
        return inner.mapPage(inner1 -> new JobExecutionImpl(inner1, this.manager()));
    }

    public PagedIterable<JobExecution> listByAgent(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        OffsetDateTime createTimeMin,
        OffsetDateTime createTimeMax,
        OffsetDateTime endTimeMin,
        OffsetDateTime endTimeMax,
        Boolean isActive,
        Integer skip,
        Integer top,
        Context context) {
        PagedIterable<JobExecutionInner> inner =
            this
                .serviceClient()
                .listByAgent(
                    resourceGroupName,
                    serverName,
                    jobAgentName,
                    createTimeMin,
                    createTimeMax,
                    endTimeMin,
                    endTimeMax,
                    isActive,
                    skip,
                    top,
                    context);
        return inner.mapPage(inner1 -> new JobExecutionImpl(inner1, this.manager()));
    }

    public void cancel(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId) {
        this.serviceClient().cancel(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId);
    }

    public Response<Void> cancelWithResponse(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        UUID jobExecutionId,
        Context context) {
        return this
            .serviceClient()
            .cancelWithResponse(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, context);
    }

    public JobExecution create(String resourceGroupName, String serverName, String jobAgentName, String jobName) {
        JobExecutionInner inner = this.serviceClient().create(resourceGroupName, serverName, jobAgentName, jobName);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobExecution create(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, Context context) {
        JobExecutionInner inner =
            this.serviceClient().create(resourceGroupName, serverName, jobAgentName, jobName, context);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<JobExecution> listByJob(
        String resourceGroupName, String serverName, String jobAgentName, String jobName) {
        PagedIterable<JobExecutionInner> inner =
            this.serviceClient().listByJob(resourceGroupName, serverName, jobAgentName, jobName);
        return inner.mapPage(inner1 -> new JobExecutionImpl(inner1, this.manager()));
    }

    public PagedIterable<JobExecution> listByJob(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        OffsetDateTime createTimeMin,
        OffsetDateTime createTimeMax,
        OffsetDateTime endTimeMin,
        OffsetDateTime endTimeMax,
        Boolean isActive,
        Integer skip,
        Integer top,
        Context context) {
        PagedIterable<JobExecutionInner> inner =
            this
                .serviceClient()
                .listByJob(
                    resourceGroupName,
                    serverName,
                    jobAgentName,
                    jobName,
                    createTimeMin,
                    createTimeMax,
                    endTimeMin,
                    endTimeMax,
                    isActive,
                    skip,
                    top,
                    context);
        return inner.mapPage(inner1 -> new JobExecutionImpl(inner1, this.manager()));
    }

    public JobExecution get(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId) {
        JobExecutionInner inner =
            this.serviceClient().get(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<JobExecution> getWithResponse(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        UUID jobExecutionId,
        Context context) {
        Response<JobExecutionInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new JobExecutionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public JobExecution createOrUpdate(
        String resourceGroupName, String serverName, String jobAgentName, String jobName, UUID jobExecutionId) {
        JobExecutionInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public JobExecution createOrUpdate(
        String resourceGroupName,
        String serverName,
        String jobAgentName,
        String jobName,
        UUID jobExecutionId,
        Context context) {
        JobExecutionInner inner =
            this
                .serviceClient()
                .createOrUpdate(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, context);
        if (inner != null) {
            return new JobExecutionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private JobExecutionsClient serviceClient() {
        return this.innerClient;
    }

    private SqlManager manager() {
        return this.serviceManager;
    }
}
