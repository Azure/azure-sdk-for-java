// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sql.generated.fluent.ManagedServerDnsAliasesClient;
import com.azure.resourcemanager.sql.generated.fluent.models.ManagedServerDnsAliasInner;
import com.azure.resourcemanager.sql.generated.models.ManagedServerDnsAlias;
import com.azure.resourcemanager.sql.generated.models.ManagedServerDnsAliasAcquisition;
import com.azure.resourcemanager.sql.generated.models.ManagedServerDnsAliases;

public final class ManagedServerDnsAliasesImpl implements ManagedServerDnsAliases {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedServerDnsAliasesImpl.class);

    private final ManagedServerDnsAliasesClient innerClient;

    private final com.azure.resourcemanager.sql.generated.SqlManager serviceManager;

    public ManagedServerDnsAliasesImpl(
        ManagedServerDnsAliasesClient innerClient, com.azure.resourcemanager.sql.generated.SqlManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ManagedServerDnsAlias> listByManagedInstance(
        String resourceGroupName, String managedInstanceName) {
        PagedIterable<ManagedServerDnsAliasInner> inner =
            this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName);
        return Utils.mapPage(inner, inner1 -> new ManagedServerDnsAliasImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedServerDnsAlias> listByManagedInstance(
        String resourceGroupName, String managedInstanceName, Context context) {
        PagedIterable<ManagedServerDnsAliasInner> inner =
            this.serviceClient().listByManagedInstance(resourceGroupName, managedInstanceName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedServerDnsAliasImpl(inner1, this.manager()));
    }

    public ManagedServerDnsAlias get(String resourceGroupName, String managedInstanceName, String dnsAliasName) {
        ManagedServerDnsAliasInner inner =
            this.serviceClient().get(resourceGroupName, managedInstanceName, dnsAliasName);
        if (inner != null) {
            return new ManagedServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedServerDnsAlias> getWithResponse(
        String resourceGroupName, String managedInstanceName, String dnsAliasName, Context context) {
        Response<ManagedServerDnsAliasInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, managedInstanceName, dnsAliasName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedServerDnsAliasImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String managedInstanceName, String dnsAliasName) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, dnsAliasName);
    }

    public void delete(String resourceGroupName, String managedInstanceName, String dnsAliasName, Context context) {
        this.serviceClient().delete(resourceGroupName, managedInstanceName, dnsAliasName, context);
    }

    public ManagedServerDnsAlias acquire(
        String resourceGroupName,
        String managedInstanceName,
        String dnsAliasName,
        ManagedServerDnsAliasAcquisition parameters) {
        ManagedServerDnsAliasInner inner =
            this.serviceClient().acquire(resourceGroupName, managedInstanceName, dnsAliasName, parameters);
        if (inner != null) {
            return new ManagedServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedServerDnsAlias acquire(
        String resourceGroupName,
        String managedInstanceName,
        String dnsAliasName,
        ManagedServerDnsAliasAcquisition parameters,
        Context context) {
        ManagedServerDnsAliasInner inner =
            this.serviceClient().acquire(resourceGroupName, managedInstanceName, dnsAliasName, parameters, context);
        if (inner != null) {
            return new ManagedServerDnsAliasImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ManagedServerDnsAlias getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dnsAliasName = Utils.getValueFromIdByName(id, "dnsAliases");
        if (dnsAliasName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dnsAliases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, dnsAliasName, Context.NONE).getValue();
    }

    public Response<ManagedServerDnsAlias> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dnsAliasName = Utils.getValueFromIdByName(id, "dnsAliases");
        if (dnsAliasName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dnsAliases'.", id)));
        }
        return this.getWithResponse(resourceGroupName, managedInstanceName, dnsAliasName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dnsAliasName = Utils.getValueFromIdByName(id, "dnsAliases");
        if (dnsAliasName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dnsAliases'.", id)));
        }
        this.delete(resourceGroupName, managedInstanceName, dnsAliasName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedInstanceName = Utils.getValueFromIdByName(id, "managedInstances");
        if (managedInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedInstances'.", id)));
        }
        String dnsAliasName = Utils.getValueFromIdByName(id, "dnsAliases");
        if (dnsAliasName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'dnsAliases'.", id)));
        }
        this.delete(resourceGroupName, managedInstanceName, dnsAliasName, context);
    }

    private ManagedServerDnsAliasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sql.generated.SqlManager manager() {
        return this.serviceManager;
    }

    public ManagedServerDnsAliasImpl define(String name) {
        return new ManagedServerDnsAliasImpl(name, this.manager());
    }
}
