// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.models.ManagedDatabase;
import java.util.HashMap;
import java.util.Map;

/** Samples for ManagedDatabases Update. */
public final class ManagedDatabasesUpdateSamples {
    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMax.json
     */
    /**
     * Sample code: Updates a managed database with maximal properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void updatesAManagedDatabaseWithMaximalProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        ManagedDatabase resource =
            manager
                .managedDatabases()
                .getWithResponse("Default-SQL-SouthEastAsia", "managedInstance", "testdb", Context.NONE)
                .getValue();
        resource.update().withTags(mapOf("tagKey1", "TagValue1")).apply();
    }

    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseUpdateMin.json
     */
    /**
     * Sample code: Updates a managed database with minimal properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void updatesAManagedDatabaseWithMinimalProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        ManagedDatabase resource =
            manager
                .managedDatabases()
                .getWithResponse("Default-SQL-SouthEastAsia", "managedInstance", "testdb", Context.NONE)
                .getValue();
        resource.update().withTags(mapOf("tagKey1", "TagValue1")).apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
