// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.sql.generated.models.ManagedInstance;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceLicenseType;
import com.azure.resourcemanager.sql.generated.models.ManagedInstanceProxyOverride;
import com.azure.resourcemanager.sql.generated.models.Sku;
import java.util.HashMap;
import java.util.Map;

/** Samples for ManagedInstances Update. */
public final class ManagedInstancesUpdateSamples {
    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMin.json
     */
    /**
     * Sample code: Update managed instance with minimal properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void updateManagedInstanceWithMinimalProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        ManagedInstance resource =
            manager
                .managedInstances()
                .getByResourceGroupWithResponse("testrg", "testinstance", null, Context.NONE)
                .getValue();
        resource.update().withTags(mapOf("tagKey1", "TagValue1")).apply();
    }

    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceUpdateMax.json
     */
    /**
     * Sample code: Update managed instance with all properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void updateManagedInstanceWithAllProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        ManagedInstance resource =
            manager
                .managedInstances()
                .getByResourceGroupWithResponse("testrg", "testinstance", null, Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf("tagKey1", "TagValue1"))
            .withSku(new Sku().withName("GP_Gen4").withTier("GeneralPurpose").withCapacity(8))
            .withAdministratorLoginPassword("PLACEHOLDER")
            .withLicenseType(ManagedInstanceLicenseType.BASE_PRICE)
            .withVCores(8)
            .withStorageSizeInGB(448)
            .withPublicDataEndpointEnabled(false)
            .withProxyOverride(ManagedInstanceProxyOverride.REDIRECT)
            .withMaintenanceConfigurationId(
                "/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1")
            .withMinimalTlsVersion("1.2")
            .apply();
    }

    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ManagedInstanceRemoveMaintenanceConfiguration.json
     */
    /**
     * Sample code: Remove maintenance policy from managed instance (select default maintenance policy).
     *
     * @param manager Entry point to SqlManager.
     */
    public static void removeMaintenancePolicyFromManagedInstanceSelectDefaultMaintenancePolicy(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        ManagedInstance resource =
            manager
                .managedInstances()
                .getByResourceGroupWithResponse("testrg", "testinstance", null, Context.NONE)
                .getValue();
        resource
            .update()
            .withMaintenanceConfigurationId(
                "/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default")
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
