// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.sql.generated.generated;

import com.azure.resourcemanager.sql.generated.models.JobTarget;
import com.azure.resourcemanager.sql.generated.models.JobTargetGroupMembershipType;
import com.azure.resourcemanager.sql.generated.models.JobTargetType;
import java.util.Arrays;

/** Samples for JobTargetGroups CreateOrUpdate. */
public final class JobTargetGroupsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMin.json
     */
    /**
     * Sample code: Create or update a target group with minimal properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void createOrUpdateATargetGroupWithMinimalProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        manager
            .jobTargetGroups()
            .define("targetGroup1")
            .withExistingJobAgent("group1", "server1", "agent1")
            .withMembers(Arrays.asList())
            .create();
    }

    /*
     * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/CreateOrUpdateJobTargetGroupMax.json
     */
    /**
     * Sample code: Create or update a target group with all properties.
     *
     * @param manager Entry point to SqlManager.
     */
    public static void createOrUpdateATargetGroupWithAllProperties(
        com.azure.resourcemanager.sql.generated.SqlManager manager) {
        manager
            .jobTargetGroups()
            .define("targetGroup1")
            .withExistingJobAgent("group1", "server1", "agent1")
            .withMembers(
                Arrays
                    .asList(
                        new JobTarget()
                            .withMembershipType(JobTargetGroupMembershipType.EXCLUDE)
                            .withType(JobTargetType.SQL_DATABASE)
                            .withServerName("server1")
                            .withDatabaseName("database1"),
                        new JobTarget()
                            .withMembershipType(JobTargetGroupMembershipType.INCLUDE)
                            .withType(JobTargetType.SQL_SERVER)
                            .withServerName("server1")
                            .withRefreshCredential(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
                        new JobTarget()
                            .withMembershipType(JobTargetGroupMembershipType.INCLUDE)
                            .withType(JobTargetType.SQL_ELASTIC_POOL)
                            .withServerName("server2")
                            .withElasticPoolName("pool1")
                            .withRefreshCredential(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential"),
                        new JobTarget()
                            .withMembershipType(JobTargetGroupMembershipType.INCLUDE)
                            .withType(JobTargetType.SQL_SHARD_MAP)
                            .withServerName("server3")
                            .withShardMapName("shardMap1")
                            .withRefreshCredential(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/jobAgents/agent1/credentials/testCredential")))
            .create();
    }
}
