/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2018_06_01_preview.LongTermRetentionManagedInstanceBackups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstanceLongTermRetentionBackup;

class LongTermRetentionManagedInstanceBackupsImpl extends WrapperImpl<LongTermRetentionManagedInstanceBackupsInner> implements LongTermRetentionManagedInstanceBackups {
    private final SqlManager manager;

    LongTermRetentionManagedInstanceBackupsImpl(SqlManager manager) {
        super(manager.inner().longTermRetentionManagedInstanceBackups());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private ManagedInstanceLongTermRetentionBackupImpl wrapModel(ManagedInstanceLongTermRetentionBackupInner inner) {
        return  new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByInstanceAsync(final String locationName, final String managedInstanceName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByInstanceAsync(locationName, managedInstanceName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByLocationAsync(final String locationName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByLocationAsync(locationName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> getByResourceGroupAsync(String resourceGroupName, String locationName, String managedInstanceName, String databaseName, String backupName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, locationName, managedInstanceName, databaseName, backupName)
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteByResourceGroupAsync(String resourceGroupName, String locationName, String managedInstanceName, String databaseName, String backupName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.deleteByResourceGroupAsync(resourceGroupName, locationName, managedInstanceName, databaseName, backupName).toCompletable();
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupDatabaseAsync(final String resourceGroupName, final String locationName, final String managedInstanceName, final String databaseName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByResourceGroupDatabaseAsync(resourceGroupName, locationName, managedInstanceName, databaseName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupInstanceAsync(final String resourceGroupName, final String locationName, final String managedInstanceName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByResourceGroupInstanceAsync(resourceGroupName, locationName, managedInstanceName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByResourceGroupLocationAsync(final String resourceGroupName, final String locationName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByResourceGroupLocationAsync(resourceGroupName, locationName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return new ManagedInstanceLongTermRetentionBackupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> listByDatabaseAsync(final String locationName, final String managedInstanceName, final String databaseName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.listByDatabaseAsync(locationName, managedInstanceName, databaseName)
        .flatMapIterable(new Func1<Page<ManagedInstanceLongTermRetentionBackupInner>, Iterable<ManagedInstanceLongTermRetentionBackupInner>>() {
            @Override
            public Iterable<ManagedInstanceLongTermRetentionBackupInner> call(Page<ManagedInstanceLongTermRetentionBackupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceLongTermRetentionBackupInner, ManagedInstanceLongTermRetentionBackup>() {
            @Override
            public ManagedInstanceLongTermRetentionBackup call(ManagedInstanceLongTermRetentionBackupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ManagedInstanceLongTermRetentionBackup> getAsync(String locationName, String managedInstanceName, String databaseName, String backupName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.getAsync(locationName, managedInstanceName, databaseName, backupName)
        .flatMap(new Func1<ManagedInstanceLongTermRetentionBackupInner, Observable<ManagedInstanceLongTermRetentionBackup>>() {
            @Override
            public Observable<ManagedInstanceLongTermRetentionBackup> call(ManagedInstanceLongTermRetentionBackupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ManagedInstanceLongTermRetentionBackup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String locationName, String managedInstanceName, String databaseName, String backupName) {
        LongTermRetentionManagedInstanceBackupsInner client = this.inner();
        return client.deleteAsync(locationName, managedInstanceName, databaseName, backupName).toCompletable();
    }

}
