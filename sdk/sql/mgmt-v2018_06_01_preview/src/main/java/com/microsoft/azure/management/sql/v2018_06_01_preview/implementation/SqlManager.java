/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.sql.v2018_06_01_preview.DatabaseSecurityAlertPolicies;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedDatabaseSensitivityLabels;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstanceVulnerabilityAssessments;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstanceOperations;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerVulnerabilityAssessments;
import com.microsoft.azure.management.sql.v2018_06_01_preview.InstancePools;
import com.microsoft.azure.management.sql.v2018_06_01_preview.Usages;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstances;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedDatabaseRestoreDetails;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedDatabases;
import com.microsoft.azure.management.sql.v2018_06_01_preview.Databases;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ElasticPools;
import com.microsoft.azure.management.sql.v2018_06_01_preview.PrivateEndpointConnections;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerAzureADAdministrators;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstanceLongTermRetentionPolicies;
import com.microsoft.azure.management.sql.v2018_06_01_preview.LongTermRetentionManagedInstanceBackups;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Sql resource management.
 */
public final class SqlManager extends ManagerCore<SqlManager, SqlManagementClientImpl> {
    private DatabaseSecurityAlertPolicies databaseSecurityAlertPolicies;
    private ManagedDatabaseSensitivityLabels managedDatabaseSensitivityLabels;
    private ManagedInstanceVulnerabilityAssessments managedInstanceVulnerabilityAssessments;
    private ManagedInstanceOperations managedInstanceOperations;
    private ServerVulnerabilityAssessments serverVulnerabilityAssessments;
    private InstancePools instancePools;
    private Usages usages;
    private ManagedInstances managedInstances;
    private ManagedDatabaseRestoreDetails managedDatabaseRestoreDetails;
    private ManagedDatabases managedDatabases;
    private Databases databases;
    private ElasticPools elasticPools;
    private PrivateEndpointConnections privateEndpointConnections;
    private ServerAzureADAdministrators serverAzureADAdministrators;
    private ManagedInstanceLongTermRetentionPolicies managedInstanceLongTermRetentionPolicies;
    private LongTermRetentionManagedInstanceBackups longTermRetentionManagedInstanceBackups;
    /**
    * Get a Configurable instance that can be used to create SqlManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new SqlManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of SqlManager that exposes Sql resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the SqlManager
    */
    public static SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new SqlManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of SqlManager that exposes Sql resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the SqlManager
    */
    public static SqlManager authenticate(RestClient restClient, String subscriptionId) {
        return new SqlManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of SqlManager that exposes Sql management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Sql management API entry points that work across subscriptions
        */
        SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage DatabaseSecurityAlertPolicies.
     */
    public DatabaseSecurityAlertPolicies databaseSecurityAlertPolicies() {
        if (this.databaseSecurityAlertPolicies == null) {
            this.databaseSecurityAlertPolicies = new DatabaseSecurityAlertPoliciesImpl(this);
        }
        return this.databaseSecurityAlertPolicies;
    }

    /**
     * @return Entry point to manage ManagedDatabaseSensitivityLabels.
     */
    public ManagedDatabaseSensitivityLabels managedDatabaseSensitivityLabels() {
        if (this.managedDatabaseSensitivityLabels == null) {
            this.managedDatabaseSensitivityLabels = new ManagedDatabaseSensitivityLabelsImpl(this);
        }
        return this.managedDatabaseSensitivityLabels;
    }

    /**
     * @return Entry point to manage ManagedInstanceVulnerabilityAssessments.
     */
    public ManagedInstanceVulnerabilityAssessments managedInstanceVulnerabilityAssessments() {
        if (this.managedInstanceVulnerabilityAssessments == null) {
            this.managedInstanceVulnerabilityAssessments = new ManagedInstanceVulnerabilityAssessmentsImpl(this);
        }
        return this.managedInstanceVulnerabilityAssessments;
    }

    /**
     * @return Entry point to manage ManagedInstanceOperations.
     */
    public ManagedInstanceOperations managedInstanceOperations() {
        if (this.managedInstanceOperations == null) {
            this.managedInstanceOperations = new ManagedInstanceOperationsImpl(this);
        }
        return this.managedInstanceOperations;
    }

    /**
     * @return Entry point to manage ServerVulnerabilityAssessments.
     */
    public ServerVulnerabilityAssessments serverVulnerabilityAssessments() {
        if (this.serverVulnerabilityAssessments == null) {
            this.serverVulnerabilityAssessments = new ServerVulnerabilityAssessmentsImpl(this);
        }
        return this.serverVulnerabilityAssessments;
    }

    /**
     * @return Entry point to manage InstancePools.
     */
    public InstancePools instancePools() {
        if (this.instancePools == null) {
            this.instancePools = new InstancePoolsImpl(this);
        }
        return this.instancePools;
    }

    /**
     * @return Entry point to manage Usages.
     */
    public Usages usages() {
        if (this.usages == null) {
            this.usages = new UsagesImpl(this);
        }
        return this.usages;
    }

    /**
     * @return Entry point to manage ManagedInstances.
     */
    public ManagedInstances managedInstances() {
        if (this.managedInstances == null) {
            this.managedInstances = new ManagedInstancesImpl(this);
        }
        return this.managedInstances;
    }

    /**
     * @return Entry point to manage ManagedDatabaseRestoreDetails.
     */
    public ManagedDatabaseRestoreDetails managedDatabaseRestoreDetails() {
        if (this.managedDatabaseRestoreDetails == null) {
            this.managedDatabaseRestoreDetails = new ManagedDatabaseRestoreDetailsImpl(this);
        }
        return this.managedDatabaseRestoreDetails;
    }

    /**
     * @return Entry point to manage ManagedDatabases.
     */
    public ManagedDatabases managedDatabases() {
        if (this.managedDatabases == null) {
            this.managedDatabases = new ManagedDatabasesImpl(this);
        }
        return this.managedDatabases;
    }

    /**
     * @return Entry point to manage Databases.
     */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(this);
        }
        return this.databases;
    }

    /**
     * @return Entry point to manage ElasticPools.
     */
    public ElasticPools elasticPools() {
        if (this.elasticPools == null) {
            this.elasticPools = new ElasticPoolsImpl(this);
        }
        return this.elasticPools;
    }

    /**
     * @return Entry point to manage PrivateEndpointConnections.
     */
    public PrivateEndpointConnections privateEndpointConnections() {
        if (this.privateEndpointConnections == null) {
            this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        }
        return this.privateEndpointConnections;
    }

    /**
     * @return Entry point to manage ServerAzureADAdministrators.
     */
    public ServerAzureADAdministrators serverAzureADAdministrators() {
        if (this.serverAzureADAdministrators == null) {
            this.serverAzureADAdministrators = new ServerAzureADAdministratorsImpl(this);
        }
        return this.serverAzureADAdministrators;
    }

    /**
     * @return Entry point to manage ManagedInstanceLongTermRetentionPolicies.
     */
    public ManagedInstanceLongTermRetentionPolicies managedInstanceLongTermRetentionPolicies() {
        if (this.managedInstanceLongTermRetentionPolicies == null) {
            this.managedInstanceLongTermRetentionPolicies = new ManagedInstanceLongTermRetentionPoliciesImpl(this);
        }
        return this.managedInstanceLongTermRetentionPolicies;
    }

    /**
     * @return Entry point to manage LongTermRetentionManagedInstanceBackups.
     */
    public LongTermRetentionManagedInstanceBackups longTermRetentionManagedInstanceBackups() {
        if (this.longTermRetentionManagedInstanceBackups == null) {
            this.longTermRetentionManagedInstanceBackups = new LongTermRetentionManagedInstanceBackupsImpl(this);
        }
        return this.longTermRetentionManagedInstanceBackups;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public SqlManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return SqlManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private SqlManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new SqlManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
