/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview;

import rx.Observable;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerAzureADAdministrator;
import rx.Completable;

/**
 * Type representing ServerAzureADAdministrators.
 */
public interface ServerAzureADAdministrators {
    /**
     * Begins definition for a new Administrator resource.
     * @param name resource name.
     * @return the first stage of the new Administrator definition.
     */
    ServerAzureADAdministrator.DefinitionStages.Blank defineAdministrator(String name);

    /**
     * Gets a server Administrator.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerAzureADAdministrator> getAsync(String resourceGroupName, String serverName);

    /**
     * Gets a list of server Administrators.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ServerAzureADAdministrator> listByServerAsync(final String resourceGroupName, final String serverName);

    /**
     * Deletes an existing server Active Directory Administrator.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String serverName);

}
