/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerVulnerabilityAssessments;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerVulnerabilityAssessment;
import com.microsoft.azure.Page;
import rx.Completable;

class ServerVulnerabilityAssessmentsImpl extends WrapperImpl<ServerVulnerabilityAssessmentsInner> implements ServerVulnerabilityAssessments {
    private final SqlManager manager;

    ServerVulnerabilityAssessmentsImpl(SqlManager manager) {
        super(manager.inner().serverVulnerabilityAssessments());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public ServerVulnerabilityAssessmentImpl defineVulnerabilityAssessment(String name) {
        return wrapVulnerabilityAssessmentModel(name);
    }

    private ServerVulnerabilityAssessmentImpl wrapVulnerabilityAssessmentModel(String name) {
        return new ServerVulnerabilityAssessmentImpl(name, this.manager());
    }

    private ServerVulnerabilityAssessmentImpl wrapServerVulnerabilityAssessmentModel(ServerVulnerabilityAssessmentInner inner) {
        return  new ServerVulnerabilityAssessmentImpl(inner, manager());
    }

    private Observable<ServerVulnerabilityAssessmentInner> getServerVulnerabilityAssessmentInnerUsingServerVulnerabilityAssessmentsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String serverName = IdParsingUtils.getValueFromIdByName(id, "servers");
        ServerVulnerabilityAssessmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName);
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> getAsync(String resourceGroupName, String serverName) {
        ServerVulnerabilityAssessmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName)
        .flatMap(new Func1<ServerVulnerabilityAssessmentInner, Observable<ServerVulnerabilityAssessment>>() {
            @Override
            public Observable<ServerVulnerabilityAssessment> call(ServerVulnerabilityAssessmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServerVulnerabilityAssessment)wrapServerVulnerabilityAssessmentModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<ServerVulnerabilityAssessment> listByServerAsync(final String resourceGroupName, final String serverName) {
        ServerVulnerabilityAssessmentsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMapIterable(new Func1<Page<ServerVulnerabilityAssessmentInner>, Iterable<ServerVulnerabilityAssessmentInner>>() {
            @Override
            public Iterable<ServerVulnerabilityAssessmentInner> call(Page<ServerVulnerabilityAssessmentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerVulnerabilityAssessmentInner, ServerVulnerabilityAssessment>() {
            @Override
            public ServerVulnerabilityAssessment call(ServerVulnerabilityAssessmentInner inner) {
                return wrapServerVulnerabilityAssessmentModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName) {
        ServerVulnerabilityAssessmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName).toCompletable();
    }

}
