/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerAzureADAdministrators;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2018_06_01_preview.ServerAzureADAdministrator;
import com.microsoft.azure.Page;
import rx.Completable;

class ServerAzureADAdministratorsImpl extends WrapperImpl<ServerAzureADAdministratorsInner> implements ServerAzureADAdministrators {
    private final SqlManager manager;

    ServerAzureADAdministratorsImpl(SqlManager manager) {
        super(manager.inner().serverAzureADAdministrators());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public ServerAzureADAdministratorImpl defineAdministrator(String name) {
        return wrapAdministratorModel(name);
    }

    private ServerAzureADAdministratorImpl wrapAdministratorModel(String name) {
        return new ServerAzureADAdministratorImpl(name, this.manager());
    }

    private ServerAzureADAdministratorImpl wrapServerAzureADAdministratorModel(ServerAzureADAdministratorInner inner) {
        return  new ServerAzureADAdministratorImpl(inner, manager());
    }

    private Observable<ServerAzureADAdministratorInner> getServerAzureADAdministratorInnerUsingServerAzureADAdministratorsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String serverName = IdParsingUtils.getValueFromIdByName(id, "servers");
        ServerAzureADAdministratorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName);
    }

    @Override
    public Observable<ServerAzureADAdministrator> getAsync(String resourceGroupName, String serverName) {
        ServerAzureADAdministratorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName)
        .flatMap(new Func1<ServerAzureADAdministratorInner, Observable<ServerAzureADAdministrator>>() {
            @Override
            public Observable<ServerAzureADAdministrator> call(ServerAzureADAdministratorInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServerAzureADAdministrator)wrapServerAzureADAdministratorModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<ServerAzureADAdministrator> listByServerAsync(final String resourceGroupName, final String serverName) {
        ServerAzureADAdministratorsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMapIterable(new Func1<Page<ServerAzureADAdministratorInner>, Iterable<ServerAzureADAdministratorInner>>() {
            @Override
            public Iterable<ServerAzureADAdministratorInner> call(Page<ServerAzureADAdministratorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServerAzureADAdministratorInner, ServerAzureADAdministrator>() {
            @Override
            public ServerAzureADAdministrator call(ServerAzureADAdministratorInner inner) {
                return wrapServerAzureADAdministratorModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName) {
        ServerAzureADAdministratorsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName).toCompletable();
    }

}
