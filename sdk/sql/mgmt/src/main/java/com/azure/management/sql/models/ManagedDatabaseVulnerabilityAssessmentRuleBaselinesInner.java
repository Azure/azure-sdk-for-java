// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.sql.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.management.sql.DatabaseVulnerabilityAssessmentRuleBaselineItem;
import com.azure.management.sql.VulnerabilityAssessmentPolicyBaselineName;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ManagedDatabaseVulnerabilityAssessmentRuleBaselines.
 */
public final class ManagedDatabaseVulnerabilityAssessmentRuleBaselinesInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ManagedDatabaseVulnerabilityAssessmentRuleBaselinesService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of ManagedDatabaseVulnerabilityAssessmentRuleBaselinesInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ManagedDatabaseVulnerabilityAssessmentRuleBaselinesInner(SqlManagementClientImpl client) {
        this.service = RestProxy.create(ManagedDatabaseVulnerabilityAssessmentRuleBaselinesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * SqlManagementClientManagedDatabaseVulnerabilityAssessmentRuleBaselines
     * to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SqlManagementClientManagedDatabaseVulnerabilityAssessmentRuleBaselines")
    private interface ManagedDatabaseVulnerabilityAssessmentRuleBaselinesService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("managedInstanceName") String managedInstanceName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("managedInstanceName") String managedInstanceName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("application/json") DatabaseVulnerabilityAssessmentRuleBaselineInner parameters);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("managedInstanceName") String managedInstanceName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> getWithResponseAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.get(this.client.getHost(), resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseVulnerabilityAssessmentRuleBaselineInner> getAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return getWithResponseAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName)
            .flatMap((SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseVulnerabilityAssessmentRuleBaselineInner get(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return getAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName).block();
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> createOrUpdateWithResponseAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName, List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        DatabaseVulnerabilityAssessmentRuleBaselineInner parameters = new DatabaseVulnerabilityAssessmentRuleBaselineInner();
        parameters.withBaselineResults(baselineResults);
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.getSubscriptionId(), apiVersion, parameters);
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseVulnerabilityAssessmentRuleBaselineInner> createOrUpdateAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName, List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        return createOrUpdateWithResponseAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName, baselineResults)
            .flatMap((SimpleResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseVulnerabilityAssessmentRuleBaselineInner createOrUpdate(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName, List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        return createOrUpdateAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName, baselineResults).block();
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.delete(this.client.getHost(), resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return deleteWithResponseAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     * 
     * @param resourceGroupName 
     * @param managedInstanceName 
     * @param databaseName 
     * @param ruleId 
     * @param baselineName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String managedInstanceName, String databaseName, String ruleId, VulnerabilityAssessmentPolicyBaselineName baselineName) {
        deleteAsync(resourceGroupName, managedInstanceName, databaseName, ruleId, baselineName).block();
    }
}
