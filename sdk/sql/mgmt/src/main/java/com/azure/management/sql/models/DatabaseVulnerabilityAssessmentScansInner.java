// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.sql.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.polling.AsyncPollResponse;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * DatabaseVulnerabilityAssessmentScans.
 */
public final class DatabaseVulnerabilityAssessmentScansInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DatabaseVulnerabilityAssessmentScansService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of DatabaseVulnerabilityAssessmentScansInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DatabaseVulnerabilityAssessmentScansInner(SqlManagementClientImpl client) {
        this.service = RestProxy.create(DatabaseVulnerabilityAssessmentScansService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * SqlManagementClientDatabaseVulnerabilityAssessmentScans to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SqlManagementClientDatabaseVulnerabilityAssessmentScans")
    private interface DatabaseVulnerabilityAssessmentScansService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VulnerabilityAssessmentScanRecordListResultInner>> listByDatabase(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VulnerabilityAssessmentScanRecordInner>> get(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("scanId") String scanId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> initiateScan(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("scanId") String scanId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<DatabaseVulnerabilityAssessmentScansExportInner>> export(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("scanId") String scanId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<Response<Void>> beginInitiateScan(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("scanId") String scanId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<VulnerabilityAssessmentScanRecordListResultInner>> listByDatabaseNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Lists the vulnerability assessment scans of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<VulnerabilityAssessmentScanRecordInner>> listByDatabaseSinglePageAsync(String resourceGroupName, String serverName, String databaseName) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.listByDatabase(this.client.getHost(), resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, this.client.getSubscriptionId(), apiVersion)
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }

    /**
     * Lists the vulnerability assessment scans of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<VulnerabilityAssessmentScanRecordInner> listByDatabaseAsync(String resourceGroupName, String serverName, String databaseName) {
        return new PagedFlux<>(
            () -> listByDatabaseSinglePageAsync(resourceGroupName, serverName, databaseName),
            nextLink -> listByDatabaseNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the vulnerability assessment scans of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<VulnerabilityAssessmentScanRecordInner> listByDatabase(String resourceGroupName, String serverName, String databaseName) {
        return new PagedIterable<>(listByDatabaseAsync(resourceGroupName, serverName, databaseName));
    }

    /**
     * Gets a vulnerability assessment scan record of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VulnerabilityAssessmentScanRecordInner>> getWithResponseAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.get(this.client.getHost(), resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Gets a vulnerability assessment scan record of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VulnerabilityAssessmentScanRecordInner> getAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        return getWithResponseAsync(resourceGroupName, serverName, databaseName, scanId)
            .flatMap((SimpleResponse<VulnerabilityAssessmentScanRecordInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets a vulnerability assessment scan record of a database.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VulnerabilityAssessmentScanRecordInner get(String resourceGroupName, String serverName, String databaseName, String scanId) {
        return getAsync(resourceGroupName, serverName, databaseName, scanId).block();
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> initiateScanWithResponseAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.initiateScan(this.client.getHost(), resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> initiateScanAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> mono = initiateScanWithResponseAsync(resourceGroupName, serverName, databaseName, scanId);
        return this.client.<Void, Void>getLroResultAsync(mono, this.client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void initiateScan(String resourceGroupName, String serverName, String databaseName, String scanId) {
        initiateScanAsync(resourceGroupName, serverName, databaseName, scanId).block();
    }

    /**
     * Convert an existing scan result to a human readable format. If already exists nothing happens.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DatabaseVulnerabilityAssessmentScansExportInner>> exportWithResponseAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.export(this.client.getHost(), resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Convert an existing scan result to a human readable format. If already exists nothing happens.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DatabaseVulnerabilityAssessmentScansExportInner> exportAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        return exportWithResponseAsync(resourceGroupName, serverName, databaseName, scanId)
            .flatMap((SimpleResponse<DatabaseVulnerabilityAssessmentScansExportInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Convert an existing scan result to a human readable format. If already exists nothing happens.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseVulnerabilityAssessmentScansExportInner export(String resourceGroupName, String serverName, String databaseName, String scanId) {
        return exportAsync(resourceGroupName, serverName, databaseName, scanId).block();
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginInitiateScanWithResponseAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-10-01-preview";
        return service.beginInitiateScan(this.client.getHost(), resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, this.client.getSubscriptionId(), apiVersion);
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginInitiateScanAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        return beginInitiateScanWithResponseAsync(resourceGroupName, serverName, databaseName, scanId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Executes a Vulnerability Assessment database scan.
     * 
     * @param resourceGroupName 
     * @param serverName 
     * @param databaseName 
     * @param scanId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginInitiateScan(String resourceGroupName, String serverName, String databaseName, String scanId) {
        beginInitiateScanAsync(resourceGroupName, serverName, databaseName, scanId).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<VulnerabilityAssessmentScanRecordInner>> listByDatabaseNextSinglePageAsync(String nextLink) {
        return service.listByDatabaseNext(nextLink)
            .map(res -> new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().value(),
                res.getValue().nextLink(),
                null));
    }
}
