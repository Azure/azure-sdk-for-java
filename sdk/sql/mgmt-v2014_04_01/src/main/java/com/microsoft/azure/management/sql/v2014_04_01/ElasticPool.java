/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.ElasticPoolInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.SqlManager;
import java.util.Map;
import org.joda.time.DateTime;

/**
 * Type representing ElasticPool.
 */
public interface ElasticPool extends HasInner<ElasticPoolInner>, Indexable, Refreshable<ElasticPool>, Updatable<ElasticPool.Update>, HasManager<SqlManager> {
    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the databaseDtuMax value.
     */
    Integer databaseDtuMax();

    /**
     * @return the databaseDtuMin value.
     */
    Integer databaseDtuMin();

    /**
     * @return the dtu value.
     */
    Integer dtu();

    /**
     * @return the edition value.
     */
    ElasticPoolEdition edition();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the state value.
     */
    ElasticPoolState state();

    /**
     * @return the storageMB value.
     */
    Integer storageMB();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * The entirety of the ElasticPool definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ElasticPool definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ElasticPool definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the elasticpool definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server
            * @return the next definition stage
            */
            WithLocation withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the elasticpool definition allowing to specify DatabaseDtuMax.
         */
        interface WithDatabaseDtuMax {
            /**
             * Specifies databaseDtuMax.
             * @param databaseDtuMax The maximum DTU any one database can consume
             * @return the next definition stage
             */
            WithCreate withDatabaseDtuMax(Integer databaseDtuMax);
        }

        /**
         * The stage of the elasticpool definition allowing to specify DatabaseDtuMin.
         */
        interface WithDatabaseDtuMin {
            /**
             * Specifies databaseDtuMin.
             * @param databaseDtuMin The minimum DTU all databases are guaranteed
             * @return the next definition stage
             */
            WithCreate withDatabaseDtuMin(Integer databaseDtuMin);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Dtu.
         */
        interface WithDtu {
            /**
             * Specifies dtu.
             * @param dtu The total shared DTU for the database elastic pool
             * @return the next definition stage
             */
            WithCreate withDtu(Integer dtu);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             * @param edition The edition of the elastic pool. Possible values include: 'Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical'
             * @return the next definition stage
             */
            WithCreate withEdition(ElasticPoolEdition edition);
        }

        /**
         * The stage of the elasticpool definition allowing to specify StorageMB.
         */
        interface WithStorageMB {
            /**
             * Specifies storageMB.
             * @param storageMB Gets storage limit for the database elastic pool in MB
             * @return the next definition stage
             */
            WithCreate withStorageMB(Integer storageMB);
        }

        /**
         * The stage of the elasticpool definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the elasticpool definition allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next definition stage
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ElasticPool>, DefinitionStages.WithDatabaseDtuMax, DefinitionStages.WithDatabaseDtuMin, DefinitionStages.WithDtu, DefinitionStages.WithEdition, DefinitionStages.WithStorageMB, DefinitionStages.WithTags, DefinitionStages.WithZoneRedundant {
        }
    }
    /**
     * The template for a ElasticPool update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ElasticPool>, UpdateStages.WithDatabaseDtuMax, UpdateStages.WithDatabaseDtuMin, UpdateStages.WithDtu, UpdateStages.WithEdition, UpdateStages.WithStorageMB, UpdateStages.WithTags, UpdateStages.WithZoneRedundant {
    }

    /**
     * Grouping of ElasticPool update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the elasticpool update allowing to specify DatabaseDtuMax.
         */
        interface WithDatabaseDtuMax {
            /**
             * Specifies databaseDtuMax.
             * @param databaseDtuMax The maximum DTU any one database can consume
             * @return the next update stage
             */
            Update withDatabaseDtuMax(Integer databaseDtuMax);
        }

        /**
         * The stage of the elasticpool update allowing to specify DatabaseDtuMin.
         */
        interface WithDatabaseDtuMin {
            /**
             * Specifies databaseDtuMin.
             * @param databaseDtuMin The minimum DTU all databases are guaranteed
             * @return the next update stage
             */
            Update withDatabaseDtuMin(Integer databaseDtuMin);
        }

        /**
         * The stage of the elasticpool update allowing to specify Dtu.
         */
        interface WithDtu {
            /**
             * Specifies dtu.
             * @param dtu The total shared DTU for the database elastic pool
             * @return the next update stage
             */
            Update withDtu(Integer dtu);
        }

        /**
         * The stage of the elasticpool update allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             * @param edition The edition of the elastic pool. Possible values include: 'Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical'
             * @return the next update stage
             */
            Update withEdition(ElasticPoolEdition edition);
        }

        /**
         * The stage of the elasticpool update allowing to specify StorageMB.
         */
        interface WithStorageMB {
            /**
             * Specifies storageMB.
             * @param storageMB Gets storage limit for the database elastic pool in MB
             * @return the next update stage
             */
            Update withStorageMB(Integer storageMB);
        }

        /**
         * The stage of the elasticpool update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the elasticpool update allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next update stage
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }

    }
}
