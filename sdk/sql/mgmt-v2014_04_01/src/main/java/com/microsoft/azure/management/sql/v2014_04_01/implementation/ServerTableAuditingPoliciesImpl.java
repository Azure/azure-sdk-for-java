/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.ServerTableAuditingPolicies;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2014_04_01.ServerTableAuditingPolicyListResult;
import com.microsoft.azure.management.sql.v2014_04_01.ServerTableAuditingPolicy;

class ServerTableAuditingPoliciesImpl extends WrapperImpl<ServerTableAuditingPoliciesInner> implements ServerTableAuditingPolicies {
    private final SqlManager manager;

    ServerTableAuditingPoliciesImpl(SqlManager manager) {
        super(manager.inner().serverTableAuditingPolicies());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public ServerTableAuditingPolicyImpl define(String name) {
        return wrapModel(name);
    }

    private ServerTableAuditingPolicyImpl wrapModel(ServerTableAuditingPolicyInner inner) {
        return  new ServerTableAuditingPolicyImpl(inner, manager());
    }

    private ServerTableAuditingPolicyImpl wrapModel(String name) {
        return new ServerTableAuditingPolicyImpl(name, this.manager());
    }

    @Override
    public Observable<ServerTableAuditingPolicyListResult> listByServerAsync(String resourceGroupName, String serverName) {
        ServerTableAuditingPoliciesInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .map(new Func1<ServerTableAuditingPolicyListResultInner, ServerTableAuditingPolicyListResult>() {
            @Override
            public ServerTableAuditingPolicyListResult call(ServerTableAuditingPolicyListResultInner inner) {
                return new ServerTableAuditingPolicyListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ServerTableAuditingPolicy> getAsync(String resourceGroupName, String serverName) {
        ServerTableAuditingPoliciesInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName)
        .flatMap(new Func1<ServerTableAuditingPolicyInner, Observable<ServerTableAuditingPolicy>>() {
            @Override
            public Observable<ServerTableAuditingPolicy> call(ServerTableAuditingPolicyInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServerTableAuditingPolicy)wrapModel(inner));
                }
            }
       });
    }

}
