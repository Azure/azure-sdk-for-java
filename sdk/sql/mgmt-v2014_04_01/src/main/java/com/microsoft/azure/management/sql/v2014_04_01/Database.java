/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.DatabaseInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.SqlManager;
import java.util.Map;
import org.joda.time.DateTime;
import java.util.UUID;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.ServiceTierAdvisorInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.TransparentDataEncryptionInner;

/**
 * Type representing Database.
 */
public interface Database extends HasInner<DatabaseInner>, Indexable, Refreshable<Database>, Updatable<Database.Update>, HasManager<SqlManager> {
    /**
     * @return the collation value.
     */
    String collation();

    /**
     * @return the containmentState value.
     */
    Long containmentState();

    /**
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the currentServiceObjectiveId value.
     */
    UUID currentServiceObjectiveId();

    /**
     * @return the databaseId value.
     */
    UUID databaseId();

    /**
     * @return the defaultSecondaryLocation value.
     */
    String defaultSecondaryLocation();

    /**
     * @return the earliestRestoreDate value.
     */
    DateTime earliestRestoreDate();

    /**
     * @return the edition value.
     */
    DatabaseEdition edition();

    /**
     * @return the elasticPoolName value.
     */
    String elasticPoolName();

    /**
     * @return the failoverGroupId value.
     */
    String failoverGroupId();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the maxSizeBytes value.
     */
    String maxSizeBytes();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the readScale value.
     */
    ReadScale readScale();

    /**
     * @return the recommendedIndex value.
     */
    List<RecommendedIndex> recommendedIndex();

    /**
     * @return the recoveryServicesRecoveryPointResourceId value.
     */
    String recoveryServicesRecoveryPointResourceId();

    /**
     * @return the requestedServiceObjectiveId value.
     */
    UUID requestedServiceObjectiveId();

    /**
     * @return the requestedServiceObjectiveName value.
     */
    ServiceObjectiveName requestedServiceObjectiveName();

    /**
     * @return the restorePointInTime value.
     */
    DateTime restorePointInTime();

    /**
     * @return the sampleName value.
     */
    SampleName sampleName();

    /**
     * @return the serviceLevelObjective value.
     */
    ServiceObjectiveName serviceLevelObjective();

    /**
     * @return the serviceTierAdvisors value.
     */
    List<ServiceTierAdvisor> serviceTierAdvisors();

    /**
     * @return the sourceDatabaseDeletionDate value.
     */
    DateTime sourceDatabaseDeletionDate();

    /**
     * @return the sourceDatabaseId value.
     */
    String sourceDatabaseId();

    /**
     * @return the status value.
     */
    String status();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the transparentDataEncryption value.
     */
    List<TransparentDataEncryption> transparentDataEncryption();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * The entirety of the Database definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Database definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Database definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the database definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server
            * @return the next definition stage
            */
            WithLocation withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the database definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the database definition allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             * @param collation The collation of the database. If createMode is not Default, this value is ignored
             * @return the next definition stage
             */
            WithCreate withCollation(String collation);
        }

        /**
         * The stage of the database definition allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             * @param createMode Specifies the mode of database creation.
 Default: regular database creation.
 Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition. Possible values include: 'Copy', 'Default', 'NonReadableSecondary', 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore', 'RestoreLongTermRetentionBackup'
             * @return the next definition stage
             */
            WithCreate withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database definition allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             * @param edition The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
 The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 ```azurecli
 az sql db list-editions -l &lt;location&gt; -o table
 ````
 ```powershell
 Get-AzSqlServerServiceObjective -Location &lt;location&gt;
 ````
 . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical', 'Hyperscale'
             * @return the next definition stage
             */
            WithCreate withEdition(DatabaseEdition edition);
        }

        /**
         * The stage of the database definition allowing to specify ElasticPoolName.
         */
        interface WithElasticPoolName {
            /**
             * Specifies elasticPoolName.
             * @param elasticPoolName The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition
             * @return the next definition stage
             */
            WithCreate withElasticPoolName(String elasticPoolName);
        }

        /**
         * The stage of the database definition allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             * @param maxSizeBytes The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation."
             * @return the next definition stage
             */
            WithCreate withMaxSizeBytes(String maxSizeBytes);
        }

        /**
         * The stage of the database definition allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             * @param readScale Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withReadScale(ReadScale readScale);
        }

        /**
         * The stage of the database definition allowing to specify RecoveryServicesRecoveryPointResourceId.
         */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies recoveryServicesRecoveryPointResourceId.
             * @param recoveryServicesRecoveryPointResourceId Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from
             * @return the next definition stage
             */
            WithCreate withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }

        /**
         * The stage of the database definition allowing to specify RequestedServiceObjectiveId.
         */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies requestedServiceObjectiveId.
             * @param requestedServiceObjectiveId The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
 The list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API
             * @return the next definition stage
             */
            WithCreate withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }

        /**
         * The stage of the database definition allowing to specify RequestedServiceObjectiveName.
         */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies requestedServiceObjectiveName.
             * @param requestedServiceObjectiveName The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.
 The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 ```azurecli
 az sql db list-editions -l &lt;location&gt; -o table
 ````
 ```powershell
 Get-AzSqlServerServiceObjective -Location &lt;location&gt;
 ````
 . Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
             * @return the next definition stage
             */
            WithCreate withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }

        /**
         * The stage of the database definition allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             * @param restorePointInTime Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value
             * @return the next definition stage
             */
            WithCreate withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database definition allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             * @param sampleName Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition. Possible values include: 'AdventureWorksLT'
             * @return the next definition stage
             */
            WithCreate withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             * @param sourceDatabaseDeletionDate Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted
             * @return the next definition stage
             */
            WithCreate withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             * @param sourceDatabaseId Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created
             * @return the next definition stage
             */
            WithCreate withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database definition allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next definition stage
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Database>, DefinitionStages.WithCollation, DefinitionStages.WithCreateMode, DefinitionStages.WithEdition, DefinitionStages.WithElasticPoolName, DefinitionStages.WithMaxSizeBytes, DefinitionStages.WithReadScale, DefinitionStages.WithRecoveryServicesRecoveryPointResourceId, DefinitionStages.WithRequestedServiceObjectiveId, DefinitionStages.WithRequestedServiceObjectiveName, DefinitionStages.WithRestorePointInTime, DefinitionStages.WithSampleName, DefinitionStages.WithSourceDatabaseDeletionDate, DefinitionStages.WithSourceDatabaseId, DefinitionStages.WithTags, DefinitionStages.WithZoneRedundant {
        }
    }
    /**
     * The template for a Database update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Database>, UpdateStages.WithCollation, UpdateStages.WithCreateMode, UpdateStages.WithEdition, UpdateStages.WithElasticPoolName, UpdateStages.WithMaxSizeBytes, UpdateStages.WithReadScale, UpdateStages.WithRecoveryServicesRecoveryPointResourceId, UpdateStages.WithRequestedServiceObjectiveId, UpdateStages.WithRequestedServiceObjectiveName, UpdateStages.WithRestorePointInTime, UpdateStages.WithSampleName, UpdateStages.WithSourceDatabaseDeletionDate, UpdateStages.WithSourceDatabaseId, UpdateStages.WithTags, UpdateStages.WithZoneRedundant {
    }

    /**
     * Grouping of Database update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the database update allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             * @param collation The collation of the database. If createMode is not Default, this value is ignored
             * @return the next update stage
             */
            Update withCollation(String collation);
        }

        /**
         * The stage of the database update allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             * @param createMode Specifies the mode of database creation.
 Default: regular database creation.
 Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition. Possible values include: 'Copy', 'Default', 'NonReadableSecondary', 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore', 'RestoreLongTermRetentionBackup'
             * @return the next update stage
             */
            Update withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database update allowing to specify Edition.
         */
        interface WithEdition {
            /**
             * Specifies edition.
             * @param edition The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
 The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 ```azurecli
 az sql db list-editions -l &lt;location&gt; -o table
 ````
 ```powershell
 Get-AzSqlServerServiceObjective -Location &lt;location&gt;
 ````
 . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical', 'Hyperscale'
             * @return the next update stage
             */
            Update withEdition(DatabaseEdition edition);
        }

        /**
         * The stage of the database update allowing to specify ElasticPoolName.
         */
        interface WithElasticPoolName {
            /**
             * Specifies elasticPoolName.
             * @param elasticPoolName The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition
             * @return the next update stage
             */
            Update withElasticPoolName(String elasticPoolName);
        }

        /**
         * The stage of the database update allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             * @param maxSizeBytes The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: "Capabilities_ListByLocation."
             * @return the next update stage
             */
            Update withMaxSizeBytes(String maxSizeBytes);
        }

        /**
         * The stage of the database update allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             * @param readScale Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withReadScale(ReadScale readScale);
        }

        /**
         * The stage of the database update allowing to specify RecoveryServicesRecoveryPointResourceId.
         */
        interface WithRecoveryServicesRecoveryPointResourceId {
            /**
             * Specifies recoveryServicesRecoveryPointResourceId.
             * @param recoveryServicesRecoveryPointResourceId Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from
             * @return the next update stage
             */
            Update withRecoveryServicesRecoveryPointResourceId(String recoveryServicesRecoveryPointResourceId);
        }

        /**
         * The stage of the database update allowing to specify RequestedServiceObjectiveId.
         */
        interface WithRequestedServiceObjectiveId {
            /**
             * Specifies requestedServiceObjectiveId.
             * @param requestedServiceObjectiveId The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.
 The list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API
             * @return the next update stage
             */
            Update withRequestedServiceObjectiveId(UUID requestedServiceObjectiveId);
        }

        /**
         * The stage of the database update allowing to specify RequestedServiceObjectiveName.
         */
        interface WithRequestedServiceObjectiveName {
            /**
             * Specifies requestedServiceObjectiveName.
             * @param requestedServiceObjectiveName The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.
 The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 ```azurecli
 az sql db list-editions -l &lt;location&gt; -o table
 ````
 ```powershell
 Get-AzSqlServerServiceObjective -Location &lt;location&gt;
 ````
 . Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
             * @return the next update stage
             */
            Update withRequestedServiceObjectiveName(ServiceObjectiveName requestedServiceObjectiveName);
        }

        /**
         * The stage of the database update allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             * @param restorePointInTime Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value
             * @return the next update stage
             */
            Update withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database update allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             * @param sampleName Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition. Possible values include: 'AdventureWorksLT'
             * @return the next update stage
             */
            Update withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             * @param sourceDatabaseDeletionDate Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted
             * @return the next update stage
             */
            Update withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             * @param sourceDatabaseId Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created
             * @return the next update stage
             */
            Update withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database update allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next update stage
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }

    }
}
