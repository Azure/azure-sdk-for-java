/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.RecommendedElasticPools;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.RecommendedElasticPool;
import com.microsoft.azure.management.sql.v2014_04_01.RecommendedElasticPoolMetric;

class RecommendedElasticPoolsImpl extends WrapperImpl<RecommendedElasticPoolsInner> implements RecommendedElasticPools {
    private final SqlManager manager;

    RecommendedElasticPoolsImpl(SqlManager manager) {
        super(manager.inner().recommendedElasticPools());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private RecommendedElasticPoolImpl wrapModel(RecommendedElasticPoolInner inner) {
        return  new RecommendedElasticPoolImpl(inner, manager());
    }

    @Override
    public Observable<RecommendedElasticPool> listByServerAsync(String resourceGroupName, String serverName) {
        RecommendedElasticPoolsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMap(new Func1<List<RecommendedElasticPoolInner>, Observable<RecommendedElasticPoolInner>>() {
            @Override
            public Observable<RecommendedElasticPoolInner> call(List<RecommendedElasticPoolInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RecommendedElasticPoolInner, RecommendedElasticPool>() {
            @Override
            public RecommendedElasticPool call(RecommendedElasticPoolInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RecommendedElasticPool> getAsync(String resourceGroupName, String serverName, String recommendedElasticPoolName) {
        RecommendedElasticPoolsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, recommendedElasticPoolName)
        .flatMap(new Func1<RecommendedElasticPoolInner, Observable<RecommendedElasticPool>>() {
            @Override
            public Observable<RecommendedElasticPool> call(RecommendedElasticPoolInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RecommendedElasticPool)wrapModel(inner));
                }
            }
       });
    }

    private RecommendedElasticPoolMetricImpl wrapRecommendedElasticPoolMetricModel(RecommendedElasticPoolMetricInner inner) {
        return  new RecommendedElasticPoolMetricImpl(inner, manager());
    }

    @Override
    public Observable<RecommendedElasticPoolMetric> listMetricsAsync(String resourceGroupName, String serverName, String recommendedElasticPoolName) {
        RecommendedElasticPoolsInner client = this.inner();
        return client.listMetricsAsync(resourceGroupName, serverName, recommendedElasticPoolName)
        .flatMap(new Func1<List<RecommendedElasticPoolMetricInner>, Observable<RecommendedElasticPoolMetricInner>>() {
            @Override
            public Observable<RecommendedElasticPoolMetricInner> call(List<RecommendedElasticPoolMetricInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RecommendedElasticPoolMetricInner, RecommendedElasticPoolMetric>() {
            @Override
            public RecommendedElasticPoolMetric call(RecommendedElasticPoolMetricInner inner) {
                return wrapRecommendedElasticPoolMetricModel(inner);
            }
        });
    }

}
