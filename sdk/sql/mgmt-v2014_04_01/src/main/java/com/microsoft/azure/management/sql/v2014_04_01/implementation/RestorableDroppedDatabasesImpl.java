/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.RestorableDroppedDatabases;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.RestorableDroppedDatabase;

class RestorableDroppedDatabasesImpl extends WrapperImpl<RestorableDroppedDatabasesInner> implements RestorableDroppedDatabases {
    private final SqlManager manager;

    RestorableDroppedDatabasesImpl(SqlManager manager) {
        super(manager.inner().restorableDroppedDatabases());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private RestorableDroppedDatabaseImpl wrapModel(RestorableDroppedDatabaseInner inner) {
        return  new RestorableDroppedDatabaseImpl(inner, manager());
    }

    @Override
    public Observable<RestorableDroppedDatabase> listByServerAsync(String resourceGroupName, String serverName) {
        RestorableDroppedDatabasesInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMap(new Func1<List<RestorableDroppedDatabaseInner>, Observable<RestorableDroppedDatabaseInner>>() {
            @Override
            public Observable<RestorableDroppedDatabaseInner> call(List<RestorableDroppedDatabaseInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RestorableDroppedDatabaseInner, RestorableDroppedDatabase>() {
            @Override
            public RestorableDroppedDatabase call(RestorableDroppedDatabaseInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RestorableDroppedDatabase> getAsync(String resourceGroupName, String serverName, String restorableDroppededDatabaseId) {
        RestorableDroppedDatabasesInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, restorableDroppededDatabaseId)
        .flatMap(new Func1<RestorableDroppedDatabaseInner, Observable<RestorableDroppedDatabase>>() {
            @Override
            public Observable<RestorableDroppedDatabase> call(RestorableDroppedDatabaseInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RestorableDroppedDatabase)wrapModel(inner));
                }
            }
       });
    }

}
