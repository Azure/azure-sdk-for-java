/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.DataMaskingRule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2014_04_01.DataMaskingRuleState;
import com.microsoft.azure.management.sql.v2014_04_01.DataMaskingFunction;

class DataMaskingRuleImpl extends CreatableUpdatableImpl<DataMaskingRule, DataMaskingRuleInner, DataMaskingRuleImpl> implements DataMaskingRule, DataMaskingRule.Definition, DataMaskingRule.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;
    private String dataMaskingRuleName;

    DataMaskingRuleImpl(String name, SqlManager manager) {
        super(name, new DataMaskingRuleInner());
        this.manager = manager;
        // Set resource name
        this.dataMaskingRuleName = name;
        //
    }

    DataMaskingRuleImpl(DataMaskingRuleInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.dataMaskingRuleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.dataMaskingRuleName = IdParsingUtils.getValueFromIdByName(inner.id(), "rules");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DataMaskingRule> createResourceAsync() {
        DataMaskingRulesInner client = this.manager().inner().dataMaskingRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.dataMaskingRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataMaskingRule> updateResourceAsync() {
        DataMaskingRulesInner client = this.manager().inner().dataMaskingRules();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.dataMaskingRuleName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataMaskingRuleInner> getInnerAsync() {
        DataMaskingRulesInner client = this.manager().inner().dataMaskingRules();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String aliasName() {
        return this.inner().aliasName();
    }

    @Override
    public String columnName() {
        return this.inner().columnName();
    }

    @Override
    public String dataMaskingRuleId() {
        return this.inner().dataMaskingRuleId();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public DataMaskingFunction maskingFunction() {
        return this.inner().maskingFunction();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String numberFrom() {
        return this.inner().numberFrom();
    }

    @Override
    public String numberTo() {
        return this.inner().numberTo();
    }

    @Override
    public String prefixSize() {
        return this.inner().prefixSize();
    }

    @Override
    public String replacementString() {
        return this.inner().replacementString();
    }

    @Override
    public DataMaskingRuleState ruleState() {
        return this.inner().ruleState();
    }

    @Override
    public String schemaName() {
        return this.inner().schemaName();
    }

    @Override
    public String suffixSize() {
        return this.inner().suffixSize();
    }

    @Override
    public String tableName() {
        return this.inner().tableName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DataMaskingRuleImpl withExistingDataMaskingPolicy(String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public DataMaskingRuleImpl withColumnName(String columnName) {
        this.inner().withColumnName(columnName);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withMaskingFunction(DataMaskingFunction maskingFunction) {
        this.inner().withMaskingFunction(maskingFunction);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withSchemaName(String schemaName) {
        this.inner().withSchemaName(schemaName);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withTableName(String tableName) {
        this.inner().withTableName(tableName);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withAliasName(String aliasName) {
        this.inner().withAliasName(aliasName);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withNumberFrom(String numberFrom) {
        this.inner().withNumberFrom(numberFrom);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withNumberTo(String numberTo) {
        this.inner().withNumberTo(numberTo);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withPrefixSize(String prefixSize) {
        this.inner().withPrefixSize(prefixSize);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withReplacementString(String replacementString) {
        this.inner().withReplacementString(replacementString);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withRuleState(DataMaskingRuleState ruleState) {
        this.inner().withRuleState(ruleState);
        return this;
    }

    @Override
    public DataMaskingRuleImpl withSuffixSize(String suffixSize) {
        this.inner().withSuffixSize(suffixSize);
        return this;
    }

}
