/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.ServiceTierAdvisors;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.ServiceTierAdvisor;

class ServiceTierAdvisorsImpl extends WrapperImpl<ServiceTierAdvisorsInner> implements ServiceTierAdvisors {
    private final SqlManager manager;

    ServiceTierAdvisorsImpl(SqlManager manager) {
        super(manager.inner().serviceTierAdvisors());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private ServiceTierAdvisorImpl wrapModel(ServiceTierAdvisorInner inner) {
        return  new ServiceTierAdvisorImpl(inner, manager());
    }

    @Override
    public Observable<ServiceTierAdvisor> listByDatabaseAsync(String resourceGroupName, String serverName, String databaseName) {
        ServiceTierAdvisorsInner client = this.inner();
        return client.listByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .flatMap(new Func1<List<ServiceTierAdvisorInner>, Observable<ServiceTierAdvisorInner>>() {
            @Override
            public Observable<ServiceTierAdvisorInner> call(List<ServiceTierAdvisorInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ServiceTierAdvisorInner, ServiceTierAdvisor>() {
            @Override
            public ServiceTierAdvisor call(ServiceTierAdvisorInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ServiceTierAdvisor> getAsync(String resourceGroupName, String serverName, String databaseName, String serviceTierAdvisorName) {
        ServiceTierAdvisorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, serviceTierAdvisorName)
        .flatMap(new Func1<ServiceTierAdvisorInner, Observable<ServiceTierAdvisor>>() {
            @Override
            public Observable<ServiceTierAdvisor> call(ServiceTierAdvisorInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServiceTierAdvisor)wrapModel(inner));
                }
            }
       });
    }

}
