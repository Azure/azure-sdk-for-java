/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.DatabaseAdvisors;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2014_04_01.AdvisorListResult;
import com.microsoft.azure.management.sql.v2014_04_01.DatabasisServerAdvisor;

class DatabaseAdvisorsImpl extends WrapperImpl<DatabaseAdvisorsInner> implements DatabaseAdvisors {
    private final SqlManager manager;

    DatabaseAdvisorsImpl(SqlManager manager) {
        super(manager.inner().databaseAdvisors());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public DatabasisServerAdvisorImpl define(String name) {
        return wrapModel(name);
    }

    private DatabasisServerAdvisorImpl wrapModel(AdvisorInner inner) {
        return  new DatabasisServerAdvisorImpl(inner, manager());
    }

    private DatabasisServerAdvisorImpl wrapModel(String name) {
        return new DatabasisServerAdvisorImpl(name, this.manager());
    }

    @Override
    public Observable<AdvisorListResult> listByDatabaseAsync(String resourceGroupName, String serverName, String databaseName) {
        DatabaseAdvisorsInner client = this.inner();
        return client.listByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .map(new Func1<AdvisorListResultInner, AdvisorListResult>() {
            @Override
            public AdvisorListResult call(AdvisorListResultInner inner) {
                return new AdvisorListResultImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<DatabasisServerAdvisor> getAsync(String resourceGroupName, String serverName, String databaseName, String advisorName) {
        DatabaseAdvisorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, advisorName)
        .flatMap(new Func1<AdvisorInner, Observable<DatabasisServerAdvisor>>() {
            @Override
            public Observable<DatabasisServerAdvisor> call(AdvisorInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DatabasisServerAdvisor)wrapModel(inner));
                }
            }
       });
    }

}
