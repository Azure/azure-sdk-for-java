/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.DatabaseSecurityAlertPolicyInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2014_04_01.implementation.SqlManager;

/**
 * Type representing DatabaseSecurityAlertPolicy.
 */
public interface DatabaseSecurityAlertPolicy extends HasInner<DatabaseSecurityAlertPolicyInner>, Indexable, Refreshable<DatabaseSecurityAlertPolicy>, Updatable<DatabaseSecurityAlertPolicy.Update>, HasManager<SqlManager> {
    /**
     * @return the disabledAlerts value.
     */
    String disabledAlerts();

    /**
     * @return the emailAccountAdmins value.
     */
    SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins();

    /**
     * @return the emailAddresses value.
     */
    String emailAddresses();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the retentionDays value.
     */
    Integer retentionDays();

    /**
     * @return the state value.
     */
    SecurityAlertPolicyState state();

    /**
     * @return the storageAccountAccessKey value.
     */
    String storageAccountAccessKey();

    /**
     * @return the storageEndpoint value.
     */
    String storageEndpoint();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the useServerDefault value.
     */
    SecurityAlertPolicyUseServerDefault useServerDefault();

    /**
     * The entirety of the DatabaseSecurityAlertPolicy definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabasis, DefinitionStages.WithState, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of DatabaseSecurityAlertPolicy definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a DatabaseSecurityAlertPolicy definition.
         */
        interface Blank extends WithDatabasis {
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify Databasis.
         */
        interface WithDatabasis {
           /**
            * Specifies resourceGroupName, serverName, databaseName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server
            * @param databaseName The name of the database for which database Threat Detection policy is defined
            * @return the next definition stage
            */
            WithState withExistingDatabasis(String resourceGroupName, String serverName, String databaseName);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify State.
         */
        interface WithState {
           /**
            * Specifies state.
            * @param state Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required. Possible values include: 'New', 'Enabled', 'Disabled'
            * @return the next definition stage
            */
            WithCreate withState(SecurityAlertPolicyState state);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify DisabledAlerts.
         */
        interface WithDisabledAlerts {
            /**
             * Specifies disabledAlerts.
             * @param disabledAlerts Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action
             * @return the next definition stage
             */
            WithCreate withDisabledAlerts(String disabledAlerts);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify EmailAccountAdmins.
         */
        interface WithEmailAccountAdmins {
            /**
             * Specifies emailAccountAdmins.
             * @param emailAccountAdmins Specifies that the alert is sent to the account administrators. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withEmailAccountAdmins(SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify EmailAddresses.
         */
        interface WithEmailAddresses {
            /**
             * Specifies emailAddresses.
             * @param emailAddresses Specifies the semicolon-separated list of e-mail addresses to which the alert is sent
             * @return the next definition stage
             */
            WithCreate withEmailAddresses(String emailAddresses);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location The geo-location where the resource lives
             * @return the next definition stage
             */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify RetentionDays.
         */
        interface WithRetentionDays {
            /**
             * Specifies retentionDays.
             * @param retentionDays Specifies the number of days to keep in the Threat Detection audit logs
             * @return the next definition stage
             */
            WithCreate withRetentionDays(Integer retentionDays);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify StorageAccountAccessKey.
         */
        interface WithStorageAccountAccessKey {
            /**
             * Specifies storageAccountAccessKey.
             * @param storageAccountAccessKey Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required
             * @return the next definition stage
             */
            WithCreate withStorageAccountAccessKey(String storageAccountAccessKey);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify StorageEndpoint.
         */
        interface WithStorageEndpoint {
            /**
             * Specifies storageEndpoint.
             * @param storageEndpoint Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required
             * @return the next definition stage
             */
            WithCreate withStorageEndpoint(String storageEndpoint);
        }

        /**
         * The stage of the databasesecurityalertpolicy definition allowing to specify UseServerDefault.
         */
        interface WithUseServerDefault {
            /**
             * Specifies useServerDefault.
             * @param useServerDefault Specifies whether to use the default server policy. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withUseServerDefault(SecurityAlertPolicyUseServerDefault useServerDefault);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<DatabaseSecurityAlertPolicy>, DefinitionStages.WithDisabledAlerts, DefinitionStages.WithEmailAccountAdmins, DefinitionStages.WithEmailAddresses, DefinitionStages.WithLocation, DefinitionStages.WithRetentionDays, DefinitionStages.WithStorageAccountAccessKey, DefinitionStages.WithStorageEndpoint, DefinitionStages.WithUseServerDefault {
        }
    }
    /**
     * The template for a DatabaseSecurityAlertPolicy update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<DatabaseSecurityAlertPolicy>, UpdateStages.WithDisabledAlerts, UpdateStages.WithEmailAccountAdmins, UpdateStages.WithEmailAddresses, UpdateStages.WithLocation, UpdateStages.WithRetentionDays, UpdateStages.WithStorageAccountAccessKey, UpdateStages.WithStorageEndpoint, UpdateStages.WithUseServerDefault {
    }

    /**
     * Grouping of DatabaseSecurityAlertPolicy update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify DisabledAlerts.
         */
        interface WithDisabledAlerts {
            /**
             * Specifies disabledAlerts.
             * @param disabledAlerts Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration; Unsafe_Action
             * @return the next update stage
             */
            Update withDisabledAlerts(String disabledAlerts);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify EmailAccountAdmins.
         */
        interface WithEmailAccountAdmins {
            /**
             * Specifies emailAccountAdmins.
             * @param emailAccountAdmins Specifies that the alert is sent to the account administrators. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withEmailAccountAdmins(SecurityAlertPolicyEmailAccountAdmins emailAccountAdmins);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify EmailAddresses.
         */
        interface WithEmailAddresses {
            /**
             * Specifies emailAddresses.
             * @param emailAddresses Specifies the semicolon-separated list of e-mail addresses to which the alert is sent
             * @return the next update stage
             */
            Update withEmailAddresses(String emailAddresses);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location The geo-location where the resource lives
             * @return the next update stage
             */
            Update withLocation(String location);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify RetentionDays.
         */
        interface WithRetentionDays {
            /**
             * Specifies retentionDays.
             * @param retentionDays Specifies the number of days to keep in the Threat Detection audit logs
             * @return the next update stage
             */
            Update withRetentionDays(Integer retentionDays);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify StorageAccountAccessKey.
         */
        interface WithStorageAccountAccessKey {
            /**
             * Specifies storageAccountAccessKey.
             * @param storageAccountAccessKey Specifies the identifier key of the Threat Detection audit storage account. If state is Enabled, storageAccountAccessKey is required
             * @return the next update stage
             */
            Update withStorageAccountAccessKey(String storageAccountAccessKey);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify StorageEndpoint.
         */
        interface WithStorageEndpoint {
            /**
             * Specifies storageEndpoint.
             * @param storageEndpoint Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is required
             * @return the next update stage
             */
            Update withStorageEndpoint(String storageEndpoint);
        }

        /**
         * The stage of the databasesecurityalertpolicy update allowing to specify UseServerDefault.
         */
        interface WithUseServerDefault {
            /**
             * Specifies useServerDefault.
             * @param useServerDefault Specifies whether to use the default server policy. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withUseServerDefault(SecurityAlertPolicyUseServerDefault useServerDefault);
        }

    }
}
