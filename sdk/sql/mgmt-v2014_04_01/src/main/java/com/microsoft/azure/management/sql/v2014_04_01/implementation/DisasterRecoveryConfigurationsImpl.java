/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfigurations;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.sql.v2014_04_01.DisasterRecoveryConfiguration;

class DisasterRecoveryConfigurationsImpl extends WrapperImpl<DisasterRecoveryConfigurationsInner> implements DisasterRecoveryConfigurations {
    private final SqlManager manager;

    DisasterRecoveryConfigurationsImpl(SqlManager manager) {
        super(manager.inner().disasterRecoveryConfigurations());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DisasterRecoveryConfiguration> listAsync(String resourceGroupName, String serverName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.listAsync(resourceGroupName, serverName)
        .flatMap(new Func1<List<DisasterRecoveryConfigurationInner>, Observable<DisasterRecoveryConfigurationInner>>() {
            @Override
            public Observable<DisasterRecoveryConfigurationInner> call(List<DisasterRecoveryConfigurationInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<DisasterRecoveryConfigurationInner, DisasterRecoveryConfiguration>() {
            @Override
            public DisasterRecoveryConfiguration call(DisasterRecoveryConfigurationInner inner) {
                return new DisasterRecoveryConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String disasterRecoveryConfigurationName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, disasterRecoveryConfigurationName).toCompletable();
    }

    @Override
    public Observable<DisasterRecoveryConfiguration> createOrUpdateAsync(String resourceGroupName, String serverName, String disasterRecoveryConfigurationName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, serverName, disasterRecoveryConfigurationName)
        .map(new Func1<DisasterRecoveryConfigurationInner, DisasterRecoveryConfiguration>() {
            @Override
            public DisasterRecoveryConfiguration call(DisasterRecoveryConfigurationInner inner) {
                return new DisasterRecoveryConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<DisasterRecoveryConfiguration> getAsync(String resourceGroupName, String serverName, String disasterRecoveryConfigurationName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, disasterRecoveryConfigurationName)
        .map(new Func1<DisasterRecoveryConfigurationInner, DisasterRecoveryConfiguration>() {
            @Override
            public DisasterRecoveryConfiguration call(DisasterRecoveryConfigurationInner inner) {
                return new DisasterRecoveryConfigurationImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable failoverAsync(String resourceGroupName, String serverName, String disasterRecoveryConfigurationName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.failoverAsync(resourceGroupName, serverName, disasterRecoveryConfigurationName).toCompletable();
    }

    @Override
    public Completable failoverAllowDataLossAsync(String resourceGroupName, String serverName, String disasterRecoveryConfigurationName) {
        DisasterRecoveryConfigurationsInner client = this.inner();
        return client.failoverAllowDataLossAsync(resourceGroupName, serverName, disasterRecoveryConfigurationName).toCompletable();
    }

}
