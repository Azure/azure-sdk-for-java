/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ElasticPoolOperations;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import rx.Completable;
import java.util.UUID;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ElasticPoolOperation;

class ElasticPoolOperationsImpl extends WrapperImpl<ElasticPoolOperationsInner> implements ElasticPoolOperations {
    private final SqlManager manager;

    ElasticPoolOperationsImpl(SqlManager manager) {
        super(manager.inner().elasticPoolOperations());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private ElasticPoolOperationImpl wrapModel(ElasticPoolOperationInner inner) {
        return  new ElasticPoolOperationImpl(inner, manager());
    }

    @Override
    public Completable cancelAsync(String resourceGroupName, String serverName, String elasticPoolName, UUID operationId) {
        ElasticPoolOperationsInner client = this.inner();
        return client.cancelAsync(resourceGroupName, serverName, elasticPoolName, operationId).toCompletable();
    }

    @Override
    public Observable<ElasticPoolOperation> listByElasticPoolAsync(final String resourceGroupName, final String serverName, final String elasticPoolName) {
        ElasticPoolOperationsInner client = this.inner();
        return client.listByElasticPoolAsync(resourceGroupName, serverName, elasticPoolName)
        .flatMapIterable(new Func1<Page<ElasticPoolOperationInner>, Iterable<ElasticPoolOperationInner>>() {
            @Override
            public Iterable<ElasticPoolOperationInner> call(Page<ElasticPoolOperationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ElasticPoolOperationInner, ElasticPoolOperation>() {
            @Override
            public ElasticPoolOperation call(ElasticPoolOperationInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
