/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.InstanceFailoverGroups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_10_01_preview.InstanceFailoverGroup;

class InstanceFailoverGroupsImpl extends WrapperImpl<InstanceFailoverGroupsInner> implements InstanceFailoverGroups {
    private final SqlManager manager;

    InstanceFailoverGroupsImpl(SqlManager manager) {
        super(manager.inner().instanceFailoverGroups());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public InstanceFailoverGroupImpl define(String name) {
        return wrapModel(name);
    }

    private InstanceFailoverGroupImpl wrapModel(InstanceFailoverGroupInner inner) {
        return  new InstanceFailoverGroupImpl(inner, manager());
    }

    private InstanceFailoverGroupImpl wrapModel(String name) {
        return new InstanceFailoverGroupImpl(name, this.manager());
    }

    @Override
    public Observable<InstanceFailoverGroup> failoverAsync(String resourceGroupName, String locationName, String failoverGroupName) {
        InstanceFailoverGroupsInner client = this.inner();
        return client.failoverAsync(resourceGroupName, locationName, failoverGroupName)
        .map(new Func1<InstanceFailoverGroupInner, InstanceFailoverGroup>() {
            @Override
            public InstanceFailoverGroup call(InstanceFailoverGroupInner inner) {
                return new InstanceFailoverGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<InstanceFailoverGroup> forceFailoverAllowDataLossAsync(String resourceGroupName, String locationName, String failoverGroupName) {
        InstanceFailoverGroupsInner client = this.inner();
        return client.forceFailoverAllowDataLossAsync(resourceGroupName, locationName, failoverGroupName)
        .map(new Func1<InstanceFailoverGroupInner, InstanceFailoverGroup>() {
            @Override
            public InstanceFailoverGroup call(InstanceFailoverGroupInner inner) {
                return new InstanceFailoverGroupImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<InstanceFailoverGroup> listByLocationAsync(final String resourceGroupName, final String locationName) {
        InstanceFailoverGroupsInner client = this.inner();
        return client.listByLocationAsync(resourceGroupName, locationName)
        .flatMapIterable(new Func1<Page<InstanceFailoverGroupInner>, Iterable<InstanceFailoverGroupInner>>() {
            @Override
            public Iterable<InstanceFailoverGroupInner> call(Page<InstanceFailoverGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<InstanceFailoverGroupInner, InstanceFailoverGroup>() {
            @Override
            public InstanceFailoverGroup call(InstanceFailoverGroupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<InstanceFailoverGroup> getAsync(String resourceGroupName, String locationName, String failoverGroupName) {
        InstanceFailoverGroupsInner client = this.inner();
        return client.getAsync(resourceGroupName, locationName, failoverGroupName)
        .flatMap(new Func1<InstanceFailoverGroupInner, Observable<InstanceFailoverGroup>>() {
            @Override
            public Observable<InstanceFailoverGroup> call(InstanceFailoverGroupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((InstanceFailoverGroup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String locationName, String failoverGroupName) {
        InstanceFailoverGroupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, locationName, failoverGroupName).toCompletable();
    }

}
