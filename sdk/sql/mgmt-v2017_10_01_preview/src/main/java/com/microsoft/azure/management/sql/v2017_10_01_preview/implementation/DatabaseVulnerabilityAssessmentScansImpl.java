/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.DatabaseVulnerabilityAssessmentScans;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ServerVulnerabilityAssessmentScanRecord;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.sql.v2017_10_01_preview.DatabaseVulnerabilityAssessmentScansExport;

class DatabaseVulnerabilityAssessmentScansImpl extends WrapperImpl<DatabaseVulnerabilityAssessmentScansInner> implements DatabaseVulnerabilityAssessmentScans {
    private final SqlManager manager;

    DatabaseVulnerabilityAssessmentScansImpl(SqlManager manager) {
        super(manager.inner().databaseVulnerabilityAssessmentScans());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private ServerVulnerabilityAssessmentScanRecordImpl wrapServerVulnerabilityAssessmentScanRecordModel(VulnerabilityAssessmentScanRecordInner inner) {
        return  new ServerVulnerabilityAssessmentScanRecordImpl(inner, manager());
    }

    private Observable<VulnerabilityAssessmentScanRecordInner> getVulnerabilityAssessmentScanRecordInnerUsingDatabaseVulnerabilityAssessmentScansInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String serverName = IdParsingUtils.getValueFromIdByName(id, "servers");
        String databaseName = IdParsingUtils.getValueFromIdByName(id, "databases");
        String scanId = IdParsingUtils.getValueFromIdByName(id, "scans");
        DatabaseVulnerabilityAssessmentScansInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, scanId);
    }

    @Override
    public Observable<ServerVulnerabilityAssessmentScanRecord> getAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        DatabaseVulnerabilityAssessmentScansInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, scanId)
        .flatMap(new Func1<VulnerabilityAssessmentScanRecordInner, Observable<ServerVulnerabilityAssessmentScanRecord>>() {
            @Override
            public Observable<ServerVulnerabilityAssessmentScanRecord> call(VulnerabilityAssessmentScanRecordInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ServerVulnerabilityAssessmentScanRecord)wrapServerVulnerabilityAssessmentScanRecordModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<ServerVulnerabilityAssessmentScanRecord> listByDatabaseAsync(final String resourceGroupName, final String serverName, final String databaseName) {
        DatabaseVulnerabilityAssessmentScansInner client = this.inner();
        return client.listByDatabaseAsync(resourceGroupName, serverName, databaseName)
        .flatMapIterable(new Func1<Page<VulnerabilityAssessmentScanRecordInner>, Iterable<VulnerabilityAssessmentScanRecordInner>>() {
            @Override
            public Iterable<VulnerabilityAssessmentScanRecordInner> call(Page<VulnerabilityAssessmentScanRecordInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VulnerabilityAssessmentScanRecordInner, ServerVulnerabilityAssessmentScanRecord>() {
            @Override
            public ServerVulnerabilityAssessmentScanRecord call(VulnerabilityAssessmentScanRecordInner inner) {
                return wrapServerVulnerabilityAssessmentScanRecordModel(inner);
            }
        });
    }

    @Override
    public Completable initiateScanAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        DatabaseVulnerabilityAssessmentScansInner client = this.inner();
        return client.initiateScanAsync(resourceGroupName, serverName, databaseName, scanId).toCompletable();
    }

    @Override
    public Observable<DatabaseVulnerabilityAssessmentScansExport> exportAsync(String resourceGroupName, String serverName, String databaseName, String scanId) {
        DatabaseVulnerabilityAssessmentScansInner client = this.inner();
        return client.exportAsync(resourceGroupName, serverName, databaseName, scanId)
        .map(new Func1<DatabaseVulnerabilityAssessmentScansExportInner, DatabaseVulnerabilityAssessmentScansExport>() {
            @Override
            public DatabaseVulnerabilityAssessmentScansExport call(DatabaseVulnerabilityAssessmentScansExportInner inner) {
                return new DatabaseVulnerabilityAssessmentScansExportImpl(inner, manager());
            }
        });
    }

}
