/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ManagedInstanceEncryptionProtectors;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ManagedInstanceEncryptionProtector;

class ManagedInstanceEncryptionProtectorsImpl extends WrapperImpl<ManagedInstanceEncryptionProtectorsInner> implements ManagedInstanceEncryptionProtectors {
    private final SqlManager manager;

    ManagedInstanceEncryptionProtectorsImpl(SqlManager manager) {
        super(manager.inner().managedInstanceEncryptionProtectors());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Completable revalidateAsync(String resourceGroupName, String managedInstanceName) {
        ManagedInstanceEncryptionProtectorsInner client = this.inner();
        return client.revalidateAsync(resourceGroupName, managedInstanceName).toCompletable();
    }

    @Override
    public Observable<ManagedInstanceEncryptionProtector> listByInstanceAsync(final String resourceGroupName, final String managedInstanceName) {
        ManagedInstanceEncryptionProtectorsInner client = this.inner();
        return client.listByInstanceAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<ManagedInstanceEncryptionProtectorInner>, Iterable<ManagedInstanceEncryptionProtectorInner>>() {
            @Override
            public Iterable<ManagedInstanceEncryptionProtectorInner> call(Page<ManagedInstanceEncryptionProtectorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceEncryptionProtectorInner, ManagedInstanceEncryptionProtector>() {
            @Override
            public ManagedInstanceEncryptionProtector call(ManagedInstanceEncryptionProtectorInner inner) {
                return new ManagedInstanceEncryptionProtectorImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceEncryptionProtector> getAsync(String resourceGroupName, String managedInstanceName) {
        ManagedInstanceEncryptionProtectorsInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName)
        .map(new Func1<ManagedInstanceEncryptionProtectorInner, ManagedInstanceEncryptionProtector>() {
            @Override
            public ManagedInstanceEncryptionProtector call(ManagedInstanceEncryptionProtectorInner inner) {
                return new ManagedInstanceEncryptionProtectorImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ManagedInstanceEncryptionProtector> createOrUpdateAsync(String resourceGroupName, String managedInstanceName, ManagedInstanceEncryptionProtectorInner parameters) {
        ManagedInstanceEncryptionProtectorsInner client = this.inner();
        return client.createOrUpdateAsync(resourceGroupName, managedInstanceName, parameters)
        .map(new Func1<ManagedInstanceEncryptionProtectorInner, ManagedInstanceEncryptionProtector>() {
            @Override
            public ManagedInstanceEncryptionProtector call(ManagedInstanceEncryptionProtectorInner inner) {
                return new ManagedInstanceEncryptionProtectorImpl(inner, manager());
            }
        });
    }

}
