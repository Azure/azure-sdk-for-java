/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2017_10_01_preview.implementation.DatabaseInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2017_10_01_preview.implementation.SqlManager;
import java.util.UUID;
import org.joda.time.DateTime;
import java.util.Map;

/**
 * Type representing Database.
 */
public interface Database extends HasInner<DatabaseInner>, Indexable, Refreshable<Database>, Updatable<Database.Update>, HasManager<SqlManager> {
    /**
     * @return the autoPauseDelay value.
     */
    Integer autoPauseDelay();

    /**
     * @return the catalogCollation value.
     */
    CatalogCollationType catalogCollation();

    /**
     * @return the collation value.
     */
    String collation();

    /**
     * @return the createMode value.
     */
    CreateMode createMode();

    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the currentServiceObjectiveName value.
     */
    String currentServiceObjectiveName();

    /**
     * @return the currentSku value.
     */
    Sku currentSku();

    /**
     * @return the databaseId value.
     */
    UUID databaseId();

    /**
     * @return the defaultSecondaryLocation value.
     */
    String defaultSecondaryLocation();

    /**
     * @return the earliestRestoreDate value.
     */
    DateTime earliestRestoreDate();

    /**
     * @return the elasticPoolId value.
     */
    String elasticPoolId();

    /**
     * @return the failoverGroupId value.
     */
    String failoverGroupId();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the licenseType value.
     */
    DatabaseLicenseType licenseType();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the longTermRetentionBackupResourceId value.
     */
    String longTermRetentionBackupResourceId();

    /**
     * @return the managedBy value.
     */
    String managedBy();

    /**
     * @return the maxLogSizeBytes value.
     */
    Long maxLogSizeBytes();

    /**
     * @return the maxSizeBytes value.
     */
    Long maxSizeBytes();

    /**
     * @return the minCapacity value.
     */
    Double minCapacity();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the pausedDate value.
     */
    DateTime pausedDate();

    /**
     * @return the readReplicaCount value.
     */
    Integer readReplicaCount();

    /**
     * @return the readScale value.
     */
    DatabaseReadScale readScale();

    /**
     * @return the recoverableDatabaseId value.
     */
    String recoverableDatabaseId();

    /**
     * @return the recoveryServicesRecoveryPointId value.
     */
    String recoveryServicesRecoveryPointId();

    /**
     * @return the requestedServiceObjectiveName value.
     */
    String requestedServiceObjectiveName();

    /**
     * @return the restorableDroppedDatabaseId value.
     */
    String restorableDroppedDatabaseId();

    /**
     * @return the restorePointInTime value.
     */
    DateTime restorePointInTime();

    /**
     * @return the resumedDate value.
     */
    DateTime resumedDate();

    /**
     * @return the sampleName value.
     */
    SampleName sampleName();

    /**
     * @return the sku value.
     */
    Sku sku();

    /**
     * @return the sourceDatabaseDeletionDate value.
     */
    DateTime sourceDatabaseDeletionDate();

    /**
     * @return the sourceDatabaseId value.
     */
    String sourceDatabaseId();

    /**
     * @return the status value.
     */
    DatabaseStatus status();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the zoneRedundant value.
     */
    Boolean zoneRedundant();

    /**
     * The entirety of the Database definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithLocation, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Database definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Database definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the database definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server
            * @return the next definition stage
            */
            WithLocation withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the database definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the database definition allowing to specify AutoPauseDelay.
         */
        interface WithAutoPauseDelay {
            /**
             * Specifies autoPauseDelay.
             * @param autoPauseDelay Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
             * @return the next definition stage
             */
            WithCreate withAutoPauseDelay(Integer autoPauseDelay);
        }

        /**
         * The stage of the database definition allowing to specify CatalogCollation.
         */
        interface WithCatalogCollation {
            /**
             * Specifies catalogCollation.
             * @param catalogCollation Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS'
             * @return the next definition stage
             */
            WithCreate withCatalogCollation(CatalogCollationType catalogCollation);
        }

        /**
         * The stage of the database definition allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             * @param collation The collation of the database
             * @return the next definition stage
             */
            WithCreate withCollation(String collation);
        }

        /**
         * The stage of the database definition allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             * @param createMode Specifies the mode of database creation.
 Default: regular database creation.
 Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary', 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
             * @return the next definition stage
             */
            WithCreate withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database definition allowing to specify ElasticPoolId.
         */
        interface WithElasticPoolId {
            /**
             * Specifies elasticPoolId.
             * @param elasticPoolId The resource identifier of the elastic pool containing this database
             * @return the next definition stage
             */
            WithCreate withElasticPoolId(String elasticPoolId);
        }

        /**
         * The stage of the database definition allowing to specify LicenseType.
         */
        interface WithLicenseType {
            /**
             * Specifies licenseType.
             * @param licenseType The license type to apply for this database. Possible values include: 'LicenseIncluded', 'BasePrice'
             * @return the next definition stage
             */
            WithCreate withLicenseType(DatabaseLicenseType licenseType);
        }

        /**
         * The stage of the database definition allowing to specify LongTermRetentionBackupResourceId.
         */
        interface WithLongTermRetentionBackupResourceId {
            /**
             * Specifies longTermRetentionBackupResourceId.
             * @param longTermRetentionBackupResourceId The resource identifier of the long term retention backup associated with create operation of this database
             * @return the next definition stage
             */
            WithCreate withLongTermRetentionBackupResourceId(String longTermRetentionBackupResourceId);
        }

        /**
         * The stage of the database definition allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             * @param maxSizeBytes The max size of the database expressed in bytes
             * @return the next definition stage
             */
            WithCreate withMaxSizeBytes(Long maxSizeBytes);
        }

        /**
         * The stage of the database definition allowing to specify MinCapacity.
         */
        interface WithMinCapacity {
            /**
             * Specifies minCapacity.
             * @param minCapacity Minimal capacity that database will always have allocated, if not paused
             * @return the next definition stage
             */
            WithCreate withMinCapacity(Double minCapacity);
        }

        /**
         * The stage of the database definition allowing to specify ReadReplicaCount.
         */
        interface WithReadReplicaCount {
            /**
             * Specifies readReplicaCount.
             * @param readReplicaCount The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases
             * @return the next definition stage
             */
            WithCreate withReadReplicaCount(Integer readReplicaCount);
        }

        /**
         * The stage of the database definition allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             * @param readScale If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withReadScale(DatabaseReadScale readScale);
        }

        /**
         * The stage of the database definition allowing to specify RecoverableDatabaseId.
         */
        interface WithRecoverableDatabaseId {
            /**
             * Specifies recoverableDatabaseId.
             * @param recoverableDatabaseId The resource identifier of the recoverable database associated with create operation of this database
             * @return the next definition stage
             */
            WithCreate withRecoverableDatabaseId(String recoverableDatabaseId);
        }

        /**
         * The stage of the database definition allowing to specify RecoveryServicesRecoveryPointId.
         */
        interface WithRecoveryServicesRecoveryPointId {
            /**
             * Specifies recoveryServicesRecoveryPointId.
             * @param recoveryServicesRecoveryPointId The resource identifier of the recovery point associated with create operation of this database
             * @return the next definition stage
             */
            WithCreate withRecoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId);
        }

        /**
         * The stage of the database definition allowing to specify RestorableDroppedDatabaseId.
         */
        interface WithRestorableDroppedDatabaseId {
            /**
             * Specifies restorableDroppedDatabaseId.
             * @param restorableDroppedDatabaseId The resource identifier of the restorable dropped database associated with create operation of this database
             * @return the next definition stage
             */
            WithCreate withRestorableDroppedDatabaseId(String restorableDroppedDatabaseId);
        }

        /**
         * The stage of the database definition allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database
             * @return the next definition stage
             */
            WithCreate withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database definition allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             * @param sampleName The name of the sample schema to apply when creating this database. Possible values include: 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
             * @return the next definition stage
             */
            WithCreate withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database definition allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The database SKU.
 The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
 ```azurecli
 az sql db list-editions -l &lt;location&gt; -o table
 ````
 ```powershell
 Get-AzSqlServerServiceObjective -Location &lt;location&gt;
 ````
             * @return the next definition stage
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             * @param sourceDatabaseDeletionDate Specifies the time that the database was deleted
             * @return the next definition stage
             */
            WithCreate withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database definition allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             * @param sourceDatabaseId The resource identifier of the source database associated with create operation of this database
             * @return the next definition stage
             */
            WithCreate withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database definition allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next definition stage
             */
            WithCreate withZoneRedundant(Boolean zoneRedundant);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Database>, DefinitionStages.WithAutoPauseDelay, DefinitionStages.WithCatalogCollation, DefinitionStages.WithCollation, DefinitionStages.WithCreateMode, DefinitionStages.WithElasticPoolId, DefinitionStages.WithLicenseType, DefinitionStages.WithLongTermRetentionBackupResourceId, DefinitionStages.WithMaxSizeBytes, DefinitionStages.WithMinCapacity, DefinitionStages.WithReadReplicaCount, DefinitionStages.WithReadScale, DefinitionStages.WithRecoverableDatabaseId, DefinitionStages.WithRecoveryServicesRecoveryPointId, DefinitionStages.WithRestorableDroppedDatabaseId, DefinitionStages.WithRestorePointInTime, DefinitionStages.WithSampleName, DefinitionStages.WithSku, DefinitionStages.WithSourceDatabaseDeletionDate, DefinitionStages.WithSourceDatabaseId, DefinitionStages.WithTags, DefinitionStages.WithZoneRedundant {
        }
    }
    /**
     * The template for a Database update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Database>, UpdateStages.WithAutoPauseDelay, UpdateStages.WithCatalogCollation, UpdateStages.WithCollation, UpdateStages.WithCreateMode, UpdateStages.WithElasticPoolId, UpdateStages.WithLicenseType, UpdateStages.WithLongTermRetentionBackupResourceId, UpdateStages.WithMaxSizeBytes, UpdateStages.WithMinCapacity, UpdateStages.WithReadReplicaCount, UpdateStages.WithReadScale, UpdateStages.WithRecoverableDatabaseId, UpdateStages.WithRecoveryServicesRecoveryPointId, UpdateStages.WithRestorableDroppedDatabaseId, UpdateStages.WithRestorePointInTime, UpdateStages.WithSampleName, UpdateStages.WithSku, UpdateStages.WithSourceDatabaseDeletionDate, UpdateStages.WithSourceDatabaseId, UpdateStages.WithTags, UpdateStages.WithZoneRedundant {
    }

    /**
     * Grouping of Database update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the database update allowing to specify AutoPauseDelay.
         */
        interface WithAutoPauseDelay {
            /**
             * Specifies autoPauseDelay.
             * @param autoPauseDelay Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
             * @return the next update stage
             */
            Update withAutoPauseDelay(Integer autoPauseDelay);
        }

        /**
         * The stage of the database update allowing to specify CatalogCollation.
         */
        interface WithCatalogCollation {
            /**
             * Specifies catalogCollation.
             * @param catalogCollation Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS'
             * @return the next update stage
             */
            Update withCatalogCollation(CatalogCollationType catalogCollation);
        }

        /**
         * The stage of the database update allowing to specify Collation.
         */
        interface WithCollation {
            /**
             * Specifies collation.
             * @param collation The collation of the database
             * @return the next update stage
             */
            Update withCollation(String collation);
        }

        /**
         * The stage of the database update allowing to specify CreateMode.
         */
        interface WithCreateMode {
            /**
             * Specifies createMode.
             * @param createMode Specifies the mode of database creation.
 Default: regular database creation.
 Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.
 Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.
 PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
 Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.
 Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.
 RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
 Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary', 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
             * @return the next update stage
             */
            Update withCreateMode(CreateMode createMode);
        }

        /**
         * The stage of the database update allowing to specify ElasticPoolId.
         */
        interface WithElasticPoolId {
            /**
             * Specifies elasticPoolId.
             * @param elasticPoolId The resource identifier of the elastic pool containing this database
             * @return the next update stage
             */
            Update withElasticPoolId(String elasticPoolId);
        }

        /**
         * The stage of the database update allowing to specify LicenseType.
         */
        interface WithLicenseType {
            /**
             * Specifies licenseType.
             * @param licenseType The license type to apply for this database. Possible values include: 'LicenseIncluded', 'BasePrice'
             * @return the next update stage
             */
            Update withLicenseType(DatabaseLicenseType licenseType);
        }

        /**
         * The stage of the database update allowing to specify LongTermRetentionBackupResourceId.
         */
        interface WithLongTermRetentionBackupResourceId {
            /**
             * Specifies longTermRetentionBackupResourceId.
             * @param longTermRetentionBackupResourceId The resource identifier of the long term retention backup associated with create operation of this database
             * @return the next update stage
             */
            Update withLongTermRetentionBackupResourceId(String longTermRetentionBackupResourceId);
        }

        /**
         * The stage of the database update allowing to specify MaxSizeBytes.
         */
        interface WithMaxSizeBytes {
            /**
             * Specifies maxSizeBytes.
             * @param maxSizeBytes The max size of the database expressed in bytes
             * @return the next update stage
             */
            Update withMaxSizeBytes(Long maxSizeBytes);
        }

        /**
         * The stage of the database update allowing to specify MinCapacity.
         */
        interface WithMinCapacity {
            /**
             * Specifies minCapacity.
             * @param minCapacity Minimal capacity that database will always have allocated, if not paused
             * @return the next update stage
             */
            Update withMinCapacity(Double minCapacity);
        }

        /**
         * The stage of the database update allowing to specify ReadReplicaCount.
         */
        interface WithReadReplicaCount {
            /**
             * Specifies readReplicaCount.
             * @param readReplicaCount The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases
             * @return the next update stage
             */
            Update withReadReplicaCount(Integer readReplicaCount);
        }

        /**
         * The stage of the database update allowing to specify ReadScale.
         */
        interface WithReadScale {
            /**
             * Specifies readScale.
             * @param readScale If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withReadScale(DatabaseReadScale readScale);
        }

        /**
         * The stage of the database update allowing to specify RecoverableDatabaseId.
         */
        interface WithRecoverableDatabaseId {
            /**
             * Specifies recoverableDatabaseId.
             * @param recoverableDatabaseId The resource identifier of the recoverable database associated with create operation of this database
             * @return the next update stage
             */
            Update withRecoverableDatabaseId(String recoverableDatabaseId);
        }

        /**
         * The stage of the database update allowing to specify RecoveryServicesRecoveryPointId.
         */
        interface WithRecoveryServicesRecoveryPointId {
            /**
             * Specifies recoveryServicesRecoveryPointId.
             * @param recoveryServicesRecoveryPointId The resource identifier of the recovery point associated with create operation of this database
             * @return the next update stage
             */
            Update withRecoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId);
        }

        /**
         * The stage of the database update allowing to specify RestorableDroppedDatabaseId.
         */
        interface WithRestorableDroppedDatabaseId {
            /**
             * Specifies restorableDroppedDatabaseId.
             * @param restorableDroppedDatabaseId The resource identifier of the restorable dropped database associated with create operation of this database
             * @return the next update stage
             */
            Update withRestorableDroppedDatabaseId(String restorableDroppedDatabaseId);
        }

        /**
         * The stage of the database update allowing to specify RestorePointInTime.
         */
        interface WithRestorePointInTime {
            /**
             * Specifies restorePointInTime.
             * @param restorePointInTime Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database
             * @return the next update stage
             */
            Update withRestorePointInTime(DateTime restorePointInTime);
        }

        /**
         * The stage of the database update allowing to specify SampleName.
         */
        interface WithSampleName {
            /**
             * Specifies sampleName.
             * @param sampleName The name of the sample schema to apply when creating this database. Possible values include: 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
             * @return the next update stage
             */
            Update withSampleName(SampleName sampleName);
        }

        /**
         * The stage of the database update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The name and tier of the SKU
             * @return the next update stage
             */
            Update withSku(Sku sku);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseDeletionDate.
         */
        interface WithSourceDatabaseDeletionDate {
            /**
             * Specifies sourceDatabaseDeletionDate.
             * @param sourceDatabaseDeletionDate Specifies the time that the database was deleted
             * @return the next update stage
             */
            Update withSourceDatabaseDeletionDate(DateTime sourceDatabaseDeletionDate);
        }

        /**
         * The stage of the database update allowing to specify SourceDatabaseId.
         */
        interface WithSourceDatabaseId {
            /**
             * Specifies sourceDatabaseId.
             * @param sourceDatabaseId The resource identifier of the source database associated with create operation of this database
             * @return the next update stage
             */
            Update withSourceDatabaseId(String sourceDatabaseId);
        }

        /**
         * The stage of the database update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the database update allowing to specify ZoneRedundant.
         */
        interface WithZoneRedundant {
            /**
             * Specifies zoneRedundant.
             * @param zoneRedundant Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones
             * @return the next update stage
             */
            Update withZoneRedundant(Boolean zoneRedundant);
        }

    }
}
