/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ManagedInstanceKeys;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_10_01_preview.ManagedInstanceKey;

class ManagedInstanceKeysImpl extends WrapperImpl<ManagedInstanceKeysInner> implements ManagedInstanceKeys {
    private final SqlManager manager;

    ManagedInstanceKeysImpl(SqlManager manager) {
        super(manager.inner().managedInstanceKeys());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public ManagedInstanceKeyImpl define(String name) {
        return wrapModel(name);
    }

    private ManagedInstanceKeyImpl wrapModel(ManagedInstanceKeyInner inner) {
        return  new ManagedInstanceKeyImpl(inner, manager());
    }

    private ManagedInstanceKeyImpl wrapModel(String name) {
        return new ManagedInstanceKeyImpl(name, this.manager());
    }

    @Override
    public Observable<ManagedInstanceKey> listByInstanceAsync(final String resourceGroupName, final String managedInstanceName) {
        ManagedInstanceKeysInner client = this.inner();
        return client.listByInstanceAsync(resourceGroupName, managedInstanceName)
        .flatMapIterable(new Func1<Page<ManagedInstanceKeyInner>, Iterable<ManagedInstanceKeyInner>>() {
            @Override
            public Iterable<ManagedInstanceKeyInner> call(Page<ManagedInstanceKeyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ManagedInstanceKeyInner, ManagedInstanceKey>() {
            @Override
            public ManagedInstanceKey call(ManagedInstanceKeyInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ManagedInstanceKey> getAsync(String resourceGroupName, String managedInstanceName, String keyName) {
        ManagedInstanceKeysInner client = this.inner();
        return client.getAsync(resourceGroupName, managedInstanceName, keyName)
        .flatMap(new Func1<ManagedInstanceKeyInner, Observable<ManagedInstanceKey>>() {
            @Override
            public Observable<ManagedInstanceKey> call(ManagedInstanceKeyInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ManagedInstanceKey)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String managedInstanceName, String keyName) {
        ManagedInstanceKeysInner client = this.inner();
        return client.deleteAsync(resourceGroupName, managedInstanceName, keyName).toCompletable();
    }

}
