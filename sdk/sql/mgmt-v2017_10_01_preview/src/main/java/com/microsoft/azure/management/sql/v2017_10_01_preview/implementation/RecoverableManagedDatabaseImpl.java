/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2017_10_01_preview.implementation;

import com.microsoft.azure.management.sql.v2017_10_01_preview.RecoverableManagedDatabase;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;

class RecoverableManagedDatabaseImpl extends IndexableRefreshableWrapperImpl<RecoverableManagedDatabase, RecoverableManagedDatabaseInner> implements RecoverableManagedDatabase {
    private final SqlManager manager;
    private String resourceGroupName;
    private String managedInstanceName;
    private String recoverableDatabaseName;

    RecoverableManagedDatabaseImpl(RecoverableManagedDatabaseInner inner,  SqlManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.managedInstanceName = IdParsingUtils.getValueFromIdByName(inner.id(), "managedInstances");
        this.recoverableDatabaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "recoverableDatabases");
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<RecoverableManagedDatabaseInner> getInnerAsync() {
        RecoverableManagedDatabasesInner client = this.manager().inner().recoverableManagedDatabases();
        return client.getAsync(this.resourceGroupName, this.managedInstanceName, this.recoverableDatabaseName);
    }



    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String lastAvailableBackupDate() {
        return this.inner().lastAvailableBackupDate();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
