/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2015_05_01_preview.implementation.FailoverGroupInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2015_05_01_preview.implementation.SqlManager;
import java.util.List;
import java.util.Map;

/**
 * Type representing FailoverGroup.
 */
public interface FailoverGroup extends HasInner<FailoverGroupInner>, Indexable, Refreshable<FailoverGroup>, Updatable<FailoverGroup.Update>, HasManager<SqlManager> {
    /**
     * @return the databases value.
     */
    List<String> databases();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the partnerServers value.
     */
    List<PartnerInfo> partnerServers();

    /**
     * @return the readOnlyEndpoint value.
     */
    FailoverGroupReadOnlyEndpoint readOnlyEndpoint();

    /**
     * @return the readWriteEndpoint value.
     */
    FailoverGroupReadWriteEndpoint readWriteEndpoint();

    /**
     * @return the replicationRole value.
     */
    FailoverGroupReplicationRole replicationRole();

    /**
     * @return the replicationState value.
     */
    String replicationState();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the FailoverGroup definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithPartnerServers, DefinitionStages.WithReadWriteEndpoint, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of FailoverGroup definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a FailoverGroup definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the failovergroup definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies resourceGroupName, serverName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server containing the failover group
            * @return the next definition stage
            */
            WithPartnerServers withExistingServer(String resourceGroupName, String serverName);
        }

        /**
         * The stage of the failovergroup definition allowing to specify PartnerServers.
         */
        interface WithPartnerServers {
           /**
            * Specifies partnerServers.
            * @param partnerServers List of partner server information for the failover group
            * @return the next definition stage
            */
            WithReadWriteEndpoint withPartnerServers(List<PartnerInfo> partnerServers);
        }

        /**
         * The stage of the failovergroup definition allowing to specify ReadWriteEndpoint.
         */
        interface WithReadWriteEndpoint {
           /**
            * Specifies readWriteEndpoint.
            * @param readWriteEndpoint Read-write endpoint of the failover group instance
            * @return the next definition stage
            */
            WithCreate withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint);
        }

        /**
         * The stage of the failovergroup definition allowing to specify Databases.
         */
        interface WithDatabases {
            /**
             * Specifies databases.
             * @param databases List of databases in the failover group
             * @return the next definition stage
             */
            WithCreate withDatabases(List<String> databases);
        }

        /**
         * The stage of the failovergroup definition allowing to specify ReadOnlyEndpoint.
         */
        interface WithReadOnlyEndpoint {
            /**
             * Specifies readOnlyEndpoint.
             * @param readOnlyEndpoint Read-only endpoint of the failover group instance
             * @return the next definition stage
             */
            WithCreate withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint);
        }

        /**
         * The stage of the failovergroup definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<FailoverGroup>, DefinitionStages.WithDatabases, DefinitionStages.WithReadOnlyEndpoint, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a FailoverGroup update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<FailoverGroup>, UpdateStages.WithDatabases, UpdateStages.WithReadOnlyEndpoint, UpdateStages.WithReadWriteEndpoint, UpdateStages.WithTags {
    }

    /**
     * Grouping of FailoverGroup update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the failovergroup update allowing to specify Databases.
         */
        interface WithDatabases {
            /**
             * Specifies databases.
             * @param databases List of databases in the failover group
             * @return the next update stage
             */
            Update withDatabases(List<String> databases);
        }

        /**
         * The stage of the failovergroup update allowing to specify ReadOnlyEndpoint.
         */
        interface WithReadOnlyEndpoint {
            /**
             * Specifies readOnlyEndpoint.
             * @param readOnlyEndpoint Read-only endpoint of the failover group instance
             * @return the next update stage
             */
            Update withReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint);
        }

        /**
         * The stage of the failovergroup update allowing to specify ReadWriteEndpoint.
         */
        interface WithReadWriteEndpoint {
            /**
             * Specifies readWriteEndpoint.
             * @param readWriteEndpoint Read-write endpoint of the failover group instance
             * @return the next update stage
             */
            Update withReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint);
        }

        /**
         * The stage of the failovergroup update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
