/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgent;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgentState;

class SyncAgentImpl extends CreatableUpdatableImpl<SyncAgent, SyncAgentInner, SyncAgentImpl> implements SyncAgent, SyncAgent.Definition, SyncAgent.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String syncAgentName;
    private String csyncDatabaseId;
    private String usyncDatabaseId;

    SyncAgentImpl(String name, SqlManager manager) {
        super(name, new SyncAgentInner());
        this.manager = manager;
        // Set resource name
        this.syncAgentName = name;
        //
    }

    SyncAgentImpl(SyncAgentInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.syncAgentName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.syncAgentName = IdParsingUtils.getValueFromIdByName(inner.id(), "syncAgents");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SyncAgent> createResourceAsync() {
        SyncAgentsInner client = this.manager().inner().syncAgents();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.syncAgentName, this.csyncDatabaseId)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SyncAgent> updateResourceAsync() {
        SyncAgentsInner client = this.manager().inner().syncAgents();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.syncAgentName, this.usyncDatabaseId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SyncAgentInner> getInnerAsync() {
        SyncAgentsInner client = this.manager().inner().syncAgents();
        return client.getAsync(this.resourceGroupName, this.serverName, this.syncAgentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime expiryTime() {
        return this.inner().expiryTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isUpToDate() {
        return this.inner().isUpToDate();
    }

    @Override
    public DateTime lastAliveTime() {
        return this.inner().lastAliveTime();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public SyncAgentState state() {
        return this.inner().state();
    }

    @Override
    public String syncAgentName() {
        return this.inner().syncAgentName();
    }

    @Override
    public String syncDatabaseId() {
        return this.inner().syncDatabaseId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String version() {
        return this.inner().version();
    }

    @Override
    public SyncAgentImpl withExistingServer(String resourceGroupName, String serverName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        return this;
    }

    @Override
    public SyncAgentImpl withSyncDatabaseId(String syncDatabaseId) {
        if (isInCreateMode()) {
            this.csyncDatabaseId = syncDatabaseId;
        } else {
            this.usyncDatabaseId = syncDatabaseId;
        }
        return this;
    }

}
