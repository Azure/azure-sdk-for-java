/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgents;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgentKeyProperties;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgent;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncAgentLinkedDatabase;

class SyncAgentsImpl extends WrapperImpl<SyncAgentsInner> implements SyncAgents {
    private final SqlManager manager;

    SyncAgentsImpl(SqlManager manager) {
        super(manager.inner().syncAgents());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public SyncAgentImpl define(String name) {
        return wrapModel(name);
    }

    private SyncAgentImpl wrapModel(SyncAgentInner inner) {
        return  new SyncAgentImpl(inner, manager());
    }

    private SyncAgentImpl wrapModel(String name) {
        return new SyncAgentImpl(name, this.manager());
    }

    @Override
    public Observable<SyncAgentKeyProperties> generateKeyAsync(String resourceGroupName, String serverName, String syncAgentName) {
        SyncAgentsInner client = this.inner();
        return client.generateKeyAsync(resourceGroupName, serverName, syncAgentName)
        .map(new Func1<SyncAgentKeyPropertiesInner, SyncAgentKeyProperties>() {
            @Override
            public SyncAgentKeyProperties call(SyncAgentKeyPropertiesInner inner) {
                return new SyncAgentKeyPropertiesImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<SyncAgent> listByServerAsync(final String resourceGroupName, final String serverName) {
        SyncAgentsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMapIterable(new Func1<Page<SyncAgentInner>, Iterable<SyncAgentInner>>() {
            @Override
            public Iterable<SyncAgentInner> call(Page<SyncAgentInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SyncAgentInner, SyncAgent>() {
            @Override
            public SyncAgent call(SyncAgentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SyncAgent> getAsync(String resourceGroupName, String serverName, String syncAgentName) {
        SyncAgentsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, syncAgentName)
        .flatMap(new Func1<SyncAgentInner, Observable<SyncAgent>>() {
            @Override
            public Observable<SyncAgent> call(SyncAgentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SyncAgent)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String syncAgentName) {
        SyncAgentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, syncAgentName).toCompletable();
    }

    private SyncAgentLinkedDatabaseImpl wrapSyncAgentLinkedDatabaseModel(SyncAgentLinkedDatabaseInner inner) {
        return  new SyncAgentLinkedDatabaseImpl(inner, manager());
    }

    @Override
    public Observable<SyncAgentLinkedDatabase> listLinkedDatabasesAsync(final String resourceGroupName, final String serverName, final String syncAgentName) {
        SyncAgentsInner client = this.inner();
        return client.listLinkedDatabasesAsync(resourceGroupName, serverName, syncAgentName)
        .flatMapIterable(new Func1<Page<SyncAgentLinkedDatabaseInner>, Iterable<SyncAgentLinkedDatabaseInner>>() {
            @Override
            public Iterable<SyncAgentLinkedDatabaseInner> call(Page<SyncAgentLinkedDatabaseInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SyncAgentLinkedDatabaseInner, SyncAgentLinkedDatabase>() {
            @Override
            public SyncAgentLinkedDatabase call(SyncAgentLinkedDatabaseInner inner) {
                return wrapSyncAgentLinkedDatabaseModel(inner);
            }
        });
    }

}
