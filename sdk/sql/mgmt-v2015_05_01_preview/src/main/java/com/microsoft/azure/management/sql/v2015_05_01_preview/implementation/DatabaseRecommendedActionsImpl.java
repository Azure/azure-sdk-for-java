/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2015_05_01_preview.DatabaseRecommendedActions;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.sql.v2015_05_01_preview.RecommendedAction;

class DatabaseRecommendedActionsImpl extends WrapperImpl<DatabaseRecommendedActionsInner> implements DatabaseRecommendedActions {
    private final SqlManager manager;

    DatabaseRecommendedActionsImpl(SqlManager manager) {
        super(manager.inner().databaseRecommendedActions());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private RecommendedActionImpl wrapModel(RecommendedActionInner inner) {
        return  new RecommendedActionImpl(inner, manager());
    }

    @Override
    public Observable<RecommendedAction> listByDatabaseAdvisorAsync(String resourceGroupName, String serverName, String databaseName, String advisorName) {
        DatabaseRecommendedActionsInner client = this.inner();
        return client.listByDatabaseAdvisorAsync(resourceGroupName, serverName, databaseName, advisorName)
        .flatMap(new Func1<List<RecommendedActionInner>, Observable<RecommendedActionInner>>() {
            @Override
            public Observable<RecommendedActionInner> call(List<RecommendedActionInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RecommendedActionInner, RecommendedAction>() {
            @Override
            public RecommendedAction call(RecommendedActionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<RecommendedAction> getAsync(String resourceGroupName, String serverName, String databaseName, String advisorName, String recommendedActionName) {
        DatabaseRecommendedActionsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, advisorName, recommendedActionName)
        .flatMap(new Func1<RecommendedActionInner, Observable<RecommendedAction>>() {
            @Override
            public Observable<RecommendedAction> call(RecommendedActionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((RecommendedAction)wrapModel(inner));
                }
            }
       });
    }

}
