/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMembers;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMember;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMemberSyncGroupDatabasisServerSyncFullSchemaProperties;

class SyncMembersImpl extends WrapperImpl<SyncMembersInner> implements SyncMembers {
    private final SqlManager manager;

    SyncMembersImpl(SqlManager manager) {
        super(manager.inner().syncMembers());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public SyncMemberImpl define(String name) {
        return wrapModel(name);
    }

    private SyncMemberImpl wrapModel(SyncMemberInner inner) {
        return  new SyncMemberImpl(inner, manager());
    }

    private SyncMemberImpl wrapModel(String name) {
        return new SyncMemberImpl(name, this.manager());
    }

    @Override
    public Completable refreshMemberSchemaAsync(String resourceGroupName, String serverName, String databaseName, String syncGroupName, String syncMemberName) {
        SyncMembersInner client = this.inner();
        return client.refreshMemberSchemaAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).toCompletable();
    }

    @Override
    public Observable<SyncMember> listBySyncGroupAsync(final String resourceGroupName, final String serverName, final String databaseName, final String syncGroupName) {
        SyncMembersInner client = this.inner();
        return client.listBySyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName)
        .flatMapIterable(new Func1<Page<SyncMemberInner>, Iterable<SyncMemberInner>>() {
            @Override
            public Iterable<SyncMemberInner> call(Page<SyncMemberInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SyncMemberInner, SyncMember>() {
            @Override
            public SyncMember call(SyncMemberInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<SyncMember> getAsync(String resourceGroupName, String serverName, String databaseName, String syncGroupName, String syncMemberName) {
        SyncMembersInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName)
        .flatMap(new Func1<SyncMemberInner, Observable<SyncMember>>() {
            @Override
            public Observable<SyncMember> call(SyncMemberInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((SyncMember)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serverName, String databaseName, String syncGroupName, String syncMemberName) {
        SyncMembersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).toCompletable();
    }

    private SyncMemberSyncGroupDatabasisServerSyncFullSchemaPropertiesImpl wrapSyncMemberSyncGroupDatabasisServerSyncFullSchemaPropertiesModel(SyncFullSchemaPropertiesInner inner) {
        return  new SyncMemberSyncGroupDatabasisServerSyncFullSchemaPropertiesImpl(inner, manager());
    }

    @Override
    public Observable<SyncMemberSyncGroupDatabasisServerSyncFullSchemaProperties> listMemberSchemasAsync(final String resourceGroupName, final String serverName, final String databaseName, final String syncGroupName, final String syncMemberName) {
        SyncMembersInner client = this.inner();
        return client.listMemberSchemasAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName)
        .flatMapIterable(new Func1<Page<SyncFullSchemaPropertiesInner>, Iterable<SyncFullSchemaPropertiesInner>>() {
            @Override
            public Iterable<SyncFullSchemaPropertiesInner> call(Page<SyncFullSchemaPropertiesInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SyncFullSchemaPropertiesInner, SyncMemberSyncGroupDatabasisServerSyncFullSchemaProperties>() {
            @Override
            public SyncMemberSyncGroupDatabasisServerSyncFullSchemaProperties call(SyncFullSchemaPropertiesInner inner) {
                return wrapSyncMemberSyncGroupDatabasisServerSyncFullSchemaPropertiesModel(inner);
            }
        });
    }

}
