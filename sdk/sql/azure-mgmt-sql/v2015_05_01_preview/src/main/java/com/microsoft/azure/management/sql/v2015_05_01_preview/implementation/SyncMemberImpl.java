/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMember;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMemberDbType;
import java.util.UUID;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncDirection;
import com.microsoft.azure.management.sql.v2015_05_01_preview.SyncMemberState;

class SyncMemberImpl extends CreatableUpdatableImpl<SyncMember, SyncMemberInner, SyncMemberImpl> implements SyncMember, SyncMember.Definition, SyncMember.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;
    private String syncGroupName;
    private String syncMemberName;

    SyncMemberImpl(String name, SqlManager manager) {
        super(name, new SyncMemberInner());
        this.manager = manager;
        // Set resource name
        this.syncMemberName = name;
        //
    }

    SyncMemberImpl(SyncMemberInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.syncMemberName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.syncGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "syncGroups");
        this.syncMemberName = IdParsingUtils.getValueFromIdByName(inner.id(), "syncMembers");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SyncMember> createResourceAsync() {
        SyncMembersInner client = this.manager().inner().syncMembers();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.syncGroupName, this.syncMemberName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SyncMember> updateResourceAsync() {
        SyncMembersInner client = this.manager().inner().syncMembers();
        return client.updateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.syncGroupName, this.syncMemberName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SyncMemberInner> getInnerAsync() {
        SyncMembersInner client = this.manager().inner().syncMembers();
        return client.getAsync(this.resourceGroupName, this.serverName, this.databaseName, this.syncGroupName, this.syncMemberName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String databaseName() {
        return this.inner().databaseName();
    }

    @Override
    public SyncMemberDbType databaseType() {
        return this.inner().databaseType();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String password() {
        return this.inner().password();
    }

    @Override
    public String serverName() {
        return this.inner().serverName();
    }

    @Override
    public UUID sqlServerDatabaseId() {
        return this.inner().sqlServerDatabaseId();
    }

    @Override
    public String syncAgentId() {
        return this.inner().syncAgentId();
    }

    @Override
    public SyncDirection syncDirection() {
        return this.inner().syncDirection();
    }

    @Override
    public SyncMemberState syncState() {
        return this.inner().syncState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String userName() {
        return this.inner().userName();
    }

    @Override
    public SyncMemberImpl withExistingSyncGroup(String resourceGroupName, String serverName, String databaseName, String syncGroupName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        this.syncGroupName = syncGroupName;
        return this;
    }

    @Override
    public SyncMemberImpl withDatabaseName(String databaseName) {
        this.inner().withDatabaseName(databaseName);
        return this;
    }

    @Override
    public SyncMemberImpl withDatabaseType(SyncMemberDbType databaseType) {
        this.inner().withDatabaseType(databaseType);
        return this;
    }

    @Override
    public SyncMemberImpl withPassword(String password) {
        this.inner().withPassword(password);
        return this;
    }

    @Override
    public SyncMemberImpl withServerName(String serverName) {
        this.inner().withServerName(serverName);
        return this;
    }

    @Override
    public SyncMemberImpl withSqlServerDatabaseId(UUID sqlServerDatabaseId) {
        this.inner().withSqlServerDatabaseId(sqlServerDatabaseId);
        return this;
    }

    @Override
    public SyncMemberImpl withSyncAgentId(String syncAgentId) {
        this.inner().withSyncAgentId(syncAgentId);
        return this;
    }

    @Override
    public SyncMemberImpl withSyncDirection(SyncDirection syncDirection) {
        this.inner().withSyncDirection(syncDirection);
        return this;
    }

    @Override
    public SyncMemberImpl withUserName(String userName) {
        this.inner().withUserName(userName);
        return this;
    }

}
