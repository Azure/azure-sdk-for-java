/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview.implementation;

import com.microsoft.azure.management.sql.v2015_05_01_preview.SubscriptionUsage;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;

class SubscriptionUsageImpl extends IndexableRefreshableWrapperImpl<SubscriptionUsage, SubscriptionUsageInner> implements SubscriptionUsage {
    private final SqlManager manager;
    private String locationName;
    private String usageName;

    SubscriptionUsageImpl(SubscriptionUsageInner inner,  SqlManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.locationName = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
        this.usageName = IdParsingUtils.getValueFromIdByName(inner.id(), "usages");
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<SubscriptionUsageInner> getInnerAsync() {
        SubscriptionUsagesInner client = this.manager().inner().subscriptionUsages();
        return client.getAsync(this.locationName, this.usageName);
    }



    @Override
    public Double currentValue() {
        return this.inner().currentValue();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Double limit() {
        return this.inner().limit();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String unit() {
        return this.inner().unit();
    }

}
