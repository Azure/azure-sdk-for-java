/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2015_05_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.sql.v2015_05_01_preview.implementation.SyncGroupInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.sql.v2015_05_01_preview.implementation.SqlManager;
import org.joda.time.DateTime;

/**
 * Type representing SyncGroup.
 */
public interface SyncGroup extends HasInner<SyncGroupInner>, Indexable, Refreshable<SyncGroup>, Updatable<SyncGroup.Update>, HasManager<SqlManager> {
    /**
     * @return the conflictResolutionPolicy value.
     */
    SyncConflictResolutionPolicy conflictResolutionPolicy();

    /**
     * @return the hubDatabasePassword value.
     */
    String hubDatabasePassword();

    /**
     * @return the hubDatabaseUserName value.
     */
    String hubDatabaseUserName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the interval value.
     */
    Integer interval();

    /**
     * @return the lastSyncTime value.
     */
    DateTime lastSyncTime();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the schema value.
     */
    SyncGroupSchema schema();

    /**
     * @return the syncDatabaseId value.
     */
    String syncDatabaseId();

    /**
     * @return the syncState value.
     */
    SyncGroupState syncState();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the SyncGroup definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabasis, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SyncGroup definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SyncGroup definition.
         */
        interface Blank extends WithDatabasis {
        }

        /**
         * The stage of the syncgroup definition allowing to specify Databasis.
         */
        interface WithDatabasis {
           /**
            * Specifies resourceGroupName, serverName, databaseName.
            * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal
            * @param serverName The name of the server
            * @param databaseName The name of the database on which the sync group is hosted
            * @return the next definition stage
            */
            WithCreate withExistingDatabasis(String resourceGroupName, String serverName, String databaseName);
        }

        /**
         * The stage of the syncgroup definition allowing to specify ConflictResolutionPolicy.
         */
        interface WithConflictResolutionPolicy {
            /**
             * Specifies conflictResolutionPolicy.
             * @param conflictResolutionPolicy Conflict resolution policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
             * @return the next definition stage
             */
            WithCreate withConflictResolutionPolicy(SyncConflictResolutionPolicy conflictResolutionPolicy);
        }

        /**
         * The stage of the syncgroup definition allowing to specify HubDatabasePassword.
         */
        interface WithHubDatabasePassword {
            /**
             * Specifies hubDatabasePassword.
             * @param hubDatabasePassword Password for the sync group hub database credential
             * @return the next definition stage
             */
            WithCreate withHubDatabasePassword(String hubDatabasePassword);
        }

        /**
         * The stage of the syncgroup definition allowing to specify HubDatabaseUserName.
         */
        interface WithHubDatabaseUserName {
            /**
             * Specifies hubDatabaseUserName.
             * @param hubDatabaseUserName User name for the sync group hub database credential
             * @return the next definition stage
             */
            WithCreate withHubDatabaseUserName(String hubDatabaseUserName);
        }

        /**
         * The stage of the syncgroup definition allowing to specify Interval.
         */
        interface WithInterval {
            /**
             * Specifies interval.
             * @param interval Sync interval of the sync group
             * @return the next definition stage
             */
            WithCreate withInterval(Integer interval);
        }

        /**
         * The stage of the syncgroup definition allowing to specify Schema.
         */
        interface WithSchema {
            /**
             * Specifies schema.
             * @param schema Sync schema of the sync group
             * @return the next definition stage
             */
            WithCreate withSchema(SyncGroupSchema schema);
        }

        /**
         * The stage of the syncgroup definition allowing to specify SyncDatabaseId.
         */
        interface WithSyncDatabaseId {
            /**
             * Specifies syncDatabaseId.
             * @param syncDatabaseId ARM resource id of the sync database in the sync group
             * @return the next definition stage
             */
            WithCreate withSyncDatabaseId(String syncDatabaseId);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SyncGroup>, DefinitionStages.WithConflictResolutionPolicy, DefinitionStages.WithHubDatabasePassword, DefinitionStages.WithHubDatabaseUserName, DefinitionStages.WithInterval, DefinitionStages.WithSchema, DefinitionStages.WithSyncDatabaseId {
        }
    }
    /**
     * The template for a SyncGroup update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SyncGroup>, UpdateStages.WithConflictResolutionPolicy, UpdateStages.WithHubDatabasePassword, UpdateStages.WithHubDatabaseUserName, UpdateStages.WithInterval, UpdateStages.WithSchema, UpdateStages.WithSyncDatabaseId {
    }

    /**
     * Grouping of SyncGroup update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the syncgroup update allowing to specify ConflictResolutionPolicy.
         */
        interface WithConflictResolutionPolicy {
            /**
             * Specifies conflictResolutionPolicy.
             * @param conflictResolutionPolicy Conflict resolution policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
             * @return the next update stage
             */
            Update withConflictResolutionPolicy(SyncConflictResolutionPolicy conflictResolutionPolicy);
        }

        /**
         * The stage of the syncgroup update allowing to specify HubDatabasePassword.
         */
        interface WithHubDatabasePassword {
            /**
             * Specifies hubDatabasePassword.
             * @param hubDatabasePassword Password for the sync group hub database credential
             * @return the next update stage
             */
            Update withHubDatabasePassword(String hubDatabasePassword);
        }

        /**
         * The stage of the syncgroup update allowing to specify HubDatabaseUserName.
         */
        interface WithHubDatabaseUserName {
            /**
             * Specifies hubDatabaseUserName.
             * @param hubDatabaseUserName User name for the sync group hub database credential
             * @return the next update stage
             */
            Update withHubDatabaseUserName(String hubDatabaseUserName);
        }

        /**
         * The stage of the syncgroup update allowing to specify Interval.
         */
        interface WithInterval {
            /**
             * Specifies interval.
             * @param interval Sync interval of the sync group
             * @return the next update stage
             */
            Update withInterval(Integer interval);
        }

        /**
         * The stage of the syncgroup update allowing to specify Schema.
         */
        interface WithSchema {
            /**
             * Specifies schema.
             * @param schema Sync schema of the sync group
             * @return the next update stage
             */
            Update withSchema(SyncGroupSchema schema);
        }

        /**
         * The stage of the syncgroup update allowing to specify SyncDatabaseId.
         */
        interface WithSyncDatabaseId {
            /**
             * Specifies syncDatabaseId.
             * @param syncDatabaseId ARM resource id of the sync database in the sync group
             * @return the next update stage
             */
            Update withSyncDatabaseId(String syncDatabaseId);
        }

    }
}
