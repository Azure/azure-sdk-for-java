/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.DataMaskingPolicy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2014_04_01.DataMaskingState;

class DataMaskingPolicyImpl extends CreatableUpdatableImpl<DataMaskingPolicy, DataMaskingPolicyInner, DataMaskingPolicyImpl> implements DataMaskingPolicy, DataMaskingPolicy.Definition, DataMaskingPolicy.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String serverName;
    private String databaseName;

    DataMaskingPolicyImpl(String name, SqlManager manager) {
        super(name, new DataMaskingPolicyInner());
        this.manager = manager;
        // Set resource name
        this.databaseName = name;
        //
    }

    DataMaskingPolicyImpl(DataMaskingPolicyInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.databaseName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serverName = IdParsingUtils.getValueFromIdByName(inner.id(), "servers");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DataMaskingPolicy> createResourceAsync() {
        DataMaskingPoliciesInner client = this.manager().inner().dataMaskingPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataMaskingPolicy> updateResourceAsync() {
        DataMaskingPoliciesInner client = this.manager().inner().dataMaskingPolicies();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serverName, this.databaseName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataMaskingPolicyInner> getInnerAsync() {
        DataMaskingPoliciesInner client = this.manager().inner().dataMaskingPolicies();
        return client.getAsync(this.resourceGroupName, this.serverName, this.databaseName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String applicationPrincipals() {
        return this.inner().applicationPrincipals();
    }

    @Override
    public DataMaskingState dataMaskingState() {
        return this.inner().dataMaskingState();
    }

    @Override
    public String exemptPrincipals() {
        return this.inner().exemptPrincipals();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String maskingLevel() {
        return this.inner().maskingLevel();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DataMaskingPolicyImpl withExistingDatabasis(String resourceGroupName, String serverName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.serverName = serverName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public DataMaskingPolicyImpl withDataMaskingState(DataMaskingState dataMaskingState) {
        this.inner().withDataMaskingState(dataMaskingState);
        return this;
    }

    @Override
    public DataMaskingPolicyImpl withExemptPrincipals(String exemptPrincipals) {
        this.inner().withExemptPrincipals(exemptPrincipals);
        return this;
    }

}
