/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2014_04_01.implementation;

import com.microsoft.azure.management.sql.v2014_04_01.TopQueries;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2014_04_01.QueryAggregationFunction;
import com.microsoft.azure.management.sql.v2014_04_01.QueryExecutionType;
import org.joda.time.DateTime;
import com.microsoft.azure.management.sql.v2014_04_01.QueryObservedMetricType;
import java.util.ArrayList;
import com.microsoft.azure.management.sql.v2014_04_01.QueryStatistic;
import java.util.List;

class TopQueriesImpl extends WrapperImpl<TopQueriesInner> implements TopQueries {
    private final SqlManager manager;

    TopQueriesImpl(TopQueriesInner inner,  SqlManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }



    @Override
    public QueryAggregationFunction aggregationFunction() {
        return this.inner().aggregationFunction();
    }

    @Override
    public QueryExecutionType executionType() {
        return this.inner().executionType();
    }

    @Override
    public String intervalType() {
        return this.inner().intervalType();
    }

    @Override
    public Double numberOfTopQueries() {
        return this.inner().numberOfTopQueries();
    }

    @Override
    public DateTime observationEndTime() {
        return this.inner().observationEndTime();
    }

    @Override
    public DateTime observationStartTime() {
        return this.inner().observationStartTime();
    }

    @Override
    public QueryObservedMetricType observedMetric() {
        return this.inner().observedMetric();
    }

    @Override
    public List<QueryStatistic> queries() {
        List<QueryStatistic> lst = new ArrayList<QueryStatistic>();
        if (this.inner().queries() != null) {
            for (QueryStatisticInner inner : this.inner().queries()) {
                lst.add( new QueryStatisticImpl(inner, manager()));
            }
        }
        return lst;
    }

}
