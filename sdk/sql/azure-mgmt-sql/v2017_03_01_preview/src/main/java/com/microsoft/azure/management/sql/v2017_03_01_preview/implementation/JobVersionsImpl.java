/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.sql.v2017_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobVersions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.sql.v2017_03_01_preview.JobVersion;

class JobVersionsImpl extends WrapperImpl<JobVersionsInner> implements JobVersions {
    private final SqlManager manager;

    JobVersionsImpl(SqlManager manager) {
        super(manager.inner().jobVersions());
        this.manager = manager;
    }

    public SqlManager manager() {
        return this.manager;
    }

    private JobVersionImpl wrapModel(JobVersionInner inner) {
        return  new JobVersionImpl(inner, manager());
    }

    @Override
    public Observable<JobVersion> listByJobAsync(final String resourceGroupName, final String serverName, final String jobAgentName, final String jobName) {
        JobVersionsInner client = this.inner();
        return client.listByJobAsync(resourceGroupName, serverName, jobAgentName, jobName)
        .flatMapIterable(new Func1<Page<JobVersionInner>, Iterable<JobVersionInner>>() {
            @Override
            public Iterable<JobVersionInner> call(Page<JobVersionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<JobVersionInner, JobVersion>() {
            @Override
            public JobVersion call(JobVersionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<JobVersion> getAsync(String resourceGroupName, String serverName, String jobAgentName, String jobName, int jobVersion) {
        JobVersionsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, jobAgentName, jobName, jobVersion)
        .flatMap(new Func1<JobVersionInner, Observable<JobVersion>>() {
            @Override
            public Observable<JobVersion> call(JobVersionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((JobVersion)wrapModel(inner));
                }
            }
       });
    }

}
