/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.sql.v2018_06_01_preview.implementation;

import com.microsoft.azure.management.sql.v2018_06_01_preview.ManagedInstanceVulnerabilityAssessment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.sql.v2018_06_01_preview.VulnerabilityAssessmentRecurringScansProperties;

class ManagedInstanceVulnerabilityAssessmentImpl extends CreatableUpdatableImpl<ManagedInstanceVulnerabilityAssessment, ManagedInstanceVulnerabilityAssessmentInner, ManagedInstanceVulnerabilityAssessmentImpl> implements ManagedInstanceVulnerabilityAssessment, ManagedInstanceVulnerabilityAssessment.Definition, ManagedInstanceVulnerabilityAssessment.Update {
    private final SqlManager manager;
    private String resourceGroupName;
    private String managedInstanceName;

    ManagedInstanceVulnerabilityAssessmentImpl(String name, SqlManager manager) {
        super(name, new ManagedInstanceVulnerabilityAssessmentInner());
        this.manager = manager;
        // Set resource name
        this.managedInstanceName = name;
        //
    }

    ManagedInstanceVulnerabilityAssessmentImpl(ManagedInstanceVulnerabilityAssessmentInner inner, SqlManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.managedInstanceName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.managedInstanceName = IdParsingUtils.getValueFromIdByName(inner.id(), "managedInstances");
        //
    }

    @Override
    public SqlManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ManagedInstanceVulnerabilityAssessment> createResourceAsync() {
        ManagedInstanceVulnerabilityAssessmentsInner client = this.manager().inner().managedInstanceVulnerabilityAssessments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.managedInstanceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ManagedInstanceVulnerabilityAssessment> updateResourceAsync() {
        ManagedInstanceVulnerabilityAssessmentsInner client = this.manager().inner().managedInstanceVulnerabilityAssessments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.managedInstanceName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ManagedInstanceVulnerabilityAssessmentInner> getInnerAsync() {
        ManagedInstanceVulnerabilityAssessmentsInner client = this.manager().inner().managedInstanceVulnerabilityAssessments();
        return client.getAsync(this.resourceGroupName, this.managedInstanceName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public VulnerabilityAssessmentRecurringScansProperties recurringScans() {
        return this.inner().recurringScans();
    }

    @Override
    public String storageAccountAccessKey() {
        return this.inner().storageAccountAccessKey();
    }

    @Override
    public String storageContainerPath() {
        return this.inner().storageContainerPath();
    }

    @Override
    public String storageContainerSasKey() {
        return this.inner().storageContainerSasKey();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ManagedInstanceVulnerabilityAssessmentImpl withExistingManagedInstance(String resourceGroupName, String managedInstanceName) {
        this.resourceGroupName = resourceGroupName;
        this.managedInstanceName = managedInstanceName;
        return this;
    }

    @Override
    public ManagedInstanceVulnerabilityAssessmentImpl withStorageContainerPath(String storageContainerPath) {
        this.inner().withStorageContainerPath(storageContainerPath);
        return this;
    }

    @Override
    public ManagedInstanceVulnerabilityAssessmentImpl withRecurringScans(VulnerabilityAssessmentRecurringScansProperties recurringScans) {
        this.inner().withRecurringScans(recurringScans);
        return this;
    }

    @Override
    public ManagedInstanceVulnerabilityAssessmentImpl withStorageAccountAccessKey(String storageAccountAccessKey) {
        this.inner().withStorageAccountAccessKey(storageAccountAccessKey);
        return this;
    }

    @Override
    public ManagedInstanceVulnerabilityAssessmentImpl withStorageContainerSasKey(String storageContainerSasKey) {
        this.inner().withStorageContainerSasKey(storageContainerSasKey);
        return this;
    }

}
