// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.models.AutomaticOSUpgradePolicy;
import com.azure.resourcemanager.batch.models.RollingUpgradePolicy;
import com.azure.resourcemanager.batch.models.UpgradeMode;
import com.azure.resourcemanager.batch.models.UpgradePolicy;
import org.junit.jupiter.api.Assertions;

public final class UpgradePolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpgradePolicy model = BinaryData.fromString(
            "{\"mode\":\"rolling\",\"automaticOSUpgradePolicy\":{\"disableAutomaticRollback\":false,\"enableAutomaticOSUpgrade\":true,\"useRollingUpgradePolicy\":false,\"osRollingUpgradeDeferral\":true},\"rollingUpgradePolicy\":{\"enableCrossZoneUpgrade\":false,\"maxBatchInstancePercent\":438426140,\"maxUnhealthyInstancePercent\":1665023575,\"maxUnhealthyUpgradedInstancePercent\":42464085,\"pauseTimeBetweenBatches\":\"rfdwoyu\",\"prioritizeUnhealthyInstances\":true,\"rollbackFailedInstancesOnPolicyBreach\":false}}")
            .toObject(UpgradePolicy.class);
        Assertions.assertEquals(UpgradeMode.ROLLING, model.mode());
        Assertions.assertEquals(false, model.automaticOSUpgradePolicy().disableAutomaticRollback());
        Assertions.assertEquals(true, model.automaticOSUpgradePolicy().enableAutomaticOSUpgrade());
        Assertions.assertEquals(false, model.automaticOSUpgradePolicy().useRollingUpgradePolicy());
        Assertions.assertEquals(true, model.automaticOSUpgradePolicy().osRollingUpgradeDeferral());
        Assertions.assertEquals(false, model.rollingUpgradePolicy().enableCrossZoneUpgrade());
        Assertions.assertEquals(438426140, model.rollingUpgradePolicy().maxBatchInstancePercent());
        Assertions.assertEquals(1665023575, model.rollingUpgradePolicy().maxUnhealthyInstancePercent());
        Assertions.assertEquals(42464085, model.rollingUpgradePolicy().maxUnhealthyUpgradedInstancePercent());
        Assertions.assertEquals("rfdwoyu", model.rollingUpgradePolicy().pauseTimeBetweenBatches());
        Assertions.assertEquals(true, model.rollingUpgradePolicy().prioritizeUnhealthyInstances());
        Assertions.assertEquals(false, model.rollingUpgradePolicy().rollbackFailedInstancesOnPolicyBreach());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpgradePolicy model = new UpgradePolicy().withMode(UpgradeMode.ROLLING)
            .withAutomaticOSUpgradePolicy(new AutomaticOSUpgradePolicy().withDisableAutomaticRollback(false)
                .withEnableAutomaticOSUpgrade(true)
                .withUseRollingUpgradePolicy(false)
                .withOsRollingUpgradeDeferral(true))
            .withRollingUpgradePolicy(new RollingUpgradePolicy().withEnableCrossZoneUpgrade(false)
                .withMaxBatchInstancePercent(438426140)
                .withMaxUnhealthyInstancePercent(1665023575)
                .withMaxUnhealthyUpgradedInstancePercent(42464085)
                .withPauseTimeBetweenBatches("rfdwoyu")
                .withPrioritizeUnhealthyInstances(true)
                .withRollbackFailedInstancesOnPolicyBreach(false));
        model = BinaryData.fromObject(model).toObject(UpgradePolicy.class);
        Assertions.assertEquals(UpgradeMode.ROLLING, model.mode());
        Assertions.assertEquals(false, model.automaticOSUpgradePolicy().disableAutomaticRollback());
        Assertions.assertEquals(true, model.automaticOSUpgradePolicy().enableAutomaticOSUpgrade());
        Assertions.assertEquals(false, model.automaticOSUpgradePolicy().useRollingUpgradePolicy());
        Assertions.assertEquals(true, model.automaticOSUpgradePolicy().osRollingUpgradeDeferral());
        Assertions.assertEquals(false, model.rollingUpgradePolicy().enableCrossZoneUpgrade());
        Assertions.assertEquals(438426140, model.rollingUpgradePolicy().maxBatchInstancePercent());
        Assertions.assertEquals(1665023575, model.rollingUpgradePolicy().maxUnhealthyInstancePercent());
        Assertions.assertEquals(42464085, model.rollingUpgradePolicy().maxUnhealthyUpgradedInstancePercent());
        Assertions.assertEquals("rfdwoyu", model.rollingUpgradePolicy().pauseTimeBetweenBatches());
        Assertions.assertEquals(true, model.rollingUpgradePolicy().prioritizeUnhealthyInstances());
        Assertions.assertEquals(false, model.rollingUpgradePolicy().rollbackFailedInstancesOnPolicyBreach());
    }
}
