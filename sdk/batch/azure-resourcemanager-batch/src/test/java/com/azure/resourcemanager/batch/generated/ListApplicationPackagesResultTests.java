// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.fluent.models.ApplicationPackageInner;
import com.azure.resourcemanager.batch.models.ListApplicationPackagesResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ListApplicationPackagesResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListApplicationPackagesResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"state\":\"Pending\",\"format\":\"jrmvdjwzrlo\",\"storageUrl\":\"clwhijcoejctbz\",\"storageUrlExpiry\":\"2021-04-25T10:37:50Z\",\"lastActivationTime\":\"2021-02-04T17:33:10Z\"},\"etag\":\"cbkbfkg\",\"tags\":{\"xaxcfjpgddtocjjx\":\"kexxppof\",\"eojnxqbzvddn\":\"vpmouexhdzxib\",\"aoqvuh\":\"wndeicbtwnp\"},\"id\":\"hcffcyddglmjthjq\",\"name\":\"wpyeicxmqciwqvh\",\"type\":\"hix\"}],\"nextLink\":\"gdtopbobjogh\"}")
            .toObject(ListApplicationPackagesResult.class);
        Assertions.assertEquals("kexxppof", model.value().get(0).tags().get("xaxcfjpgddtocjjx"));
        Assertions.assertEquals("gdtopbobjogh", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListApplicationPackagesResult model = new ListApplicationPackagesResult()
            .withValue(Arrays.asList(new ApplicationPackageInner().withTags(
                mapOf("xaxcfjpgddtocjjx", "kexxppof", "eojnxqbzvddn", "vpmouexhdzxib", "aoqvuh", "wndeicbtwnp"))))
            .withNextLink("gdtopbobjogh");
        model = BinaryData.fromObject(model).toObject(ListApplicationPackagesResult.class);
        Assertions.assertEquals("kexxppof", model.value().get(0).tags().get("xaxcfjpgddtocjjx"));
        Assertions.assertEquals("gdtopbobjogh", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
