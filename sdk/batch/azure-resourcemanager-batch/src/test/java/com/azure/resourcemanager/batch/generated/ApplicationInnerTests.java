// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.fluent.models.ApplicationInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"qfprwzwbn\",\"allowUpdates\":true,\"defaultVersion\":\"nwui\"},\"etag\":\"a\",\"tags\":{\"hr\":\"fizuckyf\",\"zwdzuh\":\"idf\",\"wxmnteiwao\":\"ymwisdkft\"},\"id\":\"vkmijcmmxdcuf\",\"name\":\"fsrpymzidnse\",\"type\":\"cxtbzsg\"}")
            .toObject(ApplicationInner.class);
        Assertions.assertEquals("fizuckyf", model.tags().get("hr"));
        Assertions.assertEquals("qfprwzwbn", model.displayName());
        Assertions.assertEquals(true, model.allowUpdates());
        Assertions.assertEquals("nwui", model.defaultVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationInner model
            = new ApplicationInner().withTags(mapOf("hr", "fizuckyf", "zwdzuh", "idf", "wxmnteiwao", "ymwisdkft"))
                .withDisplayName("qfprwzwbn")
                .withAllowUpdates(true)
                .withDefaultVersion("nwui");
        model = BinaryData.fromObject(model).toObject(ApplicationInner.class);
        Assertions.assertEquals("fizuckyf", model.tags().get("hr"));
        Assertions.assertEquals("qfprwzwbn", model.displayName());
        Assertions.assertEquals(true, model.allowUpdates());
        Assertions.assertEquals("nwui", model.defaultVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
