// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.models.DynamicVNetAssignmentScope;
import com.azure.resourcemanager.batch.models.InboundEndpointProtocol;
import com.azure.resourcemanager.batch.models.InboundNatPool;
import com.azure.resourcemanager.batch.models.IpAddressProvisioningType;
import com.azure.resourcemanager.batch.models.NetworkConfiguration;
import com.azure.resourcemanager.batch.models.NetworkSecurityGroupRule;
import com.azure.resourcemanager.batch.models.NetworkSecurityGroupRuleAccess;
import com.azure.resourcemanager.batch.models.PoolEndpointConfiguration;
import com.azure.resourcemanager.batch.models.PublicIpAddressConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkConfiguration model = BinaryData.fromString(
            "{\"subnetId\":\"mwmbes\",\"dynamicVnetAssignmentScope\":\"none\",\"endpointConfiguration\":{\"inboundNatPools\":[{\"name\":\"wtppjflcxogaoko\",\"protocol\":\"TCP\",\"backendPort\":21704487,\"frontendPortRangeStart\":1640463449,\"frontendPortRangeEnd\":1813308851,\"networkSecurityGroupRules\":[{\"priority\":1995245792,\"access\":\"Deny\",\"sourceAddressPrefix\":\"kqze\",\"sourcePortRanges\":[\"dltfz\",\"mhhv\",\"gureodkwobdag\",\"tibqdxbxwakb\"]},{\"priority\":2040328424,\"access\":\"Allow\",\"sourceAddressPrefix\":\"xndlkzgxhu\",\"sourcePortRanges\":[\"lbpodxunk\",\"ebxmubyynt\",\"lrb\"]},{\"priority\":837429381,\"access\":\"Allow\",\"sourceAddressPrefix\":\"oievseotgqrlltm\",\"sourcePortRanges\":[\"auwzizxbmpgc\",\"efuzmuvpbttd\",\"morppxebmnzbtbh\",\"pglkf\"]}]},{\"name\":\"ohdneuel\",\"protocol\":\"TCP\",\"backendPort\":571890155,\"frontendPortRangeStart\":1777092191,\"frontendPortRangeEnd\":2019789161,\"networkSecurityGroupRules\":[{\"priority\":58245942,\"access\":\"Deny\",\"sourceAddressPrefix\":\"zfikd\",\"sourcePortRanges\":[\"quuvxzxcl\"]},{\"priority\":2116821034,\"access\":\"Deny\",\"sourceAddressPrefix\":\"hhqzonosgg\",\"sourcePortRanges\":[\"ohfwds\"]},{\"priority\":201409851,\"access\":\"Allow\",\"sourceAddressPrefix\":\"aljutiiswac\",\"sourcePortRanges\":[\"dkzzewkfvhqcrail\"]}]}]},\"publicIPAddressConfiguration\":{\"provision\":\"NoPublicIPAddresses\",\"ipAddressIds\":[\"uflrwd\",\"hdlxyjrxsagafcn\",\"hgw\"]},\"enableAcceleratedNetworking\":false}")
            .toObject(NetworkConfiguration.class);
        Assertions.assertEquals("mwmbes", model.subnetId());
        Assertions.assertEquals(DynamicVNetAssignmentScope.NONE, model.dynamicVnetAssignmentScope());
        Assertions.assertEquals("wtppjflcxogaoko", model.endpointConfiguration().inboundNatPools().get(0).name());
        Assertions.assertEquals(InboundEndpointProtocol.TCP,
            model.endpointConfiguration().inboundNatPools().get(0).protocol());
        Assertions.assertEquals(21704487, model.endpointConfiguration().inboundNatPools().get(0).backendPort());
        Assertions.assertEquals(1640463449,
            model.endpointConfiguration().inboundNatPools().get(0).frontendPortRangeStart());
        Assertions.assertEquals(1813308851,
            model.endpointConfiguration().inboundNatPools().get(0).frontendPortRangeEnd());
        Assertions.assertEquals(1995245792,
            model.endpointConfiguration().inboundNatPools().get(0).networkSecurityGroupRules().get(0).priority());
        Assertions.assertEquals(NetworkSecurityGroupRuleAccess.DENY,
            model.endpointConfiguration().inboundNatPools().get(0).networkSecurityGroupRules().get(0).access());
        Assertions.assertEquals("kqze", model.endpointConfiguration().inboundNatPools().get(0)
            .networkSecurityGroupRules().get(0).sourceAddressPrefix());
        Assertions.assertEquals("dltfz", model.endpointConfiguration().inboundNatPools().get(0)
            .networkSecurityGroupRules().get(0).sourcePortRanges().get(0));
        Assertions.assertEquals(IpAddressProvisioningType.NO_PUBLIC_IPADDRESSES,
            model.publicIpAddressConfiguration().provision());
        Assertions.assertEquals("uflrwd", model.publicIpAddressConfiguration().ipAddressIds().get(0));
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkConfiguration model
            = new NetworkConfiguration()
                .withSubnetId(
                    "mwmbes")
                .withDynamicVnetAssignmentScope(
                    DynamicVNetAssignmentScope.NONE)
                .withEndpointConfiguration(new PoolEndpointConfiguration().withInboundNatPools(Arrays.asList(
                    new InboundNatPool().withName("wtppjflcxogaoko").withProtocol(InboundEndpointProtocol.TCP)
                        .withBackendPort(21704487).withFrontendPortRangeStart(1640463449)
                        .withFrontendPortRangeEnd(1813308851)
                        .withNetworkSecurityGroupRules(Arrays.asList(
                            new NetworkSecurityGroupRule().withPriority(1995245792)
                                .withAccess(NetworkSecurityGroupRuleAccess.DENY).withSourceAddressPrefix("kqze")
                                .withSourcePortRanges(Arrays.asList("dltfz", "mhhv", "gureodkwobdag", "tibqdxbxwakb")),
                            new NetworkSecurityGroupRule().withPriority(2040328424)
                                .withAccess(NetworkSecurityGroupRuleAccess.ALLOW).withSourceAddressPrefix("xndlkzgxhu")
                                .withSourcePortRanges(Arrays.asList("lbpodxunk", "ebxmubyynt", "lrb")),
                            new NetworkSecurityGroupRule().withPriority(837429381)
                                .withAccess(NetworkSecurityGroupRuleAccess.ALLOW)
                                .withSourceAddressPrefix("oievseotgqrlltm").withSourcePortRanges(
                                    Arrays.asList("auwzizxbmpgc", "efuzmuvpbttd", "morppxebmnzbtbh", "pglkf")))),
                    new InboundNatPool().withName("ohdneuel").withProtocol(InboundEndpointProtocol.TCP)
                        .withBackendPort(571890155).withFrontendPortRangeStart(1777092191)
                        .withFrontendPortRangeEnd(2019789161)
                        .withNetworkSecurityGroupRules(Arrays.asList(
                            new NetworkSecurityGroupRule().withPriority(58245942)
                                .withAccess(NetworkSecurityGroupRuleAccess.DENY).withSourceAddressPrefix("zfikd")
                                .withSourcePortRanges(Arrays.asList("quuvxzxcl")),
                            new NetworkSecurityGroupRule().withPriority(2116821034)
                                .withAccess(NetworkSecurityGroupRuleAccess.DENY).withSourceAddressPrefix("hhqzonosgg")
                                .withSourcePortRanges(Arrays.asList("ohfwds")),
                            new NetworkSecurityGroupRule().withPriority(201409851)
                                .withAccess(NetworkSecurityGroupRuleAccess.ALLOW).withSourceAddressPrefix("aljutiiswac")
                                .withSourcePortRanges(Arrays.asList("dkzzewkfvhqcrail")))))))
                .withPublicIpAddressConfiguration(
                    new PublicIpAddressConfiguration().withProvision(IpAddressProvisioningType.NO_PUBLIC_IPADDRESSES)
                        .withIpAddressIds(Arrays.asList("uflrwd", "hdlxyjrxsagafcn", "hgw")))
                .withEnableAcceleratedNetworking(false);
        model = BinaryData.fromObject(model).toObject(NetworkConfiguration.class);
        Assertions.assertEquals("mwmbes", model.subnetId());
        Assertions.assertEquals(DynamicVNetAssignmentScope.NONE, model.dynamicVnetAssignmentScope());
        Assertions.assertEquals("wtppjflcxogaoko", model.endpointConfiguration().inboundNatPools().get(0).name());
        Assertions.assertEquals(InboundEndpointProtocol.TCP,
            model.endpointConfiguration().inboundNatPools().get(0).protocol());
        Assertions.assertEquals(21704487, model.endpointConfiguration().inboundNatPools().get(0).backendPort());
        Assertions.assertEquals(1640463449,
            model.endpointConfiguration().inboundNatPools().get(0).frontendPortRangeStart());
        Assertions.assertEquals(1813308851,
            model.endpointConfiguration().inboundNatPools().get(0).frontendPortRangeEnd());
        Assertions.assertEquals(1995245792,
            model.endpointConfiguration().inboundNatPools().get(0).networkSecurityGroupRules().get(0).priority());
        Assertions.assertEquals(NetworkSecurityGroupRuleAccess.DENY,
            model.endpointConfiguration().inboundNatPools().get(0).networkSecurityGroupRules().get(0).access());
        Assertions.assertEquals("kqze", model.endpointConfiguration().inboundNatPools().get(0)
            .networkSecurityGroupRules().get(0).sourceAddressPrefix());
        Assertions.assertEquals("dltfz", model.endpointConfiguration().inboundNatPools().get(0)
            .networkSecurityGroupRules().get(0).sourcePortRanges().get(0));
        Assertions.assertEquals(IpAddressProvisioningType.NO_PUBLIC_IPADDRESSES,
            model.publicIpAddressConfiguration().provision());
        Assertions.assertEquals("uflrwd", model.publicIpAddressConfiguration().ipAddressIds().get(0));
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
    }
}
