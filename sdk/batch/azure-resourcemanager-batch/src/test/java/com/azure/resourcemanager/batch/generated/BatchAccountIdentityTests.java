// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.models.BatchAccountIdentity;
import com.azure.resourcemanager.batch.models.ResourceIdentityType;
import com.azure.resourcemanager.batch.models.UserAssignedIdentities;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class BatchAccountIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BatchAccountIdentity model = BinaryData.fromString(
            "{\"principalId\":\"rcryuanzwuxzdxta\",\"tenantId\":\"lhmwhfpmrqobm\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"kohdbiha\":{\"principalId\":\"ryrtihfxtijbpzv\",\"clientId\":\"wzsymglzufcy\"},\"git\":{\"principalId\":\"fhfcb\",\"clientId\":\"s\"},\"n\":{\"principalId\":\"qhabifpikxwcz\",\"clientId\":\"scnpqxuhivy\"},\"grtfwvu\":{\"principalId\":\"b\",\"clientId\":\"rkxvdum\"}}}")
            .toObject(BatchAccountIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BatchAccountIdentity model = new BatchAccountIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("kohdbiha", new UserAssignedIdentities(), "git", new UserAssignedIdentities(), "n",
                    new UserAssignedIdentities(), "grtfwvu", new UserAssignedIdentities()));
        model = BinaryData.fromObject(model).toObject(BatchAccountIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
