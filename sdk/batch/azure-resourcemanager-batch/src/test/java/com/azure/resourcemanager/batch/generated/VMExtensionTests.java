// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.batch.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.batch.models.VMExtension;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VMExtensionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VMExtension model = BinaryData.fromString(
            "{\"name\":\"cjwvn\",\"publisher\":\"dldwmgxc\",\"type\":\"rslpmutwuoeg\",\"typeHandlerVersion\":\"khjwn\",\"autoUpgradeMinorVersion\":false,\"enableAutomaticUpgrade\":true,\"settings\":\"datai\",\"protectedSettings\":\"datadggkzzlvmbmpa\",\"provisionAfterExtensions\":[\"dfvue\",\"yw\",\"bpfvm\"]}")
            .toObject(VMExtension.class);
        Assertions.assertEquals("cjwvn", model.name());
        Assertions.assertEquals("dldwmgxc", model.publisher());
        Assertions.assertEquals("rslpmutwuoeg", model.type());
        Assertions.assertEquals("khjwn", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
        Assertions.assertEquals(true, model.enableAutomaticUpgrade());
        Assertions.assertEquals("dfvue", model.provisionAfterExtensions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VMExtension model = new VMExtension().withName("cjwvn")
            .withPublisher("dldwmgxc")
            .withType("rslpmutwuoeg")
            .withTypeHandlerVersion("khjwn")
            .withAutoUpgradeMinorVersion(false)
            .withEnableAutomaticUpgrade(true)
            .withSettings("datai")
            .withProtectedSettings("datadggkzzlvmbmpa")
            .withProvisionAfterExtensions(Arrays.asList("dfvue", "yw", "bpfvm"));
        model = BinaryData.fromObject(model).toObject(VMExtension.class);
        Assertions.assertEquals("cjwvn", model.name());
        Assertions.assertEquals("dldwmgxc", model.publisher());
        Assertions.assertEquals("rslpmutwuoeg", model.type());
        Assertions.assertEquals("khjwn", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
        Assertions.assertEquals(true, model.enableAutomaticUpgrade());
        Assertions.assertEquals("dfvue", model.provisionAfterExtensions().get(0));
    }
}
