/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.batch.v2017_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.BatchManager;
import com.microsoft.azure.management.batch.v2017_09_01.implementation.BatchAccountInner;

/**
 * Type representing BatchAccount.
 */
public interface BatchAccount extends HasInner<BatchAccountInner>, Resource, GroupableResourceCore<BatchManager, BatchAccountInner>, HasResourceGroup, Refreshable<BatchAccount>, Updatable<BatchAccount.Update>, HasManager<BatchManager> {
    /**
     * @return the accountEndpoint value.
     */
    String accountEndpoint();

    /**
     * @return the activeJobAndJobScheduleQuota value.
     */
    int activeJobAndJobScheduleQuota();

    /**
     * @return the autoStorage value.
     */
    AutoStorageProperties autoStorage();

    /**
     * @return the dedicatedCoreQuota value.
     */
    int dedicatedCoreQuota();

    /**
     * @return the keyVaultReference value.
     */
    KeyVaultReference keyVaultReference();

    /**
     * @return the lowPriorityCoreQuota value.
     */
    int lowPriorityCoreQuota();

    /**
     * @return the poolAllocationMode value.
     */
    PoolAllocationMode poolAllocationMode();

    /**
     * @return the poolQuota value.
     */
    int poolQuota();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * The entirety of the BatchAccount definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of BatchAccount definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a BatchAccount definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the BatchAccount definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the batchaccount definition allowing to specify AutoStorage.
         */
        interface WithAutoStorage {
            /**
             * Specifies autoStorage.
             * @param autoStorage The properties related to the auto-storage account
             * @return the next definition stage
             */
            WithCreate withAutoStorage(AutoStorageBaseProperties autoStorage);
        }

        /**
         * The stage of the batchaccount definition allowing to specify KeyVaultReference.
         */
        interface WithKeyVaultReference {
            /**
             * Specifies keyVaultReference.
             * @param keyVaultReference A reference to the Azure key vault associated with the Batch account
             * @return the next definition stage
             */
            WithCreate withKeyVaultReference(KeyVaultReference keyVaultReference);
        }

        /**
         * The stage of the batchaccount definition allowing to specify PoolAllocationMode.
         */
        interface WithPoolAllocationMode {
            /**
             * Specifies poolAllocationMode.
             * @param poolAllocationMode The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is UserSubscription, clients must use Azure Active Directory. The default is BatchService. Possible values include: 'BatchService', 'UserSubscription'
             * @return the next definition stage
             */
            WithCreate withPoolAllocationMode(PoolAllocationMode poolAllocationMode);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<BatchAccount>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithAutoStorage, DefinitionStages.WithKeyVaultReference, DefinitionStages.WithPoolAllocationMode {
        }
    }
    /**
     * The template for a BatchAccount update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<BatchAccount>, Resource.UpdateWithTags<Update>, UpdateStages.WithAutoStorage {
    }

    /**
     * Grouping of BatchAccount update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the batchaccount update allowing to specify AutoStorage.
         */
        interface WithAutoStorage {
            /**
             * Specifies autoStorage.
             * @param autoStorage The properties related to the auto-storage account
             * @return the next update stage
             */
            Update withAutoStorage(AutoStorageBaseProperties autoStorage);
        }

    }
}
