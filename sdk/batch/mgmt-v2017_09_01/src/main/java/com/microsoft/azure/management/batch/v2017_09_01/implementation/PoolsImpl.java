/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.batch.v2017_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.batch.v2017_09_01.Pools;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.batch.v2017_09_01.Pool;

class PoolsImpl extends WrapperImpl<PoolsInner> implements Pools {
    private final BatchManager manager;

    PoolsImpl(BatchManager manager) {
        super(manager.inner().pools());
        this.manager = manager;
    }

    public BatchManager manager() {
        return this.manager;
    }

    @Override
    public PoolImpl define(String name) {
        return wrapModel(name);
    }

    private PoolImpl wrapModel(PoolInner inner) {
        return  new PoolImpl(inner, manager());
    }

    private PoolImpl wrapModel(String name) {
        return new PoolImpl(name, this.manager());
    }

    @Override
    public Observable<Pool> disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName) {
        PoolsInner client = this.inner();
        return client.disableAutoScaleAsync(resourceGroupName, accountName, poolName)
        .map(new Func1<PoolInner, Pool>() {
            @Override
            public Pool call(PoolInner inner) {
                return new PoolImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Pool> stopResizeAsync(String resourceGroupName, String accountName, String poolName) {
        PoolsInner client = this.inner();
        return client.stopResizeAsync(resourceGroupName, accountName, poolName)
        .map(new Func1<PoolInner, Pool>() {
            @Override
            public Pool call(PoolInner inner) {
                return new PoolImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Pool> listByBatchAccountAsync(final String resourceGroupName, final String accountName) {
        PoolsInner client = this.inner();
        return client.listByBatchAccountAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<PoolInner>, Iterable<PoolInner>>() {
            @Override
            public Iterable<PoolInner> call(Page<PoolInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PoolInner, Pool>() {
            @Override
            public Pool call(PoolInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Pool> getAsync(String resourceGroupName, String accountName, String poolName) {
        PoolsInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, poolName)
        .flatMap(new Func1<PoolInner, Observable<Pool>>() {
            @Override
            public Observable<Pool> call(PoolInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Pool)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String poolName) {
        PoolsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, poolName).toCompletable();
    }

}
