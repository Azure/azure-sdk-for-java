// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.util.List;

/** Specification for creating a new Pool. */
@Fluent
public final class PoolSpecification {
    /*
     * The display name need not be unique and can contain any Unicode characters up
     * to a maximum length of 1024.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * For information about available sizes of virtual machines in Pools, see Choose
     * a VM size for Compute Nodes in an Azure Batch Pool
     * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
     */
    @JsonProperty(value = "vmSize", required = true)
    private String vmSize;

    /*
     * This property must be specified if the Pool needs to be created with Azure PaaS
     * VMs. This property and virtualMachineConfiguration are mutually exclusive and
     * one of the properties must be specified. If neither is specified then the Batch
     * service returns an error; if you are calling the REST API directly, the HTTP
     * status code is 400 (Bad Request). This property cannot be specified if the
     * Batch Account was created with its poolAllocationMode property set to
     * 'UserSubscription'.
     */
    @JsonProperty(value = "cloudServiceConfiguration")
    private CloudServiceConfiguration cloudServiceConfiguration;

    /*
     * This property must be specified if the Pool needs to be created with Azure IaaS
     * VMs. This property and cloudServiceConfiguration are mutually exclusive and one
     * of the properties must be specified. If neither is specified then the Batch
     * service returns an error; if you are calling the REST API directly, the HTTP
     * status code is 400 (Bad Request).
     */
    @JsonProperty(value = "virtualMachineConfiguration")
    private VirtualMachineConfiguration virtualMachineConfiguration;

    /*
     * The default value is 1. The maximum value is the smaller of 4 times the number
     * of cores of the vmSize of the pool or 256.
     */
    @JsonProperty(value = "taskSlotsPerNode")
    private Integer taskSlotsPerNode;

    /*
     * If not specified, the default is spread.
     */
    @JsonProperty(value = "taskSchedulingPolicy")
    private TaskSchedulingPolicy taskSchedulingPolicy;

    /*
     * This timeout applies only to manual scaling; it has no effect when
     * enableAutoScale is set to true. The default value is 15 minutes. The minimum
     * value is 5 minutes. If you specify a value less than 5 minutes, the Batch
     * service rejects the request with an error; if you are calling the REST API
     * directly, the HTTP status code is 400 (Bad Request).
     */
    @JsonProperty(value = "resizeTimeout")
    private Duration resizeTimeout;

    /*
     * This property must not be specified if enableAutoScale is set to true. If
     * enableAutoScale is set to false, then you must set either targetDedicatedNodes,
     * targetLowPriorityNodes, or both.
     */
    @JsonProperty(value = "targetDedicatedNodes")
    private Integer targetDedicatedNodes;

    /*
     * This property must not be specified if enableAutoScale is set to true. If
     * enableAutoScale is set to false, then you must set either targetDedicatedNodes,
     * targetLowPriorityNodes, or both.
     */
    @JsonProperty(value = "targetLowPriorityNodes")
    private Integer targetLowPriorityNodes;

    /*
     * If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must
     * be specified. If true, the autoScaleFormula element is required. The Pool
     * automatically resizes according to the formula. The default value is false.
     */
    @JsonProperty(value = "enableAutoScale")
    private Boolean enableAutoScale;

    /*
     * This property must not be specified if enableAutoScale is set to false. It is
     * required if enableAutoScale is set to true. The formula is checked for validity
     * before the Pool is created. If the formula is not valid, the Batch service
     * rejects the request with detailed error information.
     */
    @JsonProperty(value = "autoScaleFormula")
    private String autoScaleFormula;

    /*
     * The default value is 15 minutes. The minimum and maximum value are 5 minutes
     * and 168 hours respectively. If you specify a value less than 5 minutes or
     * greater than 168 hours, the Batch service rejects the request with an invalid
     * property value error; if you are calling the REST API directly, the HTTP status
     * code is 400 (Bad Request).
     */
    @JsonProperty(value = "autoScaleEvaluationInterval")
    private Duration autoScaleEvaluationInterval;

    /*
     * Enabling inter-node communication limits the maximum size of the Pool due to
     * deployment restrictions on the Compute Nodes of the Pool. This may result in
     * the Pool not reaching its desired size. The default value is false.
     */
    @JsonProperty(value = "enableInterNodeCommunication")
    private Boolean enableInterNodeCommunication;

    /*
     * The network configuration for a Pool.
     */
    @JsonProperty(value = "networkConfiguration")
    private NetworkConfiguration networkConfiguration;

    /*
     * Batch will retry Tasks when a recovery operation is triggered on a Node.
     * Examples of recovery operations include (but are not limited to) when an
     * unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
     * Retries due to recovery operations are independent of and are not counted
     * against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
     * retry due to a recovery operation may occur. Because of this, all Tasks should
     * be idempotent. This means Tasks need to tolerate being interrupted and
     * restarted without causing any corruption or duplicate data. The best practice
     * for long running Tasks is to use some form of checkpointing. In some cases the
     * StartTask may be re-run even though the Compute Node was not rebooted. Special
     * care should be taken to avoid StartTasks which create breakaway process or
     * install/launch services from the StartTask working directory, as this will
     * block Batch from being able to re-run the StartTask.
     */
    @JsonProperty(value = "startTask")
    private StartTask startTask;

    /*
     * For Windows Nodes, the Batch service installs the Certificates to the specified
     * Certificate store and location. For Linux Compute Nodes, the Certificates are
     * stored in a directory inside the Task working directory and an environment
     * variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this
     * location. For Certificates with visibility of 'remoteUser', a 'certs' directory
     * is created in the user's home directory (e.g., /home/{user-name}/certs) and
     * Certificates are placed in that directory.
     */
    @JsonProperty(value = "certificateReferences")
    private List<CertificateReference> certificateReferences;

    /*
     * When creating a pool, the package's application ID must be fully qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
     * Changes to Package references affect all new Nodes joining the Pool, but do not
     * affect Compute Nodes that are already in the Pool until they are rebooted or
     * reimaged. There is a maximum of 10 Package references on any given Pool.
     */
    @JsonProperty(value = "applicationPackageReferences")
    private List<ApplicationPackageReference> applicationPackageReferences;

    /*
     * The list of application licenses must be a subset of available Batch service
     * application licenses. If a license is requested which is not supported, Pool
     * creation will fail. The permitted licenses available on the Pool are 'maya',
     * 'vray', '3dsmax', 'arnold'. An additional charge applies for each application
     * license added to the Pool.
     */
    @JsonProperty(value = "applicationLicenses")
    private List<String> applicationLicenses;

    /*
     * The list of user Accounts to be created on each Compute Node in the Pool.
     */
    @JsonProperty(value = "userAccounts")
    private List<UserAccount> userAccounts;

    /*
     * The Batch service does not assign any meaning to metadata; it is solely for the
     * use of user code.
     */
    @JsonProperty(value = "metadata")
    private List<MetadataItem> metadata;

    /*
     * This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
     */
    @JsonProperty(value = "mountConfiguration")
    private List<MountConfiguration> mountConfiguration;

    /*
     * If omitted, the default value is Default.
     */
    @JsonProperty(value = "targetNodeCommunicationMode")
    private NodeCommunicationMode targetNodeCommunicationMode;

    /**
     * Creates an instance of PoolSpecification class.
     *
     * @param vmSize the vmSize value to set.
     */
    @JsonCreator
    public PoolSpecification(@JsonProperty(value = "vmSize", required = true) String vmSize) {
        this.vmSize = vmSize;
    }

    /**
     * Get the displayName property: The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     *
     * @param displayName the displayName value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the vmSize property: For information about available sizes of virtual machines in Pools, see Choose a VM size
     * for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
     *
     * @return the vmSize value.
     */
    public String getVmSize() {
        return this.vmSize;
    }

    /**
     * Get the cloudServiceConfiguration property: This property must be specified if the Pool needs to be created with
     * Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties
     * must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST
     * API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch Account
     * was created with its poolAllocationMode property set to 'UserSubscription'.
     *
     * @return the cloudServiceConfiguration value.
     */
    public CloudServiceConfiguration getCloudServiceConfiguration() {
        return this.cloudServiceConfiguration;
    }

    /**
     * Set the cloudServiceConfiguration property: This property must be specified if the Pool needs to be created with
     * Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties
     * must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST
     * API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch Account
     * was created with its poolAllocationMode property set to 'UserSubscription'.
     *
     * @param cloudServiceConfiguration the cloudServiceConfiguration value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setCloudServiceConfiguration(CloudServiceConfiguration cloudServiceConfiguration) {
        this.cloudServiceConfiguration = cloudServiceConfiguration;
        return this;
    }

    /**
     * Get the virtualMachineConfiguration property: This property must be specified if the Pool needs to be created
     * with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties
     * must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST
     * API directly, the HTTP status code is 400 (Bad Request).
     *
     * @return the virtualMachineConfiguration value.
     */
    public VirtualMachineConfiguration getVirtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    /**
     * Set the virtualMachineConfiguration property: This property must be specified if the Pool needs to be created
     * with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties
     * must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST
     * API directly, the HTTP status code is 400 (Bad Request).
     *
     * @param virtualMachineConfiguration the virtualMachineConfiguration value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
        this.virtualMachineConfiguration = virtualMachineConfiguration;
        return this;
    }

    /**
     * Get the taskSlotsPerNode property: The default value is 1. The maximum value is the smaller of 4 times the number
     * of cores of the vmSize of the pool or 256.
     *
     * @return the taskSlotsPerNode value.
     */
    public Integer getTaskSlotsPerNode() {
        return this.taskSlotsPerNode;
    }

    /**
     * Set the taskSlotsPerNode property: The default value is 1. The maximum value is the smaller of 4 times the number
     * of cores of the vmSize of the pool or 256.
     *
     * @param taskSlotsPerNode the taskSlotsPerNode value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setTaskSlotsPerNode(Integer taskSlotsPerNode) {
        this.taskSlotsPerNode = taskSlotsPerNode;
        return this;
    }

    /**
     * Get the taskSchedulingPolicy property: If not specified, the default is spread.
     *
     * @return the taskSchedulingPolicy value.
     */
    public TaskSchedulingPolicy getTaskSchedulingPolicy() {
        return this.taskSchedulingPolicy;
    }

    /**
     * Set the taskSchedulingPolicy property: If not specified, the default is spread.
     *
     * @param taskSchedulingPolicy the taskSchedulingPolicy value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
        this.taskSchedulingPolicy = taskSchedulingPolicy;
        return this;
    }

    /**
     * Get the resizeTimeout property: This timeout applies only to manual scaling; it has no effect when
     * enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a
     * value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API
     * directly, the HTTP status code is 400 (Bad Request).
     *
     * @return the resizeTimeout value.
     */
    public Duration getResizeTimeout() {
        return this.resizeTimeout;
    }

    /**
     * Set the resizeTimeout property: This timeout applies only to manual scaling; it has no effect when
     * enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a
     * value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API
     * directly, the HTTP status code is 400 (Bad Request).
     *
     * @param resizeTimeout the resizeTimeout value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setResizeTimeout(Duration resizeTimeout) {
        this.resizeTimeout = resizeTimeout;
        return this;
    }

    /**
     * Get the targetDedicatedNodes property: This property must not be specified if enableAutoScale is set to true. If
     * enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @return the targetDedicatedNodes value.
     */
    public Integer getTargetDedicatedNodes() {
        return this.targetDedicatedNodes;
    }

    /**
     * Set the targetDedicatedNodes property: This property must not be specified if enableAutoScale is set to true. If
     * enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @param targetDedicatedNodes the targetDedicatedNodes value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setTargetDedicatedNodes(Integer targetDedicatedNodes) {
        this.targetDedicatedNodes = targetDedicatedNodes;
        return this;
    }

    /**
     * Get the targetLowPriorityNodes property: This property must not be specified if enableAutoScale is set to true.
     * If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or
     * both.
     *
     * @return the targetLowPriorityNodes value.
     */
    public Integer getTargetLowPriorityNodes() {
        return this.targetLowPriorityNodes;
    }

    /**
     * Set the targetLowPriorityNodes property: This property must not be specified if enableAutoScale is set to true.
     * If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or
     * both.
     *
     * @param targetLowPriorityNodes the targetLowPriorityNodes value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setTargetLowPriorityNodes(Integer targetLowPriorityNodes) {
        this.targetLowPriorityNodes = targetLowPriorityNodes;
        return this;
    }

    /**
     * Get the enableAutoScale property: If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must
     * be specified. If true, the autoScaleFormula element is required. The Pool automatically resizes according to the
     * formula. The default value is false.
     *
     * @return the enableAutoScale value.
     */
    public Boolean isEnableAutoScale() {
        return this.enableAutoScale;
    }

    /**
     * Set the enableAutoScale property: If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must
     * be specified. If true, the autoScaleFormula element is required. The Pool automatically resizes according to the
     * formula. The default value is false.
     *
     * @param enableAutoScale the enableAutoScale value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setEnableAutoScale(Boolean enableAutoScale) {
        this.enableAutoScale = enableAutoScale;
        return this;
    }

    /**
     * Get the autoScaleFormula property: This property must not be specified if enableAutoScale is set to false. It is
     * required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If
     * the formula is not valid, the Batch service rejects the request with detailed error information.
     *
     * @return the autoScaleFormula value.
     */
    public String getAutoScaleFormula() {
        return this.autoScaleFormula;
    }

    /**
     * Set the autoScaleFormula property: This property must not be specified if enableAutoScale is set to false. It is
     * required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If
     * the formula is not valid, the Batch service rejects the request with detailed error information.
     *
     * @param autoScaleFormula the autoScaleFormula value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setAutoScaleFormula(String autoScaleFormula) {
        this.autoScaleFormula = autoScaleFormula;
        return this;
    }

    /**
     * Get the autoScaleEvaluationInterval property: The default value is 15 minutes. The minimum and maximum value are
     * 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the
     * Batch service rejects the request with an invalid property value error; if you are calling the REST API directly,
     * the HTTP status code is 400 (Bad Request).
     *
     * @return the autoScaleEvaluationInterval value.
     */
    public Duration getAutoScaleEvaluationInterval() {
        return this.autoScaleEvaluationInterval;
    }

    /**
     * Set the autoScaleEvaluationInterval property: The default value is 15 minutes. The minimum and maximum value are
     * 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the
     * Batch service rejects the request with an invalid property value error; if you are calling the REST API directly,
     * the HTTP status code is 400 (Bad Request).
     *
     * @param autoScaleEvaluationInterval the autoScaleEvaluationInterval value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setAutoScaleEvaluationInterval(Duration autoScaleEvaluationInterval) {
        this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
        return this;
    }

    /**
     * Get the enableInterNodeCommunication property: Enabling inter-node communication limits the maximum size of the
     * Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
     * its desired size. The default value is false.
     *
     * @return the enableInterNodeCommunication value.
     */
    public Boolean isEnableInterNodeCommunication() {
        return this.enableInterNodeCommunication;
    }

    /**
     * Set the enableInterNodeCommunication property: Enabling inter-node communication limits the maximum size of the
     * Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching
     * its desired size. The default value is false.
     *
     * @param enableInterNodeCommunication the enableInterNodeCommunication value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
        this.enableInterNodeCommunication = enableInterNodeCommunication;
        return this;
    }

    /**
     * Get the networkConfiguration property: The network configuration for a Pool.
     *
     * @return the networkConfiguration value.
     */
    public NetworkConfiguration getNetworkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Set the networkConfiguration property: The network configuration for a Pool.
     *
     * @param networkConfiguration the networkConfiguration value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }

    /**
     * Get the startTask property: Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of
     * recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node
     * disappeared due to host failure. Retries due to recovery operations are independent of and are not counted
     * against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation
     * may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted
     * and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to
     * use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not
     * rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch
     * services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
     *
     * @return the startTask value.
     */
    public StartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of
     * recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node
     * disappeared due to host failure. Retries due to recovery operations are independent of and are not counted
     * against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation
     * may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted
     * and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to
     * use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not
     * rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch
     * services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
     *
     * @param startTask the startTask value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setStartTask(StartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the certificateReferences property: For Windows Nodes, the Batch service installs the Certificates to the
     * specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory
     * inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task
     * to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in
     * the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     *
     * @return the certificateReferences value.
     */
    public List<CertificateReference> getCertificateReferences() {
        return this.certificateReferences;
    }

    /**
     * Set the certificateReferences property: For Windows Nodes, the Batch service installs the Certificates to the
     * specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory
     * inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task
     * to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in
     * the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     *
     * @param certificateReferences the certificateReferences value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setCertificateReferences(List<CertificateReference> certificateReferences) {
        this.certificateReferences = certificateReferences;
        return this;
    }

    /**
     * Get the applicationPackageReferences property: When creating a pool, the package's application ID must be fully
     * qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
     * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are
     * already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given
     * Pool.
     *
     * @return the applicationPackageReferences value.
     */
    public List<ApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Set the applicationPackageReferences property: When creating a pool, the package's application ID must be fully
     * qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
     * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are
     * already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given
     * Pool.
     *
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setApplicationPackageReferences(
            List<ApplicationPackageReference> applicationPackageReferences) {
        this.applicationPackageReferences = applicationPackageReferences;
        return this;
    }

    /**
     * Get the applicationLicenses property: The list of application licenses must be a subset of available Batch
     * service application licenses. If a license is requested which is not supported, Pool creation will fail. The
     * permitted licenses available on the Pool are 'maya', 'vray', '3dsmax', 'arnold'. An additional charge applies for
     * each application license added to the Pool.
     *
     * @return the applicationLicenses value.
     */
    public List<String> getApplicationLicenses() {
        return this.applicationLicenses;
    }

    /**
     * Set the applicationLicenses property: The list of application licenses must be a subset of available Batch
     * service application licenses. If a license is requested which is not supported, Pool creation will fail. The
     * permitted licenses available on the Pool are 'maya', 'vray', '3dsmax', 'arnold'. An additional charge applies for
     * each application license added to the Pool.
     *
     * @param applicationLicenses the applicationLicenses value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setApplicationLicenses(List<String> applicationLicenses) {
        this.applicationLicenses = applicationLicenses;
        return this;
    }

    /**
     * Get the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool.
     *
     * @return the userAccounts value.
     */
    public List<UserAccount> getUserAccounts() {
        return this.userAccounts;
    }

    /**
     * Set the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool.
     *
     * @param userAccounts the userAccounts value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setUserAccounts(List<UserAccount> userAccounts) {
        this.userAccounts = userAccounts;
        return this;
    }

    /**
     * Get the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @return the metadata value.
     */
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @param metadata the metadata value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the mountConfiguration property: This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
     *
     * @return the mountConfiguration value.
     */
    public List<MountConfiguration> getMountConfiguration() {
        return this.mountConfiguration;
    }

    /**
     * Set the mountConfiguration property: This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
     *
     * @param mountConfiguration the mountConfiguration value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setMountConfiguration(List<MountConfiguration> mountConfiguration) {
        this.mountConfiguration = mountConfiguration;
        return this;
    }

    /**
     * Get the targetNodeCommunicationMode property: If omitted, the default value is Default.
     *
     * @return the targetNodeCommunicationMode value.
     */
    public NodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: If omitted, the default value is Default.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the PoolSpecification object itself.
     */
    public PoolSpecification setTargetNodeCommunicationMode(NodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }
}
