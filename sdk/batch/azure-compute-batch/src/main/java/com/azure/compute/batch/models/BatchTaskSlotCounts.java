// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TaskSlot counts for a Job.
 */
@Immutable
public final class BatchTaskSlotCounts implements JsonSerializable<BatchTaskSlotCounts> {

    /*
     * The number of TaskSlots for active Tasks.
     */
    @Generated
    private final int active;

    /*
     * The number of TaskSlots for running Tasks.
     */
    @Generated
    private final int running;

    /*
     * The number of TaskSlots for completed Tasks.
     */
    @Generated
    private final int completed;

    /*
     * The number of TaskSlots for succeeded Tasks.
     */
    @Generated
    private final int succeeded;

    /*
     * The number of TaskSlots for failed Tasks.
     */
    @Generated
    private final int failed;

    /**
     * Creates an instance of BatchTaskSlotCounts class.
     *
     * @param active the active value to set.
     * @param running the running value to set.
     * @param completed the completed value to set.
     * @param succeeded the succeeded value to set.
     * @param failed the failed value to set.
     */
    @Generated
    private BatchTaskSlotCounts(int active, int running, int completed, int succeeded, int failed) {
        this.active = active;
        this.running = running;
        this.completed = completed;
        this.succeeded = succeeded;
        this.failed = failed;
    }

    /**
     * Get the active property: The number of TaskSlots for active Tasks.
     *
     * @return the active value.
     */
    @Generated
    public int getActive() {
        return this.active;
    }

    /**
     * Get the running property: The number of TaskSlots for running Tasks.
     *
     * @return the running value.
     */
    @Generated
    public int getRunning() {
        return this.running;
    }

    /**
     * Get the completed property: The number of TaskSlots for completed Tasks.
     *
     * @return the completed value.
     */
    @Generated
    public int getCompleted() {
        return this.completed;
    }

    /**
     * Get the succeeded property: The number of TaskSlots for succeeded Tasks.
     *
     * @return the succeeded value.
     */
    @Generated
    public int getSucceeded() {
        return this.succeeded;
    }

    /**
     * Get the failed property: The number of TaskSlots for failed Tasks.
     *
     * @return the failed value.
     */
    @Generated
    public int getFailed() {
        return this.failed;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("active", this.active);
        jsonWriter.writeIntField("running", this.running);
        jsonWriter.writeIntField("completed", this.completed);
        jsonWriter.writeIntField("succeeded", this.succeeded);
        jsonWriter.writeIntField("failed", this.failed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchTaskSlotCounts from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchTaskSlotCounts if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchTaskSlotCounts.
     */
    @Generated
    public static BatchTaskSlotCounts fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int active = 0;
            int running = 0;
            int completed = 0;
            int succeeded = 0;
            int failed = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("active".equals(fieldName)) {
                    active = reader.getInt();
                } else if ("running".equals(fieldName)) {
                    running = reader.getInt();
                } else if ("completed".equals(fieldName)) {
                    completed = reader.getInt();
                } else if ("succeeded".equals(fieldName)) {
                    succeeded = reader.getInt();
                } else if ("failed".equals(fieldName)) {
                    failed = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new BatchTaskSlotCounts(active, running, completed, succeeded, failed);
        });
    }
}
