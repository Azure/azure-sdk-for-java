// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The configuration for virtual machine extensions. */
@Fluent
public final class VMExtension {
    /*
     * The name of the virtual machine extension.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The name of the extension handler publisher.
     */
    @JsonProperty(value = "publisher", required = true)
    private String publisher;

    /*
     * The type of the extension.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * The version of script handler.
     */
    @JsonProperty(value = "typeHandlerVersion")
    private String typeHandlerVersion;

    /*
     * Indicates whether the extension should use a newer minor version if one is
     * available at deployment time. Once deployed, however, the extension will not
     * upgrade minor versions unless redeployed, even with this property set to true.
     */
    @JsonProperty(value = "autoUpgradeMinorVersion")
    private Boolean autoUpgradeMinorVersion;

    /*
     * JSON formatted public settings for the extension.
     */
    @JsonProperty(value = "settings")
    private Object settings;

    /*
     * The extension can contain either protectedSettings or
     * protectedSettingsFromKeyVault or no protected settings at all.
     */
    @JsonProperty(value = "protectedSettings")
    private Object protectedSettings;

    /*
     * Collection of extension names after which this extension needs to be
     * provisioned.
     */
    @JsonProperty(value = "provisionAfterExtensions")
    private List<String> provisionAfterExtensions;

    /**
     * Creates an instance of VMExtension class.
     *
     * @param name the name value to set.
     * @param publisher the publisher value to set.
     * @param type the type value to set.
     */
    @JsonCreator
    public VMExtension(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "publisher", required = true) String publisher,
            @JsonProperty(value = "type", required = true) String type) {
        this.name = name;
        this.publisher = publisher;
        this.type = type;
    }

    /**
     * Get the name property: The name of the virtual machine extension.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the publisher property: The name of the extension handler publisher.
     *
     * @return the publisher value.
     */
    public String getPublisher() {
        return this.publisher;
    }

    /**
     * Get the type property: The type of the extension.
     *
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Get the typeHandlerVersion property: The version of script handler.
     *
     * @return the typeHandlerVersion value.
     */
    public String getTypeHandlerVersion() {
        return this.typeHandlerVersion;
    }

    /**
     * Set the typeHandlerVersion property: The version of script handler.
     *
     * @param typeHandlerVersion the typeHandlerVersion value to set.
     * @return the VMExtension object itself.
     */
    public VMExtension setTypeHandlerVersion(String typeHandlerVersion) {
        this.typeHandlerVersion = typeHandlerVersion;
        return this;
    }

    /**
     * Get the autoUpgradeMinorVersion property: Indicates whether the extension should use a newer minor version if one
     * is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless
     * redeployed, even with this property set to true.
     *
     * @return the autoUpgradeMinorVersion value.
     */
    public Boolean isAutoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion;
    }

    /**
     * Set the autoUpgradeMinorVersion property: Indicates whether the extension should use a newer minor version if one
     * is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless
     * redeployed, even with this property set to true.
     *
     * @param autoUpgradeMinorVersion the autoUpgradeMinorVersion value to set.
     * @return the VMExtension object itself.
     */
    public VMExtension setAutoUpgradeMinorVersion(Boolean autoUpgradeMinorVersion) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        return this;
    }

    /**
     * Get the settings property: JSON formatted public settings for the extension.
     *
     * @return the settings value.
     */
    public Object getSettings() {
        return this.settings;
    }

    /**
     * Set the settings property: JSON formatted public settings for the extension.
     *
     * @param settings the settings value to set.
     * @return the VMExtension object itself.
     */
    public VMExtension setSettings(Object settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the protectedSettings property: The extension can contain either protectedSettings or
     * protectedSettingsFromKeyVault or no protected settings at all.
     *
     * @return the protectedSettings value.
     */
    public Object getProtectedSettings() {
        return this.protectedSettings;
    }

    /**
     * Set the protectedSettings property: The extension can contain either protectedSettings or
     * protectedSettingsFromKeyVault or no protected settings at all.
     *
     * @param protectedSettings the protectedSettings value to set.
     * @return the VMExtension object itself.
     */
    public VMExtension setProtectedSettings(Object protectedSettings) {
        this.protectedSettings = protectedSettings;
        return this;
    }

    /**
     * Get the provisionAfterExtensions property: Collection of extension names after which this extension needs to be
     * provisioned.
     *
     * @return the provisionAfterExtensions value.
     */
    public List<String> getProvisionAfterExtensions() {
        return this.provisionAfterExtensions;
    }

    /**
     * Set the provisionAfterExtensions property: Collection of extension names after which this extension needs to be
     * provisioned.
     *
     * @param provisionAfterExtensions the provisionAfterExtensions value to set.
     * @return the VMExtension object itself.
     */
    public VMExtension setProvisionAfterExtensions(List<String> provisionAfterExtensions) {
        this.provisionAfterExtensions = provisionAfterExtensions;
        return this;
    }
}
