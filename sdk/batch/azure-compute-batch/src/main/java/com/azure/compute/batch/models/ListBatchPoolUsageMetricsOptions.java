// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import java.time.OffsetDateTime;

/**
 * Optional parameters for List Pool Usage Metrics operation.
 */
@Fluent
public final class ListBatchPoolUsageMetricsOptions {

    private OffsetDateTime endtime;

    private String filter;

    private OffsetDateTime starttime;

    /**
     * Creates an instance of {@link ListBatchPoolUsageMetricsOptions}.
     */
    public ListBatchPoolUsageMetricsOptions() {
    }

    /**
     * Gets the latest time from which to include metrics.
     *
     * <p>This property represents the end time for including metrics in an operation.
     * It must be at least two hours before the current time.
     * If not specified, it defaults to the end time of the last aggregation interval currently available.
     *
     * @return The latest time from which to include metrics.
     */
    public OffsetDateTime getEndTime() {
        return endtime;
    }

    /**
     * Sets the latest time from which to include metrics.
     *
     * <p>This property represents the end time for including metrics in an operation.
     * It must be at least two hours before the current time.
     * If not specified, it defaults to the end time of the last aggregation interval currently available.
     *
     * @param endtime The latest time from which to include metrics.
     * @return The {@link ListBatchPoolUsageMetricsOptions} object itself, allowing for method chaining.
     */
    public ListBatchPoolUsageMetricsOptions setEndTime(OffsetDateTime endtime) {
        this.endtime = endtime;
        return this;
    }

    /**
     * Gets the OData $filter clause used for filtering results.
     *
     * @return The OData $filter clause.
     */
    public String getFilter() {
        return filter;
    }

    /**
     * Sets the OData $filter clause used for filtering results.
     *
     * @param filter The OData $filter clause.
     * @return The {@link ListBatchPoolUsageMetricsOptions} object itself, allowing for method chaining.
     */
    public ListBatchPoolUsageMetricsOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Gets the earliest time from which to include metrics.
     *
     * This property represents the start time for including metrics in an operation.
     * It must be at least two and a half hours before the current time.
     * If not specified, it defaults to the start time of the last aggregation interval currently available.
     *
     * @return The earliest time from which to include metrics.
     */
    public OffsetDateTime getStartTime() {
        return starttime;
    }

    /**
     * Sets the earliest time from which to include metrics.
     *
     * This property represents the start time for including metrics in an operation.
     * It must be at least two and a half hours before the current time.
     * If not specified, it defaults to the start time of the last aggregation interval currently available.
     *
     * @param starttime The earliest time from which to include metrics.
     * @return The {@link ListBatchPoolUsageMetricsOptions} object itself, allowing for method chaining.
     */
    public ListBatchPoolUsageMetricsOptions setStartTime(OffsetDateTime starttime) {
        this.starttime = starttime;
        return this;
    }

    /*
     * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the
     * value is larger than 30, the default will be used instead.".
     */
    @Generated
    private Integer timeOutInSeconds;

    /*
     * The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     */
    @Generated
    private Integer maxPageSize;

    /*
     * The earliest time from which to include metrics. This must be at least two and
     * a half hours before the current time. If not specified this defaults to the
     * start time of the last aggregation interval currently available.
     */
    @Generated
    private OffsetDateTime startTime;

    /**
     * Get the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @return the timeOutInSeconds value.
     */
    @Generated
    public Integer getTimeOutInSeconds() {
        return this.timeOutInSeconds;
    }

    /**
     * Set the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @param timeOutInSeconds the timeOutInSeconds value to set.
     * @return the ListBatchPoolUsageMetricsOptions object itself.
     */
    @Generated
    public ListBatchPoolUsageMetricsOptions setTimeOutInSeconds(Integer timeOutInSeconds) {
        this.timeOutInSeconds = timeOutInSeconds;
        return this;
    }

    /**
     * Get the maxPageSize property: The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     *
     * @return the maxPageSize value.
     */
    @Generated
    public Integer getMaxPageSize() {
        return this.maxPageSize;
    }

    /**
     * Set the maxPageSize property: The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     *
     * @param maxPageSize the maxPageSize value to set.
     * @return the ListBatchPoolUsageMetricsOptions object itself.
     */
    @Generated
    public ListBatchPoolUsageMetricsOptions setMaxPageSize(Integer maxPageSize) {
        this.maxPageSize = maxPageSize;
        return this;
    }

    /**
     * Get the endtime property: The latest time from which to include metrics. This must be at least two hours
     * before the current time. If not specified this defaults to the end time of the
     * last aggregation interval currently available.
     *
     * @return the endtime value.
     */
    @Generated
    public OffsetDateTime getEndtime() {
        return this.endtime;
    }

    /**
     * Set the endtime property: The latest time from which to include metrics. This must be at least two hours
     * before the current time. If not specified this defaults to the end time of the
     * last aggregation interval currently available.
     *
     * @param endtime the endtime value to set.
     * @return the ListBatchPoolUsageMetricsOptions object itself.
     */
    @Generated
    public ListBatchPoolUsageMetricsOptions setEndtime(OffsetDateTime endtime) {
        this.endtime = endtime;
        return this;
    }
}
