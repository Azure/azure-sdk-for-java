// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Contains utilization and resource usage statistics for the lifetime of a Pool.
 */
@Immutable
public final class BatchPoolStatistics implements JsonSerializable<BatchPoolStatistics> {

    /*
     * The URL for the statistics.
     */
    @Generated
    private final String url;

    /*
     * The start time of the time range covered by the statistics.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and
     * lastUpdateTime.
     */
    @Generated
    private final OffsetDateTime lastUpdateTime;

    /*
     * Statistics related to Pool usage, such as the amount of core-time used.
     */
    @Generated
    private BatchPoolUsageStatistics usageStats;

    /*
     * Statistics related to resource consumption by Compute Nodes in the Pool.
     */
    @Generated
    private BatchPoolResourceStatistics resourceStats;

    /**
     * Creates an instance of BatchPoolStatistics class.
     *
     * @param url the url value to set.
     * @param startTime the startTime value to set.
     * @param lastUpdateTime the lastUpdateTime value to set.
     */
    @Generated
    private BatchPoolStatistics(String url, OffsetDateTime startTime, OffsetDateTime lastUpdateTime) {
        this.url = url;
        this.startTime = startTime;
        this.lastUpdateTime = lastUpdateTime;
    }

    /**
     * Get the url property: The URL for the statistics.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the startTime property: The start time of the time range covered by the statistics.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the lastUpdateTime property: The time at which the statistics were last updated. All statistics are limited
     * to the range between startTime and lastUpdateTime.
     *
     * @return the lastUpdateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Get the usageStats property: Statistics related to Pool usage, such as the amount of core-time used.
     *
     * @return the usageStats value.
     */
    @Generated
    public BatchPoolUsageStatistics getUsageStats() {
        return this.usageStats;
    }

    /**
     * Get the resourceStats property: Statistics related to resource consumption by Compute Nodes in the Pool.
     *
     * @return the resourceStats value.
     */
    @Generated
    public BatchPoolResourceStatistics getResourceStats() {
        return this.resourceStats;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("lastUpdateTime",
            this.lastUpdateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdateTime));
        jsonWriter.writeJsonField("usageStats", this.usageStats);
        jsonWriter.writeJsonField("resourceStats", this.resourceStats);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolStatistics from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchPoolStatistics.
     */
    @Generated
    public static BatchPoolStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String url = null;
            OffsetDateTime startTime = null;
            OffsetDateTime lastUpdateTime = null;
            BatchPoolUsageStatistics usageStats = null;
            BatchPoolResourceStatistics resourceStats = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdateTime".equals(fieldName)) {
                    lastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("usageStats".equals(fieldName)) {
                    usageStats = BatchPoolUsageStatistics.fromJson(reader);
                } else if ("resourceStats".equals(fieldName)) {
                    resourceStats = BatchPoolResourceStatistics.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            BatchPoolStatistics deserializedBatchPoolStatistics
                = new BatchPoolStatistics(url, startTime, lastUpdateTime);
            deserializedBatchPoolStatistics.usageStats = usageStats;
            deserializedBatchPoolStatistics.resourceStats = resourceStats;
            return deserializedBatchPoolStatistics;
        });
    }
}
