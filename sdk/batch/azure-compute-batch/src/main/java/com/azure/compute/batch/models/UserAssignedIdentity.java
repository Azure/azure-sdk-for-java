// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The user assigned Identity.
 */
@Immutable
public final class UserAssignedIdentity implements JsonSerializable<UserAssignedIdentity> {

    /*
     * The ARM resource id of the user assigned identity.
     */
    @Generated
    private final String resourceId;

    /*
     * The client id of the user assigned identity.
     */
    @Generated
    private String clientId;

    /*
     * The principal id of the user assigned identity.
     */
    @Generated
    private String principalId;

    /**
     * Creates an instance of UserAssignedIdentity class.
     *
     * @param resourceId the resourceId value to set.
     */
    @Generated
    private UserAssignedIdentity(String resourceId) {
        this.resourceId = resourceId;
    }

    /**
     * Get the resourceId property: The ARM resource id of the user assigned identity.
     *
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the clientId property: The client id of the user assigned identity.
     *
     * @return the clientId value.
     */
    @Generated
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Get the principalId property: The principal id of the user assigned identity.
     *
     * @return the principalId value.
     */
    @Generated
    public String getPrincipalId() {
        return this.principalId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserAssignedIdentity from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserAssignedIdentity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserAssignedIdentity.
     */
    @Generated
    public static UserAssignedIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String resourceId = null;
            String clientId = null;
            String principalId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("resourceId".equals(fieldName)) {
                    resourceId = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    clientId = reader.getString();
                } else if ("principalId".equals(fieldName)) {
                    principalId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            UserAssignedIdentity deserializedUserAssignedIdentity = new UserAssignedIdentity(resourceId);
            deserializedUserAssignedIdentity.clientId = clientId;
            deserializedUserAssignedIdentity.principalId = principalId;
            return deserializedUserAssignedIdentity;
        });
    }
}
