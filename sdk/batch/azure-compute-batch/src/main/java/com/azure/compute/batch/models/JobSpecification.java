// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies details of the Jobs to be created on a schedule. */
@Fluent
public final class JobSpecification {

    /*
     * Priority values can range from -1000 to 1000, with -1000 being the lowest
     * priority and 1000 being the highest priority. The default value is 0. This
     * priority is used as the default for all Jobs under the Job Schedule. You can
     * update a Job's priority after it has been created using by using the update Job
     * API.
     */
    @Generated
    @JsonProperty(value = "priority")
    private Integer priority;

    /*
     * If the value is set to True, other high priority jobs submitted to the system
     * will take precedence and will be able requeue tasks from this job. You can
     * update a job's allowTaskPreemption after it has been created using the update
     * job API.
     */
    @Generated
    @JsonProperty(value = "allowTaskPreemption")
    private Boolean allowTaskPreemption;

    /*
     * The value of maxParallelTasks must be -1 or greater than 0 if specified. If not
     * specified, the default value is -1, which means there's no limit to the number
     * of tasks that can be run at once. You can update a job's maxParallelTasks after
     * it has been created using the update job API.
     */
    @Generated
    @JsonProperty(value = "maxParallelTasks")
    private Integer maxParallelTasks;

    /*
     * The name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     */
    @Generated
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Whether Tasks in the Job can define dependencies on each other. The default is
     * false.
     */
    @Generated
    @JsonProperty(value = "usesTaskDependencies")
    private Boolean usesTaskDependencies;

    /*
     * Note that if a Job contains no Tasks, then all Tasks are considered complete.
     * This option is therefore most commonly used with a Job Manager task; if you
     * want to use automatic Job termination without a Job Manager, you should
     * initially set onAllTasksComplete to noaction and update the Job properties to
     * set onAllTasksComplete to terminatejob once you have finished adding Tasks. The
     * default is noaction.
     */
    @Generated
    @JsonProperty(value = "onAllTasksComplete")
    private OnAllTasksComplete onAllTasksComplete;

    /*
     * The default is noaction.
     */
    @Generated
    @JsonProperty(value = "onTaskFailure")
    private OnTaskFailure onTaskFailure;

    /*
     * The network configuration for the Job.
     */
    @Generated
    @JsonProperty(value = "networkConfiguration")
    private JobNetworkConfiguration networkConfiguration;

    /*
     * The execution constraints for a Job.
     */
    @Generated
    @JsonProperty(value = "constraints")
    private JobConstraints constraints;

    /*
     * If the Job does not specify a Job Manager Task, the user must explicitly add
     * Tasks to the Job using the Task API. If the Job does specify a Job Manager
     * Task, the Batch service creates the Job Manager Task when the Job is created,
     * and will try to schedule the Job Manager Task before scheduling other Tasks in
     * the Job.
     */
    @Generated
    @JsonProperty(value = "jobManagerTask")
    private JobManagerTask jobManagerTask;

    /*
     * If a Job has a Job Preparation Task, the Batch service will run the Job
     * Preparation Task on a Node before starting any Tasks of that Job on that
     * Compute Node.
     */
    @Generated
    @JsonProperty(value = "jobPreparationTask")
    private JobPreparationTask jobPreparationTask;

    /*
     * The primary purpose of the Job Release Task is to undo changes to Nodes made by
     * the Job Preparation Task. Example activities include deleting local files, or
     * shutting down services that were started as part of Job preparation. A Job
     * Release Task cannot be specified without also specifying a Job Preparation Task
     * for the Job. The Batch service runs the Job Release Task on the Compute Nodes
     * that have run the Job Preparation Task.
     */
    @Generated
    @JsonProperty(value = "jobReleaseTask")
    private JobReleaseTask jobReleaseTask;

    /*
     * Individual Tasks can override an environment setting specified here by
     * specifying the same setting name with a different value.
     */
    @Generated
    @JsonProperty(value = "commonEnvironmentSettings")
    private List<EnvironmentSetting> commonEnvironmentSettings;

    /*
     * Specifies how a Job should be assigned to a Pool.
     */
    @Generated
    @JsonProperty(value = "poolInfo")
    private PoolInformation poolInfo;

    /*
     * The Batch service does not assign any meaning to metadata; it is solely for the
     * use of user code.
     */
    @Generated
    @JsonProperty(value = "metadata")
    private List<MetadataItem> metadata;

    /**
     * Creates an instance of JobSpecification class.
     *
     * @param poolInfo the poolInfo value to set.
     */
    @Generated
    @JsonCreator
    public JobSpecification(@JsonProperty(value = "poolInfo") PoolInformation poolInfo) {
        this.poolInfo = poolInfo;
    }

    /**
     * Get the priority property: Priority values can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under
     * the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
     *
     * @return the priority value.
     */
    @Generated
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Set the priority property: Priority values can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0. This priority is used as the default for all Jobs under
     * the Job Schedule. You can update a Job's priority after it has been created using by using the update Job API.
     *
     * @param priority the priority value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the allowTaskPreemption property: If the value is set to True, other high priority jobs submitted to the
     * system will take precedence and will be able requeue tasks from this job. You can update a job's
     * allowTaskPreemption after it has been created using the update job API.
     *
     * @return the allowTaskPreemption value.
     */
    @Generated
    public Boolean isAllowTaskPreemption() {
        return this.allowTaskPreemption;
    }

    /**
     * Set the allowTaskPreemption property: If the value is set to True, other high priority jobs submitted to the
     * system will take precedence and will be able requeue tasks from this job. You can update a job's
     * allowTaskPreemption after it has been created using the update job API.
     *
     * @param allowTaskPreemption the allowTaskPreemption value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setAllowTaskPreemption(Boolean allowTaskPreemption) {
        this.allowTaskPreemption = allowTaskPreemption;
        return this;
    }

    /**
     * Get the maxParallelTasks property: The value of maxParallelTasks must be -1 or greater than 0 if specified. If
     * not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at
     * once. You can update a job's maxParallelTasks after it has been created using the update job API.
     *
     * @return the maxParallelTasks value.
     */
    @Generated
    public Integer getMaxParallelTasks() {
        return this.maxParallelTasks;
    }

    /**
     * Set the maxParallelTasks property: The value of maxParallelTasks must be -1 or greater than 0 if specified. If
     * not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at
     * once. You can update a job's maxParallelTasks after it has been created using the update job API.
     *
     * @param maxParallelTasks the maxParallelTasks value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setMaxParallelTasks(Integer maxParallelTasks) {
        this.maxParallelTasks = maxParallelTasks;
        return this;
    }

    /**
     * Get the displayName property: The name need not be unique and can contain any Unicode characters up to a maximum
     * length of 1024.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The name need not be unique and can contain any Unicode characters up to a maximum
     * length of 1024.
     *
     * @param displayName the displayName value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the usesTaskDependencies property: Whether Tasks in the Job can define dependencies on each other. The
     * default is false.
     *
     * @return the usesTaskDependencies value.
     */
    @Generated
    public Boolean isUsesTaskDependencies() {
        return this.usesTaskDependencies;
    }

    /**
     * Set the usesTaskDependencies property: Whether Tasks in the Job can define dependencies on each other. The
     * default is false.
     *
     * @param usesTaskDependencies the usesTaskDependencies value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setUsesTaskDependencies(Boolean usesTaskDependencies) {
        this.usesTaskDependencies = usesTaskDependencies;
        return this;
    }

    /**
     * Get the onAllTasksComplete property: Note that if a Job contains no Tasks, then all Tasks are considered
     * complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job
     * termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job
     * properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is
     * noaction.
     *
     * @return the onAllTasksComplete value.
     */
    @Generated
    public OnAllTasksComplete getOnAllTasksComplete() {
        return this.onAllTasksComplete;
    }

    /**
     * Set the onAllTasksComplete property: Note that if a Job contains no Tasks, then all Tasks are considered
     * complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job
     * termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job
     * properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is
     * noaction.
     *
     * @param onAllTasksComplete the onAllTasksComplete value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
        this.onAllTasksComplete = onAllTasksComplete;
        return this;
    }

    /**
     * Get the onTaskFailure property: The default is noaction.
     *
     * @return the onTaskFailure value.
     */
    @Generated
    public OnTaskFailure getOnTaskFailure() {
        return this.onTaskFailure;
    }

    /**
     * Set the onTaskFailure property: The default is noaction.
     *
     * @param onTaskFailure the onTaskFailure value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setOnTaskFailure(OnTaskFailure onTaskFailure) {
        this.onTaskFailure = onTaskFailure;
        return this;
    }

    /**
     * Get the networkConfiguration property: The network configuration for the Job.
     *
     * @return the networkConfiguration value.
     */
    @Generated
    public JobNetworkConfiguration getNetworkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Set the networkConfiguration property: The network configuration for the Job.
     *
     * @param networkConfiguration the networkConfiguration value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setNetworkConfiguration(JobNetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }

    /**
     * Get the constraints property: The execution constraints for a Job.
     *
     * @return the constraints value.
     */
    @Generated
    public JobConstraints getConstraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: The execution constraints for a Job.
     *
     * @param constraints the constraints value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setConstraints(JobConstraints constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the jobManagerTask property: If the Job does not specify a Job Manager Task, the user must explicitly add
     * Tasks to the Job using the Task API. If the Job does specify a Job Manager Task, the Batch service creates the
     * Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other
     * Tasks in the Job.
     *
     * @return the jobManagerTask value.
     */
    @Generated
    public JobManagerTask getJobManagerTask() {
        return this.jobManagerTask;
    }

    /**
     * Set the jobManagerTask property: If the Job does not specify a Job Manager Task, the user must explicitly add
     * Tasks to the Job using the Task API. If the Job does specify a Job Manager Task, the Batch service creates the
     * Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other
     * Tasks in the Job.
     *
     * @param jobManagerTask the jobManagerTask value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setJobManagerTask(JobManagerTask jobManagerTask) {
        this.jobManagerTask = jobManagerTask;
        return this;
    }

    /**
     * Get the jobPreparationTask property: If a Job has a Job Preparation Task, the Batch service will run the Job
     * Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
     *
     * @return the jobPreparationTask value.
     */
    @Generated
    public JobPreparationTask getJobPreparationTask() {
        return this.jobPreparationTask;
    }

    /**
     * Set the jobPreparationTask property: If a Job has a Job Preparation Task, the Batch service will run the Job
     * Preparation Task on a Node before starting any Tasks of that Job on that Compute Node.
     *
     * @param jobPreparationTask the jobPreparationTask value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setJobPreparationTask(JobPreparationTask jobPreparationTask) {
        this.jobPreparationTask = jobPreparationTask;
        return this;
    }

    /**
     * Get the jobReleaseTask property: The primary purpose of the Job Release Task is to undo changes to Nodes made by
     * the Job Preparation Task. Example activities include deleting local files, or shutting down services that were
     * started as part of Job preparation. A Job Release Task cannot be specified without also specifying a Job
     * Preparation Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes that have run the
     * Job Preparation Task.
     *
     * @return the jobReleaseTask value.
     */
    @Generated
    public JobReleaseTask getJobReleaseTask() {
        return this.jobReleaseTask;
    }

    /**
     * Set the jobReleaseTask property: The primary purpose of the Job Release Task is to undo changes to Nodes made by
     * the Job Preparation Task. Example activities include deleting local files, or shutting down services that were
     * started as part of Job preparation. A Job Release Task cannot be specified without also specifying a Job
     * Preparation Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes that have run the
     * Job Preparation Task.
     *
     * @param jobReleaseTask the jobReleaseTask value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setJobReleaseTask(JobReleaseTask jobReleaseTask) {
        this.jobReleaseTask = jobReleaseTask;
        return this;
    }

    /**
     * Get the commonEnvironmentSettings property: Individual Tasks can override an environment setting specified here
     * by specifying the same setting name with a different value.
     *
     * @return the commonEnvironmentSettings value.
     */
    @Generated
    public List<EnvironmentSetting> getCommonEnvironmentSettings() {
        return this.commonEnvironmentSettings;
    }

    /**
     * Set the commonEnvironmentSettings property: Individual Tasks can override an environment setting specified here
     * by specifying the same setting name with a different value.
     *
     * @param commonEnvironmentSettings the commonEnvironmentSettings value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
        this.commonEnvironmentSettings = commonEnvironmentSettings;
        return this;
    }

    /**
     * Get the poolInfo property: Specifies how a Job should be assigned to a Pool.
     *
     * @return the poolInfo value.
     */
    @Generated
    public PoolInformation getPoolInfo() {
        return this.poolInfo;
    }

    /**
     * Get the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @param metadata the metadata value to set.
     * @return the JobSpecification object itself.
     */
    @Generated
    public JobSpecification setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }
}
