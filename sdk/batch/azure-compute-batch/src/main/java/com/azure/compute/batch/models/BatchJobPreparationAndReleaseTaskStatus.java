// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status of the Job Preparation and Job Release Tasks on a Compute Node.
 */
@Immutable
public final class BatchJobPreparationAndReleaseTaskStatus
    implements JsonSerializable<BatchJobPreparationAndReleaseTaskStatus> {

    /*
     * The ID of the Pool containing the Compute Node to which this entry refers.
     */
    @Generated
    private String poolId;

    /*
     * The ID of the Compute Node to which this entry refers.
     */
    @Generated
    private String nodeId;

    /*
     * The URL of the Compute Node to which this entry refers.
     */
    @Generated
    private String nodeUrl;

    /*
     * Information about the execution status of the Job Preparation Task on this Compute Node.
     */
    @Generated
    private BatchJobPreparationTaskExecutionInfo jobPreparationTaskExecutionInfo;

    /*
     * Information about the execution status of the Job Release Task on this Compute Node. This property is set only if
     * the Job Release Task has run on the Compute Node.
     */
    @Generated
    private BatchJobReleaseTaskExecutionInfo jobReleaseTaskExecutionInfo;

    /**
     * Creates an instance of BatchJobPreparationAndReleaseTaskStatus class.
     */
    @Generated
    private BatchJobPreparationAndReleaseTaskStatus() {
    }

    /**
     * Get the poolId property: The ID of the Pool containing the Compute Node to which this entry refers.
     *
     * @return the poolId value.
     */
    @Generated
    public String getPoolId() {
        return this.poolId;
    }

    /**
     * Get the nodeId property: The ID of the Compute Node to which this entry refers.
     *
     * @return the nodeId value.
     */
    @Generated
    public String getNodeId() {
        return this.nodeId;
    }

    /**
     * Get the nodeUrl property: The URL of the Compute Node to which this entry refers.
     *
     * @return the nodeUrl value.
     */
    @Generated
    public String getNodeUrl() {
        return this.nodeUrl;
    }

    /**
     * Get the jobPreparationTaskExecutionInfo property: Information about the execution status of the Job Preparation
     * Task on this Compute Node.
     *
     * @return the jobPreparationTaskExecutionInfo value.
     */
    @Generated
    public BatchJobPreparationTaskExecutionInfo getJobPreparationTaskExecutionInfo() {
        return this.jobPreparationTaskExecutionInfo;
    }

    /**
     * Get the jobReleaseTaskExecutionInfo property: Information about the execution status of the Job Release Task on
     * this Compute Node. This property is set only if the Job Release Task has run on the Compute Node.
     *
     * @return the jobReleaseTaskExecutionInfo value.
     */
    @Generated
    public BatchJobReleaseTaskExecutionInfo getJobReleaseTaskExecutionInfo() {
        return this.jobReleaseTaskExecutionInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("poolId", this.poolId);
        jsonWriter.writeStringField("nodeId", this.nodeId);
        jsonWriter.writeStringField("nodeUrl", this.nodeUrl);
        jsonWriter.writeJsonField("jobPreparationTaskExecutionInfo", this.jobPreparationTaskExecutionInfo);
        jsonWriter.writeJsonField("jobReleaseTaskExecutionInfo", this.jobReleaseTaskExecutionInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchJobPreparationAndReleaseTaskStatus from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchJobPreparationAndReleaseTaskStatus if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchJobPreparationAndReleaseTaskStatus.
     */
    @Generated
    public static BatchJobPreparationAndReleaseTaskStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchJobPreparationAndReleaseTaskStatus deserializedBatchJobPreparationAndReleaseTaskStatus
                = new BatchJobPreparationAndReleaseTaskStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("poolId".equals(fieldName)) {
                    deserializedBatchJobPreparationAndReleaseTaskStatus.poolId = reader.getString();
                } else if ("nodeId".equals(fieldName)) {
                    deserializedBatchJobPreparationAndReleaseTaskStatus.nodeId = reader.getString();
                } else if ("nodeUrl".equals(fieldName)) {
                    deserializedBatchJobPreparationAndReleaseTaskStatus.nodeUrl = reader.getString();
                } else if ("jobPreparationTaskExecutionInfo".equals(fieldName)) {
                    deserializedBatchJobPreparationAndReleaseTaskStatus.jobPreparationTaskExecutionInfo
                        = BatchJobPreparationTaskExecutionInfo.fromJson(reader);
                } else if ("jobReleaseTaskExecutionInfo".equals(fieldName)) {
                    deserializedBatchJobPreparationAndReleaseTaskStatus.jobReleaseTaskExecutionInfo
                        = BatchJobReleaseTaskExecutionInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchJobPreparationAndReleaseTaskStatus;
        });
    }
}
