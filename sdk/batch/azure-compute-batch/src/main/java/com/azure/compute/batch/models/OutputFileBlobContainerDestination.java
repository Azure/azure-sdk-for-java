// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies a file upload destination within an Azure blob storage container.
 */
@Fluent
public final class OutputFileBlobContainerDestination implements JsonSerializable<OutputFileBlobContainerDestination> {

    /*
     * The destination blob or virtual directory within the Azure Storage container. If filePattern refers to a specific
     * file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern
     * contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob
     * virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are
     * uploaded to the root of the container with a blob name matching their file name.
     */
    @Generated
    private String path;

    /*
     * The URL of the container within Azure Blob Storage to which to upload the file(s). If not using a managed
     * identity, the URL must include a Shared Access Signature (SAS) granting write permissions to the container.
     */
    @Generated
    private final String containerUrl;

    /*
     * The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl. The
     * identity must have write access to the Azure Blob Storage container.
     */
    @Generated
    private BatchNodeIdentityReference identityReference;

    /*
     * A list of name-value pairs for headers to be used in uploading output files. These headers will be specified when
     * uploading files to Azure Storage. Official document on allowed headers when uploading blobs:
     * https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob#request-headers-all-blob-types.
     */
    @Generated
    private List<HttpHeader> uploadHeaders;

    /**
     * Creates an instance of OutputFileBlobContainerDestination class.
     *
     * @param containerUrl the containerUrl value to set.
     */
    @Generated
    public OutputFileBlobContainerDestination(String containerUrl) {
        this.containerUrl = containerUrl;
    }

    /**
     * Get the path property: The destination blob or virtual directory within the Azure Storage container. If
     * filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to
     * upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then
     * path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the
     * file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
     *
     * @return the path value.
     */
    @Generated
    public String getPath() {
        return this.path;
    }

    /**
     * Set the path property: The destination blob or virtual directory within the Azure Storage container. If
     * filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to
     * upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then
     * path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the
     * file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name.
     *
     * @param path the path value to set.
     * @return the OutputFileBlobContainerDestination object itself.
     */
    @Generated
    public OutputFileBlobContainerDestination setPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the containerUrl property: The URL of the container within Azure Blob Storage to which to upload the file(s).
     * If not using a managed identity, the URL must include a Shared Access Signature (SAS) granting write permissions
     * to the container.
     *
     * @return the containerUrl value.
     */
    @Generated
    public String getContainerUrl() {
        return this.containerUrl;
    }

    /**
     * Get the identityReference property: The reference to the user assigned identity to use to access Azure Blob
     * Storage specified by containerUrl. The identity must have write access to the Azure Blob Storage container.
     *
     * @return the identityReference value.
     */
    @Generated
    public BatchNodeIdentityReference getIdentityReference() {
        return this.identityReference;
    }

    /**
     * Set the identityReference property: The reference to the user assigned identity to use to access Azure Blob
     * Storage specified by containerUrl. The identity must have write access to the Azure Blob Storage container.
     *
     * @param identityReference the identityReference value to set.
     * @return the OutputFileBlobContainerDestination object itself.
     */
    @Generated
    public OutputFileBlobContainerDestination setIdentityReference(BatchNodeIdentityReference identityReference) {
        this.identityReference = identityReference;
        return this;
    }

    /**
     * Get the uploadHeaders property: A list of name-value pairs for headers to be used in uploading output files.
     * These headers will be specified when uploading files to Azure Storage. Official document on allowed headers when
     * uploading blobs:
     * https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob#request-headers-all-blob-types.
     *
     * @return the uploadHeaders value.
     */
    @Generated
    public List<HttpHeader> getUploadHeaders() {
        return this.uploadHeaders;
    }

    /**
     * Set the uploadHeaders property: A list of name-value pairs for headers to be used in uploading output files.
     * These headers will be specified when uploading files to Azure Storage. Official document on allowed headers when
     * uploading blobs:
     * https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob#request-headers-all-blob-types.
     *
     * @param uploadHeaders the uploadHeaders value to set.
     * @return the OutputFileBlobContainerDestination object itself.
     */
    @Generated
    public OutputFileBlobContainerDestination setUploadHeaders(List<HttpHeader> uploadHeaders) {
        this.uploadHeaders = uploadHeaders;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerUrl", this.containerUrl);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeJsonField("identityReference", this.identityReference);
        jsonWriter.writeArrayField("uploadHeaders", this.uploadHeaders, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutputFileBlobContainerDestination from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutputFileBlobContainerDestination if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OutputFileBlobContainerDestination.
     */
    @Generated
    public static OutputFileBlobContainerDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String containerUrl = null;
            String path = null;
            BatchNodeIdentityReference identityReference = null;
            List<HttpHeader> uploadHeaders = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("containerUrl".equals(fieldName)) {
                    containerUrl = reader.getString();
                } else if ("path".equals(fieldName)) {
                    path = reader.getString();
                } else if ("identityReference".equals(fieldName)) {
                    identityReference = BatchNodeIdentityReference.fromJson(reader);
                } else if ("uploadHeaders".equals(fieldName)) {
                    uploadHeaders = reader.readArray(reader1 -> HttpHeader.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            OutputFileBlobContainerDestination deserializedOutputFileBlobContainerDestination
                = new OutputFileBlobContainerDestination(containerUrl);
            deserializedOutputFileBlobContainerDestination.path = path;
            deserializedOutputFileBlobContainerDestination.identityReference = identityReference;
            deserializedOutputFileBlobContainerDestination.uploadHeaders = uploadHeaders;
            return deserializedOutputFileBlobContainerDestination;
        });
    }
}
