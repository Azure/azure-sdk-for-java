// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for virtual machine extension instance view.
 */
@Immutable
public final class BatchNodeVMExtension implements JsonSerializable<BatchNodeVMExtension> {

    /*
     * The provisioning state of the virtual machine extension.
     */
    @Generated
    private String provisioningState;

    /*
     * The virtual machine extension.
     */
    @Generated
    private VMExtension vmExtension;

    /*
     * The vm extension instance view.
     */
    @Generated
    private VMExtensionInstanceView instanceView;

    /**
     * Creates an instance of BatchNodeVMExtension class.
     */
    @Generated
    private BatchNodeVMExtension() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the virtual machine extension.
     *
     * @return the provisioningState value.
     */
    @Generated
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vmExtension property: The virtual machine extension.
     *
     * @return the vmExtension value.
     */
    @Generated
    public VMExtension getVmExtension() {
        return this.vmExtension;
    }

    /**
     * Get the instanceView property: The vm extension instance view.
     *
     * @return the instanceView value.
     */
    @Generated
    public VMExtensionInstanceView getInstanceView() {
        return this.instanceView;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState", this.provisioningState);
        jsonWriter.writeJsonField("vmExtension", this.vmExtension);
        jsonWriter.writeJsonField("instanceView", this.instanceView);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchNodeVMExtension from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchNodeVMExtension if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchNodeVMExtension.
     */
    @Generated
    public static BatchNodeVMExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchNodeVMExtension deserializedBatchNodeVMExtension = new BatchNodeVMExtension();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("provisioningState".equals(fieldName)) {
                    deserializedBatchNodeVMExtension.provisioningState = reader.getString();
                } else if ("vmExtension".equals(fieldName)) {
                    deserializedBatchNodeVMExtension.vmExtension = VMExtension.fromJson(reader);
                } else if ("instanceView".equals(fieldName)) {
                    deserializedBatchNodeVMExtension.instanceView = VMExtensionInstanceView.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchNodeVMExtension;
        });
    }
}
