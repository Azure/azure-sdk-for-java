// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** An Azure Batch Job Update Model. */
@Fluent
public final class BatchJobUpdateParameters {

    /*
     * Priority values can range from -1000 to 1000, with -1000 being the lowest
     * priority and 1000 being the highest priority. The default value is 0.
     */
    @Generated
    @JsonProperty(value = "priority")
    private Integer priority;

    /*
     * If the value is set to True, other high priority jobs submitted to the system
     * will take precedence and will be able requeue tasks from this job. You can
     * update a job's allowTaskPreemption after it has been created using the update
     * job API.
     */
    @Generated
    @JsonProperty(value = "allowTaskPreemption")
    private Boolean allowTaskPreemption;

    /*
     * The value of maxParallelTasks must be -1 or greater than 0 if specified. If not
     * specified, the default value is -1, which means there's no limit to the number
     * of tasks that can be run at once. You can update a job's maxParallelTasks after
     * it has been created using the update job API.
     */
    @Generated
    @JsonProperty(value = "maxParallelTasks")
    private Integer maxParallelTasks;

    /*
     * The execution constraints for a Job.
     */
    @Generated
    @JsonProperty(value = "constraints")
    private JobConstraints constraints;

    /*
     * Specifies how a Job should be assigned to a Pool.
     */
    @Generated
    @JsonProperty(value = "poolInfo")
    private PoolInformation poolInfo;

    /*
     * The default is noaction.
     */
    @Generated
    @JsonProperty(value = "onAllTasksComplete")
    private OnAllTasksComplete onAllTasksComplete;

    /*
     * The Batch service does not assign any meaning to metadata; it is solely for the
     * use of user code.
     */
    @Generated
    @JsonProperty(value = "metadata")
    private List<MetadataItem> metadata;

    /**
     * Get the priority property: Priority values can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0.
     *
     * @return the priority value.
     */
    @Generated
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Set the priority property: Priority values can range from -1000 to 1000, with -1000 being the lowest priority and
     * 1000 being the highest priority. The default value is 0.
     *
     * @param priority the priority value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the allowTaskPreemption property: If the value is set to True, other high priority jobs submitted to the
     * system will take precedence and will be able requeue tasks from this job. You can update a job's
     * allowTaskPreemption after it has been created using the update job API.
     *
     * @return the allowTaskPreemption value.
     */
    @Generated
    public Boolean isAllowTaskPreemption() {
        return this.allowTaskPreemption;
    }

    /**
     * Set the allowTaskPreemption property: If the value is set to True, other high priority jobs submitted to the
     * system will take precedence and will be able requeue tasks from this job. You can update a job's
     * allowTaskPreemption after it has been created using the update job API.
     *
     * @param allowTaskPreemption the allowTaskPreemption value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setAllowTaskPreemption(Boolean allowTaskPreemption) {
        this.allowTaskPreemption = allowTaskPreemption;
        return this;
    }

    /**
     * Get the maxParallelTasks property: The value of maxParallelTasks must be -1 or greater than 0 if specified. If
     * not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at
     * once. You can update a job's maxParallelTasks after it has been created using the update job API.
     *
     * @return the maxParallelTasks value.
     */
    @Generated
    public Integer getMaxParallelTasks() {
        return this.maxParallelTasks;
    }

    /**
     * Set the maxParallelTasks property: The value of maxParallelTasks must be -1 or greater than 0 if specified. If
     * not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at
     * once. You can update a job's maxParallelTasks after it has been created using the update job API.
     *
     * @param maxParallelTasks the maxParallelTasks value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setMaxParallelTasks(Integer maxParallelTasks) {
        this.maxParallelTasks = maxParallelTasks;
        return this;
    }

    /**
     * Get the constraints property: The execution constraints for a Job.
     *
     * @return the constraints value.
     */
    @Generated
    public JobConstraints getConstraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: The execution constraints for a Job.
     *
     * @param constraints the constraints value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setConstraints(JobConstraints constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the poolInfo property: Specifies how a Job should be assigned to a Pool.
     *
     * @return the poolInfo value.
     */
    @Generated
    public PoolInformation getPoolInfo() {
        return this.poolInfo;
    }

    /**
     * Get the onAllTasksComplete property: The default is noaction.
     *
     * @return the onAllTasksComplete value.
     */
    @Generated
    public OnAllTasksComplete getOnAllTasksComplete() {
        return this.onAllTasksComplete;
    }

    /**
     * Set the onAllTasksComplete property: The default is noaction.
     *
     * @param onAllTasksComplete the onAllTasksComplete value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
        this.onAllTasksComplete = onAllTasksComplete;
        return this;
    }

    /**
     * Get the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The Batch service does not assign any meaning to metadata; it is solely for the use of
     * user code.
     *
     * @param metadata the metadata value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }

    /** Creates an instance of BatchJobUpdateParameters class. */
    @Generated
    public BatchJobUpdateParameters() {}

    /**
     * Set the poolInfo property: Specifies how a Job should be assigned to a Pool.
     *
     * @param poolInfo the poolInfo value to set.
     * @return the BatchJobUpdateParameters object itself.
     */
    @Generated
    public BatchJobUpdateParameters setPoolInfo(PoolInformation poolInfo) {
        this.poolInfo = poolInfo;
        return this;
    }
}
