// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for disabling scheduling on an Azure Batch Compute Node.
 */
@Fluent
public final class BatchNodeDisableSchedulingContent implements JsonSerializable<BatchNodeDisableSchedulingContent> {

    /*
     * What to do with currently running Tasks when disabling Task scheduling on the Compute Node. The default value is
     * requeue.
     */
    @Generated
    private BatchNodeDisableSchedulingOption nodeDisableSchedulingOption;

    /**
     * Creates an instance of BatchNodeDisableSchedulingContent class.
     */
    @Generated
    public BatchNodeDisableSchedulingContent() {
    }

    /**
     * Get the nodeDisableSchedulingOption property: What to do with currently running Tasks when disabling Task
     * scheduling on the Compute Node. The default value is requeue.
     *
     * @return the nodeDisableSchedulingOption value.
     */
    @Generated
    public BatchNodeDisableSchedulingOption getNodeDisableSchedulingOption() {
        return this.nodeDisableSchedulingOption;
    }

    /**
     * Set the nodeDisableSchedulingOption property: What to do with currently running Tasks when disabling Task
     * scheduling on the Compute Node. The default value is requeue.
     *
     * @param nodeDisableSchedulingOption the nodeDisableSchedulingOption value to set.
     * @return the BatchNodeDisableSchedulingContent object itself.
     */
    @Generated
    public BatchNodeDisableSchedulingContent
        setNodeDisableSchedulingOption(BatchNodeDisableSchedulingOption nodeDisableSchedulingOption) {
        this.nodeDisableSchedulingOption = nodeDisableSchedulingOption;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeDisableSchedulingOption",
            this.nodeDisableSchedulingOption == null ? null : this.nodeDisableSchedulingOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchNodeDisableSchedulingContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchNodeDisableSchedulingContent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchNodeDisableSchedulingContent.
     */
    @Generated
    public static BatchNodeDisableSchedulingContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchNodeDisableSchedulingContent deserializedBatchNodeDisableSchedulingContent
                = new BatchNodeDisableSchedulingContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("nodeDisableSchedulingOption".equals(fieldName)) {
                    deserializedBatchNodeDisableSchedulingContent.nodeDisableSchedulingOption
                        = BatchNodeDisableSchedulingOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchNodeDisableSchedulingContent;
        });
    }
}
