// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import java.time.Duration;

/**
 * Optional parameters for Delete Task File operation.
 */
@Fluent
public final class BatchTaskFileDeleteOptions {

    /*
     * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the
     * value is larger than 30, the default will be used instead.".
     */
    @Generated
    private Long timeOutInSeconds;

    /*
     * Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.
     */
    @Generated
    private Boolean recursive;

    /**
     * Creates an instance of BatchTaskFileDeleteOptions class.
     */
    @Generated
    public BatchTaskFileDeleteOptions() {
    }

    /**
     * Get the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @return the timeOutInSeconds value.
     */
    @Generated
    public Duration getTimeOutInSeconds() {
        if (this.timeOutInSeconds == null) {
            return null;
        }
        return Duration.ofSeconds(this.timeOutInSeconds);
    }

    /**
     * Get the recursive property: Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.
     *
     * @return the recursive value.
     */
    @Generated
    public Boolean isRecursive() {
        return this.recursive;
    }

    /**
     * Set the recursive property: Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.
     *
     * @param recursive the recursive value to set.
     * @return the BatchTaskFileDeleteOptions object itself.
     */
    @Generated
    public BatchTaskFileDeleteOptions setRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Set the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @param timeOutInSeconds the timeOutInSeconds value to set.
     * @return the BatchTaskFileDeleteOptions object itself.
     */
    @Generated
    public BatchTaskFileDeleteOptions setTimeOutInSeconds(Duration timeOutInSeconds) {
        if (timeOutInSeconds == null) {
            this.timeOutInSeconds = null;
        } else {
            this.timeOutInSeconds = timeOutInSeconds.getSeconds();
        }
        return this;
    }
}
