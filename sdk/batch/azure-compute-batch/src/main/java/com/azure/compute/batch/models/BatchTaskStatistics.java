// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;

/**
 * Resource usage statistics for a Task.
 */
@Immutable
public final class BatchTaskStatistics {

    /*
     * The URL of the statistics.
     */
    @Generated
    @JsonProperty(value = "url")
    private final String url;

    /*
     * The start time of the time range covered by the statistics.
     */
    @Generated
    @JsonProperty(value = "startTime")
    private final OffsetDateTime startTime;

    /*
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @Generated
    @JsonProperty(value = "lastUpdateTime")
    private final OffsetDateTime lastUpdateTime;

    /*
     * The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries.
     */
    @Generated
    @JsonProperty(value = "wallClockTime")
    private final Duration wallClockTime;

    /*
     * The total number of disk read operations made by the Task.
     */
    @Generated
    @JsonProperty(value = "readIOps")
    private final long readIOps;

    /*
     * The total number of disk write operations made by the Task.
     */
    @Generated
    @JsonProperty(value = "writeIOps")
    private final long writeIOps;

    /*
     * The total gibibytes read from disk by the Task.
     */
    @Generated
    @JsonProperty(value = "readIOGiB")
    private final double readIOGiB;

    /*
     * The total gibibytes written to disk by the Task.
     */
    @Generated
    @JsonProperty(value = "writeIOGiB")
    private final double writeIOGiB;

    /*
     * The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.).
     */
    @Generated
    @JsonProperty(value = "waitTime")
    private final Duration waitTime;

    /**
     * Get the url property: The URL of the statistics.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the startTime property: The start time of the time range covered by the statistics.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the lastUpdateTime property: The time at which the statistics were last updated. All statistics are limited
     * to the range between startTime and lastUpdateTime.
     *
     * @return the lastUpdateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Get the wallClockTime property: The total wall clock time of the Task. The wall clock time is the elapsed time
     * from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were
     * updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all
     * the Task retries.
     *
     * @return the wallClockTime value.
     */
    @Generated
    public Duration getWallClockTime() {
        return this.wallClockTime;
    }

    /**
     * Get the readIOps property: The total number of disk read operations made by the Task.
     *
     * @return the readIOps value.
     */
    @Generated
    public long getReadIOps() {
        return this.readIOps;
    }

    /**
     * Get the writeIOps property: The total number of disk write operations made by the Task.
     *
     * @return the writeIOps value.
     */
    @Generated
    public long getWriteIOps() {
        return this.writeIOps;
    }

    /**
     * Get the readIOGiB property: The total gibibytes read from disk by the Task.
     *
     * @return the readIOGiB value.
     */
    @Generated
    public double getReadIOGiB() {
        return this.readIOGiB;
    }

    /**
     * Get the writeIOGiB property: The total gibibytes written to disk by the Task.
     *
     * @return the writeIOGiB value.
     */
    @Generated
    public double getWriteIOGiB() {
        return this.writeIOGiB;
    }

    /**
     * Get the waitTime property: The total wait time of the Task. The wait time for a Task is defined as the elapsed
     * time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures,
     * the wait time is the time to the most recent Task execution.).
     *
     * @return the waitTime value.
     */
    @Generated
    public Duration getWaitTime() {
        return this.waitTime;
    }

    /*
     * The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     */
    @Generated
    @JsonProperty(value = "kernelCPUTime")
    private final Duration kernelCpuTime;

    /**
     * Get the kernelCpuTime property: The total kernel mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by the Task.
     *
     * @return the kernelCpuTime value.
     */
    @Generated
    public Duration getKernelCpuTime() {
        return this.kernelCpuTime;
    }

    /*
     * The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task.
     */
    @Generated
    @JsonProperty(value = "userCPUTime")
    private final Duration userCpuTime;

    /**
     * Get the userCpuTime property: The total user mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by the Task.
     *
     * @return the userCpuTime value.
     */
    @Generated
    public Duration getUserCpuTime() {
        return this.userCpuTime;
    }

    /**
     * Creates an instance of BatchTaskStatistics class.
     *
     * @param url the url value to set.
     * @param startTime the startTime value to set.
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @param userCpuTime the userCpuTime value to set.
     * @param kernelCpuTime the kernelCpuTime value to set.
     * @param wallClockTime the wallClockTime value to set.
     * @param readIOps the readIOps value to set.
     * @param writeIOps the writeIOps value to set.
     * @param readIOGiB the readIOGiB value to set.
     * @param writeIOGiB the writeIOGiB value to set.
     * @param waitTime the waitTime value to set.
     */
    @Generated
    @JsonCreator
    private BatchTaskStatistics(@JsonProperty(value = "url") String url,
        @JsonProperty(value = "startTime") OffsetDateTime startTime,
        @JsonProperty(value = "lastUpdateTime") OffsetDateTime lastUpdateTime,
        @JsonProperty(value = "userCPUTime") Duration userCpuTime,
        @JsonProperty(value = "kernelCPUTime") Duration kernelCpuTime,
        @JsonProperty(value = "wallClockTime") Duration wallClockTime, @JsonProperty(value = "readIOps") long readIOps,
        @JsonProperty(value = "writeIOps") long writeIOps, @JsonProperty(value = "readIOGiB") double readIOGiB,
        @JsonProperty(value = "writeIOGiB") double writeIOGiB, @JsonProperty(value = "waitTime") Duration waitTime) {
        this.url = url;
        this.startTime = startTime;
        this.lastUpdateTime = lastUpdateTime;
        this.userCpuTime = userCpuTime;
        this.kernelCpuTime = kernelCpuTime;
        this.wallClockTime = wallClockTime;
        this.readIOps = readIOps;
        this.writeIOps = writeIOps;
        this.readIOGiB = readIOGiB;
        this.writeIOGiB = writeIOGiB;
        this.waitTime = waitTime;
    }
}
