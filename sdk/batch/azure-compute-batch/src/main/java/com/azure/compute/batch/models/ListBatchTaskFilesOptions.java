// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;

/**
 * Optional parameters for List Task Files operation.
 */
@Fluent
public final class ListBatchTaskFilesOptions {

    private String filter;

    private Boolean recursive;

    /**
     * Creates an instance of {@link ListBatchTaskFilesOptions}.
     */
    public ListBatchTaskFilesOptions() {
    }

    /**
     * Gets the OData $filter clause used for filtering results.
     *
     * @return The OData $filter clause.
     */
    public String getFilter() {
        return filter;
    }

    /**
     * Sets the OData $filter clause used for filtering results.
     *
     * @param filter The OData $filter clause.
     * @return The {@link ListBatchTaskFilesOptions} object itself, allowing for method chaining.
     */
    public ListBatchTaskFilesOptions setFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Gets a value indicating whether to list children of the Task directory. This parameter can be used in combination
     * with
     * the filter parameter to list specific type of files.
     *
     * @return A value indicating whether to list children of the Task directory.
     */
    public Boolean isRecursive() {
        return recursive;
    }

    /**
     * Sets a value indicating whether to list children of the Task directory. This parameter can be used in combination
     * with
     * the filter parameter to list specific type of files.
     *
     * @param recursive A value indicating whether to list children of the Task directory.
     * @return The {@link ListBatchTaskFilesOptions} object itself, allowing for method chaining.
     */
    public ListBatchTaskFilesOptions setRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }

    /*
     * The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the
     * value is larger than 30, the default will be used instead.".
     */
    @Generated
    private Integer timeOutInSeconds;

    /*
     * The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     */
    @Generated
    private Integer maxPageSize;

    /**
     * Get the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @return the timeOutInSeconds value.
     */
    @Generated
    public Integer getTimeOutInSeconds() {
        return this.timeOutInSeconds;
    }

    /**
     * Set the timeOutInSeconds property: The maximum time that the server can spend processing the request, in seconds.
     * The default is 30 seconds. If the value is larger than 30, the default will be used instead.".
     *
     * @param timeOutInSeconds the timeOutInSeconds value to set.
     * @return the ListBatchTaskFilesOptions object itself.
     */
    @Generated
    public ListBatchTaskFilesOptions setTimeOutInSeconds(Integer timeOutInSeconds) {
        this.timeOutInSeconds = timeOutInSeconds;
        return this;
    }

    /**
     * Get the maxPageSize property: The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     *
     * @return the maxPageSize value.
     */
    @Generated
    public Integer getMaxPageSize() {
        return this.maxPageSize;
    }

    /**
     * Set the maxPageSize property: The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     *
     * @param maxPageSize the maxPageSize value to set.
     * @return the ListBatchTaskFilesOptions object itself.
     */
    @Generated
    public ListBatchTaskFilesOptions setMaxPageSize(Integer maxPageSize) {
        this.maxPageSize = maxPageSize;
        return this;
    }
}
