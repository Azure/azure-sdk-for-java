// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The destination to which a file should be uploaded.
 */
@Fluent
public final class OutputFileDestination implements JsonSerializable<OutputFileDestination> {

    /*
     * A location in Azure blob storage to which files are uploaded.
     */
    @Generated
    private OutputFileBlobContainerDestination container;

    /**
     * Creates an instance of OutputFileDestination class.
     */
    @Generated
    public OutputFileDestination() {
    }

    /**
     * Get the container property: A location in Azure blob storage to which files are uploaded.
     *
     * @return the container value.
     */
    @Generated
    public OutputFileBlobContainerDestination getContainer() {
        return this.container;
    }

    /**
     * Set the container property: A location in Azure blob storage to which files are uploaded.
     *
     * @param container the container value to set.
     * @return the OutputFileDestination object itself.
     */
    @Generated
    public OutputFileDestination setContainer(OutputFileBlobContainerDestination container) {
        this.container = container;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("container", this.container);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutputFileDestination from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutputFileDestination if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OutputFileDestination.
     */
    @Generated
    public static OutputFileDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OutputFileDestination deserializedOutputFileDestination = new OutputFileDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("container".equals(fieldName)) {
                    deserializedOutputFileDestination.container = OutputFileBlobContainerDestination.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedOutputFileDestination;
        });
    }
}
