// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The Azure Batch service log files upload parameters for a Compute Node.
 */
@Fluent
public final class UploadBatchServiceLogsContent implements JsonSerializable<UploadBatchServiceLogsContent> {

    /*
     * The URL of the container within Azure Blob Storage to which to upload the Batch Service log file(s). If a user
     * assigned managed identity is not being used, the URL must include a Shared Access Signature (SAS) granting write
     * permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time
     * for SAS is optional and recommended to not be specified.
     */
    @Generated
    private final String containerUrl;

    /*
     * The start of the time range from which to upload Batch Service log file(s). Any log file containing a log message
     * in the time range will be uploaded. This means that the operation might retrieve more logs than have been
     * requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than
     * have been requested.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The end of the time range from which to upload Batch Service log file(s). Any log file containing a log message
     * in the time range will be uploaded. This means that the operation might retrieve more logs than have been
     * requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than
     * have been requested. If omitted, the default is to upload all logs available after the startTime.
     */
    @Generated
    private OffsetDateTime endTime;

    /*
     * The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl. The
     * identity must have write access to the Azure Blob Storage container.
     */
    @Generated
    private BatchNodeIdentityReference identityReference;

    /**
     * Creates an instance of UploadBatchServiceLogsContent class.
     *
     * @param containerUrl the containerUrl value to set.
     * @param startTime the startTime value to set.
     */
    @Generated
    public UploadBatchServiceLogsContent(String containerUrl, OffsetDateTime startTime) {
        this.containerUrl = containerUrl;
        this.startTime = startTime;
    }

    /**
     * Get the containerUrl property: The URL of the container within Azure Blob Storage to which to upload the Batch
     * Service log file(s). If a user assigned managed identity is not being used, the URL must include a Shared Access
     * Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the
     * upload to finish. The start time for SAS is optional and recommended to not be specified.
     *
     * @return the containerUrl value.
     */
    @Generated
    public String getContainerUrl() {
        return this.containerUrl;
    }

    /**
     * Get the startTime property: The start of the time range from which to upload Batch Service log file(s). Any log
     * file containing a log message in the time range will be uploaded. This means that the operation might retrieve
     * more logs than have been requested since the entire log file is always uploaded, but the operation should not
     * retrieve fewer logs than have been requested.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end of the time range from which to upload Batch Service log file(s). Any log file
     * containing a log message in the time range will be uploaded. This means that the operation might retrieve more
     * logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve
     * fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end of the time range from which to upload Batch Service log file(s). Any log file
     * containing a log message in the time range will be uploaded. This means that the operation might retrieve more
     * logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve
     * fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime.
     *
     * @param endTime the endTime value to set.
     * @return the UploadBatchServiceLogsContent object itself.
     */
    @Generated
    public UploadBatchServiceLogsContent setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the identityReference property: The reference to the user assigned identity to use to access Azure Blob
     * Storage specified by containerUrl. The identity must have write access to the Azure Blob Storage container.
     *
     * @return the identityReference value.
     */
    @Generated
    public BatchNodeIdentityReference getIdentityReference() {
        return this.identityReference;
    }

    /**
     * Set the identityReference property: The reference to the user assigned identity to use to access Azure Blob
     * Storage specified by containerUrl. The identity must have write access to the Azure Blob Storage container.
     *
     * @param identityReference the identityReference value to set.
     * @return the UploadBatchServiceLogsContent object itself.
     */
    @Generated
    public UploadBatchServiceLogsContent setIdentityReference(BatchNodeIdentityReference identityReference) {
        this.identityReference = identityReference;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerUrl", this.containerUrl);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("identityReference", this.identityReference);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadBatchServiceLogsContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadBatchServiceLogsContent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UploadBatchServiceLogsContent.
     */
    @Generated
    public static UploadBatchServiceLogsContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String containerUrl = null;
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            BatchNodeIdentityReference identityReference = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("containerUrl".equals(fieldName)) {
                    containerUrl = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("identityReference".equals(fieldName)) {
                    identityReference = BatchNodeIdentityReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            UploadBatchServiceLogsContent deserializedUploadBatchServiceLogsContent
                = new UploadBatchServiceLogsContent(containerUrl, startTime);
            deserializedUploadBatchServiceLogsContent.endTime = endTime;
            deserializedUploadBatchServiceLogsContent.identityReference = identityReference;
            return deserializedUploadBatchServiceLogsContent;
        });
    }
}
