// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A locality hint that can be used by the Batch service to select a Compute Node
 * on which to start a Task.
 */
@Immutable
public final class AffinityInfo implements JsonSerializable<AffinityInfo> {

    /*
     * An opaque string representing the location of a Compute Node or a Task that has run previously. You can pass the
     * affinityId of a Node to indicate that this Task needs to run on that Compute Node. Note that this is just a soft
     * affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will
     * be scheduled elsewhere.
     */
    @Generated
    private final String affinityId;

    /**
     * Creates an instance of AffinityInfo class.
     *
     * @param affinityId the affinityId value to set.
     */
    @Generated
    public AffinityInfo(String affinityId) {
        this.affinityId = affinityId;
    }

    /**
     * Get the affinityId property: An opaque string representing the location of a Compute Node or a Task that has run
     * previously. You can pass the affinityId of a Node to indicate that this Task needs to run on that Compute Node.
     * Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is
     * scheduled, then the Task will be scheduled elsewhere.
     *
     * @return the affinityId value.
     */
    @Generated
    public String getAffinityId() {
        return this.affinityId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("affinityId", this.affinityId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AffinityInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AffinityInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AffinityInfo.
     */
    @Generated
    public static AffinityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String affinityId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("affinityId".equals(fieldName)) {
                    affinityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AffinityInfo(affinityId);
        });
    }
}
