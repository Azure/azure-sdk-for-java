// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Usage metrics for a Pool across an aggregation interval.
 */
@Immutable
public final class BatchPoolUsageMetrics implements JsonSerializable<BatchPoolUsageMetrics> {

    /*
     * The ID of the Pool whose metrics are aggregated in this entry.
     */
    @Generated
    private final String poolId;

    /*
     * The start time of the aggregation interval covered by this entry.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The end time of the aggregation interval covered by this entry.
     */
    @Generated
    private final OffsetDateTime endTime;

    /*
     * The size of virtual machines in the Pool. All VMs in a Pool are the same size. For information about available
     * sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool
     * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
     */
    @Generated
    private final String vmSize;

    /*
     * The total core hours used in the Pool during this aggregation interval.
     */
    @Generated
    private final double totalCoreHours;

    /**
     * Creates an instance of BatchPoolUsageMetrics class.
     *
     * @param poolId the poolId value to set.
     * @param startTime the startTime value to set.
     * @param endTime the endTime value to set.
     * @param vmSize the vmSize value to set.
     * @param totalCoreHours the totalCoreHours value to set.
     */
    @Generated
    private BatchPoolUsageMetrics(String poolId, OffsetDateTime startTime, OffsetDateTime endTime, String vmSize,
        double totalCoreHours) {
        this.poolId = poolId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.vmSize = vmSize;
        this.totalCoreHours = totalCoreHours;
    }

    /**
     * Get the poolId property: The ID of the Pool whose metrics are aggregated in this entry.
     *
     * @return the poolId value.
     */
    @Generated
    public String getPoolId() {
        return this.poolId;
    }

    /**
     * Get the startTime property: The start time of the aggregation interval covered by this entry.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the aggregation interval covered by this entry.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the vmSize property: The size of virtual machines in the Pool. All VMs in a Pool are the same size. For
     * information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an
     * Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
     *
     * @return the vmSize value.
     */
    @Generated
    public String getVmSize() {
        return this.vmSize;
    }

    /**
     * Get the totalCoreHours property: The total core hours used in the Pool during this aggregation interval.
     *
     * @return the totalCoreHours value.
     */
    @Generated
    public double getTotalCoreHours() {
        return this.totalCoreHours;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("poolId", this.poolId);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeDoubleField("totalCoreHours", this.totalCoreHours);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolUsageMetrics from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolUsageMetrics if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchPoolUsageMetrics.
     */
    @Generated
    public static BatchPoolUsageMetrics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String poolId = null;
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            String vmSize = null;
            double totalCoreHours = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("poolId".equals(fieldName)) {
                    poolId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("vmSize".equals(fieldName)) {
                    vmSize = reader.getString();
                } else if ("totalCoreHours".equals(fieldName)) {
                    totalCoreHours = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new BatchPoolUsageMetrics(poolId, startTime, endTime, vmSize, totalCoreHours);
        });
    }
}
