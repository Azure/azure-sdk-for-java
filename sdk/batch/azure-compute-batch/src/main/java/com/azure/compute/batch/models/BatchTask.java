// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but
 * are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due
 * to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the
 * maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be
 * idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or
 * duplicate data. The best practice for long running Tasks is to use some form of checkpointing.
 */
@Fluent
public final class BatchTask {
    /*
     * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot
     * contain more than 64 characters.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The display name need not be unique and can contain any Unicode characters up
     * to a maximum length of 1024.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The URL of the Task.
     */
    @JsonProperty(value = "url", access = JsonProperty.Access.WRITE_ONLY)
    private String url;

    /*
     * This is an opaque string. You can use it to detect whether the Task has changed
     * between requests. In particular, you can be pass the ETag when updating a Task
     * to specify that your changes should take effect only if nobody else has
     * modified the Task in the meantime.
     */
    @JsonProperty(value = "eTag", access = JsonProperty.Access.WRITE_ONLY)
    private String eTag;

    /*
     * The last modified time of the Task.
     */
    @JsonProperty(value = "lastModified", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModified;

    /*
     * The creation time of the Task.
     */
    @JsonProperty(value = "creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /*
     * How the Batch service should respond when the Task completes.
     */
    @JsonProperty(value = "exitConditions")
    private ExitConditions exitConditions;

    /*
     * The state of the Task.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private TaskState state;

    /*
     * The time at which the Task entered its current state.
     */
    @JsonProperty(value = "stateTransitionTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime stateTransitionTime;

    /*
     * This property is not set if the Task is in its initial Active state.
     */
    @JsonProperty(value = "previousState", access = JsonProperty.Access.WRITE_ONLY)
    private TaskState previousState;

    /*
     * This property is not set if the Task is in its initial Active state.
     */
    @JsonProperty(value = "previousStateTransitionTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime previousStateTransitionTime;

    /*
     * For multi-instance Tasks, the command line is executed as the primary Task,
     * after the primary Task and all subtasks have finished executing the
     * coordination command line. The command line does not run under a shell, and
     * therefore cannot take advantage of shell features such as environment variable
     * expansion. If you want to take advantage of such features, you should invoke
     * the shell in the command line, for example using "cmd /c MyCommand" in
     * Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to
     * file paths, it should use a relative path (relative to the Task working
     * directory), or use the Batch provided environment variable
     * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
     */
    @JsonProperty(value = "commandLine")
    private String commandLine;

    /*
     * If the Pool that will run this Task has containerConfiguration set, this must
     * be set as well. If the Pool that will run this Task doesn't have
     * containerConfiguration set, this must not be set. When this is specified, all
     * directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure
     * Batch directories on the node) are mapped into the container, all Task
     * environment variables are mapped into the container, and the Task command line
     * is executed in the container. Files produced in the container outside of
     * AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that
     * Batch file APIs will not be able to access those files.
     */
    @JsonProperty(value = "containerSettings")
    private TaskContainerSettings containerSettings;

    /*
     * For multi-instance Tasks, the resource files will only be downloaded to the
     * Compute Node on which the primary Task is executed. There is a maximum size for
     * the list of resource files.  When the max size is exceeded, the request will
     * fail and the response error code will be RequestEntityTooLarge. If this occurs,
     * the collection of ResourceFiles must be reduced in size. This can be achieved
     * using .zip files, Application Packages, or Docker Containers.
     */
    @JsonProperty(value = "resourceFiles")
    private List<ResourceFile> resourceFiles;

    /*
     * For multi-instance Tasks, the files will only be uploaded from the Compute Node
     * on which the primary Task is executed.
     */
    @JsonProperty(value = "outputFiles")
    private List<OutputFile> outputFiles;

    /*
     * A list of environment variable settings for the Task.
     */
    @JsonProperty(value = "environmentSettings")
    private List<EnvironmentSetting> environmentSettings;

    /*
     * A locality hint that can be used by the Batch service to select a Compute Node
     * on which to start a Task.
     */
    @JsonProperty(value = "affinityInfo")
    private AffinityInformation affinityInfo;

    /*
     * Execution constraints to apply to a Task.
     */
    @JsonProperty(value = "constraints")
    private TaskConstraints constraints;

    /*
     * The default is 1. A Task can only be scheduled to run on a compute node if the
     * node has enough free scheduling slots available. For multi-instance Tasks, this
     * must be 1.
     */
    @JsonProperty(value = "requiredSlots")
    private Integer requiredSlots;

    /*
     * If omitted, the Task runs as a non-administrative user unique to the Task.
     */
    @JsonProperty(value = "userIdentity")
    private UserIdentity userIdentity;

    /*
     * Information about the execution of a Task.
     */
    @JsonProperty(value = "executionInfo", access = JsonProperty.Access.WRITE_ONLY)
    private TaskExecutionInformation executionInfo;

    /*
     * Information about the Compute Node on which a Task ran.
     */
    @JsonProperty(value = "nodeInfo", access = JsonProperty.Access.WRITE_ONLY)
    private ComputeNodeInformation nodeInfo;

    /*
     * Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
     * if any of the subtasks fail (for example due to exiting with a non-zero exit
     * code) the entire multi-instance Task fails. The multi-instance Task is then
     * terminated and retried, up to its retry limit.
     */
    @JsonProperty(value = "multiInstanceSettings")
    private MultiInstanceSettings multiInstanceSettings;

    /*
     * Resource usage statistics for a Task.
     */
    @JsonProperty(value = "stats", access = JsonProperty.Access.WRITE_ONLY)
    private TaskStatistics stats;

    /*
     * This Task will not be scheduled until all Tasks that it depends on have
     * completed successfully. If any of those Tasks fail and exhaust their retry
     * counts, this Task will never be scheduled.
     */
    @JsonProperty(value = "dependsOn")
    private TaskDependencies dependsOn;

    /*
     * Application packages are downloaded and deployed to a shared directory, not the
     * Task working directory. Therefore, if a referenced package is already on the
     * Node, and is up to date, then it is not re-downloaded; the existing copy on the
     * Compute Node is used. If a referenced Package cannot be installed, for example
     * because the package has been deleted or because download failed, the Task
     * fails.
     */
    @JsonProperty(value = "applicationPackageReferences")
    private List<ApplicationPackageReference> applicationPackageReferences;

    /*
     * If this property is set, the Batch service provides the Task with an
     * authentication token which can be used to authenticate Batch service operations
     * without requiring an Account access key. The token is provided via the
     * AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the
     * Task can carry out using the token depend on the settings. For example, a Task
     * can request Job permissions in order to add other Tasks to the Job, or check
     * the status of the Job or of other Tasks under the Job.
     */
    @JsonProperty(value = "authenticationTokenSettings")
    private AuthenticationTokenSettings authenticationTokenSettings;

    /** Creates an instance of BatchTask class. */
    public BatchTask() {}

    /**
     * Get the id property: The ID can contain any combination of alphanumeric characters including hyphens and
     * underscores, and cannot contain more than 64 characters.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The ID can contain any combination of alphanumeric characters including hyphens and
     * underscores, and cannot contain more than 64 characters.
     *
     * @param id the id value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the displayName property: The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     *
     * @param displayName the displayName value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the url property: The URL of the Task.
     *
     * @return the url value.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the eTag property: This is an opaque string. You can use it to detect whether the Task has changed between
     * requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take
     * effect only if nobody else has modified the Task in the meantime.
     *
     * @return the eTag value.
     */
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the lastModified property: The last modified time of the Task.
     *
     * @return the lastModified value.
     */
    public OffsetDateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Get the creationTime property: The creation time of the Task.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the exitConditions property: How the Batch service should respond when the Task completes.
     *
     * @return the exitConditions value.
     */
    public ExitConditions getExitConditions() {
        return this.exitConditions;
    }

    /**
     * Set the exitConditions property: How the Batch service should respond when the Task completes.
     *
     * @param exitConditions the exitConditions value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setExitConditions(ExitConditions exitConditions) {
        this.exitConditions = exitConditions;
        return this;
    }

    /**
     * Get the state property: The state of the Task.
     *
     * @return the state value.
     */
    public TaskState getState() {
        return this.state;
    }

    /**
     * Get the stateTransitionTime property: The time at which the Task entered its current state.
     *
     * @return the stateTransitionTime value.
     */
    public OffsetDateTime getStateTransitionTime() {
        return this.stateTransitionTime;
    }

    /**
     * Get the previousState property: This property is not set if the Task is in its initial Active state.
     *
     * @return the previousState value.
     */
    public TaskState getPreviousState() {
        return this.previousState;
    }

    /**
     * Get the previousStateTransitionTime property: This property is not set if the Task is in its initial Active
     * state.
     *
     * @return the previousStateTransitionTime value.
     */
    public OffsetDateTime getPreviousStateTransitionTime() {
        return this.previousStateTransitionTime;
    }

    /**
     * Get the commandLine property: For multi-instance Tasks, the command line is executed as the primary Task, after
     * the primary Task and all subtasks have finished executing the coordination command line. The command line does
     * not run under a shell, and therefore cannot take advantage of shell features such as environment variable
     * expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for
     * example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to
     * file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided
     * environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
     *
     * @return the commandLine value.
     */
    public String getCommandLine() {
        return this.commandLine;
    }

    /**
     * Set the commandLine property: For multi-instance Tasks, the command line is executed as the primary Task, after
     * the primary Task and all subtasks have finished executing the coordination command line. The command line does
     * not run under a shell, and therefore cannot take advantage of shell features such as environment variable
     * expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for
     * example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to
     * file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided
     * environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
     *
     * @param commandLine the commandLine value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setCommandLine(String commandLine) {
        this.commandLine = commandLine;
        return this;
    }

    /**
     * Get the containerSettings property: If the Pool that will run this Task has containerConfiguration set, this must
     * be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be
     * set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure
     * Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the
     * container, and the Task command line is executed in the container. Files produced in the container outside of
     * AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to
     * access those files.
     *
     * @return the containerSettings value.
     */
    public TaskContainerSettings getContainerSettings() {
        return this.containerSettings;
    }

    /**
     * Set the containerSettings property: If the Pool that will run this Task has containerConfiguration set, this must
     * be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be
     * set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure
     * Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the
     * container, and the Task command line is executed in the container. Files produced in the container outside of
     * AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to
     * access those files.
     *
     * @param containerSettings the containerSettings value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setContainerSettings(TaskContainerSettings containerSettings) {
        this.containerSettings = containerSettings;
        return this;
    }

    /**
     * Get the resourceFiles property: For multi-instance Tasks, the resource files will only be downloaded to the
     * Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When
     * the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If
     * this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files,
     * Application Packages, or Docker Containers.
     *
     * @return the resourceFiles value.
     */
    public List<ResourceFile> getResourceFiles() {
        return this.resourceFiles;
    }

    /**
     * Set the resourceFiles property: For multi-instance Tasks, the resource files will only be downloaded to the
     * Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files. When
     * the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If
     * this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files,
     * Application Packages, or Docker Containers.
     *
     * @param resourceFiles the resourceFiles value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setResourceFiles(List<ResourceFile> resourceFiles) {
        this.resourceFiles = resourceFiles;
        return this;
    }

    /**
     * Get the outputFiles property: For multi-instance Tasks, the files will only be uploaded from the Compute Node on
     * which the primary Task is executed.
     *
     * @return the outputFiles value.
     */
    public List<OutputFile> getOutputFiles() {
        return this.outputFiles;
    }

    /**
     * Set the outputFiles property: For multi-instance Tasks, the files will only be uploaded from the Compute Node on
     * which the primary Task is executed.
     *
     * @param outputFiles the outputFiles value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setOutputFiles(List<OutputFile> outputFiles) {
        this.outputFiles = outputFiles;
        return this;
    }

    /**
     * Get the environmentSettings property: A list of environment variable settings for the Task.
     *
     * @return the environmentSettings value.
     */
    public List<EnvironmentSetting> getEnvironmentSettings() {
        return this.environmentSettings;
    }

    /**
     * Set the environmentSettings property: A list of environment variable settings for the Task.
     *
     * @param environmentSettings the environmentSettings value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
        this.environmentSettings = environmentSettings;
        return this;
    }

    /**
     * Get the affinityInfo property: A locality hint that can be used by the Batch service to select a Compute Node on
     * which to start a Task.
     *
     * @return the affinityInfo value.
     */
    public AffinityInformation getAffinityInfo() {
        return this.affinityInfo;
    }

    /**
     * Set the affinityInfo property: A locality hint that can be used by the Batch service to select a Compute Node on
     * which to start a Task.
     *
     * @param affinityInfo the affinityInfo value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setAffinityInfo(AffinityInformation affinityInfo) {
        this.affinityInfo = affinityInfo;
        return this;
    }

    /**
     * Get the constraints property: Execution constraints to apply to a Task.
     *
     * @return the constraints value.
     */
    public TaskConstraints getConstraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: Execution constraints to apply to a Task.
     *
     * @param constraints the constraints value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setConstraints(TaskConstraints constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get the requiredSlots property: The default is 1. A Task can only be scheduled to run on a compute node if the
     * node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
     *
     * @return the requiredSlots value.
     */
    public Integer getRequiredSlots() {
        return this.requiredSlots;
    }

    /**
     * Set the requiredSlots property: The default is 1. A Task can only be scheduled to run on a compute node if the
     * node has enough free scheduling slots available. For multi-instance Tasks, this must be 1.
     *
     * @param requiredSlots the requiredSlots value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setRequiredSlots(Integer requiredSlots) {
        this.requiredSlots = requiredSlots;
        return this;
    }

    /**
     * Get the userIdentity property: If omitted, the Task runs as a non-administrative user unique to the Task.
     *
     * @return the userIdentity value.
     */
    public UserIdentity getUserIdentity() {
        return this.userIdentity;
    }

    /**
     * Set the userIdentity property: If omitted, the Task runs as a non-administrative user unique to the Task.
     *
     * @param userIdentity the userIdentity value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setUserIdentity(UserIdentity userIdentity) {
        this.userIdentity = userIdentity;
        return this;
    }

    /**
     * Get the executionInfo property: Information about the execution of a Task.
     *
     * @return the executionInfo value.
     */
    public TaskExecutionInformation getExecutionInfo() {
        return this.executionInfo;
    }

    /**
     * Get the nodeInfo property: Information about the Compute Node on which a Task ran.
     *
     * @return the nodeInfo value.
     */
    public ComputeNodeInformation getNodeInfo() {
        return this.nodeInfo;
    }

    /**
     * Get the multiInstanceSettings property: Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI
     * case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire
     * multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
     *
     * @return the multiInstanceSettings value.
     */
    public MultiInstanceSettings getMultiInstanceSettings() {
        return this.multiInstanceSettings;
    }

    /**
     * Set the multiInstanceSettings property: Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI
     * case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire
     * multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit.
     *
     * @param multiInstanceSettings the multiInstanceSettings value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings) {
        this.multiInstanceSettings = multiInstanceSettings;
        return this;
    }

    /**
     * Get the stats property: Resource usage statistics for a Task.
     *
     * @return the stats value.
     */
    public TaskStatistics getStats() {
        return this.stats;
    }

    /**
     * Get the dependsOn property: This Task will not be scheduled until all Tasks that it depends on have completed
     * successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled.
     *
     * @return the dependsOn value.
     */
    public TaskDependencies getDependsOn() {
        return this.dependsOn;
    }

    /**
     * Set the dependsOn property: This Task will not be scheduled until all Tasks that it depends on have completed
     * successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled.
     *
     * @param dependsOn the dependsOn value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setDependsOn(TaskDependencies dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get the applicationPackageReferences property: Application packages are downloaded and deployed to a shared
     * directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up
     * to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package
     * cannot be installed, for example because the package has been deleted or because download failed, the Task fails.
     *
     * @return the applicationPackageReferences value.
     */
    public List<ApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Set the applicationPackageReferences property: Application packages are downloaded and deployed to a shared
     * directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up
     * to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package
     * cannot be installed, for example because the package has been deleted or because download failed, the Task fails.
     *
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
        this.applicationPackageReferences = applicationPackageReferences;
        return this;
    }

    /**
     * Get the authenticationTokenSettings property: If this property is set, the Batch service provides the Task with
     * an authentication token which can be used to authenticate Batch service operations without requiring an Account
     * access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that
     * the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in
     * order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
     *
     * @return the authenticationTokenSettings value.
     */
    public AuthenticationTokenSettings getAuthenticationTokenSettings() {
        return this.authenticationTokenSettings;
    }

    /**
     * Set the authenticationTokenSettings property: If this property is set, the Batch service provides the Task with
     * an authentication token which can be used to authenticate Batch service operations without requiring an Account
     * access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that
     * the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in
     * order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job.
     *
     * @param authenticationTokenSettings the authenticationTokenSettings value to set.
     * @return the BatchTask object itself.
     */
    public BatchTask setAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings) {
        this.authenticationTokenSettings = authenticationTokenSettings;
        return this;
    }
}
