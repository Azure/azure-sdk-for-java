// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Properties used to create a user Account on a Linux Compute Node.
 */
@Fluent
public final class LinuxUserConfiguration {

    /*
     * The user ID of the user Account. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     */
    @Generated
    @JsonProperty(value = "uid")
    private Integer uid;

    /*
     * The group ID for the user Account. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     */
    @Generated
    @JsonProperty(value = "gid")
    private Integer gid;

    /*
     * The SSH private key for the user Account. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done).
     */
    @Generated
    @JsonProperty(value = "sshPrivateKey")
    private String sshPrivateKey;

    /**
     * Creates an instance of LinuxUserConfiguration class.
     */
    @Generated
    public LinuxUserConfiguration() {
    }

    /**
     * Get the uid property: The user ID of the user Account. The uid and gid properties must be specified together or
     * not at all. If not specified the underlying operating system picks the uid.
     *
     * @return the uid value.
     */
    @Generated
    public Integer getUid() {
        return this.uid;
    }

    /**
     * Set the uid property: The user ID of the user Account. The uid and gid properties must be specified together or
     * not at all. If not specified the underlying operating system picks the uid.
     *
     * @param uid the uid value to set.
     * @return the LinuxUserConfiguration object itself.
     */
    @Generated
    public LinuxUserConfiguration setUid(Integer uid) {
        this.uid = uid;
        return this;
    }

    /**
     * Get the gid property: The group ID for the user Account. The uid and gid properties must be specified together or
     * not at all. If not specified the underlying operating system picks the gid.
     *
     * @return the gid value.
     */
    @Generated
    public Integer getGid() {
        return this.gid;
    }

    /**
     * Set the gid property: The group ID for the user Account. The uid and gid properties must be specified together or
     * not at all. If not specified the underlying operating system picks the gid.
     *
     * @param gid the gid value to set.
     * @return the LinuxUserConfiguration object itself.
     */
    @Generated
    public LinuxUserConfiguration setGid(Integer gid) {
        this.gid = gid;
        return this;
    }

    /**
     * Get the sshPrivateKey property: The SSH private key for the user Account. The private key must not be password
     * protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between
     * Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if
     * enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If
     * not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh
     * directory is done).
     *
     * @return the sshPrivateKey value.
     */
    @Generated
    public String getSshPrivateKey() {
        return this.sshPrivateKey;
    }

    /**
     * Set the sshPrivateKey property: The SSH private key for the user Account. The private key must not be password
     * protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between
     * Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if
     * enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If
     * not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh
     * directory is done).
     *
     * @param sshPrivateKey the sshPrivateKey value to set.
     * @return the LinuxUserConfiguration object itself.
     */
    @Generated
    public LinuxUserConfiguration setSshPrivateKey(String sshPrivateKey) {
        this.sshPrivateKey = sshPrivateKey;
        return this;
    }
}
