// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies any dependencies of a Task. Any Task that is explicitly specified or
 * within a dependency range must complete before the dependant Task will be
 * scheduled.
 */
@Fluent
public final class BatchTaskDependencies implements JsonSerializable<BatchTaskDependencies> {

    /*
     * The list of Task IDs that this Task depends on. All Tasks in this list must complete successfully before the
     * dependent Task can be scheduled. The taskIds collection is limited to 64000 characters total (i.e. the combined
     * length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with
     * error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
     */
    @Generated
    private List<String> taskIds;

    /*
     * The list of Task ID ranges that this Task depends on. All Tasks in all ranges must complete successfully before
     * the dependent Task can be scheduled.
     */
    @Generated
    private List<BatchTaskIdRange> taskIdRanges;

    /**
     * Creates an instance of BatchTaskDependencies class.
     */
    @Generated
    public BatchTaskDependencies() {
    }

    /**
     * Get the taskIds property: The list of Task IDs that this Task depends on. All Tasks in this list must complete
     * successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters
     * total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add
     * Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
     *
     * @return the taskIds value.
     */
    @Generated
    public List<String> getTaskIds() {
        return this.taskIds;
    }

    /**
     * Set the taskIds property: The list of Task IDs that this Task depends on. All Tasks in this list must complete
     * successfully before the dependent Task can be scheduled. The taskIds collection is limited to 64000 characters
     * total (i.e. the combined length of all Task IDs). If the taskIds collection exceeds the maximum length, the Add
     * Task request fails with error code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
     *
     * @param taskIds the taskIds value to set.
     * @return the BatchTaskDependencies object itself.
     */
    @Generated
    public BatchTaskDependencies setTaskIds(List<String> taskIds) {
        this.taskIds = taskIds;
        return this;
    }

    /**
     * Get the taskIdRanges property: The list of Task ID ranges that this Task depends on. All Tasks in all ranges must
     * complete successfully before the dependent Task can be scheduled.
     *
     * @return the taskIdRanges value.
     */
    @Generated
    public List<BatchTaskIdRange> getTaskIdRanges() {
        return this.taskIdRanges;
    }

    /**
     * Set the taskIdRanges property: The list of Task ID ranges that this Task depends on. All Tasks in all ranges must
     * complete successfully before the dependent Task can be scheduled.
     *
     * @param taskIdRanges the taskIdRanges value to set.
     * @return the BatchTaskDependencies object itself.
     */
    @Generated
    public BatchTaskDependencies setTaskIdRanges(List<BatchTaskIdRange> taskIdRanges) {
        this.taskIdRanges = taskIdRanges;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("taskIds", this.taskIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("taskIdRanges", this.taskIdRanges, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchTaskDependencies from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchTaskDependencies if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchTaskDependencies.
     */
    @Generated
    public static BatchTaskDependencies fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchTaskDependencies deserializedBatchTaskDependencies = new BatchTaskDependencies();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("taskIds".equals(fieldName)) {
                    List<String> taskIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBatchTaskDependencies.taskIds = taskIds;
                } else if ("taskIdRanges".equals(fieldName)) {
                    List<BatchTaskIdRange> taskIdRanges
                        = reader.readArray(reader1 -> BatchTaskIdRange.fromJson(reader1));
                    deserializedBatchTaskDependencies.taskIdRanges = taskIdRanges;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchTaskDependencies;
        });
    }
}
