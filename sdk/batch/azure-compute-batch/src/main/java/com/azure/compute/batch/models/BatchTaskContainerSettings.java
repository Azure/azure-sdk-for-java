// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The container settings for a Task.
 */
@Fluent
public final class BatchTaskContainerSettings implements JsonSerializable<BatchTaskContainerSettings> {

    /*
     * Additional options to the container create command. These additional options are supplied as arguments to the
     * "docker create" command, in addition to those controlled by the Batch Service.
     */
    @Generated
    private String containerRunOptions;

    /*
     * The Image to use to create the container in which the Task will run. This is the full Image reference, as would
     * be specified to "docker pull". If no tag is provided as part of the Image name, the tag ":latest" is used as a
     * default.
     */
    @Generated
    private final String imageName;

    /*
     * The private registry which contains the container Image. This setting can be omitted if was already provided at
     * Pool creation.
     */
    @Generated
    private ContainerRegistryReference registry;

    /*
     * The location of the container Task working directory. The default is 'taskWorkingDirectory'.
     */
    @Generated
    private ContainerWorkingDirectory workingDirectory;

    /**
     * Creates an instance of BatchTaskContainerSettings class.
     *
     * @param imageName the imageName value to set.
     */
    @Generated
    public BatchTaskContainerSettings(String imageName) {
        this.imageName = imageName;
    }

    /**
     * Get the containerRunOptions property: Additional options to the container create command. These additional
     * options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch
     * Service.
     *
     * @return the containerRunOptions value.
     */
    @Generated
    public String getContainerRunOptions() {
        return this.containerRunOptions;
    }

    /**
     * Set the containerRunOptions property: Additional options to the container create command. These additional
     * options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch
     * Service.
     *
     * @param containerRunOptions the containerRunOptions value to set.
     * @return the BatchTaskContainerSettings object itself.
     */
    @Generated
    public BatchTaskContainerSettings setContainerRunOptions(String containerRunOptions) {
        this.containerRunOptions = containerRunOptions;
        return this;
    }

    /**
     * Get the imageName property: The Image to use to create the container in which the Task will run. This is the full
     * Image reference, as would be specified to "docker pull". If no tag is provided as part of the Image name, the tag
     * ":latest" is used as a default.
     *
     * @return the imageName value.
     */
    @Generated
    public String getImageName() {
        return this.imageName;
    }

    /**
     * Get the registry property: The private registry which contains the container Image. This setting can be omitted
     * if was already provided at Pool creation.
     *
     * @return the registry value.
     */
    @Generated
    public ContainerRegistryReference getRegistry() {
        return this.registry;
    }

    /**
     * Get the workingDirectory property: The location of the container Task working directory. The default is
     * 'taskWorkingDirectory'.
     *
     * @return the workingDirectory value.
     */
    @Generated
    public ContainerWorkingDirectory getWorkingDirectory() {
        return this.workingDirectory;
    }

    /**
     * Set the workingDirectory property: The location of the container Task working directory. The default is
     * 'taskWorkingDirectory'.
     *
     * @param workingDirectory the workingDirectory value to set.
     * @return the BatchTaskContainerSettings object itself.
     */
    @Generated
    public BatchTaskContainerSettings setWorkingDirectory(ContainerWorkingDirectory workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageName", this.imageName);
        jsonWriter.writeStringField("containerRunOptions", this.containerRunOptions);
        jsonWriter.writeJsonField("registry", this.registry);
        jsonWriter.writeStringField("workingDirectory",
            this.workingDirectory == null ? null : this.workingDirectory.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchTaskContainerSettings from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchTaskContainerSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchTaskContainerSettings.
     */
    @Generated
    public static BatchTaskContainerSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String imageName = null;
            String containerRunOptions = null;
            ContainerRegistryReference registry = null;
            ContainerWorkingDirectory workingDirectory = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("imageName".equals(fieldName)) {
                    imageName = reader.getString();
                } else if ("containerRunOptions".equals(fieldName)) {
                    containerRunOptions = reader.getString();
                } else if ("registry".equals(fieldName)) {
                    registry = ContainerRegistryReference.fromJson(reader);
                } else if ("workingDirectory".equals(fieldName)) {
                    workingDirectory = ContainerWorkingDirectory.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BatchTaskContainerSettings deserializedBatchTaskContainerSettings
                = new BatchTaskContainerSettings(imageName);
            deserializedBatchTaskContainerSettings.containerRunOptions = containerRunOptions;
            deserializedBatchTaskContainerSettings.registry = registry;
            deserializedBatchTaskContainerSettings.workingDirectory = workingDirectory;
            return deserializedBatchTaskContainerSettings;
        });
    }

    /**
     * Set the registry property: The private registry which contains the container Image. This setting can be omitted
     * if was already provided at Pool creation.
     *
     * @param registry the registry value to set.
     * @return the BatchTaskContainerSettings object itself.
     */
    @Generated
    public BatchTaskContainerSettings setRegistry(ContainerRegistryReference registry) {
        this.registry = registry;
        return this;
    }
}
