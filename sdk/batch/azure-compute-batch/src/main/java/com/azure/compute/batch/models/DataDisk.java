// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings which will be used by the data disks associated to Compute Nodes in
 * the Pool. When using attached data disks, you need to mount and format the
 * disks from within a VM to use them.
 */
@Fluent
public final class DataDisk implements JsonSerializable<DataDisk> {

    /*
     * The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information
     * about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     */
    @Generated
    private CachingType caching;

    /*
     * The initial disk size in gigabytes.
     */
    @Generated
    private final int diskSizeGb;

    /*
     * The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs".
     */
    @Generated
    private StorageAccountType storageAccountType;

    /**
     * Creates an instance of DataDisk class.
     *
     * @param logicalUnitNumber the logicalUnitNumber value to set.
     * @param diskSizeGb the diskSizeGb value to set.
     */
    @Generated
    public DataDisk(int logicalUnitNumber, int diskSizeGb) {
        this.logicalUnitNumber = logicalUnitNumber;
        this.diskSizeGb = diskSizeGb;
    }

    /**
     * Get the caching property: The type of caching to be enabled for the data disks. The default value for caching is
     * readwrite. For information about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     *
     * @return the caching value.
     */
    @Generated
    public CachingType getCaching() {
        return this.caching;
    }

    /**
     * Set the caching property: The type of caching to be enabled for the data disks. The default value for caching is
     * readwrite. For information about the caching options see:
     * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     *
     * @param caching the caching value to set.
     * @return the DataDisk object itself.
     */
    @Generated
    public DataDisk setCaching(CachingType caching) {
        this.caching = caching;
        return this;
    }

    /**
     * Get the diskSizeGb property: The initial disk size in gigabytes.
     *
     * @return the diskSizeGb value.
     */
    @Generated
    public int getDiskSizeGb() {
        return this.diskSizeGb;
    }

    /**
     * Get the storageAccountType property: The storage Account type to be used for the data disk. If omitted, the
     * default is "standard_lrs".
     *
     * @return the storageAccountType value.
     */
    @Generated
    public StorageAccountType getStorageAccountType() {
        return this.storageAccountType;
    }

    /**
     * Set the storageAccountType property: The storage Account type to be used for the data disk. If omitted, the
     * default is "standard_lrs".
     *
     * @param storageAccountType the storageAccountType value to set.
     * @return the DataDisk object itself.
     */
    @Generated
    public DataDisk setStorageAccountType(StorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /*
     * The logical unit number. The logicalUnitNumber is used to uniquely identify each data disk. If attaching multiple
     * disks, each should have a distinct logicalUnitNumber. The value must be between 0 and 63, inclusive.
     */
    @Generated
    private final int logicalUnitNumber;

    /**
     * Get the logicalUnitNumber property: The logical unit number. The logicalUnitNumber is used to uniquely identify
     * each data disk. If attaching multiple disks, each should have a distinct logicalUnitNumber. The value must be
     * between 0 and 63, inclusive.
     *
     * @return the logicalUnitNumber value.
     */
    @Generated
    public int getLogicalUnitNumber() {
        return this.logicalUnitNumber;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("lun", this.logicalUnitNumber);
        jsonWriter.writeIntField("diskSizeGB", this.diskSizeGb);
        jsonWriter.writeStringField("caching", this.caching == null ? null : this.caching.toString());
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataDisk from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataDisk if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataDisk.
     */
    @Generated
    public static DataDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int logicalUnitNumber = 0;
            int diskSizeGb = 0;
            CachingType caching = null;
            StorageAccountType storageAccountType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("lun".equals(fieldName)) {
                    logicalUnitNumber = reader.getInt();
                } else if ("diskSizeGB".equals(fieldName)) {
                    diskSizeGb = reader.getInt();
                } else if ("caching".equals(fieldName)) {
                    caching = CachingType.fromString(reader.getString());
                } else if ("storageAccountType".equals(fieldName)) {
                    storageAccountType = StorageAccountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            DataDisk deserializedDataDisk = new DataDisk(logicalUnitNumber, diskSizeGb);
            deserializedDataDisk.caching = caching;
            deserializedDataDisk.storageAccountType = storageAccountType;
            return deserializedDataDisk;
        });
    }
}
