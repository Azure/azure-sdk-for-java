// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Parameters for changing the size of an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolResizeContent implements JsonSerializable<BatchPoolResizeContent> {

    /*
     * The desired number of dedicated Compute Nodes in the Pool.
     */
    @Generated
    private Integer targetDedicatedNodes;

    /*
     * The desired number of Spot/Low-priority Compute Nodes in the Pool.
     */
    @Generated
    private Integer targetLowPriorityNodes;

    /*
     * The timeout for allocation of Nodes to the Pool or removal of Compute Nodes from the Pool. The default value is
     * 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns
     * an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     */
    @Generated
    private Duration resizeTimeout;

    /*
     * Determines what to do with a Compute Node and its running task(s) if the Pool size is decreasing. The default
     * value is requeue.
     */
    @Generated
    private BatchNodeDeallocationOption nodeDeallocationOption;

    /**
     * Creates an instance of BatchPoolResizeContent class.
     */
    @Generated
    public BatchPoolResizeContent() {
    }

    /**
     * Get the targetDedicatedNodes property: The desired number of dedicated Compute Nodes in the Pool.
     *
     * @return the targetDedicatedNodes value.
     */
    @Generated
    public Integer getTargetDedicatedNodes() {
        return this.targetDedicatedNodes;
    }

    /**
     * Set the targetDedicatedNodes property: The desired number of dedicated Compute Nodes in the Pool.
     *
     * @param targetDedicatedNodes the targetDedicatedNodes value to set.
     * @return the BatchPoolResizeContent object itself.
     */
    @Generated
    public BatchPoolResizeContent setTargetDedicatedNodes(Integer targetDedicatedNodes) {
        this.targetDedicatedNodes = targetDedicatedNodes;
        return this;
    }

    /**
     * Get the targetLowPriorityNodes property: The desired number of Spot/Low-priority Compute Nodes in the Pool.
     *
     * @return the targetLowPriorityNodes value.
     */
    @Generated
    public Integer getTargetLowPriorityNodes() {
        return this.targetLowPriorityNodes;
    }

    /**
     * Set the targetLowPriorityNodes property: The desired number of Spot/Low-priority Compute Nodes in the Pool.
     *
     * @param targetLowPriorityNodes the targetLowPriorityNodes value to set.
     * @return the BatchPoolResizeContent object itself.
     */
    @Generated
    public BatchPoolResizeContent setTargetLowPriorityNodes(Integer targetLowPriorityNodes) {
        this.targetLowPriorityNodes = targetLowPriorityNodes;
        return this;
    }

    /**
     * Get the resizeTimeout property: The timeout for allocation of Nodes to the Pool or removal of Compute Nodes from
     * the Pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5
     * minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is
     * 400 (Bad Request).
     *
     * @return the resizeTimeout value.
     */
    @Generated
    public Duration getResizeTimeout() {
        return this.resizeTimeout;
    }

    /**
     * Set the resizeTimeout property: The timeout for allocation of Nodes to the Pool or removal of Compute Nodes from
     * the Pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5
     * minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is
     * 400 (Bad Request).
     *
     * @param resizeTimeout the resizeTimeout value to set.
     * @return the BatchPoolResizeContent object itself.
     */
    @Generated
    public BatchPoolResizeContent setResizeTimeout(Duration resizeTimeout) {
        this.resizeTimeout = resizeTimeout;
        return this;
    }

    /**
     * Get the nodeDeallocationOption property: Determines what to do with a Compute Node and its running task(s) if the
     * Pool size is decreasing. The default value is requeue.
     *
     * @return the nodeDeallocationOption value.
     */
    @Generated
    public BatchNodeDeallocationOption getNodeDeallocationOption() {
        return this.nodeDeallocationOption;
    }

    /**
     * Set the nodeDeallocationOption property: Determines what to do with a Compute Node and its running task(s) if the
     * Pool size is decreasing. The default value is requeue.
     *
     * @param nodeDeallocationOption the nodeDeallocationOption value to set.
     * @return the BatchPoolResizeContent object itself.
     */
    @Generated
    public BatchPoolResizeContent setNodeDeallocationOption(BatchNodeDeallocationOption nodeDeallocationOption) {
        this.nodeDeallocationOption = nodeDeallocationOption;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("targetDedicatedNodes", this.targetDedicatedNodes);
        jsonWriter.writeNumberField("targetLowPriorityNodes", this.targetLowPriorityNodes);
        jsonWriter.writeStringField("resizeTimeout", CoreUtils.durationToStringWithDays(this.resizeTimeout));
        jsonWriter.writeStringField("nodeDeallocationOption",
            this.nodeDeallocationOption == null ? null : this.nodeDeallocationOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolResizeContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolResizeContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchPoolResizeContent.
     */
    @Generated
    public static BatchPoolResizeContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchPoolResizeContent deserializedBatchPoolResizeContent = new BatchPoolResizeContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("targetDedicatedNodes".equals(fieldName)) {
                    deserializedBatchPoolResizeContent.targetDedicatedNodes = reader.getNullable(JsonReader::getInt);
                } else if ("targetLowPriorityNodes".equals(fieldName)) {
                    deserializedBatchPoolResizeContent.targetLowPriorityNodes = reader.getNullable(JsonReader::getInt);
                } else if ("resizeTimeout".equals(fieldName)) {
                    deserializedBatchPoolResizeContent.resizeTimeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("nodeDeallocationOption".equals(fieldName)) {
                    deserializedBatchPoolResizeContent.nodeDeallocationOption
                        = BatchNodeDeallocationOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchPoolResizeContent;
        });
    }
}
