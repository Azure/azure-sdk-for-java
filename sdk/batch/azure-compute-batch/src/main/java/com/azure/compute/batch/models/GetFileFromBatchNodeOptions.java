// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.DateTimeRfc1123;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Options for GetFileFromBatchNode API. */
@Fluent
public final class GetFileFromBatchNodeOptions {

    /*
     * The ID of the Pool that contains the Compute Node.
     */
    @Generated
    @JsonProperty(value = "poolId")
    private String poolId;

    /*
     * The ID of the Compute Node from which you want to delete the file.
     */
    @Generated
    @JsonProperty(value = "nodeId")
    private String nodeId;

    /*
     * The path to the file or directory that you want to delete.
     */
    @Generated
    @JsonProperty(value = "filePath")
    private String filePath;

    /*
     * The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.
     */
    @Generated
    @JsonProperty(value = "timeOut")
    private Integer timeOut;

    /*
     * A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.
     */
    @Generated
    @JsonProperty(value = "if-modified-since")
    private DateTimeRfc1123 ifModifiedSince;

    /*
     * A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.
     */
    @Generated
    @JsonProperty(value = "if-unmodified-since")
    private DateTimeRfc1123 ifUnmodifiedSince;

    /*
     * The byte range to be retrieved. The default is to retrieve the entire file. The
     * format is bytes=startRange-endRange.
     */
    @Generated
    @JsonProperty(value = "ocp-range")
    private String ocpRange;

    /**
     * Get the poolId property: The ID of the Pool that contains the Compute Node.
     *
     * @return the poolId value.
     */
    @Generated
    public String getPoolId() {
        return this.poolId;
    }

    /**
     * Get the nodeId property: The ID of the Compute Node from which you want to delete the file.
     *
     * @return the nodeId value.
     */
    @Generated
    public String getNodeId() {
        return this.nodeId;
    }

    /**
     * Get the filePath property: The path to the file or directory that you want to delete.
     *
     * @return the filePath value.
     */
    @Generated
    public String getFilePath() {
        return this.filePath;
    }

    /**
     * Get the timeOut property: The maximum number of items to return in the response. A maximum of 1000 applications
     * can be returned.
     *
     * @return the timeOut value.
     */
    @Generated
    public Integer getTimeOut() {
        return this.timeOut;
    }

    /**
     * Set the timeOut property: The maximum number of items to return in the response. A maximum of 1000 applications
     * can be returned.
     *
     * @param timeOut the timeOut value to set.
     * @return the GetFileFromBatchNodeOptions object itself.
     */
    @Generated
    public GetFileFromBatchNodeOptions setTimeOut(Integer timeOut) {
        this.timeOut = timeOut;
        return this;
    }

    /**
     * Get the ifModifiedSince property: A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has been modified since the specified
     * time.
     *
     * @return the ifModifiedSince value.
     */
    @Generated
    public OffsetDateTime getIfModifiedSince() {
        if (this.ifModifiedSince == null) {
            return null;
        }
        return this.ifModifiedSince.getDateTime();
    }

    /**
     * Set the ifModifiedSince property: A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has been modified since the specified
     * time.
     *
     * @param ifModifiedSince the ifModifiedSince value to set.
     * @return the GetFileFromBatchNodeOptions object itself.
     */
    @Generated
    public GetFileFromBatchNodeOptions setIfModifiedSince(OffsetDateTime ifModifiedSince) {
        if (ifModifiedSince == null) {
            this.ifModifiedSince = null;
        } else {
            this.ifModifiedSince = new DateTimeRfc1123(ifModifiedSince);
        }
        return this;
    }

    /**
     * Get the ifUnmodifiedSince property: A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has not been modified since the
     * specified time.
     *
     * @return the ifUnmodifiedSince value.
     */
    @Generated
    public OffsetDateTime getIfUnmodifiedSince() {
        if (this.ifUnmodifiedSince == null) {
            return null;
        }
        return this.ifUnmodifiedSince.getDateTime();
    }

    /**
     * Set the ifUnmodifiedSince property: A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has not been modified since the
     * specified time.
     *
     * @param ifUnmodifiedSince the ifUnmodifiedSince value to set.
     * @return the GetFileFromBatchNodeOptions object itself.
     */
    @Generated
    public GetFileFromBatchNodeOptions setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince) {
        if (ifUnmodifiedSince == null) {
            this.ifUnmodifiedSince = null;
        } else {
            this.ifUnmodifiedSince = new DateTimeRfc1123(ifUnmodifiedSince);
        }
        return this;
    }

    /**
     * Get the ocpRange property: The byte range to be retrieved. The default is to retrieve the entire file. The format
     * is bytes=startRange-endRange.
     *
     * @return the ocpRange value.
     */
    @Generated
    public String getOcpRange() {
        return this.ocpRange;
    }

    /**
     * Set the ocpRange property: The byte range to be retrieved. The default is to retrieve the entire file. The format
     * is bytes=startRange-endRange.
     *
     * @param ocpRange the ocpRange value to set.
     * @return the GetFileFromBatchNodeOptions object itself.
     */
    @Generated
    public GetFileFromBatchNodeOptions setOcpRange(String ocpRange) {
        this.ocpRange = ocpRange;
        return this;
    }

    /**
     * Creates an instance of GetFileFromBatchNodeOptions class.
     *
     * @param poolId the poolId value to set.
     * @param nodeId the nodeId value to set.
     * @param filePath the filePath value to set.
     */
    @Generated
    @JsonCreator
    public GetFileFromBatchNodeOptions(
            @JsonProperty(value = "poolId") String poolId,
            @JsonProperty(value = "nodeId") String nodeId,
            @JsonProperty(value = "filePath") String filePath) {
        this.poolId = poolId;
        this.nodeId = nodeId;
        this.filePath = filePath;
    }
}
