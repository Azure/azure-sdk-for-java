// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties used to create a user used to execute Tasks on an Azure Batch
 * Compute Node.
 */
@Fluent
public final class UserAccount implements JsonSerializable<UserAccount> {

    /*
     * The name of the user Account. Names can contain any Unicode characters up to a maximum length of 20.
     */
    @Generated
    private final String name;

    /*
     * The password for the user Account.
     */
    @Generated
    private final String password;

    /*
     * The elevation level of the user Account. The default value is nonAdmin.
     */
    @Generated
    private ElevationLevel elevationLevel;

    /*
     * The Linux-specific user configuration for the user Account. This property is ignored if specified on a Windows
     * Pool. If not specified, the user is created with the default options.
     */
    @Generated
    private LinuxUserConfiguration linuxUserConfiguration;

    /*
     * The Windows-specific user configuration for the user Account. This property can only be specified if the user is
     * on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
     */
    @Generated
    private WindowsUserConfiguration windowsUserConfiguration;

    /**
     * Creates an instance of UserAccount class.
     *
     * @param name the name value to set.
     * @param password the password value to set.
     */
    @Generated
    public UserAccount(String name, String password) {
        this.name = name;
        this.password = password;
    }

    /**
     * Get the name property: The name of the user Account. Names can contain any Unicode characters up to a maximum
     * length of 20.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the password property: The password for the user Account.
     *
     * @return the password value.
     */
    @Generated
    public String getPassword() {
        return this.password;
    }

    /**
     * Get the elevationLevel property: The elevation level of the user Account. The default value is nonAdmin.
     *
     * @return the elevationLevel value.
     */
    @Generated
    public ElevationLevel getElevationLevel() {
        return this.elevationLevel;
    }

    /**
     * Set the elevationLevel property: The elevation level of the user Account. The default value is nonAdmin.
     *
     * @param elevationLevel the elevationLevel value to set.
     * @return the UserAccount object itself.
     */
    @Generated
    public UserAccount setElevationLevel(ElevationLevel elevationLevel) {
        this.elevationLevel = elevationLevel;
        return this;
    }

    /**
     * Get the linuxUserConfiguration property: The Linux-specific user configuration for the user Account. This
     * property is ignored if specified on a Windows Pool. If not specified, the user is created with the default
     * options.
     *
     * @return the linuxUserConfiguration value.
     */
    @Generated
    public LinuxUserConfiguration getLinuxUserConfiguration() {
        return this.linuxUserConfiguration;
    }

    /**
     * Set the linuxUserConfiguration property: The Linux-specific user configuration for the user Account. This
     * property is ignored if specified on a Windows Pool. If not specified, the user is created with the default
     * options.
     *
     * @param linuxUserConfiguration the linuxUserConfiguration value to set.
     * @return the UserAccount object itself.
     */
    @Generated
    public UserAccount setLinuxUserConfiguration(LinuxUserConfiguration linuxUserConfiguration) {
        this.linuxUserConfiguration = linuxUserConfiguration;
        return this;
    }

    /**
     * Get the windowsUserConfiguration property: The Windows-specific user configuration for the user Account. This
     * property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user
     * is created with the default options.
     *
     * @return the windowsUserConfiguration value.
     */
    @Generated
    public WindowsUserConfiguration getWindowsUserConfiguration() {
        return this.windowsUserConfiguration;
    }

    /**
     * Set the windowsUserConfiguration property: The Windows-specific user configuration for the user Account. This
     * property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user
     * is created with the default options.
     *
     * @param windowsUserConfiguration the windowsUserConfiguration value to set.
     * @return the UserAccount object itself.
     */
    @Generated
    public UserAccount setWindowsUserConfiguration(WindowsUserConfiguration windowsUserConfiguration) {
        this.windowsUserConfiguration = windowsUserConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("elevationLevel",
            this.elevationLevel == null ? null : this.elevationLevel.toString());
        jsonWriter.writeJsonField("linuxUserConfiguration", this.linuxUserConfiguration);
        jsonWriter.writeJsonField("windowsUserConfiguration", this.windowsUserConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserAccount from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserAccount if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserAccount.
     */
    @Generated
    public static UserAccount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String password = null;
            ElevationLevel elevationLevel = null;
            LinuxUserConfiguration linuxUserConfiguration = null;
            WindowsUserConfiguration windowsUserConfiguration = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("password".equals(fieldName)) {
                    password = reader.getString();
                } else if ("elevationLevel".equals(fieldName)) {
                    elevationLevel = ElevationLevel.fromString(reader.getString());
                } else if ("linuxUserConfiguration".equals(fieldName)) {
                    linuxUserConfiguration = LinuxUserConfiguration.fromJson(reader);
                } else if ("windowsUserConfiguration".equals(fieldName)) {
                    windowsUserConfiguration = WindowsUserConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            UserAccount deserializedUserAccount = new UserAccount(name, password);
            deserializedUserAccount.elevationLevel = elevationLevel;
            deserializedUserAccount.linuxUserConfiguration = linuxUserConfiguration;
            deserializedUserAccount.windowsUserConfiguration = windowsUserConfiguration;
            return deserializedUserAccount;
        });
    }
}
