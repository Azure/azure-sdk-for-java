// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Parameters for updating an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolUpdateContent implements JsonSerializable<BatchPoolUpdateContent> {

    /*
     * A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool
     * or when the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If
     * omitted, any existing StartTask is left unchanged.
     */
    @Generated
    private BatchStartTask startTask;

    /*
     * A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new
     * Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or
     * reimaged. If this element is present, it replaces any existing Package references. If you specify an empty
     * collection, then all Package references are removed from the Pool. If omitted, any existing Package references
     * are left unchanged.
     */
    @Generated
    private List<BatchApplicationPackageReference> applicationPackageReferences;

    /*
     * A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any
     * existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the
     * Pool. If omitted, any existing metadata is left unchanged.
     */
    @Generated
    private List<MetadataItem> metadata;

    /*
     * The desired node communication mode for the pool. If this element is present, it replaces the existing
     * targetNodeCommunicationMode configured on the Pool. If omitted, any existing metadata is left unchanged.
     */
    @Generated
    private BatchNodeCommunicationMode targetNodeCommunicationMode;

    /**
     * Creates an instance of BatchPoolUpdateContent class.
     */
    @Generated
    public BatchPoolUpdateContent() {
    }

    /**
     * Get the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
     *
     * @return the startTask value.
     */
    @Generated
    public BatchStartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
     *
     * @param startTask the startTask value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setStartTask(BatchStartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the applicationPackageReferences property: A list of Packages to be installed on each Compute Node in the
     * Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that
     * are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing
     * Package references. If you specify an empty collection, then all Package references are removed from the Pool. If
     * omitted, any existing Package references are left unchanged.
     *
     * @return the applicationPackageReferences value.
     */
    @Generated
    public List<BatchApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Set the applicationPackageReferences property: A list of Packages to be installed on each Compute Node in the
     * Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that
     * are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing
     * Package references. If you specify an empty collection, then all Package references are removed from the Pool. If
     * omitted, any existing Package references are left unchanged.
     *
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent
        setApplicationPackageReferences(List<BatchApplicationPackageReference> applicationPackageReferences) {
        this.applicationPackageReferences = applicationPackageReferences;
        return this;
    }

    /**
     * Get the metadata property: A list of name-value pairs associated with the Pool as metadata. If this element is
     * present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any
     * metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A list of name-value pairs associated with the Pool as metadata. If this element is
     * present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any
     * metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
     *
     * @param metadata the metadata value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the targetNodeCommunicationMode property: The desired node communication mode for the pool. If this element
     * is present, it replaces the existing targetNodeCommunicationMode configured on the Pool. If omitted, any existing
     * metadata is left unchanged.
     *
     * @return the targetNodeCommunicationMode value.
     */
    @Generated
    public BatchNodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: The desired node communication mode for the pool. If this element
     * is present, it replaces the existing targetNodeCommunicationMode configured on the Pool. If omitted, any existing
     * metadata is left unchanged.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent
        setTargetNodeCommunicationMode(BatchNodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startTask", this.startTask);
        jsonWriter.writeArrayField("applicationPackageReferences", this.applicationPackageReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("metadata", this.metadata, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("targetNodeCommunicationMode",
            this.targetNodeCommunicationMode == null ? null : this.targetNodeCommunicationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolUpdateContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolUpdateContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchPoolUpdateContent.
     */
    @Generated
    public static BatchPoolUpdateContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchPoolUpdateContent deserializedBatchPoolUpdateContent = new BatchPoolUpdateContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startTask".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.startTask = BatchStartTask.fromJson(reader);
                } else if ("applicationPackageReferences".equals(fieldName)) {
                    List<BatchApplicationPackageReference> applicationPackageReferences
                        = reader.readArray(reader1 -> BatchApplicationPackageReference.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.applicationPackageReferences = applicationPackageReferences;
                } else if ("metadata".equals(fieldName)) {
                    List<MetadataItem> metadata = reader.readArray(reader1 -> MetadataItem.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.metadata = metadata;
                } else if ("targetNodeCommunicationMode".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.targetNodeCommunicationMode
                        = BatchNodeCommunicationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchPoolUpdateContent;
        });
    }
}
