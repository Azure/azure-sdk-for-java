// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Parameters for updating an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolUpdateContent implements JsonSerializable<BatchPoolUpdateContent> {

    /*
     * A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool
     * or when the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If
     * omitted, any existing StartTask is left unchanged.
     */
    @Generated
    private BatchStartTask startTask;

    /*
     * A list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new
     * Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or
     * reimaged. If this element is present, it replaces any existing Package references. If you specify an empty
     * collection, then all Package references are removed from the Pool. If omitted, any existing Package references
     * are left unchanged.
     */
    @Generated
    private List<BatchApplicationPackageReference> applicationPackageReferences;

    /*
     * A list of name-value pairs associated with the Pool as metadata. If this element is present, it replaces any
     * existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the
     * Pool. If omitted, any existing metadata is left unchanged.
     */
    @Generated
    private List<MetadataItem> metadata;

    /*
     * The desired node communication mode for the pool. If this element is present, it replaces the existing
     * targetNodeCommunicationMode configured on the Pool. If omitted, any existing metadata is left unchanged.
     */
    @Generated
    private BatchNodeCommunicationMode targetNodeCommunicationMode;

    /**
     * Creates an instance of BatchPoolUpdateContent class.
     */
    @Generated
    public BatchPoolUpdateContent() {
    }

    /**
     * Get the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
     *
     * @return the startTask value.
     */
    @Generated
    public BatchStartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
     *
     * @param startTask the startTask value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setStartTask(BatchStartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the applicationPackageReferences property: A list of Packages to be installed on each Compute Node in the
     * Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that
     * are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing
     * Package references. If you specify an empty collection, then all Package references are removed from the Pool. If
     * omitted, any existing Package references are left unchanged.
     *
     * @return the applicationPackageReferences value.
     */
    @Generated
    public List<BatchApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Set the applicationPackageReferences property: A list of Packages to be installed on each Compute Node in the
     * Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that
     * are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing
     * Package references. If you specify an empty collection, then all Package references are removed from the Pool. If
     * omitted, any existing Package references are left unchanged.
     *
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent
        setApplicationPackageReferences(List<BatchApplicationPackageReference> applicationPackageReferences) {
        this.applicationPackageReferences = applicationPackageReferences;
        return this;
    }

    /**
     * Get the metadata property: A list of name-value pairs associated with the Pool as metadata. If this element is
     * present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any
     * metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A list of name-value pairs associated with the Pool as metadata. If this element is
     * present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any
     * metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
     *
     * @param metadata the metadata value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the targetNodeCommunicationMode property: The desired node communication mode for the pool. If this element
     * is present, it replaces the existing targetNodeCommunicationMode configured on the Pool. If omitted, any existing
     * metadata is left unchanged.
     *
     * @return the targetNodeCommunicationMode value.
     */
    @Generated
    public BatchNodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: The desired node communication mode for the pool. If this element
     * is present, it replaces the existing targetNodeCommunicationMode configured on the Pool. If omitted, any existing
     * metadata is left unchanged.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent
        setTargetNodeCommunicationMode(BatchNodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeBooleanField("enableInterNodeCommunication", this.enableInterNodeCommunication);
        jsonWriter.writeJsonField("startTask", this.startTask);
        jsonWriter.writeArrayField("applicationPackageReferences", this.applicationPackageReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("metadata", this.metadata, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("virtualMachineConfiguration", this.virtualMachineConfiguration);
        jsonWriter.writeStringField("targetNodeCommunicationMode",
            this.targetNodeCommunicationMode == null ? null : this.targetNodeCommunicationMode.toString());
        jsonWriter.writeNumberField("taskSlotsPerNode", this.taskSlotsPerNode);
        jsonWriter.writeJsonField("taskSchedulingPolicy", this.taskSchedulingPolicy);
        jsonWriter.writeJsonField("networkConfiguration", this.networkConfiguration);
        jsonWriter.writeMapField("resourceTags", this.resourceTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("userAccounts", this.userAccounts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mountConfiguration", this.mountConfiguration,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("upgradePolicy", this.upgradePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolUpdateContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolUpdateContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchPoolUpdateContent.
     */
    @Generated
    public static BatchPoolUpdateContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchPoolUpdateContent deserializedBatchPoolUpdateContent = new BatchPoolUpdateContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("displayName".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.displayName = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.vmSize = reader.getString();
                } else if ("enableInterNodeCommunication".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.enableInterNodeCommunication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("startTask".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.startTask = BatchStartTask.fromJson(reader);
                } else if ("applicationPackageReferences".equals(fieldName)) {
                    List<BatchApplicationPackageReference> applicationPackageReferences
                        = reader.readArray(reader1 -> BatchApplicationPackageReference.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.applicationPackageReferences = applicationPackageReferences;
                } else if ("metadata".equals(fieldName)) {
                    List<MetadataItem> metadata = reader.readArray(reader1 -> MetadataItem.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.metadata = metadata;
                } else if ("virtualMachineConfiguration".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.virtualMachineConfiguration
                        = VirtualMachineConfiguration.fromJson(reader);
                } else if ("targetNodeCommunicationMode".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.targetNodeCommunicationMode
                        = BatchNodeCommunicationMode.fromString(reader.getString());
                } else if ("taskSlotsPerNode".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.taskSlotsPerNode = reader.getNullable(JsonReader::getInt);
                } else if ("taskSchedulingPolicy".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.taskSchedulingPolicy
                        = BatchTaskSchedulingPolicy.fromJson(reader);
                } else if ("networkConfiguration".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.networkConfiguration = NetworkConfiguration.fromJson(reader);
                } else if ("resourceTags".equals(fieldName)) {
                    Map<String, String> resourceTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedBatchPoolUpdateContent.resourceTags = resourceTags;
                } else if ("userAccounts".equals(fieldName)) {
                    List<UserAccount> userAccounts = reader.readArray(reader1 -> UserAccount.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.userAccounts = userAccounts;
                } else if ("mountConfiguration".equals(fieldName)) {
                    List<MountConfiguration> mountConfiguration
                        = reader.readArray(reader1 -> MountConfiguration.fromJson(reader1));
                    deserializedBatchPoolUpdateContent.mountConfiguration = mountConfiguration;
                } else if ("upgradePolicy".equals(fieldName)) {
                    deserializedBatchPoolUpdateContent.upgradePolicy = UpgradePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchPoolUpdateContent;
        });
    }

    /*
     * The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024. This field can be updated only when the pool is empty.
     */
    @Generated
    private String displayName;

    /*
     * The size of virtual machines in the Pool. For information about available sizes of virtual machines in Pools, see
     * Choose a VM size for Compute Nodes in an Azure Batch Pool
     * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).<br /><br />This field can be updated only when the
     * pool is empty.
     */
    @Generated
    private String vmSize;

    /*
     * Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the
     * maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the
     * Pool not reaching its desired size. The default value is false.<br /><br />This field can be updated only when
     * the pool is empty.
     */
    @Generated
    private Boolean enableInterNodeCommunication;

    /*
     * The virtual machine configuration for the Pool. This property must be specified.<br /><br />This field can be
     * updated only when the pool is empty.
     */
    @Generated
    private VirtualMachineConfiguration virtualMachineConfiguration;

    /*
     * The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The
     * default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or
     * 256.<br /><br />This field can be updated only when the pool is empty.
     */
    @Generated
    private Integer taskSlotsPerNode;

    /*
     * How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.<br /><br
     * />This field can be updated only when the pool is empty.
     */
    @Generated
    private BatchTaskSchedulingPolicy taskSchedulingPolicy;

    /*
     * The network configuration for the Pool. This field can be updated only when the pool is empty.
     */
    @Generated
    private NetworkConfiguration networkConfiguration;

    /*
     * The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch
     * Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This
     * property can only be specified when the Batch account was created with the poolAllocationMode property set to
     * 'UserSubscription'.<br /><br />This field can be updated only when the pool is empty.
     */
    @Generated
    private Map<String, String> resourceTags;

    /*
     * The list of user Accounts to be created on each Compute Node in the Pool. This field can be updated only when the
     * pool is empty.
     */
    @Generated
    private List<UserAccount> userAccounts;

    /*
     * Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure
     * fileshare, NFS, CIFS or Blobfuse based file system.<br /><br />This field can be updated only when the pool is
     * empty.
     */
    @Generated
    private List<MountConfiguration> mountConfiguration;

    /*
     * The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.<br /><br />This
     * field can be updated only when the pool is empty.
     */
    @Generated
    private UpgradePolicy upgradePolicy;

    /**
     * Get the displayName property: The display name for the Pool. The display name need not be unique and can contain
     * any Unicode characters up to a maximum length of 1024. This field can be updated only when the pool is empty.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the Pool. The display name need not be unique and can contain
     * any Unicode characters up to a maximum length of 1024. This field can be updated only when the pool is empty.
     *
     * @param displayName the displayName value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the vmSize property: The size of virtual machines in the Pool. For information about available sizes of
     * virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool
     * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).&lt;br /&gt;&lt;br /&gt;This field can be updated
     * only when the pool is empty.
     *
     * @return the vmSize value.
     */
    @Generated
    public String getVmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The size of virtual machines in the Pool. For information about available sizes of
     * virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool
     * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).&lt;br /&gt;&lt;br /&gt;This field can be updated
     * only when the pool is empty.
     *
     * @param vmSize the vmSize value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the enableInterNodeCommunication property: Whether the Pool permits direct communication between Compute
     * Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on
     * the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is
     * false.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @return the enableInterNodeCommunication value.
     */
    @Generated
    public Boolean isEnableInterNodeCommunication() {
        return this.enableInterNodeCommunication;
    }

    /**
     * Set the enableInterNodeCommunication property: Whether the Pool permits direct communication between Compute
     * Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on
     * the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is
     * false.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @param enableInterNodeCommunication the enableInterNodeCommunication value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
        this.enableInterNodeCommunication = enableInterNodeCommunication;
        return this;
    }

    /**
     * Get the virtualMachineConfiguration property: The virtual machine configuration for the Pool. This property must
     * be specified.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @return the virtualMachineConfiguration value.
     */
    @Generated
    public VirtualMachineConfiguration getVirtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    /**
     * Set the virtualMachineConfiguration property: The virtual machine configuration for the Pool. This property must
     * be specified.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @param virtualMachineConfiguration the virtualMachineConfiguration value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent
        setVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
        this.virtualMachineConfiguration = virtualMachineConfiguration;
        return this;
    }

    /**
     * Get the taskSlotsPerNode property: The number of task slots that can be used to run concurrent tasks on a single
     * compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores
     * of the vmSize of the pool or 256.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @return the taskSlotsPerNode value.
     */
    @Generated
    public Integer getTaskSlotsPerNode() {
        return this.taskSlotsPerNode;
    }

    /**
     * Set the taskSlotsPerNode property: The number of task slots that can be used to run concurrent tasks on a single
     * compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores
     * of the vmSize of the pool or 256.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @param taskSlotsPerNode the taskSlotsPerNode value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setTaskSlotsPerNode(Integer taskSlotsPerNode) {
        this.taskSlotsPerNode = taskSlotsPerNode;
        return this;
    }

    /**
     * Get the taskSchedulingPolicy property: How Tasks are distributed across Compute Nodes in a Pool. If not
     * specified, the default is spread.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @return the taskSchedulingPolicy value.
     */
    @Generated
    public BatchTaskSchedulingPolicy getTaskSchedulingPolicy() {
        return this.taskSchedulingPolicy;
    }

    /**
     * Set the taskSchedulingPolicy property: How Tasks are distributed across Compute Nodes in a Pool. If not
     * specified, the default is spread.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @param taskSchedulingPolicy the taskSchedulingPolicy value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setTaskSchedulingPolicy(BatchTaskSchedulingPolicy taskSchedulingPolicy) {
        this.taskSchedulingPolicy = taskSchedulingPolicy;
        return this;
    }

    /**
     * Get the networkConfiguration property: The network configuration for the Pool. This field can be updated only
     * when the pool is empty.
     *
     * @return the networkConfiguration value.
     */
    @Generated
    public NetworkConfiguration getNetworkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Set the networkConfiguration property: The network configuration for the Pool. This field can be updated only
     * when the pool is empty.
     *
     * @param networkConfiguration the networkConfiguration value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }

    /**
     * Get the resourceTags property: The user-specified tags associated with the pool. The user-defined tags to be
     * associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources
     * associated with the pool. This property can only be specified when the Batch account was created with the
     * poolAllocationMode property set to 'UserSubscription'.&lt;br /&gt;&lt;br /&gt;This field can be updated only when
     * the pool is empty.
     *
     * @return the resourceTags value.
     */
    @Generated
    public Map<String, String> getResourceTags() {
        return this.resourceTags;
    }

    /**
     * Set the resourceTags property: The user-specified tags associated with the pool. The user-defined tags to be
     * associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources
     * associated with the pool. This property can only be specified when the Batch account was created with the
     * poolAllocationMode property set to 'UserSubscription'.&lt;br /&gt;&lt;br /&gt;This field can be updated only when
     * the pool is empty.
     *
     * @param resourceTags the resourceTags value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setResourceTags(Map<String, String> resourceTags) {
        this.resourceTags = resourceTags;
        return this;
    }

    /**
     * Get the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool. This
     * field can be updated only when the pool is empty.
     *
     * @return the userAccounts value.
     */
    @Generated
    public List<UserAccount> getUserAccounts() {
        return this.userAccounts;
    }

    /**
     * Set the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool. This
     * field can be updated only when the pool is empty.
     *
     * @param userAccounts the userAccounts value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setUserAccounts(List<UserAccount> userAccounts) {
        this.userAccounts = userAccounts;
        return this;
    }

    /**
     * Get the mountConfiguration property: Mount storage using specified file system for the entire lifetime of the
     * pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.&lt;br /&gt;&lt;br
     * /&gt;This field can be updated only when the pool is empty.
     *
     * @return the mountConfiguration value.
     */
    @Generated
    public List<MountConfiguration> getMountConfiguration() {
        return this.mountConfiguration;
    }

    /**
     * Set the mountConfiguration property: Mount storage using specified file system for the entire lifetime of the
     * pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.&lt;br /&gt;&lt;br
     * /&gt;This field can be updated only when the pool is empty.
     *
     * @param mountConfiguration the mountConfiguration value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setMountConfiguration(List<MountConfiguration> mountConfiguration) {
        this.mountConfiguration = mountConfiguration;
        return this;
    }

    /**
     * Get the upgradePolicy property: The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual,
     * or rolling.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @return the upgradePolicy value.
     */
    @Generated
    public UpgradePolicy getUpgradePolicy() {
        return this.upgradePolicy;
    }

    /**
     * Set the upgradePolicy property: The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual,
     * or rolling.&lt;br /&gt;&lt;br /&gt;This field can be updated only when the pool is empty.
     *
     * @param upgradePolicy the upgradePolicy value to set.
     * @return the BatchPoolUpdateContent object itself.
     */
    @Generated
    public BatchPoolUpdateContent setUpgradePolicy(UpgradePolicy upgradePolicy) {
        this.upgradePolicy = upgradePolicy;
        return this;
    }
}
