// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes an upgrade policy - automatic, manual, or rolling.
 */
@Fluent
public final class UpgradePolicy implements JsonSerializable<UpgradePolicy> {

    /*
     * Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br
     * /> **Manual** - You control the application of updates to virtual machines in the scale set. You do this by using
     * the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically
     * updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause
     * time in between.
     */
    @Generated
    private final UpgradeMode mode;

    /*
     * The configuration parameters used while performing a rolling upgrade. This property is only supported on Pools
     * with the virtualMachineConfiguration property.
     */
    @Generated
    private RollingUpgradePolicy rollingUpgradePolicy;

    /**
     * Creates an instance of UpgradePolicy class.
     *
     * @param mode the mode value to set.
     */
    @Generated
    public UpgradePolicy(UpgradeMode mode) {
        this.mode = mode;
    }

    /**
     * Get the mode property: Specifies the mode of an upgrade to virtual machines in the scale set.&lt;br /&gt;&lt;br
     * /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You control the application of updates to virtual
     * machines in the scale set. You do this by using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** -
     * All virtual machines in the scale set are automatically updated at the same time.&lt;br /&gt;&lt;br /&gt;
     * **Rolling** - Scale set performs updates in batches with an optional pause time in between.
     *
     * @return the mode value.
     */
    @Generated
    public UpgradeMode getMode() {
        return this.mode;
    }

    /**
     * Get the rollingUpgradePolicy property: The configuration parameters used while performing a rolling upgrade. This
     * property is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @return the rollingUpgradePolicy value.
     */
    @Generated
    public RollingUpgradePolicy getRollingUpgradePolicy() {
        return this.rollingUpgradePolicy;
    }

    /**
     * Set the rollingUpgradePolicy property: The configuration parameters used while performing a rolling upgrade. This
     * property is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @param rollingUpgradePolicy the rollingUpgradePolicy value to set.
     * @return the UpgradePolicy object itself.
     */
    @Generated
    public UpgradePolicy setRollingUpgradePolicy(RollingUpgradePolicy rollingUpgradePolicy) {
        this.rollingUpgradePolicy = rollingUpgradePolicy;
        return this;
    }

    /*
     * Configuration parameters used for performing automatic OS Upgrade. The configuration parameters used for
     * performing automatic OS upgrade.
     */
    @Generated
    private AutomaticOsUpgradePolicy automaticOsUpgradePolicy;

    /**
     * Get the automaticOsUpgradePolicy property: Configuration parameters used for performing automatic OS Upgrade. The
     * configuration parameters used for performing automatic OS upgrade.
     *
     * @return the automaticOsUpgradePolicy value.
     */
    @Generated
    public AutomaticOsUpgradePolicy getAutomaticOsUpgradePolicy() {
        return this.automaticOsUpgradePolicy;
    }

    /**
     * Set the automaticOsUpgradePolicy property: Configuration parameters used for performing automatic OS Upgrade. The
     * configuration parameters used for performing automatic OS upgrade.
     *
     * @param automaticOsUpgradePolicy the automaticOsUpgradePolicy value to set.
     * @return the UpgradePolicy object itself.
     */
    @Generated
    public UpgradePolicy setAutomaticOsUpgradePolicy(AutomaticOsUpgradePolicy automaticOsUpgradePolicy) {
        this.automaticOsUpgradePolicy = automaticOsUpgradePolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeJsonField("automaticOSUpgradePolicy", this.automaticOsUpgradePolicy);
        jsonWriter.writeJsonField("rollingUpgradePolicy", this.rollingUpgradePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradePolicy from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradePolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpgradePolicy.
     */
    @Generated
    public static UpgradePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradeMode mode = null;
            AutomaticOsUpgradePolicy automaticOsUpgradePolicy = null;
            RollingUpgradePolicy rollingUpgradePolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("mode".equals(fieldName)) {
                    mode = UpgradeMode.fromString(reader.getString());
                } else if ("automaticOSUpgradePolicy".equals(fieldName)) {
                    automaticOsUpgradePolicy = AutomaticOsUpgradePolicy.fromJson(reader);
                } else if ("rollingUpgradePolicy".equals(fieldName)) {
                    rollingUpgradePolicy = RollingUpgradePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            UpgradePolicy deserializedUpgradePolicy = new UpgradePolicy(mode);
            deserializedUpgradePolicy.automaticOsUpgradePolicy = automaticOsUpgradePolicy;
            deserializedUpgradePolicy.rollingUpgradePolicy = rollingUpgradePolicy;
            return deserializedUpgradePolicy;
        });
    }
}
