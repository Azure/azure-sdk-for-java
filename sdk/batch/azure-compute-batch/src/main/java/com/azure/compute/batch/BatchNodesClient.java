// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.compute.batch;

import com.azure.compute.batch.implementation.BatchNodesImpl;
import com.azure.compute.batch.models.BatchNode;
import com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsResult;
import com.azure.compute.batch.models.BatchNodeUser;
import com.azure.compute.batch.models.NodeDisableSchedulingParameters;
import com.azure.compute.batch.models.NodeFile;
import com.azure.compute.batch.models.NodeRebootParameters;
import com.azure.compute.batch.models.NodeReimageParameters;
import com.azure.compute.batch.models.NodeUpdateUserParameters;
import com.azure.compute.batch.models.NodeVMExtension;
import com.azure.compute.batch.models.UploadBatchServiceLogsConfiguration;
import com.azure.compute.batch.models.UploadBatchServiceLogsResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import java.time.OffsetDateTime;

/** Initializes a new instance of the synchronous BatchServiceClient type. */
@ServiceClient(builder = BatchServiceClientBuilder.class)
public final class BatchNodesClient {

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     isAdmin: Boolean (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     password: String (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param parameters The user Account to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addUserWithResponse(
            String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.addUserWithResponse(poolId, nodeId, parameters, requestOptions);
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteUserWithResponse(
            String poolId, String nodeId, String userName, RequestOptions requestOptions) {
        return this.serviceClient.deleteUserWithResponse(poolId, nodeId, userName, requestOptions);
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     password: String (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The parameters for the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateUserWithResponse(
            String poolId, String nodeId, String userName, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.updateUserWithResponse(poolId, nodeId, userName, parameters, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>String</td><td>No</td><td>An OData $select clause.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeRebootOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rebootWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.rebootWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeReimageOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reimageWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.reimageWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeDisableSchedulingOption: String(requeue/terminate/taskcompletion) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.disableSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableSchedulingWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.enableSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     remoteLoginIPAddress: String (Required)
     *     remoteLoginPort: int (Required)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the remote login settings for a Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRemoteLoginSettingsWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRemoteDesktopWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getRemoteDesktopWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerUrl: String (Required)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Optional)
     *     identityReference (Optional): {
     *         resourceId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     virtualDirectoryName: String (Required)
     *     numberOfFilesUploaded: int (Required)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param parameters The Azure Batch service log files upload configuration.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of uploading Batch service log files from a specific Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> uploadBatchServiceLogsWithResponse(
            String poolId, String nodeId, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.uploadBatchServiceLogsWithResponse(poolId, nodeId, parameters, requestOptions);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.</td></tr>
     *     <tr><td>$select</td><td>String</td><td>No</td><td>An OData $select clause.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.list(poolId, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>String</td><td>No</td><td>An OData $select clause.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Optional)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Optional)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: String (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Compute Node Extension along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExtensionsWithResponse(
            String poolId, String nodeId, String extensionName, RequestOptions requestOptions) {
        return this.serviceClient.getExtensionsWithResponse(poolId, nodeId, extensionName, requestOptions);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>String</td><td>No</td><td>An OData $select clause.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Optional)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Optional)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: String (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listExtensions(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listExtensions(poolId, nodeId, requestOptions);
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param parameters The user Account to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addUser(String poolId, String nodeId, BatchNodeUser parameters) {
        // Generated convenience method for addUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        addUserWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUser(String poolId, String nodeId, String userName) {
        // Generated convenience method for deleteUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The parameters for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameters parameters) {
        // Generated convenience method for updateUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode get(String poolId, String nodeId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reboot(String poolId, String nodeId) {
        // Generated convenience method for rebootWithResponse
        RequestOptions requestOptions = new RequestOptions();
        rebootWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimage(String poolId, String nodeId) {
        // Generated convenience method for reimageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reimageWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableScheduling(String poolId, String nodeId) {
        // Generated convenience method for disableSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableScheduling(String poolId, String nodeId) {
        // Generated convenience method for enableSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote login settings for a Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettingsResult getRemoteLoginSettings(String poolId, String nodeId) {
        // Generated convenience method for getRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions)
                .getValue()
                .toObject(BatchNodeRemoteLoginSettingsResult.class);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getRemoteDesktop(String poolId, String nodeId) {
        // Generated convenience method for getRemoteDesktopWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getRemoteDesktopWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param parameters The Azure Batch service log files upload configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadBatchServiceLogs(
            String poolId, String nodeId, UploadBatchServiceLogsConfiguration parameters) {
        // Generated convenience method for uploadBatchServiceLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadBatchServiceLogsWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions)
                .getValue()
                .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> list(String poolId) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .list(poolId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeVMExtension getExtensions(String poolId, String nodeId, String extensionName) {
        // Generated convenience method for getExtensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExtensionsWithResponse(poolId, nodeId, extensionName, requestOptions)
                .getValue()
                .toObject(NodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeVMExtension> listExtensions(String poolId, String nodeId) {
        // Generated convenience method for listExtensions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listExtensions(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeVMExtension.class));
    }

    @Generated private final BatchNodesImpl serviceClient;

    /**
     * Initializes an instance of BatchNodesClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    BatchNodesClient(BatchNodesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param parameters The user Account to be created.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addUser(
            String poolId, String nodeId, BatchNodeUser parameters, Integer timeOut, OffsetDateTime ocpDate) {
        // Generated convenience method for addUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        addUserWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteUser(String poolId, String nodeId, String userName, Integer timeOut, OffsetDateTime ocpDate) {
        // Generated convenience method for deleteUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        deleteUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The parameters for the request.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateUser(
            String poolId,
            String nodeId,
            String userName,
            NodeUpdateUserParameters parameters,
            Integer timeOut,
            OffsetDateTime ocpDate) {
        // Generated convenience method for updateUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        updateUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode get(String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate, String select) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return getWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param parameters The parameters for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reboot(
            String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate, NodeRebootParameters parameters) {
        // Generated convenience method for rebootWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        rebootWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param parameters The parameters for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimage(
            String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate, NodeReimageParameters parameters) {
        // Generated convenience method for reimageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        reimageWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param parameters The parameters for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableScheduling(
            String poolId,
            String nodeId,
            Integer timeOut,
            OffsetDateTime ocpDate,
            NodeDisableSchedulingParameters parameters) {
        // Generated convenience method for disableSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        disableSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableScheduling(String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate) {
        // Generated convenience method for enableSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        enableSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote login settings for a Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettingsResult getRemoteLoginSettings(
            String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate) {
        // Generated convenience method for getRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        return getRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions)
                .getValue()
                .toObject(BatchNodeRemoteLoginSettingsResult.class);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getRemoteDesktop(String poolId, String nodeId, Integer timeOut, OffsetDateTime ocpDate) {
        // Generated convenience method for getRemoteDesktopWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        return getRemoteDesktopWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param parameters The Azure Batch service log files upload configuration.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadBatchServiceLogs(
            String poolId,
            String nodeId,
            UploadBatchServiceLogsConfiguration parameters,
            Integer timeOut,
            OffsetDateTime ocpDate) {
        // Generated convenience method for uploadBatchServiceLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        return uploadBatchServiceLogsWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions)
                .getValue()
                .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> list(
            String poolId, Integer maxresults, OffsetDateTime ocpDate, Integer timeOut, String filter, String select) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return serviceClient
                .list(poolId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeVMExtension getExtensions(
            String poolId,
            String nodeId,
            String extensionName,
            Integer timeOut,
            OffsetDateTime ocpDate,
            String select) {
        // Generated convenience method for getExtensionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return getExtensionsWithResponse(poolId, nodeId, extensionName, requestOptions)
                .getValue()
                .toObject(NodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeVMExtension> listExtensions(
            String poolId, String nodeId, Integer maxresults, OffsetDateTime ocpDate, Integer timeOut, String select) {
        // Generated convenience method for listExtensions
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select", select, false);
        }
        return serviceClient
                .listExtensions(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeVMExtension.class));
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFileFromBatchNodeWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.deleteFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     *     <tr><td>ocp-range</td><td>String</td><td>No</td><td>The byte range to be retrieved. The default is to retrieve the entire file. The
     * format is bytes=startRange-endRange.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFileFromBatchNodeWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified Compute Node file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getFilePropertiesFromBatchNodeWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getFilePropertiesFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to list children of a directory.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ocp-date</td><td>OffsetDateTime</td><td>No</td><td>The time the request was issued. Client libraries typically set this to the
     * current system clock time; set it explicitly if you are calling the REST API
     * directly.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     url: String (Optional)
     *     isDirectory: Boolean (Optional)
     *     properties (Optional): {
     *         creationTime: OffsetDateTime (Optional)
     *         lastModified: OffsetDateTime (Required)
     *         contentLength: int (Required)
     *         contentType: String (Optional)
     *         fileMode: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listFilesFromBatchNode(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listFilesFromBatchNode(poolId, nodeId, requestOptions);
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory
     *     instead of a file, you can set recursive to true to delete the directory and all of the files and
     *     subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFileFromBatchNode(
            String poolId, String nodeId, String filePath, Integer timeOut, OffsetDateTime ocpDate, Boolean recursive) {
        // Generated convenience method for deleteFileFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        deleteFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFileFromBatchNode(String poolId, String nodeId, String filePath) {
        // Generated convenience method for deleteFileFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is
     *     bytes=startRange-endRange.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getFileFromBatchNode(
            String poolId,
            String nodeId,
            String filePath,
            Integer timeOut,
            OffsetDateTime ocpDate,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince,
            String ocpRange) {
        // Generated convenience method for getFileFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ocpRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("ocp-range"), ocpRange);
        }
        return getFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getFileFromBatchNode(String poolId, String nodeId, String filePath) {
        // Generated convenience method for getFileFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFileFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getFilePropertiesFromBatchNode(
            String poolId,
            String nodeId,
            String filePath,
            Integer timeOut,
            OffsetDateTime ocpDate,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for getFilePropertiesFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        getFilePropertiesFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getFilePropertiesFromBatchNode(String poolId, String nodeId, String filePath) {
        // Generated convenience method for getFilePropertiesFromBatchNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getFilePropertiesFromBatchNodeWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock
     *     time; set it explicitly if you are calling the REST API directly.
     * @param timeOut The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
     * @param recursive Whether to list children of a directory.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listFilesFromBatchNode(
            String poolId,
            String nodeId,
            Integer maxresults,
            OffsetDateTime ocpDate,
            Integer timeOut,
            String filter,
            Boolean recursive) {
        // Generated convenience method for listFilesFromBatchNode
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (ocpDate != null) {
            requestOptions.setHeader(
                    HttpHeaderName.fromString("ocp-date"), String.valueOf(new DateTimeRfc1123(ocpDate)));
        }
        if (timeOut != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOut), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        return serviceClient
                .listFilesFromBatchNode(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listFilesFromBatchNode(String poolId, String nodeId) {
        // Generated convenience method for listFilesFromBatchNode
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listFilesFromBatchNode(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }
}
