// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Contains information about Jobs that have been and will be run under a Job
 * Schedule.
 */
@Immutable
public final class BatchJobScheduleExecutionInfo implements JsonSerializable<BatchJobScheduleExecutionInfo> {

    /*
     * The next time at which a Job will be created under this schedule. This property is meaningful only if the
     * schedule is in the active state when the time comes around. For example, if the schedule is disabled, no Job will
     * be created at nextRunTime unless the Job is enabled before then.
     */
    @Generated
    private OffsetDateTime nextRunTime;

    /*
     * Information about the most recent Job under the Job Schedule. This property is present only if the at least one
     * Job has run under the schedule.
     */
    @Generated
    private RecentBatchJob recentJob;

    /*
     * The time at which the schedule ended. This property is set only if the Job Schedule is in the completed state.
     */
    @Generated
    private OffsetDateTime endTime;

    /**
     * Creates an instance of BatchJobScheduleExecutionInfo class.
     */
    @Generated
    private BatchJobScheduleExecutionInfo() {
    }

    /**
     * Get the nextRunTime property: The next time at which a Job will be created under this schedule. This property is
     * meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule
     * is disabled, no Job will be created at nextRunTime unless the Job is enabled before then.
     *
     * @return the nextRunTime value.
     */
    @Generated
    public OffsetDateTime getNextRunTime() {
        return this.nextRunTime;
    }

    /**
     * Get the recentJob property: Information about the most recent Job under the Job Schedule. This property is
     * present only if the at least one Job has run under the schedule.
     *
     * @return the recentJob value.
     */
    @Generated
    public RecentBatchJob getRecentJob() {
        return this.recentJob;
    }

    /**
     * Get the endTime property: The time at which the schedule ended. This property is set only if the Job Schedule is
     * in the completed state.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nextRunTime",
            this.nextRunTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.nextRunTime));
        jsonWriter.writeJsonField("recentJob", this.recentJob);
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchJobScheduleExecutionInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchJobScheduleExecutionInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchJobScheduleExecutionInfo.
     */
    @Generated
    public static BatchJobScheduleExecutionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchJobScheduleExecutionInfo deserializedBatchJobScheduleExecutionInfo
                = new BatchJobScheduleExecutionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("nextRunTime".equals(fieldName)) {
                    deserializedBatchJobScheduleExecutionInfo.nextRunTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recentJob".equals(fieldName)) {
                    deserializedBatchJobScheduleExecutionInfo.recentJob = RecentBatchJob.fromJson(reader);
                } else if ("endTime".equals(fieldName)) {
                    deserializedBatchJobScheduleExecutionInfo.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchJobScheduleExecutionInfo;
        });
    }
}
