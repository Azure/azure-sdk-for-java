// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The vm extension instance view.
 */
@Immutable
public final class VMExtensionInstanceView implements JsonSerializable<VMExtensionInstanceView> {

    /*
     * The name of the vm extension instance view.
     */
    @Generated
    private String name;

    /*
     * The resource status information.
     */
    @Generated
    private List<InstanceViewStatus> statuses;

    /*
     * The resource status information.
     */
    @Generated
    private List<InstanceViewStatus> subStatuses;

    /**
     * Creates an instance of VMExtensionInstanceView class.
     */
    @Generated
    private VMExtensionInstanceView() {
    }

    /**
     * Get the name property: The name of the vm extension instance view.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the statuses property: The resource status information.
     *
     * @return the statuses value.
     */
    @Generated
    public List<InstanceViewStatus> getStatuses() {
        return this.statuses;
    }

    /**
     * Get the subStatuses property: The resource status information.
     *
     * @return the subStatuses value.
     */
    @Generated
    public List<InstanceViewStatus> getSubStatuses() {
        return this.subStatuses;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("statuses", this.statuses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("subStatuses", this.subStatuses, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VMExtensionInstanceView from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of VMExtensionInstanceView if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VMExtensionInstanceView.
     */
    @Generated
    public static VMExtensionInstanceView fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VMExtensionInstanceView deserializedVMExtensionInstanceView = new VMExtensionInstanceView();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedVMExtensionInstanceView.name = reader.getString();
                } else if ("statuses".equals(fieldName)) {
                    List<InstanceViewStatus> statuses
                        = reader.readArray(reader1 -> InstanceViewStatus.fromJson(reader1));
                    deserializedVMExtensionInstanceView.statuses = statuses;
                } else if ("subStatuses".equals(fieldName)) {
                    List<InstanceViewStatus> subStatuses
                        = reader.readArray(reader1 -> InstanceViewStatus.fromJson(reader1));
                    deserializedVMExtensionInstanceView.subStatuses = subStatuses;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedVMExtensionInstanceView;
        });
    }
}
