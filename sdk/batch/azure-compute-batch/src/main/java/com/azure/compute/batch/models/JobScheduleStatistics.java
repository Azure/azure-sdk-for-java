// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;

/** Resource usage statistics for a Job Schedule. */
@Immutable
public final class JobScheduleStatistics {
    /*
     * The URL of the statistics.
     */
    @JsonProperty(value = "url", required = true)
    private String url;

    /*
     * The start time of the time range covered by the statistics.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * The time at which the statistics were last updated. All statistics are limited
     * to the range between startTime and lastUpdateTime.
     */
    @JsonProperty(value = "lastUpdateTime", required = true)
    private OffsetDateTime lastUpdateTime;

    /*
     * The total user mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in all Jobs created under the schedule.
     */
    @JsonProperty(value = "userCPUTime", required = true)
    private Duration userCPUTime;

    /*
     * The total kernel mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in all Jobs created under the schedule.
     */
    @JsonProperty(value = "kernelCPUTime", required = true)
    private Duration kernelCPUTime;

    /*
     * The wall clock time is the elapsed time from when the Task started running on a
     * Compute Node to when it finished (or to the last time the statistics were
     * updated, if the Task had not finished by then). If a Task was retried, this
     * includes the wall clock time of all the Task retries.
     */
    @JsonProperty(value = "wallClockTime", required = true)
    private Duration wallClockTime;

    /*
     * The total number of disk read operations made by all Tasks in all Jobs created
     * under the schedule.
     */
    @JsonProperty(value = "readIOps", required = true)
    private int readIOps;

    /*
     * The total number of disk write operations made by all Tasks in all Jobs created
     * under the schedule.
     */
    @JsonProperty(value = "writeIOps", required = true)
    private int writeIOps;

    /*
     * The total gibibytes read from disk by all Tasks in all Jobs created under the
     * schedule.
     */
    @JsonProperty(value = "readIOGiB", required = true)
    private double readIOGiB;

    /*
     * The total gibibytes written to disk by all Tasks in all Jobs created under the
     * schedule.
     */
    @JsonProperty(value = "writeIOGiB", required = true)
    private double writeIOGiB;

    /*
     * The total number of Tasks successfully completed during the given time range in
     * Jobs created under the schedule. A Task completes successfully if it returns
     * exit code 0.
     */
    @JsonProperty(value = "numSucceededTasks", required = true)
    private int numSucceededTasks;

    /*
     * The total number of Tasks that failed during the given time range in Jobs
     * created under the schedule. A Task fails if it exhausts its maximum retry count
     * without returning exit code 0.
     */
    @JsonProperty(value = "numFailedTasks", required = true)
    private int numFailedTasks;

    /*
     * The total number of retries during the given time range on all Tasks in all
     * Jobs created under the schedule.
     */
    @JsonProperty(value = "numTaskRetries", required = true)
    private int numTaskRetries;

    /*
     * This value is only reported in the Account lifetime statistics; it is not
     * included in the Job statistics.
     */
    @JsonProperty(value = "waitTime", required = true)
    private Duration waitTime;

    /**
     * Creates an instance of JobScheduleStatistics class.
     *
     * @param url the url value to set.
     * @param startTime the startTime value to set.
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @param userCPUTime the userCPUTime value to set.
     * @param kernelCPUTime the kernelCPUTime value to set.
     * @param wallClockTime the wallClockTime value to set.
     * @param readIOps the readIOps value to set.
     * @param writeIOps the writeIOps value to set.
     * @param readIOGiB the readIOGiB value to set.
     * @param writeIOGiB the writeIOGiB value to set.
     * @param numSucceededTasks the numSucceededTasks value to set.
     * @param numFailedTasks the numFailedTasks value to set.
     * @param numTaskRetries the numTaskRetries value to set.
     * @param waitTime the waitTime value to set.
     */
    @JsonCreator
    public JobScheduleStatistics(
            @JsonProperty(value = "url", required = true) String url,
            @JsonProperty(value = "startTime", required = true) OffsetDateTime startTime,
            @JsonProperty(value = "lastUpdateTime", required = true) OffsetDateTime lastUpdateTime,
            @JsonProperty(value = "userCPUTime", required = true) Duration userCPUTime,
            @JsonProperty(value = "kernelCPUTime", required = true) Duration kernelCPUTime,
            @JsonProperty(value = "wallClockTime", required = true) Duration wallClockTime,
            @JsonProperty(value = "readIOps", required = true) int readIOps,
            @JsonProperty(value = "writeIOps", required = true) int writeIOps,
            @JsonProperty(value = "readIOGiB", required = true) double readIOGiB,
            @JsonProperty(value = "writeIOGiB", required = true) double writeIOGiB,
            @JsonProperty(value = "numSucceededTasks", required = true) int numSucceededTasks,
            @JsonProperty(value = "numFailedTasks", required = true) int numFailedTasks,
            @JsonProperty(value = "numTaskRetries", required = true) int numTaskRetries,
            @JsonProperty(value = "waitTime", required = true) Duration waitTime) {
        this.url = url;
        this.startTime = startTime;
        this.lastUpdateTime = lastUpdateTime;
        this.userCPUTime = userCPUTime;
        this.kernelCPUTime = kernelCPUTime;
        this.wallClockTime = wallClockTime;
        this.readIOps = readIOps;
        this.writeIOps = writeIOps;
        this.readIOGiB = readIOGiB;
        this.writeIOGiB = writeIOGiB;
        this.numSucceededTasks = numSucceededTasks;
        this.numFailedTasks = numFailedTasks;
        this.numTaskRetries = numTaskRetries;
        this.waitTime = waitTime;
    }

    /**
     * Get the url property: The URL of the statistics.
     *
     * @return the url value.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the startTime property: The start time of the time range covered by the statistics.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the lastUpdateTime property: The time at which the statistics were last updated. All statistics are limited
     * to the range between startTime and lastUpdateTime.
     *
     * @return the lastUpdateTime value.
     */
    public OffsetDateTime getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Get the userCPUTime property: The total user mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in all Jobs created under the schedule.
     *
     * @return the userCPUTime value.
     */
    public Duration getUserCPUTime() {
        return this.userCPUTime;
    }

    /**
     * Get the kernelCPUTime property: The total kernel mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in all Jobs created under the schedule.
     *
     * @return the kernelCPUTime value.
     */
    public Duration getKernelCPUTime() {
        return this.kernelCPUTime;
    }

    /**
     * Get the wallClockTime property: The wall clock time is the elapsed time from when the Task started running on a
     * Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished
     * by then). If a Task was retried, this includes the wall clock time of all the Task retries.
     *
     * @return the wallClockTime value.
     */
    public Duration getWallClockTime() {
        return this.wallClockTime;
    }

    /**
     * Get the readIOps property: The total number of disk read operations made by all Tasks in all Jobs created under
     * the schedule.
     *
     * @return the readIOps value.
     */
    public int getReadIOps() {
        return this.readIOps;
    }

    /**
     * Get the writeIOps property: The total number of disk write operations made by all Tasks in all Jobs created under
     * the schedule.
     *
     * @return the writeIOps value.
     */
    public int getWriteIOps() {
        return this.writeIOps;
    }

    /**
     * Get the readIOGiB property: The total gibibytes read from disk by all Tasks in all Jobs created under the
     * schedule.
     *
     * @return the readIOGiB value.
     */
    public double getReadIOGiB() {
        return this.readIOGiB;
    }

    /**
     * Get the writeIOGiB property: The total gibibytes written to disk by all Tasks in all Jobs created under the
     * schedule.
     *
     * @return the writeIOGiB value.
     */
    public double getWriteIOGiB() {
        return this.writeIOGiB;
    }

    /**
     * Get the numSucceededTasks property: The total number of Tasks successfully completed during the given time range
     * in Jobs created under the schedule. A Task completes successfully if it returns exit code 0.
     *
     * @return the numSucceededTasks value.
     */
    public int getNumSucceededTasks() {
        return this.numSucceededTasks;
    }

    /**
     * Get the numFailedTasks property: The total number of Tasks that failed during the given time range in Jobs
     * created under the schedule. A Task fails if it exhausts its maximum retry count without returning exit code 0.
     *
     * @return the numFailedTasks value.
     */
    public int getNumFailedTasks() {
        return this.numFailedTasks;
    }

    /**
     * Get the numTaskRetries property: The total number of retries during the given time range on all Tasks in all Jobs
     * created under the schedule.
     *
     * @return the numTaskRetries value.
     */
    public int getNumTaskRetries() {
        return this.numTaskRetries;
    }

    /**
     * Get the waitTime property: This value is only reported in the Account lifetime statistics; it is not included in
     * the Job statistics.
     *
     * @return the waitTime value.
     */
    public Duration getWaitTime() {
        return this.waitTime;
    }
}
