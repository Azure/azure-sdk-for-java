// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The configuration for container-enabled Pools.
 */
@Fluent
public final class ContainerConfiguration implements JsonSerializable<ContainerConfiguration> {

    /*
     * The container technology to be used.
     */
    @Generated
    private final ContainerType type;

    /*
     * The collection of container Image names. This is the full Image reference, as would be specified to
     * "docker pull". An Image will be sourced from the default Docker registry unless the Image is fully qualified with
     * an alternative registry.
     */
    @Generated
    private List<String> containerImageNames;

    /*
     * Additional private registries from which containers can be pulled. If any Images must be downloaded from a
     * private registry which requires credentials, then those credentials must be provided here.
     */
    @Generated
    private List<ContainerRegistryReference> containerRegistries;

    /**
     * Creates an instance of ContainerConfiguration class.
     *
     * @param type the type value to set.
     */
    @Generated
    public ContainerConfiguration(ContainerType type) {
        this.type = type;
    }

    /**
     * Get the type property: The container technology to be used.
     *
     * @return the type value.
     */
    @Generated
    public ContainerType getType() {
        return this.type;
    }

    /**
     * Get the containerImageNames property: The collection of container Image names. This is the full Image reference,
     * as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the
     * Image is fully qualified with an alternative registry.
     *
     * @return the containerImageNames value.
     */
    @Generated
    public List<String> getContainerImageNames() {
        return this.containerImageNames;
    }

    /**
     * Set the containerImageNames property: The collection of container Image names. This is the full Image reference,
     * as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the
     * Image is fully qualified with an alternative registry.
     *
     * @param containerImageNames the containerImageNames value to set.
     * @return the ContainerConfiguration object itself.
     */
    @Generated
    public ContainerConfiguration setContainerImageNames(List<String> containerImageNames) {
        this.containerImageNames = containerImageNames;
        return this;
    }

    /**
     * Get the containerRegistries property: Additional private registries from which containers can be pulled. If any
     * Images must be downloaded from a private registry which requires credentials, then those credentials must be
     * provided here.
     *
     * @return the containerRegistries value.
     */
    @Generated
    public List<ContainerRegistryReference> getContainerRegistries() {
        return this.containerRegistries;
    }

    /**
     * Set the containerRegistries property: Additional private registries from which containers can be pulled. If any
     * Images must be downloaded from a private registry which requires credentials, then those credentials must be
     * provided here.
     *
     * @param containerRegistries the containerRegistries value to set.
     * @return the ContainerConfiguration object itself.
     */
    @Generated
    public ContainerConfiguration setContainerRegistries(List<ContainerRegistryReference> containerRegistries) {
        this.containerRegistries = containerRegistries;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("containerImageNames", this.containerImageNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("containerRegistries", this.containerRegistries,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerConfiguration.
     */
    @Generated
    public static ContainerConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerType type = null;
            List<String> containerImageNames = null;
            List<ContainerRegistryReference> containerRegistries = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    type = ContainerType.fromString(reader.getString());
                } else if ("containerImageNames".equals(fieldName)) {
                    containerImageNames = reader.readArray(reader1 -> reader1.getString());
                } else if ("containerRegistries".equals(fieldName)) {
                    containerRegistries = reader.readArray(reader1 -> ContainerRegistryReference.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            ContainerConfiguration deserializedContainerConfiguration = new ContainerConfiguration(type);
            deserializedContainerConfiguration.containerImageNames = containerImageNames;
            deserializedContainerConfiguration.containerRegistries = containerRegistries;
            return deserializedContainerConfiguration;
        });
    }
}
