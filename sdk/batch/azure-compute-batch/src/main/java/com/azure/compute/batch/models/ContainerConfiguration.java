// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The configuration for container-enabled Pools.
 */
@Fluent
public final class ContainerConfiguration {

    /*
     * The container technology to be used.
     */
    @Generated
    @JsonProperty(value = "type")
    private final ContainerType type;

    /*
     * The collection of container Image names. This is the full Image reference, as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
     */
    @Generated
    @JsonProperty(value = "containerImageNames")
    private List<String> containerImageNames;

    /*
     * Additional private registries from which containers can be pulled. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
     */
    @Generated
    @JsonProperty(value = "containerRegistries")
    private List<ContainerRegistry> containerRegistries;

    /**
     * Creates an instance of ContainerConfiguration class.
     *
     * @param type the type value to set.
     */
    @Generated
    @JsonCreator
    public ContainerConfiguration(@JsonProperty(value = "type") ContainerType type) {
        this.type = type;
    }

    /**
     * Get the type property: The container technology to be used.
     *
     * @return the type value.
     */
    @Generated
    public ContainerType getType() {
        return this.type;
    }

    /**
     * Get the containerImageNames property: The collection of container Image names. This is the full Image reference,
     * as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the
     * Image is fully qualified with an alternative registry.
     *
     * @return the containerImageNames value.
     */
    @Generated
    public List<String> getContainerImageNames() {
        return this.containerImageNames;
    }

    /**
     * Set the containerImageNames property: The collection of container Image names. This is the full Image reference,
     * as would be specified to "docker pull". An Image will be sourced from the default Docker registry unless the
     * Image is fully qualified with an alternative registry.
     *
     * @param containerImageNames the containerImageNames value to set.
     * @return the ContainerConfiguration object itself.
     */
    @Generated
    public ContainerConfiguration setContainerImageNames(List<String> containerImageNames) {
        this.containerImageNames = containerImageNames;
        return this;
    }

    /**
     * Get the containerRegistries property: Additional private registries from which containers can be pulled. If any
     * Images must be downloaded from a private registry which requires credentials, then those credentials must be
     * provided here.
     *
     * @return the containerRegistries value.
     */
    @Generated
    public List<ContainerRegistry> getContainerRegistries() {
        return this.containerRegistries;
    }

    /**
     * Set the containerRegistries property: Additional private registries from which containers can be pulled. If any
     * Images must be downloaded from a private registry which requires credentials, then those credentials must be
     * provided here.
     *
     * @param containerRegistries the containerRegistries value to set.
     * @return the ContainerConfiguration object itself.
     */
    @Generated
    public ContainerConfiguration setContainerRegistries(List<ContainerRegistry> containerRegistries) {
        this.containerRegistries = containerRegistries;
        return this;
    }
}
