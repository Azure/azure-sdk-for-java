// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about a Task running on a Compute Node.
 */
@Immutable
public final class BatchTaskInfo implements JsonSerializable<BatchTaskInfo> {

    /*
     * The URL of the Task.
     */
    @Generated
    private String taskUrl;

    /*
     * The ID of the Job to which the Task belongs.
     */
    @Generated
    private String jobId;

    /*
     * The ID of the Task.
     */
    @Generated
    private String taskId;

    /*
     * The ID of the subtask if the Task is a multi-instance Task.
     */
    @Generated
    private Integer subtaskId;

    /*
     * The current state of the Task.
     */
    @Generated
    private final BatchTaskState taskState;

    /*
     * Information about the execution of the Task.
     */
    @Generated
    private BatchTaskExecutionInfo executionInfo;

    /**
     * Creates an instance of BatchTaskInfo class.
     *
     * @param taskState the taskState value to set.
     */
    @Generated
    private BatchTaskInfo(BatchTaskState taskState) {
        this.taskState = taskState;
    }

    /**
     * Get the taskUrl property: The URL of the Task.
     *
     * @return the taskUrl value.
     */
    @Generated
    public String getTaskUrl() {
        return this.taskUrl;
    }

    /**
     * Get the jobId property: The ID of the Job to which the Task belongs.
     *
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the taskId property: The ID of the Task.
     *
     * @return the taskId value.
     */
    @Generated
    public String getTaskId() {
        return this.taskId;
    }

    /**
     * Get the subtaskId property: The ID of the subtask if the Task is a multi-instance Task.
     *
     * @return the subtaskId value.
     */
    @Generated
    public Integer getSubtaskId() {
        return this.subtaskId;
    }

    /**
     * Get the taskState property: The current state of the Task.
     *
     * @return the taskState value.
     */
    @Generated
    public BatchTaskState getTaskState() {
        return this.taskState;
    }

    /**
     * Get the executionInfo property: Information about the execution of the Task.
     *
     * @return the executionInfo value.
     */
    @Generated
    public BatchTaskExecutionInfo getExecutionInfo() {
        return this.executionInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("taskState", this.taskState == null ? null : this.taskState.toString());
        jsonWriter.writeStringField("taskUrl", this.taskUrl);
        jsonWriter.writeStringField("jobId", this.jobId);
        jsonWriter.writeStringField("taskId", this.taskId);
        jsonWriter.writeNumberField("subtaskId", this.subtaskId);
        jsonWriter.writeJsonField("executionInfo", this.executionInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchTaskInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchTaskInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchTaskInfo.
     */
    @Generated
    public static BatchTaskInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchTaskState taskState = null;
            String taskUrl = null;
            String jobId = null;
            String taskId = null;
            Integer subtaskId = null;
            BatchTaskExecutionInfo executionInfo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("taskState".equals(fieldName)) {
                    taskState = BatchTaskState.fromString(reader.getString());
                } else if ("taskUrl".equals(fieldName)) {
                    taskUrl = reader.getString();
                } else if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("taskId".equals(fieldName)) {
                    taskId = reader.getString();
                } else if ("subtaskId".equals(fieldName)) {
                    subtaskId = reader.getNullable(JsonReader::getInt);
                } else if ("executionInfo".equals(fieldName)) {
                    executionInfo = BatchTaskExecutionInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            BatchTaskInfo deserializedBatchTaskInfo = new BatchTaskInfo(taskState);
            deserializedBatchTaskInfo.taskUrl = taskUrl;
            deserializedBatchTaskInfo.jobId = jobId;
            deserializedBatchTaskInfo.taskId = taskId;
            deserializedBatchTaskInfo.subtaskId = subtaskId;
            deserializedBatchTaskInfo.executionInfo = executionInfo;
            return deserializedBatchTaskInfo;
        });
    }
}
