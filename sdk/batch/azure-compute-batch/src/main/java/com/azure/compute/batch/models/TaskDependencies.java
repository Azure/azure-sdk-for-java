// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Specifies any dependencies of a Task. Any Task that is explicitly specified or within a dependency range must
 * complete before the dependant Task will be scheduled.
 */
@Fluent
public final class TaskDependencies {
    /*
     * The taskIds collection is limited to 64000 characters total (i.e. the combined
     * length of all Task IDs). If the taskIds collection exceeds the maximum length,
     * the Add Task request fails with error code TaskDependencyListTooLong. In this
     * case consider using Task ID ranges instead.
     */
    @JsonProperty(value = "taskIds")
    private List<String> taskIds;

    /*
     * The list of Task ID ranges that this Task depends on. All Tasks in all ranges
     * must complete successfully before the dependent Task can be scheduled.
     */
    @JsonProperty(value = "taskIdRanges")
    private List<TaskIdRange> taskIdRanges;

    /** Creates an instance of TaskDependencies class. */
    public TaskDependencies() {}

    /**
     * Get the taskIds property: The taskIds collection is limited to 64000 characters total (i.e. the combined length
     * of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error
     * code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
     *
     * @return the taskIds value.
     */
    public List<String> getTaskIds() {
        return this.taskIds;
    }

    /**
     * Set the taskIds property: The taskIds collection is limited to 64000 characters total (i.e. the combined length
     * of all Task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error
     * code TaskDependencyListTooLong. In this case consider using Task ID ranges instead.
     *
     * @param taskIds the taskIds value to set.
     * @return the TaskDependencies object itself.
     */
    public TaskDependencies setTaskIds(List<String> taskIds) {
        this.taskIds = taskIds;
        return this;
    }

    /**
     * Get the taskIdRanges property: The list of Task ID ranges that this Task depends on. All Tasks in all ranges must
     * complete successfully before the dependent Task can be scheduled.
     *
     * @return the taskIdRanges value.
     */
    public List<TaskIdRange> getTaskIdRanges() {
        return this.taskIdRanges;
    }

    /**
     * Set the taskIdRanges property: The list of Task ID ranges that this Task depends on. All Tasks in all ranges must
     * complete successfully before the dependent Task can be scheduled.
     *
     * @param taskIdRanges the taskIdRanges value to set.
     * @return the TaskDependencies object itself.
     */
    public TaskDependencies setTaskIdRanges(List<TaskIdRange> taskIdRanges) {
        this.taskIdRanges = taskIdRanges;
        return this;
    }
}
