// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Options for deallocating a Compute Node.
 */
@Fluent
public final class BatchNodeDeallocateContent implements JsonSerializable<BatchNodeDeallocateContent> {

    /*
     * When to deallocate the Compute Node and what to do with currently running Tasks. The default value is requeue.
     */
    @Generated
    private BatchNodeDeallocateOption nodeDeallocateOption;

    /**
     * Creates an instance of BatchNodeDeallocateContent class.
     */
    @Generated
    public BatchNodeDeallocateContent() {
    }

    /**
     * Get the nodeDeallocateOption property: When to deallocate the Compute Node and what to do with currently running
     * Tasks. The default value is requeue.
     *
     * @return the nodeDeallocateOption value.
     */
    @Generated
    public BatchNodeDeallocateOption getNodeDeallocateOption() {
        return this.nodeDeallocateOption;
    }

    /**
     * Set the nodeDeallocateOption property: When to deallocate the Compute Node and what to do with currently running
     * Tasks. The default value is requeue.
     *
     * @param nodeDeallocateOption the nodeDeallocateOption value to set.
     * @return the BatchNodeDeallocateContent object itself.
     */
    @Generated
    public BatchNodeDeallocateContent setNodeDeallocateOption(BatchNodeDeallocateOption nodeDeallocateOption) {
        this.nodeDeallocateOption = nodeDeallocateOption;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeDeallocateOption",
            this.nodeDeallocateOption == null ? null : this.nodeDeallocateOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchNodeDeallocateContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchNodeDeallocateContent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchNodeDeallocateContent.
     */
    @Generated
    public static BatchNodeDeallocateContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchNodeDeallocateContent deserializedBatchNodeDeallocateContent = new BatchNodeDeallocateContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("nodeDeallocateOption".equals(fieldName)) {
                    deserializedBatchNodeDeallocateContent.nodeDeallocateOption
                        = BatchNodeDeallocateOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchNodeDeallocateContent;
        });
    }
}
