// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A inbound NAT Pool that can be used to address specific ports on Compute Nodes
 * in a Batch Pool externally.
 */
@Fluent
public final class InboundNatPool implements JsonSerializable<InboundNatPool> {

    /*
     * The name of the endpoint. The name must be unique within a Batch Pool, can contain letters, numbers, underscores,
     * periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore,
     * and cannot exceed 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
     */
    @Generated
    private final String name;

    /*
     * The protocol of the endpoint.
     */
    @Generated
    private final InboundEndpointProtocol protocol;

    /*
     * The port number on the Compute Node. This must be unique within a Batch Pool. Acceptable values are between 1 and
     * 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request
     * fails with HTTP status code 400.
     */
    @Generated
    private final int backendPort;

    /*
     * The first port number in the range of external ports that will be used to provide inbound access to the
     * backendPort on individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to
     * 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain
     * at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code
     * 400.
     */
    @Generated
    private final int frontendPortRangeStart;

    /*
     * The last port number in the range of external ports that will be used to provide inbound access to the
     * backendPort on individual Compute Nodes. Acceptable values range between 1 and 65534 except ports from 50000 to
     * 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each
     * range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with
     * HTTP status code 400.
     */
    @Generated
    private final int frontendPortRangeEnd;

    /*
     * A list of network security group rules that will be applied to the endpoint. The maximum number of rules that can
     * be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a
     * default rule will be created to allow inbound access to the specified backendPort. If the maximum number of
     * network security group rules is exceeded the request fails with HTTP status code 400.
     */
    @Generated
    private List<NetworkSecurityGroupRule> networkSecurityGroupRules;

    /**
     * Get the name property: The name of the endpoint. The name must be unique within a Batch Pool, can contain
     * letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a
     * letter, number, or underscore, and cannot exceed 77 characters. If any invalid values are provided the request
     * fails with HTTP status code 400.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the protocol property: The protocol of the endpoint.
     *
     * @return the protocol value.
     */
    @Generated
    public InboundEndpointProtocol getProtocol() {
        return this.protocol;
    }

    /**
     * Get the backendPort property: The port number on the Compute Node. This must be unique within a Batch Pool.
     * Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any
     * reserved values are provided the request fails with HTTP status code 400.
     *
     * @return the backendPort value.
     */
    @Generated
    public int getBackendPort() {
        return this.backendPort;
    }

    /**
     * Get the frontendPortRangeStart property: The first port number in the range of external ports that will be used
     * to provide inbound access to the backendPort on individual Compute Nodes. Acceptable values range between 1 and
     * 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot
     * overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the
     * request fails with HTTP status code 400.
     *
     * @return the frontendPortRangeStart value.
     */
    @Generated
    public int getFrontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }

    /**
     * Get the frontendPortRangeEnd property: The last port number in the range of external ports that will be used to
     * provide inbound access to the backendPort on individual Compute Nodes. Acceptable values range between 1 and
     * 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be
     * distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are
     * provided the request fails with HTTP status code 400.
     *
     * @return the frontendPortRangeEnd value.
     */
    @Generated
    public int getFrontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }

    /**
     * Get the networkSecurityGroupRules property: A list of network security group rules that will be applied to the
     * endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no
     * network security group rules are specified, a default rule will be created to allow inbound access to the
     * specified backendPort. If the maximum number of network security group rules is exceeded the request fails with
     * HTTP status code 400.
     *
     * @return the networkSecurityGroupRules value.
     */
    @Generated
    public List<NetworkSecurityGroupRule> getNetworkSecurityGroupRules() {
        return this.networkSecurityGroupRules;
    }

    /**
     * Set the networkSecurityGroupRules property: A list of network security group rules that will be applied to the
     * endpoint. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no
     * network security group rules are specified, a default rule will be created to allow inbound access to the
     * specified backendPort. If the maximum number of network security group rules is exceeded the request fails with
     * HTTP status code 400.
     *
     * @param networkSecurityGroupRules the networkSecurityGroupRules value to set.
     * @return the InboundNatPool object itself.
     */
    @Generated
    public InboundNatPool setNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules) {
        this.networkSecurityGroupRules = networkSecurityGroupRules;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeIntField("backendPort", this.backendPort);
        jsonWriter.writeIntField("frontendPortRangeStart", this.frontendPortRangeStart);
        jsonWriter.writeIntField("frontendPortRangeEnd", this.frontendPortRangeEnd);
        jsonWriter.writeArrayField("networkSecurityGroupRules", this.networkSecurityGroupRules,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InboundNatPool from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InboundNatPool if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InboundNatPool.
     */
    @Generated
    public static InboundNatPool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            InboundEndpointProtocol protocol = null;
            int backendPort = 0;
            int frontendPortRangeStart = 0;
            int frontendPortRangeEnd = 0;
            List<NetworkSecurityGroupRule> networkSecurityGroupRules = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    protocol = InboundEndpointProtocol.fromString(reader.getString());
                } else if ("backendPort".equals(fieldName)) {
                    backendPort = reader.getInt();
                } else if ("frontendPortRangeStart".equals(fieldName)) {
                    frontendPortRangeStart = reader.getInt();
                } else if ("frontendPortRangeEnd".equals(fieldName)) {
                    frontendPortRangeEnd = reader.getInt();
                } else if ("networkSecurityGroupRules".equals(fieldName)) {
                    networkSecurityGroupRules = reader.readArray(reader1 -> NetworkSecurityGroupRule.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            InboundNatPool deserializedInboundNatPool
                = new InboundNatPool(name, protocol, backendPort, frontendPortRangeStart, frontendPortRangeEnd);
            deserializedInboundNatPool.networkSecurityGroupRules = networkSecurityGroupRules;
            return deserializedInboundNatPool;
        });
    }

    /**
     * Creates an instance of InboundNatPool class.
     *
     * @param name the name value to set.
     * @param protocol the protocol value to set.
     * @param backendPort the backendPort value to set.
     * @param frontendPortRangeStart the frontendPortRangeStart value to set.
     * @param frontendPortRangeEnd the frontendPortRangeEnd value to set.
     */
    @Generated
    public InboundNatPool(String name, InboundEndpointProtocol protocol, int backendPort, int frontendPortRangeStart,
        int frontendPortRangeEnd) {
        this.name = name;
        this.protocol = protocol;
        this.backendPort = backendPort;
        this.frontendPortRangeStart = frontendPortRangeStart;
        this.frontendPortRangeEnd = frontendPortRangeEnd;
    }
}
