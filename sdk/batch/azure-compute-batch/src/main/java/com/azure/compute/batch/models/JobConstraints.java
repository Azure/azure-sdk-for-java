// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;

/** The execution constraints for a Job. */
@Fluent
public final class JobConstraints {
    /*
     * If the Job does not complete within the time limit, the Batch service
     * terminates it and any Tasks that are still running. In this case, the
     * termination reason will be MaxWallClockTimeExpiry. If this property is not
     * specified, there is no time limit on how long the Job may run.
     */
    @JsonProperty(value = "maxWallClockTime")
    private Duration maxWallClockTime;

    /*
     * Note that this value specifically controls the number of retries. The Batch
     * service will try each Task once, and may then retry up to this limit. For
     * example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one
     * initial try and 3 retries). If the maximum retry count is 0, the Batch service
     * does not retry Tasks. If the maximum retry count is -1, the Batch service
     * retries the Task without limit, however this is not recommended for a start
     * task or any task. The default value is 0 (no retries)
     */
    @JsonProperty(value = "maxTaskRetryCount")
    private Integer maxTaskRetryCount;

    /** Creates an instance of JobConstraints class. */
    public JobConstraints() {}

    /**
     * Get the maxWallClockTime property: If the Job does not complete within the time limit, the Batch service
     * terminates it and any Tasks that are still running. In this case, the termination reason will be
     * MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.
     *
     * @return the maxWallClockTime value.
     */
    public Duration getMaxWallClockTime() {
        return this.maxWallClockTime;
    }

    /**
     * Set the maxWallClockTime property: If the Job does not complete within the time limit, the Batch service
     * terminates it and any Tasks that are still running. In this case, the termination reason will be
     * MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run.
     *
     * @param maxWallClockTime the maxWallClockTime value to set.
     * @return the JobConstraints object itself.
     */
    public JobConstraints setMaxWallClockTime(Duration maxWallClockTime) {
        this.maxWallClockTime = maxWallClockTime;
        return this;
    }

    /**
     * Get the maxTaskRetryCount property: Note that this value specifically controls the number of retries. The Batch
     * service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is
     * 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
     * service does not retry Tasks. If the maximum retry count is -1, the Batch service retries the Task without limit,
     * however this is not recommended for a start task or any task. The default value is 0 (no retries).
     *
     * @return the maxTaskRetryCount value.
     */
    public Integer getMaxTaskRetryCount() {
        return this.maxTaskRetryCount;
    }

    /**
     * Set the maxTaskRetryCount property: Note that this value specifically controls the number of retries. The Batch
     * service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is
     * 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
     * service does not retry Tasks. If the maximum retry count is -1, the Batch service retries the Task without limit,
     * however this is not recommended for a start task or any task. The default value is 0 (no retries).
     *
     * @param maxTaskRetryCount the maxTaskRetryCount value to set.
     * @return the JobConstraints object itself.
     */
    public JobConstraints setMaxTaskRetryCount(Integer maxTaskRetryCount) {
        this.maxTaskRetryCount = maxTaskRetryCount;
        return this;
    }
}
