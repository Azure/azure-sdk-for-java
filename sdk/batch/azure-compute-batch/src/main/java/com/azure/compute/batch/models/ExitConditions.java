// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies how the Batch service should respond when the Task completes.
 */
@Fluent
public final class ExitConditions implements JsonSerializable<ExitConditions> {

    /*
     * A list of individual Task exit codes and how the Batch service should respond to them.
     */
    @Generated
    private List<ExitCodeMapping> exitCodes;

    /*
     * A list of Task exit code ranges and how the Batch service should respond to them.
     */
    @Generated
    private List<ExitCodeRangeMapping> exitCodeRanges;

    /*
     * How the Batch service should respond if the Task fails to start due to an error.
     */
    @Generated
    private ExitOptions preProcessingError;

    /*
     * How the Batch service should respond if a file upload error occurs. If the Task exited with an exit code that was
     * specified via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by
     * the exit code takes precedence.
     */
    @Generated
    private ExitOptions fileUploadError;

    /*
     * How the Batch service should respond if the Task fails with an exit condition not covered by any of the other
     * properties. This value is used if the Task exits with any nonzero exit code not listed in the exitCodes or
     * exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not present, or with
     * a file upload error if the fileUploadError property is not present. If you want non-default behavior on exit code
     * 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.
     */
    @Generated
    private ExitOptions defaultProperty;

    /**
     * Creates an instance of ExitConditions class.
     */
    @Generated
    public ExitConditions() {
    }

    /**
     * Get the exitCodes property: A list of individual Task exit codes and how the Batch service should respond to
     * them.
     *
     * @return the exitCodes value.
     */
    @Generated
    public List<ExitCodeMapping> getExitCodes() {
        return this.exitCodes;
    }

    /**
     * Set the exitCodes property: A list of individual Task exit codes and how the Batch service should respond to
     * them.
     *
     * @param exitCodes the exitCodes value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setExitCodes(List<ExitCodeMapping> exitCodes) {
        this.exitCodes = exitCodes;
        return this;
    }

    /**
     * Get the exitCodeRanges property: A list of Task exit code ranges and how the Batch service should respond to
     * them.
     *
     * @return the exitCodeRanges value.
     */
    @Generated
    public List<ExitCodeRangeMapping> getExitCodeRanges() {
        return this.exitCodeRanges;
    }

    /**
     * Set the exitCodeRanges property: A list of Task exit code ranges and how the Batch service should respond to
     * them.
     *
     * @param exitCodeRanges the exitCodeRanges value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setExitCodeRanges(List<ExitCodeRangeMapping> exitCodeRanges) {
        this.exitCodeRanges = exitCodeRanges;
        return this;
    }

    /**
     * Get the preProcessingError property: How the Batch service should respond if the Task fails to start due to an
     * error.
     *
     * @return the preProcessingError value.
     */
    @Generated
    public ExitOptions getPreProcessingError() {
        return this.preProcessingError;
    }

    /**
     * Set the preProcessingError property: How the Batch service should respond if the Task fails to start due to an
     * error.
     *
     * @param preProcessingError the preProcessingError value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setPreProcessingError(ExitOptions preProcessingError) {
        this.preProcessingError = preProcessingError;
        return this;
    }

    /**
     * Get the fileUploadError property: How the Batch service should respond if a file upload error occurs. If the Task
     * exited with an exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file upload
     * error, then the action specified by the exit code takes precedence.
     *
     * @return the fileUploadError value.
     */
    @Generated
    public ExitOptions getFileUploadError() {
        return this.fileUploadError;
    }

    /**
     * Set the fileUploadError property: How the Batch service should respond if a file upload error occurs. If the Task
     * exited with an exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file upload
     * error, then the action specified by the exit code takes precedence.
     *
     * @param fileUploadError the fileUploadError value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setFileUploadError(ExitOptions fileUploadError) {
        this.fileUploadError = fileUploadError;
        return this;
    }

    /**
     * Get the defaultProperty property: How the Batch service should respond if the Task fails with an exit condition
     * not covered by any of the other properties. This value is used if the Task exits with any nonzero exit code not
     * listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError
     * property is not present, or with a file upload error if the fileUploadError property is not present. If you want
     * non-default behavior on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges
     * collection.
     *
     * @return the defaultProperty value.
     */
    @Generated
    public ExitOptions getDefaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: How the Batch service should respond if the Task fails with an exit condition
     * not covered by any of the other properties. This value is used if the Task exits with any nonzero exit code not
     * listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError
     * property is not present, or with a file upload error if the fileUploadError property is not present. If you want
     * non-default behavior on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges
     * collection.
     *
     * @param defaultProperty the defaultProperty value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setDefaultProperty(ExitOptions defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("exitCodes", this.exitCodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("exitCodeRanges", this.exitCodeRanges,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("preProcessingError", this.preProcessingError);
        jsonWriter.writeJsonField("fileUploadError", this.fileUploadError);
        jsonWriter.writeJsonField("default", this.defaultProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExitConditions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExitConditions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExitConditions.
     */
    @Generated
    public static ExitConditions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExitConditions deserializedExitConditions = new ExitConditions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("exitCodes".equals(fieldName)) {
                    List<ExitCodeMapping> exitCodes = reader.readArray(reader1 -> ExitCodeMapping.fromJson(reader1));
                    deserializedExitConditions.exitCodes = exitCodes;
                } else if ("exitCodeRanges".equals(fieldName)) {
                    List<ExitCodeRangeMapping> exitCodeRanges
                        = reader.readArray(reader1 -> ExitCodeRangeMapping.fromJson(reader1));
                    deserializedExitConditions.exitCodeRanges = exitCodeRanges;
                } else if ("preProcessingError".equals(fieldName)) {
                    deserializedExitConditions.preProcessingError = ExitOptions.fromJson(reader);
                } else if ("fileUploadError".equals(fieldName)) {
                    deserializedExitConditions.fileUploadError = ExitOptions.fromJson(reader);
                } else if ("default".equals(fieldName)) {
                    deserializedExitConditions.defaultProperty = ExitOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedExitConditions;
        });
    }
}
