// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies how the Batch service should respond when the Task completes. */
@Fluent
public final class ExitConditions {

    /*
     * A list of individual Task exit codes and how the Batch service should respond
     * to them.
     */
    @Generated
    @JsonProperty(value = "exitCodes")
    private List<ExitCodeMapping> exitCodes;

    /*
     * A list of Task exit code ranges and how the Batch service should respond to
     * them.
     */
    @Generated
    @JsonProperty(value = "exitCodeRanges")
    private List<ExitCodeRangeMapping> exitCodeRanges;

    /*
     * Specifies how the Batch service responds to a particular exit condition.
     */
    @Generated
    @JsonProperty(value = "preProcessingError")
    private ExitOptions preProcessingError;

    /*
     * If the Task exited with an exit code that was specified via exitCodes or
     * exitCodeRanges, and then encountered a file upload error, then the action
     * specified by the exit code takes precedence.
     */
    @Generated
    @JsonProperty(value = "fileUploadError")
    private ExitOptions fileUploadError;

    /*
     * This value is used if the Task exits with any nonzero exit code not listed in
     * the exitCodes or exitCodeRanges collection, with a pre-processing error if the
     * preProcessingError property is not present, or with a file upload error if the
     * fileUploadError property is not present. If you want non-default behavior on
     * exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges
     * collection.
     */
    @Generated
    @JsonProperty(value = "default")
    private ExitOptions defaultProperty;

    /** Creates an instance of ExitConditions class. */
    @Generated
    public ExitConditions() {}

    /**
     * Get the exitCodes property: A list of individual Task exit codes and how the Batch service should respond to
     * them.
     *
     * @return the exitCodes value.
     */
    @Generated
    public List<ExitCodeMapping> getExitCodes() {
        return this.exitCodes;
    }

    /**
     * Set the exitCodes property: A list of individual Task exit codes and how the Batch service should respond to
     * them.
     *
     * @param exitCodes the exitCodes value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setExitCodes(List<ExitCodeMapping> exitCodes) {
        this.exitCodes = exitCodes;
        return this;
    }

    /**
     * Get the exitCodeRanges property: A list of Task exit code ranges and how the Batch service should respond to
     * them.
     *
     * @return the exitCodeRanges value.
     */
    @Generated
    public List<ExitCodeRangeMapping> getExitCodeRanges() {
        return this.exitCodeRanges;
    }

    /**
     * Set the exitCodeRanges property: A list of Task exit code ranges and how the Batch service should respond to
     * them.
     *
     * @param exitCodeRanges the exitCodeRanges value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setExitCodeRanges(List<ExitCodeRangeMapping> exitCodeRanges) {
        this.exitCodeRanges = exitCodeRanges;
        return this;
    }

    /**
     * Get the preProcessingError property: Specifies how the Batch service responds to a particular exit condition.
     *
     * @return the preProcessingError value.
     */
    @Generated
    public ExitOptions getPreProcessingError() {
        return this.preProcessingError;
    }

    /**
     * Set the preProcessingError property: Specifies how the Batch service responds to a particular exit condition.
     *
     * @param preProcessingError the preProcessingError value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setPreProcessingError(ExitOptions preProcessingError) {
        this.preProcessingError = preProcessingError;
        return this;
    }

    /**
     * Get the fileUploadError property: If the Task exited with an exit code that was specified via exitCodes or
     * exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code takes
     * precedence.
     *
     * @return the fileUploadError value.
     */
    @Generated
    public ExitOptions getFileUploadError() {
        return this.fileUploadError;
    }

    /**
     * Set the fileUploadError property: If the Task exited with an exit code that was specified via exitCodes or
     * exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code takes
     * precedence.
     *
     * @param fileUploadError the fileUploadError value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setFileUploadError(ExitOptions fileUploadError) {
        this.fileUploadError = fileUploadError;
        return this;
    }

    /**
     * Get the defaultProperty property: This value is used if the Task exits with any nonzero exit code not listed in
     * the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not
     * present, or with a file upload error if the fileUploadError property is not present. If you want non-default
     * behavior on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.
     *
     * @return the defaultProperty value.
     */
    @Generated
    public ExitOptions getDefaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: This value is used if the Task exits with any nonzero exit code not listed in
     * the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not
     * present, or with a file upload error if the fileUploadError property is not present. If you want non-default
     * behavior on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.
     *
     * @param defaultProperty the defaultProperty value to set.
     * @return the ExitConditions object itself.
     */
    @Generated
    public ExitConditions setDefaultProperty(ExitOptions defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }
}
