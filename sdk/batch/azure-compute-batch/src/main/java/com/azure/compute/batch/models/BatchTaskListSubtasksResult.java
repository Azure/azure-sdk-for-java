// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** The result of listing the subtasks of a Task. */
@Immutable
public final class BatchTaskListSubtasksResult implements JsonSerializable<BatchTaskListSubtasksResult> {

    /*
     * The list of subtasks.
     */
    @Generated
    private List<BatchSubtask> value;

    /** Creates an instance of BatchTaskListSubtasksResult class. */
    @Generated
    private BatchTaskListSubtasksResult() {}

    /**
     * Get the value property: The list of subtasks.
     *
     * @return the value value.
     */
    @Generated
    public List<BatchSubtask> getValue() {
        return this.value;
    }

    /**
     * Creates a representation of this object as JSON.
     *
     * @param jsonWriter Where the JSON representation is written to.
     *
     * @throws IOException Error while writing to JsonWriter.
     * @return The JsonWriter with the JSON representation of this object.
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> element.toJson(writer));
        jsonWriter.writeEndObject();
        return jsonWriter;
    }

    /**
     * Creates a {@link BatchTaskListSubtasksResult} from its JSON representation.
     *
     * @param jsonReader Where the JSON read from to deserialize the object.
     *
     * @throws IOException Error while reading from JsonReader.
     * @return Instance read from the JsonReader.
     */
    public static BatchTaskListSubtasksResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchTaskListSubtasksResult result = new BatchTaskListSubtasksResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    result.value = reader.readArray(r -> BatchSubtask.fromJson(r));
                } else {
                    reader.skipChildren();
                }
            }

            return result;
        });
    }
}
