// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An error response received from the Azure Batch service.
 */
@Immutable
public final class BatchError implements JsonSerializable<BatchError> {

    /*
     * An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
     */
    @Generated
    private final String code;

    /*
     * A message describing the error, intended to be suitable for display in a user interface.
     */
    @Generated
    private BatchErrorMessage message;

    /*
     * A collection of key-value pairs containing additional details about the error.
     */
    @Generated
    private List<BatchErrorDetail> values;

    /**
     * Creates an instance of BatchError class.
     *
     * @param code the code value to set.
     */
    @Generated
    private BatchError(String code) {
        this.code = code;
    }

    /**
     * Get the code property: An identifier for the error. Codes are invariant and are intended to be consumed
     * programmatically.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the message property: A message describing the error, intended to be suitable for display in a user
     * interface.
     *
     * @return the message value.
     */
    @Generated
    public BatchErrorMessage getMessage() {
        return this.message;
    }

    /**
     * Get the values property: A collection of key-value pairs containing additional details about the error.
     *
     * @return the values value.
     */
    @Generated
    public List<BatchErrorDetail> getValues() {
        return this.values;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeJsonField("message", this.message);
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchError from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchError if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchError.
     */
    @Generated
    public static BatchError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String code = null;
            BatchErrorMessage message = null;
            List<BatchErrorDetail> values = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code".equals(fieldName)) {
                    code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    message = BatchErrorMessage.fromJson(reader);
                } else if ("values".equals(fieldName)) {
                    values = reader.readArray(reader1 -> BatchErrorDetail.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            BatchError deserializedBatchError = new BatchError(code);
            deserializedBatchError.message = message;
            deserializedBatchError.values = values;
            return deserializedBatchError;
        });
    }
}
