// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 * Resource usage statistics for a Job.
 */
@Immutable
public final class BatchJobStatistics implements JsonSerializable<BatchJobStatistics> {

    /*
     * The URL of the statistics.
     */
    @Generated
    private final String url;

    /*
     * The start time of the time range covered by the statistics.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and
     * lastUpdateTime.
     */
    @Generated
    private final OffsetDateTime lastUpdateTime;

    /*
     * The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
     */
    @Generated
    private final Duration userCpuTime;

    /*
     * The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
     */
    @Generated
    private final Duration kernelCpuTime;

    /*
     * The total wall clock time of all Tasks in the Job. The wall clock time is the elapsed time from when the Task
     * started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the
     * Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries.
     */
    @Generated
    private final Duration wallClockTime;

    /*
     * The total number of Tasks successfully completed in the Job during the given time range. A Task completes
     * successfully if it returns exit code 0.
     */
    @Generated
    private final long numSucceededTasks;

    /*
     * The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its
     * maximum retry count without returning exit code 0.
     */
    @Generated
    private final long numFailedTasks;

    /*
     * The total number of retries on all the Tasks in the Job during the given time range.
     */
    @Generated
    private final long numTaskRetries;

    /*
     * The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the
     * creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is
     * the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it
     * is not included in the Job statistics.
     */
    @Generated
    private final Duration waitTime;

    /**
     * Creates an instance of BatchJobStatistics class.
     *
     * @param url the url value to set.
     * @param startTime the startTime value to set.
     * @param lastUpdateTime the lastUpdateTime value to set.
     * @param userCpuTime the userCpuTime value to set.
     * @param kernelCpuTime the kernelCpuTime value to set.
     * @param wallClockTime the wallClockTime value to set.
     * @param readIops the readIops value to set.
     * @param writeIops the writeIops value to set.
     * @param readIoGiB the readIoGiB value to set.
     * @param writeIoGiB the writeIoGiB value to set.
     * @param numSucceededTasks the numSucceededTasks value to set.
     * @param numFailedTasks the numFailedTasks value to set.
     * @param numTaskRetries the numTaskRetries value to set.
     * @param waitTime the waitTime value to set.
     */
    @Generated
    private BatchJobStatistics(String url, OffsetDateTime startTime, OffsetDateTime lastUpdateTime,
        Duration userCpuTime, Duration kernelCpuTime, Duration wallClockTime, long readIops, long writeIops,
        double readIoGiB, double writeIoGiB, long numSucceededTasks, long numFailedTasks, long numTaskRetries,
        Duration waitTime) {
        this.url = url;
        this.startTime = startTime;
        this.lastUpdateTime = lastUpdateTime;
        this.userCpuTime = userCpuTime;
        this.kernelCpuTime = kernelCpuTime;
        this.wallClockTime = wallClockTime;
        this.readIops = readIops;
        this.writeIops = writeIops;
        this.readIoGiB = readIoGiB;
        this.writeIoGiB = writeIoGiB;
        this.numSucceededTasks = numSucceededTasks;
        this.numFailedTasks = numFailedTasks;
        this.numTaskRetries = numTaskRetries;
        this.waitTime = waitTime;
    }

    /**
     * Get the url property: The URL of the statistics.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the startTime property: The start time of the time range covered by the statistics.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the lastUpdateTime property: The time at which the statistics were last updated. All statistics are limited
     * to the range between startTime and lastUpdateTime.
     *
     * @return the lastUpdateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdateTime() {
        return this.lastUpdateTime;
    }

    /**
     * Get the userCpuTime property: The total user mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in the Job.
     *
     * @return the userCpuTime value.
     */
    @Generated
    public Duration getUserCpuTime() {
        return this.userCpuTime;
    }

    /**
     * Get the kernelCpuTime property: The total kernel mode CPU time (summed across all cores and all Compute Nodes)
     * consumed by all Tasks in the Job.
     *
     * @return the kernelCpuTime value.
     */
    @Generated
    public Duration getKernelCpuTime() {
        return this.kernelCpuTime;
    }

    /**
     * Get the wallClockTime property: The total wall clock time of all Tasks in the Job. The wall clock time is the
     * elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the
     * statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall
     * clock time of all the Task retries.
     *
     * @return the wallClockTime value.
     */
    @Generated
    public Duration getWallClockTime() {
        return this.wallClockTime;
    }

    /**
     * Get the numSucceededTasks property: The total number of Tasks successfully completed in the Job during the given
     * time range. A Task completes successfully if it returns exit code 0.
     *
     * @return the numSucceededTasks value.
     */
    @Generated
    public long getNumSucceededTasks() {
        return this.numSucceededTasks;
    }

    /**
     * Get the numFailedTasks property: The total number of Tasks in the Job that failed during the given time range. A
     * Task fails if it exhausts its maximum retry count without returning exit code 0.
     *
     * @return the numFailedTasks value.
     */
    @Generated
    public long getNumFailedTasks() {
        return this.numFailedTasks;
    }

    /**
     * Get the numTaskRetries property: The total number of retries on all the Tasks in the Job during the given time
     * range.
     *
     * @return the numTaskRetries value.
     */
    @Generated
    public long getNumTaskRetries() {
        return this.numTaskRetries;
    }

    /**
     * Get the waitTime property: The total wait time of all Tasks in the Job. The wait time for a Task is defined as
     * the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to
     * failures, the wait time is the time to the most recent Task execution.) This value is only reported in the
     * Account lifetime statistics; it is not included in the Job statistics.
     *
     * @return the waitTime value.
     */
    @Generated
    public Duration getWaitTime() {
        return this.waitTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("lastUpdateTime",
            this.lastUpdateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdateTime));
        jsonWriter.writeStringField("userCPUTime", CoreUtils.durationToStringWithDays(this.userCpuTime));
        jsonWriter.writeStringField("kernelCPUTime", CoreUtils.durationToStringWithDays(this.kernelCpuTime));
        jsonWriter.writeStringField("wallClockTime", CoreUtils.durationToStringWithDays(this.wallClockTime));
        jsonWriter.writeStringField("readIOps", Objects.toString(this.readIops, null));
        jsonWriter.writeStringField("writeIOps", Objects.toString(this.writeIops, null));
        jsonWriter.writeDoubleField("readIOGiB", this.readIoGiB);
        jsonWriter.writeDoubleField("writeIOGiB", this.writeIoGiB);
        jsonWriter.writeStringField("numSucceededTasks", Objects.toString(this.numSucceededTasks, null));
        jsonWriter.writeStringField("numFailedTasks", Objects.toString(this.numFailedTasks, null));
        jsonWriter.writeStringField("numTaskRetries", Objects.toString(this.numTaskRetries, null));
        jsonWriter.writeStringField("waitTime", CoreUtils.durationToStringWithDays(this.waitTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchJobStatistics from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchJobStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchJobStatistics.
     */
    @Generated
    public static BatchJobStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String url = null;
            OffsetDateTime startTime = null;
            OffsetDateTime lastUpdateTime = null;
            Duration userCpuTime = null;
            Duration kernelCpuTime = null;
            Duration wallClockTime = null;
            long readIops = Long.parseLong("0");
            long writeIops = Long.parseLong("0");
            double readIoGiB = 0.0;
            double writeIoGiB = 0.0;
            long numSucceededTasks = Long.parseLong("0");
            long numFailedTasks = Long.parseLong("0");
            long numTaskRetries = Long.parseLong("0");
            Duration waitTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdateTime".equals(fieldName)) {
                    lastUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("userCPUTime".equals(fieldName)) {
                    userCpuTime = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("kernelCPUTime".equals(fieldName)) {
                    kernelCpuTime = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("wallClockTime".equals(fieldName)) {
                    wallClockTime = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("readIOps".equals(fieldName)) {
                    readIops = reader.getNullable(nonNullReader -> Long.parseLong(nonNullReader.getString()));
                } else if ("writeIOps".equals(fieldName)) {
                    writeIops = reader.getNullable(nonNullReader -> Long.parseLong(nonNullReader.getString()));
                } else if ("readIOGiB".equals(fieldName)) {
                    readIoGiB = reader.getDouble();
                } else if ("writeIOGiB".equals(fieldName)) {
                    writeIoGiB = reader.getDouble();
                } else if ("numSucceededTasks".equals(fieldName)) {
                    numSucceededTasks = reader.getNullable(nonNullReader -> Long.parseLong(nonNullReader.getString()));
                } else if ("numFailedTasks".equals(fieldName)) {
                    numFailedTasks = reader.getNullable(nonNullReader -> Long.parseLong(nonNullReader.getString()));
                } else if ("numTaskRetries".equals(fieldName)) {
                    numTaskRetries = reader.getNullable(nonNullReader -> Long.parseLong(nonNullReader.getString()));
                } else if ("waitTime".equals(fieldName)) {
                    waitTime = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return new BatchJobStatistics(url, startTime, lastUpdateTime, userCpuTime, kernelCpuTime, wallClockTime,
                readIops, writeIops, readIoGiB, writeIoGiB, numSucceededTasks, numFailedTasks, numTaskRetries,
                waitTime);
        });
    }

    /*
     * The total number of disk read operations made by all Tasks in the Job.
     */
    @Generated
    private final long readIops;

    /*
     * The total number of disk write operations made by all Tasks in the Job.
     */
    @Generated
    private final long writeIops;

    /**
     * Get the readIops property: The total number of disk read operations made by all Tasks in the Job.
     *
     * @return the readIops value.
     */
    @Generated
    public long getReadIops() {
        return this.readIops;
    }

    /**
     * Get the writeIops property: The total number of disk write operations made by all Tasks in the Job.
     *
     * @return the writeIops value.
     */
    @Generated
    public long getWriteIops() {
        return this.writeIops;
    }

    /*
     * The total amount of data in GiB read from disk by all Tasks in the Job.
     */
    @Generated
    private final double readIoGiB;

    /*
     * The total amount of data in GiB written to disk by all Tasks in the Job.
     */
    @Generated
    private final double writeIoGiB;

    /**
     * Get the readIoGiB property: The total amount of data in GiB read from disk by all Tasks in the Job.
     *
     * @return the readIoGiB value.
     */
    @Generated
    public double getReadIoGiB() {
        return this.readIoGiB;
    }

    /**
     * Get the writeIoGiB property: The total amount of data in GiB written to disk by all Tasks in the Job.
     *
     * @return the writeIoGiB value.
     */
    @Generated
    public double getWriteIoGiB() {
        return this.writeIoGiB;
    }
}
