// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a file on a Compute Node.
 */
@Immutable
public final class FileProperties implements JsonSerializable<FileProperties> {

    /*
     * The file creation time. The creation time is not returned for files on Linux Compute Nodes.
     */
    @Generated
    private OffsetDateTime creationTime;

    /*
     * The time at which the file was last modified.
     */
    @Generated
    private final OffsetDateTime lastModified;

    /*
     * The length of the file.
     */
    @Generated
    private final long contentLength;

    /*
     * The content type of the file.
     */
    @Generated
    private String contentType;

    /*
     * The file mode attribute in octal format. The file mode is returned only for files on Linux Compute Nodes.
     */
    @Generated
    private String fileMode;

    /**
     * Get the creationTime property: The file creation time. The creation time is not returned for files on Linux
     * Compute Nodes.
     *
     * @return the creationTime value.
     */
    @Generated
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the lastModified property: The time at which the file was last modified.
     *
     * @return the lastModified value.
     */
    @Generated
    public OffsetDateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Get the contentLength property: The length of the file.
     *
     * @return the contentLength value.
     */
    @Generated
    public long getContentLength() {
        return this.contentLength;
    }

    /**
     * Get the contentType property: The content type of the file.
     *
     * @return the contentType value.
     */
    @Generated
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the fileMode property: The file mode attribute in octal format. The file mode is returned only for files on
     * Linux Compute Nodes.
     *
     * @return the fileMode value.
     */
    @Generated
    public String getFileMode() {
        return this.fileMode;
    }

    /**
     * Creates an instance of FileProperties class.
     *
     * @param lastModified the lastModified value to set.
     * @param contentLength the contentLength value to set.
     */
    @Generated
    private FileProperties(OffsetDateTime lastModified, long contentLength) {
        this.lastModified = lastModified;
        this.contentLength = contentLength;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastModified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        jsonWriter.writeLongField("contentLength", this.contentLength);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeStringField("fileMode", this.fileMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileProperties.
     */
    public static FileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime lastModified = null;
            long contentLength = 0L;
            OffsetDateTime creationTime = null;
            String contentType = null;
            String fileMode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("lastModified".equals(fieldName)) {
                    lastModified = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("contentLength".equals(fieldName)) {
                    if (reader.currentToken() == JsonToken.STRING) {
                        String contentLengthStr = reader.getString();
                        try {
                            contentLength = Long.parseLong(contentLengthStr);
                        } catch (NumberFormatException e) {
                            throw new IOException("Expected numeric contentLength, but found: " + contentLengthStr, e);
                        }
                    } else if (reader.currentToken() == JsonToken.NUMBER) {
                        contentLength = reader.getLong();
                    } else {
                        throw new IOException("Expected contentLength to be a number or string, but found other type");
                    }
                } else if ("creationTime".equals(fieldName)) {
                    creationTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("contentType".equals(fieldName)) {
                    contentType = reader.getString();
                } else if ("fileMode".equals(fieldName)) {
                    fileMode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FileProperties deserializedFileProperties = new FileProperties(lastModified, contentLength);
            deserializedFileProperties.creationTime = creationTime;
            deserializedFileProperties.contentType = contentType;
            deserializedFileProperties.fileMode = fileMode;
            return deserializedFileProperties;
        });
    }
}
