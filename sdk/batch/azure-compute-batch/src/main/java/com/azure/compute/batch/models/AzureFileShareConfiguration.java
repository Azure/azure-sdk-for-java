// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information used to connect to an Azure Fileshare.
 */
@Fluent
public final class AzureFileShareConfiguration implements JsonSerializable<AzureFileShareConfiguration> {

    /*
     * The Azure Storage account name.
     */
    @Generated
    private final String accountName;

    /*
     * The Azure Files URL. This is of the form 'https://{account}.file.core.windows.net/'.
     */
    @Generated
    private final String azureFileUrl;

    /*
     * The Azure Storage account key.
     */
    @Generated
    private final String accountKey;

    /*
     * The relative path on the compute node where the file system will be mounted. All file systems are mounted
     * relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
     */
    @Generated
    private final String relativeMountPath;

    /*
     * Additional command line options to pass to the mount command. These are 'net use' options in Windows and 'mount'
     * options in Linux.
     */
    @Generated
    private String mountOptions;

    /**
     * Creates an instance of AzureFileShareConfiguration class.
     *
     * @param accountName the accountName value to set.
     * @param azureFileUrl the azureFileUrl value to set.
     * @param accountKey the accountKey value to set.
     * @param relativeMountPath the relativeMountPath value to set.
     */
    @Generated
    public AzureFileShareConfiguration(String accountName, String azureFileUrl, String accountKey,
        String relativeMountPath) {
        this.accountName = accountName;
        this.azureFileUrl = azureFileUrl;
        this.accountKey = accountKey;
        this.relativeMountPath = relativeMountPath;
    }

    /**
     * Get the accountName property: The Azure Storage account name.
     *
     * @return the accountName value.
     */
    @Generated
    public String getAccountName() {
        return this.accountName;
    }

    /**
     * Get the azureFileUrl property: The Azure Files URL. This is of the form
     * 'https://{account}.file.core.windows.net/'.
     *
     * @return the azureFileUrl value.
     */
    @Generated
    public String getAzureFileUrl() {
        return this.azureFileUrl;
    }

    /**
     * Get the accountKey property: The Azure Storage account key.
     *
     * @return the accountKey value.
     */
    @Generated
    public String getAccountKey() {
        return this.accountKey;
    }

    /**
     * Get the relativeMountPath property: The relative path on the compute node where the file system will be mounted.
     * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR
     * environment variable.
     *
     * @return the relativeMountPath value.
     */
    @Generated
    public String getRelativeMountPath() {
        return this.relativeMountPath;
    }

    /**
     * Get the mountOptions property: Additional command line options to pass to the mount command. These are 'net use'
     * options in Windows and 'mount' options in Linux.
     *
     * @return the mountOptions value.
     */
    @Generated
    public String getMountOptions() {
        return this.mountOptions;
    }

    /**
     * Set the mountOptions property: Additional command line options to pass to the mount command. These are 'net use'
     * options in Windows and 'mount' options in Linux.
     *
     * @param mountOptions the mountOptions value to set.
     * @return the AzureFileShareConfiguration object itself.
     */
    @Generated
    public AzureFileShareConfiguration setMountOptions(String mountOptions) {
        this.mountOptions = mountOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountName", this.accountName);
        jsonWriter.writeStringField("azureFileUrl", this.azureFileUrl);
        jsonWriter.writeStringField("accountKey", this.accountKey);
        jsonWriter.writeStringField("relativeMountPath", this.relativeMountPath);
        jsonWriter.writeStringField("mountOptions", this.mountOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureFileShareConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureFileShareConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureFileShareConfiguration.
     */
    @Generated
    public static AzureFileShareConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String accountName = null;
            String azureFileUrl = null;
            String accountKey = null;
            String relativeMountPath = null;
            String mountOptions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("accountName".equals(fieldName)) {
                    accountName = reader.getString();
                } else if ("azureFileUrl".equals(fieldName)) {
                    azureFileUrl = reader.getString();
                } else if ("accountKey".equals(fieldName)) {
                    accountKey = reader.getString();
                } else if ("relativeMountPath".equals(fieldName)) {
                    relativeMountPath = reader.getString();
                } else if ("mountOptions".equals(fieldName)) {
                    mountOptions = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AzureFileShareConfiguration deserializedAzureFileShareConfiguration
                = new AzureFileShareConfiguration(accountName, azureFileUrl, accountKey, relativeMountPath);
            deserializedAzureFileShareConfiguration.mountOptions = mountOptions;
            return deserializedAzureFileShareConfiguration;
        });
    }
}
