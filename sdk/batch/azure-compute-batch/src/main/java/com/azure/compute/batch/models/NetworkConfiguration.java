// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The network configuration for a Pool.
 */
@Fluent
public final class NetworkConfiguration implements JsonSerializable<NetworkConfiguration> {

    /*
     * The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is
     * of the form
     * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{
     * subnet}. The virtual network must be in the same region and subscription as the Azure Batch Account. The
     * specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If
     * the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will
     * occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based
     * Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure
     * Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet
     * has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied
     * by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with
     * virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the
     * specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
     * for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877,
     * as well as port 22 for Linux and port 3389 for Windows. Also enable outbound connections to Azure Storage on port
     * 443. For more details see:
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     */
    @Generated
    private String subnetId;

    /*
     * The scope of dynamic vnet assignment.
     */
    @Generated
    private DynamicVNetAssignmentScope dynamicVNetAssignmentScope;

    /*
     * The configuration for endpoints on Compute Nodes in the Batch Pool. Pool endpoint configuration is only supported
     * on Pools with the virtualMachineConfiguration property.
     */
    @Generated
    private BatchPoolEndpointConfiguration endpointConfiguration;

    /*
     * The Public IPAddress configuration for Compute Nodes in the Batch Pool. Public IP configuration property is only
     * supported on Pools with the virtualMachineConfiguration property.
     */
    @Generated
    private PublicIpAddressConfiguration publicIpAddressConfiguration;

    /*
     * Whether this pool should enable accelerated networking. Accelerated networking enables single root I/O
     * virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see:
     * https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
     */
    @Generated
    private Boolean enableAcceleratedNetworking;

    /**
     * Creates an instance of NetworkConfiguration class.
     */
    @Generated
    public NetworkConfiguration() {
    }

    /**
     * Get the subnetId property: The ARM resource identifier of the virtual network subnet which the Compute Nodes of
     * the Pool will join. This is of the form
     * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
     * The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet
     * should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet
     * doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The
     * 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access
     * Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch
     * service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any
     * associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an
     * NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with
     * virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the
     * specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
     * for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877,
     * as well as port 22 for Linux and port 3389 for Windows. Also enable outbound connections to Azure Storage on port
     * 443. For more details see:
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     *
     * @return the subnetId value.
     */
    @Generated
    public String getSubnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The ARM resource identifier of the virtual network subnet which the Compute Nodes of
     * the Pool will join. This is of the form
     * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
     * The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet
     * should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet
     * doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The
     * 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access
     * Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch
     * service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any
     * associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an
     * NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with
     * virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported. If the
     * specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled
     * for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877,
     * as well as port 22 for Linux and port 3389 for Windows. Also enable outbound connections to Azure Storage on port
     * 443. For more details see:
     * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
     *
     * @param subnetId the subnetId value to set.
     * @return the NetworkConfiguration object itself.
     */
    @Generated
    public NetworkConfiguration setSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the dynamicVNetAssignmentScope property: The scope of dynamic vnet assignment.
     *
     * @return the dynamicVNetAssignmentScope value.
     */
    @Generated
    public DynamicVNetAssignmentScope getDynamicVNetAssignmentScope() {
        return this.dynamicVNetAssignmentScope;
    }

    /**
     * Set the dynamicVNetAssignmentScope property: The scope of dynamic vnet assignment.
     *
     * @param dynamicVNetAssignmentScope the dynamicVNetAssignmentScope value to set.
     * @return the NetworkConfiguration object itself.
     */
    @Generated
    public NetworkConfiguration setDynamicVNetAssignmentScope(DynamicVNetAssignmentScope dynamicVNetAssignmentScope) {
        this.dynamicVNetAssignmentScope = dynamicVNetAssignmentScope;
        return this;
    }

    /**
     * Get the endpointConfiguration property: The configuration for endpoints on Compute Nodes in the Batch Pool. Pool
     * endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @return the endpointConfiguration value.
     */
    @Generated
    public BatchPoolEndpointConfiguration getEndpointConfiguration() {
        return this.endpointConfiguration;
    }

    /**
     * Set the endpointConfiguration property: The configuration for endpoints on Compute Nodes in the Batch Pool. Pool
     * endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @param endpointConfiguration the endpointConfiguration value to set.
     * @return the NetworkConfiguration object itself.
     */
    @Generated
    public NetworkConfiguration setEndpointConfiguration(BatchPoolEndpointConfiguration endpointConfiguration) {
        this.endpointConfiguration = endpointConfiguration;
        return this;
    }

    /**
     * Get the publicIpAddressConfiguration property: The Public IPAddress configuration for Compute Nodes in the Batch
     * Pool. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @return the publicIpAddressConfiguration value.
     */
    @Generated
    public PublicIpAddressConfiguration getPublicIpAddressConfiguration() {
        return this.publicIpAddressConfiguration;
    }

    /**
     * Set the publicIpAddressConfiguration property: The Public IPAddress configuration for Compute Nodes in the Batch
     * Pool. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
     *
     * @param publicIpAddressConfiguration the publicIpAddressConfiguration value to set.
     * @return the NetworkConfiguration object itself.
     */
    @Generated
    public NetworkConfiguration
        setPublicIpAddressConfiguration(PublicIpAddressConfiguration publicIpAddressConfiguration) {
        this.publicIpAddressConfiguration = publicIpAddressConfiguration;
        return this;
    }

    /**
     * Get the enableAcceleratedNetworking property: Whether this pool should enable accelerated networking. Accelerated
     * networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking
     * performance. For more details, see:
     * https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
     *
     * @return the enableAcceleratedNetworking value.
     */
    @Generated
    public Boolean isEnableAcceleratedNetworking() {
        return this.enableAcceleratedNetworking;
    }

    /**
     * Set the enableAcceleratedNetworking property: Whether this pool should enable accelerated networking. Accelerated
     * networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking
     * performance. For more details, see:
     * https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview.
     *
     * @param enableAcceleratedNetworking the enableAcceleratedNetworking value to set.
     * @return the NetworkConfiguration object itself.
     */
    @Generated
    public NetworkConfiguration setEnableAcceleratedNetworking(Boolean enableAcceleratedNetworking) {
        this.enableAcceleratedNetworking = enableAcceleratedNetworking;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("dynamicVNetAssignmentScope",
            this.dynamicVNetAssignmentScope == null ? null : this.dynamicVNetAssignmentScope.toString());
        jsonWriter.writeJsonField("endpointConfiguration", this.endpointConfiguration);
        jsonWriter.writeJsonField("publicIPAddressConfiguration", this.publicIpAddressConfiguration);
        jsonWriter.writeBooleanField("enableAcceleratedNetworking", this.enableAcceleratedNetworking);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkConfiguration.
     */
    @Generated
    public static NetworkConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkConfiguration deserializedNetworkConfiguration = new NetworkConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("subnetId".equals(fieldName)) {
                    deserializedNetworkConfiguration.subnetId = reader.getString();
                } else if ("dynamicVNetAssignmentScope".equals(fieldName)) {
                    deserializedNetworkConfiguration.dynamicVNetAssignmentScope
                        = DynamicVNetAssignmentScope.fromString(reader.getString());
                } else if ("endpointConfiguration".equals(fieldName)) {
                    deserializedNetworkConfiguration.endpointConfiguration
                        = BatchPoolEndpointConfiguration.fromJson(reader);
                } else if ("publicIPAddressConfiguration".equals(fieldName)) {
                    deserializedNetworkConfiguration.publicIpAddressConfiguration
                        = PublicIpAddressConfiguration.fromJson(reader);
                } else if ("enableAcceleratedNetworking".equals(fieldName)) {
                    deserializedNetworkConfiguration.enableAcceleratedNetworking
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedNetworkConfiguration;
        });
    }
}
