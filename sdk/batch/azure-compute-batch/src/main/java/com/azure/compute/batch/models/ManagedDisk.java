// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The managed disk parameters.
 */
@Immutable
public final class ManagedDisk implements JsonSerializable<ManagedDisk> {

    /*
     * The storage account type for managed disk.
     */
    @Generated
    private final StorageAccountType storageAccountType;

    /**
     * Creates an instance of ManagedDisk class.
     *
     * @param storageAccountType the storageAccountType value to set.
     */
    @Generated
    public ManagedDisk(StorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
    }

    /**
     * Get the storageAccountType property: The storage account type for managed disk.
     *
     * @return the storageAccountType value.
     */
    @Generated
    public StorageAccountType getStorageAccountType() {
        return this.storageAccountType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedDisk from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedDisk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedDisk.
     */
    @Generated
    public static ManagedDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageAccountType storageAccountType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("storageAccountType".equals(fieldName)) {
                    storageAccountType = StorageAccountType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new ManagedDisk(storageAccountType);
        });
    }
}
