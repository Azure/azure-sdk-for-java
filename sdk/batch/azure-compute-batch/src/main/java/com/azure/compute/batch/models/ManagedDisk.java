// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The managed disk parameters.
 */
@Fluent
public final class ManagedDisk implements JsonSerializable<ManagedDisk> {

    /*
     * The storage account type for managed disk.
     */
    @Generated
    private StorageAccountType storageAccountType;

    /**
     * Get the storageAccountType property: The storage account type for managed disk.
     *
     * @return the storageAccountType value.
     */
    @Generated
    public StorageAccountType getStorageAccountType() {
        return this.storageAccountType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountType",
            this.storageAccountType == null ? null : this.storageAccountType.toString());
        jsonWriter.writeJsonField("securityProfile", this.securityProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedDisk from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedDisk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedDisk.
     */
    @Generated
    public static ManagedDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedDisk deserializedManagedDisk = new ManagedDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("storageAccountType".equals(fieldName)) {
                    deserializedManagedDisk.storageAccountType = StorageAccountType.fromString(reader.getString());
                } else if ("securityProfile".equals(fieldName)) {
                    deserializedManagedDisk.securityProfile = VMDiskSecurityProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedManagedDisk;
        });
    }

    /*
     * Specifies the security profile settings for the managed disk.
     */
    @Generated
    private VMDiskSecurityProfile securityProfile;

    /**
     * Creates an instance of ManagedDisk class.
     */
    @Generated
    public ManagedDisk() {
    }

    /**
     * Set the storageAccountType property: The storage account type for managed disk.
     *
     * @param storageAccountType the storageAccountType value to set.
     * @return the ManagedDisk object itself.
     */
    @Generated
    public ManagedDisk setStorageAccountType(StorageAccountType storageAccountType) {
        this.storageAccountType = storageAccountType;
        return this;
    }

    /**
     * Get the securityProfile property: Specifies the security profile settings for the managed disk.
     *
     * @return the securityProfile value.
     */
    @Generated
    public VMDiskSecurityProfile getSecurityProfile() {
        return this.securityProfile;
    }

    /**
     * Set the securityProfile property: Specifies the security profile settings for the managed disk.
     *
     * @param securityProfile the securityProfile value to set.
     * @return the ManagedDisk object itself.
     */
    @Generated
    public ManagedDisk setSecurityProfile(VMDiskSecurityProfile securityProfile) {
        this.securityProfile = securityProfile;
        return this;
    }
}
