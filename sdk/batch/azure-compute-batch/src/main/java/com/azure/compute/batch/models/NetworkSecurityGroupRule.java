// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A network security group rule to apply to an inbound endpoint.
 */
@Fluent
public final class NetworkSecurityGroupRule implements JsonSerializable<NetworkSecurityGroupRule> {

    /*
     * The priority for this rule. Priorities within a Pool must be unique and are evaluated in order of priority. The
     * lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250,
     * and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed
     * priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status
     * code 400.
     */
    @Generated
    private final int priority;

    /*
     * The action that should be taken for a specified IP address, subnet range or tag.
     */
    @Generated
    private final NetworkSecurityGroupRuleAccess access;

    /*
     * The source address prefix or tag to match for the rule. Valid values are a single IP address (i.e. 10.10.10.10),
     * IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses). If any other values are provided the
     * request fails with HTTP status code 400.
     */
    @Generated
    private final String sourceAddressPrefix;

    /*
     * The source port ranges to match for the rule. Valid values are '*' (for all ports 0 - 65535), a specific port
     * (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this
     * collection must not overlap any other entry (either a range or an individual port). If any other values are
     * provided the request fails with HTTP status code 400. The default value is '*'.
     */
    @Generated
    private List<String> sourcePortRanges;

    /**
     * Creates an instance of NetworkSecurityGroupRule class.
     *
     * @param priority the priority value to set.
     * @param access the access value to set.
     * @param sourceAddressPrefix the sourceAddressPrefix value to set.
     */
    @Generated
    public NetworkSecurityGroupRule(int priority, NetworkSecurityGroupRuleAccess access, String sourceAddressPrefix) {
        this.priority = priority;
        this.access = access;
        this.sourceAddressPrefix = sourceAddressPrefix;
    }

    /**
     * Get the priority property: The priority for this rule. Priorities within a Pool must be unique and are evaluated
     * in order of priority. The lower the number the higher the priority. For example, rules could be specified with
     * order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has
     * an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request
     * fails with HTTP status code 400.
     *
     * @return the priority value.
     */
    @Generated
    public int getPriority() {
        return this.priority;
    }

    /**
     * Get the access property: The action that should be taken for a specified IP address, subnet range or tag.
     *
     * @return the access value.
     */
    @Generated
    public NetworkSecurityGroupRuleAccess getAccess() {
        return this.access;
    }

    /**
     * Get the sourceAddressPrefix property: The source address prefix or tag to match for the rule. Valid values are a
     * single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses). If
     * any other values are provided the request fails with HTTP status code 400.
     *
     * @return the sourceAddressPrefix value.
     */
    @Generated
    public String getSourceAddressPrefix() {
        return this.sourceAddressPrefix;
    }

    /**
     * Get the sourcePortRanges property: The source port ranges to match for the rule. Valid values are '*' (for all
     * ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0
     * to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port).
     * If any other values are provided the request fails with HTTP status code 400. The default value is '*'.
     *
     * @return the sourcePortRanges value.
     */
    @Generated
    public List<String> getSourcePortRanges() {
        return this.sourcePortRanges;
    }

    /**
     * Set the sourcePortRanges property: The source port ranges to match for the rule. Valid values are '*' (for all
     * ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0
     * to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port).
     * If any other values are provided the request fails with HTTP status code 400. The default value is '*'.
     *
     * @param sourcePortRanges the sourcePortRanges value to set.
     * @return the NetworkSecurityGroupRule object itself.
     */
    @Generated
    public NetworkSecurityGroupRule setSourcePortRanges(List<String> sourcePortRanges) {
        this.sourcePortRanges = sourcePortRanges;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("priority", this.priority);
        jsonWriter.writeStringField("access", this.access == null ? null : this.access.toString());
        jsonWriter.writeStringField("sourceAddressPrefix", this.sourceAddressPrefix);
        jsonWriter.writeArrayField("sourcePortRanges", this.sourcePortRanges,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkSecurityGroupRule from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkSecurityGroupRule if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NetworkSecurityGroupRule.
     */
    @Generated
    public static NetworkSecurityGroupRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int priority = 0;
            NetworkSecurityGroupRuleAccess access = null;
            String sourceAddressPrefix = null;
            List<String> sourcePortRanges = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("priority".equals(fieldName)) {
                    priority = reader.getInt();
                } else if ("access".equals(fieldName)) {
                    access = NetworkSecurityGroupRuleAccess.fromString(reader.getString());
                } else if ("sourceAddressPrefix".equals(fieldName)) {
                    sourceAddressPrefix = reader.getString();
                } else if ("sourcePortRanges".equals(fieldName)) {
                    sourcePortRanges = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            NetworkSecurityGroupRule deserializedNetworkSecurityGroupRule
                = new NetworkSecurityGroupRule(priority, access, sourceAddressPrefix);
            deserializedNetworkSecurityGroupRule.sourcePortRanges = sourcePortRanges;
            return deserializedNetworkSecurityGroupRule;
        });
    }
}
