// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The number of Compute Nodes in each Compute Node state.
 */
@Immutable
public final class BatchNodeCounts {

    /*
     * The number of Compute Nodes in the creating state.
     */
    @Generated
    @JsonProperty(value = "creating")
    private final int creating;

    /*
     * The number of Compute Nodes in the idle state.
     */
    @Generated
    @JsonProperty(value = "idle")
    private final int idle;

    /*
     * The number of Compute Nodes in the offline state.
     */
    @Generated
    @JsonProperty(value = "offline")
    private final int offline;

    /*
     * The number of Compute Nodes in the preempted state.
     */
    @Generated
    @JsonProperty(value = "preempted")
    private final int preempted;

    /*
     * The count of Compute Nodes in the rebooting state.
     */
    @Generated
    @JsonProperty(value = "rebooting")
    private final int rebooting;

    /*
     * The number of Compute Nodes in the reimaging state.
     */
    @Generated
    @JsonProperty(value = "reimaging")
    private final int reimaging;

    /*
     * The number of Compute Nodes in the running state.
     */
    @Generated
    @JsonProperty(value = "running")
    private final int running;

    /*
     * The number of Compute Nodes in the starting state.
     */
    @Generated
    @JsonProperty(value = "starting")
    private final int starting;

    /*
     * The number of Compute Nodes in the startTaskFailed state.
     */
    @Generated
    @JsonProperty(value = "startTaskFailed")
    private final int startTaskFailed;

    /*
     * The number of Compute Nodes in the leavingPool state.
     */
    @Generated
    @JsonProperty(value = "leavingPool")
    private final int leavingPool;

    /*
     * The number of Compute Nodes in the unknown state.
     */
    @Generated
    @JsonProperty(value = "unknown")
    private final int unknown;

    /*
     * The number of Compute Nodes in the unusable state.
     */
    @Generated
    @JsonProperty(value = "unusable")
    private final int unusable;

    /*
     * The number of Compute Nodes in the waitingForStartTask state.
     */
    @Generated
    @JsonProperty(value = "waitingForStartTask")
    private final int waitingForStartTask;

    /*
     * The total number of Compute Nodes.
     */
    @Generated
    @JsonProperty(value = "total")
    private final int total;

    /**
     * Get the creating property: The number of Compute Nodes in the creating state.
     *
     * @return the creating value.
     */
    @Generated
    public int getCreating() {
        return this.creating;
    }

    /**
     * Get the idle property: The number of Compute Nodes in the idle state.
     *
     * @return the idle value.
     */
    @Generated
    public int getIdle() {
        return this.idle;
    }

    /**
     * Get the offline property: The number of Compute Nodes in the offline state.
     *
     * @return the offline value.
     */
    @Generated
    public int getOffline() {
        return this.offline;
    }

    /**
     * Get the preempted property: The number of Compute Nodes in the preempted state.
     *
     * @return the preempted value.
     */
    @Generated
    public int getPreempted() {
        return this.preempted;
    }

    /**
     * Get the rebooting property: The count of Compute Nodes in the rebooting state.
     *
     * @return the rebooting value.
     */
    @Generated
    public int getRebooting() {
        return this.rebooting;
    }

    /**
     * Get the reimaging property: The number of Compute Nodes in the reimaging state.
     *
     * @return the reimaging value.
     */
    @Generated
    public int getReimaging() {
        return this.reimaging;
    }

    /**
     * Get the running property: The number of Compute Nodes in the running state.
     *
     * @return the running value.
     */
    @Generated
    public int getRunning() {
        return this.running;
    }

    /**
     * Get the starting property: The number of Compute Nodes in the starting state.
     *
     * @return the starting value.
     */
    @Generated
    public int getStarting() {
        return this.starting;
    }

    /**
     * Get the startTaskFailed property: The number of Compute Nodes in the startTaskFailed state.
     *
     * @return the startTaskFailed value.
     */
    @Generated
    public int getStartTaskFailed() {
        return this.startTaskFailed;
    }

    /**
     * Get the leavingPool property: The number of Compute Nodes in the leavingPool state.
     *
     * @return the leavingPool value.
     */
    @Generated
    public int getLeavingPool() {
        return this.leavingPool;
    }

    /**
     * Get the unknown property: The number of Compute Nodes in the unknown state.
     *
     * @return the unknown value.
     */
    @Generated
    public int getUnknown() {
        return this.unknown;
    }

    /**
     * Get the unusable property: The number of Compute Nodes in the unusable state.
     *
     * @return the unusable value.
     */
    @Generated
    public int getUnusable() {
        return this.unusable;
    }

    /**
     * Get the waitingForStartTask property: The number of Compute Nodes in the waitingForStartTask state.
     *
     * @return the waitingForStartTask value.
     */
    @Generated
    public int getWaitingForStartTask() {
        return this.waitingForStartTask;
    }

    /**
     * Get the total property: The total number of Compute Nodes.
     *
     * @return the total value.
     */
    @Generated
    public int getTotal() {
        return this.total;
    }

    /*
     * The number of Compute Nodes in the upgradingOS state.
     */
    @Generated
    @JsonProperty(value = "upgradingOs")
    private final int upgradingOS;

    /**
     * Creates an instance of BatchNodeCounts class.
     *
     * @param creating the creating value to set.
     * @param idle the idle value to set.
     * @param offline the offline value to set.
     * @param preempted the preempted value to set.
     * @param rebooting the rebooting value to set.
     * @param reimaging the reimaging value to set.
     * @param running the running value to set.
     * @param starting the starting value to set.
     * @param startTaskFailed the startTaskFailed value to set.
     * @param leavingPool the leavingPool value to set.
     * @param unknown the unknown value to set.
     * @param unusable the unusable value to set.
     * @param waitingForStartTask the waitingForStartTask value to set.
     * @param total the total value to set.
     * @param upgradingOS the upgradingOS value to set.
     */
    @Generated
    @JsonCreator
    private BatchNodeCounts(@JsonProperty(value = "creating") int creating, @JsonProperty(value = "idle") int idle,
        @JsonProperty(value = "offline") int offline, @JsonProperty(value = "preempted") int preempted,
        @JsonProperty(value = "rebooting") int rebooting, @JsonProperty(value = "reimaging") int reimaging,
        @JsonProperty(value = "running") int running, @JsonProperty(value = "starting") int starting,
        @JsonProperty(value = "startTaskFailed") int startTaskFailed,
        @JsonProperty(value = "leavingPool") int leavingPool, @JsonProperty(value = "unknown") int unknown,
        @JsonProperty(value = "unusable") int unusable,
        @JsonProperty(value = "waitingForStartTask") int waitingForStartTask, @JsonProperty(value = "total") int total,
        @JsonProperty(value = "upgradingOs") int upgradingOS) {
        this.creating = creating;
        this.idle = idle;
        this.offline = offline;
        this.preempted = preempted;
        this.rebooting = rebooting;
        this.reimaging = reimaging;
        this.running = running;
        this.starting = starting;
        this.startTaskFailed = startTaskFailed;
        this.leavingPool = leavingPool;
        this.unknown = unknown;
        this.unusable = unusable;
        this.waitingForStartTask = waitingForStartTask;
        this.total = total;
        this.upgradingOS = upgradingOS;
    }

    /**
     * Get the upgradingOS property: The number of Compute Nodes in the upgradingOS state.
     *
     * @return the upgradingOS value.
     */
    @Generated
    public int getUpgradingOS() {
        return this.upgradingOS;
    }
}
