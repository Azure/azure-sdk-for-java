// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * On every file uploads, Batch service writes two log files to the compute node, 'fileuploadout.txt' and
 * 'fileuploaderr.txt'. These log files are used to learn more about a specific failure.
 */
@Immutable
public final class OutputFile {
    /*
     * Both relative and absolute paths are supported. Relative paths are relative to
     * the Task working directory. The following wildcards are supported: * matches 0
     * or more characters (for example pattern abc* would match abc or abcdef), **
     * matches any directory, ? matches any single character, [abc] matches one
     * character in the brackets, and [a-c] matches one character in the range.
     * Brackets can include a negation to match any character not specified (for
     * example [!abc] matches any character but a, b, or c). If a file name starts
     * with "." it is ignored by default but may be matched by specifying it
     * explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple
     * example: **\*.txt matches any file that does not start in '.' and ends with
     * .txt in the Task working directory or any subdirectory. If the filename
     * contains a wildcard character it can be escaped using brackets (for example
     * abc[*] would match a file named abc*). Note that both \ and / are treated as
     * directory separators on Windows, but only / is on Linux. Environment variables
     * (%var% on Windows or $var on Linux) are expanded prior to the pattern being
     * applied.
     */
    @JsonProperty(value = "filePattern", required = true)
    private String filePattern;

    /*
     * The destination to which a file should be uploaded.
     */
    @JsonProperty(value = "destination", required = true)
    private OutputFileDestination destination;

    /*
     * Details about an output file upload operation, including under what conditions
     * to perform the upload.
     */
    @JsonProperty(value = "uploadOptions", required = true)
    private OutputFileUploadOptions uploadOptions;

    /**
     * Creates an instance of OutputFile class.
     *
     * @param filePattern the filePattern value to set.
     * @param destination the destination value to set.
     * @param uploadOptions the uploadOptions value to set.
     */
    @JsonCreator
    public OutputFile(
            @JsonProperty(value = "filePattern", required = true) String filePattern,
            @JsonProperty(value = "destination", required = true) OutputFileDestination destination,
            @JsonProperty(value = "uploadOptions", required = true) OutputFileUploadOptions uploadOptions) {
        this.filePattern = filePattern;
        this.destination = destination;
        this.uploadOptions = uploadOptions;
    }

    /**
     * Get the filePattern property: Both relative and absolute paths are supported. Relative paths are relative to the
     * Task working directory. The following wildcards are supported: * matches 0 or more characters (for example
     * pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches
     * one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to
     * match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name
     * starts with "." it is ignored by default but may be matched by specifying it explicitly (for example *.gif will
     * not match .a.gif, but .*.gif will). A simple example: **\*.txt matches any file that does not start in '.' and
     * ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character
     * it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are
     * treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or
     * $var on Linux) are expanded prior to the pattern being applied.
     *
     * @return the filePattern value.
     */
    public String getFilePattern() {
        return this.filePattern;
    }

    /**
     * Get the destination property: The destination to which a file should be uploaded.
     *
     * @return the destination value.
     */
    public OutputFileDestination getDestination() {
        return this.destination;
    }

    /**
     * Get the uploadOptions property: Details about an output file upload operation, including under what conditions to
     * perform the upload.
     *
     * @return the uploadOptions value.
     */
    public OutputFileUploadOptions getUploadOptions() {
        return this.uploadOptions;
    }
}
