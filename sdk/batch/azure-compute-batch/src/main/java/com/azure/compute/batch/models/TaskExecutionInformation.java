// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Information about the execution of a Task. */
@Fluent
public final class TaskExecutionInformation {
    /*
     * 'Running' corresponds to the running state, so if the Task specifies resource
     * files or Packages, then the start time reflects the time at which the Task
     * started downloading or deploying these. If the Task has been restarted or
     * retried, this is the most recent time at which the Task started running. This
     * property is present only for Tasks that are in the running or completed state.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * This property is set only if the Task is in the Completed state.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * This property is set only if the Task is in the completed state. In general,
     * the exit code for a process reflects the specific convention implemented by the
     * application developer for that process. If you use the exit code value to make
     * decisions in your code, be sure that you know the exit code convention used by
     * the application process. However, if the Batch service terminates the Task (due
     * to timeout, or user termination via the API) you may see an operating
     * system-defined exit code.
     */
    @JsonProperty(value = "exitCode")
    private Integer exitCode;

    /*
     * This property is set only if the Task runs in a container context.
     */
    @JsonProperty(value = "containerInfo")
    private TaskContainerExecutionInformation containerInfo;

    /*
     * This property is set only if the Task is in the completed state and encountered
     * a failure.
     */
    @JsonProperty(value = "failureInfo")
    private TaskFailureInformation failureInfo;

    /*
     * Task application failures (non-zero exit code) are retried, pre-processing
     * errors (the Task could not be run) and file upload errors are not retried. The
     * Batch service will retry the Task up to the limit specified by the constraints.
     */
    @JsonProperty(value = "retryCount", required = true)
    private int retryCount;

    /*
     * This element is present only if the Task was retried (i.e. retryCount is
     * nonzero). If present, this is typically the same as startTime, but may be
     * different if the Task has been restarted for reasons other than retry; for
     * example, if the Compute Node was rebooted during a retry, then the startTime is
     * updated but the lastRetryTime is not.
     */
    @JsonProperty(value = "lastRetryTime")
    private OffsetDateTime lastRetryTime;

    /*
     * When the user removes Compute Nodes from a Pool (by resizing/shrinking the
     * pool) or when the Job is being disabled, the user can specify that running
     * Tasks on the Compute Nodes be requeued for execution. This count tracks how
     * many times the Task has been requeued for these reasons.
     */
    @JsonProperty(value = "requeueCount", required = true)
    private int requeueCount;

    /*
     * This property is set only if the requeueCount is nonzero.
     */
    @JsonProperty(value = "lastRequeueTime")
    private OffsetDateTime lastRequeueTime;

    /*
     * If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     */
    @JsonProperty(value = "result")
    private TaskExecutionResult result;

    /**
     * Creates an instance of TaskExecutionInformation class.
     *
     * @param retryCount the retryCount value to set.
     * @param requeueCount the requeueCount value to set.
     */
    @JsonCreator
    public TaskExecutionInformation(
            @JsonProperty(value = "retryCount", required = true) int retryCount,
            @JsonProperty(value = "requeueCount", required = true) int requeueCount) {
        this.retryCount = retryCount;
        this.requeueCount = requeueCount;
    }

    /**
     * Get the startTime property: 'Running' corresponds to the running state, so if the Task specifies resource files
     * or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
     * the Task has been restarted or retried, this is the most recent time at which the Task started running. This
     * property is present only for Tasks that are in the running or completed state.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: 'Running' corresponds to the running state, so if the Task specifies resource files
     * or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If
     * the Task has been restarted or retried, this is the most recent time at which the Task started running. This
     * property is present only for Tasks that are in the running or completed state.
     *
     * @param startTime the startTime value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: This property is set only if the Task is in the Completed state.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: This property is set only if the Task is in the Completed state.
     *
     * @param endTime the endTime value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the exitCode property: This property is set only if the Task is in the completed state. In general, the exit
     * code for a process reflects the specific convention implemented by the application developer for that process. If
     * you use the exit code value to make decisions in your code, be sure that you know the exit code convention used
     * by the application process. However, if the Batch service terminates the Task (due to timeout, or user
     * termination via the API) you may see an operating system-defined exit code.
     *
     * @return the exitCode value.
     */
    public Integer getExitCode() {
        return this.exitCode;
    }

    /**
     * Set the exitCode property: This property is set only if the Task is in the completed state. In general, the exit
     * code for a process reflects the specific convention implemented by the application developer for that process. If
     * you use the exit code value to make decisions in your code, be sure that you know the exit code convention used
     * by the application process. However, if the Batch service terminates the Task (due to timeout, or user
     * termination via the API) you may see an operating system-defined exit code.
     *
     * @param exitCode the exitCode value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setExitCode(Integer exitCode) {
        this.exitCode = exitCode;
        return this;
    }

    /**
     * Get the containerInfo property: This property is set only if the Task runs in a container context.
     *
     * @return the containerInfo value.
     */
    public TaskContainerExecutionInformation getContainerInfo() {
        return this.containerInfo;
    }

    /**
     * Set the containerInfo property: This property is set only if the Task runs in a container context.
     *
     * @param containerInfo the containerInfo value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setContainerInfo(TaskContainerExecutionInformation containerInfo) {
        this.containerInfo = containerInfo;
        return this;
    }

    /**
     * Get the failureInfo property: This property is set only if the Task is in the completed state and encountered a
     * failure.
     *
     * @return the failureInfo value.
     */
    public TaskFailureInformation getFailureInfo() {
        return this.failureInfo;
    }

    /**
     * Set the failureInfo property: This property is set only if the Task is in the completed state and encountered a
     * failure.
     *
     * @param failureInfo the failureInfo value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setFailureInfo(TaskFailureInformation failureInfo) {
        this.failureInfo = failureInfo;
        return this;
    }

    /**
     * Get the retryCount property: Task application failures (non-zero exit code) are retried, pre-processing errors
     * (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to
     * the limit specified by the constraints.
     *
     * @return the retryCount value.
     */
    public int getRetryCount() {
        return this.retryCount;
    }

    /**
     * Get the lastRetryTime property: This element is present only if the Task was retried (i.e. retryCount is
     * nonzero). If present, this is typically the same as startTime, but may be different if the Task has been
     * restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the
     * startTime is updated but the lastRetryTime is not.
     *
     * @return the lastRetryTime value.
     */
    public OffsetDateTime getLastRetryTime() {
        return this.lastRetryTime;
    }

    /**
     * Set the lastRetryTime property: This element is present only if the Task was retried (i.e. retryCount is
     * nonzero). If present, this is typically the same as startTime, but may be different if the Task has been
     * restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the
     * startTime is updated but the lastRetryTime is not.
     *
     * @param lastRetryTime the lastRetryTime value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setLastRetryTime(OffsetDateTime lastRetryTime) {
        this.lastRetryTime = lastRetryTime;
        return this;
    }

    /**
     * Get the requeueCount property: When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool)
     * or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for
     * execution. This count tracks how many times the Task has been requeued for these reasons.
     *
     * @return the requeueCount value.
     */
    public int getRequeueCount() {
        return this.requeueCount;
    }

    /**
     * Get the lastRequeueTime property: This property is set only if the requeueCount is nonzero.
     *
     * @return the lastRequeueTime value.
     */
    public OffsetDateTime getLastRequeueTime() {
        return this.lastRequeueTime;
    }

    /**
     * Set the lastRequeueTime property: This property is set only if the requeueCount is nonzero.
     *
     * @param lastRequeueTime the lastRequeueTime value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setLastRequeueTime(OffsetDateTime lastRequeueTime) {
        this.lastRequeueTime = lastRequeueTime;
        return this;
    }

    /**
     * Get the result property: If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     *
     * @return the result value.
     */
    public TaskExecutionResult getResult() {
        return this.result;
    }

    /**
     * Set the result property: If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     *
     * @param result the result value to set.
     * @return the TaskExecutionInformation object itself.
     */
    public TaskExecutionInformation setResult(TaskExecutionResult result) {
        this.result = result;
        return this;
    }
}
