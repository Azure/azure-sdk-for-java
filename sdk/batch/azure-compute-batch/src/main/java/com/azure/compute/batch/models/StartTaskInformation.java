// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Information about a StartTask running on a Compute Node. */
@Immutable
public final class StartTaskInformation {
    /*
     * The state of the StartTask on the Compute Node.
     */
    @JsonProperty(value = "state", required = true)
    private StartTaskState state;

    /*
     * This value is reset every time the Task is restarted or retried (that is, this
     * is the most recent time at which the StartTask started running).
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * This is the end time of the most recent run of the StartTask, if that run has
     * completed (even if that run failed and a retry is pending). This element is not
     * present if the StartTask is currently running.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * This property is set only if the StartTask is in the completed state. In
     * general, the exit code for a process reflects the specific convention
     * implemented by the application developer for that process. If you use the exit
     * code value to make decisions in your code, be sure that you know the exit code
     * convention used by the application process. However, if the Batch service
     * terminates the StartTask (due to timeout, or user termination via the API) you
     * may see an operating system-defined exit code.
     */
    @JsonProperty(value = "exitCode")
    private Integer exitCode;

    /*
     * This property is set only if the Task runs in a container context.
     */
    @JsonProperty(value = "containerInfo")
    private TaskContainerExecutionInformation containerInfo;

    /*
     * This property is set only if the Task is in the completed state and encountered
     * a failure.
     */
    @JsonProperty(value = "failureInfo")
    private TaskFailureInformation failureInfo;

    /*
     * Task application failures (non-zero exit code) are retried, pre-processing
     * errors (the Task could not be run) and file upload errors are not retried. The
     * Batch service will retry the Task up to the limit specified by the constraints.
     */
    @JsonProperty(value = "retryCount", required = true)
    private int retryCount;

    /*
     * This element is present only if the Task was retried (i.e. retryCount is
     * nonzero). If present, this is typically the same as startTime, but may be
     * different if the Task has been restarted for reasons other than retry; for
     * example, if the Compute Node was rebooted during a retry, then the startTime is
     * updated but the lastRetryTime is not.
     */
    @JsonProperty(value = "lastRetryTime")
    private OffsetDateTime lastRetryTime;

    /*
     * If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     */
    @JsonProperty(value = "result")
    private TaskExecutionResult result;

    /**
     * Creates an instance of StartTaskInformation class.
     *
     * @param state the state value to set.
     * @param startTime the startTime value to set.
     * @param retryCount the retryCount value to set.
     */
    @JsonCreator
    private StartTaskInformation(
            @JsonProperty(value = "state", required = true) StartTaskState state,
            @JsonProperty(value = "startTime", required = true) OffsetDateTime startTime,
            @JsonProperty(value = "retryCount", required = true) int retryCount) {
        this.state = state;
        this.startTime = startTime;
        this.retryCount = retryCount;
    }

    /**
     * Get the state property: The state of the StartTask on the Compute Node.
     *
     * @return the state value.
     */
    public StartTaskState getState() {
        return this.state;
    }

    /**
     * Get the startTime property: This value is reset every time the Task is restarted or retried (that is, this is the
     * most recent time at which the StartTask started running).
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: This is the end time of the most recent run of the StartTask, if that run has completed
     * (even if that run failed and a retry is pending). This element is not present if the StartTask is currently
     * running.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the exitCode property: This property is set only if the StartTask is in the completed state. In general, the
     * exit code for a process reflects the specific convention implemented by the application developer for that
     * process. If you use the exit code value to make decisions in your code, be sure that you know the exit code
     * convention used by the application process. However, if the Batch service terminates the StartTask (due to
     * timeout, or user termination via the API) you may see an operating system-defined exit code.
     *
     * @return the exitCode value.
     */
    public Integer getExitCode() {
        return this.exitCode;
    }

    /**
     * Get the containerInfo property: This property is set only if the Task runs in a container context.
     *
     * @return the containerInfo value.
     */
    public TaskContainerExecutionInformation getContainerInfo() {
        return this.containerInfo;
    }

    /**
     * Get the failureInfo property: This property is set only if the Task is in the completed state and encountered a
     * failure.
     *
     * @return the failureInfo value.
     */
    public TaskFailureInformation getFailureInfo() {
        return this.failureInfo;
    }

    /**
     * Get the retryCount property: Task application failures (non-zero exit code) are retried, pre-processing errors
     * (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to
     * the limit specified by the constraints.
     *
     * @return the retryCount value.
     */
    public int getRetryCount() {
        return this.retryCount;
    }

    /**
     * Get the lastRetryTime property: This element is present only if the Task was retried (i.e. retryCount is
     * nonzero). If present, this is typically the same as startTime, but may be different if the Task has been
     * restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the
     * startTime is updated but the lastRetryTime is not.
     *
     * @return the lastRetryTime value.
     */
    public OffsetDateTime getLastRetryTime() {
        return this.lastRetryTime;
    }

    /**
     * Get the result property: If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     *
     * @return the result value.
     */
    public TaskExecutionResult getResult() {
        return this.result;
    }
}
