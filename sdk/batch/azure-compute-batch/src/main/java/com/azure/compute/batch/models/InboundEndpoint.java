// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An inbound endpoint on a Compute Node.
 */
@Immutable
public final class InboundEndpoint implements JsonSerializable<InboundEndpoint> {

    /*
     * The name of the endpoint.
     */
    @Generated
    private final String name;

    /*
     * The protocol of the endpoint.
     */
    @Generated
    private final InboundEndpointProtocol protocol;

    /*
     * The public IP address of the Compute Node.
     */
    @Generated
    private final String publicIpAddress;

    /*
     * The public fully qualified domain name for the Compute Node.
     */
    @Generated
    private final String publicFQDN;

    /*
     * The public port number of the endpoint.
     */
    @Generated
    private final int frontendPort;

    /*
     * The backend port number of the endpoint.
     */
    @Generated
    private final int backendPort;

    /**
     * Creates an instance of InboundEndpoint class.
     *
     * @param name the name value to set.
     * @param protocol the protocol value to set.
     * @param publicIpAddress the publicIpAddress value to set.
     * @param publicFQDN the publicFQDN value to set.
     * @param frontendPort the frontendPort value to set.
     * @param backendPort the backendPort value to set.
     */
    @Generated
    private InboundEndpoint(String name, InboundEndpointProtocol protocol, String publicIpAddress, String publicFQDN,
        int frontendPort, int backendPort) {
        this.name = name;
        this.protocol = protocol;
        this.publicIpAddress = publicIpAddress;
        this.publicFQDN = publicFQDN;
        this.frontendPort = frontendPort;
        this.backendPort = backendPort;
    }

    /**
     * Get the name property: The name of the endpoint.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the protocol property: The protocol of the endpoint.
     *
     * @return the protocol value.
     */
    @Generated
    public InboundEndpointProtocol getProtocol() {
        return this.protocol;
    }

    /**
     * Get the publicIpAddress property: The public IP address of the Compute Node.
     *
     * @return the publicIpAddress value.
     */
    @Generated
    public String getPublicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * Get the publicFQDN property: The public fully qualified domain name for the Compute Node.
     *
     * @return the publicFQDN value.
     */
    @Generated
    public String getPublicFQDN() {
        return this.publicFQDN;
    }

    /**
     * Get the frontendPort property: The public port number of the endpoint.
     *
     * @return the frontendPort value.
     */
    @Generated
    public int getFrontendPort() {
        return this.frontendPort;
    }

    /**
     * Get the backendPort property: The backend port number of the endpoint.
     *
     * @return the backendPort value.
     */
    @Generated
    public int getBackendPort() {
        return this.backendPort;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("publicIPAddress", this.publicIpAddress);
        jsonWriter.writeStringField("publicFQDN", this.publicFQDN);
        jsonWriter.writeIntField("frontendPort", this.frontendPort);
        jsonWriter.writeIntField("backendPort", this.backendPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InboundEndpoint from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InboundEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InboundEndpoint.
     */
    @Generated
    public static InboundEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            InboundEndpointProtocol protocol = null;
            String publicIpAddress = null;
            String publicFQDN = null;
            int frontendPort = 0;
            int backendPort = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    protocol = InboundEndpointProtocol.fromString(reader.getString());
                } else if ("publicIPAddress".equals(fieldName)) {
                    publicIpAddress = reader.getString();
                } else if ("publicFQDN".equals(fieldName)) {
                    publicFQDN = reader.getString();
                } else if ("frontendPort".equals(fieldName)) {
                    frontendPort = reader.getInt();
                } else if ("backendPort".equals(fieldName)) {
                    backendPort = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new InboundEndpoint(name, protocol, publicIpAddress, publicFQDN, frontendPort, backendPort);
        });
    }
}
