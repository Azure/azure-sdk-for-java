// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch;

import com.azure.compute.batch.implementation.BatchClientImpl;
import com.azure.compute.batch.models.AutoScaleRun;
import com.azure.compute.batch.models.BatchApplication;
import com.azure.compute.batch.models.BatchCertificate;
import com.azure.compute.batch.models.BatchClientParallelOptions;
import com.azure.compute.batch.models.BatchJob;
import com.azure.compute.batch.models.BatchJobCreateOptions;
import com.azure.compute.batch.models.BatchJobDisableOptions;
import com.azure.compute.batch.models.BatchJobSchedule;
import com.azure.compute.batch.models.BatchJobScheduleCreateOptions;
import com.azure.compute.batch.models.BatchJobScheduleUpdateOptions;
import com.azure.compute.batch.models.BatchJobTerminateOptions;
import com.azure.compute.batch.models.BatchJobUpdateOptions;
import com.azure.compute.batch.models.BatchNode;
import com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsResult;
import com.azure.compute.batch.models.BatchNodeUserCreateOptions;
import com.azure.compute.batch.models.BatchNodeUserUpdateOptions;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolCreateOptions;
import com.azure.compute.batch.models.BatchPoolEnableAutoScaleOptions;
import com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleOptions;
import com.azure.compute.batch.models.BatchPoolReplaceOptions;
import com.azure.compute.batch.models.BatchPoolResizeOptions;
import com.azure.compute.batch.models.BatchPoolUpdateOptions;
import com.azure.compute.batch.models.BatchTask;
import com.azure.compute.batch.models.BatchTaskCollection;
import com.azure.compute.batch.models.BatchTaskCreateOptions;
import com.azure.compute.batch.models.BatchTaskListSubtasksResult;
import com.azure.compute.batch.models.CreateTasksErrorException;
import com.azure.compute.batch.models.ImageInformation;
import com.azure.compute.batch.models.JobPreparationAndReleaseTaskExecutionInformation;
import com.azure.compute.batch.models.NodeDisableSchedulingOptions;
import com.azure.compute.batch.models.NodeFile;
import com.azure.compute.batch.models.NodeRebootOptions;
import com.azure.compute.batch.models.NodeReimageOptions;
import com.azure.compute.batch.models.NodeRemoveOptions;
import com.azure.compute.batch.models.NodeVMExtension;
import com.azure.compute.batch.models.PoolNodeCounts;
import com.azure.compute.batch.models.PoolUsageMetrics;
import com.azure.compute.batch.models.TaskAddCollectionResult;
import com.azure.compute.batch.models.TaskAddResult;
import com.azure.compute.batch.models.TaskAddStatus;
import com.azure.compute.batch.models.TaskCountsResult;
import com.azure.compute.batch.models.UploadBatchServiceLogsOptions;
import com.azure.compute.batch.models.UploadBatchServiceLogsResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/** Initializes a new instance of the synchronous BatchClient type. */
@ServiceClient(builder = BatchClientBuilder.class)
public final class BatchClient {

    @Generated private final BatchClientImpl serviceClient;

    /**
     * Initializes an instance of BatchClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    BatchClient(BatchClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Required)
     *     versions (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the applications available in an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listApplications(RequestOptions requestOptions) {
        return this.serviceClient.listApplications(requestOptions);
    }

    /**
     * Gets information about the specified Application.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about Applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Required)
     *     versions (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param applicationId The ID of the Application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return contains information about an application in an Azure Batch Account along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationWithResponse(String applicationId, RequestOptions requestOptions) {
        return this.serviceClient.getApplicationWithResponse(applicationId, requestOptions);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.
     *
     * <p>If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the
     * Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including
     * a startTime or endTime these filters default to the start and end times of the last aggregation interval
     * currently available; that is, only the last aggregation interval is returned.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>starttime</td><td>OffsetDateTime</td><td>No</td><td>The earliest time from which to include metrics. This must be at least two and
     * a half hours before the current time. If not specified this defaults to the
     * start time of the last aggregation interval currently available.</td></tr>
     *     <tr><td>endtime</td><td>OffsetDateTime</td><td>No</td><td>The latest time from which to include metrics. This must be at least two hours
     * before the current time. If not specified this defaults to the end time of the
     * last aggregation interval currently available.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     poolId: String (Required)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Required)
     *     vmSize: String (Required)
     *     totalCoreHours: double (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of a listing the usage metrics for an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPoolUsageMetrics(RequestOptions requestOptions) {
        return this.serviceClient.listPoolUsageMetrics(requestOptions);
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * <p>When naming Pools, avoid including sensitive information such as user names or secret project names. This
     * information may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     vmSize: String (Required)
     *     cloudServiceConfiguration (Optional): {
     *         osFamily: String (Required)
     *         osVersion: String (Optional)
     *     }
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     applicationLicenses (Optional): [
     *         String (Optional)
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 azureFileUrl: String (Required)
     *                 accountKey: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }</pre>
     *
     * @param body The Pool to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createPoolWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createPoolWithResponse(body, requestOptions);
    }

    /**
     * Lists all of the Pools in the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     allocationState: String(steady/resizing/stopping) (Optional)
     *     allocationStateTransitionTime: OffsetDateTime (Optional)
     *     vmSize: String (Optional)
     *     cloudServiceConfiguration (Optional): {
     *         osFamily: String (Required)
     *         osVersion: String (Optional)
     *     }
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     resizeErrors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     currentDedicatedNodes: Integer (Optional)
     *     currentLowPriorityNodes: Integer (Optional)
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     autoScaleRun (Optional): {
     *         timestamp: OffsetDateTime (Required)
     *         results: String (Optional)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     applicationLicenses (Optional): [
     *         String (Optional)
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         usageStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             dedicatedCoreTime: Duration (Required)
     *         }
     *         resourceStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             avgCPUPercentage: double (Required)
     *             avgMemoryGiB: double (Required)
     *             peakMemoryGiB: double (Required)
     *             avgDiskGiB: double (Required)
     *             peakDiskGiB: double (Required)
     *             diskReadIOps: int (Required)
     *             diskWriteIOps: int (Required)
     *             diskReadGiB: double (Required)
     *             diskWriteGiB: double (Required)
     *             networkReadGiB: double (Required)
     *             networkWriteGiB: double (Required)
     *         }
     *     }
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 azureFileUrl: String (Required)
     *                 accountKey: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     identity (Optional): {
     *         type: String(UserAssigned/None) (Required)
     *         userAssignedIdentities (Optional): [
     *              (Optional){
     *                 resourceId: String (Required)
     *                 clientId: String (Optional)
     *                 principalId: String (Optional)
     *             }
     *         ]
     *     }
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPools(RequestOptions requestOptions) {
        return this.serviceClient.listPools(requestOptions);
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * <p>When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any
     * ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute
     * Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had
     * been requested with the default requeue option); finally, the Pool is removed from the system. Because running
     * Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks
     * can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool
     * explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePoolWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.deletePoolWithResponse(poolId, requestOptions);
    }

    /**
     * Gets basic properties of a Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * boolean
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return basic properties of a Pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> poolExistsWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.poolExistsWithResponse(poolId, requestOptions);
    }

    /**
     * Gets information about the specified Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     allocationState: String(steady/resizing/stopping) (Optional)
     *     allocationStateTransitionTime: OffsetDateTime (Optional)
     *     vmSize: String (Optional)
     *     cloudServiceConfiguration (Optional): {
     *         osFamily: String (Required)
     *         osVersion: String (Optional)
     *     }
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Optional)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     resizeErrors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     currentDedicatedNodes: Integer (Optional)
     *     currentLowPriorityNodes: Integer (Optional)
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     autoScaleRun (Optional): {
     *         timestamp: OffsetDateTime (Required)
     *         results: String (Optional)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     applicationLicenses (Optional): [
     *         String (Optional)
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         usageStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             dedicatedCoreTime: Duration (Required)
     *         }
     *         resourceStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             avgCPUPercentage: double (Required)
     *             avgMemoryGiB: double (Required)
     *             peakMemoryGiB: double (Required)
     *             avgDiskGiB: double (Required)
     *             peakDiskGiB: double (Required)
     *             diskReadIOps: int (Required)
     *             diskWriteIOps: int (Required)
     *             diskReadGiB: double (Required)
     *             diskWriteGiB: double (Required)
     *             networkReadGiB: double (Required)
     *             networkWriteGiB: double (Required)
     *         }
     *     }
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 azureFileUrl: String (Required)
     *                 accountKey: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     identity (Optional): {
     *         type: String(UserAssigned/None) (Required)
     *         userAssignedIdentities (Optional): [
     *              (Optional){
     *                 resourceId: String (Required)
     *                 clientId: String (Optional)
     *                 principalId: String (Optional)
     *             }
     *         ]
     *     }
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPoolWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.getPoolWithResponse(poolId, requestOptions);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask
     * associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing
     * StartTask.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param body The pool properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePoolWithResponse(String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updatePoolWithResponse(poolId, body, requestOptions);
    }

    /**
     * Disables automatic scaling for a Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.disablePoolAutoScaleWithResponse(poolId, requestOptions);
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * <p>You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic
     * scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If
     * automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation
     * interval. You cannot call this API for the same Pool more than once every 30 seconds.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for enabling automatic scaling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enablePoolAutoScaleWithResponse(
            String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.enablePoolAutoScaleWithResponse(poolId, body, requestOptions);
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * <p>This API is primarily for validating an autoscale formula, as it simply returns the result without applying
     * the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     autoScaleFormula: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     timestamp: OffsetDateTime (Required)
     *     results: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param body The options to use for evaluating the automatic scaling formula.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the results and errors from an execution of a Pool autoscale formula along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> evaluatePoolAutoScaleWithResponse(
            String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.evaluatePoolAutoScaleWithResponse(poolId, body, requestOptions);
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * <p>You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request
     * fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing.
     * You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service
     * returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To
     * remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     resizeTimeout: Duration (Optional)
     *     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for resizing the pool.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> resizePoolWithResponse(String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.resizePoolWithResponse(poolId, body, requestOptions);
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * <p>This does not restore the Pool to its previous state before the resize operation: it only stops any further
     * changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number
     * of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state
     * changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request;
     * this API can also be used to halt the initial sizing of the Pool when it is created.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.stopPoolResizeWithResponse(poolId, requestOptions);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask
     * associated with it and if StartTask is not specified with this request, then the Batch service will remove the
     * existing StartTask.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Required): [
     *          (Required){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Required): [
     *          (Required){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     metadata (Required): [
     *          (Required){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to update.
     * @param body The options to use for replacing properties on the pool.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replacePoolPropertiesWithResponse(
            String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.replacePoolPropertiesWithResponse(poolId, body, requestOptions);
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * <p>This operation can only run when the allocation state of the Pool is steady. When this operation runs, the
     * allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeList (Required): [
     *         String (Required)
     *     ]
     *     resizeTimeout: Duration (Optional)
     *     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for removing the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeNodesWithResponse(String poolId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.removeNodesWithResponse(poolId, body, requestOptions);
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeAgentSKUId: String (Required)
     *     imageReference (Required): {
     *         publisher: String (Optional)
     *         offer: String (Optional)
     *         sku: String (Optional)
     *         version: String (Optional)
     *         virtualMachineImageId: String (Optional)
     *         exactVersion: String (Optional)
     *     }
     *     osType: String(linux/windows) (Required)
     *     capabilities (Optional): [
     *         String (Optional)
     *     ]
     *     batchSupportEndOfLife: OffsetDateTime (Optional)
     *     verificationType: String(verified/unverified) (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the supported Virtual Machine Images as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSupportedImages(RequestOptions requestOptions) {
        return this.serviceClient.listSupportedImages(requestOptions);
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be
     * up to date. If you need exact node counts, use a list query.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     poolId: String (Required)
     *     dedicated (Optional): {
     *         creating: int (Required)
     *         idle: int (Required)
     *         offline: int (Required)
     *         preempted: int (Required)
     *         rebooting: int (Required)
     *         reimaging: int (Required)
     *         running: int (Required)
     *         starting: int (Required)
     *         startTaskFailed: int (Required)
     *         leavingPool: int (Required)
     *         unknown: int (Required)
     *         unusable: int (Required)
     *         waitingForStartTask: int (Required)
     *         total: int (Required)
     *     }
     *     lowPriority (Optional): (recursive schema, see lowPriority above)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPoolNodeCounts(RequestOptions requestOptions) {
        return this.serviceClient.listPoolNodeCounts(requestOptions);
    }

    /**
     * Deletes a Job.
     *
     * <p>Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides
     * the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes,
     * the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is
     * received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in
     * deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is
     * being deleted.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponse(jobId, requestOptions);
    }

    /**
     * Gets information about the specified Job.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(jobId, requestOptions);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a
     * request does not specify the constraints element, then the Job keeps the existing constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     poolInfo (Optional): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                              (Optional){
     *                                 username: String (Optional)
     *                                 password: String (Optional)
     *                                 registryServer: String (Optional)
     *                                 identityReference (Optional): {
     *                                     resourceId: String (Optional)
     *                                 }
     *                             }
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): {
     *                         containerRunOptions: String (Optional)
     *                         imageName: String (Required)
     *                         registry (Optional): (recursive schema, see registry above)
     *                         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                     }
     *                     resourceFiles (Optional): [
     *                          (Optional){
     *                             autoStorageContainerName: String (Optional)
     *                             storageContainerUrl: String (Optional)
     *                             httpUrl: String (Optional)
     *                             blobPrefix: String (Optional)
     *                             filePath: String (Optional)
     *                             fileMode: String (Optional)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                     ]
     *                     environmentSettings (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                     userIdentity (Optional): {
     *                         username: String (Optional)
     *                         autoUser (Optional): {
     *                             scope: String(task/pool) (Optional)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                         }
     *                     }
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                      (Optional){
     *                         applicationId: String (Required)
     *                         version: String (Optional)
     *                     }
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body The options to use for updating the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateJobWithResponse(String jobId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateJobWithResponse(jobId, body, requestOptions);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This fully replaces all the updatable properties of the Job. For example, if the Job has constraints
     * associated with it and if constraints is not specified with this request, then the Batch service will remove the
     * existing constraints.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body A job with updated properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceJobWithResponse(String jobId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.replaceJobWithResponse(jobId, body, requestOptions);
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * <p>The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter
     * to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until
     * the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the
     * Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state.
     * If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails
     * with status code 409.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     disableTasks: String(requeue/terminate/wait) (Required)
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job to disable.
     * @param body The options to use for disabling the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableJobWithResponse(String jobId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.disableJobWithResponse(jobId, body, requestOptions);
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * <p>When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation
     * is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch
     * service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a
     * Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job to enable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.enableJobWithResponse(jobId, requestOptions);
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * <p>When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch
     * service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then
     * the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain
     * in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not
     * be scheduled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     terminateReason: String (Optional)
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job to terminate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.terminateJobWithResponse(jobId, requestOptions);
    }

    /**
     * Creates a Job to the specified Account.
     *
     * <p>The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user
     * specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job
     * Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach,
     * the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when
     * naming Jobs, avoid including sensitive information such as user names or secret project names. This information
     * may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param body The Job to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createJobWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createJobWithResponse(body, requestOptions);
    }

    /**
     * Lists all of the Jobs in the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        return this.serviceClient.listJobs(requestOptions);
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 cloudServiceConfiguration (Optional): {
     *                     osFamily: String (Required)
     *                     osVersion: String (Optional)
     *                 }
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Optional)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 applicationLicenses (Optional): [
     *                     String (Optional)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             azureFileUrl: String (Required)
     *                             accountKey: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.listJobsFromSchedule(jobScheduleId, requestOptions);
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute
     * Nodes where the Job has run.
     *
     * <p>This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job
     * Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this
     * API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status
     * code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     poolId: String (Optional)
     *     nodeId: String (Optional)
     *     nodeUrl: String (Optional)
     *     jobPreparationTaskExecutionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         state: String(running/completed) (Required)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     jobReleaseTaskExecutionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         state: String(running/completed) (Required)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         result: String(success/failure) (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks for a Job as paginated
     *     response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobPreparationAndReleaseTaskStatus(
            String jobId, RequestOptions requestOptions) {
        return this.serviceClient.listJobPreparationAndReleaseTaskStatus(jobId, requestOptions);
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * <p>Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks
     * which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned
     * may not always be up to date. If you need exact task counts, use a list query.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskCounts (Required): {
     *         active: int (Required)
     *         running: int (Required)
     *         completed: int (Required)
     *         succeeded: int (Required)
     *         failed: int (Required)
     *     }
     *     taskSlotCounts (Required): {
     *         active: int (Required)
     *         running: int (Required)
     *         completed: int (Required)
     *         succeeded: int (Required)
     *         failed: int (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the Task and TaskSlot counts for a Job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobTaskCountsWithResponse(jobId, requestOptions);
    }

    /**
     * Creates a Certificate to the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: String (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }</pre>
     *
     * @param body The Certificate to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createCertificateWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createCertificateWithResponse(body, requestOptions);
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: String (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listCertificates(RequestOptions requestOptions) {
        return this.serviceClient.listCertificates(requestOptions);
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * <p>If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate
     * changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this
     * operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do
     * not need to run this operation after the deletion failed. You must make sure that the Certificate is not being
     * used by any resources, and then you can try again to delete the Certificate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelCertificateDeletionWithResponse(
            String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions) {
        return this.serviceClient.cancelCertificateDeletionWithResponse(
                thumbprintAlgorithm, thumbprint, requestOptions);
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * <p>You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a
     * Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the
     * Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from
     * existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you
     * try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed.
     * You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue
     * using the Certificate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCertificateWithResponse(
            String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions);
    }

    /**
     * Gets information about the specified Certificate.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: String (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }</pre>
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Certificate along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCertificateWithResponse(
            String thumbprintAlgorithm, String thumbprint, RequestOptions requestOptions) {
        return this.serviceClient.getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions);
    }

    /**
     * Checks the specified Job Schedule exists.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * boolean
     * }</pre>
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return whether resource exists along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.jobScheduleExistsWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * <p>When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are
     * deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period
     * is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they
     * are still counted towards Account lifetime statistics.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Gets information about the specified Job Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Required): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     cloudServiceConfiguration (Optional): {
     *                         osFamily: String (Required)
     *                         osVersion: String (Optional)
     *                     }
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     applicationLicenses (Optional): [
     *                         String (Optional)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 accountKey: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Job Schedule along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.getJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This replaces only the Job Schedule properties specified in the request. For example, if the schedule property
     * is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schedule (Optional): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Optional): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     cloudServiceConfiguration (Optional): {
     *                         osFamily: String (Required)
     *                         osVersion: String (Optional)
     *                     }
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     applicationLicenses (Optional): [
     *                         String (Optional)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 accountKey: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body The options to use for updating the Job Schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateJobScheduleWithResponse(
            String jobScheduleId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateJobScheduleWithResponse(jobScheduleId, body, requestOptions);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is
     * not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Required): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     cloudServiceConfiguration (Optional): {
     *                         osFamily: String (Required)
     *                         osVersion: String (Optional)
     *                     }
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     applicationLicenses (Optional): [
     *                         String (Optional)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 accountKey: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body A Job Schedule with updated properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceJobScheduleWithResponse(
            String jobScheduleId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.replaceJobScheduleWithResponse(jobScheduleId, body, requestOptions);
    }

    /**
     * Disables a Job Schedule.
     *
     * <p>No new Jobs will be created until the Job Schedule is enabled again.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.disableJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Enables a Job Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.enableJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Terminates a Job Schedule.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.terminateJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Creates a Job Schedule to the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     schedule (Required): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     cloudServiceConfiguration (Optional): {
     *                         osFamily: String (Required)
     *                         osVersion: String (Optional)
     *                     }
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     applicationLicenses (Optional): [
     *                         String (Optional)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 accountKey: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }</pre>
     *
     * @param body The Job Schedule to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createJobScheduleWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createJobScheduleWithResponse(body, requestOptions);
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Required): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     cloudServiceConfiguration (Optional): {
     *                         osFamily: String (Required)
     *                         osVersion: String (Optional)
     *                     }
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Optional)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     applicationLicenses (Optional): [
     *                         String (Optional)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 accountKey: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: int (Required)
     *         numFailedTasks: int (Required)
     *         numTaskRetries: int (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobSchedules(RequestOptions requestOptions) {
        return this.serviceClient.listJobSchedules(requestOptions);
    }

    /**
     * Creates a Task to the specified Job.
     *
     * <p>The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180
     * days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     commandLine: String (Required)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param body The Task to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createTaskWithResponse(String jobId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createTaskWithResponse(jobId, body, requestOptions);
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTasks(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.listTasks(jobId, requestOptions);
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * <p>Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the
     * same order the Tasks were submitted in this request. If the server times out or the connection is closed during
     * the request, the request may have been partially or fully processed, or not at all. In such cases, the user
     * should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a
     * request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded,
     * the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a
     * client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to
     * completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the
     * Batch service and left in whatever state it was in at that time.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             displayName: String (Optional)
     *             exitConditions (Optional): {
     *                 exitCodes (Optional): [
     *                      (Optional){
     *                         code: int (Required)
     *                         exitOptions (Required): {
     *                             jobAction: String(none/disable/terminate) (Optional)
     *                             dependencyAction: String(satisfy/block) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 exitCodeRanges (Optional): [
     *                      (Optional){
     *                         start: int (Required)
     *                         end: int (Required)
     *                         exitOptions (Required): (recursive schema, see exitOptions above)
     *                     }
     *                 ]
     *                 preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *                 fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *                 default (Optional): (recursive schema, see default above)
     *             }
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             affinityInfo (Optional): {
     *                 affinityId: String (Required)
     *             }
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             multiInstanceSettings (Optional): {
     *                 numberOfInstances: Integer (Optional)
     *                 coordinationCommandLine: String (Required)
     *                 commonResourceFiles (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             dependsOn (Optional): {
     *                 taskIds (Optional): [
     *                     String (Optional)
     *                 ]
     *                 taskIdRanges (Optional): [
     *                      (Optional){
     *                         start: int (Required)
     *                         end: int (Required)
     *                     }
     *                 ]
     *             }
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             status: String(Success/clienterror/servererror) (Required)
     *             taskId: String (Required)
     *             eTag: String (Optional)
     *             lastModified: OffsetDateTime (Optional)
     *             location: String (Optional)
     *             error (Optional): {
     *                 code: String (Required)
     *                 message (Optional): {
     *                     lang: String (Optional)
     *                     value: String (Optional)
     *                 }
     *                 values (Optional): [
     *                      (Optional){
     *                         key: String (Optional)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param collection The Tasks to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of adding a collection of Tasks to a Job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTaskCollectionWithResponse(
            String jobId, BinaryData collection, RequestOptions requestOptions) {
        return this.serviceClient.createTaskCollectionWithResponse(jobId, collection, requestOptions);
    }

    /**
     * Adds multiple tasks to a job.
     *
     * @param jobId The ID of the job to which to add the task.
     * @param taskList A list of {@link BatchTaskCreateOptions tasks} to add.
     * @throws RuntimeException Exception thrown when an error response is received from the Batch service or any
     *     network exception.
     * @throws InterruptedException Exception thrown if any thread has interrupted the current thread.
     */
    public void createTasks(String jobId, List<BatchTaskCreateOptions> taskList) throws InterruptedException {
        createTasks(jobId, taskList, null);
    }

    private static class WorkingThread implements Runnable {

        static final int MAX_TASKS_PER_REQUEST = 100;

        private static final AtomicInteger CURRENT_MAX_TASKS = new AtomicInteger(MAX_TASKS_PER_REQUEST);

        BatchClient client;

        String jobId;

        Queue<BatchTaskCreateOptions> pendingList;

        List<TaskAddResult> failures;

        volatile Exception exception;

        final Object lock;

        WorkingThread(
                BatchClient client,
                String jobId,
                Queue<BatchTaskCreateOptions> pendingList,
                List<TaskAddResult> failures,
                Object lock) {
            this.client = client;
            this.jobId = jobId;
            this.pendingList = pendingList;
            this.failures = failures;
            this.exception = null;
            this.lock = lock;
        }

        public Exception getException() {
            return this.exception;
        }

        /**
         * Submits one chunk of tasks to a job.
         *
         * @param taskList A list of {@link BatchTask tasks} to add.
         */
        private void submitChunk(List<BatchTaskCreateOptions> taskList) {
            try {
                TaskAddCollectionResult response =
                        this.client.createTaskCollection(this.jobId, new BatchTaskCollection(taskList));
                if (response != null && response.getValue() != null) {
                    for (TaskAddResult result : response.getValue()) {
                        if (result.getError() != null) {
                            if (result.getStatus() == TaskAddStatus.SERVER_ERROR) {
                                // Server error will be retried
                                for (BatchTaskCreateOptions batchTaskToCreate : taskList) {
                                    if (batchTaskToCreate.getId().equals(result.getTaskId())) {
                                        pendingList.add(batchTaskToCreate);
                                        break;
                                    }
                                }
                            } else if (result.getStatus() == TaskAddStatus.CLIENT_ERROR
                                    && !result.getError().getMessage().getValue().contains("Status code 409")) {
                                // Client error will be recorded
                                failures.add(result);
                            }
                        }
                    }
                }
            } /*
               * TODO: Track 1 SDK had an autogenerated BatchErrorException which encapsulated a {@link BatchError} - Investigate why custom exception type is not generated
               * */ catch (HttpResponseException e) {
                // If we get RequestBodyTooLarge could be that we chunked the tasks too large.
                // Try decreasing the size unless caused by 1 task.
                if (e.getResponse().getStatusCode() == 413 && taskList.size() > 1) {
                    // Use binary reduction to decrease size of submitted chunks
                    int midpoint = taskList.size() / 2;
                    // If the midpoint is less than the CURRENT_MAX_TASKS used to create new chunks,
                    // attempt to atomically reduce CURRENT_MAX_TASKS.
                    // In the case where compareAndSet fails, that means that CURRENT_MAX_TASKS which
                    // was the goal
                    int max = CURRENT_MAX_TASKS.get();
                    while (midpoint < max) {
                        CURRENT_MAX_TASKS.compareAndSet(max, midpoint);
                        max = CURRENT_MAX_TASKS.get();
                    }
                    // Resubmit chunk as a smaller list and requeue remaining tasks.
                    pendingList.addAll(taskList.subList(midpoint, taskList.size()));
                    submitChunk(taskList.subList(0, midpoint));
                } else {
                    // Any exception will stop further call
                    exception = e;
                    pendingList.addAll(taskList);
                }
            } catch (RuntimeException e) {
                // Any exception will stop further call
                exception = e;
                pendingList.addAll(taskList);
            }
        }

        @Override
        public void run() {
            try {
                List<BatchTaskCreateOptions> taskList = new LinkedList<>();
                // Take the task from the queue up to MAX_TASKS_PER_REQUEST
                int count = 0;
                int maxAmount = CURRENT_MAX_TASKS.get();
                while (count < maxAmount) {
                    BatchTaskCreateOptions param = pendingList.poll();
                    if (param != null) {
                        taskList.add(param);
                        count++;
                    } else {
                        break;
                    }
                }
                if (taskList.size() > 0) {
                    submitChunk(taskList);
                }
            } finally {
                synchronized (lock) {
                    // Notify main thread that sub thread finished
                    lock.notifyAll();
                }
            }
        }
    }

    /**
     * Creates a collection of Tasks to the specified Job.
     *
     * <p>Note that each Task must have a unique ID.This method can work with multiple threads. The parallel degree can
     * be specified by the user. If the server times out or the connection is closed during the request, the request may
     * have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note
     * that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the
     * same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks
     * unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry,
     * it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on
     * the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not
     * completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it
     * was in at that time.
     *
     * @param jobId The ID of the job to which to add the task.
     * @param taskList A list of {@link BatchTaskCreateOptions tasks} to add.
     * @param batchClientParallelOptions Option that configure the parallelization of the method.
     * @throws RuntimeException Exception thrown when an error response is received from the Batch service or any
     *     network exception.
     * @throws InterruptedException Exception thrown if any thread has interrupted the current thread.
     */
    public void createTasks(
            String jobId, List<BatchTaskCreateOptions> taskList, BatchClientParallelOptions batchClientParallelOptions)
            throws InterruptedException {
        int threadNumber = 1;
        // Get user defined thread number
        if (batchClientParallelOptions != null) {
            threadNumber = batchClientParallelOptions.maxDegreeOfParallelism();
        }
        final Object lock = new Object();
        ConcurrentLinkedQueue<BatchTaskCreateOptions> pendingList = new ConcurrentLinkedQueue<>(taskList);
        CopyOnWriteArrayList<TaskAddResult> failures = new CopyOnWriteArrayList<>();
        Map<Thread, WorkingThread> threads = new HashMap<>();
        Exception innerException = null;
        synchronized (lock) {
            while (!pendingList.isEmpty()) {
                if (threads.size() < threadNumber) {
                    // Kick as many as possible add tasks requests by max allowed threads
                    WorkingThread worker = new WorkingThread(this, jobId, pendingList, failures, lock);
                    Thread thread = new Thread(worker);
                    thread.start();
                    threads.put(thread, worker);
                } else {
                    lock.wait();
                    List<Thread> finishedThreads = new ArrayList<>();
                    for (Map.Entry<Thread, WorkingThread> entry : threads.entrySet()) {
                        if (entry.getKey().getState() == Thread.State.TERMINATED) {
                            finishedThreads.add(entry.getKey());
                            // If any exception is encountered, then stop immediately without waiting for
                            // remaining active threads.
                            innerException = entry.getValue().getException();
                            if (innerException != null) {
                                break;
                            }
                        }
                    }
                    // Free the thread pool so we can start more threads to send the remaining add
                    // tasks requests.
                    threads.keySet().removeAll(finishedThreads);
                    // Any errors happened, we stop.
                    if (innerException != null || !failures.isEmpty()) {
                        break;
                    }
                }
            }
        }
        // Wait for all remaining threads to finish.
        for (Thread t : threads.keySet()) {
            t.join();
        }
        if (innerException == null) {
            // Check for errors in any of the threads.
            for (Map.Entry<Thread, WorkingThread> entry : threads.entrySet()) {
                innerException = entry.getValue().getException();
                if (innerException != null) {
                    break;
                }
            }
        }
        if (innerException != null) {
            // If an exception happened in any of the threads, throw it.
            if (innerException instanceof HttpResponseException) {
                throw (HttpResponseException) innerException;
            } else if (innerException instanceof RuntimeException) {
                // WorkingThread will only catch and store a BatchErrorException or a
                // RuntimeException in its run() method.
                // WorkingThread.getException() should therefore only return one of these two
                // types, making the cast safe.
                throw (RuntimeException) innerException;
            }
        }
        if (!failures.isEmpty()) {
            // Report any client error with leftover request
            List<BatchTaskCreateOptions> notFinished = new ArrayList<>();
            for (BatchTaskCreateOptions param : pendingList) {
                notFinished.add(param);
            }
            throw new CreateTasksErrorException("At least one task failed to be added.", failures, notFinished);
        }
        // We succeed here
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * <p>When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted
     * (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to
     * the primary task; subtasks and their files are then deleted asynchronously in the background.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Gets information about the specified Task.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     *     <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations
     *     include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host
     *     failure. Retries due to recovery operations are independent of and are not counted against the
     *     maxTaskRetryCount along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.getTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Updates the properties of the specified Task.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: int (Required)
     *         writeIOps: int (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param body The Task to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceTaskWithResponse(
            String jobId, String taskId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.replaceTaskWithResponse(jobId, taskId, body, requestOptions);
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance Task.
     *
     * <p>If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             id: Integer (Optional)
     *             nodeInfo (Optional): {
     *                 affinityId: String (Optional)
     *                 nodeUrl: String (Optional)
     *                 poolId: String (Optional)
     *                 nodeId: String (Optional)
     *                 taskRootDirectory: String (Optional)
     *                 taskRootDirectoryUrl: String (Optional)
     *             }
     *             startTime: OffsetDateTime (Optional)
     *             endTime: OffsetDateTime (Optional)
     *             exitCode: Integer (Optional)
     *             containerInfo (Optional): {
     *                 containerId: String (Optional)
     *                 state: String (Optional)
     *                 error: String (Optional)
     *             }
     *             failureInfo (Optional): {
     *                 category: String(usererror/servererror) (Required)
     *                 code: String (Optional)
     *                 message: String (Optional)
     *                 details (Optional): [
     *                      (Optional){
     *                         name: String (Optional)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *             state: String(preparing/running/completed) (Optional)
     *             stateTransitionTime: OffsetDateTime (Optional)
     *             previousState: String(preparing/running/completed) (Optional)
     *             previousStateTransitionTime: OffsetDateTime (Optional)
     *             result: String(success/failure) (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the subtasks of a Task along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listSubTasksWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.listSubTasksWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Terminates the specified Task.
     *
     * <p>When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate
     * Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the
     * background.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.terminateTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
     *
     * <p>Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is
     * changed to active. As the Task is no longer in the completed state, any previous exit code or failure information
     * is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0.
     * Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit
     * code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     *     <tr><td>if-none-match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.reactivateTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTaskFileWithResponse(
            String jobId, String taskId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Returns the content of the specified Task file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     *     <tr><td>ocp-range</td><td>String</td><td>No</td><td>The byte range to be retrieved. The default is to retrieve the entire file. The
     * format is bytes=startRange-endRange.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTaskFileWithResponse(
            String jobId, String taskId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getTaskFileWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Gets the properties of the specified Task file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified Task file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getTaskFilePropertiesWithResponse(
            String jobId, String taskId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getTaskFilePropertiesWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to list children of the Task directory. This parameter can be used in
     * combination with the filter parameter to list specific type of files.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     url: String (Optional)
     *     isDirectory: Boolean (Optional)
     *     properties (Optional): {
     *         creationTime: OffsetDateTime (Optional)
     *         lastModified: OffsetDateTime (Required)
     *         contentLength: int (Required)
     *         contentType: String (Optional)
     *         fileMode: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTaskFiles(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.listTaskFiles(jobId, taskId, requestOptions);
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     isAdmin: Boolean (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     password: String (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param body The options to use for creating the user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createNodeUserWithResponse(
            String poolId, String nodeId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createNodeUserWithResponse(poolId, nodeId, body, requestOptions);
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNodeUserWithResponse(
            String poolId, String nodeId, String userName, RequestOptions requestOptions) {
        return this.serviceClient.deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions);
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     password: String (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param body The options to use for updating the user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceNodeUserWithResponse(
            String poolId, String nodeId, String userName, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.replaceNodeUserWithResponse(poolId, nodeId, userName, body, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeRebootOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.rebootNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeReimageOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reimageNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.reimageNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nodeDisableSchedulingOption: String(requeue/terminate/taskcompletion) (Optional)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableNodeSchedulingWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableNodeSchedulingWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     remoteLoginIPAddress: String (Required)
     *     remoteLoginPort: int (Required)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the remote login settings for a Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeRemoteLoginSettingsWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * byte[]
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeRemoteDesktopFileWithResponse(
            String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getNodeRemoteDesktopFileWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerUrl: String (Required)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Optional)
     *     identityReference (Optional): {
     *         resourceId: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     virtualDirectoryName: String (Required)
     *     numberOfFilesUploaded: int (Required)
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param body The Azure Batch service log files upload options.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of uploading Batch service log files from a specific Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> uploadNodeLogsWithResponse(
            String poolId, String nodeId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.uploadNodeLogsWithResponse(poolId, nodeId, body, requestOptions);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodes(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.listNodes(poolId, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Optional)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Optional)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: String (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return information about the specified Compute Node Extension along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeExtensionWithResponse(
            String poolId, String nodeId, String extensionName, RequestOptions requestOptions) {
        return this.serviceClient.getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Optional)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Optional)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: String (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listNodeExtensions(poolId, nodeId, requestOptions);
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to delete children of a directory. If the filePath parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNodeFileWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     *     <tr><td>ocp-range</td><td>String</td><td>No</td><td>The byte range to be retrieved. The default is to retrieve the entire file. The
     * format is bytes=startRange-endRange.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * byte[]
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeFileWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>if-modified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     *     <tr><td>if-unmodified-since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the properties of the specified Compute Node file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getNodeFilePropertiesWithResponse(
            String poolId, String nodeId, String filePath, RequestOptions requestOptions) {
        return this.serviceClient.getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>timeOut</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A maximum of 1000
     * applications can be returned.</td></tr>
     *     <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.</td></tr>
     *     <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to list children of a directory.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Optional)
     *     url: String (Optional)
     *     isDirectory: Boolean (Optional)
     *     properties (Optional): {
     *         creationTime: OffsetDateTime (Optional)
     *         lastModified: OffsetDateTime (Required)
     *         contentLength: int (Required)
     *         contentType: String (Optional)
     *         fileMode: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listNodeFiles(poolId, nodeId, requestOptions);
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the applications available in an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchApplication> listApplications() {
        // Generated convenience method for listApplications
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listApplications(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchApplication.class));
    }

    /**
     * Gets information about the specified Application.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about Applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * @param applicationId The ID of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains information about an application in an Azure Batch Account.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchApplication getApplication(String applicationId) {
        // Generated convenience method for getApplicationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getApplicationWithResponse(applicationId, requestOptions).getValue().toObject(BatchApplication.class);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.
     *
     * <p>If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the
     * Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including
     * a startTime or endTime these filters default to the start and end times of the last aggregation interval
     * currently available; that is, only the last aggregation interval is returned.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a listing the usage metrics for an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PoolUsageMetrics> listPoolUsageMetrics() {
        // Generated convenience method for listPoolUsageMetrics
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listPoolUsageMetrics(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(PoolUsageMetrics.class));
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * <p>When naming Pools, avoid including sensitive information such as user names or secret project names. This
     * information may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * @param body The Pool to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPool(BatchPoolCreateOptions body) {
        // Generated convenience method for createPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createPoolWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Pools in the specified Account.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPool> listPools() {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listPools(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPool.class));
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * <p>When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any
     * ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute
     * Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had
     * been requested with the default requeue option); finally, the Pool is removed from the system. Because running
     * Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks
     * can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool
     * explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePool(String poolId) {
        // Generated convenience method for deletePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePoolWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets basic properties of a Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return basic properties of a Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean poolExists(String poolId) {
        // Generated convenience method for poolExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return poolExistsWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchPool getPool(String poolId) {
        // Generated convenience method for getPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPoolWithResponse(poolId, requestOptions).getValue().toObject(BatchPool.class);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask
     * associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing
     * StartTask.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The pool properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePool(String poolId, BatchPoolUpdateOptions body) {
        // Generated convenience method for updatePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePoolWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables automatic scaling for a Pool.
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disablePoolAutoScale(String poolId) {
        // Generated convenience method for disablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disablePoolAutoScaleWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * <p>You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic
     * scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If
     * automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation
     * interval. You cannot call this API for the same Pool more than once every 30 seconds.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for enabling automatic scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleOptions body) {
        // Generated convenience method for enablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enablePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * <p>This API is primarily for validating an autoscale formula, as it simply returns the result without applying
     * the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param body The options to use for evaluating the automatic scaling formula.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results and errors from an execution of a Pool autoscale formula.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoScaleRun evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleOptions body) {
        // Generated convenience method for evaluatePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return evaluatePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(body), requestOptions)
                .getValue()
                .toObject(AutoScaleRun.class);
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * <p>You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request
     * fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing.
     * You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service
     * returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To
     * remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for resizing the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resizePool(String poolId, BatchPoolResizeOptions body) {
        // Generated convenience method for resizePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        resizePoolWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * <p>This does not restore the Pool to its previous state before the resize operation: it only stops any further
     * changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number
     * of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state
     * changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request;
     * this API can also be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopPoolResize(String poolId) {
        // Generated convenience method for stopPoolResizeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        stopPoolResizeWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask
     * associated with it and if StartTask is not specified with this request, then the Batch service will remove the
     * existing StartTask.
     *
     * @param poolId The ID of the Pool to update.
     * @param body The options to use for replacing properties on the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replacePoolProperties(String poolId, BatchPoolReplaceOptions body) {
        // Generated convenience method for replacePoolPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replacePoolPropertiesWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * <p>This operation can only run when the allocation state of the Pool is steady. When this operation runs, the
     * allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for removing the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeNodes(String poolId, NodeRemoveOptions body) {
        // Generated convenience method for removeNodesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        removeNodesWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the supported Virtual Machine Images as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ImageInformation> listSupportedImages() {
        // Generated convenience method for listSupportedImages
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listSupportedImages(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(ImageInformation.class));
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be
     * up to date. If you need exact node counts, use a list query.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PoolNodeCounts> listPoolNodeCounts() {
        // Generated convenience method for listPoolNodeCounts
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listPoolNodeCounts(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(PoolNodeCounts.class));
    }

    /**
     * Deletes a Job.
     *
     * <p>Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides
     * the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes,
     * the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is
     * received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in
     * deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is
     * being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJob(String jobId) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Job.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJob getJob(String jobId) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(jobId, requestOptions).getValue().toObject(BatchJob.class);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a
     * request does not specify the constraints element, then the Job keeps the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body The options to use for updating the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJob(String jobId, BatchJobUpdateOptions body) {
        // Generated convenience method for updateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This fully replaces all the updatable properties of the Job. For example, if the Job has constraints
     * associated with it and if constraints is not specified with this request, then the Batch service will remove the
     * existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body A job with updated properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJob(String jobId, BatchJob body) {
        // Generated convenience method for replaceJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * <p>The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter
     * to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until
     * the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the
     * Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state.
     * If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails
     * with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param body The options to use for disabling the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJob(String jobId, BatchJobDisableOptions body) {
        // Generated convenience method for disableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * <p>When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation
     * is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch
     * service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a
     * Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJob(String jobId) {
        // Generated convenience method for enableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * <p>When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch
     * service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then
     * the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain
     * in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not
     * be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateJob(String jobId) {
        // Generated convenience method for terminateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Creates a Job to the specified Account.
     *
     * <p>The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user
     * specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job
     * Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach,
     * the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when
     * naming Jobs, avoid including sensitive information such as user names or secret project names. This information
     * may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * @param body The Job to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJob(BatchJobCreateOptions body) {
        // Generated convenience method for createJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createJobWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Jobs in the specified Account.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobs() {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobsFromSchedule(String jobScheduleId) {
        // Generated convenience method for listJobsFromSchedule
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listJobsFromSchedule(jobScheduleId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute
     * Nodes where the Job has run.
     *
     * <p>This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job
     * Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this
     * API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status
     * code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks for a Job as paginated
     *     response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobPreparationAndReleaseTaskExecutionInformation> listJobPreparationAndReleaseTaskStatus(
            String jobId) {
        // Generated convenience method for listJobPreparationAndReleaseTaskStatus
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listJobPreparationAndReleaseTaskStatus(jobId, requestOptions)
                .mapPage(
                        bodyItemValue ->
                                bodyItemValue.toObject(JobPreparationAndReleaseTaskExecutionInformation.class));
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * <p>Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks
     * which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned
     * may not always be up to date. If you need exact task counts, use a list query.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Task and TaskSlot counts for a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskCountsResult getJobTaskCounts(String jobId) {
        // Generated convenience method for getJobTaskCountsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobTaskCountsWithResponse(jobId, requestOptions).getValue().toObject(TaskCountsResult.class);
    }

    /**
     * Creates a Certificate to the specified Account.
     *
     * @param body The Certificate to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createCertificate(BatchCertificate body) {
        // Generated convenience method for createCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createCertificateWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchCertificate> listCertificates() {
        // Generated convenience method for listCertificates
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listCertificates(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchCertificate.class));
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * <p>If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate
     * changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this
     * operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do
     * not need to run this operation after the deletion failed. You must make sure that the Certificate is not being
     * used by any resources, and then you can try again to delete the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for cancelCertificateDeletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        cancelCertificateDeletionWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * <p>You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a
     * Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the
     * Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from
     * existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you
     * try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed.
     * You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue
     * using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCertificate(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for deleteCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Certificate.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCertificate getCertificate(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for getCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions)
                .getValue()
                .toObject(BatchCertificate.class);
    }

    /**
     * Checks the specified Job Schedule exists.
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean jobScheduleExists(String jobScheduleId) {
        // Generated convenience method for jobScheduleExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return jobScheduleExistsWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * <p>When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are
     * deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period
     * is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they
     * are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJobSchedule(String jobScheduleId) {
        // Generated convenience method for deleteJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job Schedule.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJobSchedule getJobSchedule(String jobScheduleId) {
        // Generated convenience method for getJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobScheduleWithResponse(jobScheduleId, requestOptions).getValue().toObject(BatchJobSchedule.class);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This replaces only the Job Schedule properties specified in the request. For example, if the schedule property
     * is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body The options to use for updating the Job Schedule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateOptions body) {
        // Generated convenience method for updateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is
     * not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body A Job Schedule with updated properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJobSchedule(String jobScheduleId, BatchJobSchedule body) {
        // Generated convenience method for replaceJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables a Job Schedule.
     *
     * <p>No new Jobs will be created until the Job Schedule is enabled again.
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJobSchedule(String jobScheduleId) {
        // Generated convenience method for disableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Enables a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJobSchedule(String jobScheduleId) {
        // Generated convenience method for enableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateJobSchedule(String jobScheduleId) {
        // Generated convenience method for terminateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Creates a Job Schedule to the specified Account.
     *
     * @param body The Job Schedule to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJobSchedule(BatchJobScheduleCreateOptions body) {
        // Generated convenience method for createJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createJobScheduleWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobSchedule> listJobSchedules() {
        // Generated convenience method for listJobSchedules
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listJobSchedules(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobSchedule.class));
    }

    /**
     * Creates a Task to the specified Job.
     *
     * <p>The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180
     * days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param body The Task to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTask(String jobId, BatchTaskCreateOptions body) {
        // Generated convenience method for createTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createTaskWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchTask> listTasks(String jobId) {
        // Generated convenience method for listTasks
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listTasks(jobId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchTask.class));
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * <p>Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the
     * same order the Tasks were submitted in this request. If the server times out or the connection is closed during
     * the request, the request may have been partially or fully processed, or not at all. In such cases, the user
     * should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a
     * request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded,
     * the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a
     * client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to
     * completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the
     * Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param collection The Tasks to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of adding a collection of Tasks to a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskAddCollectionResult createTaskCollection(String jobId, BatchTaskCollection collection) {
        // Generated convenience method for createTaskCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTaskCollectionWithResponse(jobId, BinaryData.fromObject(collection), requestOptions)
                .getValue()
                .toObject(TaskAddCollectionResult.class);
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * <p>When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted
     * (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to
     * the primary task; subtasks and their files are then deleted asynchronously in the background.
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTask(String jobId, String taskId) {
        // Generated convenience method for deleteTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Task.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations
     *     include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host
     *     failure. Retries due to recovery operations are independent of and are not counted against the
     *     maxTaskRetryCount.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTask getTask(String jobId, String taskId) {
        // Generated convenience method for getTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTaskWithResponse(jobId, taskId, requestOptions).getValue().toObject(BatchTask.class);
    }

    /**
     * Updates the properties of the specified Task.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param body The Task to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceTask(String jobId, String taskId, BatchTask body) {
        // Generated convenience method for replaceTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceTaskWithResponse(jobId, taskId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance Task.
     *
     * <p>If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the subtasks of a Task.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTaskListSubtasksResult listSubTasks(String jobId, String taskId) {
        // Generated convenience method for listSubTasksWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listSubTasksWithResponse(jobId, taskId, requestOptions)
                .getValue()
                .toObject(BatchTaskListSubtasksResult.class);
    }

    /**
     * Terminates the specified Task.
     *
     * <p>When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate
     * Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the
     * background.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateTask(String jobId, String taskId) {
        // Generated convenience method for terminateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
     *
     * <p>Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is
     * changed to active. As the Task is no longer in the completed state, any previous exit code or failure information
     * is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0.
     * Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit
     * code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reactivateTask(String jobId, String taskId) {
        // Generated convenience method for reactivateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reactivateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTaskFile(String jobId, String taskId, String filePath) {
        // Generated convenience method for deleteTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTaskFile(String jobId, String taskId, String filePath) {
        // Generated convenience method for getTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getTaskFileProperties(String jobId, String taskId, String filePath) {
        // Generated convenience method for getTaskFilePropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getTaskFilePropertiesWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listTaskFiles(String jobId, String taskId) {
        // Generated convenience method for listTaskFiles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listTaskFiles(jobId, taskId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param body The options to use for creating the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createNodeUser(String poolId, String nodeId, BatchNodeUserCreateOptions body) {
        // Generated convenience method for createNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createNodeUserWithResponse(poolId, nodeId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeUser(String poolId, String nodeId, String userName) {
        // Generated convenience method for deleteNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param body The options to use for updating the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateOptions body) {
        // Generated convenience method for replaceNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceNodeUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode getNode(String poolId, String nodeId) {
        // Generated convenience method for getNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rebootNode(String poolId, String nodeId) {
        // Generated convenience method for rebootNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        rebootNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimageNode(String poolId, String nodeId) {
        // Generated convenience method for reimageNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reimageNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableNodeScheduling(String poolId, String nodeId) {
        // Generated convenience method for disableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableNodeScheduling(String poolId, String nodeId) {
        // Generated convenience method for enableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote login settings for a Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettingsResult getNodeRemoteLoginSettings(String poolId, String nodeId) {
        // Generated convenience method for getNodeRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions)
                .getValue()
                .toObject(BatchNodeRemoteLoginSettingsResult.class);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getNodeRemoteDesktopFile(String poolId, String nodeId) {
        // Generated convenience method for getNodeRemoteDesktopFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeRemoteDesktopFileWithResponse(poolId, nodeId, requestOptions).getValue().toObject(byte[].class);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param body The Azure Batch service log files upload options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadNodeLogs(
            String poolId, String nodeId, UploadBatchServiceLogsOptions body) {
        // Generated convenience method for uploadNodeLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadNodeLogsWithResponse(poolId, nodeId, BinaryData.fromObject(body), requestOptions)
                .getValue()
                .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> listNodes(String poolId) {
        // Generated convenience method for listNodes
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listNodes(poolId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeVMExtension getNodeExtension(String poolId, String nodeId, String extensionName) {
        // Generated convenience method for getNodeExtensionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions)
                .getValue()
                .toObject(NodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeVMExtension> listNodeExtensions(String poolId, String nodeId) {
        // Generated convenience method for listNodeExtensions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listNodeExtensions(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeVMExtension.class));
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeFile(String poolId, String nodeId, String filePath) {
        // Generated convenience method for deleteNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getNodeFile(String poolId, String nodeId, String filePath) {
        // Generated convenience method for getNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue().toObject(byte[].class);
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getNodeFileProperties(String poolId, String nodeId, String filePath) {
        // Generated convenience method for getNodeFilePropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listNodeFiles(String poolId, String nodeId) {
        // Generated convenience method for listNodeFiles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
                .listNodeFiles(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the applications available in an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchApplication> listApplications(Integer maxresults, Integer timeOutInSeconds) {
        // Generated convenience method for listApplications
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return serviceClient
                .listApplications(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchApplication.class));
    }

    /**
     * Gets information about the specified Application.
     *
     * <p>This operation returns only Applications and versions that are available for use on Compute Nodes; that is,
     * that can be used in an Package reference. For administrator information about Applications and versions that are
     * not yet available to Compute Nodes, use the Azure portal or the Azure Resource Manager API.
     *
     * @param applicationId The ID of the Application.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return contains information about an application in an Azure Batch Account.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchApplication getApplication(String applicationId, Integer timeOutInSeconds) {
        // Generated convenience method for getApplicationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return getApplicationWithResponse(applicationId, requestOptions).getValue().toObject(BatchApplication.class);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.
     *
     * <p>If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the
     * Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including
     * a startTime or endTime these filters default to the start and end times of the last aggregation interval
     * currently available; that is, only the last aggregation interval is returned.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param starttime The earliest time from which to include metrics. This must be at least two and a half hours
     *     before the current time. If not specified this defaults to the start time of the last aggregation interval
     *     currently available.
     * @param endtime The latest time from which to include metrics. This must be at least two hours before the current
     *     time. If not specified this defaults to the end time of the last aggregation interval currently available.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a listing the usage metrics for an Account as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PoolUsageMetrics> listPoolUsageMetrics(
            Integer maxresults,
            Integer timeOutInSeconds,
            OffsetDateTime starttime,
            OffsetDateTime endtime,
            String filter) {
        // Generated convenience method for listPoolUsageMetrics
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (starttime != null) {
            requestOptions.addQueryParam("starttime", String.valueOf(starttime), false);
        }
        if (endtime != null) {
            requestOptions.addQueryParam("endtime", String.valueOf(endtime), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient
                .listPoolUsageMetrics(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(PoolUsageMetrics.class));
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * <p>When naming Pools, avoid including sensitive information such as user names or secret project names. This
     * information may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * @param body The Pool to be created.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPool(BatchPoolCreateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for createPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createPoolWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Pools in the specified Account.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPool> listPools(
            Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select, List<String> expand) {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listPools(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPool.class));
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * <p>When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any
     * ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute
     * Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had
     * been requested with the default requeue option); finally, the Pool is removed from the system. Because running
     * Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks
     * can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool
     * explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePool(String poolId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for deletePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        deletePoolWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets basic properties of a Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return basic properties of a Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean poolExists(String poolId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for poolExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return poolExistsWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchPool getPool(
            String poolId,
            Integer timeOutInSeconds,
            List<String> select,
            List<String> expand,
            RequestConditions requestConditions) {
        // Generated convenience method for getPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return getPoolWithResponse(poolId, requestOptions).getValue().toObject(BatchPool.class);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask
     * associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing
     * StartTask.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The pool properties to update.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePool(
            String poolId, BatchPoolUpdateOptions body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for updatePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        updatePoolWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables automatic scaling for a Pool.
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disablePoolAutoScale(String poolId, Integer timeOutInSeconds) {
        // Generated convenience method for disablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        disablePoolAutoScaleWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * <p>You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic
     * scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If
     * automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation
     * interval. You cannot call this API for the same Pool more than once every 30 seconds.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for enabling automatic scaling.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enablePoolAutoScale(
            String poolId,
            BatchPoolEnableAutoScaleOptions body,
            Integer timeOutInSeconds,
            RequestConditions requestConditions) {
        // Generated convenience method for enablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        enablePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * <p>This API is primarily for validating an autoscale formula, as it simply returns the result without applying
     * the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param body The options to use for evaluating the automatic scaling formula.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results and errors from an execution of a Pool autoscale formula.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoScaleRun evaluatePoolAutoScale(
            String poolId, BatchPoolEvaluateAutoScaleOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for evaluatePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return evaluatePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(body), requestOptions)
                .getValue()
                .toObject(AutoScaleRun.class);
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * <p>You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request
     * fails with status code 409. When you resize a Pool, the Pool's allocation state changes from steady to resizing.
     * You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service
     * returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To
     * remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for resizing the pool.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resizePool(
            String poolId, BatchPoolResizeOptions body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for resizePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        resizePoolWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * <p>This does not restore the Pool to its previous state before the resize operation: it only stops any further
     * changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number
     * of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state
     * changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request;
     * this API can also be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopPoolResize(String poolId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for stopPoolResizeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        stopPoolResizeWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * <p>This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask
     * associated with it and if StartTask is not specified with this request, then the Batch service will remove the
     * existing StartTask.
     *
     * @param poolId The ID of the Pool to update.
     * @param body The options to use for replacing properties on the pool.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replacePoolProperties(String poolId, BatchPoolReplaceOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for replacePoolPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        replacePoolPropertiesWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * <p>This operation can only run when the allocation state of the Pool is steady. When this operation runs, the
     * allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param body The options to use for removing the node.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeNodes(
            String poolId, NodeRemoveOptions body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for removeNodesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        removeNodesWithResponse(poolId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the supported Virtual Machine Images as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ImageInformation> listSupportedImages(
            Integer maxresults, Integer timeOutInSeconds, String filter) {
        // Generated convenience method for listSupportedImages
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient
                .listSupportedImages(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(ImageInformation.class));
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be
     * up to date. If you need exact node counts, use a list query.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PoolNodeCounts> listPoolNodeCounts(
            Integer maxresults, Integer timeOutInSeconds, String filter) {
        // Generated convenience method for listPoolNodeCounts
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient
                .listPoolNodeCounts(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(PoolNodeCounts.class));
    }

    /**
     * Deletes a Job.
     *
     * <p>Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides
     * the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes,
     * the Batch services deletes those Tasks' working directories and all their contents. When a Delete Job request is
     * received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in
     * deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is
     * being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJob(String jobId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        deleteJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Job.
     *
     * @param jobId The ID of the Job.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJob getJob(
            String jobId,
            Integer timeOutInSeconds,
            List<String> select,
            List<String> expand,
            RequestConditions requestConditions) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return getJobWithResponse(jobId, requestOptions).getValue().toObject(BatchJob.class);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a
     * request does not specify the constraints element, then the Job keeps the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body The options to use for updating the Job.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJob(
            String jobId, BatchJobUpdateOptions body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for updateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        updateJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job.
     *
     * <p>This fully replaces all the updatable properties of the Job. For example, if the Job has constraints
     * associated with it and if constraints is not specified with this request, then the Batch service will remove the
     * existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param body A job with updated properties.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJob(String jobId, BatchJob body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for replaceJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        replaceJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * <p>The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter
     * to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until
     * the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the
     * Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state.
     * If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails
     * with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param body The options to use for disabling the Job.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJob(
            String jobId, BatchJobDisableOptions body, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for disableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        disableJobWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * <p>When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation
     * is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch
     * service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a
     * Job containing active Tasks which were added more than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJob(String jobId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for enableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        enableJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * <p>When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch
     * service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then
     * the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain
     * in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not
     * be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param body The options to use for terminating the Job.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateJob(
            String jobId,
            Integer timeOutInSeconds,
            BatchJobTerminateOptions body,
            RequestConditions requestConditions) {
        // Generated convenience method for terminateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        terminateJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Creates a Job to the specified Account.
     *
     * <p>The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user
     * specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job
     * Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach,
     * the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when
     * naming Jobs, avoid including sensitive information such as user names or secret project names. This information
     * may appear in telemetry logs accessible to Microsoft Support engineers.
     *
     * @param body The Job to be created.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJob(BatchJobCreateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for createJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createJobWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Jobs in the specified Account.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobs(
            Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select, List<String> expand) {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobsFromSchedule(
            String jobScheduleId,
            Integer maxresults,
            Integer timeOutInSeconds,
            String filter,
            List<String> select,
            List<String> expand) {
        // Generated convenience method for listJobsFromSchedule
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listJobsFromSchedule(jobScheduleId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute
     * Nodes where the Job has run.
     *
     * <p>This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job
     * Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this
     * API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status
     * code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.
     *
     * @param jobId The ID of the Job.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks for a Job as paginated
     *     response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<JobPreparationAndReleaseTaskExecutionInformation> listJobPreparationAndReleaseTaskStatus(
            String jobId, Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select) {
        // Generated convenience method for listJobPreparationAndReleaseTaskStatus
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listJobPreparationAndReleaseTaskStatus(jobId, requestOptions)
                .mapPage(
                        bodyItemValue ->
                                bodyItemValue.toObject(JobPreparationAndReleaseTaskExecutionInformation.class));
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * <p>Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks
     * which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned
     * may not always be up to date. If you need exact task counts, use a list query.
     *
     * @param jobId The ID of the Job.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Task and TaskSlot counts for a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskCountsResult getJobTaskCounts(String jobId, Integer timeOutInSeconds) {
        // Generated convenience method for getJobTaskCountsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return getJobTaskCountsWithResponse(jobId, requestOptions).getValue().toObject(TaskCountsResult.class);
    }

    /**
     * Creates a Certificate to the specified Account.
     *
     * @param body The Certificate to be created.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createCertificate(BatchCertificate body, Integer timeOutInSeconds) {
        // Generated convenience method for createCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createCertificateWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchCertificate> listCertificates(
            Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select) {
        // Generated convenience method for listCertificates
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listCertificates(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchCertificate.class));
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * <p>If you try to delete a Certificate that is being used by a Pool or Compute Node, the status of the Certificate
     * changes to deleteFailed. If you decide that you want to continue using the Certificate, you can use this
     * operation to set the status of the Certificate back to active. If you intend to delete the Certificate, you do
     * not need to run this operation after the deletion failed. You must make sure that the Certificate is not being
     * used by any resources, and then you can try again to delete the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint, Integer timeOutInSeconds) {
        // Generated convenience method for cancelCertificateDeletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        cancelCertificateDeletionWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * <p>You cannot delete a Certificate if a resource (Pool or Compute Node) is using it. Before you can delete a
     * Certificate, you must therefore make sure that the Certificate is not associated with any existing Pools, the
     * Certificate is not installed on any Nodes (even if you remove a Certificate from a Pool, it is not removed from
     * existing Compute Nodes in that Pool until they restart), and no running Tasks depend on the Certificate. If you
     * try to delete a Certificate that is in use, the deletion fails. The Certificate status changes to deleteFailed.
     * You can use Cancel Delete Certificate to set the status back to active if you decide that you want to continue
     * using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCertificate(String thumbprintAlgorithm, String thumbprint, Integer timeOutInSeconds) {
        // Generated convenience method for deleteCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Certificate.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCertificate getCertificate(
            String thumbprintAlgorithm, String thumbprint, Integer timeOutInSeconds, List<String> select) {
        // Generated convenience method for getCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions)
                .getValue()
                .toObject(BatchCertificate.class);
    }

    /**
     * Checks the specified Job Schedule exists.
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean jobScheduleExists(
            String jobScheduleId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for jobScheduleExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return jobScheduleExistsWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * <p>When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are
     * deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period
     * is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they
     * are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJobSchedule(String jobScheduleId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for deleteJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        deleteJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job Schedule.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJobSchedule getJobSchedule(
            String jobScheduleId,
            Integer timeOutInSeconds,
            List<String> select,
            List<String> expand,
            RequestConditions requestConditions) {
        // Generated convenience method for getJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return getJobScheduleWithResponse(jobScheduleId, requestOptions).getValue().toObject(BatchJobSchedule.class);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This replaces only the Job Schedule properties specified in the request. For example, if the schedule property
     * is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body The options to use for updating the Job Schedule.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJobSchedule(
            String jobScheduleId,
            BatchJobScheduleUpdateOptions body,
            Integer timeOutInSeconds,
            RequestConditions requestConditions) {
        // Generated convenience method for updateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        updateJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * <p>This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is
     * not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job
     * Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are
     * unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param body A Job Schedule with updated properties.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJobSchedule(
            String jobScheduleId,
            BatchJobSchedule body,
            Integer timeOutInSeconds,
            RequestConditions requestConditions) {
        // Generated convenience method for replaceJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        replaceJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Disables a Job Schedule.
     *
     * <p>No new Jobs will be created until the Job Schedule is enabled again.
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJobSchedule(
            String jobScheduleId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for disableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        disableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Enables a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJobSchedule(String jobScheduleId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for enableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        enableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateJobSchedule(
            String jobScheduleId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for terminateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        terminateJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Creates a Job Schedule to the specified Account.
     *
     * @param body The Job Schedule to be created.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJobSchedule(BatchJobScheduleCreateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for createJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createJobScheduleWithResponse(BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     *
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobSchedule> listJobSchedules(
            Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select, List<String> expand) {
        // Generated convenience method for listJobSchedules
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listJobSchedules(requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobSchedule.class));
    }

    /**
     * Creates a Task to the specified Job.
     *
     * <p>The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180
     * days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param body The Task to be created.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTask(String jobId, BatchTaskCreateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for createTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createTaskWithResponse(jobId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @param jobId The ID of the Job.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchTask> listTasks(
            String jobId,
            Integer maxresults,
            Integer timeOutInSeconds,
            String filter,
            List<String> select,
            List<String> expand) {
        // Generated convenience method for listTasks
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listTasks(jobId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchTask.class));
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * <p>Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the
     * same order the Tasks were submitted in this request. If the server times out or the connection is closed during
     * the request, the request may have been partially or fully processed, or not at all. In such cases, the user
     * should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a
     * request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded,
     * the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a
     * client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to
     * completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the
     * Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param collection The Tasks to be added.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of adding a collection of Tasks to a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TaskAddCollectionResult createTaskCollection(
            String jobId, BatchTaskCollection collection, Integer timeOutInSeconds) {
        // Generated convenience method for createTaskCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return createTaskCollectionWithResponse(jobId, BinaryData.fromObject(collection), requestOptions)
                .getValue()
                .toObject(TaskAddCollectionResult.class);
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * <p>When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted
     * (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to
     * the primary task; subtasks and their files are then deleted asynchronously in the background.
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTask(String jobId, String taskId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for deleteTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        deleteTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Task.
     *
     * <p>For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary
     * Task. Use the list subtasks API to retrieve information about subtasks.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @param expand An OData $expand clause.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations
     *     include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host
     *     failure. Retries due to recovery operations are independent of and are not counted against the
     *     maxTaskRetryCount.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTask getTask(
            String jobId,
            String taskId,
            Integer timeOutInSeconds,
            List<String> select,
            List<String> expand,
            RequestConditions requestConditions) {
        // Generated convenience method for getTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "$expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        return getTaskWithResponse(jobId, taskId, requestOptions).getValue().toObject(BatchTask.class);
    }

    /**
     * Updates the properties of the specified Task.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param body The Task to update.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceTask(
            String jobId,
            String taskId,
            BatchTask body,
            Integer timeOutInSeconds,
            RequestConditions requestConditions) {
        // Generated convenience method for replaceTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        replaceTaskWithResponse(jobId, taskId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance Task.
     *
     * <p>If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the subtasks of a Task.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTaskListSubtasksResult listSubTasks(
            String jobId, String taskId, Integer timeOutInSeconds, List<String> select) {
        // Generated convenience method for listSubTasksWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return listSubTasksWithResponse(jobId, taskId, requestOptions)
                .getValue()
                .toObject(BatchTaskListSubtasksResult.class);
    }

    /**
     * Terminates the specified Task.
     *
     * <p>When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate
     * Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the
     * background.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateTask(
            String jobId, String taskId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for terminateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        terminateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
     *
     * <p>Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is
     * changed to active. As the Task is no longer in the completed state, any previous exit code or failure information
     * is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0.
     * Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit
     * code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reactivateTask(
            String jobId, String taskId, Integer timeOutInSeconds, RequestConditions requestConditions) {
        // Generated convenience method for reactivateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        reactivateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory
     *     instead of a file, you can set recursive to true to delete the directory and all of the files and
     *     subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTaskFile(
            String jobId, String taskId, String filePath, Integer timeOutInSeconds, Boolean recursive) {
        // Generated convenience method for deleteTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is
     *     bytes=startRange-endRange.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTaskFile(
            String jobId,
            String taskId,
            String filePath,
            Integer timeOutInSeconds,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince,
            String ocpRange) {
        // Generated convenience method for getTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ocpRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("ocp-range"), ocpRange);
        }
        return getTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getTaskFileProperties(
            String jobId,
            String taskId,
            String filePath,
            Integer timeOutInSeconds,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for getTaskFilePropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        getTaskFilePropertiesWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files.
     * @param recursive Whether to list children of the Task directory. This parameter can be used in combination with
     *     the filter parameter to list specific type of files.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listTaskFiles(
            String jobId,
            String taskId,
            Integer maxresults,
            Integer timeOutInSeconds,
            String filter,
            Boolean recursive) {
        // Generated convenience method for listTaskFiles
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        return serviceClient
                .listTaskFiles(jobId, taskId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * <p>You can add a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param body The options to use for creating the user.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createNodeUser(
            String poolId, String nodeId, BatchNodeUserCreateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for createNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        createNodeUserWithResponse(poolId, nodeId, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * <p>You can delete a user Account to a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeUser(String poolId, String nodeId, String userName, Integer timeOutInSeconds) {
        // Generated convenience method for deleteNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * <p>This operation replaces of all the updatable properties of the Account. For example, if the expiryTime element
     * is not specified, the current value is replaced with the default value, not left unmodified. You can update a
     * user Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param body The options to use for updating the user.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceNodeUser(
            String poolId, String nodeId, String userName, BatchNodeUserUpdateOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for replaceNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        replaceNodeUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode getNode(String poolId, String nodeId, Integer timeOutInSeconds, List<String> select) {
        // Generated convenience method for getNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return getNodeWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * <p>You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param body The options to use for rebooting the Compute Node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void rebootNode(String poolId, String nodeId, Integer timeOutInSeconds, NodeRebootOptions body) {
        // Generated convenience method for rebootNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        rebootNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * <p>You can reinstall the operating system on a Compute Node only if it is in an idle or running state. This API
     * can be invoked only on Pools created with the cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param body The options to use for reimaging the Compute Node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimageNode(String poolId, String nodeId, Integer timeOutInSeconds, NodeReimageOptions body) {
        // Generated convenience method for reimageNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        reimageNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * <p>You can disable Task scheduling on a Compute Node only if its current scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param body The options to use for disabling scheduling on the Compute Node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableNodeScheduling(
            String poolId, String nodeId, Integer timeOutInSeconds, NodeDisableSchedulingOptions body) {
        // Generated convenience method for disableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * <p>You can enable Task scheduling on a Compute Node only if its current scheduling state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableNodeScheduling(String poolId, String nodeId, Integer timeOutInSeconds) {
        // Generated convenience method for enableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * <p>Before you can remotely login to a Compute Node using the remote login settings, you must create a user
     * Account on the Compute Node. This API can be invoked only on Pools created with the virtual machine configuration
     * property. For Pools created with a cloud service configuration, see the GetRemoteDesktop API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote login settings for a Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettingsResult getNodeRemoteLoginSettings(
            String poolId, String nodeId, Integer timeOutInSeconds) {
        // Generated convenience method for getNodeRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions)
                .getValue()
                .toObject(BatchNodeRemoteLoginSettingsResult.class);
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified Compute Node.
     *
     * <p>Before you can access a Compute Node by using the RDP file, you must create a user Account on the Compute
     * Node. This API can only be invoked on Pools created with a cloud service configuration. For Pools created with a
     * virtual machine configuration, see the GetRemoteLoginSettings API.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getNodeRemoteDesktopFile(String poolId, String nodeId, Integer timeOutInSeconds) {
        // Generated convenience method for getNodeRemoteDesktopFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return getNodeRemoteDesktopFileWithResponse(poolId, nodeId, requestOptions).getValue().toObject(byte[].class);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.
     *
     * <p>This is for gathering Azure Batch service log files in an automated fashion from Compute Nodes if you are
     * experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared
     * with Azure support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop Protocol file.
     * @param body The Azure Batch service log files upload options.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadNodeLogs(
            String poolId, String nodeId, UploadBatchServiceLogsOptions body, Integer timeOutInSeconds) {
        // Generated convenience method for uploadNodeLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        return uploadNodeLogsWithResponse(poolId, nodeId, BinaryData.fromObject(body), requestOptions)
                .getValue()
                .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> listNodes(
            String poolId, Integer maxresults, Integer timeOutInSeconds, String filter, List<String> select) {
        // Generated convenience method for listNodes
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listNodes(poolId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the of the Compute Node Extension that you want to get information about.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeVMExtension getNodeExtension(
            String poolId, String nodeId, String extensionName, Integer timeOutInSeconds, List<String> select) {
        // Generated convenience method for getNodeExtensionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions)
                .getValue()
                .toObject(NodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param select An OData $select clause.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with {@link
     *     PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeVMExtension> listNodeExtensions(
            String poolId, String nodeId, Integer maxresults, Integer timeOutInSeconds, List<String> select) {
        // Generated convenience method for listNodeExtensions
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "$select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")),
                    false);
        }
        return serviceClient
                .listNodeExtensions(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeVMExtension.class));
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory
     *     instead of a file, you can set recursive to true to delete the directory and all of the files and
     *     subdirectories in it. If recursive is false then the directory must be empty or deletion will fail.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeFile(
            String poolId, String nodeId, String filePath, Integer timeOutInSeconds, Boolean recursive) {
        // Generated convenience method for deleteNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is
     *     bytes=startRange-endRange.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] getNodeFile(
            String poolId,
            String nodeId,
            String filePath,
            Integer timeOutInSeconds,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince,
            String ocpRange) {
        // Generated convenience method for getNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ocpRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("ocp-range"), ocpRange);
        }
        return getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue().toObject(byte[].class);
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node from which you want to delete the file.
     * @param filePath The path to the file or directory that you want to delete.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has been modified since the specified time.
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The
     *     operation will be performed only if the resource on the service has not been modified since the specified
     *     time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getNodeFileProperties(
            String poolId,
            String nodeId,
            String filePath,
            Integer timeOutInSeconds,
            OffsetDateTime ifModifiedSince,
            OffsetDateTime ifUnmodifiedSince) {
        // Generated convenience method for getNodeFilePropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_MODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(
                    HttpHeaderName.IF_UNMODIFIED_SINCE, String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 applications can be
     *     returned.
     * @param timeOutInSeconds The maximum number of items to return in the response. A maximum of 1000 applications can
     *     be returned.
     * @param filter An OData $filter clause. For more information on constructing this filter, see
     *     https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
     * @param recursive Whether to list children of a directory.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with a Task on a Compute Node
     *     as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeFile> listNodeFiles(
            String poolId,
            String nodeId,
            Integer maxresults,
            Integer timeOutInSeconds,
            String filter,
            Boolean recursive) {
        // Generated convenience method for listNodeFiles
        RequestOptions requestOptions = new RequestOptions();
        if (maxresults != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxresults), false);
        }
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        return serviceClient
                .listNodeFiles(poolId, nodeId, requestOptions)
                .mapPage(bodyItemValue -> bodyItemValue.toObject(NodeFile.class));
    }
}
