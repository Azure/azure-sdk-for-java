// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch;

import com.azure.compute.batch.implementation.BatchClientImpl;
import com.azure.compute.batch.implementation.task.SyncClientTaskSubmitter;
import com.azure.compute.batch.implementation.task.TaskManager;
import com.azure.compute.batch.implementation.task.TaskSubmitter;
import com.azure.compute.batch.models.AutoScaleRun;
import com.azure.compute.batch.models.BatchApplication;
import com.azure.compute.batch.models.BatchApplicationGetOptions;
import com.azure.compute.batch.models.BatchApplicationsListOptions;
import com.azure.compute.batch.models.BatchCertificate;
import com.azure.compute.batch.models.BatchCertificateCancelDeletionOptions;
import com.azure.compute.batch.models.BatchCertificateCreateOptions;
import com.azure.compute.batch.models.BatchCertificateDeleteOptions;
import com.azure.compute.batch.models.BatchCertificateGetOptions;
import com.azure.compute.batch.models.BatchCertificatesListOptions;
import com.azure.compute.batch.models.BatchCreateTaskCollectionResult;
import com.azure.compute.batch.models.BatchErrorException;
import com.azure.compute.batch.models.BatchFileProperties;
import com.azure.compute.batch.models.BatchJob;
import com.azure.compute.batch.models.BatchJobCreateOptions;
import com.azure.compute.batch.models.BatchJobCreateParameters;
import com.azure.compute.batch.models.BatchJobDeleteOptions;
import com.azure.compute.batch.models.BatchJobDisableOptions;
import com.azure.compute.batch.models.BatchJobDisableParameters;
import com.azure.compute.batch.models.BatchJobEnableOptions;
import com.azure.compute.batch.models.BatchJobGetOptions;
import com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatus;
import com.azure.compute.batch.models.BatchJobPreparationAndReleaseTaskStatusListOptions;
import com.azure.compute.batch.models.BatchJobReplaceOptions;
import com.azure.compute.batch.models.BatchJobSchedule;
import com.azure.compute.batch.models.BatchJobScheduleCreateOptions;
import com.azure.compute.batch.models.BatchJobScheduleCreateParameters;
import com.azure.compute.batch.models.BatchJobScheduleDeleteOptions;
import com.azure.compute.batch.models.BatchJobScheduleDisableOptions;
import com.azure.compute.batch.models.BatchJobScheduleEnableOptions;
import com.azure.compute.batch.models.BatchJobScheduleExistsOptions;
import com.azure.compute.batch.models.BatchJobScheduleGetOptions;
import com.azure.compute.batch.models.BatchJobScheduleReplaceOptions;
import com.azure.compute.batch.models.BatchJobScheduleTerminateOptions;
import com.azure.compute.batch.models.BatchJobScheduleUpdateOptions;
import com.azure.compute.batch.models.BatchJobScheduleUpdateParameters;
import com.azure.compute.batch.models.BatchJobSchedulesListOptions;
import com.azure.compute.batch.models.BatchJobTaskCountsGetOptions;
import com.azure.compute.batch.models.BatchJobTerminateOptions;
import com.azure.compute.batch.models.BatchJobTerminateParameters;
import com.azure.compute.batch.models.BatchJobUpdateOptions;
import com.azure.compute.batch.models.BatchJobUpdateParameters;
import com.azure.compute.batch.models.BatchJobsFromScheduleListOptions;
import com.azure.compute.batch.models.BatchJobsListOptions;
import com.azure.compute.batch.models.BatchNode;
import com.azure.compute.batch.models.BatchNodeDeallocateOptions;
import com.azure.compute.batch.models.BatchNodeDeallocateParameters;
import com.azure.compute.batch.models.BatchNodeDisableSchedulingParameters;
import com.azure.compute.batch.models.BatchNodeExtensionGetOptions;
import com.azure.compute.batch.models.BatchNodeExtensionsListOptions;
import com.azure.compute.batch.models.BatchNodeFile;
import com.azure.compute.batch.models.BatchNodeFileDeleteOptions;
import com.azure.compute.batch.models.BatchNodeFileGetOptions;
import com.azure.compute.batch.models.BatchNodeFilePropertiesGetOptions;
import com.azure.compute.batch.models.BatchNodeFilesListOptions;
import com.azure.compute.batch.models.BatchNodeGetOptions;
import com.azure.compute.batch.models.BatchNodeLogsUploadOptions;
import com.azure.compute.batch.models.BatchNodeRebootOptions;
import com.azure.compute.batch.models.BatchNodeRebootParameters;
import com.azure.compute.batch.models.BatchNodeReimageOptions;
import com.azure.compute.batch.models.BatchNodeReimageParameters;
import com.azure.compute.batch.models.BatchNodeRemoteLoginSettings;
import com.azure.compute.batch.models.BatchNodeRemoteLoginSettingsGetOptions;
import com.azure.compute.batch.models.BatchNodeRemoveParameters;
import com.azure.compute.batch.models.BatchNodeSchedulingDisableOptions;
import com.azure.compute.batch.models.BatchNodeSchedulingEnableOptions;
import com.azure.compute.batch.models.BatchNodeStartOptions;
import com.azure.compute.batch.models.BatchNodeUserCreateOptions;
import com.azure.compute.batch.models.BatchNodeUserCreateParameters;
import com.azure.compute.batch.models.BatchNodeUserDeleteOptions;
import com.azure.compute.batch.models.BatchNodeUserReplaceOptions;
import com.azure.compute.batch.models.BatchNodeUserUpdateParameters;
import com.azure.compute.batch.models.BatchNodeVMExtension;
import com.azure.compute.batch.models.BatchNodesListOptions;
import com.azure.compute.batch.models.BatchNodesRemoveOptions;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolCreateOptions;
import com.azure.compute.batch.models.BatchPoolCreateParameters;
import com.azure.compute.batch.models.BatchPoolDeleteOptions;
import com.azure.compute.batch.models.BatchPoolDisableAutoScaleOptions;
import com.azure.compute.batch.models.BatchPoolEnableAutoScaleOptions;
import com.azure.compute.batch.models.BatchPoolEnableAutoScaleParameters;
import com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleOptions;
import com.azure.compute.batch.models.BatchPoolEvaluateAutoScaleParameters;
import com.azure.compute.batch.models.BatchPoolExistsOptions;
import com.azure.compute.batch.models.BatchPoolGetOptions;
import com.azure.compute.batch.models.BatchPoolNodeCounts;
import com.azure.compute.batch.models.BatchPoolNodeCountsListOptions;
import com.azure.compute.batch.models.BatchPoolPropertiesReplaceOptions;
import com.azure.compute.batch.models.BatchPoolReplaceParameters;
import com.azure.compute.batch.models.BatchPoolResizeOptions;
import com.azure.compute.batch.models.BatchPoolResizeParameters;
import com.azure.compute.batch.models.BatchPoolResizeStopOptions;
import com.azure.compute.batch.models.BatchPoolUpdateOptions;
import com.azure.compute.batch.models.BatchPoolUpdateParameters;
import com.azure.compute.batch.models.BatchPoolUsageMetrics;
import com.azure.compute.batch.models.BatchPoolUsageMetricsListOptions;
import com.azure.compute.batch.models.BatchPoolsListOptions;
import com.azure.compute.batch.models.BatchSubTasksListOptions;
import com.azure.compute.batch.models.BatchSubtask;
import com.azure.compute.batch.models.BatchSupportedImage;
import com.azure.compute.batch.models.BatchTask;
import com.azure.compute.batch.models.BatchTaskBulkCreateOptions;
import com.azure.compute.batch.models.BatchTaskCollectionCreateOptions;
import com.azure.compute.batch.models.BatchTaskCountsResult;
import com.azure.compute.batch.models.BatchTaskCreateOptions;
import com.azure.compute.batch.models.BatchTaskCreateParameters;
import com.azure.compute.batch.models.BatchTaskDeleteOptions;
import com.azure.compute.batch.models.BatchTaskFileDeleteOptions;
import com.azure.compute.batch.models.BatchTaskFileGetOptions;
import com.azure.compute.batch.models.BatchTaskFilePropertiesGetOptions;
import com.azure.compute.batch.models.BatchTaskFilesListOptions;
import com.azure.compute.batch.models.BatchTaskGetOptions;
import com.azure.compute.batch.models.BatchTaskGroup;
import com.azure.compute.batch.models.BatchTaskReactivateOptions;
import com.azure.compute.batch.models.BatchTaskReplaceOptions;
import com.azure.compute.batch.models.BatchTaskTerminateOptions;
import com.azure.compute.batch.models.BatchTasksListOptions;
import com.azure.compute.batch.models.SupportedBatchImagesListOptions;
import com.azure.compute.batch.models.UploadBatchServiceLogsParameters;
import com.azure.compute.batch.models.UploadBatchServiceLogsResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.RequestConditions;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the synchronous BatchClient type.
 */
@ServiceClient(builder = BatchClientBuilder.class)
public final class BatchClient {

    @Generated
    private final BatchClientImpl serviceClient;

    private final BatchAsyncClient asyncClient;

    /**
     * Initializes an instance of BatchClient class.
     *
     * @param serviceClient the service client implementation.
     */
    BatchClient(BatchClientImpl serviceClient) {
        this.serviceClient = serviceClient;
        this.asyncClient = new BatchAsyncClient(this.serviceClient);
    }

    /**
     * Adds multiple tasks to a job.
     *
     * @param jobId The ID of the job to which to add the task.
     * @param taskList A list of {@link BatchTaskCreateParameters tasks} to add.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList) {
        createTasks(jobId, taskList, null);
    }

    /**
     * Creates a collection of Tasks to the specified Job.
     *
     * <p>
     * Note that each Task must have a unique ID.This method can work with multiple threads. The parallel degree can
     * be specified by the user. If the server times out or the connection is closed during the request, the request may
     * have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note
     * that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the
     * same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks
     * unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry,
     * it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on
     * the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not
     * completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it
     * was in at that time.
     *
     * @param jobId The ID of the job to which to add the task.
     * @param taskList A list of {@link BatchTaskCreateParameters tasks} to add.
     * @param batchTaskBulkCreateOptions Optional parameters for Create Tasks operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTasks(String jobId, Collection<BatchTaskCreateParameters> taskList,
        BatchTaskBulkCreateOptions batchTaskBulkCreateOptions) {
        TaskSubmitter taskSubmitter = new SyncClientTaskSubmitter(this);
        TaskManager.createTasks(taskSubmitter, jobId, taskList, batchTaskBulkCreateOptions);
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Required)
     *     versions (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the applications available in an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listApplications(RequestOptions requestOptions) {
        return this.serviceClient.listApplications(requestOptions);
    }

    /**
     * Gets information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about Applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Required)
     *     versions (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param applicationId The ID of the Application.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getApplicationWithResponse(String applicationId, RequestOptions requestOptions) {
        return this.serviceClient.getApplicationWithResponse(applicationId, requestOptions);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals,
     * for the specified Account.
     *
     * If you do not specify a $filter clause including a poolId, the response
     * includes all Pools that existed in the Account in the time range of the
     * returned aggregation intervals. If you do not specify a $filter clause
     * including a startTime or endTime these filters default to the start and end
     * times of the last aggregation interval currently available; that is, only the
     * last aggregation interval is returned.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>startTime</td><td>OffsetDateTime</td><td>No</td><td>The earliest time from which to include metrics. This
     * must be at least two and
     * a half hours before the current time. If not specified this defaults to the
     * start time of the last aggregation interval currently available.</td></tr>
     * <tr><td>endtime</td><td>OffsetDateTime</td><td>No</td><td>The latest time from which to include metrics. This
     * must be at least two hours
     * before the current time. If not specified this defaults to the end time of the
     * last aggregation interval currently available.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     poolId: String (Required)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Required)
     *     vmSize: String (Required)
     *     totalCoreHours: double (Required)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of a listing the usage metrics for an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPoolUsageMetrics(RequestOptions requestOptions) {
        return this.serviceClient.listPoolUsageMetrics(requestOptions);
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * When naming Pools, avoid including sensitive information such as user names or
     * secret project names. This information may appear in telemetry logs accessible
     * to Microsoft Support engineers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     vmSize: String (Required)
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *             caching: String(none/readonly/readwrite) (Optional)
     *             diskSizeGB: Integer (Optional)
     *             managedDisk (Optional): {
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                 securityProfile (Optional): {
     *                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                 }
     *             }
     *             writeAcceleratorEnabled: Boolean (Optional)
     *         }
     *         securityProfile (Optional): {
     *             encryptionAtHost: Boolean (Optional)
     *             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *             uefiSettings (Optional): {
     *                 secureBootEnabled: Boolean (Optional)
     *                 vTpmEnabled: Boolean (Optional)
     *             }
     *         }
     *         serviceArtifactReference (Optional): {
     *             id: String (Required)
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     resourceTags (Optional): {
     *         String: String (Required)
     *     }
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 accountKey: String (Required)
     *                 azureFileUrl: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     upgradePolicy (Optional): {
     *         mode: String(automatic/manual/rolling) (Required)
     *         automaticOSUpgradePolicy (Optional): {
     *             disableAutomaticRollback: Boolean (Optional)
     *             enableAutomaticOSUpgrade: Boolean (Optional)
     *             useRollingUpgradePolicy: Boolean (Optional)
     *             osRollingUpgradeDeferral: Boolean (Optional)
     *         }
     *         rollingUpgradePolicy (Optional): {
     *             enableCrossZoneUpgrade: Boolean (Optional)
     *             maxBatchInstancePercent: Integer (Optional)
     *             maxUnhealthyInstancePercent: Integer (Optional)
     *             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *             pauseTimeBetweenBatches: Duration (Optional)
     *             prioritizeUnhealthyInstances: Boolean (Optional)
     *             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param pool The Pool to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createPoolWithResponse(BinaryData pool, RequestOptions requestOptions) {
        return this.serviceClient.createPoolWithResponse(pool, requestOptions);
    }

    /**
     * Lists all of the Pools which be mounted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     allocationState: String(steady/resizing/stopping) (Optional)
     *     allocationStateTransitionTime: OffsetDateTime (Optional)
     *     vmSize: String (Optional)
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *             caching: String(none/readonly/readwrite) (Optional)
     *             diskSizeGB: Integer (Optional)
     *             managedDisk (Optional): {
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                 securityProfile (Optional): {
     *                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                 }
     *             }
     *             writeAcceleratorEnabled: Boolean (Optional)
     *         }
     *         securityProfile (Optional): {
     *             encryptionAtHost: Boolean (Optional)
     *             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *             uefiSettings (Optional): {
     *                 secureBootEnabled: Boolean (Optional)
     *                 vTpmEnabled: Boolean (Optional)
     *             }
     *         }
     *         serviceArtifactReference (Optional): {
     *             id: String (Required)
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     resizeErrors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     resourceTags (Optional): {
     *         String: String (Required)
     *     }
     *     currentDedicatedNodes: Integer (Optional)
     *     currentLowPriorityNodes: Integer (Optional)
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     autoScaleRun (Optional): {
     *         timestamp: OffsetDateTime (Required)
     *         results: String (Optional)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         usageStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             dedicatedCoreTime: Duration (Required)
     *         }
     *         resourceStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             avgCPUPercentage: double (Required)
     *             avgMemoryGiB: double (Required)
     *             peakMemoryGiB: double (Required)
     *             avgDiskGiB: double (Required)
     *             peakDiskGiB: double (Required)
     *             diskReadIOps: long (Required)
     *             diskWriteIOps: long (Required)
     *             diskReadGiB: double (Required)
     *             diskWriteGiB: double (Required)
     *             networkReadGiB: double (Required)
     *             networkWriteGiB: double (Required)
     *         }
     *     }
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 accountKey: String (Required)
     *                 azureFileUrl: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     identity (Optional): {
     *         type: String(UserAssigned/None) (Required)
     *         userAssignedIdentities (Optional): [
     *              (Optional){
     *                 resourceId: String (Required)
     *                 clientId: String (Optional)
     *                 principalId: String (Optional)
     *             }
     *         ]
     *     }
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     upgradePolicy (Optional): {
     *         mode: String(automatic/manual/rolling) (Required)
     *         automaticOSUpgradePolicy (Optional): {
     *             disableAutomaticRollback: Boolean (Optional)
     *             enableAutomaticOSUpgrade: Boolean (Optional)
     *             useRollingUpgradePolicy: Boolean (Optional)
     *             osRollingUpgradeDeferral: Boolean (Optional)
     *         }
     *         rollingUpgradePolicy (Optional): {
     *             enableCrossZoneUpgrade: Boolean (Optional)
     *             maxBatchInstancePercent: Integer (Optional)
     *             maxUnhealthyInstancePercent: Integer (Optional)
     *             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *             pauseTimeBetweenBatches: Duration (Optional)
     *             prioritizeUnhealthyInstances: Boolean (Optional)
     *             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPools(RequestOptions requestOptions) {
        return this.serviceClient.listPools(requestOptions);
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * When you request that a Pool be deleted, the following actions occur: the Pool
     * state is set to deleting; any ongoing resize operation on the Pool are stopped;
     * the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
     * running on existing Compute Nodes are terminated and requeued (as if a resize
     * Pool operation had been requested with the default requeue option); finally,
     * the Pool is removed from the system. Because running Tasks are requeued, the
     * user can rerun these Tasks by updating their Job to target a different Pool.
     * The Tasks can then run on the new Pool. If you want to override the requeue
     * behavior, then you should call resize Pool explicitly to shrink the Pool to
     * zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with
     * error code PoolBeingDeleted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deletePoolWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.deletePoolWithResponse(poolId, requestOptions);
    }

    /**
     * Gets basic properties of a Pool.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * boolean
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return basic properties of a Pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> poolExistsWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.poolExistsWithResponse(poolId, requestOptions);
    }

    /**
     * Gets information about the specified Pool.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     allocationState: String(steady/resizing/stopping) (Optional)
     *     allocationStateTransitionTime: OffsetDateTime (Optional)
     *     vmSize: String (Optional)
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                  (Optional){
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *             caching: String(none/readonly/readwrite) (Optional)
     *             diskSizeGB: Integer (Optional)
     *             managedDisk (Optional): {
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                 securityProfile (Optional): {
     *                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                 }
     *             }
     *             writeAcceleratorEnabled: Boolean (Optional)
     *         }
     *         securityProfile (Optional): {
     *             encryptionAtHost: Boolean (Optional)
     *             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *             uefiSettings (Optional): {
     *                 secureBootEnabled: Boolean (Optional)
     *                 vTpmEnabled: Boolean (Optional)
     *             }
     *         }
     *         serviceArtifactReference (Optional): {
     *             id: String (Required)
     *         }
     *     }
     *     resizeTimeout: Duration (Optional)
     *     resizeErrors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *     ]
     *     resourceTags (Optional): {
     *         String: String (Required)
     *     }
     *     currentDedicatedNodes: Integer (Optional)
     *     currentLowPriorityNodes: Integer (Optional)
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     enableAutoScale: Boolean (Optional)
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     *     autoScaleRun (Optional): {
     *         timestamp: OffsetDateTime (Required)
     *         results: String (Optional)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             values (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     }
     *     enableInterNodeCommunication: Boolean (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): (recursive schema, see registry above)
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         usageStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             dedicatedCoreTime: Duration (Required)
     *         }
     *         resourceStats (Optional): {
     *             startTime: OffsetDateTime (Required)
     *             lastUpdateTime: OffsetDateTime (Required)
     *             avgCPUPercentage: double (Required)
     *             avgMemoryGiB: double (Required)
     *             peakMemoryGiB: double (Required)
     *             avgDiskGiB: double (Required)
     *             peakDiskGiB: double (Required)
     *             diskReadIOps: long (Required)
     *             diskWriteIOps: long (Required)
     *             diskReadGiB: double (Required)
     *             diskWriteGiB: double (Required)
     *             networkReadGiB: double (Required)
     *             networkWriteGiB: double (Required)
     *         }
     *     }
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 accountKey: String (Required)
     *                 azureFileUrl: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     identity (Optional): {
     *         type: String(UserAssigned/None) (Required)
     *         userAssignedIdentities (Optional): [
     *              (Optional){
     *                 resourceId: String (Required)
     *                 clientId: String (Optional)
     *                 principalId: String (Optional)
     *             }
     *         ]
     *     }
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     currentNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     upgradePolicy (Optional): {
     *         mode: String(automatic/manual/rolling) (Required)
     *         automaticOSUpgradePolicy (Optional): {
     *             disableAutomaticRollback: Boolean (Optional)
     *             enableAutomaticOSUpgrade: Boolean (Optional)
     *             useRollingUpgradePolicy: Boolean (Optional)
     *             osRollingUpgradeDeferral: Boolean (Optional)
     *         }
     *         rollingUpgradePolicy (Optional): {
     *             enableCrossZoneUpgrade: Boolean (Optional)
     *             maxBatchInstancePercent: Integer (Optional)
     *             maxUnhealthyInstancePercent: Integer (Optional)
     *             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *             pauseTimeBetweenBatches: Duration (Optional)
     *             prioritizeUnhealthyInstances: Boolean (Optional)
     *             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPoolWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.getPoolWithResponse(poolId, requestOptions);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This only replaces the Pool properties specified in the request. For example,
     * if the Pool has a StartTask associated with it, and a request does not specify
     * a StartTask element, then the Pool keeps the existing StartTask.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     displayName: String (Optional)
     *     vmSize: String (Optional)
     *     enableInterNodeCommunication: Boolean (Optional)
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     metadata (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     virtualMachineConfiguration (Optional): {
     *         imageReference (Required): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         nodeAgentSKUId: String (Required)
     *         windowsConfiguration (Optional): {
     *             enableAutomaticUpdates: Boolean (Optional)
     *         }
     *         dataDisks (Optional): [
     *              (Optional){
     *                 lun: int (Required)
     *                 caching: String(none/readonly/readwrite) (Optional)
     *                 diskSizeGB: int (Required)
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *             }
     *         ]
     *         licenseType: String (Optional)
     *         containerConfiguration (Optional): {
     *             type: String(dockerCompatible/criCompatible) (Required)
     *             containerImageNames (Optional): [
     *                 String (Optional)
     *             ]
     *             containerRegistries (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *         diskEncryptionConfiguration (Optional): {
     *             targets (Optional): [
     *                 String(osdisk/temporarydisk) (Optional)
     *             ]
     *         }
     *         nodePlacementConfiguration (Optional): {
     *             policy: String(regional/zonal) (Optional)
     *         }
     *         extensions (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 publisher: String (Required)
     *                 type: String (Required)
     *                 typeHandlerVersion: String (Optional)
     *                 autoUpgradeMinorVersion: Boolean (Optional)
     *                 enableAutomaticUpgrade: Boolean (Optional)
     *                 settings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 protectedSettings (Optional): {
     *                     String: String (Required)
     *                 }
     *                 provisionAfterExtensions (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *         osDisk (Optional): {
     *             ephemeralOSDiskSettings (Optional): {
     *                 placement: String(cachedisk) (Optional)
     *             }
     *             caching: String(none/readonly/readwrite) (Optional)
     *             diskSizeGB: Integer (Optional)
     *             managedDisk (Optional): {
     *                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                 securityProfile (Optional): {
     *                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                 }
     *             }
     *             writeAcceleratorEnabled: Boolean (Optional)
     *         }
     *         securityProfile (Optional): {
     *             encryptionAtHost: Boolean (Optional)
     *             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *             uefiSettings (Optional): {
     *                 secureBootEnabled: Boolean (Optional)
     *                 vTpmEnabled: Boolean (Optional)
     *             }
     *         }
     *         serviceArtifactReference (Optional): {
     *             id: String (Required)
     *         }
     *     }
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *     taskSlotsPerNode: Integer (Optional)
     *     taskSchedulingPolicy (Optional): {
     *         nodeFillType: String(spread/pack) (Required)
     *     }
     *     networkConfiguration (Optional): {
     *         subnetId: String (Optional)
     *         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *         endpointConfiguration (Optional): {
     *             inboundNATPools (Required): [
     *                  (Required){
     *                     name: String (Required)
     *                     protocol: String(tcp/udp) (Required)
     *                     backendPort: int (Required)
     *                     frontendPortRangeStart: int (Required)
     *                     frontendPortRangeEnd: int (Required)
     *                     networkSecurityGroupRules (Optional): [
     *                          (Optional){
     *                             priority: int (Required)
     *                             access: String(allow/deny) (Required)
     *                             sourceAddressPrefix: String (Required)
     *                             sourcePortRanges (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *         publicIPAddressConfiguration (Optional): {
     *             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *             ipAddressIds (Optional): [
     *                 String (Optional)
     *             ]
     *         }
     *         enableAcceleratedNetworking: Boolean (Optional)
     *     }
     *     resourceTags (Optional): {
     *         String: String (Required)
     *     }
     *     userAccounts (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             password: String (Required)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *             linuxUserConfiguration (Optional): {
     *                 uid: Integer (Optional)
     *                 gid: Integer (Optional)
     *                 sshPrivateKey: String (Optional)
     *             }
     *             windowsUserConfiguration (Optional): {
     *                 loginMode: String(batch/interactive) (Optional)
     *             }
     *         }
     *     ]
     *     mountConfiguration (Optional): [
     *          (Optional){
     *             azureBlobFileSystemConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 containerName: String (Required)
     *                 accountKey: String (Optional)
     *                 sasKey: String (Optional)
     *                 blobfuseOptions: String (Optional)
     *                 relativeMountPath: String (Required)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *             nfsMountConfiguration (Optional): {
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *             cifsMountConfiguration (Optional): {
     *                 username: String (Required)
     *                 source: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *                 password: String (Required)
     *             }
     *             azureFileShareConfiguration (Optional): {
     *                 accountName: String (Required)
     *                 accountKey: String (Required)
     *                 azureFileUrl: String (Required)
     *                 relativeMountPath: String (Required)
     *                 mountOptions: String (Optional)
     *             }
     *         }
     *     ]
     *     upgradePolicy (Optional): {
     *         mode: String(automatic/manual/rolling) (Required)
     *         automaticOSUpgradePolicy (Optional): {
     *             disableAutomaticRollback: Boolean (Optional)
     *             enableAutomaticOSUpgrade: Boolean (Optional)
     *             useRollingUpgradePolicy: Boolean (Optional)
     *             osRollingUpgradeDeferral: Boolean (Optional)
     *         }
     *         rollingUpgradePolicy (Optional): {
     *             enableCrossZoneUpgrade: Boolean (Optional)
     *             maxBatchInstancePercent: Integer (Optional)
     *             maxUnhealthyInstancePercent: Integer (Optional)
     *             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *             pauseTimeBetweenBatches: Duration (Optional)
     *             prioritizeUnhealthyInstances: Boolean (Optional)
     *             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *         }
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param pool The pool properties to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePoolWithResponse(String poolId, BinaryData pool, RequestOptions requestOptions) {
        return this.serviceClient.updatePoolWithResponse(poolId, pool, requestOptions);
    }

    /**
     * Disables automatic scaling for a Pool.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disablePoolAutoScaleWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.disablePoolAutoScaleWithResponse(poolId, requestOptions);
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * You cannot enable automatic scaling on a Pool if a resize operation is in
     * progress on the Pool. If automatic scaling of the Pool is currently disabled,
     * you must specify a valid autoscale formula as part of the request. If automatic
     * scaling of the Pool is already enabled, you may specify a new autoscale formula
     * and/or a new evaluation interval. You cannot call this API for the same Pool
     * more than once every 30 seconds.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     autoScaleFormula: String (Optional)
     *     autoScaleEvaluationInterval: Duration (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for enabling automatic scaling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enablePoolAutoScaleWithResponse(String poolId, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.enablePoolAutoScaleWithResponse(poolId, parameters, requestOptions);
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool. The Pool must have auto
     * scaling enabled in order to evaluate a formula.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     autoScaleFormula: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     timestamp: OffsetDateTime (Required)
     *     results: String (Optional)
     *     error (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param parameters The options to use for evaluating the automatic scaling formula.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> evaluatePoolAutoScaleWithResponse(String poolId, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.evaluatePoolAutoScaleWithResponse(poolId, parameters, requestOptions);
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * You can only resize a Pool when its allocation state is steady. If the Pool is
     * already resizing, the request fails with status code 409. When you resize a
     * Pool, the Pool's allocation state changes from steady to resizing. You cannot
     * resize Pools which are configured for automatic scaling. If you try to do this,
     * the Batch service returns an error 409. If you resize a Pool downwards, the
     * Batch service chooses which Compute Nodes to remove. To remove specific Compute
     * Nodes, use the Pool remove Compute Nodes API instead.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     targetDedicatedNodes: Integer (Optional)
     *     targetLowPriorityNodes: Integer (Optional)
     *     resizeTimeout: Duration (Optional)
     *     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for resizing the pool.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> resizePoolWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.resizePoolWithResponse(poolId, parameters, requestOptions);
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * This does not restore the Pool to its previous state before the resize
     * operation: it only stops any further changes being made, and the Pool maintains
     * its current state. After stopping, the Pool stabilizes at the number of Compute
     * Nodes it was at when the stop operation was done. During the stop operation,
     * the Pool allocation state changes first to stopping and then to steady. A
     * resize operation need not be an explicit resize Pool request; this API can also
     * be used to halt the initial sizing of the Pool when it is created.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> stopPoolResizeWithResponse(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.stopPoolResizeWithResponse(poolId, requestOptions);
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This fully replaces all the updatable properties of the Pool. For example, if
     * the Pool has a StartTask associated with it and if StartTask is not specified
     * with this request, then the Batch service will remove the existing StartTask.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     certificateReferences (Required): [
     *          (Required){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     applicationPackageReferences (Required): [
     *          (Required){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     metadata (Required): [
     *          (Required){
     *             name: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     *     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to update.
     * @param pool The options to use for replacing properties on the pool.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replacePoolPropertiesWithResponse(String poolId, BinaryData pool,
        RequestOptions requestOptions) {
        return this.serviceClient.replacePoolPropertiesWithResponse(poolId, pool, requestOptions);
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * This operation can only run when the allocation state of the Pool is steady.
     * When this operation runs, the allocation state changes from steady to resizing.
     * Each request may remove up to 100 nodes.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeList (Required): [
     *         String (Required)
     *     ]
     *     resizeTimeout: Duration (Optional)
     *     nodeDeallocationOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for removing the node.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> removeNodesWithResponse(String poolId, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.removeNodesWithResponse(poolId, parameters, requestOptions);
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeAgentSKUId: String (Required)
     *     imageReference (Required): {
     *         publisher: String (Optional)
     *         offer: String (Optional)
     *         sku: String (Optional)
     *         version: String (Optional)
     *         virtualMachineImageId: String (Optional)
     *         exactVersion: String (Optional)
     *         sharedGalleryImageId: String (Optional)
     *         communityGalleryImageId: String (Optional)
     *     }
     *     osType: String(linux/windows) (Required)
     *     capabilities (Optional): [
     *         String (Optional)
     *     ]
     *     batchSupportEndOfLife: OffsetDateTime (Optional)
     *     verificationType: String(verified/unverified) (Required)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the supported Virtual Machine Images as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSupportedImages(RequestOptions requestOptions) {
        return this.serviceClient.listSupportedImages(requestOptions);
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
     * numbers returned may not always be up to date. If you need exact node counts,
     * use a list query.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     poolId: String (Required)
     *     dedicated (Optional): {
     *         creating: int (Required)
     *         idle: int (Required)
     *         offline: int (Required)
     *         preempted: int (Required)
     *         rebooting: int (Required)
     *         reimaging: int (Required)
     *         running: int (Required)
     *         starting: int (Required)
     *         startTaskFailed: int (Required)
     *         leavingPool: int (Required)
     *         unknown: int (Required)
     *         unusable: int (Required)
     *         waitingForStartTask: int (Required)
     *         deallocated: int (Required)
     *         deallocating: int (Required)
     *         total: int (Required)
     *         upgradingOS: int (Required)
     *     }
     *     lowPriority (Optional): (recursive schema, see lowPriority above)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listPoolNodeCounts(RequestOptions requestOptions) {
        return this.serviceClient.listPoolNodeCounts(requestOptions);
    }

    /**
     * Deletes a Job.
     *
     * Deleting a Job also deletes all Tasks that are part of that Job, and all Job
     * statistics. This also overrides the retention period for Task data; that is, if
     * the Job contains Tasks which are still retained on Compute Nodes, the Batch
     * services deletes those Tasks' working directories and all their contents. When
     * a Delete Job request is received, the Batch service sets the Job to the
     * deleting state. All update operations on a Job that is in deleting state will
     * fail with status code 409 (Conflict), with additional information indicating
     * that the Job is being deleted.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>force</td><td>Boolean</td><td>No</td><td>If true, the server will delete the Job even if the
     * corresponding nodes have not fully processed the deletion. The default value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponse(jobId, requestOptions);
    }

    /**
     * Gets information about the specified Job.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(jobId, requestOptions);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This replaces only the Job properties specified in the request. For example, if
     * the Job has constraints, and a request does not specify the constraints
     * element, then the Job keeps the existing constraints.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     poolInfo (Optional): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                              (Optional){
     *                                 username: String (Optional)
     *                                 password: String (Optional)
     *                                 registryServer: String (Optional)
     *                                 identityReference (Optional): {
     *                                     resourceId: String (Optional)
     *                                 }
     *                             }
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): {
     *                         containerRunOptions: String (Optional)
     *                         imageName: String (Required)
     *                         registry (Optional): (recursive schema, see registry above)
     *                         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                         containerHostBatchBindMounts (Optional): [
     *                              (Optional){
     *                                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                                 isReadOnly: Boolean (Optional)
     *                             }
     *                         ]
     *                     }
     *                     resourceFiles (Optional): [
     *                          (Optional){
     *                             autoStorageContainerName: String (Optional)
     *                             storageContainerUrl: String (Optional)
     *                             httpUrl: String (Optional)
     *                             blobPrefix: String (Optional)
     *                             filePath: String (Optional)
     *                             fileMode: String (Optional)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                     ]
     *                     environmentSettings (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                     userIdentity (Optional): {
     *                         username: String (Optional)
     *                         autoUser (Optional): {
     *                             scope: String(task/pool) (Optional)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                         }
     *                     }
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                      (Optional){
     *                         applicationId: String (Required)
     *                         version: String (Optional)
     *                     }
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job The options to use for updating the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.updateJobWithResponse(jobId, job, requestOptions);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This fully replaces all the updatable properties of the Job. For example, if
     * the Job has constraints associated with it and if constraints is not specified
     * with this request, then the Batch service will remove the existing constraints.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job A job with updated properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceJobWithResponse(String jobId, BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.replaceJobWithResponse(jobId, job, requestOptions);
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * The Batch Service immediately moves the Job to the disabling state. Batch then
     * uses the disableTasks parameter to determine what to do with the currently
     * running Tasks of the Job. The Job remains in the disabling state until the
     * disable operation is completed and all Tasks have been dealt with according to
     * the disableTasks option; the Job then moves to the disabled state. No new Tasks
     * are started under the Job until it moves back to active state. If you try to
     * disable a Job that is in any state other than active, disabling, or disabled,
     * the request fails with status code 409.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     disableTasks: String(requeue/terminate/wait) (Required)
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job to disable.
     * @param parameters The options to use for disabling the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> disableJobWithResponse(String jobId, BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.disableJobWithResponse(jobId, parameters, requestOptions);
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * When you call this API, the Batch service sets a disabled Job to the enabling
     * state. After the this operation is completed, the Job moves to the active
     * state, and scheduling of new Tasks under the Job resumes. The Batch service
     * does not allow a Task to remain in the active state for more than 180 days.
     * Therefore, if you enable a Job containing active Tasks which were added more
     * than 180 days ago, those Tasks will not run.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job to enable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> enableJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.enableJobWithResponse(jobId, requestOptions);
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * When a Terminate Job request is received, the Batch service sets the Job to the
     * terminating state. The Batch service then terminates any running Tasks
     * associated with the Job and runs any required Job release Tasks. Then the Job
     * moves into the completed state. If there are any Tasks in the Job in the active
     * state, they will remain in the active state. Once a Job is terminated, new
     * Tasks cannot be added and any remaining active Tasks will not be scheduled.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>force</td><td>Boolean</td><td>No</td><td>If true, the server will terminate the Job even if the
     * corresponding nodes have not fully processed the termination. The default value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json;
     * odata=minimalmetadata".</td></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     terminateReason: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job to terminate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> terminateJobWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.terminateJobWithResponse(jobId, requestOptions);
    }

    /**
     * Creates a Job to the specified Account.
     *
     * The Batch service supports two ways to control the work done as part of a Job.
     * In the first approach, the user specifies a Job Manager Task. The Batch service
     * launches this Task when it is ready to start the Job. The Job Manager Task
     * controls all other Tasks that run under this Job, by using the Task APIs. In
     * the second approach, the user directly controls the execution of Tasks under an
     * active Job, by using the Task APIs. Also note: when naming Jobs, avoid
     * including sensitive information such as user names or secret project names.
     * This information may appear in telemetry logs accessible to Microsoft Support
     * engineers.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param job The Job to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createJobWithResponse(BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.createJobWithResponse(job, requestOptions);
    }

    /**
     * Lists all of the Jobs in the specified Account.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        return this.serviceClient.listJobs(requestOptions);
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     usesTaskDependencies: Boolean (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/disabling/disabled/enabling/terminating/completed/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     priority: Integer (Optional)
     *     allowTaskPreemption: Boolean (Optional)
     *     maxParallelTasks: Integer (Optional)
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     jobManagerTask (Optional): {
     *         id: String (Required)
     *         displayName: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         outputFiles (Optional): [
     *              (Optional){
     *                 filePattern: String (Required)
     *                 destination (Required): {
     *                     container (Optional): {
     *                         path: String (Optional)
     *                         containerUrl: String (Required)
     *                         identityReference (Optional): (recursive schema, see identityReference above)
     *                         uploadHeaders (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 value: String (Optional)
     *                             }
     *                         ]
     *                     }
     *                 }
     *                 uploadOptions (Required): {
     *                     uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                 }
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         requiredSlots: Integer (Optional)
     *         killJobOnCompletion: Boolean (Optional)
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         runExclusive: Boolean (Optional)
     *         applicationPackageReferences (Optional): [
     *              (Optional){
     *                 applicationId: String (Required)
     *                 version: String (Optional)
     *             }
     *         ]
     *         authenticationTokenSettings (Optional): {
     *             access (Optional): [
     *                 String(job) (Optional)
     *             ]
     *         }
     *         allowLowPriorityNode: Boolean (Optional)
     *     }
     *     jobPreparationTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         constraints (Optional): (recursive schema, see constraints above)
     *         waitForSuccess: Boolean (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *         rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *     }
     *     jobReleaseTask (Optional): {
     *         id: String (Optional)
     *         commandLine: String (Required)
     *         containerSettings (Optional): (recursive schema, see containerSettings above)
     *         resourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         environmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         userIdentity (Optional): (recursive schema, see userIdentity above)
     *     }
     *     commonEnvironmentSettings (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     poolInfo (Required): {
     *         poolId: String (Optional)
     *         autoPoolSpecification (Optional): {
     *             autoPoolIdPrefix: String (Optional)
     *             poolLifetimeOption: String(jobschedule/job) (Required)
     *             keepAlive: Boolean (Optional)
     *             pool (Optional): {
     *                 displayName: String (Optional)
     *                 vmSize: String (Required)
     *                 virtualMachineConfiguration (Optional): {
     *                     imageReference (Required): {
     *                         publisher: String (Optional)
     *                         offer: String (Optional)
     *                         sku: String (Optional)
     *                         version: String (Optional)
     *                         virtualMachineImageId: String (Optional)
     *                         exactVersion: String (Optional)
     *                         sharedGalleryImageId: String (Optional)
     *                         communityGalleryImageId: String (Optional)
     *                     }
     *                     nodeAgentSKUId: String (Required)
     *                     windowsConfiguration (Optional): {
     *                         enableAutomaticUpdates: Boolean (Optional)
     *                     }
     *                     dataDisks (Optional): [
     *                          (Optional){
     *                             lun: int (Required)
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: int (Required)
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                         }
     *                     ]
     *                     licenseType: String (Optional)
     *                     containerConfiguration (Optional): {
     *                         type: String(dockerCompatible/criCompatible) (Required)
     *                         containerImageNames (Optional): [
     *                             String (Optional)
     *                         ]
     *                         containerRegistries (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                     diskEncryptionConfiguration (Optional): {
     *                         targets (Optional): [
     *                             String(osdisk/temporarydisk) (Optional)
     *                         ]
     *                     }
     *                     nodePlacementConfiguration (Optional): {
     *                         policy: String(regional/zonal) (Optional)
     *                     }
     *                     extensions (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             publisher: String (Required)
     *                             type: String (Required)
     *                             typeHandlerVersion: String (Optional)
     *                             autoUpgradeMinorVersion: Boolean (Optional)
     *                             enableAutomaticUpgrade: Boolean (Optional)
     *                             settings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             protectedSettings (Optional): {
     *                                 String: String (Required)
     *                             }
     *                             provisionAfterExtensions (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     osDisk (Optional): {
     *                         ephemeralOSDiskSettings (Optional): {
     *                             placement: String(cachedisk) (Optional)
     *                         }
     *                         caching: String(none/readonly/readwrite) (Optional)
     *                         diskSizeGB: Integer (Optional)
     *                         managedDisk (Optional): {
     *                             storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             securityProfile (Optional): {
     *                                 securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                             }
     *                         }
     *                         writeAcceleratorEnabled: Boolean (Optional)
     *                     }
     *                     securityProfile (Optional): {
     *                         encryptionAtHost: Boolean (Optional)
     *                         securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                         uefiSettings (Optional): {
     *                             secureBootEnabled: Boolean (Optional)
     *                             vTpmEnabled: Boolean (Optional)
     *                         }
     *                     }
     *                     serviceArtifactReference (Optional): {
     *                         id: String (Required)
     *                     }
     *                 }
     *                 taskSlotsPerNode: Integer (Optional)
     *                 taskSchedulingPolicy (Optional): {
     *                     nodeFillType: String(spread/pack) (Required)
     *                 }
     *                 resizeTimeout: Duration (Optional)
     *                 resourceTags: String (Optional)
     *                 targetDedicatedNodes: Integer (Optional)
     *                 targetLowPriorityNodes: Integer (Optional)
     *                 enableAutoScale: Boolean (Optional)
     *                 autoScaleFormula: String (Optional)
     *                 autoScaleEvaluationInterval: Duration (Optional)
     *                 enableInterNodeCommunication: Boolean (Optional)
     *                 networkConfiguration (Optional): {
     *                     subnetId: String (Optional)
     *                     dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                     endpointConfiguration (Optional): {
     *                         inboundNATPools (Required): [
     *                              (Required){
     *                                 name: String (Required)
     *                                 protocol: String(tcp/udp) (Required)
     *                                 backendPort: int (Required)
     *                                 frontendPortRangeStart: int (Required)
     *                                 frontendPortRangeEnd: int (Required)
     *                                 networkSecurityGroupRules (Optional): [
     *                                      (Optional){
     *                                         priority: int (Required)
     *                                         access: String(allow/deny) (Required)
     *                                         sourceAddressPrefix: String (Required)
     *                                         sourcePortRanges (Optional): [
     *                                             String (Optional)
     *                                         ]
     *                                     }
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     publicIPAddressConfiguration (Optional): {
     *                         provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                         ipAddressIds (Optional): [
     *                             String (Optional)
     *                         ]
     *                     }
     *                     enableAcceleratedNetworking: Boolean (Optional)
     *                 }
     *                 startTask (Optional): {
     *                     commandLine: String (Required)
     *                     containerSettings (Optional): (recursive schema, see containerSettings above)
     *                     resourceFiles (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     environmentSettings (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userIdentity (Optional): (recursive schema, see userIdentity above)
     *                     maxTaskRetryCount: Integer (Optional)
     *                     waitForSuccess: Boolean (Optional)
     *                 }
     *                 certificateReferences (Optional): [
     *                      (Optional){
     *                         thumbprint: String (Required)
     *                         thumbprintAlgorithm: String (Required)
     *                         storeLocation: String(currentuser/localmachine) (Optional)
     *                         storeName: String (Optional)
     *                         visibility (Optional): [
     *                             String(starttask/task/remoteuser) (Optional)
     *                         ]
     *                     }
     *                 ]
     *                 applicationPackageReferences (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 userAccounts (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         password: String (Required)
     *                         elevationLevel: String(nonadmin/admin) (Optional)
     *                         linuxUserConfiguration (Optional): {
     *                             uid: Integer (Optional)
     *                             gid: Integer (Optional)
     *                             sshPrivateKey: String (Optional)
     *                         }
     *                         windowsUserConfiguration (Optional): {
     *                             loginMode: String(batch/interactive) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 metadata (Optional): [
     *                      (Optional){
     *                         name: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *                 mountConfiguration (Optional): [
     *                      (Optional){
     *                         azureBlobFileSystemConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             containerName: String (Required)
     *                             accountKey: String (Optional)
     *                             sasKey: String (Optional)
     *                             blobfuseOptions: String (Optional)
     *                             relativeMountPath: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                         }
     *                         nfsMountConfiguration (Optional): {
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                         cifsMountConfiguration (Optional): {
     *                             username: String (Required)
     *                             source: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                             password: String (Required)
     *                         }
     *                         azureFileShareConfiguration (Optional): {
     *                             accountName: String (Required)
     *                             accountKey: String (Required)
     *                             azureFileUrl: String (Required)
     *                             relativeMountPath: String (Required)
     *                             mountOptions: String (Optional)
     *                         }
     *                     }
     *                 ]
     *                 targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                 upgradePolicy (Optional): {
     *                     mode: String(automatic/manual/rolling) (Required)
     *                     automaticOSUpgradePolicy (Optional): {
     *                         disableAutomaticRollback: Boolean (Optional)
     *                         enableAutomaticOSUpgrade: Boolean (Optional)
     *                         useRollingUpgradePolicy: Boolean (Optional)
     *                         osRollingUpgradeDeferral: Boolean (Optional)
     *                     }
     *                     rollingUpgradePolicy (Optional): {
     *                         enableCrossZoneUpgrade: Boolean (Optional)
     *                         maxBatchInstancePercent: Integer (Optional)
     *                         maxUnhealthyInstancePercent: Integer (Optional)
     *                         maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                         pauseTimeBetweenBatches: Duration (Optional)
     *                         prioritizeUnhealthyInstances: Boolean (Optional)
     *                         rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                     }
     *                 }
     *             }
     *         }
     *     }
     *     onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *     onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *     networkConfiguration (Optional): {
     *         subnetId: String (Required)
     *         skipWithdrawFromVNet: Boolean (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         poolId: String (Optional)
     *         schedulingError (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         terminateReason: String (Optional)
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobsFromSchedule(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.listJobsFromSchedule(jobScheduleId, requestOptions);
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the
     * specified Job across the Compute Nodes where the Job has run.
     *
     * This API returns the Job Preparation and Job Release Task status on all Compute
     * Nodes that have run the Job Preparation or Job Release Task. This includes
     * Compute Nodes which have since been removed from the Pool. If this API is
     * invoked on a Job which has no Job Preparation or Job Release Task, the Batch
     * service returns HTTP status code 409 (Conflict) with an error code of
     * JobPreparationTaskNotSpecified.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     poolId: String (Optional)
     *     nodeId: String (Optional)
     *     nodeUrl: String (Optional)
     *     jobPreparationTaskExecutionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         state: String(running/completed) (Required)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     jobReleaseTaskExecutionInfo (Optional): {
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         state: String(running/completed) (Required)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         result: String(success/failure) (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks
     * for a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobPreparationAndReleaseTaskStatus(String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.listJobPreparationAndReleaseTaskStatus(jobId, requestOptions);
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed. Tasks in the preparing
     * state are counted as running. Note that the numbers returned may not always be
     * up to date. If you need exact task counts, use a list query.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     taskCounts (Required): {
     *         active: int (Required)
     *         running: int (Required)
     *         completed: int (Required)
     *         succeeded: int (Required)
     *         failed: int (Required)
     *     }
     *     taskSlotCounts (Required): {
     *         active: int (Required)
     *         running: int (Required)
     *         completed: int (Required)
     *         succeeded: int (Required)
     *         failed: int (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobTaskCountsWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getJobTaskCountsWithResponse(jobId, requestOptions);
    }

    /**
     * Creates a Certificate to the specified Account.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: byte[] (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param certificate The Certificate to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createCertificateWithResponse(BinaryData certificate, RequestOptions requestOptions) {
        return this.serviceClient.createCertificateWithResponse(certificate, requestOptions);
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: byte[] (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listCertificates(RequestOptions requestOptions) {
        return this.serviceClient.listCertificates(requestOptions);
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * If you try to delete a Certificate that is being used by a Pool or Compute
     * Node, the status of the Certificate changes to deleteFailed. If you decide that
     * you want to continue using the Certificate, you can use this operation to set
     * the status of the Certificate back to active. If you intend to delete the
     * Certificate, you do not need to run this operation after the deletion failed.
     * You must make sure that the Certificate is not being used by any resources, and
     * then you can try again to delete the Certificate.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelCertificateDeletionWithResponse(String thumbprintAlgorithm, String thumbprint,
        RequestOptions requestOptions) {
        return this.serviceClient.cancelCertificateDeletionWithResponse(thumbprintAlgorithm, thumbprint,
            requestOptions);
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using
     * it. Before you can delete a Certificate, you must therefore make sure that the
     * Certificate is not associated with any existing Pools, the Certificate is not
     * installed on any Nodes (even if you remove a Certificate from a Pool, it is not
     * removed from existing Compute Nodes in that Pool until they restart), and no
     * running Tasks depend on the Certificate. If you try to delete a Certificate
     * that is in use, the deletion fails. The Certificate status changes to
     * deleteFailed. You can use Cancel Delete Certificate to set the status back to
     * active if you decide that you want to continue using the Certificate.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteCertificateWithResponse(String thumbprintAlgorithm, String thumbprint,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions);
    }

    /**
     * Gets information about the specified Certificate.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     thumbprint: String (Required)
     *     thumbprintAlgorithm: String (Required)
     *     url: String (Optional)
     *     state: String(active/deleting/deletefailed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/deleting/deletefailed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     publicData: String (Optional)
     *     deleteCertificateError (Optional): {
     *         code: String (Optional)
     *         message: String (Optional)
     *         values (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     data: byte[] (Required)
     *     certificateFormat: String(pfx/cer) (Optional)
     *     password: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Certificate along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCertificateWithResponse(String thumbprintAlgorithm, String thumbprint,
        RequestOptions requestOptions) {
        return this.serviceClient.getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions);
    }

    /**
     * Checks the specified Job Schedule exists.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * boolean
     * }
     * </pre>
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return whether resource exists along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> jobScheduleExistsWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.jobScheduleExistsWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
     * schedule. When Tasks are deleted, all the files in their working directories on
     * the Compute Nodes are also deleted (the retention period is ignored). The Job
     * Schedule statistics are no longer accessible once the Job Schedule is deleted,
     * though they are still counted towards Account lifetime statistics.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>force</td><td>Boolean</td><td>No</td><td>If true, the server will delete the JobSchedule even if the
     * corresponding nodes have not fully processed the deletion. The default value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Gets information about the specified Job Schedule.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Optional): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *             skipWithdrawFromVNet: Boolean (Optional)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                             sharedGalleryImageId: String (Optional)
     *                             communityGalleryImageId: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: Integer (Optional)
     *                             managedDisk (Optional): {
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                                 securityProfile (Optional): {
     *                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                                 }
     *                             }
     *                             writeAcceleratorEnabled: Boolean (Optional)
     *                         }
     *                         securityProfile (Optional): {
     *                             encryptionAtHost: Boolean (Optional)
     *                             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                             uefiSettings (Optional): {
     *                                 secureBootEnabled: Boolean (Optional)
     *                                 vTpmEnabled: Boolean (Optional)
     *                             }
     *                         }
     *                         serviceArtifactReference (Optional): {
     *                             id: String (Required)
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     resourceTags: String (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 accountKey: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                     upgradePolicy (Optional): {
     *                         mode: String(automatic/manual/rolling) (Required)
     *                         automaticOSUpgradePolicy (Optional): {
     *                             disableAutomaticRollback: Boolean (Optional)
     *                             enableAutomaticOSUpgrade: Boolean (Optional)
     *                             useRollingUpgradePolicy: Boolean (Optional)
     *                             osRollingUpgradeDeferral: Boolean (Optional)
     *                         }
     *                         rollingUpgradePolicy (Optional): {
     *                             enableCrossZoneUpgrade: Boolean (Optional)
     *                             maxBatchInstancePercent: Integer (Optional)
     *                             maxUnhealthyInstancePercent: Integer (Optional)
     *                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                             pauseTimeBetweenBatches: Duration (Optional)
     *                             prioritizeUnhealthyInstances: Boolean (Optional)
     *                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Job Schedule along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.getJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This replaces only the Job Schedule properties specified in the request. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will keep the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     schedule (Optional): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Optional): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *             skipWithdrawFromVNet: Boolean (Optional)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                             sharedGalleryImageId: String (Optional)
     *                             communityGalleryImageId: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: Integer (Optional)
     *                             managedDisk (Optional): {
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                                 securityProfile (Optional): {
     *                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                                 }
     *                             }
     *                             writeAcceleratorEnabled: Boolean (Optional)
     *                         }
     *                         securityProfile (Optional): {
     *                             encryptionAtHost: Boolean (Optional)
     *                             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                             uefiSettings (Optional): {
     *                                 secureBootEnabled: Boolean (Optional)
     *                                 vTpmEnabled: Boolean (Optional)
     *                             }
     *                         }
     *                         serviceArtifactReference (Optional): {
     *                             id: String (Required)
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     resourceTags: String (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 accountKey: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                     upgradePolicy (Optional): {
     *                         mode: String(automatic/manual/rolling) (Required)
     *                         automaticOSUpgradePolicy (Optional): {
     *                             disableAutomaticRollback: Boolean (Optional)
     *                             enableAutomaticOSUpgrade: Boolean (Optional)
     *                             useRollingUpgradePolicy: Boolean (Optional)
     *                             osRollingUpgradeDeferral: Boolean (Optional)
     *                         }
     *                         rollingUpgradePolicy (Optional): {
     *                             enableCrossZoneUpgrade: Boolean (Optional)
     *                             maxBatchInstancePercent: Integer (Optional)
     *                             maxUnhealthyInstancePercent: Integer (Optional)
     *                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                             pauseTimeBetweenBatches: Duration (Optional)
     *                             prioritizeUnhealthyInstances: Boolean (Optional)
     *                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule The options to use for updating the Job Schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule,
        RequestOptions requestOptions) {
        return this.serviceClient.updateJobScheduleWithResponse(jobScheduleId, jobSchedule, requestOptions);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This fully replaces all the updatable properties of the Job Schedule. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will remove the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Optional): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *             skipWithdrawFromVNet: Boolean (Optional)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                             sharedGalleryImageId: String (Optional)
     *                             communityGalleryImageId: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: Integer (Optional)
     *                             managedDisk (Optional): {
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                                 securityProfile (Optional): {
     *                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                                 }
     *                             }
     *                             writeAcceleratorEnabled: Boolean (Optional)
     *                         }
     *                         securityProfile (Optional): {
     *                             encryptionAtHost: Boolean (Optional)
     *                             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                             uefiSettings (Optional): {
     *                                 secureBootEnabled: Boolean (Optional)
     *                                 vTpmEnabled: Boolean (Optional)
     *                             }
     *                         }
     *                         serviceArtifactReference (Optional): {
     *                             id: String (Required)
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     resourceTags: String (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 accountKey: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                     upgradePolicy (Optional): {
     *                         mode: String(automatic/manual/rolling) (Required)
     *                         automaticOSUpgradePolicy (Optional): {
     *                             disableAutomaticRollback: Boolean (Optional)
     *                             enableAutomaticOSUpgrade: Boolean (Optional)
     *                             useRollingUpgradePolicy: Boolean (Optional)
     *                             osRollingUpgradeDeferral: Boolean (Optional)
     *                         }
     *                         rollingUpgradePolicy (Optional): {
     *                             enableCrossZoneUpgrade: Boolean (Optional)
     *                             maxBatchInstancePercent: Integer (Optional)
     *                             maxUnhealthyInstancePercent: Integer (Optional)
     *                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                             pauseTimeBetweenBatches: Duration (Optional)
     *                             prioritizeUnhealthyInstances: Boolean (Optional)
     *                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule A Job Schedule with updated properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceJobScheduleWithResponse(String jobScheduleId, BinaryData jobSchedule,
        RequestOptions requestOptions) {
        return this.serviceClient.replaceJobScheduleWithResponse(jobScheduleId, jobSchedule, requestOptions);
    }

    /**
     * Disables a Job Schedule.
     *
     * No new Jobs will be created until the Job Schedule is enabled again.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.disableJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Enables a Job Schedule.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.enableJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Terminates a Job Schedule.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>force</td><td>Boolean</td><td>No</td><td>If true, the server will terminate the JobSchedule even if the
     * corresponding nodes have not fully processed the termination. The default value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> terminateJobScheduleWithResponse(String jobScheduleId, RequestOptions requestOptions) {
        return this.serviceClient.terminateJobScheduleWithResponse(jobScheduleId, requestOptions);
    }

    /**
     * Creates a Job Schedule to the specified Account.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     schedule (Required): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *             skipWithdrawFromVNet: Boolean (Optional)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                             sharedGalleryImageId: String (Optional)
     *                             communityGalleryImageId: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: Integer (Optional)
     *                             managedDisk (Optional): {
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                                 securityProfile (Optional): {
     *                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                                 }
     *                             }
     *                             writeAcceleratorEnabled: Boolean (Optional)
     *                         }
     *                         securityProfile (Optional): {
     *                             encryptionAtHost: Boolean (Optional)
     *                             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                             uefiSettings (Optional): {
     *                                 secureBootEnabled: Boolean (Optional)
     *                                 vTpmEnabled: Boolean (Optional)
     *                             }
     *                         }
     *                         serviceArtifactReference (Optional): {
     *                             id: String (Required)
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     resourceTags: String (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 accountKey: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                     upgradePolicy (Optional): {
     *                         mode: String(automatic/manual/rolling) (Required)
     *                         automaticOSUpgradePolicy (Optional): {
     *                             disableAutomaticRollback: Boolean (Optional)
     *                             enableAutomaticOSUpgrade: Boolean (Optional)
     *                             useRollingUpgradePolicy: Boolean (Optional)
     *                             osRollingUpgradeDeferral: Boolean (Optional)
     *                         }
     *                         rollingUpgradePolicy (Optional): {
     *                             enableCrossZoneUpgrade: Boolean (Optional)
     *                             maxBatchInstancePercent: Integer (Optional)
     *                             maxUnhealthyInstancePercent: Integer (Optional)
     *                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                             pauseTimeBetweenBatches: Duration (Optional)
     *                             prioritizeUnhealthyInstances: Boolean (Optional)
     *                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param jobSchedule The Job Schedule to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createJobScheduleWithResponse(BinaryData jobSchedule, RequestOptions requestOptions) {
        return this.serviceClient.createJobScheduleWithResponse(jobSchedule, requestOptions);
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     state: String(active/completed/disabled/terminating/deleting) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/completed/disabled/terminating/deleting) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     schedule (Optional): {
     *         doNotRunUntil: OffsetDateTime (Optional)
     *         doNotRunAfter: OffsetDateTime (Optional)
     *         startWindow: Duration (Optional)
     *         recurrenceInterval: Duration (Optional)
     *     }
     *     jobSpecification (Required): {
     *         priority: Integer (Optional)
     *         allowTaskPreemption: Boolean (Optional)
     *         maxParallelTasks: Integer (Optional)
     *         displayName: String (Optional)
     *         usesTaskDependencies: Boolean (Optional)
     *         onAllTasksComplete: String(noaction/terminatejob) (Optional)
     *         onTaskFailure: String(noaction/performexitoptionsjobaction) (Optional)
     *         networkConfiguration (Optional): {
     *             subnetId: String (Required)
     *             skipWithdrawFromVNet: Boolean (Optional)
     *         }
     *         constraints (Optional): {
     *             maxWallClockTime: Duration (Optional)
     *             maxTaskRetryCount: Integer (Optional)
     *         }
     *         jobManagerTask (Optional): {
     *             id: String (Required)
     *             displayName: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             killJobOnCompletion: Boolean (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             runExclusive: Boolean (Optional)
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *             allowLowPriorityNode: Boolean (Optional)
     *         }
     *         jobPreparationTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             constraints (Optional): (recursive schema, see constraints above)
     *             waitForSuccess: Boolean (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *             rerunOnNodeRebootAfterSuccess: Boolean (Optional)
     *         }
     *         jobReleaseTask (Optional): {
     *             id: String (Optional)
     *             commandLine: String (Required)
     *             containerSettings (Optional): (recursive schema, see containerSettings above)
     *             resourceFiles (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             environmentSettings (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             maxWallClockTime: Duration (Optional)
     *             retentionTime: Duration (Optional)
     *             userIdentity (Optional): (recursive schema, see userIdentity above)
     *         }
     *         commonEnvironmentSettings (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         poolInfo (Required): {
     *             poolId: String (Optional)
     *             autoPoolSpecification (Optional): {
     *                 autoPoolIdPrefix: String (Optional)
     *                 poolLifetimeOption: String(jobschedule/job) (Required)
     *                 keepAlive: Boolean (Optional)
     *                 pool (Optional): {
     *                     displayName: String (Optional)
     *                     vmSize: String (Required)
     *                     virtualMachineConfiguration (Optional): {
     *                         imageReference (Required): {
     *                             publisher: String (Optional)
     *                             offer: String (Optional)
     *                             sku: String (Optional)
     *                             version: String (Optional)
     *                             virtualMachineImageId: String (Optional)
     *                             exactVersion: String (Optional)
     *                             sharedGalleryImageId: String (Optional)
     *                             communityGalleryImageId: String (Optional)
     *                         }
     *                         nodeAgentSKUId: String (Required)
     *                         windowsConfiguration (Optional): {
     *                             enableAutomaticUpdates: Boolean (Optional)
     *                         }
     *                         dataDisks (Optional): [
     *                              (Optional){
     *                                 lun: int (Required)
     *                                 caching: String(none/readonly/readwrite) (Optional)
     *                                 diskSizeGB: int (Required)
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                             }
     *                         ]
     *                         licenseType: String (Optional)
     *                         containerConfiguration (Optional): {
     *                             type: String(dockerCompatible/criCompatible) (Required)
     *                             containerImageNames (Optional): [
     *                                 String (Optional)
     *                             ]
     *                             containerRegistries (Optional): [
     *                                 (recursive schema, see above)
     *                             ]
     *                         }
     *                         diskEncryptionConfiguration (Optional): {
     *                             targets (Optional): [
     *                                 String(osdisk/temporarydisk) (Optional)
     *                             ]
     *                         }
     *                         nodePlacementConfiguration (Optional): {
     *                             policy: String(regional/zonal) (Optional)
     *                         }
     *                         extensions (Optional): [
     *                              (Optional){
     *                                 name: String (Required)
     *                                 publisher: String (Required)
     *                                 type: String (Required)
     *                                 typeHandlerVersion: String (Optional)
     *                                 autoUpgradeMinorVersion: Boolean (Optional)
     *                                 enableAutomaticUpgrade: Boolean (Optional)
     *                                 settings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 protectedSettings (Optional): {
     *                                     String: String (Required)
     *                                 }
     *                                 provisionAfterExtensions (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                         osDisk (Optional): {
     *                             ephemeralOSDiskSettings (Optional): {
     *                                 placement: String(cachedisk) (Optional)
     *                             }
     *                             caching: String(none/readonly/readwrite) (Optional)
     *                             diskSizeGB: Integer (Optional)
     *                             managedDisk (Optional): {
     *                                 storageAccountType: String(standard_lrs/premium_lrs/standardssd_lrs) (Optional)
     *                                 securityProfile (Optional): {
     *                                     securityEncryptionType: String(NonPersistedTPM/VMGuestStateOnly) (Optional)
     *                                 }
     *                             }
     *                             writeAcceleratorEnabled: Boolean (Optional)
     *                         }
     *                         securityProfile (Optional): {
     *                             encryptionAtHost: Boolean (Optional)
     *                             securityType: String(trustedLaunch/confidentialVM) (Optional)
     *                             uefiSettings (Optional): {
     *                                 secureBootEnabled: Boolean (Optional)
     *                                 vTpmEnabled: Boolean (Optional)
     *                             }
     *                         }
     *                         serviceArtifactReference (Optional): {
     *                             id: String (Required)
     *                         }
     *                     }
     *                     taskSlotsPerNode: Integer (Optional)
     *                     taskSchedulingPolicy (Optional): {
     *                         nodeFillType: String(spread/pack) (Required)
     *                     }
     *                     resizeTimeout: Duration (Optional)
     *                     resourceTags: String (Optional)
     *                     targetDedicatedNodes: Integer (Optional)
     *                     targetLowPriorityNodes: Integer (Optional)
     *                     enableAutoScale: Boolean (Optional)
     *                     autoScaleFormula: String (Optional)
     *                     autoScaleEvaluationInterval: Duration (Optional)
     *                     enableInterNodeCommunication: Boolean (Optional)
     *                     networkConfiguration (Optional): {
     *                         subnetId: String (Optional)
     *                         dynamicVNetAssignmentScope: String(none/job) (Optional)
     *                         endpointConfiguration (Optional): {
     *                             inboundNATPools (Required): [
     *                                  (Required){
     *                                     name: String (Required)
     *                                     protocol: String(tcp/udp) (Required)
     *                                     backendPort: int (Required)
     *                                     frontendPortRangeStart: int (Required)
     *                                     frontendPortRangeEnd: int (Required)
     *                                     networkSecurityGroupRules (Optional): [
     *                                          (Optional){
     *                                             priority: int (Required)
     *                                             access: String(allow/deny) (Required)
     *                                             sourceAddressPrefix: String (Required)
     *                                             sourcePortRanges (Optional): [
     *                                                 String (Optional)
     *                                             ]
     *                                         }
     *                                     ]
     *                                 }
     *                             ]
     *                         }
     *                         publicIPAddressConfiguration (Optional): {
     *                             provision: String(batchmanaged/usermanaged/nopublicipaddresses) (Optional)
     *                             ipAddressIds (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                         enableAcceleratedNetworking: Boolean (Optional)
     *                     }
     *                     startTask (Optional): {
     *                         commandLine: String (Required)
     *                         containerSettings (Optional): (recursive schema, see containerSettings above)
     *                         resourceFiles (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         environmentSettings (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         userIdentity (Optional): (recursive schema, see userIdentity above)
     *                         maxTaskRetryCount: Integer (Optional)
     *                         waitForSuccess: Boolean (Optional)
     *                     }
     *                     certificateReferences (Optional): [
     *                          (Optional){
     *                             thumbprint: String (Required)
     *                             thumbprintAlgorithm: String (Required)
     *                             storeLocation: String(currentuser/localmachine) (Optional)
     *                             storeName: String (Optional)
     *                             visibility (Optional): [
     *                                 String(starttask/task/remoteuser) (Optional)
     *                             ]
     *                         }
     *                     ]
     *                     applicationPackageReferences (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     userAccounts (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             password: String (Required)
     *                             elevationLevel: String(nonadmin/admin) (Optional)
     *                             linuxUserConfiguration (Optional): {
     *                                 uid: Integer (Optional)
     *                                 gid: Integer (Optional)
     *                                 sshPrivateKey: String (Optional)
     *                             }
     *                             windowsUserConfiguration (Optional): {
     *                                 loginMode: String(batch/interactive) (Optional)
     *                             }
     *                         }
     *                     ]
     *                     metadata (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Required)
     *                         }
     *                     ]
     *                     mountConfiguration (Optional): [
     *                          (Optional){
     *                             azureBlobFileSystemConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 containerName: String (Required)
     *                                 accountKey: String (Optional)
     *                                 sasKey: String (Optional)
     *                                 blobfuseOptions: String (Optional)
     *                                 relativeMountPath: String (Required)
     *                                 identityReference (Optional): (recursive schema, see identityReference above)
     *                             }
     *                             nfsMountConfiguration (Optional): {
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                             cifsMountConfiguration (Optional): {
     *                                 username: String (Required)
     *                                 source: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                                 password: String (Required)
     *                             }
     *                             azureFileShareConfiguration (Optional): {
     *                                 accountName: String (Required)
     *                                 accountKey: String (Required)
     *                                 azureFileUrl: String (Required)
     *                                 relativeMountPath: String (Required)
     *                                 mountOptions: String (Optional)
     *                             }
     *                         }
     *                     ]
     *                     targetNodeCommunicationMode: String(default/classic/simplified) (Optional)
     *                     upgradePolicy (Optional): {
     *                         mode: String(automatic/manual/rolling) (Required)
     *                         automaticOSUpgradePolicy (Optional): {
     *                             disableAutomaticRollback: Boolean (Optional)
     *                             enableAutomaticOSUpgrade: Boolean (Optional)
     *                             useRollingUpgradePolicy: Boolean (Optional)
     *                             osRollingUpgradeDeferral: Boolean (Optional)
     *                         }
     *                         rollingUpgradePolicy (Optional): {
     *                             enableCrossZoneUpgrade: Boolean (Optional)
     *                             maxBatchInstancePercent: Integer (Optional)
     *                             maxUnhealthyInstancePercent: Integer (Optional)
     *                             maxUnhealthyUpgradedInstancePercent: Integer (Optional)
     *                             pauseTimeBetweenBatches: Duration (Optional)
     *                             prioritizeUnhealthyInstances: Boolean (Optional)
     *                             rollbackFailedInstancesOnPolicyBreach: Boolean (Optional)
     *                         }
     *                     }
     *                 }
     *             }
     *         }
     *         metadata (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     executionInfo (Optional): {
     *         nextRunTime: OffsetDateTime (Optional)
     *         recentJob (Optional): {
     *             id: String (Optional)
     *             url: String (Optional)
     *         }
     *         endTime: OffsetDateTime (Optional)
     *     }
     *     metadata (Optional): [
     *         (recursive schema, see above)
     *     ]
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         numSucceededTasks: long (Required)
     *         numFailedTasks: long (Required)
     *         numTaskRetries: long (Required)
     *         waitTime: Duration (Required)
     *     }
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobSchedules(RequestOptions requestOptions) {
        return this.serviceClient.listJobSchedules(requestOptions);
    }

    /**
     * Creates a Task to the specified Job.
     *
     * The maximum lifetime of a Task from addition to completion is 180 days. If a
     * Task has not completed within 180 days of being added it will be terminated by
     * the Batch service and left in whatever state it was in at that time.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     displayName: String (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     commandLine: String (Required)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         containerHostBatchBindMounts (Optional): [
     *              (Optional){
     *                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                 isReadOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param task The Task to be created.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createTaskWithResponse(String jobId, BinaryData task, RequestOptions requestOptions) {
        return this.serviceClient.createTaskWithResponse(jobId, task, requestOptions);
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         containerHostBatchBindMounts (Optional): [
     *              (Optional){
     *                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                 isReadOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTasks(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.listTasks(jobId, requestOptions);
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * Note that each Task must have a unique ID. The Batch service may not return the
     * results for each Task in the same order the Tasks were submitted in this
     * request. If the server times out or the connection is closed during the
     * request, the request may have been partially or fully processed, or not at all.
     * In such cases, the user should re-issue the request. Note that it is up to the
     * user to correctly handle failures when re-issuing a request. For example, you
     * should use the same Task IDs during a retry so that if the prior operation
     * succeeded, the retry will not create extra Tasks unexpectedly. If the response
     * contains any Tasks which failed to add, a client can retry the request. In a
     * retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum
     * lifetime of a Task from addition to completion is 180 days. If a Task has not
     * completed within 180 days of being added it will be terminated by the Batch
     * service and left in whatever state it was in at that time.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             id: String (Required)
     *             displayName: String (Optional)
     *             exitConditions (Optional): {
     *                 exitCodes (Optional): [
     *                      (Optional){
     *                         code: int (Required)
     *                         exitOptions (Required): {
     *                             jobAction: String(none/disable/terminate) (Optional)
     *                             dependencyAction: String(satisfy/block) (Optional)
     *                         }
     *                     }
     *                 ]
     *                 exitCodeRanges (Optional): [
     *                      (Optional){
     *                         start: int (Required)
     *                         end: int (Required)
     *                         exitOptions (Required): (recursive schema, see exitOptions above)
     *                     }
     *                 ]
     *                 preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *                 fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *                 default (Optional): (recursive schema, see default above)
     *             }
     *             commandLine: String (Required)
     *             containerSettings (Optional): {
     *                 containerRunOptions: String (Optional)
     *                 imageName: String (Required)
     *                 registry (Optional): {
     *                     username: String (Optional)
     *                     password: String (Optional)
     *                     registryServer: String (Optional)
     *                     identityReference (Optional): {
     *                         resourceId: String (Optional)
     *                     }
     *                 }
     *                 workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *                 containerHostBatchBindMounts (Optional): [
     *                      (Optional){
     *                         source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                         isReadOnly: Boolean (Optional)
     *                     }
     *                 ]
     *             }
     *             resourceFiles (Optional): [
     *                  (Optional){
     *                     autoStorageContainerName: String (Optional)
     *                     storageContainerUrl: String (Optional)
     *                     httpUrl: String (Optional)
     *                     blobPrefix: String (Optional)
     *                     filePath: String (Optional)
     *                     fileMode: String (Optional)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                 }
     *             ]
     *             outputFiles (Optional): [
     *                  (Optional){
     *                     filePattern: String (Required)
     *                     destination (Required): {
     *                         container (Optional): {
     *                             path: String (Optional)
     *                             containerUrl: String (Required)
     *                             identityReference (Optional): (recursive schema, see identityReference above)
     *                             uploadHeaders (Optional): [
     *                                  (Optional){
     *                                     name: String (Required)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     }
     *                     uploadOptions (Required): {
     *                         uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *                     }
     *                 }
     *             ]
     *             environmentSettings (Optional): [
     *                  (Optional){
     *                     name: String (Required)
     *                     value: String (Optional)
     *                 }
     *             ]
     *             affinityInfo (Optional): {
     *                 affinityId: String (Required)
     *             }
     *             constraints (Optional): {
     *                 maxWallClockTime: Duration (Optional)
     *                 retentionTime: Duration (Optional)
     *                 maxTaskRetryCount: Integer (Optional)
     *             }
     *             requiredSlots: Integer (Optional)
     *             userIdentity (Optional): {
     *                 username: String (Optional)
     *                 autoUser (Optional): {
     *                     scope: String(task/pool) (Optional)
     *                     elevationLevel: String(nonadmin/admin) (Optional)
     *                 }
     *             }
     *             multiInstanceSettings (Optional): {
     *                 numberOfInstances: Integer (Optional)
     *                 coordinationCommandLine: String (Required)
     *                 commonResourceFiles (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *             dependsOn (Optional): {
     *                 taskIds (Optional): [
     *                     String (Optional)
     *                 ]
     *                 taskIdRanges (Optional): [
     *                      (Optional){
     *                         start: int (Required)
     *                         end: int (Required)
     *                     }
     *                 ]
     *             }
     *             applicationPackageReferences (Optional): [
     *                  (Optional){
     *                     applicationId: String (Required)
     *                     version: String (Optional)
     *                 }
     *             ]
     *             authenticationTokenSettings (Optional): {
     *                 access (Optional): [
     *                     String(job) (Optional)
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             status: String(success/clienterror/servererror) (Required)
     *             taskId: String (Required)
     *             eTag: String (Optional)
     *             lastModified: OffsetDateTime (Optional)
     *             location: String (Optional)
     *             error (Optional): {
     *                 code: String (Optional)
     *                 message (Optional): {
     *                     lang: String (Optional)
     *                     value: String (Optional)
     *                 }
     *                 values (Optional): [
     *                      (Optional){
     *                         key: String (Optional)
     *                         value: String (Optional)
     *                     }
     *                 ]
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param taskCollection The Tasks to be added.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of creating a collection of Tasks to a Job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTaskCollectionWithResponse(String jobId, BinaryData taskCollection,
        RequestOptions requestOptions) {
        return this.serviceClient.createTaskCollectionWithResponse(jobId, taskCollection, requestOptions);
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * When a Task is deleted, all of the files in its directory on the Compute Node
     * where it ran are also deleted (regardless of the retention time). For
     * multi-instance Tasks, the delete Task operation applies synchronously to the
     * primary task; subtasks and their files are then deleted asynchronously in the
     * background.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.deleteTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Gets information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * <tr><td>$expand</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $expand clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         containerHostBatchBindMounts (Optional): [
     *              (Optional){
     *                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                 isReadOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.getTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Updates the properties of the specified Task.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     displayName: String (Optional)
     *     url: String (Optional)
     *     eTag: String (Optional)
     *     lastModified: OffsetDateTime (Optional)
     *     creationTime: OffsetDateTime (Optional)
     *     exitConditions (Optional): {
     *         exitCodes (Optional): [
     *              (Optional){
     *                 code: int (Required)
     *                 exitOptions (Required): {
     *                     jobAction: String(none/disable/terminate) (Optional)
     *                     dependencyAction: String(satisfy/block) (Optional)
     *                 }
     *             }
     *         ]
     *         exitCodeRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *                 exitOptions (Required): (recursive schema, see exitOptions above)
     *             }
     *         ]
     *         preProcessingError (Optional): (recursive schema, see preProcessingError above)
     *         fileUploadError (Optional): (recursive schema, see fileUploadError above)
     *         default (Optional): (recursive schema, see default above)
     *     }
     *     state: String(active/preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(active/preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     commandLine: String (Optional)
     *     containerSettings (Optional): {
     *         containerRunOptions: String (Optional)
     *         imageName: String (Required)
     *         registry (Optional): {
     *             username: String (Optional)
     *             password: String (Optional)
     *             registryServer: String (Optional)
     *             identityReference (Optional): {
     *                 resourceId: String (Optional)
     *             }
     *         }
     *         workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *         containerHostBatchBindMounts (Optional): [
     *              (Optional){
     *                 source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                 isReadOnly: Boolean (Optional)
     *             }
     *         ]
     *     }
     *     resourceFiles (Optional): [
     *          (Optional){
     *             autoStorageContainerName: String (Optional)
     *             storageContainerUrl: String (Optional)
     *             httpUrl: String (Optional)
     *             blobPrefix: String (Optional)
     *             filePath: String (Optional)
     *             fileMode: String (Optional)
     *             identityReference (Optional): (recursive schema, see identityReference above)
     *         }
     *     ]
     *     outputFiles (Optional): [
     *          (Optional){
     *             filePattern: String (Required)
     *             destination (Required): {
     *                 container (Optional): {
     *                     path: String (Optional)
     *                     containerUrl: String (Required)
     *                     identityReference (Optional): (recursive schema, see identityReference above)
     *                     uploadHeaders (Optional): [
     *                          (Optional){
     *                             name: String (Required)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *             }
     *             uploadOptions (Required): {
     *                 uploadCondition: String(tasksuccess/taskfailure/taskcompletion) (Required)
     *             }
     *         }
     *     ]
     *     environmentSettings (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             value: String (Optional)
     *         }
     *     ]
     *     affinityInfo (Optional): {
     *         affinityId: String (Required)
     *     }
     *     constraints (Optional): {
     *         maxWallClockTime: Duration (Optional)
     *         retentionTime: Duration (Optional)
     *         maxTaskRetryCount: Integer (Optional)
     *     }
     *     requiredSlots: Integer (Optional)
     *     userIdentity (Optional): {
     *         username: String (Optional)
     *         autoUser (Optional): {
     *             scope: String(task/pool) (Optional)
     *             elevationLevel: String(nonadmin/admin) (Optional)
     *         }
     *     }
     *     executionInfo (Optional): {
     *         startTime: OffsetDateTime (Optional)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): {
     *             containerId: String (Optional)
     *             state: String (Optional)
     *             error: String (Optional)
     *         }
     *         failureInfo (Optional): {
     *             category: String(usererror/servererror) (Required)
     *             code: String (Optional)
     *             message: String (Optional)
     *             details (Optional): [
     *                  (Optional){
     *                     name: String (Optional)
     *                     value: String (Optional)
     *                 }
     *             ]
     *         }
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         requeueCount: int (Required)
     *         lastRequeueTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     multiInstanceSettings (Optional): {
     *         numberOfInstances: Integer (Optional)
     *         coordinationCommandLine: String (Required)
     *         commonResourceFiles (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     *     stats (Optional): {
     *         url: String (Required)
     *         startTime: OffsetDateTime (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *         userCPUTime: Duration (Required)
     *         kernelCPUTime: Duration (Required)
     *         wallClockTime: Duration (Required)
     *         readIOps: long (Required)
     *         writeIOps: long (Required)
     *         readIOGiB: double (Required)
     *         writeIOGiB: double (Required)
     *         waitTime: Duration (Required)
     *     }
     *     dependsOn (Optional): {
     *         taskIds (Optional): [
     *             String (Optional)
     *         ]
     *         taskIdRanges (Optional): [
     *              (Optional){
     *                 start: int (Required)
     *                 end: int (Required)
     *             }
     *         ]
     *     }
     *     applicationPackageReferences (Optional): [
     *          (Optional){
     *             applicationId: String (Required)
     *             version: String (Optional)
     *         }
     *     ]
     *     authenticationTokenSettings (Optional): {
     *         access (Optional): [
     *             String(job) (Optional)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param task The Task to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceTaskWithResponse(String jobId, String taskId, BinaryData task,
        RequestOptions requestOptions) {
        return this.serviceClient.replaceTaskWithResponse(jobId, taskId, task, requestOptions);
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance
     * Task.
     *
     * If the Task is not a multi-instance Task then this returns an empty collection.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: Integer (Optional)
     *     nodeInfo (Optional): {
     *         affinityId: String (Optional)
     *         nodeUrl: String (Optional)
     *         poolId: String (Optional)
     *         nodeId: String (Optional)
     *         taskRootDirectory: String (Optional)
     *         taskRootDirectoryUrl: String (Optional)
     *     }
     *     startTime: OffsetDateTime (Optional)
     *     endTime: OffsetDateTime (Optional)
     *     exitCode: Integer (Optional)
     *     containerInfo (Optional): {
     *         containerId: String (Optional)
     *         state: String (Optional)
     *         error: String (Optional)
     *     }
     *     failureInfo (Optional): {
     *         category: String(usererror/servererror) (Required)
     *         code: String (Optional)
     *         message: String (Optional)
     *         details (Optional): [
     *              (Optional){
     *                 name: String (Optional)
     *                 value: String (Optional)
     *             }
     *         ]
     *     }
     *     state: String(preparing/running/completed) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     previousState: String(preparing/running/completed) (Optional)
     *     previousStateTransitionTime: OffsetDateTime (Optional)
     *     result: String(success/failure) (Optional)
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the subtasks of a Task as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSubTasks(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.listSubTasks(jobId, taskId, requestOptions);
    }

    /**
     * Terminates the specified Task.
     *
     * When the Task has been terminated, it moves to the completed state. For
     * multi-instance Tasks, the terminate Task operation applies synchronously to the
     * primary task; subtasks are then terminated asynchronously in the background.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.terminateTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been
     * exhausted.
     *
     * Reactivation makes a Task eligible to be retried again up to its maximum retry
     * count. The Task's state is changed to active. As the Task is no longer in the
     * completed state, any previous exit code or failure information is no longer
     * available after reactivation. Each time a Task is reactivated, its retry count
     * is reset to 0. Reactivation will fail for Tasks that are not completed or that
     * previously completed successfully (with an exit code of 0). Additionally, it
     * will fail if the Job has completed (or is terminating or deleting).
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>If-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service exactly matches the value specified by the client.</td></tr>
     * <tr><td>If-None-Match</td><td>String</td><td>No</td><td>An ETag value associated with the version of the resource
     * known to the client.
     * The operation will be performed only if the resource's current ETag on the
     * service does not match the value specified by the client.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> reactivateTaskWithResponse(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.reactivateTaskWithResponse(jobId, taskId, requestOptions);
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to delete children of a directory. If the filePath
     * parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTaskFileWithResponse(String jobId, String taskId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Returns the content of the specified Task file.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>ocp-range</td><td>String</td><td>No</td><td>The byte range to be retrieved. The default is to retrieve
     * the entire file. The
     * format is bytes=startRange-endRange.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTaskFileWithResponse(String jobId, String taskId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.getTaskFileWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Gets the properties of the specified Task file.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the properties of the specified Task file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getTaskFilePropertiesWithResponse(String jobId, String taskId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.getTaskFilePropertiesWithResponse(jobId, taskId, filePath, requestOptions);
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.</td></tr>
     * <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to list children of the Task directory. This
     * parameter can be used in
     * combination with the filter parameter to list specific type of files.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     url: String (Optional)
     *     isDirectory: Boolean (Optional)
     *     properties (Optional): {
     *         creationTime: OffsetDateTime (Optional)
     *         lastModified: OffsetDateTime (Required)
     *         contentLength: long (Required)
     *         contentType: String (Optional)
     *         fileMode: String (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTaskFiles(String jobId, String taskId, RequestOptions requestOptions) {
        return this.serviceClient.listTaskFiles(jobId, taskId, requestOptions);
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * You can add a user Account to a Compute Node only when it is in the idle or
     * running state.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     isAdmin: Boolean (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     password: String (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param user The options to use for creating the user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createNodeUserWithResponse(String poolId, String nodeId, BinaryData user,
        RequestOptions requestOptions) {
        return this.serviceClient.createNodeUserWithResponse(poolId, nodeId, user, requestOptions);
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * You can delete a user Account to a Compute Node only when it is in the idle or
     * running state.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNodeUserWithResponse(String poolId, String nodeId, String userName,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions);
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * This operation replaces of all the updatable properties of the Account. For
     * example, if the expiryTime element is not specified, the current value is
     * replaced with the default value, not left unmodified. You can update a user
     * Account on a Compute Node only when it is in the idle or running state.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     password: String (Optional)
     *     expiryTime: OffsetDateTime (Optional)
     *     sshPublicKey: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The options to use for updating the user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> replaceNodeUserWithResponse(String poolId, String nodeId, String userName,
        BinaryData parameters, RequestOptions requestOptions) {
        return this.serviceClient.replaceNodeUserWithResponse(poolId, nodeId, userName, parameters, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted/upgradingos/deallocated/deallocating) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         scaleSetVmResourceId: String (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.getNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * You can restart a Compute Node only if it is in an idle or running state.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json;
     * odata=minimalmetadata".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeRebootOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> rebootNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.rebootNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Starts the specified Compute Node.
     *
     * You can start a Compute Node only if it has been deallocated.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> startNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.startNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * You can reinstall the operating system on a Compute Node only if it is in an
     * idle or running state. This API can be invoked only on Pools created with the
     * cloud service configuration property.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json;
     * odata=minimalmetadata".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeReimageOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> reimageNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.reimageNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Deallocates the specified Compute Node.
     *
     * You can deallocate a Compute Node only if it is in an idle or running state.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json;
     * odata=minimalmetadata".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeDeallocateOption: String(requeue/terminate/taskcompletion/retaineddata) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deallocateNodeWithResponse(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.deallocateNodeWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * You can disable Task scheduling on a Compute Node only if its current
     * scheduling state is enabled.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values: "application/json;
     * odata=minimalmetadata".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     nodeDisableSchedulingOption: String(requeue/terminate/taskcompletion) (Optional)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> disableNodeSchedulingWithResponse(String poolId, String nodeId,
        RequestOptions requestOptions) {
        return this.serviceClient.disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * You can enable Task scheduling on a Compute Node only if its current scheduling
     * state is disabled.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> enableNodeSchedulingWithResponse(String poolId, String nodeId,
        RequestOptions requestOptions) {
        return this.serviceClient.enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     remoteLoginIPAddress: String (Required)
     *     remoteLoginPort: int (Required)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeRemoteLoginSettingsWithResponse(String poolId, String nodeId,
        RequestOptions requestOptions) {
        return this.serviceClient.getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure
     * Blob Storage.
     *
     * This is for gathering Azure Batch service log files in an automated fashion
     * from Compute Nodes if you are experiencing an error and wish to escalate to
     * Azure support. The Azure Batch service log files should be shared with Azure
     * support to aid in debugging issues with the Batch service.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     containerUrl: String (Required)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Optional)
     *     identityReference (Optional): {
     *         resourceId: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     virtualDirectoryName: String (Required)
     *     numberOfFilesUploaded: int (Required)
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop
     * Protocol file.
     * @param parameters The Azure Batch service log files upload options.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of uploading Batch service log files from a specific Compute Node along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> uploadNodeLogsWithResponse(String poolId, String nodeId, BinaryData parameters,
        RequestOptions requestOptions) {
        return this.serviceClient.uploadNodeLogsWithResponse(poolId, nodeId, parameters, requestOptions);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     url: String (Optional)
     *     state: String(idle/rebooting/reimaging/running/unusable/creating/starting/waitingforstarttask/starttaskfailed/unknown/leavingpool/offline/preempted/upgradingos/deallocated/deallocating) (Optional)
     *     schedulingState: String(enabled/disabled) (Optional)
     *     stateTransitionTime: OffsetDateTime (Optional)
     *     lastBootTime: OffsetDateTime (Optional)
     *     allocationTime: OffsetDateTime (Optional)
     *     ipAddress: String (Optional)
     *     affinityId: String (Optional)
     *     vmSize: String (Optional)
     *     totalTasksRun: Integer (Optional)
     *     runningTasksCount: Integer (Optional)
     *     runningTaskSlotsCount: Integer (Optional)
     *     totalTasksSucceeded: Integer (Optional)
     *     recentTasks (Optional): [
     *          (Optional){
     *             taskUrl: String (Optional)
     *             jobId: String (Optional)
     *             taskId: String (Optional)
     *             subtaskId: Integer (Optional)
     *             taskState: String(active/preparing/running/completed) (Required)
     *             executionInfo (Optional): {
     *                 startTime: OffsetDateTime (Optional)
     *                 endTime: OffsetDateTime (Optional)
     *                 exitCode: Integer (Optional)
     *                 containerInfo (Optional): {
     *                     containerId: String (Optional)
     *                     state: String (Optional)
     *                     error: String (Optional)
     *                 }
     *                 failureInfo (Optional): {
     *                     category: String(usererror/servererror) (Required)
     *                     code: String (Optional)
     *                     message: String (Optional)
     *                     details (Optional): [
     *                          (Optional){
     *                             name: String (Optional)
     *                             value: String (Optional)
     *                         }
     *                     ]
     *                 }
     *                 retryCount: int (Required)
     *                 lastRetryTime: OffsetDateTime (Optional)
     *                 requeueCount: int (Required)
     *                 lastRequeueTime: OffsetDateTime (Optional)
     *                 result: String(success/failure) (Optional)
     *             }
     *         }
     *     ]
     *     startTask (Optional): {
     *         commandLine: String (Required)
     *         containerSettings (Optional): {
     *             containerRunOptions: String (Optional)
     *             imageName: String (Required)
     *             registry (Optional): {
     *                 username: String (Optional)
     *                 password: String (Optional)
     *                 registryServer: String (Optional)
     *                 identityReference (Optional): {
     *                     resourceId: String (Optional)
     *                 }
     *             }
     *             workingDirectory: String(taskWorkingDirectory/containerImageDefault) (Optional)
     *             containerHostBatchBindMounts (Optional): [
     *                  (Optional){
     *                     source: String(Shared/Startup/VfsMounts/Task/JobPrep/Applications) (Optional)
     *                     isReadOnly: Boolean (Optional)
     *                 }
     *             ]
     *         }
     *         resourceFiles (Optional): [
     *              (Optional){
     *                 autoStorageContainerName: String (Optional)
     *                 storageContainerUrl: String (Optional)
     *                 httpUrl: String (Optional)
     *                 blobPrefix: String (Optional)
     *                 filePath: String (Optional)
     *                 fileMode: String (Optional)
     *                 identityReference (Optional): (recursive schema, see identityReference above)
     *             }
     *         ]
     *         environmentSettings (Optional): [
     *              (Optional){
     *                 name: String (Required)
     *                 value: String (Optional)
     *             }
     *         ]
     *         userIdentity (Optional): {
     *             username: String (Optional)
     *             autoUser (Optional): {
     *                 scope: String(task/pool) (Optional)
     *                 elevationLevel: String(nonadmin/admin) (Optional)
     *             }
     *         }
     *         maxTaskRetryCount: Integer (Optional)
     *         waitForSuccess: Boolean (Optional)
     *     }
     *     startTaskInfo (Optional): {
     *         state: String(running/completed) (Required)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Optional)
     *         exitCode: Integer (Optional)
     *         containerInfo (Optional): (recursive schema, see containerInfo above)
     *         failureInfo (Optional): (recursive schema, see failureInfo above)
     *         retryCount: int (Required)
     *         lastRetryTime: OffsetDateTime (Optional)
     *         result: String(success/failure) (Optional)
     *     }
     *     certificateReferences (Optional): [
     *          (Optional){
     *             thumbprint: String (Required)
     *             thumbprintAlgorithm: String (Required)
     *             storeLocation: String(currentuser/localmachine) (Optional)
     *             storeName: String (Optional)
     *             visibility (Optional): [
     *                 String(starttask/task/remoteuser) (Optional)
     *             ]
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Optional)
     *             message: String (Optional)
     *             errorDetails (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     *     isDedicated: Boolean (Optional)
     *     endpointConfiguration (Optional): {
     *         inboundEndpoints (Required): [
     *              (Required){
     *                 name: String (Required)
     *                 protocol: String(tcp/udp) (Required)
     *                 publicIPAddress: String (Required)
     *                 publicFQDN: String (Required)
     *                 frontendPort: int (Required)
     *                 backendPort: int (Required)
     *             }
     *         ]
     *     }
     *     nodeAgentInfo (Optional): {
     *         version: String (Required)
     *         lastUpdateTime: OffsetDateTime (Required)
     *     }
     *     virtualMachineInfo (Optional): {
     *         imageReference (Optional): {
     *             publisher: String (Optional)
     *             offer: String (Optional)
     *             sku: String (Optional)
     *             version: String (Optional)
     *             virtualMachineImageId: String (Optional)
     *             exactVersion: String (Optional)
     *             sharedGalleryImageId: String (Optional)
     *             communityGalleryImageId: String (Optional)
     *         }
     *         scaleSetVmResourceId: String (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodes(String poolId, RequestOptions requestOptions) {
        return this.serviceClient.listNodes(poolId, requestOptions);
    }

    /**
     * Gets information about the specified Compute Node Extension.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Required)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Required)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: OffsetDateTime (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the Compute Node Extension that you want to get information about.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return information about the specified Compute Node Extension along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeExtensionWithResponse(String poolId, String nodeId, String extensionName,
        RequestOptions requestOptions) {
        return this.serviceClient.getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$select</td><td>List&lt;String&gt;</td><td>No</td><td>An OData $select clause. In the form of ","
     * separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     provisioningState: String (Optional)
     *     vmExtension (Optional): {
     *         name: String (Required)
     *         publisher: String (Required)
     *         type: String (Required)
     *         typeHandlerVersion: String (Optional)
     *         autoUpgradeMinorVersion: Boolean (Optional)
     *         enableAutomaticUpgrade: Boolean (Optional)
     *         settings (Optional): {
     *             String: String (Required)
     *         }
     *         protectedSettings (Optional): {
     *             String: String (Required)
     *         }
     *         provisionAfterExtensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     instanceView (Optional): {
     *         name: String (Optional)
     *         statuses (Optional): [
     *              (Optional){
     *                 code: String (Optional)
     *                 displayStatus: String (Optional)
     *                 level: String(Error/Info/Warning) (Optional)
     *                 message: String (Optional)
     *                 time: OffsetDateTime (Optional)
     *             }
     *         ]
     *         subStatuses (Optional): [
     *             (recursive schema, see above)
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodeExtensions(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listNodeExtensions(poolId, nodeId, requestOptions);
    }

    /**
     * Deletes the specified file from the Compute Node.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to delete children of a directory. If the filePath
     * parameter represents
     * a directory instead of a file, you can set recursive to true to delete the
     * directory and all of the files and subdirectories in it. If recursive is false
     * then the directory must be empty or deletion will fail.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteNodeFileWithResponse(String poolId, String nodeId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Returns the content of the specified Compute Node file.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * <tr><td>ocp-range</td><td>String</td><td>No</td><td>The byte range to be retrieved. The default is to retrieve
     * the entire file. The
     * format is bytes=startRange-endRange.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNodeFileWithResponse(String poolId, String nodeId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Gets the properties of the specified Compute Node file.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified time
     * of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * been modified since the specified time.</td></tr>
     * <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>A timestamp indicating the last modified
     * time of the resource known to the
     * client. The operation will be performed only if the resource on the service has
     * not been modified since the specified time.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the properties of the specified Compute Node file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getNodeFilePropertiesWithResponse(String poolId, String nodeId, String filePath,
        RequestOptions requestOptions) {
        return this.serviceClient.getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, requestOptions);
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>timeOut</td><td>Duration</td><td>No</td><td>The maximum time that the server can spend processing the
     * request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used
     * instead.".</td></tr>
     * <tr><td>maxresults</td><td>Integer</td><td>No</td><td>The maximum number of items to return in the response. A
     * maximum of 1000
     * applications can be returned.</td></tr>
     * <tr><td>$filter</td><td>String</td><td>No</td><td>An OData $filter clause. For more information on constructing
     * this filter, see
     * https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.</td></tr>
     * <tr><td>recursive</td><td>Boolean</td><td>No</td><td>Whether to list children of a directory.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     url: String (Optional)
     *     isDirectory: Boolean (Optional)
     *     properties (Optional): {
     *         creationTime: OffsetDateTime (Optional)
     *         lastModified: OffsetDateTime (Required)
     *         contentLength: long (Required)
     *         contentType: String (Optional)
     *         fileMode: String (Optional)
     *     }
     * }
     * }
     * </pre>
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listNodeFiles(String poolId, String nodeId, RequestOptions requestOptions) {
        return this.serviceClient.listNodeFiles(poolId, nodeId, requestOptions);
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the applications available in an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchApplication> listApplications() {
        // Generated convenience method for listApplications
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listApplications(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchApplication.class));
    }

    /**
     * Gets information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about Applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     *
     * @param applicationId The ID of the Application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchApplication getApplication(String applicationId) {
        // Generated convenience method for getApplicationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getApplicationWithResponse(applicationId, requestOptions).getValue().toObject(BatchApplication.class);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals,
     * for the specified Account.
     *
     * If you do not specify a $filter clause including a poolId, the response
     * includes all Pools that existed in the Account in the time range of the
     * returned aggregation intervals. If you do not specify a $filter clause
     * including a startTime or endTime these filters default to the start and end
     * times of the last aggregation interval currently available; that is, only the
     * last aggregation interval is returned.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a listing the usage metrics for an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPoolUsageMetrics> listPoolUsageMetrics() {
        // Generated convenience method for listPoolUsageMetrics
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listPoolUsageMetrics(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPoolUsageMetrics.class));
    }

    /**
     * Lists all of the Pools which be mounted.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPool> listPools() {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listPools(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPool.class));
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * When you request that a Pool be deleted, the following actions occur: the Pool
     * state is set to deleting; any ongoing resize operation on the Pool are stopped;
     * the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
     * running on existing Compute Nodes are terminated and requeued (as if a resize
     * Pool operation had been requested with the default requeue option); finally,
     * the Pool is removed from the system. Because running Tasks are requeued, the
     * user can rerun these Tasks by updating their Job to target a different Pool.
     * The Tasks can then run on the new Pool. If you want to override the requeue
     * behavior, then you should call resize Pool explicitly to shrink the Pool to
     * zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with
     * error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deletePool(String poolId) {
        // Generated convenience method for deletePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deletePoolWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * When you request that a Pool be deleted, the following actions occur: the Pool
     * state is set to deleting; any ongoing resize operation on the Pool are stopped;
     * the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
     * running on existing Compute Nodes are terminated and requeued (as if a resize
     * Pool operation had been requested with the default requeue option); finally,
     * the Pool is removed from the system. Because running Tasks are requeued, the
     * user can rerun these Tasks by updating their Job to target a different Pool.
     * The Tasks can then run on the new Pool. If you want to override the requeue
     * behavior, then you should call resize Pool explicitly to shrink the Pool to
     * zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with
     * error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Pool. The poller provides
     * {@link BatchPool} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, Void> beginDeletePool(String poolId) {
        PollerFlux<BatchPool, Void> asyncPoller = asyncClient.beginDeletePool(poolId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets basic properties of a Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Pool Exists operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return basic properties of a Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean poolExists(String poolId, BatchPoolExistsOptions options, RequestConditions requestConditions) {
        // Generated convenience method for poolExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return poolExistsWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets basic properties of a Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return basic properties of a Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean poolExists(String poolId) {
        // Generated convenience method for poolExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return poolExistsWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchPool getPool(String poolId) {
        // Generated convenience method for getPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPoolWithResponse(poolId, requestOptions).getValue().toObject(BatchPool.class);
    }

    /**
     * Disables automatic scaling for a Pool.
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disablePoolAutoScale(String poolId) {
        // Generated convenience method for disablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disablePoolAutoScaleWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * This does not restore the Pool to its previous state before the resize
     * operation: it only stops any further changes being made, and the Pool maintains
     * its current state. After stopping, the Pool stabilizes at the number of Compute
     * Nodes it was at when the stop operation was done. During the stop operation,
     * the Pool allocation state changes first to stopping and then to steady. A
     * resize operation need not be an explicit resize Pool request; this API can also
     * be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopPoolResize(String poolId) {
        // Generated convenience method for stopPoolResizeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        stopPoolResizeWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * This does not restore the Pool to its previous state before the resize
     * operation: it only stops any further changes being made, and the Pool maintains
     * its current state. After stopping, the Pool stabilizes at the number of Compute
     * Nodes it was at when the stop operation was done. During the stop operation,
     * the Pool allocation state changes first to stopping and then to steady. A
     * resize operation need not be an explicit resize Pool request; this API can also
     * be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the stop-resize operation, providing
     * {@link BatchPool} instances during polling and the final snapshot on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, BatchPool> beginStopPoolResize(String poolId) {
        PollerFlux<BatchPool, BatchPool> asyncPoller = asyncClient.beginStopPoolResize(poolId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the supported Virtual Machine Images as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchSupportedImage> listSupportedImages() {
        // Generated convenience method for listSupportedImages
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSupportedImages(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchSupportedImage.class));
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
     * numbers returned may not always be up to date. If you need exact node counts,
     * use a list query.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPoolNodeCounts> listPoolNodeCounts() {
        // Generated convenience method for listPoolNodeCounts
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listPoolNodeCounts(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPoolNodeCounts.class));
    }

    /**
     * Deletes a Job.
     *
     * Deleting a Job also deletes all Tasks that are part of that Job, and all Job
     * statistics. This also overrides the retention period for Task data; that is, if
     * the Job contains Tasks which are still retained on Compute Nodes, the Batch
     * services deletes those Tasks' working directories and all their contents. When
     * a Delete Job request is received, the Batch service sets the Job to the
     * deleting state. All update operations on a Job that is in deleting state will
     * fail with status code 409 (Conflict), with additional information indicating
     * that the Job is being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteJob(String jobId) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Deletes a Job.
     *
     * Deleting a Job also deletes all Tasks that are part of that Job, and all Job
     * statistics. This also overrides the retention period for Task data; that is, if
     * the Job contains Tasks which are still retained on Compute Nodes, the Batch
     * services deletes those Tasks' working directories and all their contents. When
     * a Delete Job request is received, the Batch service sets the Job to the
     * deleting state. All update operations on a Job that is in deleting state will
     * fail with status code 409 (Conflict), with additional information indicating
     * that the Job is being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Job. The poller provides
     * {@link BatchJob} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, Void> beginDeleteJob(String jobId) {
        PollerFlux<BatchJob, Void> asyncPoller = asyncClient.beginDeleteJob(jobId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Job.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJob getJob(String jobId) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(jobId, requestOptions).getValue().toObject(BatchJob.class);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This fully replaces all the updatable properties of the Job. For example, if
     * the Job has constraints associated with it and if constraints is not specified
     * with this request, then the Batch service will remove the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job A job with updated properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJob(String jobId, BatchJob job) {
        // Generated convenience method for replaceJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceJobWithResponse(jobId, BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * When you call this API, the Batch service sets a disabled Job to the enabling
     * state. After the this operation is completed, the Job moves to the active
     * state, and scheduling of new Tasks under the Job resumes. The Batch service
     * does not allow a Task to remain in the active state for more than 180 days.
     * Therefore, if you enable a Job containing active Tasks which were added more
     * than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void enableJob(String jobId) {
        // Generated convenience method for enableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * When you call this API, the Batch service sets a disabled Job to the enabling
     * state. After this operation is completed, the Job moves to the active
     * state, and scheduling of new Tasks under the Job resumes. The Batch service
     * does not allow a Task to remain in the active state for more than 180 days.
     * Therefore, if you enable a Job containing active Tasks which were added more
     * than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the enabling of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginEnableJob(String jobId) {
        PollerFlux<BatchJob, BatchJob> asyncPoller = asyncClient.beginEnableJob(jobId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * When a Terminate Job request is received, the Batch service sets the Job to the
     * terminating state. The Batch service then terminates any running Tasks
     * associated with the Job and runs any required Job release Tasks. Then the Job
     * moves into the completed state. If there are any Tasks in the Job in the active
     * state, they will remain in the active state. Once a Job is terminated, new
     * Tasks cannot be added and any remaining active Tasks will not be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void terminateJob(String jobId) {
        // Generated convenience method for terminateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * When a Terminate Job request is received, the Batch service sets the Job to the
     * terminating state. The Batch service then terminates any running Tasks
     * associated with the Job and runs any required Job release Tasks. Then the Job
     * moves into the completed state. If there are any Tasks in the Job in the active
     * state, they will remain in the active state. Once a Job is terminated, new
     * Tasks cannot be added and any remaining active Tasks will not be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the termination of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginTerminateJob(String jobId) {
        PollerFlux<BatchJob, BatchJob> asyncPoller = asyncClient.beginTerminateJob(jobId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all of the Jobs in the specified Account.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobs() {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobsFromSchedule(String jobScheduleId) {
        // Generated convenience method for listJobsFromSchedule
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobsFromSchedule(jobScheduleId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the
     * specified Job across the Compute Nodes where the Job has run.
     *
     * This API returns the Job Preparation and Job Release Task status on all Compute
     * Nodes that have run the Job Preparation or Job Release Task. This includes
     * Compute Nodes which have since been removed from the Pool. If this API is
     * invoked on a Job which has no Job Preparation or Job Release Task, the Batch
     * service returns HTTP status code 409 (Conflict) with an error code of
     * JobPreparationTaskNotSpecified.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks
     * for a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId) {
        // Generated convenience method for listJobPreparationAndReleaseTaskStatus
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobPreparationAndReleaseTaskStatus(jobId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobPreparationAndReleaseTaskStatus.class));
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed. Tasks in the preparing
     * state are counted as running. Note that the numbers returned may not always be
     * up to date. If you need exact task counts, use a list query.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTaskCountsResult getJobTaskCounts(String jobId) {
        // Generated convenience method for getJobTaskCountsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobTaskCountsWithResponse(jobId, requestOptions).getValue().toObject(BatchTaskCountsResult.class);
    }

    /**
     * Creates a Certificate to the specified Account.
     *
     * @param certificate The Certificate to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createCertificate(BatchCertificate certificate) {
        // Generated convenience method for createCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createCertificateWithResponse(BinaryData.fromObject(certificate), requestOptions).getValue();
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchCertificate> listCertificates() {
        // Generated convenience method for listCertificates
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listCertificates(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchCertificate.class));
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * If you try to delete a Certificate that is being used by a Pool or Compute
     * Node, the status of the Certificate changes to deleteFailed. If you decide that
     * you want to continue using the Certificate, you can use this operation to set
     * the status of the Certificate back to active. If you intend to delete the
     * Certificate, you do not need to run this operation after the deletion failed.
     * You must make sure that the Certificate is not being used by any resources, and
     * then you can try again to delete the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for cancelCertificateDeletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        cancelCertificateDeletionWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using
     * it. Before you can delete a Certificate, you must therefore make sure that the
     * Certificate is not associated with any existing Pools, the Certificate is not
     * installed on any Nodes (even if you remove a Certificate from a Pool, it is not
     * removed from existing Compute Nodes in that Pool until they restart), and no
     * running Tasks depend on the Certificate. If you try to delete a Certificate
     * that is in use, the deletion fails. The Certificate status changes to
     * deleteFailed. You can use Cancel Delete Certificate to set the status back to
     * active if you decide that you want to continue using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteCertificate(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for deleteCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using
     * it. Before you can delete a Certificate, you must therefore make sure that the
     * Certificate is not associated with any existing Pools, the Certificate is not
     * installed on any Nodes (even if you remove a Certificate from a Pool, it is not
     * removed from existing Compute Nodes in that Pool until they restart), and no
     * running Tasks depend on the Certificate. If you try to delete a Certificate
     * that is in use, the deletion fails. The Certificate status changes to
     * deleteFailed. You can use Cancel Delete Certificate to set the status back to
     * active if you decide that you want to continue using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Certificate. The poller provides
     * {@link BatchCertificate} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<BatchCertificate, Void> beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint) {
        PollerFlux<BatchCertificate, Void> asyncPoller
            = asyncClient.beginDeleteCertificate(thumbprintAlgorithm, thumbprint);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Certificate.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCertificate getCertificate(String thumbprintAlgorithm, String thumbprint) {
        // Generated convenience method for getCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue()
            .toObject(BatchCertificate.class);
    }

    /**
     * Checks the specified Job Schedule exists.
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @param options Optional parameters for Job Schedule Exists operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean jobScheduleExists(String jobScheduleId, BatchJobScheduleExistsOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for jobScheduleExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return jobScheduleExistsWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Checks the specified Job Schedule exists.
     *
     * @param jobScheduleId The ID of the Job Schedule which you want to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean jobScheduleExists(String jobScheduleId) {
        // Generated convenience method for jobScheduleExistsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return jobScheduleExistsWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
     * schedule. When Tasks are deleted, all the files in their working directories on
     * the Compute Nodes are also deleted (the retention period is ignored). The Job
     * Schedule statistics are no longer accessible once the Job Schedule is deleted,
     * though they are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteJobSchedule(String jobScheduleId) {
        // Generated convenience method for deleteJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
     * schedule. When Tasks are deleted, all the files in their working directories on
     * the Compute Nodes are also deleted (the retention period is ignored). The Job
     * Schedule statistics are no longer accessible once the Job Schedule is deleted,
     * though they are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Job Schedule. The poller provides
     * {@link BatchJobSchedule} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJobSchedule, Void> beginDeleteJobSchedule(String jobScheduleId) {
        PollerFlux<BatchJobSchedule, Void> asyncPoller = asyncClient.beginDeleteJobSchedule(jobScheduleId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job Schedule.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJobSchedule getJobSchedule(String jobScheduleId) {
        // Generated convenience method for getJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobScheduleWithResponse(jobScheduleId, requestOptions).getValue().toObject(BatchJobSchedule.class);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This fully replaces all the updatable properties of the Job Schedule. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will remove the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule A Job Schedule with updated properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule) {
        // Generated convenience method for replaceJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Disables a Job Schedule.
     *
     * No new Jobs will be created until the Job Schedule is enabled again.
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJobSchedule(String jobScheduleId) {
        // Generated convenience method for disableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Enables a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJobSchedule(String jobScheduleId) {
        // Generated convenience method for enableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void terminateJobSchedule(String jobScheduleId) {
        // Generated convenience method for terminateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the termination of the Job Schedule.
     * The poller provides {@link BatchJobSchedule} instances during polling and returns the last known
     * {@link BatchJobSchedule} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJobSchedule, BatchJobSchedule> beginTerminateJobSchedule(String jobScheduleId) {
        PollerFlux<BatchJobSchedule, BatchJobSchedule> asyncPoller
            = asyncClient.beginTerminateJobSchedule(jobScheduleId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     *
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobSchedule> listJobSchedules() {
        // Generated convenience method for listJobSchedules
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobSchedules(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobSchedule.class));
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param jobId The ID of the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchTask> listTasks(String jobId) {
        // Generated convenience method for listTasks
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTasks(jobId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchTask.class));
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * Note that each Task must have a unique ID. The Batch service may not return the
     * results for each Task in the same order the Tasks were submitted in this
     * request. If the server times out or the connection is closed during the
     * request, the request may have been partially or fully processed, or not at all.
     * In such cases, the user should re-issue the request. Note that it is up to the
     * user to correctly handle failures when re-issuing a request. For example, you
     * should use the same Task IDs during a retry so that if the prior operation
     * succeeded, the retry will not create extra Tasks unexpectedly. If the response
     * contains any Tasks which failed to add, a client can retry the request. In a
     * retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum
     * lifetime of a Task from addition to completion is 180 days. If a Task has not
     * completed within 180 days of being added it will be terminated by the Batch
     * service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param taskCollection The Tasks to be added.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of creating a collection of Tasks to a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCreateTaskCollectionResult createTaskCollection(String jobId, BatchTaskGroup taskCollection) {
        // Generated convenience method for createTaskCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createTaskCollectionWithResponse(jobId, BinaryData.fromObject(taskCollection), requestOptions).getValue()
            .toObject(BatchCreateTaskCollectionResult.class);
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * When a Task is deleted, all of the files in its directory on the Compute Node
     * where it ran are also deleted (regardless of the retention time). For
     * multi-instance Tasks, the delete Task operation applies synchronously to the
     * primary task; subtasks and their files are then deleted asynchronously in the
     * background.
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTask(String jobId, String taskId) {
        // Generated convenience method for deleteTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTask getTask(String jobId, String taskId) {
        // Generated convenience method for getTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTaskWithResponse(jobId, taskId, requestOptions).getValue().toObject(BatchTask.class);
    }

    /**
     * Updates the properties of the specified Task.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param task The Task to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceTask(String jobId, String taskId, BatchTask task) {
        // Generated convenience method for replaceTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceTaskWithResponse(jobId, taskId, BinaryData.fromObject(task), requestOptions).getValue();
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance
     * Task.
     *
     * If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the subtasks of a Task as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchSubtask> listSubTasks(String jobId, String taskId) {
        // Generated convenience method for listSubTasks
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listSubTasks(jobId, taskId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchSubtask.class));
    }

    /**
     * Terminates the specified Task.
     *
     * When the Task has been terminated, it moves to the completed state. For
     * multi-instance Tasks, the terminate Task operation applies synchronously to the
     * primary task; subtasks are then terminated asynchronously in the background.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateTask(String jobId, String taskId) {
        // Generated convenience method for terminateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        terminateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been
     * exhausted.
     *
     * Reactivation makes a Task eligible to be retried again up to its maximum retry
     * count. The Task's state is changed to active. As the Task is no longer in the
     * completed state, any previous exit code or failure information is no longer
     * available after reactivation. Each time a Task is reactivated, its retry count
     * is reset to 0. Reactivation will fail for Tasks that are not completed or that
     * previously completed successfully (with an exit code of 0). Additionally, it
     * will fail if the Job has completed (or is terminating or deleting).
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reactivateTask(String jobId, String taskId) {
        // Generated convenience method for reactivateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reactivateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTaskFile(String jobId, String taskId, String filePath) {
        // Generated convenience method for deleteTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTaskFile(String jobId, String taskId, String filePath) {
        // Generated convenience method for getTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param options Optional parameters for Get Task File Properties operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return The {@link BatchFileProperties} object containing the properties retrieved from the response
     * headers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchFileProperties getTaskFileProperties(String jobId, String taskId, String filePath,
        BatchTaskFilePropertiesGetOptions options) {
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = options == null ? null : options.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = options == null ? null : options.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        // Retrieve response from getTaskFilePropertiesWithResponse and construct BatchFileProperties from its
        // headers
        Response<Void> response = getTaskFilePropertiesWithResponse(jobId, taskId, filePath, requestOptions);
        return new BatchFileProperties(response.getHeaders());
    }

    /**
     * Gets the properties of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return The {@link BatchFileProperties} object containing the properties retrieved from the response
     * headers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchFileProperties getTaskFileProperties(String jobId, String taskId, String filePath) {
        Response<Void> response = getTaskFilePropertiesWithResponse(jobId, taskId, filePath, new RequestOptions());
        return new BatchFileProperties(response.getHeaders());
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeFile> listTaskFiles(String jobId, String taskId) {
        // Generated convenience method for listTaskFiles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTaskFiles(jobId, taskId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeFile.class));
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * You can delete a user Account to a Compute Node only when it is in the idle or
     * running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeUser(String poolId, String nodeId, String userName) {
        // Generated convenience method for deleteNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode getNode(String poolId, String nodeId) {
        // Generated convenience method for getNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void rebootNode(String poolId, String nodeId) {
        // Generated convenience method for rebootNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        rebootNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Restarts the specified Compute Node.
     *
     * You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the rebooting of the Node.
     * The poller provides {@link BatchNode} instances during polling and returns the last known
     * {@link BatchNode} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginRebootNode(String poolId, String nodeId) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginRebootNode(poolId, nodeId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Starts the specified Compute Node.
     *
     * You can start a Compute Node only if it has been deallocated.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startNode(String poolId, String nodeId) {
        // Generated convenience method for startNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        startNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Starts the specified Compute Node.
     *
     * You can start a Compute Node only if it has been deallocated.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the starting of the Node.
     * The poller provides {@link BatchNode} instances during polling and returns the last known
     * {@link BatchNode} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginStartNode(String poolId, String nodeId) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginStartNode(poolId, nodeId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * You can reinstall the operating system on a Compute Node only if it is in an
     * idle or running state. This API can be invoked only on Pools created with the
     * cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reimageNode(String poolId, String nodeId) {
        // Generated convenience method for reimageNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        reimageNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * You can reinstall the operating system on a Compute Node only if it is in an
     * idle or running state. This API can be invoked only on Pools created with the
     * cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that emits {@link BatchNode} snapshots during polling
     * and the final {@link BatchNode} when reimaging finishes.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginReimageNode(String poolId, String nodeId) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginReimageNode(poolId, nodeId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Deallocates the specified Compute Node.
     *
     * You can deallocate a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deallocateNode(String poolId, String nodeId) {
        // Generated convenience method for deallocateNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deallocateNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Deallocates the specified Compute Node.
     *
     * You can deallocate a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that emits {@link BatchNode} snapshots during polling
     * and the final {@link BatchNode} when deallocation finishes.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginDeallocateNode(String poolId, String nodeId) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginDeallocateNode(poolId, nodeId);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * You can disable Task scheduling on a Compute Node only if its current
     * scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableNodeScheduling(String poolId, String nodeId) {
        // Generated convenience method for disableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * You can enable Task scheduling on a Compute Node only if its current scheduling
     * state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableNodeScheduling(String poolId, String nodeId) {
        // Generated convenience method for enableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettings getNodeRemoteLoginSettings(String poolId, String nodeId) {
        // Generated convenience method for getNodeRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions).getValue()
            .toObject(BatchNodeRemoteLoginSettings.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> listNodes(String poolId) {
        // Generated convenience method for listNodes
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listNodes(poolId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the Compute Node Extension that you want to get information about.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeVMExtension getNodeExtension(String poolId, String nodeId, String extensionName) {
        // Generated convenience method for getNodeExtensionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions).getValue()
            .toObject(BatchNodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId) {
        // Generated convenience method for listNodeExtensions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listNodeExtensions(poolId, nodeId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeVMExtension.class));
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeFile(String poolId, String nodeId, String filePath) {
        // Generated convenience method for deleteNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getNodeFile(String poolId, String nodeId, String filePath) {
        // Generated convenience method for getNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param options Optional parameters for Get Node File Properties operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return The {@link BatchFileProperties} object containing the properties retrieved from the response
     * headers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchFileProperties getNodeFileProperties(String poolId, String nodeId, String filePath,
        BatchNodeFilePropertiesGetOptions options) {
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = options == null ? null : options.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = options == null ? null : options.getIfUnmodifiedSince();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        // Retrieve response from getNodeFilePropertiesWithResponse and construct BatchFileProperties from its headers
        Response<Void> response = getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, requestOptions);
        return new BatchFileProperties(response.getHeaders());
    }

    /**
     * Gets the properties of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return The {@link BatchFileProperties} object containing the properties retrieved from the response
     * headers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchFileProperties getNodeFileProperties(String poolId, String nodeId, String filePath) {
        Response<Void> response = getNodeFilePropertiesWithResponse(poolId, nodeId, filePath, new RequestOptions());
        return new BatchFileProperties(response.getHeaders());
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeFile> listNodeFiles(String poolId, String nodeId) {
        // Generated convenience method for listNodeFiles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listNodeFiles(poolId, nodeId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeFile.class));
    }

    /**
     * Lists all of the applications available in the specified Account.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     *
     * @param options Optional parameters for List Applications operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the applications available in an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchApplication> listApplications(BatchApplicationsListOptions options) {
        // Generated convenience method for listApplications
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        return serviceClient.listApplications(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchApplication.class));
    }

    /**
     * Gets information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference. For
     * administrator information about Applications and versions that are not yet
     * available to Compute Nodes, use the Azure portal or the Azure Resource Manager
     * API.
     *
     * @param applicationId The ID of the Application.
     * @param options Optional parameters for Get Application operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Application.
     *
     * This operation returns only Applications and versions that are available for
     * use on Compute Nodes; that is, that can be used in an Package reference.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchApplication getApplication(String applicationId, BatchApplicationGetOptions options) {
        // Generated convenience method for getApplicationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return getApplicationWithResponse(applicationId, requestOptions).getValue().toObject(BatchApplication.class);
    }

    /**
     * Lists the usage metrics, aggregated by Pool across individual time intervals,
     * for the specified Account.
     *
     * If you do not specify a $filter clause including a poolId, the response
     * includes all Pools that existed in the Account in the time range of the
     * returned aggregation intervals. If you do not specify a $filter clause
     * including a startTime or endTime these filters default to the start and end
     * times of the last aggregation interval currently available; that is, only the
     * last aggregation interval is returned.
     *
     * @param options Optional parameters for List Pool Usage Metrics operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of a listing the usage metrics for an Account as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPoolUsageMetrics> listPoolUsageMetrics(BatchPoolUsageMetricsListOptions options) {
        // Generated convenience method for listPoolUsageMetrics
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        OffsetDateTime startTime = options == null ? null : options.getStartTime();
        OffsetDateTime endtime = options == null ? null : options.getEndtime();
        String filter = options == null ? null : options.getFilter();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (startTime != null) {
            requestOptions.addQueryParam("startTime", String.valueOf(startTime), false);
        }
        if (endtime != null) {
            requestOptions.addQueryParam("endtime", String.valueOf(endtime), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient.listPoolUsageMetrics(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPoolUsageMetrics.class));
    }

    /**
     * Lists all of the Pools which be mounted.
     *
     * @param options Optional parameters for List Pools operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Pools in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPool> listPools(BatchPoolsListOptions options) {
        // Generated convenience method for listPools
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listPools(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPool.class));
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * When you request that a Pool be deleted, the following actions occur: the Pool
     * state is set to deleting; any ongoing resize operation on the Pool are stopped;
     * the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
     * running on existing Compute Nodes are terminated and requeued (as if a resize
     * Pool operation had been requested with the default requeue option); finally,
     * the Pool is removed from the system. Because running Tasks are requeued, the
     * user can rerun these Tasks by updating their Job to target a different Pool.
     * The Tasks can then run on the new Pool. If you want to override the requeue
     * behavior, then you should call resize Pool explicitly to shrink the Pool to
     * zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with
     * error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Delete Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deletePool(String poolId, BatchPoolDeleteOptions options, RequestConditions requestConditions) {
        // Generated convenience method for deletePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deletePoolWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Deletes a Pool from the specified Account.
     *
     * When you request that a Pool be deleted, the following actions occur: the Pool
     * state is set to deleting; any ongoing resize operation on the Pool are stopped;
     * the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
     * running on existing Compute Nodes are terminated and requeued (as if a resize
     * Pool operation had been requested with the default requeue option); finally,
     * the Pool is removed from the system. Because running Tasks are requeued, the
     * user can rerun these Tasks by updating their Job to target a different Pool.
     * The Tasks can then run on the new Pool. If you want to override the requeue
     * behavior, then you should call resize Pool explicitly to shrink the Pool to
     * zero size before deleting the Pool. If you call an Update, Patch or Delete API
     * on a Pool in the deleting state, it will fail with HTTP status code 409 with
     * error code PoolBeingDeleted.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Delete Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Pool. The poller provides
     * {@link BatchPool} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, Void> beginDeletePool(String poolId, BatchPoolDeleteOptions options,
        RequestConditions requestConditions) {
        PollerFlux<BatchPool, Void> asyncPoller = asyncClient.beginDeletePool(poolId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Pool.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Get Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchPool getPool(String poolId, BatchPoolGetOptions options, RequestConditions requestConditions) {
        // Generated convenience method for getPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getPoolWithResponse(poolId, requestOptions).getValue().toObject(BatchPool.class);
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * This does not restore the Pool to its previous state before the resize
     * operation: it only stops any further changes being made, and the Pool maintains
     * its current state. After stopping, the Pool stabilizes at the number of Compute
     * Nodes it was at when the stop operation was done. During the stop operation,
     * the Pool allocation state changes first to stopping and then to steady. A
     * resize operation need not be an explicit resize Pool request; this API can also
     * be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Stop Pool Resize operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopPoolResize(String poolId, BatchPoolResizeStopOptions options, RequestConditions requestConditions) {
        // Generated convenience method for stopPoolResizeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        stopPoolResizeWithResponse(poolId, requestOptions).getValue();
    }

    /**
     * Stops an ongoing resize operation on the Pool.
     *
     * This does not restore the Pool to its previous state before the resize
     * operation: it only stops any further changes being made, and the Pool maintains
     * its current state. After stopping, the Pool stabilizes at the number of Compute
     * Nodes it was at when the stop operation was done. During the stop operation,
     * the Pool allocation state changes first to stopping and then to steady. A
     * resize operation need not be an explicit resize Pool request; this API can also
     * be used to halt the initial sizing of the Pool when it is created.
     *
     * @param poolId The ID of the Pool to get.
     * @param options Optional parameters for Stop Pool Resize operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the stop-resize operation, providing
     * {@link BatchPool} instances during polling and the final snapshot on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, BatchPool> beginStopPoolResize(String poolId, BatchPoolResizeStopOptions options,
        RequestConditions requestConditions) {
        PollerFlux<BatchPool, BatchPool> asyncPoller
            = asyncClient.beginStopPoolResize(poolId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all Virtual Machine Images supported by the Azure Batch service.
     *
     * @param options Optional parameters for List Supported Images operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the supported Virtual Machine Images as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchSupportedImage> listSupportedImages(SupportedBatchImagesListOptions options) {
        // Generated convenience method for listSupportedImages
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient.listSupportedImages(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchSupportedImage.class));
    }

    /**
     * Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
     * numbers returned may not always be up to date. If you need exact node counts,
     * use a list query.
     *
     * @param options Optional parameters for List Pool Node Counts operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the number of Compute Nodes in each state, grouped by Pool as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchPoolNodeCounts> listPoolNodeCounts(BatchPoolNodeCountsListOptions options) {
        // Generated convenience method for listPoolNodeCounts
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        return serviceClient.listPoolNodeCounts(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchPoolNodeCounts.class));
    }

    /**
     * Deletes a Job.
     *
     * Deleting a Job also deletes all Tasks that are part of that Job, and all Job
     * statistics. This also overrides the retention period for Task data; that is, if
     * the Job contains Tasks which are still retained on Compute Nodes, the Batch
     * services deletes those Tasks' working directories and all their contents. When
     * a Delete Job request is received, the Batch service sets the Job to the
     * deleting state. All update operations on a Job that is in deleting state will
     * fail with status code 409 (Conflict), with additional information indicating
     * that the Job is being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @param options Optional parameters for Delete Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteJob(String jobId, BatchJobDeleteOptions options, RequestConditions requestConditions) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Boolean force = options == null ? null : options.isForce();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (force != null) {
            requestOptions.addQueryParam("force", String.valueOf(force), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deleteJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Deletes a Job.
     *
     * Deleting a Job also deletes all Tasks that are part of that Job, and all Job
     * statistics. This also overrides the retention period for Task data; that is, if
     * the Job contains Tasks which are still retained on Compute Nodes, the Batch
     * services deletes those Tasks' working directories and all their contents. When
     * a Delete Job request is received, the Batch service sets the Job to the
     * deleting state. All update operations on a Job that is in deleting state will
     * fail with status code 409 (Conflict), with additional information indicating
     * that the Job is being deleted.
     *
     * @param jobId The ID of the Job to delete.
     * @param options Optional parameters for Delete Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Job. The poller provides
     * {@link BatchJob} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, Void> beginDeleteJob(String jobId, BatchJobDeleteOptions options,
        RequestConditions requestConditions) {
        PollerFlux<BatchJob, Void> asyncPoller = asyncClient.beginDeleteJob(jobId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Job.
     *
     * @param jobId The ID of the Job.
     * @param options Optional parameters for Get Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJob getJob(String jobId, BatchJobGetOptions options, RequestConditions requestConditions) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getJobWithResponse(jobId, requestOptions).getValue().toObject(BatchJob.class);
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This fully replaces all the updatable properties of the Job. For example, if
     * the Job has constraints associated with it and if constraints is not specified
     * with this request, then the Batch service will remove the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job A job with updated properties.
     * @param options Optional parameters for Replace Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJob(String jobId, BatchJob job, BatchJobReplaceOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for replaceJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        replaceJobWithResponse(jobId, BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * When you call this API, the Batch service sets a disabled Job to the enabling
     * state. After the this operation is completed, the Job moves to the active
     * state, and scheduling of new Tasks under the Job resumes. The Batch service
     * does not allow a Task to remain in the active state for more than 180 days.
     * Therefore, if you enable a Job containing active Tasks which were added more
     * than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @param options Optional parameters for Enable Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void enableJob(String jobId, BatchJobEnableOptions options, RequestConditions requestConditions) {
        // Generated convenience method for enableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        enableJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Enables the specified Job, allowing new Tasks to run.
     *
     * When you call this API, the Batch service sets a disabled Job to the enabling
     * state. After this operation is completed, the Job moves to the active
     * state, and scheduling of new Tasks under the Job resumes. The Batch service
     * does not allow a Task to remain in the active state for more than 180 days.
     * Therefore, if you enable a Job containing active Tasks which were added more
     * than 180 days ago, those Tasks will not run.
     *
     * @param jobId The ID of the Job to enable.
     * @param options Optional parameters for Enable Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the enabling of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginEnableJob(String jobId, BatchJobEnableOptions options,
        RequestConditions requestConditions) {
        PollerFlux<BatchJob, BatchJob> asyncPoller = asyncClient.beginEnableJob(jobId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Terminates the specified Job, marking it as completed.
     *
     * When a Terminate Job request is received, the Batch service sets the Job to the
     * terminating state. The Batch service then terminates any running Tasks
     * associated with the Job and runs any required Job release Tasks. Then the Job
     * moves into the completed state. If there are any Tasks in the Job in the active
     * state, they will remain in the active state. Once a Job is terminated, new
     * Tasks cannot be added and any remaining active Tasks will not be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @param options Optional parameters for Terminate Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void terminateJob(String jobId, BatchJobTerminateOptions options, RequestConditions requestConditions) {
        // Generated convenience method for terminateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        BatchJobTerminateParameters parameters = options == null ? null : options.getParameters();
        Boolean force = options == null ? null : options.isForce();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        if (force != null) {
            requestOptions.addQueryParam("force", String.valueOf(force), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        terminateJobWithResponse(jobId, requestOptions).getValue();
    }

    /**
     * Begins terminating the specified Job, marking it as completed.
     *
     * When a Terminate Job request is received, the Batch service sets the Job to the
     * terminating state. The Batch service then terminates any running Tasks
     * associated with the Job and runs any required Job release Tasks. Then the Job
     * moves into the completed state. If there are any Tasks in the Job in the active
     * state, they will remain in the active state. Once a Job is terminated, new
     * Tasks cannot be added and any remaining active Tasks will not be scheduled.
     *
     * @param jobId The ID of the Job to terminate.
     * @param options Optional parameters for Terminate Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the termination of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginTerminateJob(String jobId, BatchJobTerminateOptions options,
        RequestConditions requestConditions) {
        PollerFlux<BatchJob, BatchJob> asyncPoller = asyncClient.beginTerminateJob(jobId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all of the Jobs in the specified Account.
     *
     * @param options Optional parameters for List Jobs operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobs(BatchJobsListOptions options) {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listJobs(requestOptions).mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the Jobs that have been created under the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule from which you want to get a list of Jobs.
     * @param options Optional parameters for List Jobs From Schedule operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Jobs in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJob> listJobsFromSchedule(String jobScheduleId,
        BatchJobsFromScheduleListOptions options) {
        // Generated convenience method for listJobsFromSchedule
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listJobsFromSchedule(jobScheduleId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJob.class));
    }

    /**
     * Lists the execution status of the Job Preparation and Job Release Task for the
     * specified Job across the Compute Nodes where the Job has run.
     *
     * This API returns the Job Preparation and Job Release Task status on all Compute
     * Nodes that have run the Job Preparation or Job Release Task. This includes
     * Compute Nodes which have since been removed from the Pool. If this API is
     * invoked on a Job which has no Job Preparation or Job Release Task, the Batch
     * service returns HTTP status code 409 (Conflict) with an error code of
     * JobPreparationTaskNotSpecified.
     *
     * @param jobId The ID of the Job.
     * @param options Optional parameters for List Jobs Preparation and Release Task Status operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the status of the Job Preparation and Job Release Tasks
     * for a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobPreparationAndReleaseTaskStatus> listJobPreparationAndReleaseTaskStatus(String jobId,
        BatchJobPreparationAndReleaseTaskStatusListOptions options) {
        // Generated convenience method for listJobPreparationAndReleaseTaskStatus
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listJobPreparationAndReleaseTaskStatus(jobId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobPreparationAndReleaseTaskStatus.class));
    }

    /**
     * Gets the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed. Tasks in the preparing
     * state are counted as running. Note that the numbers returned may not always be
     * up to date. If you need exact task counts, use a list query.
     *
     * @param jobId The ID of the Job.
     * @param options Optional parameters for Get Job Task Counts operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Task counts for the specified Job.
     *
     * Task counts provide a count of the Tasks by active, running or completed Task
     * state, and a count of Tasks which succeeded or failed.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTaskCountsResult getJobTaskCounts(String jobId, BatchJobTaskCountsGetOptions options) {
        // Generated convenience method for getJobTaskCountsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return getJobTaskCountsWithResponse(jobId, requestOptions).getValue().toObject(BatchTaskCountsResult.class);
    }

    /**
     * Creates a Certificate to the specified Account.
     *
     * @param certificate The Certificate to be created.
     * @param options Optional parameters for Create Certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createCertificate(BatchCertificate certificate, BatchCertificateCreateOptions options) {
        // Generated convenience method for createCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createCertificateWithResponse(BinaryData.fromObject(certificate), requestOptions).getValue();
    }

    /**
     * Lists all of the Certificates that have been added to the specified Account.
     *
     * @param options Optional parameters for List Certificates operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Certificates in the Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchCertificate> listCertificates(BatchCertificatesListOptions options) {
        // Generated convenience method for listCertificates
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listCertificates(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchCertificate.class));
    }

    /**
     * Cancels a failed deletion of a Certificate from the specified Account.
     *
     * If you try to delete a Certificate that is being used by a Pool or Compute
     * Node, the status of the Certificate changes to deleteFailed. If you decide that
     * you want to continue using the Certificate, you can use this operation to set
     * the status of the Certificate back to active. If you intend to delete the
     * Certificate, you do not need to run this operation after the deletion failed.
     * You must make sure that the Certificate is not being used by any resources, and
     * then you can try again to delete the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate being deleted.
     * @param options Optional parameters for Cancel Certificate Deletion operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancelCertificateDeletion(String thumbprintAlgorithm, String thumbprint,
        BatchCertificateCancelDeletionOptions options) {
        // Generated convenience method for cancelCertificateDeletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        cancelCertificateDeletionWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using
     * it. Before you can delete a Certificate, you must therefore make sure that the
     * Certificate is not associated with any existing Pools, the Certificate is not
     * installed on any Nodes (even if you remove a Certificate from a Pool, it is not
     * removed from existing Compute Nodes in that Pool until they restart), and no
     * running Tasks depend on the Certificate. If you try to delete a Certificate
     * that is in use, the deletion fails. The Certificate status changes to
     * deleteFailed. You can use Cancel Delete Certificate to set the status back to
     * active if you decide that you want to continue using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @param options Optional parameters for Delete Certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteCertificate(String thumbprintAlgorithm, String thumbprint, BatchCertificateDeleteOptions options) {
        // Generated convenience method for deleteCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        deleteCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue();
    }

    /**
     * Deletes a Certificate from the specified Account.
     *
     * You cannot delete a Certificate if a resource (Pool or Compute Node) is using
     * it. Before you can delete a Certificate, you must therefore make sure that the
     * Certificate is not associated with any existing Pools, the Certificate is not
     * installed on any Nodes (even if you remove a Certificate from a Pool, it is not
     * removed from existing Compute Nodes in that Pool until they restart), and no
     * running Tasks depend on the Certificate. If you try to delete a Certificate
     * that is in use, the deletion fails. The Certificate status changes to
     * deleteFailed. You can use Cancel Delete Certificate to set the status back to
     * active if you decide that you want to continue using the Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to be deleted.
     * @param options Optional parameters for Delete Certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Certificate. The poller provides
     * {@link BatchCertificate} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchCertificate, Void> beginDeleteCertificate(String thumbprintAlgorithm, String thumbprint,
        BatchCertificateDeleteOptions options) {
        PollerFlux<BatchCertificate, Void> asyncPoller
            = asyncClient.beginDeleteCertificate(thumbprintAlgorithm, thumbprint, options);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Certificate.
     *
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1.
     * @param thumbprint The thumbprint of the Certificate to get.
     * @param options Optional parameters for Get Certificate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Certificate.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCertificate getCertificate(String thumbprintAlgorithm, String thumbprint,
        BatchCertificateGetOptions options) {
        // Generated convenience method for getCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getCertificateWithResponse(thumbprintAlgorithm, thumbprint, requestOptions).getValue()
            .toObject(BatchCertificate.class);
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
     * schedule. When Tasks are deleted, all the files in their working directories on
     * the Compute Nodes are also deleted (the retention period is ignored). The Job
     * Schedule statistics are no longer accessible once the Job Schedule is deleted,
     * though they are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @param options Optional parameters for Delete Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteJobSchedule(String jobScheduleId, BatchJobScheduleDeleteOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for deleteJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Boolean force = options == null ? null : options.isForce();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (force != null) {
            requestOptions.addQueryParam("force", String.valueOf(force), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deleteJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Deletes a Job Schedule from the specified Account.
     *
     * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
     * schedule. When Tasks are deleted, all the files in their working directories on
     * the Compute Nodes are also deleted (the retention period is ignored). The Job
     * Schedule statistics are no longer accessible once the Job Schedule is deleted,
     * though they are still counted towards Account lifetime statistics.
     *
     * @param jobScheduleId The ID of the Job Schedule to delete.
     * @param options Optional parameters for Delete Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the deletion of the Job Schedule. The poller provides
     * {@link BatchJobSchedule} instances during polling and returns {@code null} upon successful deletion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJobSchedule, Void> beginDeleteJobSchedule(String jobScheduleId,
        BatchJobScheduleDeleteOptions options, RequestConditions requestConditions) {
        PollerFlux<BatchJobSchedule, Void> asyncPoller
            = asyncClient.beginDeleteJobSchedule(jobScheduleId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Gets information about the specified Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to get.
     * @param options Optional parameters for Get Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Job Schedule.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchJobSchedule getJobSchedule(String jobScheduleId, BatchJobScheduleGetOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for getJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getJobScheduleWithResponse(jobScheduleId, requestOptions).getValue().toObject(BatchJobSchedule.class);
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This fully replaces all the updatable properties of the Job Schedule. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will remove the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule A Job Schedule with updated properties.
     * @param options Optional parameters for Replace Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceJobSchedule(String jobScheduleId, BatchJobSchedule jobSchedule,
        BatchJobScheduleReplaceOptions options, RequestConditions requestConditions) {
        // Generated convenience method for replaceJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        replaceJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Disables a Job Schedule.
     *
     * No new Jobs will be created until the Job Schedule is enabled again.
     *
     * @param jobScheduleId The ID of the Job Schedule to disable.
     * @param options Optional parameters for Disable Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableJobSchedule(String jobScheduleId, BatchJobScheduleDisableOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for disableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        disableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Enables a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to enable.
     * @param options Optional parameters for Enable Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableJobSchedule(String jobScheduleId, BatchJobScheduleEnableOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for enableJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        enableJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @param options Optional parameters for Terminate Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void terminateJobSchedule(String jobScheduleId, BatchJobScheduleTerminateOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for terminateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Boolean force = options == null ? null : options.isForce();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (force != null) {
            requestOptions.addQueryParam("force", String.valueOf(force), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        terminateJobScheduleWithResponse(jobScheduleId, requestOptions).getValue();
    }

    /**
     * Terminates a Job Schedule.
     *
     * @param jobScheduleId The ID of the Job Schedule to terminates.
     * @param options Optional parameters for Terminate Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the termination of the Job Schedule. The poller provides
     * {@link BatchJobSchedule} instances during polling and returns the last known {@link BatchJobSchedule} on
     * completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJobSchedule, BatchJobSchedule> beginTerminateJobSchedule(String jobScheduleId,
        BatchJobScheduleTerminateOptions options, RequestConditions requestConditions) {
        PollerFlux<BatchJobSchedule, BatchJobSchedule> asyncPoller
            = asyncClient.beginTerminateJobSchedule(jobScheduleId, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Lists all of the Job Schedules in the specified Account.
     *
     * @param options Optional parameters for List Job Schedules operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Job Schedules in an Account as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchJobSchedule> listJobSchedules(BatchJobSchedulesListOptions options) {
        // Generated convenience method for listJobSchedules
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listJobSchedules(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchJobSchedule.class));
    }

    /**
     * Lists all of the Tasks that are associated with the specified Job.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param jobId The ID of the Job.
     * @param options Optional parameters for List Tasks operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Tasks in a Job as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchTask> listTasks(String jobId, BatchTasksListOptions options) {
        // Generated convenience method for listTasks
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listTasks(jobId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchTask.class));
    }

    /**
     * Adds a collection of Tasks to the specified Job.
     *
     * Note that each Task must have a unique ID. The Batch service may not return the
     * results for each Task in the same order the Tasks were submitted in this
     * request. If the server times out or the connection is closed during the
     * request, the request may have been partially or fully processed, or not at all.
     * In such cases, the user should re-issue the request. Note that it is up to the
     * user to correctly handle failures when re-issuing a request. For example, you
     * should use the same Task IDs during a retry so that if the prior operation
     * succeeded, the retry will not create extra Tasks unexpectedly. If the response
     * contains any Tasks which failed to add, a client can retry the request. In a
     * retry, it is most efficient to resubmit only Tasks that failed to add, and to
     * omit Tasks that were successfully added on the first attempt. The maximum
     * lifetime of a Task from addition to completion is 180 days. If a Task has not
     * completed within 180 days of being added it will be terminated by the Batch
     * service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task collection is to be added.
     * @param taskCollection The Tasks to be added.
     * @param options Optional parameters for Create Task Collection operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of creating a collection of Tasks to a Job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchCreateTaskCollectionResult createTaskCollection(String jobId, BatchTaskGroup taskCollection,
        BatchTaskCollectionCreateOptions options) {
        // Generated convenience method for createTaskCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return createTaskCollectionWithResponse(jobId, BinaryData.fromObject(taskCollection), requestOptions).getValue()
            .toObject(BatchCreateTaskCollectionResult.class);
    }

    /**
     * Deletes a Task from the specified Job.
     *
     * When a Task is deleted, all of the files in its directory on the Compute Node
     * where it ran are also deleted (regardless of the retention time). For
     * multi-instance Tasks, the delete Task operation applies synchronously to the
     * primary task; subtasks and their files are then deleted asynchronously in the
     * background.
     *
     * @param jobId The ID of the Job from which to delete the Task.
     * @param taskId The ID of the Task to delete.
     * @param options Optional parameters for Delete Task operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTask(String jobId, String taskId, BatchTaskDeleteOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for deleteTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        deleteTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task to get information about.
     * @param options Optional parameters for Get Task operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Task.
     *
     * For multi-instance Tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary Task.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchTask getTask(String jobId, String taskId, BatchTaskGetOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for getTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        List<String> expand = options == null ? null : options.getExpand();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (expand != null) {
            requestOptions.addQueryParam("$expand",
                expand.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        return getTaskWithResponse(jobId, taskId, requestOptions).getValue().toObject(BatchTask.class);
    }

    /**
     * Updates the properties of the specified Task.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to update.
     * @param task The Task to update.
     * @param options Optional parameters for Replace Task operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceTask(String jobId, String taskId, BatchTask task, BatchTaskReplaceOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for replaceTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        replaceTaskWithResponse(jobId, taskId, BinaryData.fromObject(task), requestOptions).getValue();
    }

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance
     * Task.
     *
     * If the Task is not a multi-instance Task then this returns an empty collection.
     *
     * @param jobId The ID of the Job.
     * @param taskId The ID of the Task.
     * @param options Optional parameters for List SubTasks operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the subtasks of a Task as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchSubtask> listSubTasks(String jobId, String taskId, BatchSubTasksListOptions options) {
        // Generated convenience method for listSubTasks
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listSubTasks(jobId, taskId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchSubtask.class));
    }

    /**
     * Terminates the specified Task.
     *
     * When the Task has been terminated, it moves to the completed state. For
     * multi-instance Tasks, the terminate Task operation applies synchronously to the
     * primary task; subtasks are then terminated asynchronously in the background.
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to terminate.
     * @param options Optional parameters for Terminate Task operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateTask(String jobId, String taskId, BatchTaskTerminateOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for terminateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        terminateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Reactivates a Task, allowing it to run again even if its retry count has been
     * exhausted.
     *
     * Reactivation makes a Task eligible to be retried again up to its maximum retry
     * count. The Task's state is changed to active. As the Task is no longer in the
     * completed state, any previous exit code or failure information is no longer
     * available after reactivation. Each time a Task is reactivated, its retry count
     * is reset to 0. Reactivation will fail for Tasks that are not completed or that
     * previously completed successfully (with an exit code of 0). Additionally, it
     * will fail if the Job has completed (or is terminating or deleting).
     *
     * @param jobId The ID of the Job containing the Task.
     * @param taskId The ID of the Task to reactivate.
     * @param options Optional parameters for Reactivate Task operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reactivateTask(String jobId, String taskId, BatchTaskReactivateOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for reactivateTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        reactivateTaskWithResponse(jobId, taskId, requestOptions).getValue();
    }

    /**
     * Deletes the specified Task file from the Compute Node where the Task ran.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param options Optional parameters for Delete Task File operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTaskFile(String jobId, String taskId, String filePath, BatchTaskFileDeleteOptions options) {
        // Generated convenience method for deleteTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Boolean recursive = options == null ? null : options.isRecursive();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        deleteTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Task file.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose file you want to retrieve.
     * @param filePath The path to the Task file that you want to get the content of.
     * @param options Optional parameters for Get Task File operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getTaskFile(String jobId, String taskId, String filePath, BatchTaskFileGetOptions options) {
        // Generated convenience method for getTaskFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = options == null ? null : options.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = options == null ? null : options.getIfUnmodifiedSince();
        String ocpRange = options == null ? null : options.getOcpRange();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ocpRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("ocp-range"), ocpRange);
        }
        return getTaskFileWithResponse(jobId, taskId, filePath, requestOptions).getValue();
    }

    /**
     * Lists the files in a Task's directory on its Compute Node.
     *
     * @param jobId The ID of the Job that contains the Task.
     * @param taskId The ID of the Task whose files you want to list.
     * @param options Optional parameters for List Task Files operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeFile> listTaskFiles(String jobId, String taskId, BatchTaskFilesListOptions options) {
        // Generated convenience method for listTaskFiles
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        Boolean recursive = options == null ? null : options.isRecursive();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        return serviceClient.listTaskFiles(jobId, taskId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeFile.class));
    }

    /**
     * Deletes a user Account from the specified Compute Node.
     *
     * You can delete a user Account to a Compute Node only when it is in the idle or
     * running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to delete a user Account.
     * @param userName The name of the user Account to delete.
     * @param options Optional parameters for Delete Node User operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeUser(String poolId, String nodeId, String userName, BatchNodeUserDeleteOptions options) {
        // Generated convenience method for deleteNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        deleteNodeUserWithResponse(poolId, nodeId, userName, requestOptions).getValue();
    }

    /**
     * Gets information about the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to get information about.
     * @param options Optional parameters for Get Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNode getNode(String poolId, String nodeId, BatchNodeGetOptions options) {
        // Generated convenience method for getNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getNodeWithResponse(poolId, nodeId, requestOptions).getValue().toObject(BatchNode.class);
    }

    /**
     * Restarts the specified Compute Node.
     *
     * You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Reboot Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void rebootNode(String poolId, String nodeId, BatchNodeRebootOptions options) {
        // Generated convenience method for rebootNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        BatchNodeRebootParameters parameters = options == null ? null : options.getParameters();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        rebootNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Restarts the specified Compute Node.
     *
     * You can restart a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Reboot Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the rebooting of the Node.
     * The poller provides {@link BatchNode} instances during polling and returns the last known
     * {@link BatchNode} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginRebootNode(String poolId, String nodeId,
        BatchNodeRebootOptions options) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginRebootNode(poolId, nodeId, options);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Starts the specified Compute Node.
     *
     * You can start a Compute Node only if it has been deallocated.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Start Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startNode(String poolId, String nodeId, BatchNodeStartOptions options) {
        // Generated convenience method for startNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        startNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Starts the specified Compute Node.
     *
     * You can start a Compute Node only if it has been deallocated.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Start Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the starting of the Node.
     * The poller provides {@link BatchNode} instances during polling and returns the last known
     * {@link BatchNode} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginStartNode(String poolId, String nodeId,
        BatchNodeStartOptions options) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginStartNode(poolId, nodeId, options);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * You can reinstall the operating system on a Compute Node only if it is in an
     * idle or running state. This API can be invoked only on Pools created with the
     * cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Reimage Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reimageNode(String poolId, String nodeId, BatchNodeReimageOptions options) {
        // Generated convenience method for reimageNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        BatchNodeReimageParameters parameters = options == null ? null : options.getParameters();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        reimageNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Reinstalls the operating system on the specified Compute Node.
     *
     * You can reinstall the operating system on a Compute Node only if it is in an
     * idle or running state. This API can be invoked only on Pools created with the
     * cloud service configuration property.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Reimage Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that emits {@link BatchNode} snapshots during polling
     * and the final {@link BatchNode} when reimaging finishes.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginReimageNode(String poolId, String nodeId,
        BatchNodeReimageOptions options) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginReimageNode(poolId, nodeId, options);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Deallocates the specified Compute Node.
     *
     * You can deallocate a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Deallocate Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deallocateNode(String poolId, String nodeId, BatchNodeDeallocateOptions options) {
        // Generated convenience method for deallocateNodeWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        BatchNodeDeallocateParameters parameters = options == null ? null : options.getParameters();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        deallocateNodeWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Deallocates the specified Compute Node.
     *
     * You can deallocate a Compute Node only if it is in an idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that you want to restart.
     * @param options Optional parameters for Deallocate Node operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that emits {@link BatchNode} snapshots during polling
     * and the final {@link BatchNode} when deallocation finishes.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchNode, BatchNode> beginDeallocateNode(String poolId, String nodeId,
        BatchNodeDeallocateOptions options) {
        PollerFlux<BatchNode, BatchNode> asyncPoller = asyncClient.beginDeallocateNode(poolId, nodeId, options);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Disables Task scheduling on the specified Compute Node.
     *
     * You can disable Task scheduling on a Compute Node only if its current
     * scheduling state is enabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to disable Task scheduling.
     * @param options Optional parameters for Disable Node Scheduling operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingDisableOptions options) {
        // Generated convenience method for disableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        BatchNodeDisableSchedulingParameters parameters = options == null ? null : options.getParameters();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (parameters != null) {
            requestOptions.setBody(BinaryData.fromObject(parameters));
        }
        disableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Enables Task scheduling on the specified Compute Node.
     *
     * You can enable Task scheduling on a Compute Node only if its current scheduling
     * state is disabled.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node on which you want to enable Task scheduling.
     * @param options Optional parameters for Enable Node Scheduling operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enableNodeScheduling(String poolId, String nodeId, BatchNodeSchedulingEnableOptions options) {
        // Generated convenience method for enableNodeSchedulingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        enableNodeSchedulingWithResponse(poolId, nodeId, requestOptions).getValue();
    }

    /**
     * Gets the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which to obtain the remote login settings.
     * @param options Optional parameters for Get Node Remote Login Settings operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings required for remote login to a Compute Node.
     *
     * Before you can remotely login to a Compute Node using the remote login settings,
     * you must create a user Account on the Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeRemoteLoginSettings getNodeRemoteLoginSettings(String poolId, String nodeId,
        BatchNodeRemoteLoginSettingsGetOptions options) {
        // Generated convenience method for getNodeRemoteLoginSettingsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return getNodeRemoteLoginSettingsWithResponse(poolId, nodeId, requestOptions).getValue()
            .toObject(BatchNodeRemoteLoginSettings.class);
    }

    /**
     * Lists the Compute Nodes in the specified Pool.
     *
     * @param poolId The ID of the Pool from which you want to list Compute Nodes.
     * @param options Optional parameters for List Nodes operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Nodes in a Pool as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNode> listNodes(String poolId, BatchNodesListOptions options) {
        // Generated convenience method for listNodes
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listNodes(poolId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNode.class));
    }

    /**
     * Gets information about the specified Compute Node Extension.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node that contains the extensions.
     * @param extensionName The name of the Compute Node Extension that you want to get information about.
     * @param options Optional parameters for Get Node Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Compute Node Extension.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BatchNodeVMExtension getNodeExtension(String poolId, String nodeId, String extensionName,
        BatchNodeExtensionGetOptions options) {
        // Generated convenience method for getNodeExtensionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return getNodeExtensionWithResponse(poolId, nodeId, extensionName, requestOptions).getValue()
            .toObject(BatchNodeVMExtension.class);
    }

    /**
     * Lists the Compute Nodes Extensions in the specified Pool.
     *
     * @param poolId The ID of the Pool that contains Compute Node.
     * @param nodeId The ID of the Compute Node that you want to list extensions.
     * @param options Optional parameters for List Node Extensions operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the Compute Node extensions in a Node as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeVMExtension> listNodeExtensions(String poolId, String nodeId,
        BatchNodeExtensionsListOptions options) {
        // Generated convenience method for listNodeExtensions
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        List<String> select = options == null ? null : options.getSelect();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (select != null) {
            requestOptions.addQueryParam("$select",
                select.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        return serviceClient.listNodeExtensions(poolId, nodeId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeVMExtension.class));
    }

    /**
     * Deletes the specified file from the Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param options Optional parameters for Delete Node File operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileDeleteOptions options) {
        // Generated convenience method for deleteNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Boolean recursive = options == null ? null : options.isRecursive();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        deleteNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Returns the content of the specified Compute Node file.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node.
     * @param filePath The path to the file or directory.
     * @param options Optional parameters for Get Node File operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getNodeFile(String poolId, String nodeId, String filePath, BatchNodeFileGetOptions options) {
        // Generated convenience method for getNodeFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = options == null ? null : options.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = options == null ? null : options.getIfUnmodifiedSince();
        String ocpRange = options == null ? null : options.getOcpRange();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ocpRange != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("ocp-range"), ocpRange);
        }
        return getNodeFileWithResponse(poolId, nodeId, filePath, requestOptions).getValue();
    }

    /**
     * Lists all of the files in Task directories on the specified Compute Node.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node whose files you want to list.
     * @param options Optional parameters for List Node Files operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of listing the files on a Compute Node, or the files associated with
     * a Task on a Compute Node as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BatchNodeFile> listNodeFiles(String poolId, String nodeId, BatchNodeFilesListOptions options) {
        // Generated convenience method for listNodeFiles
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        Integer maxPageSize = options == null ? null : options.getMaxPageSize();
        String filter = options == null ? null : options.getFilter();
        Boolean recursive = options == null ? null : options.isRecursive();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxresults", String.valueOf(maxPageSize), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("$filter", filter, false);
        }
        if (recursive != null) {
            requestOptions.addQueryParam("recursive", String.valueOf(recursive), false);
        }
        return serviceClient.listNodeFiles(poolId, nodeId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(BatchNodeFile.class));
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * When naming Pools, avoid including sensitive information such as user names or
     * secret project names. This information may appear in telemetry logs accessible
     * to Microsoft Support engineers.
     *
     * @param pool The Pool to be created.
     * @param options Optional parameters for Create Pool operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPool(BatchPoolCreateParameters pool, BatchPoolCreateOptions options) {
        // Generated convenience method for createPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createPoolWithResponse(BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Creates a Pool to the specified Account.
     *
     * When naming Pools, avoid including sensitive information such as user names or
     * secret project names. This information may appear in telemetry logs accessible
     * to Microsoft Support engineers.
     *
     * @param pool The Pool to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createPool(BatchPoolCreateParameters pool) {
        // Generated convenience method for createPoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createPoolWithResponse(BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This only replaces the Pool properties specified in the request. For example,
     * if the Pool has a StartTask associated with it, and a request does not specify
     * a StartTask element, then the Pool keeps the existing StartTask.
     *
     * @param poolId The ID of the Pool to get.
     * @param pool The pool properties to update.
     * @param options Optional parameters for Update Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePool(String poolId, BatchPoolUpdateParameters pool, BatchPoolUpdateOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for updatePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        updatePoolWithResponse(poolId, BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This only replaces the Pool properties specified in the request. For example,
     * if the Pool has a StartTask associated with it, and a request does not specify
     * a StartTask element, then the Pool keeps the existing StartTask.
     *
     * @param poolId The ID of the Pool to get.
     * @param pool The pool properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePool(String poolId, BatchPoolUpdateParameters pool) {
        // Generated convenience method for updatePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updatePoolWithResponse(poolId, BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * You can only resize a Pool when its allocation state is steady. If the Pool is
     * already resizing, the request fails with status code 409. When you resize a
     * Pool, the Pool's allocation state changes from steady to resizing. You cannot
     * resize Pools which are configured for automatic scaling. If you try to do this,
     * the Batch service returns an error 409. If you resize a Pool downwards, the
     * Batch service chooses which Compute Nodes to remove. To remove specific Compute
     * Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for resizing the pool.
     * @param options Optional parameters for Resize Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resizePool(String poolId, BatchPoolResizeParameters parameters, BatchPoolResizeOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for resizePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        resizePoolWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * You can only resize a Pool when its allocation state is steady. If the Pool is
     * already resizing, the request fails with status code 409. When you resize a
     * Pool, the Pool's allocation state changes from steady to resizing. You cannot
     * resize Pools which are configured for automatic scaling. If you try to do this,
     * the Batch service returns an error 409. If you resize a Pool downwards, the
     * Batch service chooses which Compute Nodes to remove. To remove specific Compute
     * Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for resizing the pool.
     * @param options Optional parameters for Resize Pool operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the resizing of the Pool.
     * The poller provides {@link BatchPool} instances during polling and returns the last known
     * {@link BatchPool} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, BatchPool> beginResizePool(String poolId, BatchPoolResizeParameters parameters,
        BatchPoolResizeOptions options, RequestConditions requestConditions) {
        PollerFlux<BatchPool, BatchPool> asyncPoller
            = asyncClient.beginResizePool(poolId, parameters, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * You can only resize a Pool when its allocation state is steady. If the Pool is
     * already resizing, the request fails with status code 409. When you resize a
     * Pool, the Pool's allocation state changes from steady to resizing. You cannot
     * resize Pools which are configured for automatic scaling. If you try to do this,
     * the Batch service returns an error 409. If you resize a Pool downwards, the
     * Batch service chooses which Compute Nodes to remove. To remove specific Compute
     * Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for resizing the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resizePool(String poolId, BatchPoolResizeParameters parameters) {
        // Generated convenience method for resizePoolWithResponse
        RequestOptions requestOptions = new RequestOptions();
        resizePoolWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Changes the number of Compute Nodes that are assigned to a Pool.
     *
     * You can only resize a Pool when its allocation state is steady. If the Pool is
     * already resizing, the request fails with status code 409. When you resize a
     * Pool, the Pool's allocation state changes from steady to resizing. You cannot
     * resize Pools which are configured for automatic scaling. If you try to do this,
     * the Batch service returns an error 409. If you resize a Pool downwards, the
     * Batch service chooses which Compute Nodes to remove. To remove specific Compute
     * Nodes, use the Pool remove Compute Nodes API instead.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for resizing the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the resizing of the Pool.
     * The poller provides {@link BatchPool} instances during polling and returns the last known
     * {@link BatchPool} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, BatchPool> beginResizePool(String poolId, BatchPoolResizeParameters parameters) {
        PollerFlux<BatchPool, BatchPool> asyncPoller = asyncClient.beginResizePool(poolId, parameters);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This fully replaces all the updatable properties of the Pool. For example, if
     * the Pool has a StartTask associated with it and if StartTask is not specified
     * with this request, then the Batch service will remove the existing StartTask.
     *
     * @param poolId The ID of the Pool to update.
     * @param pool The options to use for replacing properties on the pool.
     * @param options Optional parameters for Replace Pool Properties operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replacePoolProperties(String poolId, BatchPoolReplaceParameters pool,
        BatchPoolPropertiesReplaceOptions options) {
        // Generated convenience method for replacePoolPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        replacePoolPropertiesWithResponse(poolId, BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Pool.
     *
     * This fully replaces all the updatable properties of the Pool. For example, if
     * the Pool has a StartTask associated with it and if StartTask is not specified
     * with this request, then the Batch service will remove the existing StartTask.
     *
     * @param poolId The ID of the Pool to update.
     * @param pool The options to use for replacing properties on the pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replacePoolProperties(String poolId, BatchPoolReplaceParameters pool) {
        // Generated convenience method for replacePoolPropertiesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replacePoolPropertiesWithResponse(poolId, BinaryData.fromObject(pool), requestOptions).getValue();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * This operation can only run when the allocation state of the Pool is steady.
     * When this operation runs, the allocation state changes from steady to resizing.
     * Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for removing the node.
     * @param options Optional parameters for Remove Nodes operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeNodes(String poolId, BatchNodeRemoveParameters parameters, BatchNodesRemoveOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for removeNodesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        removeNodesWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * This operation can only run when the allocation state of the Pool is steady.
     * When this operation runs, the allocation state changes from steady to resizing.
     * Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for removing the node.
     * @param options Optional parameters for Remove Nodes operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the removal of nodes.
     * The poller provides {@link BatchPool} instances during polling and returns the last
     * known {@link BatchPool} on completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<BatchPool, BatchPool> beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters,
        BatchNodesRemoveOptions options, RequestConditions requestConditions) {
        PollerFlux<BatchPool, BatchPool> asyncPoller
            = asyncClient.beginRemoveNodes(poolId, parameters, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * This operation can only run when the allocation state of the Pool is steady.
     * When this operation runs, the allocation state changes from steady to resizing.
     * Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for removing the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void removeNodes(String poolId, BatchNodeRemoveParameters parameters) {
        // Generated convenience method for removeNodesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        removeNodesWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Removes Compute Nodes from the specified Pool.
     *
     * This operation can only run when the allocation state of the Pool is steady.
     * When this operation runs, the allocation state changes from steady to resizing.
     * Each request may remove up to 100 nodes.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for removing the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the removal of nodes.
     * The poller provides {@link BatchPool} instances during polling and returns the last
     * known {@link BatchPool} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchPool, BatchPool> beginRemoveNodes(String poolId, BatchNodeRemoveParameters parameters) {
        PollerFlux<BatchPool, BatchPool> asyncPoller = asyncClient.beginRemoveNodes(poolId, parameters);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This replaces only the Job properties specified in the request. For example, if
     * the Job has constraints, and a request does not specify the constraints
     * element, then the Job keeps the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job The options to use for updating the Job.
     * @param options Optional parameters for Update Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJob(String jobId, BatchJobUpdateParameters job, BatchJobUpdateOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for updateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        updateJobWithResponse(jobId, BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job.
     *
     * This replaces only the Job properties specified in the request. For example, if
     * the Job has constraints, and a request does not specify the constraints
     * element, then the Job keeps the existing constraints.
     *
     * @param jobId The ID of the Job whose properties you want to update.
     * @param job The options to use for updating the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJob(String jobId, BatchJobUpdateParameters job) {
        // Generated convenience method for updateJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateJobWithResponse(jobId, BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * The Batch Service immediately moves the Job to the disabling state. Batch then
     * uses the disableTasks parameter to determine what to do with the currently
     * running Tasks of the Job. The Job remains in the disabling state until the
     * disable operation is completed and all Tasks have been dealt with according to
     * the disableTasks option; the Job then moves to the disabled state. No new Tasks
     * are started under the Job until it moves back to active state. If you try to
     * disable a Job that is in any state other than active, disabling, or disabled,
     * the request fails with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param parameters The options to use for disabling the Job.
     * @param options Optional parameters for Disable Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void disableJob(String jobId, BatchJobDisableParameters parameters, BatchJobDisableOptions options,
        RequestConditions requestConditions) {
        // Generated convenience method for disableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        disableJobWithResponse(jobId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * The Batch Service immediately moves the Job to the disabling state. Batch then
     * uses the disableTasks parameter to determine what to do with the currently
     * running Tasks of the Job. The Job remains in the disabling state until the
     * disable operation is completed and all Tasks have been dealt with according to
     * the disableTasks option; the Job then moves to the disabled state. No new Tasks
     * are started under the Job until it moves back to active state. If you try to
     * disable a Job that is in any state other than active, disabling, or disabled,
     * the request fails with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param parameters The options to use for disabling the Job.
     * @param options Optional parameters for Disable Job operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the disabling of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginDisableJob(String jobId, BatchJobDisableParameters parameters,
        BatchJobDisableOptions options, RequestConditions requestConditions) {
        PollerFlux<BatchJob, BatchJob> asyncPoller
            = asyncClient.beginDisableJob(jobId, parameters, options, requestConditions);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * The Batch Service immediately moves the Job to the disabling state. Batch then
     * uses the disableTasks parameter to determine what to do with the currently
     * running Tasks of the Job. The Job remains in the disabling state until the
     * disable operation is completed and all Tasks have been dealt with according to
     * the disableTasks option; the Job then moves to the disabled state. No new Tasks
     * are started under the Job until it moves back to active state. If you try to
     * disable a Job that is in any state other than active, disabling, or disabled,
     * the request fails with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param parameters The options to use for disabling the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    void disableJob(String jobId, BatchJobDisableParameters parameters) {
        // Generated convenience method for disableJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        disableJobWithResponse(jobId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Disables the specified Job, preventing new Tasks from running.
     *
     * The Batch Service immediately moves the Job to the disabling state. Batch then
     * uses the disableTasks parameter to determine what to do with the currently
     * running Tasks of the Job. The Job remains in the disabling state until the
     * disable operation is completed and all Tasks have been dealt with according to
     * the disableTasks option; the Job then moves to the disabled state. No new Tasks
     * are started under the Job until it moves back to active state. If you try to
     * disable a Job that is in any state other than active, disabling, or disabled,
     * the request fails with status code 409.
     *
     * @param jobId The ID of the Job to disable.
     * @param parameters The options to use for disabling the Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link SyncPoller} that polls the disabling of the Job.
     * The poller provides {@link BatchJob} instances during polling and returns the last known
     * {@link BatchJob} on completion.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BatchJob, BatchJob> beginDisableJob(String jobId, BatchJobDisableParameters parameters) {
        PollerFlux<BatchJob, BatchJob> asyncPoller = asyncClient.beginDisableJob(jobId, parameters);
        return asyncPoller.getSyncPoller();
    }

    /**
     * Creates a Job to the specified Account.
     *
     * The Batch service supports two ways to control the work done as part of a Job.
     * In the first approach, the user specifies a Job Manager Task. The Batch service
     * launches this Task when it is ready to start the Job. The Job Manager Task
     * controls all other Tasks that run under this Job, by using the Task APIs. In
     * the second approach, the user directly controls the execution of Tasks under an
     * active Job, by using the Task APIs. Also note: when naming Jobs, avoid
     * including sensitive information such as user names or secret project names.
     * This information may appear in telemetry logs accessible to Microsoft Support
     * engineers.
     *
     * @param job The Job to be created.
     * @param options Optional parameters for Create Job operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJob(BatchJobCreateParameters job, BatchJobCreateOptions options) {
        // Generated convenience method for createJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createJobWithResponse(BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Creates a Job to the specified Account.
     *
     * The Batch service supports two ways to control the work done as part of a Job.
     * In the first approach, the user specifies a Job Manager Task. The Batch service
     * launches this Task when it is ready to start the Job. The Job Manager Task
     * controls all other Tasks that run under this Job, by using the Task APIs. In
     * the second approach, the user directly controls the execution of Tasks under an
     * active Job, by using the Task APIs. Also note: when naming Jobs, avoid
     * including sensitive information such as user names or secret project names.
     * This information may appear in telemetry logs accessible to Microsoft Support
     * engineers.
     *
     * @param job The Job to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJob(BatchJobCreateParameters job) {
        // Generated convenience method for createJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createJobWithResponse(BinaryData.fromObject(job), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This replaces only the Job Schedule properties specified in the request. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will keep the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule The options to use for updating the Job Schedule.
     * @param options Optional parameters for Update Job Schedule operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule,
        BatchJobScheduleUpdateOptions options, RequestConditions requestConditions) {
        // Generated convenience method for updateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        updateJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Updates the properties of the specified Job Schedule.
     *
     * This replaces only the Job Schedule properties specified in the request. For
     * example, if the schedule property is not specified with this request, then the
     * Batch service will keep the existing schedule. Changes to a Job Schedule only
     * impact Jobs created by the schedule after the update has taken place; currently
     * running Jobs are unaffected.
     *
     * @param jobScheduleId The ID of the Job Schedule to update.
     * @param jobSchedule The options to use for updating the Job Schedule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateJobSchedule(String jobScheduleId, BatchJobScheduleUpdateParameters jobSchedule) {
        // Generated convenience method for updateJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        updateJobScheduleWithResponse(jobScheduleId, BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Creates a Job Schedule to the specified Account.
     *
     * @param jobSchedule The Job Schedule to be created.
     * @param options Optional parameters for Create Job Schedule operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJobSchedule(BatchJobScheduleCreateParameters jobSchedule, BatchJobScheduleCreateOptions options) {
        // Generated convenience method for createJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createJobScheduleWithResponse(BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Creates a Job Schedule to the specified Account.
     *
     * @param jobSchedule The Job Schedule to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createJobSchedule(BatchJobScheduleCreateParameters jobSchedule) {
        // Generated convenience method for createJobScheduleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createJobScheduleWithResponse(BinaryData.fromObject(jobSchedule), requestOptions).getValue();
    }

    /**
     * Creates a Task to the specified Job.
     *
     * The maximum lifetime of a Task from addition to completion is 180 days. If a
     * Task has not completed within 180 days of being added it will be terminated by
     * the Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param task The Task to be created.
     * @param options Optional parameters for Create Task operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTask(String jobId, BatchTaskCreateParameters task, BatchTaskCreateOptions options) {
        // Generated convenience method for createTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createTaskWithResponse(jobId, BinaryData.fromObject(task), requestOptions).getValue();
    }

    /**
     * Creates a Task to the specified Job.
     *
     * The maximum lifetime of a Task from addition to completion is 180 days. If a
     * Task has not completed within 180 days of being added it will be terminated by
     * the Batch service and left in whatever state it was in at that time.
     *
     * @param jobId The ID of the Job to which the Task is to be created.
     * @param task The Task to be created.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createTask(String jobId, BatchTaskCreateParameters task) {
        // Generated convenience method for createTaskWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createTaskWithResponse(jobId, BinaryData.fromObject(task), requestOptions).getValue();
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * You can add a user Account to a Compute Node only when it is in the idle or
     * running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param user The options to use for creating the user.
     * @param options Optional parameters for Create Node User operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user,
        BatchNodeUserCreateOptions options) {
        // Generated convenience method for createNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        createNodeUserWithResponse(poolId, nodeId, BinaryData.fromObject(user), requestOptions).getValue();
    }

    /**
     * Adds a user Account to the specified Compute Node.
     *
     * You can add a user Account to a Compute Node only when it is in the idle or
     * running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to create a user Account.
     * @param user The options to use for creating the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void createNodeUser(String poolId, String nodeId, BatchNodeUserCreateParameters user) {
        // Generated convenience method for createNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        createNodeUserWithResponse(poolId, nodeId, BinaryData.fromObject(user), requestOptions).getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * This operation replaces of all the updatable properties of the Account. For
     * example, if the expiryTime element is not specified, the current value is
     * replaced with the default value, not left unmodified. You can update a user
     * Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The options to use for updating the user.
     * @param options Optional parameters for Replace Node User operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceNodeUser(String poolId, String nodeId, String userName, BatchNodeUserUpdateParameters parameters,
        BatchNodeUserReplaceOptions options) {
        // Generated convenience method for replaceNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        replaceNodeUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(parameters), requestOptions)
            .getValue();
    }

    /**
     * Updates the password and expiration time of a user Account on the specified Compute Node.
     *
     * This operation replaces of all the updatable properties of the Account. For
     * example, if the expiryTime element is not specified, the current value is
     * replaced with the default value, not left unmodified. You can update a user
     * Account on a Compute Node only when it is in the idle or running state.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the machine on which you want to update a user Account.
     * @param userName The name of the user Account to update.
     * @param parameters The options to use for updating the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void replaceNodeUser(String poolId, String nodeId, String userName,
        BatchNodeUserUpdateParameters parameters) {
        // Generated convenience method for replaceNodeUserWithResponse
        RequestOptions requestOptions = new RequestOptions();
        replaceNodeUserWithResponse(poolId, nodeId, userName, BinaryData.fromObject(parameters), requestOptions)
            .getValue();
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure
     * Blob Storage.
     *
     * This is for gathering Azure Batch service log files in an automated fashion
     * from Compute Nodes if you are experiencing an error and wish to escalate to
     * Azure support. The Azure Batch service log files should be shared with Azure
     * support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop
     * Protocol file.
     * @param parameters The Azure Batch service log files upload options.
     * @param options Optional parameters for Upload Node Logs operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadNodeLogs(String poolId, String nodeId,
        UploadBatchServiceLogsParameters parameters, BatchNodeLogsUploadOptions options) {
        // Generated convenience method for uploadNodeLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return uploadNodeLogsWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Upload Azure Batch service log files from the specified Compute Node to Azure
     * Blob Storage.
     *
     * This is for gathering Azure Batch service log files in an automated fashion
     * from Compute Nodes if you are experiencing an error and wish to escalate to
     * Azure support. The Azure Batch service log files should be shared with Azure
     * support to aid in debugging issues with the Batch service.
     *
     * @param poolId The ID of the Pool that contains the Compute Node.
     * @param nodeId The ID of the Compute Node for which you want to get the Remote Desktop
     * Protocol file.
     * @param parameters The Azure Batch service log files upload options.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of uploading Batch service log files from a specific Compute Node.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadBatchServiceLogsResult uploadNodeLogs(String poolId, String nodeId,
        UploadBatchServiceLogsParameters parameters) {
        // Generated convenience method for uploadNodeLogsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadNodeLogsWithResponse(poolId, nodeId, BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(UploadBatchServiceLogsResult.class);
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * You cannot enable automatic scaling on a Pool if a resize operation is in
     * progress on the Pool. If automatic scaling of the Pool is currently disabled,
     * you must specify a valid autoscale formula as part of the request. If automatic
     * scaling of the Pool is already enabled, you may specify a new autoscale formula
     * and/or a new evaluation interval. You cannot call this API for the same Pool
     * more than once every 30 seconds.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for enabling automatic scaling.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters) {
        // Generated convenience method for enablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        enablePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool. The Pool must have auto
     * scaling enabled in order to evaluate a formula.
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param parameters The options to use for evaluating the automatic scaling formula.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoScaleRun evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters) {
        // Generated convenience method for evaluatePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return evaluatePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(AutoScaleRun.class);
    }

    /**
     * Enables automatic scaling for a Pool.
     *
     * You cannot enable automatic scaling on a Pool if a resize operation is in
     * progress on the Pool. If automatic scaling of the Pool is currently disabled,
     * you must specify a valid autoscale formula as part of the request. If automatic
     * scaling of the Pool is already enabled, you may specify a new autoscale formula
     * and/or a new evaluation interval. You cannot call this API for the same Pool
     * more than once every 30 seconds.
     *
     * @param poolId The ID of the Pool to get.
     * @param parameters The options to use for enabling automatic scaling.
     * @param options Optional parameters for Enable Pool AutoScale operation.
     * @param requestConditions Specifies HTTP options for conditional requests based on modification time.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void enablePoolAutoScale(String poolId, BatchPoolEnableAutoScaleParameters parameters,
        BatchPoolEnableAutoScaleOptions options, RequestConditions requestConditions) {
        // Generated convenience method for enablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        OffsetDateTime ifModifiedSince = requestConditions == null ? null : requestConditions.getIfModifiedSince();
        OffsetDateTime ifUnmodifiedSince = requestConditions == null ? null : requestConditions.getIfUnmodifiedSince();
        String ifMatch = requestConditions == null ? null : requestConditions.getIfMatch();
        String ifNoneMatch = requestConditions == null ? null : requestConditions.getIfNoneMatch();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader(HttpHeaderName.IF_UNMODIFIED_SINCE,
                String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_MATCH, ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader(HttpHeaderName.IF_NONE_MATCH, ifNoneMatch);
        }
        enablePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue();
    }

    /**
     * Gets the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool. The Pool must have auto
     * scaling enabled in order to evaluate a formula.
     *
     * @param poolId The ID of the Pool on which to evaluate the automatic scaling formula.
     * @param parameters The options to use for evaluating the automatic scaling formula.
     * @param options Optional parameters for Evaluate Pool AutoScale operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of evaluating an automatic scaling formula on the Pool.
     *
     * This API is primarily for validating an autoscale formula, as it simply returns
     * the result without applying the formula to the Pool.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoScaleRun evaluatePoolAutoScale(String poolId, BatchPoolEvaluateAutoScaleParameters parameters,
        BatchPoolEvaluateAutoScaleOptions options) {
        // Generated convenience method for evaluatePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        return evaluatePoolAutoScaleWithResponse(poolId, BinaryData.fromObject(parameters), requestOptions).getValue()
            .toObject(AutoScaleRun.class);
    }

    /**
     * Disables automatic scaling for a Pool.
     *
     * @param poolId The ID of the Pool on which to disable automatic scaling.
     * @param options Optional parameters for Disable Pool AutoScale operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws BatchErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disablePoolAutoScale(String poolId, BatchPoolDisableAutoScaleOptions options) {
        // Generated convenience method for disablePoolAutoScaleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Duration timeOutInSeconds = options == null ? null : options.getTimeOutInSeconds();
        if (timeOutInSeconds != null) {
            requestOptions.addQueryParam("timeOut", String.valueOf(timeOutInSeconds.getSeconds()), false);
        }
        disablePoolAutoScaleWithResponse(poolId, requestOptions).getValue();
    }
}
