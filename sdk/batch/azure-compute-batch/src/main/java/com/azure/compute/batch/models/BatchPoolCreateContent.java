// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * Parameters for creating an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolCreateContent implements JsonSerializable<BatchPoolCreateContent> {

    /*
     * A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric
     * characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is
     * case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only
     * by case).
     */
    @Generated
    private final String id;

    /*
     * The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a
     * maximum length of 1024.
     */
    @Generated
    private String displayName;

    /*
     * The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about
     * available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with
     * virtualMachineConfiguration), see Sizes for Virtual Machines (Linux)
     * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines
     * (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports
     * all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
     * series).
     */
    @Generated
    private final String vmSize;

    /*
     * The virtual machine configuration for the Pool. This property must be specified.
     */
    @Generated
    private VirtualMachineConfiguration virtualMachineConfiguration;

    /*
     * The timeout for allocation of Compute Nodes to the Pool. This timeout applies only to manual scaling; it has no
     * effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If
     * you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API
     * directly, the HTTP status code is 400 (Bad Request).
     */
    @Generated
    private Duration resizeTimeout;

    /*
     * The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch
     * Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This
     * property can only be specified when the Batch account was created with the poolAllocationMode property set to
     * 'UserSubscription'.
     */
    @Generated
    private Map<String, String> resourceTags;

    /*
     * The desired number of dedicated Compute Nodes in the Pool. This property must not be specified if enableAutoScale
     * is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes,
     * targetLowPriorityNodes, or both.
     */
    @Generated
    private Integer targetDedicatedNodes;

    /*
     * The desired number of Spot/Low-priority Compute Nodes in the Pool. This property must not be specified if
     * enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either
     * targetDedicatedNodes, targetLowPriorityNodes, or both.
     */
    @Generated
    private Integer targetLowPriorityNodes;

    /*
     * Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and
     * targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool
     * automatically resizes according to the formula. The default value is false.
     */
    @Generated
    private Boolean enableAutoScale;

    /*
     * A formula for the desired number of Compute Nodes in the Pool. This property must not be specified if
     * enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for
     * validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with
     * detailed error information. For more information about specifying this formula, see 'Automatically scale Compute
     * Nodes in an Azure Batch Pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
     */
    @Generated
    private String autoScaleFormula;

    /*
     * The time interval at which to automatically adjust the Pool size according to the autoscale formula. The default
     * value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a
     * value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the
     * REST API directly, the HTTP status code is 400 (Bad Request).
     */
    @Generated
    private Duration autoScaleEvaluationInterval;

    /*
     * Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the
     * maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the
     * Pool not reaching its desired size. The default value is false.
     */
    @Generated
    private Boolean enableInterNodeCommunication;

    /*
     * The network configuration for the Pool.
     */
    @Generated
    private NetworkConfiguration networkConfiguration;

    /*
     * A Task specified to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added
     * to the Pool or when the Compute Node is restarted.
     */
    @Generated
    private BatchStartTask startTask;

    /*
     * The list of Packages to be installed on each Compute Node in the Pool. When creating a pool, the package's
     * application ID must be fully qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{
     * accountName}/applications/{applicationName}). Changes to Package references affect all new Nodes joining the
     * Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is
     * a maximum of 10 Package references on any given Pool.
     */
    @Generated
    private List<BatchApplicationPackageReference> applicationPackageReferences;

    /*
     * The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The
     * default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or
     * 256.
     */
    @Generated
    private Integer taskSlotsPerNode;

    /*
     * How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread.
     */
    @Generated
    private BatchTaskSchedulingPolicy taskSchedulingPolicy;

    /*
     * The list of user Accounts to be created on each Compute Node in the Pool.
     */
    @Generated
    private List<UserAccount> userAccounts;

    /*
     * A list of name-value pairs associated with the Pool as metadata. The Batch service does not assign any meaning to
     * metadata; it is solely for the use of user code.
     */
    @Generated
    private List<MetadataItem> metadata;

    /*
     * Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure
     * fileshare, NFS, CIFS or Blobfuse based file system.
     */
    @Generated
    private List<MountConfiguration> mountConfiguration;

    /*
     * The desired node communication mode for the pool. If omitted, the default value is Default.
     */
    @Generated
    private BatchNodeCommunicationMode targetNodeCommunicationMode;

    /*
     * The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling.
     */
    @Generated
    private UpgradePolicy upgradePolicy;

    /**
     * Creates an instance of BatchPoolCreateContent class.
     *
     * @param id the id value to set.
     * @param vmSize the vmSize value to set.
     */
    @Generated
    public BatchPoolCreateContent(String id, String vmSize) {
        this.id = id;
        this.vmSize = vmSize;
    }

    /**
     * Get the id property: A string that uniquely identifies the Pool within the Account. The ID can contain any
     * combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64
     * characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an
     * Account that differ only by case).
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the displayName property: The display name for the Pool. The display name need not be unique and can contain
     * any Unicode characters up to a maximum length of 1024.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the Pool. The display name need not be unique and can contain
     * any Unicode characters up to a maximum length of 1024.
     *
     * @param displayName the displayName value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the vmSize property: The size of virtual machines in the Pool. All virtual machines in a Pool are the same
     * size. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace
     * (pools created with virtualMachineConfiguration), see Sizes for Virtual Machines (Linux)
     * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines
     * (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports
     * all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
     * series).
     *
     * @return the vmSize value.
     */
    @Generated
    public String getVmSize() {
        return this.vmSize;
    }

    /**
     * Get the virtualMachineConfiguration property: The virtual machine configuration for the Pool. This property must
     * be specified.
     *
     * @return the virtualMachineConfiguration value.
     */
    @Generated
    public VirtualMachineConfiguration getVirtualMachineConfiguration() {
        return this.virtualMachineConfiguration;
    }

    /**
     * Set the virtualMachineConfiguration property: The virtual machine configuration for the Pool. This property must
     * be specified.
     *
     * @param virtualMachineConfiguration the virtualMachineConfiguration value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent
        setVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
        this.virtualMachineConfiguration = virtualMachineConfiguration;
        return this;
    }

    /**
     * Get the resizeTimeout property: The timeout for allocation of Compute Nodes to the Pool. This timeout applies
     * only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes.
     * The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error;
     * if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     *
     * @return the resizeTimeout value.
     */
    @Generated
    public Duration getResizeTimeout() {
        return this.resizeTimeout;
    }

    /**
     * Set the resizeTimeout property: The timeout for allocation of Compute Nodes to the Pool. This timeout applies
     * only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes.
     * The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error;
     * if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     *
     * @param resizeTimeout the resizeTimeout value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setResizeTimeout(Duration resizeTimeout) {
        this.resizeTimeout = resizeTimeout;
        return this;
    }

    /**
     * Get the resourceTags property: The user-specified tags associated with the pool. The user-defined tags to be
     * associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources
     * associated with the pool. This property can only be specified when the Batch account was created with the
     * poolAllocationMode property set to 'UserSubscription'.
     *
     * @return the resourceTags value.
     */
    @Generated
    public Map<String, String> getResourceTags() {
        return this.resourceTags;
    }

    /**
     * Set the resourceTags property: The user-specified tags associated with the pool. The user-defined tags to be
     * associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources
     * associated with the pool. This property can only be specified when the Batch account was created with the
     * poolAllocationMode property set to 'UserSubscription'.
     *
     * @param resourceTags the resourceTags value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setResourceTags(Map<String, String> resourceTags) {
        this.resourceTags = resourceTags;
        return this;
    }

    /**
     * Get the targetDedicatedNodes property: The desired number of dedicated Compute Nodes in the Pool. This property
     * must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set
     * either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @return the targetDedicatedNodes value.
     */
    @Generated
    public Integer getTargetDedicatedNodes() {
        return this.targetDedicatedNodes;
    }

    /**
     * Set the targetDedicatedNodes property: The desired number of dedicated Compute Nodes in the Pool. This property
     * must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set
     * either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @param targetDedicatedNodes the targetDedicatedNodes value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setTargetDedicatedNodes(Integer targetDedicatedNodes) {
        this.targetDedicatedNodes = targetDedicatedNodes;
        return this;
    }

    /**
     * Get the targetLowPriorityNodes property: The desired number of Spot/Low-priority Compute Nodes in the Pool. This
     * property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you
     * must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @return the targetLowPriorityNodes value.
     */
    @Generated
    public Integer getTargetLowPriorityNodes() {
        return this.targetLowPriorityNodes;
    }

    /**
     * Set the targetLowPriorityNodes property: The desired number of Spot/Low-priority Compute Nodes in the Pool. This
     * property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you
     * must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
     *
     * @param targetLowPriorityNodes the targetLowPriorityNodes value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setTargetLowPriorityNodes(Integer targetLowPriorityNodes) {
        this.targetLowPriorityNodes = targetLowPriorityNodes;
        return this;
    }

    /**
     * Get the enableAutoScale property: Whether the Pool size should automatically adjust over time. If false, at least
     * one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property
     * is required and the Pool automatically resizes according to the formula. The default value is false.
     *
     * @return the enableAutoScale value.
     */
    @Generated
    public Boolean isEnableAutoScale() {
        return this.enableAutoScale;
    }

    /**
     * Set the enableAutoScale property: Whether the Pool size should automatically adjust over time. If false, at least
     * one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property
     * is required and the Pool automatically resizes according to the formula. The default value is false.
     *
     * @param enableAutoScale the enableAutoScale value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setEnableAutoScale(Boolean enableAutoScale) {
        this.enableAutoScale = enableAutoScale;
        return this;
    }

    /**
     * Get the autoScaleFormula property: A formula for the desired number of Compute Nodes in the Pool. This property
     * must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The
     * formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service
     * rejects the request with detailed error information. For more information about specifying this formula, see
     * 'Automatically scale Compute Nodes in an Azure Batch Pool'
     * (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
     *
     * @return the autoScaleFormula value.
     */
    @Generated
    public String getAutoScaleFormula() {
        return this.autoScaleFormula;
    }

    /**
     * Set the autoScaleFormula property: A formula for the desired number of Compute Nodes in the Pool. This property
     * must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The
     * formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service
     * rejects the request with detailed error information. For more information about specifying this formula, see
     * 'Automatically scale Compute Nodes in an Azure Batch Pool'
     * (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
     *
     * @param autoScaleFormula the autoScaleFormula value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setAutoScaleFormula(String autoScaleFormula) {
        this.autoScaleFormula = autoScaleFormula;
        return this;
    }

    /**
     * Get the autoScaleEvaluationInterval property: The time interval at which to automatically adjust the Pool size
     * according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes
     * and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch
     * service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     *
     * @return the autoScaleEvaluationInterval value.
     */
    @Generated
    public Duration getAutoScaleEvaluationInterval() {
        return this.autoScaleEvaluationInterval;
    }

    /**
     * Set the autoScaleEvaluationInterval property: The time interval at which to automatically adjust the Pool size
     * according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes
     * and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch
     * service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     *
     * @param autoScaleEvaluationInterval the autoScaleEvaluationInterval value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setAutoScaleEvaluationInterval(Duration autoScaleEvaluationInterval) {
        this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
        return this;
    }

    /**
     * Get the enableInterNodeCommunication property: Whether the Pool permits direct communication between Compute
     * Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on
     * the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is
     * false.
     *
     * @return the enableInterNodeCommunication value.
     */
    @Generated
    public Boolean isEnableInterNodeCommunication() {
        return this.enableInterNodeCommunication;
    }

    /**
     * Set the enableInterNodeCommunication property: Whether the Pool permits direct communication between Compute
     * Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on
     * the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is
     * false.
     *
     * @param enableInterNodeCommunication the enableInterNodeCommunication value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
        this.enableInterNodeCommunication = enableInterNodeCommunication;
        return this;
    }

    /**
     * Get the networkConfiguration property: The network configuration for the Pool.
     *
     * @return the networkConfiguration value.
     */
    @Generated
    public NetworkConfiguration getNetworkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Set the networkConfiguration property: The network configuration for the Pool.
     *
     * @param networkConfiguration the networkConfiguration value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setNetworkConfiguration(NetworkConfiguration networkConfiguration) {
        this.networkConfiguration = networkConfiguration;
        return this;
    }

    /**
     * Get the startTask property: A Task specified to run on each Compute Node as it joins the Pool. The Task runs when
     * the Compute Node is added to the Pool or when the Compute Node is restarted.
     *
     * @return the startTask value.
     */
    @Generated
    public BatchStartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: A Task specified to run on each Compute Node as it joins the Pool. The Task runs when
     * the Compute Node is added to the Pool or when the Compute Node is restarted.
     *
     * @param startTask the startTask value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setStartTask(BatchStartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the applicationPackageReferences property: The list of Packages to be installed on each Compute Node in the
     * Pool. When creating a pool, the package's application ID must be fully qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
     * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are
     * already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given
     * Pool.
     *
     * @return the applicationPackageReferences value.
     */
    @Generated
    public List<BatchApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Set the applicationPackageReferences property: The list of Packages to be installed on each Compute Node in the
     * Pool. When creating a pool, the package's application ID must be fully qualified
     * (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
     * Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are
     * already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given
     * Pool.
     *
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent
        setApplicationPackageReferences(List<BatchApplicationPackageReference> applicationPackageReferences) {
        this.applicationPackageReferences = applicationPackageReferences;
        return this;
    }

    /**
     * Get the taskSlotsPerNode property: The number of task slots that can be used to run concurrent tasks on a single
     * compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores
     * of the vmSize of the pool or 256.
     *
     * @return the taskSlotsPerNode value.
     */
    @Generated
    public Integer getTaskSlotsPerNode() {
        return this.taskSlotsPerNode;
    }

    /**
     * Set the taskSlotsPerNode property: The number of task slots that can be used to run concurrent tasks on a single
     * compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores
     * of the vmSize of the pool or 256.
     *
     * @param taskSlotsPerNode the taskSlotsPerNode value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setTaskSlotsPerNode(Integer taskSlotsPerNode) {
        this.taskSlotsPerNode = taskSlotsPerNode;
        return this;
    }

    /**
     * Get the taskSchedulingPolicy property: How Tasks are distributed across Compute Nodes in a Pool. If not
     * specified, the default is spread.
     *
     * @return the taskSchedulingPolicy value.
     */
    @Generated
    public BatchTaskSchedulingPolicy getTaskSchedulingPolicy() {
        return this.taskSchedulingPolicy;
    }

    /**
     * Set the taskSchedulingPolicy property: How Tasks are distributed across Compute Nodes in a Pool. If not
     * specified, the default is spread.
     *
     * @param taskSchedulingPolicy the taskSchedulingPolicy value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setTaskSchedulingPolicy(BatchTaskSchedulingPolicy taskSchedulingPolicy) {
        this.taskSchedulingPolicy = taskSchedulingPolicy;
        return this;
    }

    /**
     * Get the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool.
     *
     * @return the userAccounts value.
     */
    @Generated
    public List<UserAccount> getUserAccounts() {
        return this.userAccounts;
    }

    /**
     * Set the userAccounts property: The list of user Accounts to be created on each Compute Node in the Pool.
     *
     * @param userAccounts the userAccounts value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setUserAccounts(List<UserAccount> userAccounts) {
        this.userAccounts = userAccounts;
        return this;
    }

    /**
     * Get the metadata property: A list of name-value pairs associated with the Pool as metadata. The Batch service
     * does not assign any meaning to metadata; it is solely for the use of user code.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: A list of name-value pairs associated with the Pool as metadata. The Batch service
     * does not assign any meaning to metadata; it is solely for the use of user code.
     *
     * @param metadata the metadata value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setMetadata(List<MetadataItem> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the mountConfiguration property: Mount storage using specified file system for the entire lifetime of the
     * pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.
     *
     * @return the mountConfiguration value.
     */
    @Generated
    public List<MountConfiguration> getMountConfiguration() {
        return this.mountConfiguration;
    }

    /**
     * Set the mountConfiguration property: Mount storage using specified file system for the entire lifetime of the
     * pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system.
     *
     * @param mountConfiguration the mountConfiguration value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setMountConfiguration(List<MountConfiguration> mountConfiguration) {
        this.mountConfiguration = mountConfiguration;
        return this;
    }

    /**
     * Get the targetNodeCommunicationMode property: The desired node communication mode for the pool. If omitted, the
     * default value is Default.
     *
     * @return the targetNodeCommunicationMode value.
     */
    @Generated
    public BatchNodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: The desired node communication mode for the pool. If omitted, the
     * default value is Default.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent
        setTargetNodeCommunicationMode(BatchNodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }

    /**
     * Get the upgradePolicy property: The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual,
     * or rolling.
     *
     * @return the upgradePolicy value.
     */
    @Generated
    public UpgradePolicy getUpgradePolicy() {
        return this.upgradePolicy;
    }

    /**
     * Set the upgradePolicy property: The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual,
     * or rolling.
     *
     * @param upgradePolicy the upgradePolicy value to set.
     * @return the BatchPoolCreateContent object itself.
     */
    @Generated
    public BatchPoolCreateContent setUpgradePolicy(UpgradePolicy upgradePolicy) {
        this.upgradePolicy = upgradePolicy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("virtualMachineConfiguration", this.virtualMachineConfiguration);
        jsonWriter.writeStringField("resizeTimeout", CoreUtils.durationToStringWithDays(this.resizeTimeout));
        jsonWriter.writeMapField("resourceTags", this.resourceTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("targetDedicatedNodes", this.targetDedicatedNodes);
        jsonWriter.writeNumberField("targetLowPriorityNodes", this.targetLowPriorityNodes);
        jsonWriter.writeBooleanField("enableAutoScale", this.enableAutoScale);
        jsonWriter.writeStringField("autoScaleFormula", this.autoScaleFormula);
        jsonWriter.writeStringField("autoScaleEvaluationInterval",
            CoreUtils.durationToStringWithDays(this.autoScaleEvaluationInterval));
        jsonWriter.writeBooleanField("enableInterNodeCommunication", this.enableInterNodeCommunication);
        jsonWriter.writeJsonField("networkConfiguration", this.networkConfiguration);
        jsonWriter.writeJsonField("startTask", this.startTask);
        jsonWriter.writeArrayField("applicationPackageReferences", this.applicationPackageReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("taskSlotsPerNode", this.taskSlotsPerNode);
        jsonWriter.writeJsonField("taskSchedulingPolicy", this.taskSchedulingPolicy);
        jsonWriter.writeArrayField("userAccounts", this.userAccounts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("metadata", this.metadata, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("mountConfiguration", this.mountConfiguration,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("targetNodeCommunicationMode",
            this.targetNodeCommunicationMode == null ? null : this.targetNodeCommunicationMode.toString());
        jsonWriter.writeJsonField("upgradePolicy", this.upgradePolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolCreateContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolCreateContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchPoolCreateContent.
     */
    @Generated
    public static BatchPoolCreateContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String vmSize = null;
            String displayName = null;
            VirtualMachineConfiguration virtualMachineConfiguration = null;
            Duration resizeTimeout = null;
            Map<String, String> resourceTags = null;
            Integer targetDedicatedNodes = null;
            Integer targetLowPriorityNodes = null;
            Boolean enableAutoScale = null;
            String autoScaleFormula = null;
            Duration autoScaleEvaluationInterval = null;
            Boolean enableInterNodeCommunication = null;
            NetworkConfiguration networkConfiguration = null;
            BatchStartTask startTask = null;
            List<BatchApplicationPackageReference> applicationPackageReferences = null;
            Integer taskSlotsPerNode = null;
            BatchTaskSchedulingPolicy taskSchedulingPolicy = null;
            List<UserAccount> userAccounts = null;
            List<MetadataItem> metadata = null;
            List<MountConfiguration> mountConfiguration = null;
            BatchNodeCommunicationMode targetNodeCommunicationMode = null;
            UpgradePolicy upgradePolicy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    vmSize = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("virtualMachineConfiguration".equals(fieldName)) {
                    virtualMachineConfiguration = VirtualMachineConfiguration.fromJson(reader);
                } else if ("resizeTimeout".equals(fieldName)) {
                    resizeTimeout = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("resourceTags".equals(fieldName)) {
                    resourceTags = reader.readMap(reader1 -> reader1.getString());
                } else if ("targetDedicatedNodes".equals(fieldName)) {
                    targetDedicatedNodes = reader.getNullable(JsonReader::getInt);
                } else if ("targetLowPriorityNodes".equals(fieldName)) {
                    targetLowPriorityNodes = reader.getNullable(JsonReader::getInt);
                } else if ("enableAutoScale".equals(fieldName)) {
                    enableAutoScale = reader.getNullable(JsonReader::getBoolean);
                } else if ("autoScaleFormula".equals(fieldName)) {
                    autoScaleFormula = reader.getString();
                } else if ("autoScaleEvaluationInterval".equals(fieldName)) {
                    autoScaleEvaluationInterval
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("enableInterNodeCommunication".equals(fieldName)) {
                    enableInterNodeCommunication = reader.getNullable(JsonReader::getBoolean);
                } else if ("networkConfiguration".equals(fieldName)) {
                    networkConfiguration = NetworkConfiguration.fromJson(reader);
                } else if ("startTask".equals(fieldName)) {
                    startTask = BatchStartTask.fromJson(reader);
                } else if ("applicationPackageReferences".equals(fieldName)) {
                    applicationPackageReferences
                        = reader.readArray(reader1 -> BatchApplicationPackageReference.fromJson(reader1));
                } else if ("taskSlotsPerNode".equals(fieldName)) {
                    taskSlotsPerNode = reader.getNullable(JsonReader::getInt);
                } else if ("taskSchedulingPolicy".equals(fieldName)) {
                    taskSchedulingPolicy = BatchTaskSchedulingPolicy.fromJson(reader);
                } else if ("userAccounts".equals(fieldName)) {
                    userAccounts = reader.readArray(reader1 -> UserAccount.fromJson(reader1));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readArray(reader1 -> MetadataItem.fromJson(reader1));
                } else if ("mountConfiguration".equals(fieldName)) {
                    mountConfiguration = reader.readArray(reader1 -> MountConfiguration.fromJson(reader1));
                } else if ("targetNodeCommunicationMode".equals(fieldName)) {
                    targetNodeCommunicationMode = BatchNodeCommunicationMode.fromString(reader.getString());
                } else if ("upgradePolicy".equals(fieldName)) {
                    upgradePolicy = UpgradePolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            BatchPoolCreateContent deserializedBatchPoolCreateContent = new BatchPoolCreateContent(id, vmSize);
            deserializedBatchPoolCreateContent.displayName = displayName;
            deserializedBatchPoolCreateContent.virtualMachineConfiguration = virtualMachineConfiguration;
            deserializedBatchPoolCreateContent.resizeTimeout = resizeTimeout;
            deserializedBatchPoolCreateContent.resourceTags = resourceTags;
            deserializedBatchPoolCreateContent.targetDedicatedNodes = targetDedicatedNodes;
            deserializedBatchPoolCreateContent.targetLowPriorityNodes = targetLowPriorityNodes;
            deserializedBatchPoolCreateContent.enableAutoScale = enableAutoScale;
            deserializedBatchPoolCreateContent.autoScaleFormula = autoScaleFormula;
            deserializedBatchPoolCreateContent.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
            deserializedBatchPoolCreateContent.enableInterNodeCommunication = enableInterNodeCommunication;
            deserializedBatchPoolCreateContent.networkConfiguration = networkConfiguration;
            deserializedBatchPoolCreateContent.startTask = startTask;
            deserializedBatchPoolCreateContent.applicationPackageReferences = applicationPackageReferences;
            deserializedBatchPoolCreateContent.taskSlotsPerNode = taskSlotsPerNode;
            deserializedBatchPoolCreateContent.taskSchedulingPolicy = taskSchedulingPolicy;
            deserializedBatchPoolCreateContent.userAccounts = userAccounts;
            deserializedBatchPoolCreateContent.metadata = metadata;
            deserializedBatchPoolCreateContent.mountConfiguration = mountConfiguration;
            deserializedBatchPoolCreateContent.targetNodeCommunicationMode = targetNodeCommunicationMode;
            deserializedBatchPoolCreateContent.upgradePolicy = upgradePolicy;
            return deserializedBatchPoolCreateContent;
        });
    }
}
