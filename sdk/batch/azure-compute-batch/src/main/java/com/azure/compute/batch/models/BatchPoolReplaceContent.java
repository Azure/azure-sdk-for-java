// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Parameters for replacing properties on an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolReplaceContent {

    /*
     * A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the
     * Pool or when the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If
     * omitted, any existing StartTask is removed from the Pool.
     */
    @Generated
    @JsonProperty(value = "startTask")
    private BatchStartTask startTask;

    /*
     * This list replaces any existing Certificate references configured on the Pool.
     * If you specify an empty collection, any existing Certificate references are removed from the Pool.
     * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
     * For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an
     * environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
     * For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory
     * (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     * Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     */
    @Generated
    @JsonProperty(value = "certificateReferences")
    private List<BatchCertificateReference> certificateReferences;

    /*
     * The list of Application Packages to be installed on each Compute Node in the Pool. The list replaces any
     * existing Application Package references on the Pool. Changes to Application Package references affect all new
     * Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are
     * rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or
     * if you specify an empty collection, any existing Application Packages references are removed from the Pool. A
     * maximum of 10 references may be specified on a given Pool.
     */
    @Generated
    @JsonProperty(value = "applicationPackageReferences")
    private List<BatchApplicationPackageReference> applicationPackageReferences;

    /*
     * A list of name-value pairs associated with the Pool as metadata. This list replaces any existing metadata
     * configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from
     * the Pool.
     */
    @Generated
    @JsonProperty(value = "metadata")
    private List<MetadataItem> metadata;

    /*
     * The desired node communication mode for the pool. This setting replaces any existing targetNodeCommunication
     * setting on the Pool. If omitted, the existing setting is default.
     */
    @Generated
    @JsonProperty(value = "targetNodeCommunicationMode")
    private BatchNodeCommunicationMode targetNodeCommunicationMode;

    /**
     * Creates an instance of BatchPoolReplaceContent class.
     *
     * @param certificateReferences the certificateReferences value to set.
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @param metadata the metadata value to set.
     */
    @Generated
    @JsonCreator
    public BatchPoolReplaceContent(
        @JsonProperty(value = "certificateReferences") List<BatchCertificateReference> certificateReferences,
        @JsonProperty(
            value = "applicationPackageReferences") List<BatchApplicationPackageReference> applicationPackageReferences,
        @JsonProperty(value = "metadata") List<MetadataItem> metadata) {
        this.certificateReferences = certificateReferences;
        this.applicationPackageReferences = applicationPackageReferences;
        this.metadata = metadata;
    }

    /**
     * Get the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
     *
     * @return the startTask value.
     */
    @Generated
    public BatchStartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
     *
     * @param startTask the startTask value to set.
     * @return the BatchPoolReplaceContent object itself.
     */
    @Generated
    public BatchPoolReplaceContent setStartTask(BatchStartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the certificateReferences property: This list replaces any existing Certificate references configured on the
     * Pool.
     * If you specify an empty collection, any existing Certificate references are removed from the Pool.
     * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
     * For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an
     * environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
     * For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory
     * (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     * Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     *
     * @return the certificateReferences value.
     */
    @Generated
    public List<BatchCertificateReference> getCertificateReferences() {
        return this.certificateReferences;
    }

    /**
     * Get the applicationPackageReferences property: The list of Application Packages to be installed on each Compute
     * Node in the Pool. The list replaces any existing Application Package references on the Pool. Changes to
     * Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes
     * that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package
     * references on any given Pool. If omitted, or if you specify an empty collection, any existing Application
     * Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool.
     *
     * @return the applicationPackageReferences value.
     */
    @Generated
    public List<BatchApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Get the metadata property: A list of name-value pairs associated with the Pool as metadata. This list replaces
     * any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing
     * metadata is removed from the Pool.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the targetNodeCommunicationMode property: The desired node communication mode for the pool. This setting
     * replaces any existing targetNodeCommunication setting on the Pool. If omitted, the existing setting is default.
     *
     * @return the targetNodeCommunicationMode value.
     */
    @Generated
    public BatchNodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: The desired node communication mode for the pool. This setting
     * replaces any existing targetNodeCommunication setting on the Pool. If omitted, the existing setting is default.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the BatchPoolReplaceContent object itself.
     */
    @Generated
    public BatchPoolReplaceContent
        setTargetNodeCommunicationMode(BatchNodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }
}
