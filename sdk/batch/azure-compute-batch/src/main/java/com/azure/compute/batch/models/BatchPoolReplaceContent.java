// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Parameters for replacing properties on an Azure Batch Pool.
 */
@Fluent
public final class BatchPoolReplaceContent implements JsonSerializable<BatchPoolReplaceContent> {

    /*
     * A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
     */
    @Generated
    private BatchStartTask startTask;

    /*
     * This list replaces any existing Certificate references configured on the Pool.
     * If you specify an empty collection, any existing Certificate references are removed from the Pool.
     * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
     * For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
     * For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     * Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     */
    @Generated
    private final List<BatchCertificateReference> certificateReferences;

    /*
     * The list of Application Packages to be installed on each Compute Node in the Pool. The list replaces any existing Application Package references on the Pool. Changes to Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or if you specify an empty collection, any existing Application Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool.
     */
    @Generated
    private final List<BatchApplicationPackageReference> applicationPackageReferences;

    /*
     * A list of name-value pairs associated with the Pool as metadata. This list replaces any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the Pool.
     */
    @Generated
    private final List<MetadataItem> metadata;

    /*
     * The desired node communication mode for the pool. This setting replaces any existing targetNodeCommunication setting on the Pool. If omitted, the existing setting is default.
     */
    @Generated
    private BatchNodeCommunicationMode targetNodeCommunicationMode;

    /**
     * Creates an instance of BatchPoolReplaceContent class.
     *
     * @param certificateReferences the certificateReferences value to set.
     * @param applicationPackageReferences the applicationPackageReferences value to set.
     * @param metadata the metadata value to set.
     */
    @Generated
    public BatchPoolReplaceContent(List<BatchCertificateReference> certificateReferences,
        List<BatchApplicationPackageReference> applicationPackageReferences, List<MetadataItem> metadata) {
        this.certificateReferences = certificateReferences;
        this.applicationPackageReferences = applicationPackageReferences;
        this.metadata = metadata;
    }

    /**
     * Get the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
     *
     * @return the startTask value.
     */
    @Generated
    public BatchStartTask getStartTask() {
        return this.startTask;
    }

    /**
     * Set the startTask property: A Task to run on each Compute Node as it joins the Pool. The Task runs when the
     * Compute Node is added to the Pool or when the Compute Node is restarted. If this element is present, it
     * overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool.
     *
     * @param startTask the startTask value to set.
     * @return the BatchPoolReplaceContent object itself.
     */
    @Generated
    public BatchPoolReplaceContent setStartTask(BatchStartTask startTask) {
        this.startTask = startTask;
        return this;
    }

    /**
     * Get the certificateReferences property: This list replaces any existing Certificate references configured on the
     * Pool.
     * If you specify an empty collection, any existing Certificate references are removed from the Pool.
     * For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location.
     * For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an
     * environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location.
     * For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory
     * (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
     * Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     *
     * @return the certificateReferences value.
     */
    @Generated
    public List<BatchCertificateReference> getCertificateReferences() {
        return this.certificateReferences;
    }

    /**
     * Get the applicationPackageReferences property: The list of Application Packages to be installed on each Compute
     * Node in the Pool. The list replaces any existing Application Package references on the Pool. Changes to
     * Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes
     * that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package
     * references on any given Pool. If omitted, or if you specify an empty collection, any existing Application
     * Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool.
     *
     * @return the applicationPackageReferences value.
     */
    @Generated
    public List<BatchApplicationPackageReference> getApplicationPackageReferences() {
        return this.applicationPackageReferences;
    }

    /**
     * Get the metadata property: A list of name-value pairs associated with the Pool as metadata. This list replaces
     * any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing
     * metadata is removed from the Pool.
     *
     * @return the metadata value.
     */
    @Generated
    public List<MetadataItem> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the targetNodeCommunicationMode property: The desired node communication mode for the pool. This setting
     * replaces any existing targetNodeCommunication setting on the Pool. If omitted, the existing setting is default.
     *
     * @return the targetNodeCommunicationMode value.
     */
    @Generated
    public BatchNodeCommunicationMode getTargetNodeCommunicationMode() {
        return this.targetNodeCommunicationMode;
    }

    /**
     * Set the targetNodeCommunicationMode property: The desired node communication mode for the pool. This setting
     * replaces any existing targetNodeCommunication setting on the Pool. If omitted, the existing setting is default.
     *
     * @param targetNodeCommunicationMode the targetNodeCommunicationMode value to set.
     * @return the BatchPoolReplaceContent object itself.
     */
    @Generated
    public BatchPoolReplaceContent
        setTargetNodeCommunicationMode(BatchNodeCommunicationMode targetNodeCommunicationMode) {
        this.targetNodeCommunicationMode = targetNodeCommunicationMode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("certificateReferences", this.certificateReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("applicationPackageReferences", this.applicationPackageReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("metadata", this.metadata, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("startTask", this.startTask);
        jsonWriter.writeStringField("targetNodeCommunicationMode",
            this.targetNodeCommunicationMode == null ? null : this.targetNodeCommunicationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchPoolReplaceContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchPoolReplaceContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchPoolReplaceContent.
     */
    @Generated
    public static BatchPoolReplaceContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<BatchCertificateReference> certificateReferences = null;
            List<BatchApplicationPackageReference> applicationPackageReferences = null;
            List<MetadataItem> metadata = null;
            BatchStartTask startTask = null;
            BatchNodeCommunicationMode targetNodeCommunicationMode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("certificateReferences".equals(fieldName)) {
                    certificateReferences = reader.readArray(reader1 -> BatchCertificateReference.fromJson(reader1));
                } else if ("applicationPackageReferences".equals(fieldName)) {
                    applicationPackageReferences
                        = reader.readArray(reader1 -> BatchApplicationPackageReference.fromJson(reader1));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readArray(reader1 -> MetadataItem.fromJson(reader1));
                } else if ("startTask".equals(fieldName)) {
                    startTask = BatchStartTask.fromJson(reader);
                } else if ("targetNodeCommunicationMode".equals(fieldName)) {
                    targetNodeCommunicationMode = BatchNodeCommunicationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BatchPoolReplaceContent deserializedBatchPoolReplaceContent
                = new BatchPoolReplaceContent(certificateReferences, applicationPackageReferences, metadata);
            deserializedBatchPoolReplaceContent.startTask = startTask;
            deserializedBatchPoolReplaceContent.targetNodeCommunicationMode = targetNodeCommunicationMode;
            return deserializedBatchPoolReplaceContent;
        });
    }
}
