// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about a file or directory on a Compute Node.
 */
@Immutable
public final class BatchNodeFile implements JsonSerializable<BatchNodeFile> {

    /*
     * The file path.
     */
    @Generated
    private String name;

    /*
     * The URL of the file.
     */
    @Generated
    private String url;

    /*
     * Whether the object represents a directory.
     */
    @Generated
    private Boolean isDirectory;

    /*
     * The file properties.
     */
    @Generated
    private FileProperties properties;

    /**
     * Creates an instance of BatchNodeFile class.
     */
    @Generated
    private BatchNodeFile() {
    }

    /**
     * Get the name property: The file path.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the url property: The URL of the file.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the isDirectory property: Whether the object represents a directory.
     *
     * @return the isDirectory value.
     */
    @Generated
    public Boolean isDirectory() {
        return this.isDirectory;
    }

    /**
     * Get the properties property: The file properties.
     *
     * @return the properties value.
     */
    @Generated
    public FileProperties getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeBooleanField("isDirectory", this.isDirectory);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchNodeFile from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchNodeFile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchNodeFile.
     */
    @Generated
    public static BatchNodeFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchNodeFile deserializedBatchNodeFile = new BatchNodeFile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    deserializedBatchNodeFile.name = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedBatchNodeFile.url = reader.getString();
                } else if ("isDirectory".equals(fieldName)) {
                    deserializedBatchNodeFile.isDirectory = reader.getNullable(JsonReader::getBoolean);
                } else if ("properties".equals(fieldName)) {
                    deserializedBatchNodeFile.properties = FileProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchNodeFile;
        });
    }
}
