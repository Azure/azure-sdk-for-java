// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Contains information about the execution of a Job Release Task on a Compute
 * Node.
 */
@Immutable
public final class BatchJobReleaseTaskExecutionInfo implements JsonSerializable<BatchJobReleaseTaskExecutionInfo> {

    /*
     * The time at which the Task started running. If the Task has been restarted or retried, this is the most recent
     * time at which the Task started running.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The time at which the Job Release Task completed. This property is set only if the Task is in the Completed
     * state.
     */
    @Generated
    private OffsetDateTime endTime;

    /*
     * The current state of the Job Release Task on the Compute Node.
     */
    @Generated
    private final BatchJobReleaseTaskState state;

    /*
     * The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created
     * by the Task, such as log files.
     */
    @Generated
    private String taskRootDirectory;

    /*
     * The URL to the root directory of the Job Release Task on the Compute Node.
     */
    @Generated
    private String taskRootDirectoryUrl;

    /*
     * The exit code of the program specified on the Task command line. This parameter is returned only if the Task is
     * in the completed state. The exit code for a process reflects the specific convention implemented by the
     * application developer for that process. If you use the exit code value to make decisions in your code, be sure
     * that you know the exit code convention used by the application process. Note that the exit code may also be
     * generated by the Compute Node operating system, such as when a process is forcibly terminated.
     */
    @Generated
    private Integer exitCode;

    /*
     * Information about the container under which the Task is executing. This property is set only if the Task runs in
     * a container context.
     */
    @Generated
    private BatchTaskContainerExecutionInfo containerInfo;

    /*
     * Information describing the Task failure, if any. This property is set only if the Task is in the completed state
     * and encountered a failure.
     */
    @Generated
    private BatchTaskFailureInfo failureInfo;

    /*
     * The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the
     * failureInfo property.
     */
    @Generated
    private BatchTaskExecutionResult result;

    /**
     * Creates an instance of BatchJobReleaseTaskExecutionInfo class.
     *
     * @param startTime the startTime value to set.
     * @param state the state value to set.
     */
    @Generated
    private BatchJobReleaseTaskExecutionInfo(OffsetDateTime startTime, BatchJobReleaseTaskState state) {
        this.startTime = startTime;
        this.state = state;
    }

    /**
     * Get the startTime property: The time at which the Task started running. If the Task has been restarted or
     * retried, this is the most recent time at which the Task started running.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The time at which the Job Release Task completed. This property is set only if the Task
     * is in the Completed state.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the state property: The current state of the Job Release Task on the Compute Node.
     *
     * @return the state value.
     */
    @Generated
    public BatchJobReleaseTaskState getState() {
        return this.state;
    }

    /**
     * Get the taskRootDirectory property: The root directory of the Job Release Task on the Compute Node. You can use
     * this path to retrieve files created by the Task, such as log files.
     *
     * @return the taskRootDirectory value.
     */
    @Generated
    public String getTaskRootDirectory() {
        return this.taskRootDirectory;
    }

    /**
     * Get the taskRootDirectoryUrl property: The URL to the root directory of the Job Release Task on the Compute Node.
     *
     * @return the taskRootDirectoryUrl value.
     */
    @Generated
    public String getTaskRootDirectoryUrl() {
        return this.taskRootDirectoryUrl;
    }

    /**
     * Get the exitCode property: The exit code of the program specified on the Task command line. This parameter is
     * returned only if the Task is in the completed state. The exit code for a process reflects the specific convention
     * implemented by the application developer for that process. If you use the exit code value to make decisions in
     * your code, be sure that you know the exit code convention used by the application process. Note that the exit
     * code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated.
     *
     * @return the exitCode value.
     */
    @Generated
    public Integer getExitCode() {
        return this.exitCode;
    }

    /**
     * Get the containerInfo property: Information about the container under which the Task is executing. This property
     * is set only if the Task runs in a container context.
     *
     * @return the containerInfo value.
     */
    @Generated
    public BatchTaskContainerExecutionInfo getContainerInfo() {
        return this.containerInfo;
    }

    /**
     * Get the failureInfo property: Information describing the Task failure, if any. This property is set only if the
     * Task is in the completed state and encountered a failure.
     *
     * @return the failureInfo value.
     */
    @Generated
    public BatchTaskFailureInfo getFailureInfo() {
        return this.failureInfo;
    }

    /**
     * Get the result property: The result of the Task execution. If the value is 'failed', then the details of the
     * failure can be found in the failureInfo property.
     *
     * @return the result value.
     */
    @Generated
    public BatchTaskExecutionResult getResult() {
        return this.result;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("taskRootDirectory", this.taskRootDirectory);
        jsonWriter.writeStringField("taskRootDirectoryUrl", this.taskRootDirectoryUrl);
        jsonWriter.writeNumberField("exitCode", this.exitCode);
        jsonWriter.writeJsonField("containerInfo", this.containerInfo);
        jsonWriter.writeJsonField("failureInfo", this.failureInfo);
        jsonWriter.writeStringField("result", this.result == null ? null : this.result.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchJobReleaseTaskExecutionInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchJobReleaseTaskExecutionInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchJobReleaseTaskExecutionInfo.
     */
    @Generated
    public static BatchJobReleaseTaskExecutionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime startTime = null;
            BatchJobReleaseTaskState state = null;
            OffsetDateTime endTime = null;
            String taskRootDirectory = null;
            String taskRootDirectoryUrl = null;
            Integer exitCode = null;
            BatchTaskContainerExecutionInfo containerInfo = null;
            BatchTaskFailureInfo failureInfo = null;
            BatchTaskExecutionResult result = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    state = BatchJobReleaseTaskState.fromString(reader.getString());
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("taskRootDirectory".equals(fieldName)) {
                    taskRootDirectory = reader.getString();
                } else if ("taskRootDirectoryUrl".equals(fieldName)) {
                    taskRootDirectoryUrl = reader.getString();
                } else if ("exitCode".equals(fieldName)) {
                    exitCode = reader.getNullable(JsonReader::getInt);
                } else if ("containerInfo".equals(fieldName)) {
                    containerInfo = BatchTaskContainerExecutionInfo.fromJson(reader);
                } else if ("failureInfo".equals(fieldName)) {
                    failureInfo = BatchTaskFailureInfo.fromJson(reader);
                } else if ("result".equals(fieldName)) {
                    result = BatchTaskExecutionResult.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            BatchJobReleaseTaskExecutionInfo deserializedBatchJobReleaseTaskExecutionInfo
                = new BatchJobReleaseTaskExecutionInfo(startTime, state);
            deserializedBatchJobReleaseTaskExecutionInfo.endTime = endTime;
            deserializedBatchJobReleaseTaskExecutionInfo.taskRootDirectory = taskRootDirectory;
            deserializedBatchJobReleaseTaskExecutionInfo.taskRootDirectoryUrl = taskRootDirectoryUrl;
            deserializedBatchJobReleaseTaskExecutionInfo.exitCode = exitCode;
            deserializedBatchJobReleaseTaskExecutionInfo.containerInfo = containerInfo;
            deserializedBatchJobReleaseTaskExecutionInfo.failureInfo = failureInfo;
            deserializedBatchJobReleaseTaskExecutionInfo.result = result;
            return deserializedBatchJobReleaseTaskExecutionInfo;
        });
    }
}
