// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A Certificate that can be installed on Compute Nodes and can be used to
 * authenticate operations on the machine.
 */
@Fluent
public final class BatchCertificate implements JsonSerializable<BatchCertificate> {

    /*
     * The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
     */
    @Generated
    private final String thumbprint;

    /*
     * The algorithm used to derive the thumbprint. This must be sha1.
     */
    @Generated
    private final String thumbprintAlgorithm;

    /*
     * The URL of the Certificate.
     */
    @Generated
    private String url;

    /*
     * The state of the Certificate.
     */
    @Generated
    private BatchCertificateState state;

    /*
     * The time at which the Certificate entered its current state.
     */
    @Generated
    private OffsetDateTime stateTransitionTime;

    /*
     * The previous state of the Certificate. This property is not set if the Certificate is in its initial active state.
     */
    @Generated
    private BatchCertificateState previousState;

    /*
     * The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial Active state.
     */
    @Generated
    private OffsetDateTime previousStateTransitionTime;

    /*
     * The public part of the Certificate as a base-64 encoded .cer file.
     */
    @Generated
    private String publicData;

    /*
     * The error that occurred on the last attempt to delete this Certificate. This property is set only if the Certificate is in the DeleteFailed state.
     */
    @Generated
    private DeleteBatchCertificateError deleteCertificateError;

    /*
     * The base64-encoded contents of the Certificate. The maximum size is 10KB.
     */
    @Generated
    private final String data;

    /*
     * The format of the Certificate data.
     */
    @Generated
    private BatchCertificateFormat certificateFormat;

    /*
     * The password to access the Certificate's private key. This must be omitted if the Certificate format is cer.
     */
    @Generated
    private String password;

    /**
     * Creates an instance of BatchCertificate class.
     *
     * @param thumbprint the thumbprint value to set.
     * @param thumbprintAlgorithm the thumbprintAlgorithm value to set.
     * @param data the data value to set.
     */
    @Generated
    public BatchCertificate(String thumbprint, String thumbprintAlgorithm, String data) {
        this.thumbprint = thumbprint;
        this.thumbprintAlgorithm = thumbprintAlgorithm;
        this.data = data;
    }

    /**
     * Get the thumbprint property: The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits
     * (it may include spaces but these are removed).
     *
     * @return the thumbprint value.
     */
    @Generated
    public String getThumbprint() {
        return this.thumbprint;
    }

    /**
     * Get the thumbprintAlgorithm property: The algorithm used to derive the thumbprint. This must be sha1.
     *
     * @return the thumbprintAlgorithm value.
     */
    @Generated
    public String getThumbprintAlgorithm() {
        return this.thumbprintAlgorithm;
    }

    /**
     * Get the url property: The URL of the Certificate.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the state property: The state of the Certificate.
     *
     * @return the state value.
     */
    @Generated
    public BatchCertificateState getState() {
        return this.state;
    }

    /**
     * Get the stateTransitionTime property: The time at which the Certificate entered its current state.
     *
     * @return the stateTransitionTime value.
     */
    @Generated
    public OffsetDateTime getStateTransitionTime() {
        return this.stateTransitionTime;
    }

    /**
     * Get the previousState property: The previous state of the Certificate. This property is not set if the
     * Certificate is in its initial active state.
     *
     * @return the previousState value.
     */
    @Generated
    public BatchCertificateState getPreviousState() {
        return this.previousState;
    }

    /**
     * Get the previousStateTransitionTime property: The time at which the Certificate entered its previous state. This
     * property is not set if the Certificate is in its initial Active state.
     *
     * @return the previousStateTransitionTime value.
     */
    @Generated
    public OffsetDateTime getPreviousStateTransitionTime() {
        return this.previousStateTransitionTime;
    }

    /**
     * Get the publicData property: The public part of the Certificate as a base-64 encoded .cer file.
     *
     * @return the publicData value.
     */
    @Generated
    public String getPublicData() {
        return this.publicData;
    }

    /**
     * Get the deleteCertificateError property: The error that occurred on the last attempt to delete this Certificate.
     * This property is set only if the Certificate is in the DeleteFailed state.
     *
     * @return the deleteCertificateError value.
     */
    @Generated
    public DeleteBatchCertificateError getDeleteCertificateError() {
        return this.deleteCertificateError;
    }

    /**
     * Get the data property: The base64-encoded contents of the Certificate. The maximum size is 10KB.
     *
     * @return the data value.
     */
    @Generated
    public String getData() {
        return this.data;
    }

    /**
     * Get the certificateFormat property: The format of the Certificate data.
     *
     * @return the certificateFormat value.
     */
    @Generated
    public BatchCertificateFormat getCertificateFormat() {
        return this.certificateFormat;
    }

    /**
     * Set the certificateFormat property: The format of the Certificate data.
     *
     * @param certificateFormat the certificateFormat value to set.
     * @return the BatchCertificate object itself.
     */
    @Generated
    public BatchCertificate setCertificateFormat(BatchCertificateFormat certificateFormat) {
        this.certificateFormat = certificateFormat;
        return this;
    }

    /**
     * Get the password property: The password to access the Certificate's private key. This must be omitted if the
     * Certificate format is cer.
     *
     * @return the password value.
     */
    @Generated
    public String getPassword() {
        return this.password;
    }

    /**
     * Set the password property: The password to access the Certificate's private key. This must be omitted if the
     * Certificate format is cer.
     *
     * @param password the password value to set.
     * @return the BatchCertificate object itself.
     */
    @Generated
    public BatchCertificate setPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        jsonWriter.writeStringField("thumbprintAlgorithm", this.thumbprintAlgorithm);
        jsonWriter.writeStringField("data", this.data);
        jsonWriter.writeStringField("certificateFormat",
            this.certificateFormat == null ? null : this.certificateFormat.toString());
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchCertificate from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchCertificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchCertificate.
     */
    @Generated
    public static BatchCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String thumbprint = null;
            String thumbprintAlgorithm = null;
            String data = null;
            String url = null;
            BatchCertificateState state = null;
            OffsetDateTime stateTransitionTime = null;
            BatchCertificateState previousState = null;
            OffsetDateTime previousStateTransitionTime = null;
            String publicData = null;
            DeleteBatchCertificateError deleteCertificateError = null;
            BatchCertificateFormat certificateFormat = null;
            String password = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("thumbprint".equals(fieldName)) {
                    thumbprint = reader.getString();
                } else if ("thumbprintAlgorithm".equals(fieldName)) {
                    thumbprintAlgorithm = reader.getString();
                } else if ("data".equals(fieldName)) {
                    data = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("state".equals(fieldName)) {
                    state = BatchCertificateState.fromString(reader.getString());
                } else if ("stateTransitionTime".equals(fieldName)) {
                    stateTransitionTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("previousState".equals(fieldName)) {
                    previousState = BatchCertificateState.fromString(reader.getString());
                } else if ("previousStateTransitionTime".equals(fieldName)) {
                    previousStateTransitionTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("publicData".equals(fieldName)) {
                    publicData = reader.getString();
                } else if ("deleteCertificateError".equals(fieldName)) {
                    deleteCertificateError = DeleteBatchCertificateError.fromJson(reader);
                } else if ("certificateFormat".equals(fieldName)) {
                    certificateFormat = BatchCertificateFormat.fromString(reader.getString());
                } else if ("password".equals(fieldName)) {
                    password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            BatchCertificate deserializedBatchCertificate = new BatchCertificate(thumbprint, thumbprintAlgorithm, data);
            deserializedBatchCertificate.url = url;
            deserializedBatchCertificate.state = state;
            deserializedBatchCertificate.stateTransitionTime = stateTransitionTime;
            deserializedBatchCertificate.previousState = previousState;
            deserializedBatchCertificate.previousStateTransitionTime = previousStateTransitionTime;
            deserializedBatchCertificate.publicData = publicData;
            deserializedBatchCertificate.deleteCertificateError = deleteCertificateError;
            deserializedBatchCertificate.certificateFormat = certificateFormat;
            deserializedBatchCertificate.password = password;
            return deserializedBatchCertificate;
        });
    }
}
