// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The instance view status.
 */
@Immutable
public final class InstanceViewStatus implements JsonSerializable<InstanceViewStatus> {

    /*
     * The status code.
     */
    @Generated
    private String code;

    /*
     * The localized label for the status.
     */
    @Generated
    private String displayStatus;

    /*
     * Level code.
     */
    @Generated
    private StatusLevelTypes level;

    /*
     * The detailed status message.
     */
    @Generated
    private String message;

    /*
     * The time of the status.
     */
    @Generated
    private OffsetDateTime time;

    /**
     * Creates an instance of InstanceViewStatus class.
     */
    @Generated
    private InstanceViewStatus() {
    }

    /**
     * Get the code property: The status code.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the displayStatus property: The localized label for the status.
     *
     * @return the displayStatus value.
     */
    @Generated
    public String getDisplayStatus() {
        return this.displayStatus;
    }

    /**
     * Get the level property: Level code.
     *
     * @return the level value.
     */
    @Generated
    public StatusLevelTypes getLevel() {
        return this.level;
    }

    /**
     * Get the message property: The detailed status message.
     *
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the time property: The time of the status.
     *
     * @return the time value.
     */
    @Generated
    public OffsetDateTime getTime() {
        return this.time;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("displayStatus", this.displayStatus);
        jsonWriter.writeStringField("level", this.level == null ? null : this.level.toString());
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("time",
            this.time == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.time));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceViewStatus from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceViewStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceViewStatus.
     */
    @Generated
    public static InstanceViewStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceViewStatus deserializedInstanceViewStatus = new InstanceViewStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code".equals(fieldName)) {
                    deserializedInstanceViewStatus.code = reader.getString();
                } else if ("displayStatus".equals(fieldName)) {
                    deserializedInstanceViewStatus.displayStatus = reader.getString();
                } else if ("level".equals(fieldName)) {
                    deserializedInstanceViewStatus.level = StatusLevelTypes.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedInstanceViewStatus.message = reader.getString();
                } else if ("time".equals(fieldName)) {
                    deserializedInstanceViewStatus.time = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedInstanceViewStatus;
        });
    }
}
