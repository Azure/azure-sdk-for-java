// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Contains information about the execution of a Job in the Azure Batch service. */
@Immutable
public final class JobExecutionInformation {

    /*
     * The start time of the Job. This is the time at which the Job was created.
     */
    @Generated
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The completion time of the Job. This property is set only if the Job is in the completed state.
     */
    @Generated
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is
     * assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the
     * Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId
     * element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this
     * property contains the ID of that auto Pool.
     */
    @Generated
    @JsonProperty(value = "poolId")
    private String poolId;

    /*
     * Details of any error encountered by the service in starting the Job. This property is not set if there was no
     * error starting the Job.
     */
    @Generated
    @JsonProperty(value = "schedulingError")
    private JobSchedulingError schedulingError;

    /*
     * A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If
     * the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task
     * completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its
     * maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule
     * terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in
     * the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and
     * a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is
     * a user-defined reason specified in a call to the 'Terminate a Job' operation.
     */
    @Generated
    @JsonProperty(value = "terminateReason")
    private String terminateReason;

    /**
     * Creates an instance of JobExecutionInformation class.
     *
     * @param startTime the startTime value to set.
     */
    @Generated
    @JsonCreator
    private JobExecutionInformation(@JsonProperty(value = "startTime") OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * Get the startTime property: The start time of the Job. This is the time at which the Job was created.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The completion time of the Job. This property is set only if the Job is in the
     * completed state.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Get the poolId property: The ID of the Pool to which this Job is assigned. This element contains the actual Pool
     * where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which
     * contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also
     * contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto
     * Pool, and this property contains the ID of that auto Pool.
     *
     * @return the poolId value.
     */
    @Generated
    public String getPoolId() {
        return this.poolId;
    }

    /**
     * Get the schedulingError property: Details of any error encountered by the service in starting the Job. This
     * property is not set if there was no error starting the Job.
     *
     * @return the schedulingError value.
     */
    @Generated
    public JobSchedulingError getSchedulingError() {
        return this.schedulingError;
    }

    /**
     * Get the terminateReason property: A string describing the reason the Job ended. This property is set only if the
     * Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete
     * - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job
     * reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the
     * schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all
     * Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to
     * performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of
     * terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation.
     *
     * @return the terminateReason value.
     */
    @Generated
    public String getTerminateReason() {
        return this.terminateReason;
    }
}
