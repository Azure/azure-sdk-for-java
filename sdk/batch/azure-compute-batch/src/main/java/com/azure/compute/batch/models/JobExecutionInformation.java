// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Contains information about the execution of a Job in the Azure Batch service. */
@Fluent
public final class JobExecutionInformation {
    /*
     * This is the time at which the Job was created.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * This property is set only if the Job is in the completed state.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * This element contains the actual Pool where the Job is assigned. When you get
     * Job details from the service, they also contain a poolInfo element, which
     * contains the Pool configuration data from when the Job was added or updated.
     * That poolInfo element may also contain a poolId element. If it does, the two
     * IDs are the same. If it does not, it means the Job ran on an auto Pool, and
     * this property contains the ID of that auto Pool.
     */
    @JsonProperty(value = "poolId")
    private String poolId;

    /*
     * This property is not set if there was no error starting the Job.
     */
    @JsonProperty(value = "schedulingError")
    private JobSchedulingError schedulingError;

    /*
     * This property is set only if the Job is in the completed state. If the Batch
     * service terminates the Job, it sets the reason as follows: JMComplete - the Job
     * Manager Task completed, and killJobOnCompletion was set to true.
     * MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint.
     * TerminateJobSchedule - the Job ran as part of a schedule, and the schedule
     * terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to
     * terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's
     * onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in
     * the Job failed with an exit condition that specified a jobAction of
     * terminatejob. Any other string is a user-defined reason specified in a call to
     * the 'Terminate a Job' operation.
     */
    @JsonProperty(value = "terminateReason")
    private String terminateReason;

    /**
     * Creates an instance of JobExecutionInformation class.
     *
     * @param startTime the startTime value to set.
     */
    @JsonCreator
    public JobExecutionInformation(@JsonProperty(value = "startTime", required = true) OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * Get the startTime property: This is the time at which the Job was created.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: This property is set only if the Job is in the completed state.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: This property is set only if the Job is in the completed state.
     *
     * @param endTime the endTime value to set.
     * @return the JobExecutionInformation object itself.
     */
    public JobExecutionInformation setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the poolId property: This element contains the actual Pool where the Job is assigned. When you get Job
     * details from the service, they also contain a poolInfo element, which contains the Pool configuration data from
     * when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two
     * IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that
     * auto Pool.
     *
     * @return the poolId value.
     */
    public String getPoolId() {
        return this.poolId;
    }

    /**
     * Set the poolId property: This element contains the actual Pool where the Job is assigned. When you get Job
     * details from the service, they also contain a poolInfo element, which contains the Pool configuration data from
     * when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two
     * IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that
     * auto Pool.
     *
     * @param poolId the poolId value to set.
     * @return the JobExecutionInformation object itself.
     */
    public JobExecutionInformation setPoolId(String poolId) {
        this.poolId = poolId;
        return this;
    }

    /**
     * Get the schedulingError property: This property is not set if there was no error starting the Job.
     *
     * @return the schedulingError value.
     */
    public JobSchedulingError getSchedulingError() {
        return this.schedulingError;
    }

    /**
     * Set the schedulingError property: This property is not set if there was no error starting the Job.
     *
     * @param schedulingError the schedulingError value to set.
     * @return the JobExecutionInformation object itself.
     */
    public JobExecutionInformation setSchedulingError(JobSchedulingError schedulingError) {
        this.schedulingError = schedulingError;
        return this;
    }

    /**
     * Get the terminateReason property: This property is set only if the Job is in the completed state. If the Batch
     * service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and
     * killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint.
     * TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the
     * Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed -
     * the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an
     * exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in
     * a call to the 'Terminate a Job' operation.
     *
     * @return the terminateReason value.
     */
    public String getTerminateReason() {
        return this.terminateReason;
    }

    /**
     * Set the terminateReason property: This property is set only if the Job is in the completed state. If the Batch
     * service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and
     * killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint.
     * TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the
     * Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed -
     * the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an
     * exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in
     * a call to the 'Terminate a Job' operation.
     *
     * @param terminateReason the terminateReason value to set.
     * @return the JobExecutionInformation object itself.
     */
    public JobExecutionInformation setTerminateReason(String terminateReason) {
        this.terminateReason = terminateReason;
        return this;
    }
}
