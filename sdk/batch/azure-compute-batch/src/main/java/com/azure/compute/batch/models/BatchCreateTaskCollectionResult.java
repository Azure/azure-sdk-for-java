// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of creating a collection of Tasks to a Job.
 */
@Immutable
public final class BatchCreateTaskCollectionResult implements JsonSerializable<BatchCreateTaskCollectionResult> {
    /*
     * The results of the create Task collection operation.
     */
    @Generated
    private List<BatchTaskCreateResult> value;

    /**
     * Creates an instance of BatchCreateTaskCollectionResult class.
     */
    @Generated
    private BatchCreateTaskCollectionResult() {
    }

    /**
     * Get the value property: The results of the create Task collection operation.
     * 
     * @return the value value.
     */
    @Generated
    public List<BatchTaskCreateResult> getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchCreateTaskCollectionResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchCreateTaskCollectionResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchCreateTaskCollectionResult.
     */
    @Generated
    public static BatchCreateTaskCollectionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchCreateTaskCollectionResult deserializedBatchCreateTaskCollectionResult
                = new BatchCreateTaskCollectionResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<BatchTaskCreateResult> value
                        = reader.readArray(reader1 -> BatchTaskCreateResult.fromJson(reader1));
                    deserializedBatchCreateTaskCollectionResult.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchCreateTaskCollectionResult;
        });
    }
}
