// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.AllocationState;
import com.azure.compute.batch.models.BatchNodeCommunicationMode;
import com.azure.compute.batch.models.BatchNodeFillType;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolState;
import com.azure.compute.batch.models.BatchTaskSchedulingPolicy;
import com.azure.compute.batch.models.CachingType;
import com.azure.compute.batch.models.DiffDiskPlacement;
import com.azure.compute.batch.models.DiffDiskSettings;
import com.azure.compute.batch.models.ImageReference;
import com.azure.compute.batch.models.ManagedDisk;
import com.azure.compute.batch.models.OSDisk;
import com.azure.compute.batch.models.StorageAccountType;
import com.azure.compute.batch.models.VirtualMachineConfiguration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class AddAVirtualMachineConfigurationPoolWithOSDiskTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testAddAVirtualMachineConfigurationPoolWithOSDiskTests() {
        // method invocation
        BatchPool response = batchClient.getPool("mypool001", null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("mypool001", response.getId());
        // verify property "url"
        Assertions.assertEquals("http://localhost:20302/testaccount1tls/pools/mypool001", response.getUrl());
        // verify property "eTag"
        Assertions.assertEquals("0x8DBA3B4E91CD7B7", response.getETag());
        // verify property "lastModified"
        Assertions.assertNotNull(response.getLastModified());
        // verify property "creationTime"
        Assertions.assertNotNull(response.getCreationTime());
        // verify property "state"
        Assertions.assertEquals(BatchPoolState.ACTIVE, response.getState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(response.getStateTransitionTime());
        // verify property "allocationState"
        Assertions.assertEquals(AllocationState.STEADY, response.getAllocationState());
        // verify property "allocationStateTransitionTime"
        Assertions.assertNotNull(response.getAllocationStateTransitionTime());
        // verify property "vmSize"
        Assertions.assertEquals("standard_d2s_v3", response.getVmSize());
        // verify property "virtualMachineConfiguration"
        VirtualMachineConfiguration responseVirtualMachineConfiguration = response.getVirtualMachineConfiguration();
        Assertions.assertNotNull(responseVirtualMachineConfiguration);
        ImageReference responseVirtualMachineConfigurationImageReference
            = responseVirtualMachineConfiguration.getImageReference();
        Assertions.assertNotNull(responseVirtualMachineConfigurationImageReference);
        Assertions.assertEquals("Canonical", responseVirtualMachineConfigurationImageReference.getPublisher());
        Assertions.assertEquals("0001-com-ubuntu-server-focal",
            responseVirtualMachineConfigurationImageReference.getOffer());
        Assertions.assertEquals("20_04-lts", responseVirtualMachineConfigurationImageReference.getSku());
        Assertions.assertEquals("latest", responseVirtualMachineConfigurationImageReference.getVersion());
        Assertions.assertEquals("batch.node.ubuntu 20.04", responseVirtualMachineConfiguration.getNodeAgentSkuId());
        OSDisk responseVirtualMachineConfigurationOsDisk = responseVirtualMachineConfiguration.getOsDisk();
        Assertions.assertNotNull(responseVirtualMachineConfigurationOsDisk);
        DiffDiskSettings responseVirtualMachineConfigurationOsDiskEphemeralOSDiskSettings
            = responseVirtualMachineConfigurationOsDisk.getEphemeralOSDiskSettings();
        Assertions.assertNotNull(responseVirtualMachineConfigurationOsDiskEphemeralOSDiskSettings);
        Assertions.assertEquals(DiffDiskPlacement.CACHE_DISK,
            responseVirtualMachineConfigurationOsDiskEphemeralOSDiskSettings.getPlacement());
        Assertions.assertEquals(CachingType.READ_WRITE, responseVirtualMachineConfigurationOsDisk.getCaching());
        Assertions.assertEquals(100, responseVirtualMachineConfigurationOsDisk.getDiskSizeGB());
        ManagedDisk responseVirtualMachineConfigurationOsDiskManagedDisk
            = responseVirtualMachineConfigurationOsDisk.getManagedDisk();
        Assertions.assertNotNull(responseVirtualMachineConfigurationOsDiskManagedDisk);
        Assertions.assertEquals(StorageAccountType.STANDARD_SSDLRS,
            responseVirtualMachineConfigurationOsDiskManagedDisk.getStorageAccountType());
        // verify property "resizeTimeout"
        Assertions.assertNotNull(response.getResizeTimeout());
        // verify property "currentDedicatedNodes"
        Assertions.assertEquals(1, response.getCurrentDedicatedNodes());
        // verify property "currentLowPriorityNodes"
        Assertions.assertEquals(0, response.getCurrentLowPriorityNodes());
        // verify property "targetDedicatedNodes"
        Assertions.assertEquals(1, response.getTargetDedicatedNodes());
        // verify property "targetLowPriorityNodes"
        Assertions.assertEquals(0, response.getTargetLowPriorityNodes());
        // verify property "enableAutoScale"
        Assertions.assertEquals(false, response.isEnableAutoScale());
        // verify property "enableInterNodeCommunication"
        Assertions.assertEquals(false, response.isEnableInterNodeCommunication());
        // verify property "taskSlotsPerNode"
        Assertions.assertEquals(1, response.getTaskSlotsPerNode());
        // verify property "taskSchedulingPolicy"
        BatchTaskSchedulingPolicy responseTaskSchedulingPolicy = response.getTaskSchedulingPolicy();
        Assertions.assertNotNull(responseTaskSchedulingPolicy);
        Assertions.assertEquals(BatchNodeFillType.SPREAD, responseTaskSchedulingPolicy.getNodeFillType());
        // verify property "currentNodeCommunicationMode"
        Assertions.assertEquals(BatchNodeCommunicationMode.CLASSIC, response.getCurrentNodeCommunicationMode());
    }
}
