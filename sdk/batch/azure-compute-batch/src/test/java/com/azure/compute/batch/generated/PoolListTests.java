// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.AllocationState;
import com.azure.compute.batch.models.AutoUserScope;
import com.azure.compute.batch.models.AutoUserSpecification;
import com.azure.compute.batch.models.BatchNodeFillType;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolState;
import com.azure.compute.batch.models.BatchStartTask;
import com.azure.compute.batch.models.BatchTaskSchedulingPolicy;
import com.azure.compute.batch.models.ElevationLevel;
import com.azure.compute.batch.models.ImageReference;
import com.azure.compute.batch.models.ListBatchPoolsOptions;
import com.azure.compute.batch.models.UserIdentity;
import com.azure.compute.batch.models.VirtualMachineConfiguration;
import com.azure.core.http.rest.PagedIterable;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class PoolListTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testPoolListTests() {
        // method invocation
        PagedIterable<BatchPool> response = batchClient.listPools(new ListBatchPoolsOptions());

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        BatchPool firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("testPool", firstItem.getId());
        // verify property "url"
        Assertions.assertEquals("https://accountname.region.batch.azure.com/pools/testPool", firstItem.getUrl());
        // verify property "eTag"
        Assertions.assertEquals("0x8D4123BEF87D233", firstItem.getETag());
        // verify property "lastModified"
        Assertions.assertNotNull(firstItem.getLastModified());
        // verify property "creationTime"
        Assertions.assertNotNull(firstItem.getCreationTime());
        // verify property "state"
        Assertions.assertEquals(BatchPoolState.ACTIVE, firstItem.getState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(firstItem.getStateTransitionTime());
        // verify property "allocationState"
        Assertions.assertEquals(AllocationState.STEADY, firstItem.getAllocationState());
        // verify property "allocationStateTransitionTime"
        Assertions.assertNotNull(firstItem.getAllocationStateTransitionTime());
        // verify property "vmSize"
        Assertions.assertEquals("small", firstItem.getVmSize());
        // verify property "virtualMachineConfiguration"
        VirtualMachineConfiguration firstItemVirtualMachineConfiguration = firstItem.getVirtualMachineConfiguration();
        Assertions.assertNotNull(firstItemVirtualMachineConfiguration);
        ImageReference firstItemVirtualMachineConfigurationImageReference
            = firstItemVirtualMachineConfiguration.getImageReference();
        Assertions.assertNotNull(firstItemVirtualMachineConfigurationImageReference);
        Assertions.assertEquals("MicrosoftWindowsServer",
            firstItemVirtualMachineConfigurationImageReference.getPublisher());
        Assertions.assertEquals("WindowsServer", firstItemVirtualMachineConfigurationImageReference.getOffer());
        Assertions.assertEquals("2016-datacenter-smalldisk",
            firstItemVirtualMachineConfigurationImageReference.getSku());
        Assertions.assertEquals("latest", firstItemVirtualMachineConfigurationImageReference.getVersion());
        Assertions.assertEquals("batch.node.windows amd64", firstItemVirtualMachineConfiguration.getNodeAgentSkuId());
        // verify property "resizeTimeout"
        Assertions.assertNotNull(firstItem.getResizeTimeout());
        // verify property "currentDedicatedNodes"
        Assertions.assertEquals(3, firstItem.getCurrentDedicatedNodes());
        // verify property "currentLowPriorityNodes"
        Assertions.assertEquals(0, firstItem.getCurrentLowPriorityNodes());
        // verify property "targetDedicatedNodes"
        Assertions.assertEquals(3, firstItem.getTargetDedicatedNodes());
        // verify property "targetLowPriorityNodes"
        Assertions.assertEquals(0, firstItem.getTargetLowPriorityNodes());
        // verify property "enableAutoScale"
        Assertions.assertEquals(false, firstItem.isEnableAutoScale());
        // verify property "enableInterNodeCommunication"
        Assertions.assertEquals(false, firstItem.isEnableInterNodeCommunication());
        // verify property "startTask"
        BatchStartTask firstItemStartTask = firstItem.getStartTask();
        Assertions.assertNotNull(firstItemStartTask);
        Assertions.assertEquals("cmd /c echo hello", firstItemStartTask.getCommandLine());
        UserIdentity firstItemStartTaskUserIdentity = firstItemStartTask.getUserIdentity();
        Assertions.assertNotNull(firstItemStartTaskUserIdentity);
        AutoUserSpecification firstItemStartTaskUserIdentityAutoUser = firstItemStartTaskUserIdentity.getAutoUser();
        Assertions.assertNotNull(firstItemStartTaskUserIdentityAutoUser);
        Assertions.assertEquals(AutoUserScope.TASK, firstItemStartTaskUserIdentityAutoUser.getScope());
        Assertions.assertEquals(ElevationLevel.NON_ADMIN, firstItemStartTaskUserIdentityAutoUser.getElevationLevel());
        Assertions.assertEquals(0, firstItemStartTask.getMaxTaskRetryCount());
        Assertions.assertEquals(false, firstItemStartTask.isWaitForSuccess());
        // verify property "taskSlotsPerNode"
        Assertions.assertEquals(1, firstItem.getTaskSlotsPerNode());
        // verify property "taskSchedulingPolicy"
        BatchTaskSchedulingPolicy firstItemTaskSchedulingPolicy = firstItem.getTaskSchedulingPolicy();
        Assertions.assertNotNull(firstItemTaskSchedulingPolicy);
        Assertions.assertEquals(BatchNodeFillType.SPREAD, firstItemTaskSchedulingPolicy.getNodeFillType());
    }
}
