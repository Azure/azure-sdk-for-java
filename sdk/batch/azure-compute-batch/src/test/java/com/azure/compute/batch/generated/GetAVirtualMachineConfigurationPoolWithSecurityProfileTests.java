// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.AllocationState;
import com.azure.compute.batch.models.BatchNodeCommunicationMode;
import com.azure.compute.batch.models.BatchNodeFillType;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolState;
import com.azure.compute.batch.models.BatchTaskSchedulingPolicy;
import com.azure.compute.batch.models.ImageReference;
import com.azure.compute.batch.models.SecurityProfile;
import com.azure.compute.batch.models.SecurityTypes;
import com.azure.compute.batch.models.UefiSettings;
import com.azure.compute.batch.models.VirtualMachineConfiguration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GetAVirtualMachineConfigurationPoolWithSecurityProfileTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testGetAVirtualMachineConfigurationPoolWithSecurityProfileTests() {
        // method invocation
        BatchPool response = batchClient.getPool("mypool001", null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("mypool001", response.getId());
        // verify property "url"
        Assertions.assertEquals("https://account.region.batch.azure.com/pools/pool", response.getUrl());
        // verify property "eTag"
        Assertions.assertEquals("0x8DB6CA2DFF530D1", response.getETag());
        // verify property "lastModified"
        Assertions.assertNotNull(response.getLastModified());
        // verify property "creationTime"
        Assertions.assertNotNull(response.getCreationTime());
        // verify property "state"
        Assertions.assertEquals(BatchPoolState.ACTIVE, response.getState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(response.getStateTransitionTime());
        // verify property "allocationState"
        Assertions.assertEquals(AllocationState.STEADY, response.getAllocationState());
        // verify property "allocationStateTransitionTime"
        Assertions.assertNotNull(response.getAllocationStateTransitionTime());
        // verify property "vmSize"
        Assertions.assertEquals("standard_dc2s_v2", response.getVmSize());
        // verify property "virtualMachineConfiguration"
        VirtualMachineConfiguration responseVirtualMachineConfiguration = response.getVirtualMachineConfiguration();
        Assertions.assertNotNull(responseVirtualMachineConfiguration);
        ImageReference responseVirtualMachineConfigurationImageReference
            = responseVirtualMachineConfiguration.getImageReference();
        Assertions.assertNotNull(responseVirtualMachineConfigurationImageReference);
        Assertions.assertEquals("Canonical", responseVirtualMachineConfigurationImageReference.getPublisher());
        Assertions.assertEquals("UbuntuServer", responseVirtualMachineConfigurationImageReference.getOffer());
        Assertions.assertEquals("18_04-lts-gen2", responseVirtualMachineConfigurationImageReference.getSku());
        Assertions.assertEquals("latest", responseVirtualMachineConfigurationImageReference.getVersion());
        Assertions.assertEquals("batch.node.ubuntu 18.04", responseVirtualMachineConfiguration.getNodeAgentSkuId());
        SecurityProfile responseVirtualMachineConfigurationSecurityProfile
            = responseVirtualMachineConfiguration.getSecurityProfile();
        Assertions.assertNotNull(responseVirtualMachineConfigurationSecurityProfile);
        Assertions.assertEquals(true, responseVirtualMachineConfigurationSecurityProfile.isEncryptionAtHost());
        Assertions.assertEquals(SecurityTypes.TRUSTED_LAUNCH,
            responseVirtualMachineConfigurationSecurityProfile.getSecurityType());
        UefiSettings responseVirtualMachineConfigurationSecurityProfileUefiSettings
            = responseVirtualMachineConfigurationSecurityProfile.getUefiSettings();
        Assertions.assertNotNull(responseVirtualMachineConfigurationSecurityProfileUefiSettings);
        Assertions.assertEquals(false,
            responseVirtualMachineConfigurationSecurityProfileUefiSettings.isSecureBootEnabled());
        // verify property "resizeTimeout"
        Assertions.assertNotNull(response.getResizeTimeout());
        // verify property "currentDedicatedNodes"
        Assertions.assertEquals(1, response.getCurrentDedicatedNodes());
        // verify property "currentLowPriorityNodes"
        Assertions.assertEquals(0, response.getCurrentLowPriorityNodes());
        // verify property "targetDedicatedNodes"
        Assertions.assertEquals(1, response.getTargetDedicatedNodes());
        // verify property "targetLowPriorityNodes"
        Assertions.assertEquals(0, response.getTargetLowPriorityNodes());
        // verify property "enableAutoScale"
        Assertions.assertEquals(false, response.isEnableAutoScale());
        // verify property "enableInterNodeCommunication"
        Assertions.assertEquals(false, response.isEnableInterNodeCommunication());
        // verify property "taskSlotsPerNode"
        Assertions.assertEquals(1, response.getTaskSlotsPerNode());
        // verify property "taskSchedulingPolicy"
        BatchTaskSchedulingPolicy responseTaskSchedulingPolicy = response.getTaskSchedulingPolicy();
        Assertions.assertNotNull(responseTaskSchedulingPolicy);
        Assertions.assertEquals(BatchNodeFillType.SPREAD, responseTaskSchedulingPolicy.getNodeFillType());
        // verify property "currentNodeCommunicationMode"
        Assertions.assertEquals(BatchNodeCommunicationMode.CLASSIC, response.getCurrentNodeCommunicationMode());
    }
}
