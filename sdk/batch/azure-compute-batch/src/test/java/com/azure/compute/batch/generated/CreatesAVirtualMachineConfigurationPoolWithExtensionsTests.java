// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.BatchNodeCommunicationMode;
import com.azure.compute.batch.models.BatchNodeFillType;
import com.azure.compute.batch.models.BatchPoolCreateContent;
import com.azure.compute.batch.models.BatchTaskSchedulingPolicy;
import com.azure.compute.batch.models.ImageReference;
import com.azure.compute.batch.models.MetadataItem;
import com.azure.compute.batch.models.VMExtension;
import com.azure.compute.batch.models.VirtualMachineConfiguration;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class CreatesAVirtualMachineConfigurationPoolWithExtensionsTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testCreatesAVirtualMachineConfigurationPoolWithExtensionsTests() {
        // method invocation
        batchClient.createPool(new BatchPoolCreateContent("pool2", "standard_a1")
            .setVirtualMachineConfiguration(
                new VirtualMachineConfiguration(
                    new ImageReference().setPublisher("Canonical")
                        .setOffer("0001-com-ubuntu-server-focal")
                        .setSku("20_04-lts"),
                    "batch.node.ubuntu 20.04").setExtensions(
                        Arrays.asList(new VMExtension("batchextension1", "Microsoft.Azure.KeyVault", "KeyVaultForLinux")
                            .setTypeHandlerVersion("2.0")
                            .setAutoUpgradeMinorVersion(true)
                            .setEnableAutomaticUpgrade(true)
                            .setSettings(mapOf("secretsManagementSettingsKey", "fakeTokenPlaceholder",
                                "authenticationSettingsKey", "fakeTokenPlaceholder")))))
            .setResizeTimeout(Duration.parse("PT15M"))
            .setTargetDedicatedNodes(5)
            .setTargetLowPriorityNodes(0)
            .setEnableAutoScale(false)
            .setEnableInterNodeCommunication(true)
            .setTaskSlotsPerNode(3)
            .setTaskSchedulingPolicy(new BatchTaskSchedulingPolicy(BatchNodeFillType.SPREAD))
            .setMetadata(Arrays.asList(new MetadataItem("myproperty", "myvalue")))
            .setTargetNodeCommunicationMode(BatchNodeCommunicationMode.SIMPLIFIED), null);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
