// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.BatchJob;
import com.azure.compute.batch.models.BatchJobConstraints;
import com.azure.compute.batch.models.BatchJobExecutionInfo;
import com.azure.compute.batch.models.BatchJobState;
import com.azure.compute.batch.models.BatchPoolInfo;
import com.azure.compute.batch.models.ListBatchJobsOptions;
import com.azure.compute.batch.models.OnAllBatchTasksComplete;
import com.azure.compute.batch.models.OnBatchTaskFailure;
import com.azure.core.http.rest.PagedIterable;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class JobListTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testJobListTests() {
        // method invocation
        PagedIterable<BatchJob> response = batchClient.listJobs(new ListBatchJobsOptions());

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        BatchJob firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("jobId", firstItem.getId());
        // verify property "usesTaskDependencies"
        Assertions.assertEquals(false, firstItem.isUsesTaskDependencies());
        // verify property "url"
        Assertions.assertEquals("https://account.region.batch.azure.com/jobs/jobId", firstItem.getUrl());
        // verify property "eTag"
        Assertions.assertEquals("0x8D4100FC46D5BF4", firstItem.getETag());
        // verify property "lastModified"
        Assertions.assertNotNull(firstItem.getLastModified());
        // verify property "creationTime"
        Assertions.assertNotNull(firstItem.getCreationTime());
        // verify property "state"
        Assertions.assertEquals(BatchJobState.ACTIVE, firstItem.getState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(firstItem.getStateTransitionTime());
        // verify property "previousState"
        Assertions.assertEquals(BatchJobState.DISABLED, firstItem.getPreviousState());
        // verify property "previousStateTransitionTime"
        Assertions.assertNotNull(firstItem.getPreviousStateTransitionTime());
        // verify property "priority"
        Assertions.assertEquals(0, firstItem.getPriority());
        // verify property "allowTaskPreemption"
        Assertions.assertEquals(false, firstItem.isAllowTaskPreemption());
        // verify property "maxParallelTasks"
        Assertions.assertEquals(-1, firstItem.getMaxParallelTasks());
        // verify property "constraints"
        BatchJobConstraints firstItemConstraints = firstItem.getConstraints();
        Assertions.assertNotNull(firstItemConstraints);
        Assertions.assertNotNull(firstItemConstraints.getMaxWallClockTime());
        Assertions.assertEquals(0, firstItemConstraints.getMaxTaskRetryCount());
        // verify property "poolInfo"
        BatchPoolInfo firstItemPoolInfo = firstItem.getPoolInfo();
        Assertions.assertNotNull(firstItemPoolInfo);
        Assertions.assertEquals("poolId", firstItemPoolInfo.getPoolId());
        // verify property "onAllTasksComplete"
        Assertions.assertEquals(OnAllBatchTasksComplete.NO_ACTION, firstItem.getOnAllTasksComplete());
        // verify property "onTaskFailure"
        Assertions.assertEquals(OnBatchTaskFailure.NO_ACTION, firstItem.getOnTaskFailure());
        // verify property "executionInfo"
        BatchJobExecutionInfo firstItemExecutionInfo = firstItem.getExecutionInfo();
        Assertions.assertNotNull(firstItemExecutionInfo);
        Assertions.assertNotNull(firstItemExecutionInfo.getStartTime());
        Assertions.assertEquals("poolId", firstItemExecutionInfo.getPoolId());
    }
}
