// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.AutoUserScope;
import com.azure.compute.batch.models.AutoUserSpecification;
import com.azure.compute.batch.models.BatchNode;
import com.azure.compute.batch.models.BatchNodeAgentInfo;
import com.azure.compute.batch.models.BatchNodeState;
import com.azure.compute.batch.models.BatchStartTask;
import com.azure.compute.batch.models.BatchStartTaskInfo;
import com.azure.compute.batch.models.BatchStartTaskState;
import com.azure.compute.batch.models.ElevationLevel;
import com.azure.compute.batch.models.ListBatchNodesOptions;
import com.azure.compute.batch.models.SchedulingState;
import com.azure.compute.batch.models.UserIdentity;
import com.azure.core.http.rest.PagedIterable;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class NodeListTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testNodeListTests() {
        // method invocation
        PagedIterable<BatchNode> response = batchClient.listNodes("poolId", new ListBatchNodesOptions());

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        BatchNode firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "id"
        Assertions.assertEquals("tvm-1695681911_1-20161122t193202z", firstItem.getId());
        // verify property "url"
        Assertions.assertEquals(
            "https://account.region.batch.azure.com/pools/poolId/nodes/tvm-1695681911_1-20161122t193202z",
            firstItem.getUrl());
        // verify property "state"
        Assertions.assertEquals(BatchNodeState.IDLE, firstItem.getState());
        // verify property "schedulingState"
        Assertions.assertEquals(SchedulingState.ENABLED, firstItem.getSchedulingState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(firstItem.getStateTransitionTime());
        // verify property "lastBootTime"
        Assertions.assertNotNull(firstItem.getLastBootTime());
        // verify property "allocationTime"
        Assertions.assertNotNull(firstItem.getAllocationTime());
        // verify property "ipAddress"
        Assertions.assertEquals("1.1.1.1", firstItem.getIpAddress());
        // verify property "affinityId"
        Assertions.assertEquals("TVM:tvm-1695681911_1-20161122t193202z", firstItem.getAffinityId());
        // verify property "vmSize"
        Assertions.assertEquals("small", firstItem.getVmSize());
        // verify property "totalTasksRun"
        Assertions.assertEquals(0, firstItem.getTotalTasksRun());
        // verify property "runningTasksCount"
        Assertions.assertEquals(0, firstItem.getRunningTasksCount());
        // verify property "runningTaskSlotsCount"
        Assertions.assertEquals(0, firstItem.getRunningTaskSlotsCount());
        // verify property "totalTasksSucceeded"
        Assertions.assertEquals(0, firstItem.getTotalTasksSucceeded());
        // verify property "startTask"
        BatchStartTask firstItemStartTask = firstItem.getStartTask();
        Assertions.assertNotNull(firstItemStartTask);
        Assertions.assertEquals("cmd /c echo hello", firstItemStartTask.getCommandLine());
        UserIdentity firstItemStartTaskUserIdentity = firstItemStartTask.getUserIdentity();
        Assertions.assertNotNull(firstItemStartTaskUserIdentity);
        AutoUserSpecification firstItemStartTaskUserIdentityAutoUser = firstItemStartTaskUserIdentity.getAutoUser();
        Assertions.assertNotNull(firstItemStartTaskUserIdentityAutoUser);
        Assertions.assertEquals(AutoUserScope.TASK, firstItemStartTaskUserIdentityAutoUser.getScope());
        Assertions.assertEquals(ElevationLevel.NON_ADMIN, firstItemStartTaskUserIdentityAutoUser.getElevationLevel());
        Assertions.assertEquals(0, firstItemStartTask.getMaxTaskRetryCount());
        Assertions.assertEquals(false, firstItemStartTask.isWaitForSuccess());
        // verify property "startTaskInfo"
        BatchStartTaskInfo firstItemStartTaskInfo = firstItem.getStartTaskInfo();
        Assertions.assertNotNull(firstItemStartTaskInfo);
        Assertions.assertEquals(BatchStartTaskState.COMPLETED, firstItemStartTaskInfo.getState());
        Assertions.assertNotNull(firstItemStartTaskInfo.getStartTime());
        Assertions.assertNotNull(firstItemStartTaskInfo.getEndTime());
        Assertions.assertEquals(0, firstItemStartTaskInfo.getExitCode());
        Assertions.assertEquals(0, firstItemStartTaskInfo.getRetryCount());
        // verify property "isDedicated"
        Assertions.assertEquals(true, firstItem.isDedicated());
        // verify property "nodeAgentInfo"
        BatchNodeAgentInfo firstItemNodeAgentInfo = firstItem.getNodeAgentInfo();
        Assertions.assertNotNull(firstItemNodeAgentInfo);
        Assertions.assertEquals("1.2.0.0", firstItemNodeAgentInfo.getVersion());
        Assertions.assertNotNull(firstItemNodeAgentInfo.getLastUpdateTime());
    }
}
