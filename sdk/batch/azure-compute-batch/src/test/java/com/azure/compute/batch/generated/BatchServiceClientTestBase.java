// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.AccountClient;
import com.azure.compute.batch.ApplicationsClient;
import com.azure.compute.batch.BatchServiceClientBuilder;
import com.azure.compute.batch.CertificatesClient;
import com.azure.compute.batch.ComputeNodeExtensionsClient;
import com.azure.compute.batch.ComputeNodesClient;
import com.azure.compute.batch.FileClient;
import com.azure.compute.batch.JobClient;
import com.azure.compute.batch.JobScheduleClient;
import com.azure.compute.batch.PoolClient;
import com.azure.compute.batch.TaskClient;
import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

class BatchServiceClientTestBase extends TestBase {
    protected ApplicationsClient applicationsClient;

    protected PoolClient poolClient;

    protected AccountClient accountClient;

    protected JobClient jobClient;

    protected CertificatesClient certificatesClient;

    protected FileClient fileClient;

    protected JobScheduleClient jobScheduleClient;

    protected TaskClient taskClient;

    protected ComputeNodesClient computeNodesClient;

    protected ComputeNodeExtensionsClient computeNodeExtensionsClient;

    @Override
    protected void beforeTest() {
        BatchServiceClientBuilder applicationsClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            applicationsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            applicationsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            applicationsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        applicationsClient = applicationsClientbuilder.buildApplicationsClient();

        BatchServiceClientBuilder poolClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            poolClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            poolClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            poolClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        poolClient = poolClientbuilder.buildPoolClient();

        BatchServiceClientBuilder accountClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("AZURE_BATCH_ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            accountClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            accountClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            accountClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        accountClient = accountClientbuilder.buildAccountClient();

        BatchServiceClientBuilder jobClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            jobClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            jobClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            jobClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        jobClient = jobClientbuilder.buildJobClient();

        BatchServiceClientBuilder certificatesClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            certificatesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            certificatesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            certificatesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        certificatesClient = certificatesClientbuilder.buildCertificatesClient();

        BatchServiceClientBuilder fileClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            fileClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            fileClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            fileClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        fileClient = fileClientbuilder.buildFileClient();

        BatchServiceClientBuilder jobScheduleClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            jobScheduleClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            jobScheduleClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            jobScheduleClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        jobScheduleClient = jobScheduleClientbuilder.buildJobScheduleClient();

        BatchServiceClientBuilder taskClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            taskClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            taskClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            taskClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        taskClient = taskClientbuilder.buildTaskClient();

        BatchServiceClientBuilder computeNodesClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            computeNodesClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            computeNodesClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            computeNodesClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        computeNodesClient = computeNodesClientbuilder.buildComputeNodesClient();

        BatchServiceClientBuilder computeNodeExtensionsClientbuilder =
                new BatchServiceClientBuilder()
                        .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            computeNodeExtensionsClientbuilder
                    .httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            computeNodeExtensionsClientbuilder
                    .addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            computeNodeExtensionsClientbuilder.credential(new DefaultAzureCredentialBuilder().build());
        }
        computeNodeExtensionsClient = computeNodeExtensionsClientbuilder.buildComputeNodeExtensionsClient();
    }
}
