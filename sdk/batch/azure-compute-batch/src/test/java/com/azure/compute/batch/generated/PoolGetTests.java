// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.compute.batch.generated;

import com.azure.compute.batch.models.AllocationState;
import com.azure.compute.batch.models.AutoUserScope;
import com.azure.compute.batch.models.AutoUserSpecification;
import com.azure.compute.batch.models.BatchNodeFillType;
import com.azure.compute.batch.models.BatchPool;
import com.azure.compute.batch.models.BatchPoolState;
import com.azure.compute.batch.models.BatchStartTask;
import com.azure.compute.batch.models.BatchTaskSchedulingPolicy;
import com.azure.compute.batch.models.ElevationLevel;
import com.azure.compute.batch.models.ImageReference;
import com.azure.compute.batch.models.UserIdentity;
import com.azure.compute.batch.models.VirtualMachineConfiguration;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class PoolGetTests extends BatchClientTestBase {
    @Test
    @Disabled
    public void testPoolGetTests() {
        // method invocation
        BatchPool response = batchClient.getPool("pool", null, null);

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "id"
        Assertions.assertEquals("pool", response.getId());
        // verify property "url"
        Assertions.assertEquals("https://account.region.batch.azure.com/pools/pool", response.getUrl());
        // verify property "eTag"
        Assertions.assertEquals("0x8D413091E739A56", response.getETag());
        // verify property "lastModified"
        Assertions.assertNotNull(response.getLastModified());
        // verify property "creationTime"
        Assertions.assertNotNull(response.getCreationTime());
        // verify property "state"
        Assertions.assertEquals(BatchPoolState.ACTIVE, response.getState());
        // verify property "stateTransitionTime"
        Assertions.assertNotNull(response.getStateTransitionTime());
        // verify property "allocationState"
        Assertions.assertEquals(AllocationState.STEADY, response.getAllocationState());
        // verify property "allocationStateTransitionTime"
        Assertions.assertNotNull(response.getAllocationStateTransitionTime());
        // verify property "vmSize"
        Assertions.assertEquals("standard_a1", response.getVmSize());
        // verify property "virtualMachineConfiguration"
        VirtualMachineConfiguration responseVirtualMachineConfiguration = response.getVirtualMachineConfiguration();
        Assertions.assertNotNull(responseVirtualMachineConfiguration);
        ImageReference responseVirtualMachineConfigurationImageReference
            = responseVirtualMachineConfiguration.getImageReference();
        Assertions.assertNotNull(responseVirtualMachineConfigurationImageReference);
        Assertions.assertEquals("Canonical", responseVirtualMachineConfigurationImageReference.getPublisher());
        Assertions.assertEquals("0001-com-ubuntu-server-focal",
            responseVirtualMachineConfigurationImageReference.getOffer());
        Assertions.assertEquals("20_04-lts", responseVirtualMachineConfigurationImageReference.getSku());
        Assertions.assertEquals("latest", responseVirtualMachineConfigurationImageReference.getVersion());
        Assertions.assertEquals("batch.node.ubuntu 20.04", responseVirtualMachineConfiguration.getNodeAgentSkuId());
        // verify property "resizeTimeout"
        Assertions.assertNotNull(response.getResizeTimeout());
        // verify property "currentDedicatedNodes"
        Assertions.assertEquals(0, response.getCurrentDedicatedNodes());
        // verify property "currentLowPriorityNodes"
        Assertions.assertEquals(0, response.getCurrentLowPriorityNodes());
        // verify property "targetDedicatedNodes"
        Assertions.assertEquals(0, response.getTargetDedicatedNodes());
        // verify property "targetLowPriorityNodes"
        Assertions.assertEquals(0, response.getTargetLowPriorityNodes());
        // verify property "enableAutoScale"
        Assertions.assertEquals(false, response.isEnableAutoScale());
        // verify property "enableInterNodeCommunication"
        Assertions.assertEquals(false, response.isEnableInterNodeCommunication());
        // verify property "startTask"
        BatchStartTask responseStartTask = response.getStartTask();
        Assertions.assertNotNull(responseStartTask);
        Assertions.assertEquals("/bin/bash -c 'echo start task'", responseStartTask.getCommandLine());
        UserIdentity responseStartTaskUserIdentity = responseStartTask.getUserIdentity();
        Assertions.assertNotNull(responseStartTaskUserIdentity);
        AutoUserSpecification responseStartTaskUserIdentityAutoUser = responseStartTaskUserIdentity.getAutoUser();
        Assertions.assertNotNull(responseStartTaskUserIdentityAutoUser);
        Assertions.assertEquals(AutoUserScope.TASK, responseStartTaskUserIdentityAutoUser.getScope());
        Assertions.assertEquals(ElevationLevel.NON_ADMIN, responseStartTaskUserIdentityAutoUser.getElevationLevel());
        Assertions.assertEquals(0, responseStartTask.getMaxTaskRetryCount());
        Assertions.assertEquals(false, responseStartTask.isWaitForSuccess());
        // verify property "taskSlotsPerNode"
        Assertions.assertEquals(1, response.getTaskSlotsPerNode());
        // verify property "taskSchedulingPolicy"
        BatchTaskSchedulingPolicy responseTaskSchedulingPolicy = response.getTaskSchedulingPolicy();
        Assertions.assertNotNull(responseTaskSchedulingPolicy);
        Assertions.assertEquals(BatchNodeFillType.SPREAD, responseTaskSchedulingPolicy.getNodeFillType());
    }
}
