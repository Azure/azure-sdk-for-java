// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databricks.models.CreatedBy;
import com.azure.resourcemanager.databricks.models.ManagedIdentityConfiguration;
import com.azure.resourcemanager.databricks.models.ProvisioningState;
import com.azure.resourcemanager.databricks.models.Sku;
import com.azure.resourcemanager.databricks.models.WorkspaceCustomParameters;
import com.azure.resourcemanager.databricks.models.WorkspaceProviderAuthorization;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** Information about workspace. */
@JsonFlatten
@Fluent
public class WorkspaceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkspaceInner.class);

    /*
     * The SKU of the resource.
     */
    @JsonProperty(value = "sku")
    private Sku sku;

    /*
     * The managed resource group Id.
     */
    @JsonProperty(value = "properties.managedResourceGroupId", required = true)
    private String managedResourceGroupId;

    /*
     * The workspace's custom parameters.
     */
    @JsonProperty(value = "properties.parameters")
    private WorkspaceCustomParameters parameters;

    /*
     * The workspace provisioning state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The blob URI where the UI definition file is located.
     */
    @JsonProperty(value = "properties.uiDefinitionUri")
    private String uiDefinitionUri;

    /*
     * The workspace provider authorizations.
     */
    @JsonProperty(value = "properties.authorizations")
    private List<WorkspaceProviderAuthorization> authorizations;

    /*
     * Indicates the Object ID, PUID and Application ID of entity that created
     * the workspace.
     */
    @JsonProperty(value = "properties.createdBy")
    private CreatedBy createdBy;

    /*
     * Indicates the Object ID, PUID and Application ID of entity that last
     * updated the workspace.
     */
    @JsonProperty(value = "properties.updatedBy")
    private CreatedBy updatedBy;

    /*
     * Specifies the date and time when the workspace is created.
     */
    @JsonProperty(value = "properties.createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * The unique identifier of the databricks workspace in databricks control
     * plane.
     */
    @JsonProperty(value = "properties.workspaceId", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceId;

    /*
     * The workspace URL which is of the format
     * 'adb-{workspaceId}.{random}.azuredatabricks.net'
     */
    @JsonProperty(value = "properties.workspaceUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String workspaceUrl;

    /*
     * The details of Managed Identity of Storage Account
     */
    @JsonProperty(value = "properties.storageAccountIdentity")
    private ManagedIdentityConfiguration storageAccountIdentity;

    /**
     * Get the sku property: The SKU of the resource.
     *
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the resource.
     *
     * @param sku the sku value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the managedResourceGroupId property: The managed resource group Id.
     *
     * @return the managedResourceGroupId value.
     */
    public String managedResourceGroupId() {
        return this.managedResourceGroupId;
    }

    /**
     * Set the managedResourceGroupId property: The managed resource group Id.
     *
     * @param managedResourceGroupId the managedResourceGroupId value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withManagedResourceGroupId(String managedResourceGroupId) {
        this.managedResourceGroupId = managedResourceGroupId;
        return this;
    }

    /**
     * Get the parameters property: The workspace's custom parameters.
     *
     * @return the parameters value.
     */
    public WorkspaceCustomParameters parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The workspace's custom parameters.
     *
     * @param parameters the parameters value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withParameters(WorkspaceCustomParameters parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the provisioningState property: The workspace provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uiDefinitionUri property: The blob URI where the UI definition file is located.
     *
     * @return the uiDefinitionUri value.
     */
    public String uiDefinitionUri() {
        return this.uiDefinitionUri;
    }

    /**
     * Set the uiDefinitionUri property: The blob URI where the UI definition file is located.
     *
     * @param uiDefinitionUri the uiDefinitionUri value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withUiDefinitionUri(String uiDefinitionUri) {
        this.uiDefinitionUri = uiDefinitionUri;
        return this;
    }

    /**
     * Get the authorizations property: The workspace provider authorizations.
     *
     * @return the authorizations value.
     */
    public List<WorkspaceProviderAuthorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Set the authorizations property: The workspace provider authorizations.
     *
     * @param authorizations the authorizations value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withAuthorizations(List<WorkspaceProviderAuthorization> authorizations) {
        this.authorizations = authorizations;
        return this;
    }

    /**
     * Get the createdBy property: Indicates the Object ID, PUID and Application ID of entity that created the
     * workspace.
     *
     * @return the createdBy value.
     */
    public CreatedBy createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: Indicates the Object ID, PUID and Application ID of entity that created the
     * workspace.
     *
     * @param createdBy the createdBy value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withCreatedBy(CreatedBy createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the updatedBy property: Indicates the Object ID, PUID and Application ID of entity that last updated the
     * workspace.
     *
     * @return the updatedBy value.
     */
    public CreatedBy updatedBy() {
        return this.updatedBy;
    }

    /**
     * Set the updatedBy property: Indicates the Object ID, PUID and Application ID of entity that last updated the
     * workspace.
     *
     * @param updatedBy the updatedBy value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withUpdatedBy(CreatedBy updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * Get the createdDateTime property: Specifies the date and time when the workspace is created.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the workspaceId property: The unique identifier of the databricks workspace in databricks control plane.
     *
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Get the workspaceUrl property: The workspace URL which is of the format
     * 'adb-{workspaceId}.{random}.azuredatabricks.net'.
     *
     * @return the workspaceUrl value.
     */
    public String workspaceUrl() {
        return this.workspaceUrl;
    }

    /**
     * Get the storageAccountIdentity property: The details of Managed Identity of Storage Account.
     *
     * @return the storageAccountIdentity value.
     */
    public ManagedIdentityConfiguration storageAccountIdentity() {
        return this.storageAccountIdentity;
    }

    /**
     * Set the storageAccountIdentity property: The details of Managed Identity of Storage Account.
     *
     * @param storageAccountIdentity the storageAccountIdentity value to set.
     * @return the WorkspaceInner object itself.
     */
    public WorkspaceInner withStorageAccountIdentity(ManagedIdentityConfiguration storageAccountIdentity) {
        this.storageAccountIdentity = storageAccountIdentity;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WorkspaceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public WorkspaceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (managedResourceGroupId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property managedResourceGroupId in model WorkspaceInner"));
        }
        if (parameters() != null) {
            parameters().validate();
        }
        if (authorizations() != null) {
            authorizations().forEach(e -> e.validate());
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (updatedBy() != null) {
            updatedBy().validate();
        }
        if (storageAccountIdentity() != null) {
            storageAccountIdentity().validate();
        }
    }
}
