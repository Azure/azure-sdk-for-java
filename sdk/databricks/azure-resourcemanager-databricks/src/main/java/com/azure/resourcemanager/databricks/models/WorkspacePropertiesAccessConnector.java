// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Access Connector Resource that is going to be associated with Databricks Workspace.
 */
@Fluent
public final class WorkspacePropertiesAccessConnector implements JsonSerializable<WorkspacePropertiesAccessConnector> {
    /*
     * The resource ID of Azure Databricks Access Connector Resource.
     */
    private String id;

    /*
     * The identity type of the Access Connector Resource.
     */
    private IdentityType identityType;

    /*
     * The resource ID of the User Assigned Identity associated with the Access Connector Resource. This is required for
     * type 'UserAssigned' and not valid for type 'SystemAssigned'.
     */
    private String userAssignedIdentityId;

    /**
     * Creates an instance of WorkspacePropertiesAccessConnector class.
     */
    public WorkspacePropertiesAccessConnector() {
    }

    /**
     * Get the id property: The resource ID of Azure Databricks Access Connector Resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The resource ID of Azure Databricks Access Connector Resource.
     * 
     * @param id the id value to set.
     * @return the WorkspacePropertiesAccessConnector object itself.
     */
    public WorkspacePropertiesAccessConnector withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the identityType property: The identity type of the Access Connector Resource.
     * 
     * @return the identityType value.
     */
    public IdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: The identity type of the Access Connector Resource.
     * 
     * @param identityType the identityType value to set.
     * @return the WorkspacePropertiesAccessConnector object itself.
     */
    public WorkspacePropertiesAccessConnector withIdentityType(IdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the userAssignedIdentityId property: The resource ID of the User Assigned Identity associated with the Access
     * Connector Resource. This is required for type 'UserAssigned' and not valid for type 'SystemAssigned'.
     * 
     * @return the userAssignedIdentityId value.
     */
    public String userAssignedIdentityId() {
        return this.userAssignedIdentityId;
    }

    /**
     * Set the userAssignedIdentityId property: The resource ID of the User Assigned Identity associated with the Access
     * Connector Resource. This is required for type 'UserAssigned' and not valid for type 'SystemAssigned'.
     * 
     * @param userAssignedIdentityId the userAssignedIdentityId value to set.
     * @return the WorkspacePropertiesAccessConnector object itself.
     */
    public WorkspacePropertiesAccessConnector withUserAssignedIdentityId(String userAssignedIdentityId) {
        this.userAssignedIdentityId = userAssignedIdentityId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property id in model WorkspacePropertiesAccessConnector"));
        }
        if (identityType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property identityType in model WorkspacePropertiesAccessConnector"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkspacePropertiesAccessConnector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeStringField("userAssignedIdentityId", this.userAssignedIdentityId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspacePropertiesAccessConnector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspacePropertiesAccessConnector if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkspacePropertiesAccessConnector.
     */
    public static WorkspacePropertiesAccessConnector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspacePropertiesAccessConnector deserializedWorkspacePropertiesAccessConnector
                = new WorkspacePropertiesAccessConnector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWorkspacePropertiesAccessConnector.id = reader.getString();
                } else if ("identityType".equals(fieldName)) {
                    deserializedWorkspacePropertiesAccessConnector.identityType
                        = IdentityType.fromString(reader.getString());
                } else if ("userAssignedIdentityId".equals(fieldName)) {
                    deserializedWorkspacePropertiesAccessConnector.userAssignedIdentityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspacePropertiesAccessConnector;
        });
    }
}
