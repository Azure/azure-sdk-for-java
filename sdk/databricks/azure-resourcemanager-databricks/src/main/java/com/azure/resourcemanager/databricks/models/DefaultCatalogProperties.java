// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * These properties lets user specify default catalog properties during workspace creation.
 */
@Fluent
public final class DefaultCatalogProperties implements JsonSerializable<DefaultCatalogProperties> {
    /*
     * Defines the initial type of the default catalog. Possible values (case-insensitive): HiveMetastore, UnityCatalog
     */
    private InitialType initialType;

    /*
     * Specifies the initial Name of default catalog. If not specified, the name of the workspace will be used.
     */
    private String initialName;

    /**
     * Creates an instance of DefaultCatalogProperties class.
     */
    public DefaultCatalogProperties() {
    }

    /**
     * Get the initialType property: Defines the initial type of the default catalog. Possible values
     * (case-insensitive): HiveMetastore, UnityCatalog.
     * 
     * @return the initialType value.
     */
    public InitialType initialType() {
        return this.initialType;
    }

    /**
     * Set the initialType property: Defines the initial type of the default catalog. Possible values
     * (case-insensitive): HiveMetastore, UnityCatalog.
     * 
     * @param initialType the initialType value to set.
     * @return the DefaultCatalogProperties object itself.
     */
    public DefaultCatalogProperties withInitialType(InitialType initialType) {
        this.initialType = initialType;
        return this;
    }

    /**
     * Get the initialName property: Specifies the initial Name of default catalog. If not specified, the name of the
     * workspace will be used.
     * 
     * @return the initialName value.
     */
    public String initialName() {
        return this.initialName;
    }

    /**
     * Set the initialName property: Specifies the initial Name of default catalog. If not specified, the name of the
     * workspace will be used.
     * 
     * @param initialName the initialName value to set.
     * @return the DefaultCatalogProperties object itself.
     */
    public DefaultCatalogProperties withInitialName(String initialName) {
        this.initialName = initialName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("initialType", this.initialType == null ? null : this.initialType.toString());
        jsonWriter.writeStringField("initialName", this.initialName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultCatalogProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultCatalogProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefaultCatalogProperties.
     */
    public static DefaultCatalogProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultCatalogProperties deserializedDefaultCatalogProperties = new DefaultCatalogProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("initialType".equals(fieldName)) {
                    deserializedDefaultCatalogProperties.initialType = InitialType.fromString(reader.getString());
                } else if ("initialName".equals(fieldName)) {
                    deserializedDefaultCatalogProperties.initialName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultCatalogProperties;
        });
    }
}
