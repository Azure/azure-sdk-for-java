// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.PrivateEndpoint;
import com.azure.resourcemanager.databricks.models.PrivateEndpointConnection;
import com.azure.resourcemanager.databricks.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"rxbpyb\"},\"groupIds\":[\"bjf\",\"twss\",\"t\",\"tpvjzbexilzznfqq\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"pmqtaru\",\"actionsRequired\":\"jmkcjhwqytj\"},\"provisioningState\":\"Succeeded\"},\"id\":\"n\",\"name\":\"jewgdrjerv\",\"type\":\"aen\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDatabricksManager manager = AzureDatabricksManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response
            = manager.privateEndpointConnections()
                .define("qzvszjf")
                .withExistingWorkspace("xjyngudivk", "tswb")
                .withProperties(
                    new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("xivetvt", "qaqtdoqmcbxvwvxy"))
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateLinkServiceConnectionStatus.APPROVED)
                            .withDescription("bhsfxob")
                            .withActionsRequired("tkblmpewww")))
                .create();

        Assertions.assertEquals("bjf", response.properties().groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("pmqtaru", response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jmkcjhwqytj",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
