// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.databricks.models.PrivateEndpoint;
import com.azure.resourcemanager.databricks.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"privateEndpoint\":{\"id\":\"w\"},\"groupIds\":[\"ryplwckbasyypn\",\"dhsgcba\",\"phejkotynqgoulz\",\"dlikwyqkgfgibma\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"keqsrxybzqqedq\",\"actionsRequired\":\"bciqfouflm\"},\"provisioningState\":\"Deleting\"},\"id\":\"zsm\",\"name\":\"dmgloug\",\"type\":\"b\"}")
                .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("ryplwckbasyypn", model.properties().groupIds().get(0));
        Assertions
            .assertEquals(
                PrivateLinkServiceConnectionStatus.APPROVED,
                model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("keqsrxybzqqedq", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("bciqfouflm", model.properties().privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model =
            new PrivateEndpointConnectionInner()
                .withProperties(
                    new PrivateEndpointConnectionProperties()
                        .withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("ryplwckbasyypn", "dhsgcba", "phejkotynqgoulz", "dlikwyqkgfgibma"))
                        .withPrivateLinkServiceConnectionState(
                            new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateLinkServiceConnectionStatus.APPROVED)
                                .withDescription("keqsrxybzqqedq")
                                .withActionsRequired("bciqfouflm")));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("ryplwckbasyypn", model.properties().groupIds().get(0));
        Assertions
            .assertEquals(
                PrivateLinkServiceConnectionStatus.APPROVED,
                model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("keqsrxybzqqedq", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("bciqfouflm", model.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
