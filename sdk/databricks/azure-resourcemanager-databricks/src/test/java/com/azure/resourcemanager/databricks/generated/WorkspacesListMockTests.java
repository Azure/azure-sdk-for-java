// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Workspace;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkspacesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"managedResourceGroupId\":\"yxoegukgjnp\",\"parameters\":{},\"provisioningState\":\"Ready\",\"uiDefinitionUri\":\"drqjsdpy\",\"authorizations\":[],\"createdBy\":{\"oid\":\"0fffa6f7-86b9-424f-92e5-e5b96795d9aa\",\"puid\":\"de\",\"applicationId\":\"5d43a7e7-f082-4948-819e-2740e33f9f02\"},\"updatedBy\":{\"oid\":\"6373efeb-5b4f-4a0a-b6fe-546e5dbc93f1\",\"puid\":\"cwif\",\"applicationId\":\"24e7319a-77e0-4a76-9ade-c7038179c99f\"},\"createdDateTime\":\"2021-09-22T07:17:11Z\",\"workspaceId\":\"zfbishcbkhaj\",\"workspaceUrl\":\"yeamdphagalpb\",\"storageAccountIdentity\":{\"principalId\":\"93a86fcb-54bc-4dc7-9d81-447d4ee11966\",\"tenantId\":\"cf93ddff-cc50-4665-ade4-45f4ce20df77\",\"type\":\"pwhonowkg\"},\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Enabled\",\"requiredNsgRules\":\"AllRules\"},\"sku\":{\"name\":\"bin\",\"tier\":\"pu\"},\"location\":\"mryw\",\"tags\":{\"yx\":\"oqftiyqzrnkcq\",\"nwvlryavwhheunmm\":\"whzlsicohoq\",\"koklya\":\"hgyxzkonoc\",\"ewrmjmwvvjektc\":\"uconuqszfkbey\"},\"id\":\"senhwlrs\",\"name\":\"frzpwvlqdqgb\",\"type\":\"qylihkaetckt\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureDatabricksManager manager =
            AzureDatabricksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workspace> response = manager.workspaces().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mryw", response.iterator().next().location());
        Assertions.assertEquals("oqftiyqzrnkcq", response.iterator().next().tags().get("yx"));
        Assertions.assertEquals("bin", response.iterator().next().sku().name());
        Assertions.assertEquals("pu", response.iterator().next().sku().tier());
        Assertions.assertEquals("yxoegukgjnp", response.iterator().next().managedResourceGroupId());
        Assertions.assertEquals("drqjsdpy", response.iterator().next().uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.ALL_RULES, response.iterator().next().requiredNsgRules());
    }
}
