// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Workspace;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkspacesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"managedResourceGroupId\":\"amdecte\",\"parameters\":{},\"provisioningState\":\"Running\",\"uiDefinitionUri\":\"refovgmkqsleyyvx\",\"authorizations\":[],\"createdBy\":{\"oid\":\"a24d3027-b587-4902-8ed1-de5c97fb8521\",\"puid\":\"attpngjcrcczsq\",\"applicationId\":\"9500a8d6-7236-4fbe-81c2-abfd0d6d2509\"},\"updatedBy\":{\"oid\":\"2b2b65ae-2a7d-45b3-b1cb-a3ef0b2941dd\",\"puid\":\"daj\",\"applicationId\":\"c710c81c-3361-494a-a044-15e17197eda0\"},\"createdDateTime\":\"2021-09-30T19:57Z\",\"workspaceId\":\"unqecanoae\",\"workspaceUrl\":\"fhyhltrpmopjmcma\",\"storageAccountIdentity\":{\"principalId\":\"460cedbf-cd45-43db-967f-395e5de22098\",\"tenantId\":\"9232079e-bc78-421c-baac-1129753a0ca2\",\"type\":\"hfuiuaodsfc\"},\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Enabled\",\"requiredNsgRules\":\"NoAzureDatabricksRules\"},\"sku\":{\"name\":\"zmyzydagf\",\"tier\":\"xbezyiuokktwh\"},\"location\":\"xw\",\"tags\":{\"mbsureximo\":\"q\",\"fksymddystki\":\"yocf\"},\"id\":\"uxh\",\"name\":\"yudxorrqnbp\",\"type\":\"czvyifq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureDatabricksManager manager =
            AzureDatabricksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workspace response =
            manager
                .workspaces()
                .getByResourceGroupWithResponse("fyexfwhy", "cibvyvdcsitynn", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("xw", response.location());
        Assertions.assertEquals("q", response.tags().get("mbsureximo"));
        Assertions.assertEquals("zmyzydagf", response.sku().name());
        Assertions.assertEquals("xbezyiuokktwh", response.sku().tier());
        Assertions.assertEquals("amdecte", response.managedResourceGroupId());
        Assertions.assertEquals("refovgmkqsleyyvx", response.uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.NO_AZURE_DATABRICKS_RULES, response.requiredNsgRules());
    }
}
