// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Workspace;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkspacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"managedResourceGroupId\":\"watkpnpulexxb\",\"parameters\":{},\"provisioningState\":\"Running\",\"uiDefinitionUri\":\"acspkwl\",\"authorizations\":[],\"createdBy\":{\"oid\":\"429ec9c0-2243-4e22-9552-68b6f0672258\",\"puid\":\"xjmflbvv\",\"applicationId\":\"aaae057f-2aef-48d7-9f6b-da7c2c57749e\"},\"updatedBy\":{\"oid\":\"9b6bb16f-6f85-4ef4-b547-6db18ac0da6e\",\"puid\":\"cciw\",\"applicationId\":\"a520c5de-dc8d-4800-afda-ae09ac643dc0\"},\"createdDateTime\":\"2021-08-18T09:43:05Z\",\"workspaceId\":\"khrs\",\"workspaceUrl\":\"iwkuofos\",\"storageAccountIdentity\":{\"principalId\":\"ae76fd85-2328-4f51-8ebd-c29c823051b6\",\"tenantId\":\"a30f9513-9470-4046-8048-1c4d6a142579\",\"type\":\"uuimjmvxieduug\"},\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Disabled\",\"requiredNsgRules\":\"NoAzureServiceRules\"},\"sku\":{\"name\":\"aos\",\"tier\":\"xc\"},\"location\":\"npc\",\"tags\":{\"eggzfb\":\"cohslkev\",\"ithlvmezyvshxm\":\"hfmvfaxkffe\",\"gigr\":\"sbbzo\"},\"id\":\"wburvjxxjnspydpt\",\"name\":\"oenkouknvudwti\",\"type\":\"kbldngkpocipa\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureDatabricksManager manager =
            AzureDatabricksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Workspace> response =
            manager.workspaces().listByResourceGroup("d", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("npc", response.iterator().next().location());
        Assertions.assertEquals("cohslkev", response.iterator().next().tags().get("eggzfb"));
        Assertions.assertEquals("aos", response.iterator().next().sku().name());
        Assertions.assertEquals("xc", response.iterator().next().sku().tier());
        Assertions.assertEquals("watkpnpulexxb", response.iterator().next().managedResourceGroupId());
        Assertions.assertEquals("acspkwl", response.iterator().next().uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.NO_AZURE_SERVICE_RULES, response.iterator().next().requiredNsgRules());
    }
}
