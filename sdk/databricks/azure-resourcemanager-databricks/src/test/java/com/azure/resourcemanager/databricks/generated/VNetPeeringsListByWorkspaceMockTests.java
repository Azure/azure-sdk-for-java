// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.VirtualNetworkPeering;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VNetPeeringsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"allowVirtualNetworkAccess\":true,\"allowForwardedTraffic\":true,\"allowGatewayTransit\":false,\"useRemoteGateways\":true,\"databricksVirtualNetwork\":{\"id\":\"kbebxmubyyntwlrb\"},\"databricksAddressSpace\":{\"addressPrefixes\":[\"ievseotgqrllt\",\"u\",\"lauwzizxbmpgcjef\",\"zmuvpbttdumorppx\"]},\"remoteVirtualNetwork\":{\"id\":\"mnzb\"},\"remoteAddressSpace\":{\"addressPrefixes\":[\"pglkf\",\"ohdneuel\",\"phsdyhto\"]},\"peeringState\":\"Disconnected\",\"provisioningState\":\"Failed\"},\"id\":\"owwquuvxz\",\"name\":\"clvit\",\"type\":\"hqzonosggbhcoh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDatabricksManager manager = AzureDatabricksManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VirtualNetworkPeering> response
            = manager.vNetPeerings().listByWorkspace("xtibqdxbxwakbog", "xndlkzgxhu", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(true, response.iterator().next().allowVirtualNetworkAccess());
        Assertions.assertEquals(true, response.iterator().next().allowForwardedTraffic());
        Assertions.assertEquals(false, response.iterator().next().allowGatewayTransit());
        Assertions.assertEquals(true, response.iterator().next().useRemoteGateways());
        Assertions.assertEquals("kbebxmubyyntwlrb", response.iterator().next().databricksVirtualNetwork().id());
        Assertions.assertEquals("ievseotgqrllt",
            response.iterator().next().databricksAddressSpace().addressPrefixes().get(0));
        Assertions.assertEquals("mnzb", response.iterator().next().remoteVirtualNetwork().id());
        Assertions.assertEquals("pglkf", response.iterator().next().remoteAddressSpace().addressPrefixes().get(0));
    }
}
