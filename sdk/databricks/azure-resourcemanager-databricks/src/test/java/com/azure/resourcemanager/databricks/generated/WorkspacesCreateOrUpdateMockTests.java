// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.CreatedBy;
import com.azure.resourcemanager.databricks.models.ManagedIdentityConfiguration;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Sku;
import com.azure.resourcemanager.databricks.models.Workspace;
import com.azure.resourcemanager.databricks.models.WorkspaceCustomParameters;
import com.azure.resourcemanager.databricks.models.WorkspacePropertiesEncryption;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkspacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"managedResourceGroupId\":\"fdygpfqbuaceopz\",\"parameters\":{},\"provisioningState\":\"Succeeded\",\"uiDefinitionUri\":\"hzxct\",\"authorizations\":[],\"createdBy\":{\"oid\":\"3613aa09-1d75-47e9-9187-5172c240dd82\",\"puid\":\"moizpos\",\"applicationId\":\"5020551a-592f-42df-8ed0-b93eb9bd3660\"},\"updatedBy\":{\"oid\":\"91d1ae98-84d2-4ddd-94e4-d8ee1b63f818\",\"puid\":\"fbunrmfqjhhk\",\"applicationId\":\"f9d11ce4-ad88-4db7-b785-c77d122aab77\"},\"createdDateTime\":\"2021-08-11T15:45:39Z\",\"workspaceId\":\"ymjhxxjyngudivkr\",\"workspaceUrl\":\"wbxqzvszjfau\",\"storageAccountIdentity\":{\"principalId\":\"e4a44930-07ee-4cf6-b644-53ce71db725d\",\"tenantId\":\"23d239e1-81c8-436b-afb4-5c48b7afbe72\",\"type\":\"xivetvt\"},\"managedDiskIdentity\":{\"principalId\":\"e57be676-91c2-4eea-bb85-bfb3c80fb123\",\"tenantId\":\"ceb6ab2c-e828-4a2c-838b-b6777f4f256d\",\"type\":\"doqmcbxvwvxys\"},\"diskEncryptionSetId\":\"bhsfxob\",\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Disabled\",\"requiredNsgRules\":\"AllRules\"},\"sku\":{\"name\":\"wwwfbkr\",\"tier\":\"nsvs\"},\"location\":\"johxcrsb\",\"tags\":{\"wbhsqfsub\":\"asrru\",\"rxbpyb\":\"gjb\",\"twss\":\"rfbjf\"},\"id\":\"t\",\"name\":\"tpvjzbexilzznfqq\",\"type\":\"vwpm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureDatabricksManager manager =
            AzureDatabricksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workspace response =
            manager
                .workspaces()
                .define("zhpvgqzcjrvxd")
                .withRegion("hb")
                .withExistingResourceGroup("qsgzvahapj")
                .withManagedResourceGroupId("zlmwlxkvugfhz")
                .withTags(mapOf("dtpnapnyiropuhp", "nalaulppg", "gqgitxmedjvcsl", "gvpgy", "wwncwzzhxgk", "n"))
                .withSku(new Sku().withName("yaqcslyjpkiidz").withTier("xznelixhnrztf"))
                .withParameters(new WorkspaceCustomParameters())
                .withUiDefinitionUri("eilpjzuaejxdu")
                .withAuthorizations(Arrays.asList())
                .withCreatedBy(new CreatedBy())
                .withUpdatedBy(new CreatedBy())
                .withStorageAccountIdentity(new ManagedIdentityConfiguration())
                .withManagedDiskIdentity(new ManagedIdentityConfiguration())
                .withEncryption(new WorkspacePropertiesEncryption())
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withRequiredNsgRules(RequiredNsgRules.NO_AZURE_DATABRICKS_RULES)
                .create();

        Assertions.assertEquals("johxcrsb", response.location());
        Assertions.assertEquals("asrru", response.tags().get("wbhsqfsub"));
        Assertions.assertEquals("wwwfbkr", response.sku().name());
        Assertions.assertEquals("nsvs", response.sku().tier());
        Assertions.assertEquals("fdygpfqbuaceopz", response.managedResourceGroupId());
        Assertions.assertEquals("hzxct", response.uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.ALL_RULES, response.requiredNsgRules());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
