// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.CreatedBy;
import com.azure.resourcemanager.databricks.models.ManagedIdentityConfiguration;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Sku;
import com.azure.resourcemanager.databricks.models.Workspace;
import com.azure.resourcemanager.databricks.models.WorkspaceCustomParameters;
import com.azure.resourcemanager.databricks.models.WorkspacePropertiesEncryption;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkspacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"managedResourceGroupId\":\"rcvpnazzmhjrunmp\",\"parameters\":{},\"provisioningState\":\"Succeeded\",\"uiDefinitionUri\":\"enbtkcxywny\",\"authorizations\":[],\"createdBy\":{\"oid\":\"71c48e4e-fcd7-48e8-806b-f77448eb0543\",\"puid\":\"lqidyby\",\"applicationId\":\"311a8267-22df-4349-9a1e-1fba9a21302e\"},\"updatedBy\":{\"oid\":\"7d0b9f83-b818-4c29-87ac-87a5b2eaa458\",\"puid\":\"lhaaxdbabp\",\"applicationId\":\"6e35affb-2fd3-47e6-981f-e454e88c4e0f\"},\"createdDateTime\":\"2021-02-16T08:29:45Z\",\"workspaceId\":\"fkts\",\"workspaceUrl\":\"sucocmnyyazttbtw\",\"storageAccountIdentity\":{\"principalId\":\"75dedb75-65fb-4085-89d5-d6ec0c07050f\",\"tenantId\":\"10d9f07e-035d-47d4-b72f-d2aaff81ee01\",\"type\":\"edckzywbiexzfey\"},\"encryption\":{},\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Enabled\",\"requiredNsgRules\":\"NoAzureDatabricksRules\"},\"sku\":{\"name\":\"wbhqwal\",\"tier\":\"zyoxaepdkzjan\"},\"location\":\"xrhdwbavxbniwdjs\",\"tags\":{\"bpg\":\"s\",\"fzab\":\"xytxhpzxbz\"},\"id\":\"lcuhxwtctyqiklb\",\"name\":\"ovplw\",\"type\":\"bhvgy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureDatabricksManager manager =
            AzureDatabricksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Workspace response =
            manager
                .workspaces()
                .define("ctq")
                .withRegion("riwflzlfb")
                .withExistingResourceGroup("fcivfsnkym")
                .withManagedResourceGroupId("jf")
                .withTags(mapOf("mgkbrpyydhibn", "uzycispnqza"))
                .withSku(new Sku().withName("ec").withTier("odebfqkkrbmpu"))
                .withParameters(new WorkspaceCustomParameters())
                .withUiDefinitionUri("birphxepcyva")
                .withAuthorizations(Arrays.asList())
                .withCreatedBy(new CreatedBy())
                .withUpdatedBy(new CreatedBy())
                .withStorageAccountIdentity(new ManagedIdentityConfiguration())
                .withEncryption(new WorkspacePropertiesEncryption())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withRequiredNsgRules(RequiredNsgRules.NO_AZURE_DATABRICKS_RULES)
                .create();

        Assertions.assertEquals("xrhdwbavxbniwdjs", response.location());
        Assertions.assertEquals("s", response.tags().get("bpg"));
        Assertions.assertEquals("wbhqwal", response.sku().name());
        Assertions.assertEquals("zyoxaepdkzjan", response.sku().tier());
        Assertions.assertEquals("rcvpnazzmhjrunmp", response.managedResourceGroupId());
        Assertions.assertEquals("enbtkcxywny", response.uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.NO_AZURE_DATABRICKS_RULES, response.requiredNsgRules());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
