// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.models.PrivateEndpoint;
import com.azure.resourcemanager.databricks.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.databricks.models.PrivateLinkServiceConnectionStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"privateEndpoint\":{\"id\":\"ryo\"},\"groupIds\":[\"oacctaza\",\"ljlahbcryf\",\"dfdosygexp\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"akhmsbzjhcrz\",\"actionsRequired\":\"dphlxaolt\"},\"provisioningState\":\"Failed\"}")
            .toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("oacctaza", model.groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("akhmsbzjhcrz", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dphlxaolt", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProperties model
            = new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                .withGroupIds(Arrays.asList("oacctaza", "ljlahbcryf", "dfdosygexp"))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState().withStatus(PrivateLinkServiceConnectionStatus.DISCONNECTED)
                        .withDescription("akhmsbzjhcrz")
                        .withActionsRequired("dphlxaolt"));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("oacctaza", model.groupIds().get(0));
        Assertions.assertEquals(PrivateLinkServiceConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("akhmsbzjhcrz", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("dphlxaolt", model.privateLinkServiceConnectionState().actionsRequired());
    }
}
