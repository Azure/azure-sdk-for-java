// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.databricks.models.PublicNetworkAccess;
import com.azure.resourcemanager.databricks.models.RequiredNsgRules;
import com.azure.resourcemanager.databricks.models.Sku;
import com.azure.resourcemanager.databricks.models.WorkspaceListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"managedResourceGroupId\":\"ot\",\"provisioningState\":\"Updating\",\"uiDefinitionUri\":\"ulzndlikwyqk\",\"authorizations\":[],\"createdDateTime\":\"2021-12-05T16:09:15Z\",\"workspaceId\":\"dgak\",\"workspaceUrl\":\"s\",\"privateEndpointConnections\":[],\"publicNetworkAccess\":\"Disabled\",\"requiredNsgRules\":\"NoAzureServiceRules\"},\"sku\":{\"name\":\"qytbciq\",\"tier\":\"uflmm\"},\"location\":\"zsm\",\"tags\":{\"tmut\":\"glougpbk\",\"pwgcuertu\":\"uqktap\",\"bmdg\":\"kdosvqw\"},\"id\":\"bjf\",\"name\":\"dgmb\",\"type\":\"bexppb\"}],\"nextLink\":\"q\"}")
                .toObject(WorkspaceListResult.class);
        Assertions.assertEquals("zsm", model.value().get(0).location());
        Assertions.assertEquals("glougpbk", model.value().get(0).tags().get("tmut"));
        Assertions.assertEquals("qytbciq", model.value().get(0).sku().name());
        Assertions.assertEquals("uflmm", model.value().get(0).sku().tier());
        Assertions.assertEquals("ot", model.value().get(0).managedResourceGroupId());
        Assertions.assertEquals("ulzndlikwyqk", model.value().get(0).uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.NO_AZURE_SERVICE_RULES, model.value().get(0).requiredNsgRules());
        Assertions.assertEquals("q", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceListResult model =
            new WorkspaceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new WorkspaceInner()
                                .withLocation("zsm")
                                .withTags(mapOf("tmut", "glougpbk", "pwgcuertu", "uqktap", "bmdg", "kdosvqw"))
                                .withSku(new Sku().withName("qytbciq").withTier("uflmm"))
                                .withManagedResourceGroupId("ot")
                                .withUiDefinitionUri("ulzndlikwyqk")
                                .withAuthorizations(Arrays.asList())
                                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                                .withRequiredNsgRules(RequiredNsgRules.NO_AZURE_SERVICE_RULES)))
                .withNextLink("q");
        model = BinaryData.fromObject(model).toObject(WorkspaceListResult.class);
        Assertions.assertEquals("zsm", model.value().get(0).location());
        Assertions.assertEquals("glougpbk", model.value().get(0).tags().get("tmut"));
        Assertions.assertEquals("qytbciq", model.value().get(0).sku().name());
        Assertions.assertEquals("uflmm", model.value().get(0).sku().tier());
        Assertions.assertEquals("ot", model.value().get(0).managedResourceGroupId());
        Assertions.assertEquals("ulzndlikwyqk", model.value().get(0).uiDefinitionUri());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(RequiredNsgRules.NO_AZURE_SERVICE_RULES, model.value().get(0).requiredNsgRules());
        Assertions.assertEquals("q", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
