// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"26b404e9-aeb9-4ca8-9997-fd1cca2a0488\",\"tenantId\":\"4e823df4-f422-4ed0-a4c2-5e9bd4c35d4d\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"igrxwburvjxxjn\":{\"principalId\":\"3e9ebc1d-b1c1-4533-8704-d79ccba41ec3\",\"clientId\":\"6dd7d4c8-c4c4-43a2-a601-411c6bc480c6\"},\"dptkoenkouk\":{\"principalId\":\"280ee6ed-c2bd-4b6d-abf4-2d3aefbb5d10\",\"clientId\":\"8f94587e-ed8d-4170-8c74-c41b86cf4f90\"},\"dwtiukbldngkp\":{\"principalId\":\"a90c4f11-0ad2-4901-b4c7-0f73f55ba34b\",\"clientId\":\"b8dd5f2c-aea4-4913-b1d1-8311361c6275\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igrxwburvjxxjn", new UserAssignedIdentity(), "dptkoenkouk",
                new UserAssignedIdentity(), "dwtiukbldngkp", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
