// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"b2d3bdaf-61de-4288-97e3-c1928434e39b\",\"tenantId\":\"a16c2cf7-7145-41f0-9d14-3f99ed435bc0\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"igrxwburvjxxjn\":{\"principalId\":\"53e3940b-6451-401b-8e5c-ea315025ffff\",\"clientId\":\"28988c3f-2d61-45c0-ab9f-fb4de085c211\"},\"dptkoenkouk\":{\"principalId\":\"0e9927f2-3a00-4bb1-bb82-88d174bbb1b7\",\"clientId\":\"aa01eeec-4aa7-4463-8aff-5e00c0ab0d74\"},\"dwtiukbldngkp\":{\"principalId\":\"a51ae139-0adf-47b3-a835-ac364b122eca\",\"clientId\":\"e8b774f2-55b8-4b7a-99ae-18defb55cf3f\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igrxwburvjxxjn", new UserAssignedIdentity(), "dptkoenkouk",
                new UserAssignedIdentity(), "dwtiukbldngkp", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
