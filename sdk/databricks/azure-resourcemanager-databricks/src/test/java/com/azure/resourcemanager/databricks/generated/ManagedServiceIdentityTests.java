// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"56ba1dbe-16a4-4a17-aba0-643ef5d93f96\",\"tenantId\":\"3c3a9e68-335d-4485-beec-ba846fb641b8\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"igrxwburvjxxjn\":{\"principalId\":\"9cb21ec6-2ea0-46e1-a881-14abc73c50ad\",\"clientId\":\"d704d34c-e09d-498f-a46d-00131a280951\"},\"dptkoenkouk\":{\"principalId\":\"0b7ff921-ef90-4eaa-85ef-3e47c03cc20f\",\"clientId\":\"3199096b-dddd-424d-a92d-1fa8acb57a69\"},\"dwtiukbldngkp\":{\"principalId\":\"ab7216ef-fdd3-4f08-98ef-661400f6b0b6\",\"clientId\":\"0ce4431e-6eb4-4e21-93ff-8b795688b6e4\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igrxwburvjxxjn", new UserAssignedIdentity(), "dptkoenkouk",
                new UserAssignedIdentity(), "dwtiukbldngkp", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
