// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"2bd7b4c9-3105-4267-bbf9-dbf1272662fc\",\"tenantId\":\"5598a6ac-1a0c-47a5-b5f4-7251f41fabde\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"igrxwburvjxxjn\":{\"principalId\":\"22401d49-44b7-4480-8427-2dbb4f83259b\",\"clientId\":\"15db0f71-3266-4f3c-bca4-b5a9649c633b\"},\"dptkoenkouk\":{\"principalId\":\"690c460a-9fd8-4d3f-92af-b0d095ed1dfa\",\"clientId\":\"30c937bf-f8a6-40ab-b974-2dd40ce98fba\"},\"dwtiukbldngkp\":{\"principalId\":\"554794dc-baf0-46cb-a3f6-0a7ef21da73d\",\"clientId\":\"c7428091-a468-46f2-a14a-98af4e1f09fb\"}}}")
            .toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentity model = new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("igrxwburvjxxjn", new UserAssignedIdentity(), "dptkoenkouk",
                new UserAssignedIdentity(), "dwtiukbldngkp", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
