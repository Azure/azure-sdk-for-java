// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.fluent.models.OperationInner;
import com.azure.resourcemanager.databricks.models.OperationDisplay;
import com.azure.resourcemanager.databricks.models.OperationListResult;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"name\":\"fpfpsalgbquxigj\",\"display\":{\"provider\":\"zjaoyfhrtxil\",\"resource\":\"rkujy\",\"operation\":\"l\"}}],\"nextLink\":\"uvfqawrlyxwj\"}")
                .toObject(OperationListResult.class);
        Assertions.assertEquals("fpfpsalgbquxigj", model.value().get(0).name());
        Assertions.assertEquals("zjaoyfhrtxil", model.value().get(0).display().provider());
        Assertions.assertEquals("rkujy", model.value().get(0).display().resource());
        Assertions.assertEquals("l", model.value().get(0).display().operation());
        Assertions.assertEquals("uvfqawrlyxwj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationListResult model =
            new OperationListResult()
                .withValue(
                    Arrays
                        .asList(
                            new OperationInner()
                                .withName("fpfpsalgbquxigj")
                                .withDisplay(
                                    new OperationDisplay()
                                        .withProvider("zjaoyfhrtxil")
                                        .withResource("rkujy")
                                        .withOperation("l"))))
                .withNextLink("uvfqawrlyxwj");
        model = BinaryData.fromObject(model).toObject(OperationListResult.class);
        Assertions.assertEquals("fpfpsalgbquxigj", model.value().get(0).name());
        Assertions.assertEquals("zjaoyfhrtxil", model.value().get(0).display().provider());
        Assertions.assertEquals("rkujy", model.value().get(0).display().resource());
        Assertions.assertEquals("l", model.value().get(0).display().operation());
        Assertions.assertEquals("uvfqawrlyxwj", model.nextLink());
    }
}
