// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databricks.AzureDatabricksManager;
import com.azure.resourcemanager.databricks.models.AccessConnector;
import com.azure.resourcemanager.databricks.models.AccessConnectorProperties;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccessConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"28bbe694-bfb2-4ed8-9e26-415f5e6a5f21\",\"tenantId\":\"794121f1-1e63-4979-91e5-2fa8dfa0de2d\",\"type\":\"None\",\"userAssignedIdentities\":{\"healmfmtda\":{\"principalId\":\"8cc5fbdc-bd5c-4570-979b-200af1b6abfa\",\"clientId\":\"580f91d8-ac00-453b-a09c-16185d59e72b\"}}},\"properties\":{\"provisioningState\":\"Succeeded\"},\"location\":\"wvgpiohg\",\"tags\":{\"yqagvrvm\":\"tfudxepx\",\"dblx\":\"pkukghi\",\"fnjhfjxwmszkkfo\":\"wi\"},\"id\":\"rey\",\"name\":\"kzikfjawneaivxwc\",\"type\":\"elpcirelsfeaenwa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureDatabricksManager manager = AzureDatabricksManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AccessConnector response = manager.accessConnectors()
            .define("abikns")
            .withRegion("gjltdtbnnhado")
            .withExistingResourceGroup("mwzn")
            .withTags(mapOf("hnvpamqgxq", "kvci", "zikywgg", "u", "uipiccjzk", "kallatmel"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("tlwwrlk", new UserAssignedIdentity(), "ncvokotllxdyhg", new UserAssignedIdentity())))
            .withProperties(new AccessConnectorProperties())
            .create();

        Assertions.assertEquals("wvgpiohg", response.location());
        Assertions.assertEquals("tfudxepx", response.tags().get("yqagvrvm"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
