// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databricks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databricks.fluent.models.AccessConnectorInner;
import com.azure.resourcemanager.databricks.models.AccessConnectorProperties;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentity;
import com.azure.resourcemanager.databricks.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databricks.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AccessConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessConnectorInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"8e8a3731-8ab3-4728-bd89-58ffb901cb32\",\"tenantId\":\"1da1711b-690c-4e04-973b-ad886661a203\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"vnchrkcci\":{\"principalId\":\"8733775c-58cf-45cd-8d71-8fe71785bcc4\",\"clientId\":\"6301bebb-6173-447a-928b-8c8c2279e704\"}}},\"properties\":{\"provisioningState\":\"Accepted\"},\"location\":\"qkhr\",\"tags\":{\"ghsauuimjmvxied\":\"iwkuofos\",\"byao\":\"ugidyjrr\",\"xc\":\"v\",\"hocohslkev\":\"onpc\"},\"id\":\"eggzfb\",\"name\":\"hfmvfaxkffe\",\"type\":\"ithlvmezyvshxm\"}")
            .toObject(AccessConnectorInner.class);
        Assertions.assertEquals("qkhr", model.location());
        Assertions.assertEquals("iwkuofos", model.tags().get("ghsauuimjmvxied"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessConnectorInner model = new AccessConnectorInner().withLocation("qkhr")
            .withTags(mapOf("ghsauuimjmvxied", "iwkuofos", "byao", "ugidyjrr", "xc", "v", "hocohslkev", "onpc"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("vnchrkcci", new UserAssignedIdentity())))
            .withProperties(new AccessConnectorProperties());
        model = BinaryData.fromObject(model).toObject(AccessConnectorInner.class);
        Assertions.assertEquals("qkhr", model.location());
        Assertions.assertEquals("iwkuofos", model.tags().get("ghsauuimjmvxied"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
