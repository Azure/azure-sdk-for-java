// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicyIdentity;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicyKind;
import com.azure.resourcemanager.powerplatform.models.PropertiesEncryption;
import com.azure.resourcemanager.powerplatform.models.PropertiesLockbox;
import com.azure.resourcemanager.powerplatform.models.PropertiesNetworkInjection;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Definition of the EnterprisePolicy. */
@Fluent
public final class EnterprisePolicyInner extends Resource {
    /*
     * The identity of the EnterprisePolicy.
     */
    @JsonProperty(value = "identity")
    private EnterprisePolicyIdentity identity;

    /*
     * The kind (type) of Enterprise Policy.
     */
    @JsonProperty(value = "kind", required = true)
    private EnterprisePolicyKind kind;

    /*
     * The properties that define configuration for the enterprise policy
     */
    @JsonProperty(value = "properties")
    private Properties innerProperties;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the identity property: The identity of the EnterprisePolicy.
     *
     * @return the identity value.
     */
    public EnterprisePolicyIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the EnterprisePolicy.
     *
     * @param identity the identity value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withIdentity(EnterprisePolicyIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the kind property: The kind (type) of Enterprise Policy.
     *
     * @return the kind value.
     */
    public EnterprisePolicyKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind (type) of Enterprise Policy.
     *
     * @param kind the kind value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withKind(EnterprisePolicyKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the innerProperties property: The properties that define configuration for the enterprise policy.
     *
     * @return the innerProperties value.
     */
    private Properties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public EnterprisePolicyInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public EnterprisePolicyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the lockbox property: Settings concerning lockbox.
     *
     * @return the lockbox value.
     */
    public PropertiesLockbox lockbox() {
        return this.innerProperties() == null ? null : this.innerProperties().lockbox();
    }

    /**
     * Set the lockbox property: Settings concerning lockbox.
     *
     * @param lockbox the lockbox value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withLockbox(PropertiesLockbox lockbox) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withLockbox(lockbox);
        return this;
    }

    /**
     * Get the encryption property: The encryption settings for a configuration store.
     *
     * @return the encryption value.
     */
    public PropertiesEncryption encryption() {
        return this.innerProperties() == null ? null : this.innerProperties().encryption();
    }

    /**
     * Set the encryption property: The encryption settings for a configuration store.
     *
     * @param encryption the encryption value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withEncryption(PropertiesEncryption encryption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withEncryption(encryption);
        return this;
    }

    /**
     * Get the networkInjection property: Settings concerning network injection.
     *
     * @return the networkInjection value.
     */
    public PropertiesNetworkInjection networkInjection() {
        return this.innerProperties() == null ? null : this.innerProperties().networkInjection();
    }

    /**
     * Set the networkInjection property: Settings concerning network injection.
     *
     * @param networkInjection the networkInjection value to set.
     * @return the EnterprisePolicyInner object itself.
     */
    public EnterprisePolicyInner withNetworkInjection(PropertiesNetworkInjection networkInjection) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Properties();
        }
        this.innerProperties().withNetworkInjection(networkInjection);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (kind() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property kind in model EnterprisePolicyInner"));
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EnterprisePolicyInner.class);
}
