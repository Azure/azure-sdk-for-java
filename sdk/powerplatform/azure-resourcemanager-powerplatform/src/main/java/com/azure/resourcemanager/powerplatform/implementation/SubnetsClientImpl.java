// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerplatform.fluent.SubnetsClient;
import com.azure.resourcemanager.powerplatform.fluent.models.SubnetInner;
import com.azure.resourcemanager.powerplatform.models.SubnetListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SubnetsClient. */
public final class SubnetsClientImpl implements SubnetsClient {
    private final ClientLogger logger = new ClientLogger(SubnetsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SubnetsService service;

    /** The service client containing this operation class. */
    private final PowerPlatformImpl client;

    /**
     * Initializes an instance of SubnetsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SubnetsClientImpl(PowerPlatformImpl client) {
        this.service = RestProxy.create(SubnetsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PowerPlatformSubnets to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PowerPlatformSubnets")
    private interface SubnetsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerPlatform"
                + "/enterprisePolicies/{enterprisePolicyName}/subnets/{subnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubnetInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("enterprisePolicyName") String enterprisePolicyName,
            @PathParam("subnetName") String subnetName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerPlatform"
                + "/enterprisePolicies/{enterprisePolicyName}/subnets/{subnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubnetInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("enterprisePolicyName") String enterprisePolicyName,
            @PathParam("subnetName") String subnetName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerPlatform"
                + "/enterprisePolicies/{enterprisePolicyName}/subnets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubnetListResult>> listByEnterprisePolicy(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("enterprisePolicyName") String enterprisePolicyName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Description of Subnets that are authorized for outbound calls from PowerPlatform.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubnetInner>> getWithResponseAsync(
        String resourceGroupName, String enterprisePolicyName, String subnetName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        if (subnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter subnetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            enterprisePolicyName,
                            subnetName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Description of Subnets that are authorized for outbound calls from PowerPlatform.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubnetInner>> getWithResponseAsync(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        if (subnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter subnetName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                enterprisePolicyName,
                subnetName,
                accept,
                context);
    }

    /**
     * Description of Subnets that are authorized for outbound calls from PowerPlatform.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubnetInner> getAsync(String resourceGroupName, String enterprisePolicyName, String subnetName) {
        return getWithResponseAsync(resourceGroupName, enterprisePolicyName, subnetName)
            .flatMap(
                (Response<SubnetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Description of Subnets that are authorized for outbound calls from PowerPlatform.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubnetInner get(String resourceGroupName, String enterprisePolicyName, String subnetName) {
        return getAsync(resourceGroupName, enterprisePolicyName, subnetName).block();
    }

    /**
     * Description of Subnets that are authorized for outbound calls from PowerPlatform.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubnetInner> getWithResponse(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        return getWithResponseAsync(resourceGroupName, enterprisePolicyName, subnetName, context).block();
    }

    /**
     * Description of the Subnet that PowerPlatform resources can access.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubnetInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String enterprisePolicyName, String subnetName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        if (subnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter subnetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            enterprisePolicyName,
                            subnetName,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Description of the Subnet that PowerPlatform resources can access.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubnetInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        if (subnetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter subnetName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                enterprisePolicyName,
                subnetName,
                accept,
                context);
    }

    /**
     * Description of the Subnet that PowerPlatform resources can access.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubnetInner> createOrUpdateAsync(
        String resourceGroupName, String enterprisePolicyName, String subnetName) {
        return createOrUpdateWithResponseAsync(resourceGroupName, enterprisePolicyName, subnetName)
            .flatMap(
                (Response<SubnetInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Description of the Subnet that PowerPlatform resources can access.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubnetInner createOrUpdate(String resourceGroupName, String enterprisePolicyName, String subnetName) {
        return createOrUpdateAsync(resourceGroupName, enterprisePolicyName, subnetName).block();
    }

    /**
     * Description of the Subnet that PowerPlatform resources can access.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param subnetName The name of the subnet.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a subnet.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubnetInner> createOrUpdateWithResponse(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, enterprisePolicyName, subnetName, context).block();
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubnetInner>> listByEnterprisePolicySinglePageAsync(
        String resourceGroupName, String enterprisePolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByEnterprisePolicy(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            enterprisePolicyName,
                            accept,
                            context))
            .<PagedResponse<SubnetInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubnetInner>> listByEnterprisePolicySinglePageAsync(
        String resourceGroupName, String enterprisePolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (enterprisePolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter enterprisePolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByEnterprisePolicy(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                enterprisePolicyName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null));
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubnetInner> listByEnterprisePolicyAsync(String resourceGroupName, String enterprisePolicyName) {
        return new PagedFlux<>(() -> listByEnterprisePolicySinglePageAsync(resourceGroupName, enterprisePolicyName));
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubnetInner> listByEnterprisePolicyAsync(
        String resourceGroupName, String enterprisePolicyName, Context context) {
        return new PagedFlux<>(
            () -> listByEnterprisePolicySinglePageAsync(resourceGroupName, enterprisePolicyName, context));
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubnetInner> listByEnterprisePolicy(String resourceGroupName, String enterprisePolicyName) {
        return new PagedIterable<>(listByEnterprisePolicyAsync(resourceGroupName, enterprisePolicyName));
    }

    /**
     * Retrieve a list of subnets within a given enterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName EnterprisePolicy for the Microsoft Azure subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of subnets.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubnetInner> listByEnterprisePolicy(
        String resourceGroupName, String enterprisePolicyName, Context context) {
        return new PagedIterable<>(listByEnterprisePolicyAsync(resourceGroupName, enterprisePolicyName, context));
    }
}
