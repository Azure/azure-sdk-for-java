// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of EnterprisePolicies. */
public interface EnterprisePolicies {
    /**
     * Get information about an EnterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName The EnterprisePolicy name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an EnterprisePolicy.
     */
    EnterprisePolicy getByResourceGroup(String resourceGroupName, String enterprisePolicyName);

    /**
     * Get information about an EnterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName The EnterprisePolicy name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an EnterprisePolicy.
     */
    Response<EnterprisePolicy> getByResourceGroupWithResponse(
        String resourceGroupName, String enterprisePolicyName, Context context);

    /**
     * Delete an EnterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName Name of the EnterprisePolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String enterprisePolicyName);

    /**
     * Delete an EnterprisePolicy.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param enterprisePolicyName Name of the EnterprisePolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String enterprisePolicyName, Context context);

    /**
     * Retrieve a list of EnterprisePolicies within a given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list EnterprisePolicy operation.
     */
    PagedIterable<EnterprisePolicy> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieve a list of EnterprisePolicies within a given resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list EnterprisePolicy operation.
     */
    PagedIterable<EnterprisePolicy> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve a list of EnterprisePolicies within a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list EnterprisePolicy operation.
     */
    PagedIterable<EnterprisePolicy> list();

    /**
     * Retrieve a list of EnterprisePolicies within a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of the list EnterprisePolicy operation.
     */
    PagedIterable<EnterprisePolicy> list(Context context);

    /**
     * Get information about an EnterprisePolicy.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an EnterprisePolicy.
     */
    EnterprisePolicy getById(String id);

    /**
     * Get information about an EnterprisePolicy.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about an EnterprisePolicy.
     */
    Response<EnterprisePolicy> getByIdWithResponse(String id, Context context);

    /**
     * Delete an EnterprisePolicy.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete an EnterprisePolicy.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new EnterprisePolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new EnterprisePolicy definition.
     */
    EnterprisePolicy.DefinitionStages.Blank define(String name);
}
