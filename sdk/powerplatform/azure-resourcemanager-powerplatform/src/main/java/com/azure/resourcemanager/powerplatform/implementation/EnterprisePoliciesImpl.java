// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerplatform.fluent.EnterprisePoliciesClient;
import com.azure.resourcemanager.powerplatform.fluent.models.EnterprisePolicyInner;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicies;
import com.azure.resourcemanager.powerplatform.models.EnterprisePolicy;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class EnterprisePoliciesImpl implements EnterprisePolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EnterprisePoliciesImpl.class);

    private final EnterprisePoliciesClient innerClient;

    private final com.azure.resourcemanager.powerplatform.PowerPlatformManager serviceManager;

    public EnterprisePoliciesImpl(
        EnterprisePoliciesClient innerClient,
        com.azure.resourcemanager.powerplatform.PowerPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public EnterprisePolicy getByResourceGroup(String resourceGroupName, String enterprisePolicyName) {
        EnterprisePolicyInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, enterprisePolicyName);
        if (inner != null) {
            return new EnterprisePolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EnterprisePolicy> getByResourceGroupWithResponse(
        String resourceGroupName, String enterprisePolicyName, Context context) {
        Response<EnterprisePolicyInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, enterprisePolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EnterprisePolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String enterprisePolicyName) {
        this.serviceClient().delete(resourceGroupName, enterprisePolicyName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String enterprisePolicyName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, enterprisePolicyName, context);
    }

    public PagedIterable<EnterprisePolicy> listByResourceGroup(String resourceGroupName) {
        PagedIterable<EnterprisePolicyInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new EnterprisePolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<EnterprisePolicy> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<EnterprisePolicyInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new EnterprisePolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<EnterprisePolicy> list() {
        PagedIterable<EnterprisePolicyInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new EnterprisePolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<EnterprisePolicy> list(Context context) {
        PagedIterable<EnterprisePolicyInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new EnterprisePolicyImpl(inner1, this.manager()));
    }

    public EnterprisePolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enterprisePolicyName = Utils.getValueFromIdByName(id, "enterprisePolicies");
        if (enterprisePolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'enterprisePolicies'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, enterprisePolicyName, Context.NONE).getValue();
    }

    public Response<EnterprisePolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enterprisePolicyName = Utils.getValueFromIdByName(id, "enterprisePolicies");
        if (enterprisePolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'enterprisePolicies'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, enterprisePolicyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enterprisePolicyName = Utils.getValueFromIdByName(id, "enterprisePolicies");
        if (enterprisePolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'enterprisePolicies'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, enterprisePolicyName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String enterprisePolicyName = Utils.getValueFromIdByName(id, "enterprisePolicies");
        if (enterprisePolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'enterprisePolicies'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, enterprisePolicyName, context);
    }

    private EnterprisePoliciesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.powerplatform.PowerPlatformManager manager() {
        return this.serviceManager;
    }

    public EnterprisePolicyImpl define(String name) {
        return new EnterprisePolicyImpl(name, this.manager());
    }
}
