// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerplatform.models.Status;
import com.azure.resourcemanager.powerplatform.models.SubnetEndpointProperty;
import com.azure.resourcemanager.powerplatform.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A subnet. */
@JsonFlatten
@Fluent
public class SubnetInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SubnetInner.class);

    /*
     * Endpoint of the subnet.
     */
    @JsonProperty(value = "properties.subnet")
    private SubnetEndpointProperty subnet;

    /*
     * The virtual network ID. This is typically a GUID. Expect a null GUID by
     * default.
     */
    @JsonProperty(value = "properties.vnetid", access = JsonProperty.Access.WRITE_ONLY)
    private String vnetid;

    /*
     * Connection State of the subnet.
     */
    @JsonProperty(value = "properties.status")
    private Status status;

    /*
     * Metadata for the subnet.
     */
    @JsonProperty(value = "properties.systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Region where the EnterprisePolicy is located.
     */
    @JsonProperty(value = "location", access = JsonProperty.Access.WRITE_ONLY)
    private String location;

    /**
     * Get the subnet property: Endpoint of the subnet.
     *
     * @return the subnet value.
     */
    public SubnetEndpointProperty subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Endpoint of the subnet.
     *
     * @param subnet the subnet value to set.
     * @return the SubnetInner object itself.
     */
    public SubnetInner withSubnet(SubnetEndpointProperty subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get the vnetid property: The virtual network ID. This is typically a GUID. Expect a null GUID by default.
     *
     * @return the vnetid value.
     */
    public String vnetid() {
        return this.vnetid;
    }

    /**
     * Get the status property: Connection State of the subnet.
     *
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Connection State of the subnet.
     *
     * @param status the status value to set.
     * @return the SubnetInner object itself.
     */
    public SubnetInner withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the systemData property: Metadata for the subnet.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the location property: Region where the EnterprisePolicy is located.
     *
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
        if (systemData() != null) {
            systemData().validate();
        }
    }
}
