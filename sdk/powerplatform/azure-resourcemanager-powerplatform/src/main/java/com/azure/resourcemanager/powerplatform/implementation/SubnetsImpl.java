// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.powerplatform.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.powerplatform.fluent.SubnetsClient;
import com.azure.resourcemanager.powerplatform.fluent.models.SubnetInner;
import com.azure.resourcemanager.powerplatform.models.Subnet;
import com.azure.resourcemanager.powerplatform.models.Subnets;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SubnetsImpl implements Subnets {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SubnetsImpl.class);

    private final SubnetsClient innerClient;

    private final com.azure.resourcemanager.powerplatform.PowerPlatformManager serviceManager;

    public SubnetsImpl(
        SubnetsClient innerClient, com.azure.resourcemanager.powerplatform.PowerPlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Subnet get(String resourceGroupName, String enterprisePolicyName, String subnetName) {
        SubnetInner inner = this.serviceClient().get(resourceGroupName, enterprisePolicyName, subnetName);
        if (inner != null) {
            return new SubnetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Subnet> getWithResponse(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        Response<SubnetInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, enterprisePolicyName, subnetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SubnetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Subnet createOrUpdate(String resourceGroupName, String enterprisePolicyName, String subnetName) {
        SubnetInner inner = this.serviceClient().createOrUpdate(resourceGroupName, enterprisePolicyName, subnetName);
        if (inner != null) {
            return new SubnetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Subnet> createOrUpdateWithResponse(
        String resourceGroupName, String enterprisePolicyName, String subnetName, Context context) {
        Response<SubnetInner> inner =
            this
                .serviceClient()
                .createOrUpdateWithResponse(resourceGroupName, enterprisePolicyName, subnetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SubnetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Subnet> listByEnterprisePolicy(String resourceGroupName, String enterprisePolicyName) {
        PagedIterable<SubnetInner> inner =
            this.serviceClient().listByEnterprisePolicy(resourceGroupName, enterprisePolicyName);
        return Utils.mapPage(inner, inner1 -> new SubnetImpl(inner1, this.manager()));
    }

    public PagedIterable<Subnet> listByEnterprisePolicy(
        String resourceGroupName, String enterprisePolicyName, Context context) {
        PagedIterable<SubnetInner> inner =
            this.serviceClient().listByEnterprisePolicy(resourceGroupName, enterprisePolicyName, context);
        return Utils.mapPage(inner, inner1 -> new SubnetImpl(inner1, this.manager()));
    }

    private SubnetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.powerplatform.PowerPlatformManager manager() {
        return this.serviceManager;
    }
}
