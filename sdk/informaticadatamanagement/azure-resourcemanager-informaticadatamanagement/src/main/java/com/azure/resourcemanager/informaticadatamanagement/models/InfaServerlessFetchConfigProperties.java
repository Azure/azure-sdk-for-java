// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InfaServerlessFetchConfigProperties for the fetch all serverless API as received from informatica API response.
 */
@Immutable
public final class InfaServerlessFetchConfigProperties
    implements JsonSerializable<InfaServerlessFetchConfigProperties> {
    /*
     * subnet name
     */
    private String subnet;

    /*
     * applicationType name
     */
    private String applicationType;

    /*
     * Resource group name
     */
    private String resourceGroupName;

    /*
     * Advanced custom properties
     */
    private String advancedCustomProperties;

    /*
     * Supplementary File location
     */
    private String supplementaryFileLocation;

    /*
     * Serverless Account Platform
     */
    private String platform;

    /*
     * Tags for the resource
     */
    private String tags;

    /*
     * virtual network
     */
    private String vnet;

    /*
     * Execution timeout
     */
    private String executionTimeout;

    /*
     * Compute Units
     */
    private String computeUnits;

    /*
     * Tenant ID
     */
    private String tenantId;

    /*
     * subscription ID
     */
    private String subscriptionId;

    /*
     * region name for the runtime environment
     */
    private String region;

    /*
     * Serverless Arm Resource ID
     */
    private String serverlessArmResourceId;

    /**
     * Creates an instance of InfaServerlessFetchConfigProperties class.
     */
    private InfaServerlessFetchConfigProperties() {
    }

    /**
     * Get the subnet property: subnet name.
     * 
     * @return the subnet value.
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * Get the applicationType property: applicationType name.
     * 
     * @return the applicationType value.
     */
    public String applicationType() {
        return this.applicationType;
    }

    /**
     * Get the resourceGroupName property: Resource group name.
     * 
     * @return the resourceGroupName value.
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Get the advancedCustomProperties property: Advanced custom properties.
     * 
     * @return the advancedCustomProperties value.
     */
    public String advancedCustomProperties() {
        return this.advancedCustomProperties;
    }

    /**
     * Get the supplementaryFileLocation property: Supplementary File location.
     * 
     * @return the supplementaryFileLocation value.
     */
    public String supplementaryFileLocation() {
        return this.supplementaryFileLocation;
    }

    /**
     * Get the platform property: Serverless Account Platform.
     * 
     * @return the platform value.
     */
    public String platform() {
        return this.platform;
    }

    /**
     * Get the tags property: Tags for the resource.
     * 
     * @return the tags value.
     */
    public String tags() {
        return this.tags;
    }

    /**
     * Get the vnet property: virtual network.
     * 
     * @return the vnet value.
     */
    public String vnet() {
        return this.vnet;
    }

    /**
     * Get the executionTimeout property: Execution timeout.
     * 
     * @return the executionTimeout value.
     */
    public String executionTimeout() {
        return this.executionTimeout;
    }

    /**
     * Get the computeUnits property: Compute Units.
     * 
     * @return the computeUnits value.
     */
    public String computeUnits() {
        return this.computeUnits;
    }

    /**
     * Get the tenantId property: Tenant ID.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the subscriptionId property: subscription ID.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the region property: region name for the runtime environment.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Get the serverlessArmResourceId property: Serverless Arm Resource ID.
     * 
     * @return the serverlessArmResourceId value.
     */
    public String serverlessArmResourceId() {
        return this.serverlessArmResourceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnet", this.subnet);
        jsonWriter.writeStringField("applicationType", this.applicationType);
        jsonWriter.writeStringField("resourceGroupName", this.resourceGroupName);
        jsonWriter.writeStringField("advancedCustomProperties", this.advancedCustomProperties);
        jsonWriter.writeStringField("supplementaryFileLocation", this.supplementaryFileLocation);
        jsonWriter.writeStringField("platform", this.platform);
        jsonWriter.writeStringField("tags", this.tags);
        jsonWriter.writeStringField("vnet", this.vnet);
        jsonWriter.writeStringField("executionTimeout", this.executionTimeout);
        jsonWriter.writeStringField("computeUnits", this.computeUnits);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("serverlessArmResourceId", this.serverlessArmResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InfaServerlessFetchConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InfaServerlessFetchConfigProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InfaServerlessFetchConfigProperties.
     */
    public static InfaServerlessFetchConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InfaServerlessFetchConfigProperties deserializedInfaServerlessFetchConfigProperties
                = new InfaServerlessFetchConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnet".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.subnet = reader.getString();
                } else if ("applicationType".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.applicationType = reader.getString();
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.resourceGroupName = reader.getString();
                } else if ("advancedCustomProperties".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.advancedCustomProperties = reader.getString();
                } else if ("supplementaryFileLocation".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.supplementaryFileLocation = reader.getString();
                } else if ("platform".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.platform = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.tags = reader.getString();
                } else if ("vnet".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.vnet = reader.getString();
                } else if ("executionTimeout".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.executionTimeout = reader.getString();
                } else if ("computeUnits".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.computeUnits = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.tenantId = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.subscriptionId = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.region = reader.getString();
                } else if ("serverlessArmResourceId".equals(fieldName)) {
                    deserializedInfaServerlessFetchConfigProperties.serverlessArmResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInfaServerlessFetchConfigProperties;
        });
    }
}
