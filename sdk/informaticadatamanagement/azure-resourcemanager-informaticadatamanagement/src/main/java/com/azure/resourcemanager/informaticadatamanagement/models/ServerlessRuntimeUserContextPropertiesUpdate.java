// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The template for adding optional properties.
 */
@Fluent
public final class ServerlessRuntimeUserContextPropertiesUpdate
    implements JsonSerializable<ServerlessRuntimeUserContextPropertiesUpdate> {
    /*
     * User context token for OBO flow.
     */
    private String userContextToken;

    /**
     * Creates an instance of ServerlessRuntimeUserContextPropertiesUpdate class.
     */
    public ServerlessRuntimeUserContextPropertiesUpdate() {
    }

    /**
     * Get the userContextToken property: User context token for OBO flow.
     * 
     * @return the userContextToken value.
     */
    public String userContextToken() {
        return this.userContextToken;
    }

    /**
     * Set the userContextToken property: User context token for OBO flow.
     * 
     * @param userContextToken the userContextToken value to set.
     * @return the ServerlessRuntimeUserContextPropertiesUpdate object itself.
     */
    public ServerlessRuntimeUserContextPropertiesUpdate withUserContextToken(String userContextToken) {
        this.userContextToken = userContextToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userContextToken", this.userContextToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeUserContextPropertiesUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeUserContextPropertiesUpdate if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeUserContextPropertiesUpdate.
     */
    public static ServerlessRuntimeUserContextPropertiesUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeUserContextPropertiesUpdate deserializedServerlessRuntimeUserContextPropertiesUpdate
                = new ServerlessRuntimeUserContextPropertiesUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userContextToken".equals(fieldName)) {
                    deserializedServerlessRuntimeUserContextPropertiesUpdate.userContextToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeUserContextPropertiesUpdate;
        });
    }
}
