// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Informatica Serverless Runtime Network Profile.
 */
@Fluent
public final class ServerlessRuntimeNetworkProfile implements JsonSerializable<ServerlessRuntimeNetworkProfile> {
    /*
     * Network Interface Configuration Profile
     */
    private NetworkInterfaceConfiguration networkInterfaceConfiguration;

    /**
     * Creates an instance of ServerlessRuntimeNetworkProfile class.
     */
    public ServerlessRuntimeNetworkProfile() {
    }

    /**
     * Get the networkInterfaceConfiguration property: Network Interface Configuration Profile.
     * 
     * @return the networkInterfaceConfiguration value.
     */
    public NetworkInterfaceConfiguration networkInterfaceConfiguration() {
        return this.networkInterfaceConfiguration;
    }

    /**
     * Set the networkInterfaceConfiguration property: Network Interface Configuration Profile.
     * 
     * @param networkInterfaceConfiguration the networkInterfaceConfiguration value to set.
     * @return the ServerlessRuntimeNetworkProfile object itself.
     */
    public ServerlessRuntimeNetworkProfile
        withNetworkInterfaceConfiguration(NetworkInterfaceConfiguration networkInterfaceConfiguration) {
        this.networkInterfaceConfiguration = networkInterfaceConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaceConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkInterfaceConfiguration in model ServerlessRuntimeNetworkProfile"));
        } else {
            networkInterfaceConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerlessRuntimeNetworkProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("networkInterfaceConfiguration", this.networkInterfaceConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeNetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeNetworkProfile if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeNetworkProfile.
     */
    public static ServerlessRuntimeNetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeNetworkProfile deserializedServerlessRuntimeNetworkProfile
                = new ServerlessRuntimeNetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkInterfaceConfiguration".equals(fieldName)) {
                    deserializedServerlessRuntimeNetworkProfile.networkInterfaceConfiguration
                        = NetworkInterfaceConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeNetworkProfile;
        });
    }
}
