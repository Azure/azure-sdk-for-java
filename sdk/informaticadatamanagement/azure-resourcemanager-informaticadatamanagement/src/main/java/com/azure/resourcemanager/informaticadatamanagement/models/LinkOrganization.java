// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Link Organization.
 */
@Fluent
public final class LinkOrganization implements JsonSerializable<LinkOrganization> {
    /*
     * Link organization token
     */
    private String token;

    /**
     * Creates an instance of LinkOrganization class.
     */
    public LinkOrganization() {
    }

    /**
     * Get the token property: Link organization token.
     * 
     * @return the token value.
     */
    public String token() {
        return this.token;
    }

    /**
     * Set the token property: Link organization token.
     * 
     * @param token the token value to set.
     * @return the LinkOrganization object itself.
     */
    public LinkOrganization withToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkOrganization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkOrganization if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkOrganization.
     */
    public static LinkOrganization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkOrganization deserializedLinkOrganization = new LinkOrganization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("token".equals(fieldName)) {
                    deserializedLinkOrganization.token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkOrganization;
        });
    }
}
