// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Serverless Runtime config properties.
 */
@Fluent
public final class ServerlessRuntimeConfigProperties implements JsonSerializable<ServerlessRuntimeConfigProperties> {
    /*
     * The List of Informatica Serverless Runtime CDI Config Properties.
     */
    private List<CdiConfigProps> cdiConfigProps;

    /*
     * The List of Informatica Serverless Runtime CDIE Config Properties.
     */
    private List<CdiConfigProps> cdieConfigProps;

    /**
     * Creates an instance of ServerlessRuntimeConfigProperties class.
     */
    public ServerlessRuntimeConfigProperties() {
    }

    /**
     * Get the cdiConfigProps property: The List of Informatica Serverless Runtime CDI Config Properties.
     * 
     * @return the cdiConfigProps value.
     */
    public List<CdiConfigProps> cdiConfigProps() {
        return this.cdiConfigProps;
    }

    /**
     * Set the cdiConfigProps property: The List of Informatica Serverless Runtime CDI Config Properties.
     * 
     * @param cdiConfigProps the cdiConfigProps value to set.
     * @return the ServerlessRuntimeConfigProperties object itself.
     */
    public ServerlessRuntimeConfigProperties withCdiConfigProps(List<CdiConfigProps> cdiConfigProps) {
        this.cdiConfigProps = cdiConfigProps;
        return this;
    }

    /**
     * Get the cdieConfigProps property: The List of Informatica Serverless Runtime CDIE Config Properties.
     * 
     * @return the cdieConfigProps value.
     */
    public List<CdiConfigProps> cdieConfigProps() {
        return this.cdieConfigProps;
    }

    /**
     * Set the cdieConfigProps property: The List of Informatica Serverless Runtime CDIE Config Properties.
     * 
     * @param cdieConfigProps the cdieConfigProps value to set.
     * @return the ServerlessRuntimeConfigProperties object itself.
     */
    public ServerlessRuntimeConfigProperties withCdieConfigProps(List<CdiConfigProps> cdieConfigProps) {
        this.cdieConfigProps = cdieConfigProps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cdiConfigProps() != null) {
            cdiConfigProps().forEach(e -> e.validate());
        }
        if (cdieConfigProps() != null) {
            cdieConfigProps().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("cdiConfigProps", this.cdiConfigProps,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cdieConfigProps", this.cdieConfigProps,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeConfigProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeConfigProperties.
     */
    public static ServerlessRuntimeConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeConfigProperties deserializedServerlessRuntimeConfigProperties
                = new ServerlessRuntimeConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cdiConfigProps".equals(fieldName)) {
                    List<CdiConfigProps> cdiConfigProps = reader.readArray(reader1 -> CdiConfigProps.fromJson(reader1));
                    deserializedServerlessRuntimeConfigProperties.cdiConfigProps = cdiConfigProps;
                } else if ("cdieConfigProps".equals(fieldName)) {
                    List<CdiConfigProps> cdieConfigProps
                        = reader.readArray(reader1 -> CdiConfigProps.fromJson(reader1));
                    deserializedServerlessRuntimeConfigProperties.cdieConfigProps = cdieConfigProps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeConfigProperties;
        });
    }
}
