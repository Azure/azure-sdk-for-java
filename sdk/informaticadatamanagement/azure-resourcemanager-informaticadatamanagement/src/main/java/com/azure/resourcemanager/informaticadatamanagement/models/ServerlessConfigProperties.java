// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Metadata Serverless Config Properties.
 */
@Immutable
public final class ServerlessConfigProperties implements JsonSerializable<ServerlessConfigProperties> {
    /*
     * Platform types
     */
    private PlatformType platform;

    /*
     * List of application types supported by informatica
     */
    private List<ApplicationTypeMetadata> applicationTypes;

    /*
     * The list of compute units with possible array of values
     */
    private List<ComputeUnitsMetadata> computeUnits;

    /*
     * Serverless Runtime execution timeout
     */
    private String executionTimeout;

    /*
     * List of supported serverless informatica regions
     */
    private List<RegionsMetadata> regions;

    /**
     * Creates an instance of ServerlessConfigProperties class.
     */
    private ServerlessConfigProperties() {
    }

    /**
     * Get the platform property: Platform types.
     * 
     * @return the platform value.
     */
    public PlatformType platform() {
        return this.platform;
    }

    /**
     * Get the applicationTypes property: List of application types supported by informatica.
     * 
     * @return the applicationTypes value.
     */
    public List<ApplicationTypeMetadata> applicationTypes() {
        return this.applicationTypes;
    }

    /**
     * Get the computeUnits property: The list of compute units with possible array of values.
     * 
     * @return the computeUnits value.
     */
    public List<ComputeUnitsMetadata> computeUnits() {
        return this.computeUnits;
    }

    /**
     * Get the executionTimeout property: Serverless Runtime execution timeout.
     * 
     * @return the executionTimeout value.
     */
    public String executionTimeout() {
        return this.executionTimeout;
    }

    /**
     * Get the regions property: List of supported serverless informatica regions.
     * 
     * @return the regions value.
     */
    public List<RegionsMetadata> regions() {
        return this.regions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationTypes() != null) {
            applicationTypes().forEach(e -> e.validate());
        }
        if (computeUnits() != null) {
            computeUnits().forEach(e -> e.validate());
        }
        if (regions() != null) {
            regions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("platform", this.platform == null ? null : this.platform.toString());
        jsonWriter.writeArrayField("applicationTypes", this.applicationTypes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("computeUnits", this.computeUnits, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("executionTimeout", this.executionTimeout);
        jsonWriter.writeArrayField("regions", this.regions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessConfigProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessConfigProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessConfigProperties.
     */
    public static ServerlessConfigProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessConfigProperties deserializedServerlessConfigProperties = new ServerlessConfigProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("platform".equals(fieldName)) {
                    deserializedServerlessConfigProperties.platform = PlatformType.fromString(reader.getString());
                } else if ("applicationTypes".equals(fieldName)) {
                    List<ApplicationTypeMetadata> applicationTypes
                        = reader.readArray(reader1 -> ApplicationTypeMetadata.fromJson(reader1));
                    deserializedServerlessConfigProperties.applicationTypes = applicationTypes;
                } else if ("computeUnits".equals(fieldName)) {
                    List<ComputeUnitsMetadata> computeUnits
                        = reader.readArray(reader1 -> ComputeUnitsMetadata.fromJson(reader1));
                    deserializedServerlessConfigProperties.computeUnits = computeUnits;
                } else if ("executionTimeout".equals(fieldName)) {
                    deserializedServerlessConfigProperties.executionTimeout = reader.getString();
                } else if ("regions".equals(fieldName)) {
                    List<RegionsMetadata> regions = reader.readArray(reader1 -> RegionsMetadata.fromJson(reader1));
                    deserializedServerlessConfigProperties.regions = regions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessConfigProperties;
        });
    }
}
