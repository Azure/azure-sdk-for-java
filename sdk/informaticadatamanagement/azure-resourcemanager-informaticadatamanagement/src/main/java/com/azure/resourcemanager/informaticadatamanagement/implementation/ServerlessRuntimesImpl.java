// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.informaticadatamanagement.fluent.ServerlessRuntimesClient;
import com.azure.resourcemanager.informaticadatamanagement.fluent.models.CheckDependenciesResponseInner;
import com.azure.resourcemanager.informaticadatamanagement.fluent.models.InformaticaServerlessRuntimeResourceInner;
import com.azure.resourcemanager.informaticadatamanagement.models.CheckDependenciesResponse;
import com.azure.resourcemanager.informaticadatamanagement.models.InformaticaServerlessRuntimeResource;
import com.azure.resourcemanager.informaticadatamanagement.models.ServerlessRuntimes;

public final class ServerlessRuntimesImpl implements ServerlessRuntimes {
    private static final ClientLogger LOGGER = new ClientLogger(ServerlessRuntimesImpl.class);

    private final ServerlessRuntimesClient innerClient;

    private final com.azure.resourcemanager.informaticadatamanagement.InformaticaDataManagementManager serviceManager;

    public ServerlessRuntimesImpl(ServerlessRuntimesClient innerClient,
        com.azure.resourcemanager.informaticadatamanagement.InformaticaDataManagementManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InformaticaServerlessRuntimeResource>
        listByInformaticaOrganizationResource(String resourceGroupName, String organizationName) {
        PagedIterable<InformaticaServerlessRuntimeResourceInner> inner
            = this.serviceClient().listByInformaticaOrganizationResource(resourceGroupName, organizationName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new InformaticaServerlessRuntimeResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InformaticaServerlessRuntimeResource>
        listByInformaticaOrganizationResource(String resourceGroupName, String organizationName, Context context) {
        PagedIterable<InformaticaServerlessRuntimeResourceInner> inner
            = this.serviceClient().listByInformaticaOrganizationResource(resourceGroupName, organizationName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new InformaticaServerlessRuntimeResourceImpl(inner1, this.manager()));
    }

    public Response<InformaticaServerlessRuntimeResource> getWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        Response<InformaticaServerlessRuntimeResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new InformaticaServerlessRuntimeResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InformaticaServerlessRuntimeResource get(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        InformaticaServerlessRuntimeResourceInner inner
            = this.serviceClient().get(resourceGroupName, organizationName, serverlessRuntimeName);
        if (inner != null) {
            return new InformaticaServerlessRuntimeResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String organizationName, String serverlessRuntimeName) {
        this.serviceClient().delete(resourceGroupName, organizationName, serverlessRuntimeName);
    }

    public void delete(String resourceGroupName, String organizationName, String serverlessRuntimeName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, organizationName, serverlessRuntimeName, context);
    }

    public Response<CheckDependenciesResponse> checkDependenciesWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        Response<CheckDependenciesResponseInner> inner = this.serviceClient()
            .checkDependenciesWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckDependenciesResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckDependenciesResponse checkDependencies(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        CheckDependenciesResponseInner inner
            = this.serviceClient().checkDependencies(resourceGroupName, organizationName, serverlessRuntimeName);
        if (inner != null) {
            return new CheckDependenciesResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<InformaticaServerlessRuntimeResource> serverlessResourceByIdWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        Response<InformaticaServerlessRuntimeResourceInner> inner = this.serviceClient()
            .serverlessResourceByIdWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new InformaticaServerlessRuntimeResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InformaticaServerlessRuntimeResource serverlessResourceById(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        InformaticaServerlessRuntimeResourceInner inner
            = this.serviceClient().serverlessResourceById(resourceGroupName, organizationName, serverlessRuntimeName);
        if (inner != null) {
            return new InformaticaServerlessRuntimeResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> startFailedServerlessRuntimeWithResponse(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, Context context) {
        return this.serviceClient()
            .startFailedServerlessRuntimeWithResponse(resourceGroupName, organizationName, serverlessRuntimeName,
                context);
    }

    public void startFailedServerlessRuntime(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        this.serviceClient().startFailedServerlessRuntime(resourceGroupName, organizationName, serverlessRuntimeName);
    }

    public InformaticaServerlessRuntimeResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String serverlessRuntimeName = ResourceManagerUtils.getValueFromIdByName(id, "serverlessRuntimes");
        if (serverlessRuntimeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serverlessRuntimes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, Context.NONE)
            .getValue();
    }

    public Response<InformaticaServerlessRuntimeResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String serverlessRuntimeName = ResourceManagerUtils.getValueFromIdByName(id, "serverlessRuntimes");
        if (serverlessRuntimeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serverlessRuntimes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String serverlessRuntimeName = ResourceManagerUtils.getValueFromIdByName(id, "serverlessRuntimes");
        if (serverlessRuntimeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serverlessRuntimes'.", id)));
        }
        this.delete(resourceGroupName, organizationName, serverlessRuntimeName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String organizationName = ResourceManagerUtils.getValueFromIdByName(id, "organizations");
        if (organizationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'organizations'.", id)));
        }
        String serverlessRuntimeName = ResourceManagerUtils.getValueFromIdByName(id, "serverlessRuntimes");
        if (serverlessRuntimeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'serverlessRuntimes'.", id)));
        }
        this.delete(resourceGroupName, organizationName, serverlessRuntimeName, context);
    }

    private ServerlessRuntimesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.informaticadatamanagement.InformaticaDataManagementManager manager() {
        return this.serviceManager;
    }

    public InformaticaServerlessRuntimeResourceImpl define(String name) {
        return new InformaticaServerlessRuntimeResourceImpl(name, this.manager());
    }
}
