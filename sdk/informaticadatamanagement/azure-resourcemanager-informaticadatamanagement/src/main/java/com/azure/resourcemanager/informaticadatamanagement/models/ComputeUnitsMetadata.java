// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Informatica Serverless Runtime Application type Metadata.
 */
@Immutable
public final class ComputeUnitsMetadata implements JsonSerializable<ComputeUnitsMetadata> {
    /*
     * ComputeUnit name
     */
    private String name;

    /*
     * ComputeUnit value
     */
    private List<String> value;

    /**
     * Creates an instance of ComputeUnitsMetadata class.
     */
    private ComputeUnitsMetadata() {
    }

    /**
     * Get the name property: ComputeUnit name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the value property: ComputeUnit value.
     * 
     * @return the value value.
     */
    public List<String> value() {
        return this.value;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeUnitsMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeUnitsMetadata if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeUnitsMetadata.
     */
    public static ComputeUnitsMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeUnitsMetadata deserializedComputeUnitsMetadata = new ComputeUnitsMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedComputeUnitsMetadata.name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    List<String> value = reader.readArray(reader1 -> reader1.getString());
                    deserializedComputeUnitsMetadata.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeUnitsMetadata;
        });
    }
}
