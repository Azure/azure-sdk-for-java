// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dependency reference for a serverless runtime resource.
 */
@Immutable
public final class ServerlessRuntimeDependency implements JsonSerializable<ServerlessRuntimeDependency> {
    /*
     * Dependency ID
     */
    private String id;

    /*
     * Application context ID
     */
    private String appContextId;

    /*
     * Dependency path
     */
    private String path;

    /*
     * document type
     */
    private String documentType;

    /*
     * description of Dependency
     */
    private String description;

    /*
     * Last Update Time
     */
    private String lastUpdatedTime;

    /**
     * Creates an instance of ServerlessRuntimeDependency class.
     */
    private ServerlessRuntimeDependency() {
    }

    /**
     * Get the id property: Dependency ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the appContextId property: Application context ID.
     * 
     * @return the appContextId value.
     */
    public String appContextId() {
        return this.appContextId;
    }

    /**
     * Get the path property: Dependency path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Get the documentType property: document type.
     * 
     * @return the documentType value.
     */
    public String documentType() {
        return this.documentType;
    }

    /**
     * Get the description property: description of Dependency.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the lastUpdatedTime property: Last Update Time.
     * 
     * @return the lastUpdatedTime value.
     */
    public String lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model ServerlessRuntimeDependency"));
        }
        if (appContextId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property appContextId in model ServerlessRuntimeDependency"));
        }
        if (path() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property path in model ServerlessRuntimeDependency"));
        }
        if (documentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property documentType in model ServerlessRuntimeDependency"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model ServerlessRuntimeDependency"));
        }
        if (lastUpdatedTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lastUpdatedTime in model ServerlessRuntimeDependency"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerlessRuntimeDependency.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("appContextId", this.appContextId);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("documentType", this.documentType);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("lastUpdatedTime", this.lastUpdatedTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeDependency if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeDependency.
     */
    public static ServerlessRuntimeDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeDependency deserializedServerlessRuntimeDependency = new ServerlessRuntimeDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.id = reader.getString();
                } else if ("appContextId".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.appContextId = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.path = reader.getString();
                } else if ("documentType".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.documentType = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.description = reader.getString();
                } else if ("lastUpdatedTime".equals(fieldName)) {
                    deserializedServerlessRuntimeDependency.lastUpdatedTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeDependency;
        });
    }
}
