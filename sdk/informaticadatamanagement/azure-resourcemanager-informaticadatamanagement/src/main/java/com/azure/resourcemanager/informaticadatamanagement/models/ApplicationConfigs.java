// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Application configs.
 */
@Fluent
public final class ApplicationConfigs {
    /*
     * Type of the application config.
     */
    @JsonProperty(value = "type", required = true)
    private String type;

    /*
     * Name of the application config.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Value of the application config.
     */
    @JsonProperty(value = "value", required = true)
    private String value;

    /*
     * Platform type of the application config.
     */
    @JsonProperty(value = "platform", required = true)
    private String platform;

    /*
     * Customized value of the application config.
     */
    @JsonProperty(value = "customized", required = true)
    private String customized;

    /*
     * Default value of the application config.
     */
    @JsonProperty(value = "defaultValue", required = true)
    private String defaultValue;

    /**
     * Creates an instance of ApplicationConfigs class.
     */
    public ApplicationConfigs() {
    }

    /**
     * Get the type property: Type of the application config.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the application config.
     * 
     * @param type the type value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Name of the application config.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the application config.
     * 
     * @param name the name value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the value property: Value of the application config.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Value of the application config.
     * 
     * @param value the value value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the platform property: Platform type of the application config.
     * 
     * @return the platform value.
     */
    public String platform() {
        return this.platform;
    }

    /**
     * Set the platform property: Platform type of the application config.
     * 
     * @param platform the platform value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the customized property: Customized value of the application config.
     * 
     * @return the customized value.
     */
    public String customized() {
        return this.customized;
    }

    /**
     * Set the customized property: Customized value of the application config.
     * 
     * @param customized the customized value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withCustomized(String customized) {
        this.customized = customized;
        return this;
    }

    /**
     * Get the defaultValue property: Default value of the application config.
     * 
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: Default value of the application config.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model ApplicationConfigs"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ApplicationConfigs"));
        }
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property value in model ApplicationConfigs"));
        }
        if (platform() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property platform in model ApplicationConfigs"));
        }
        if (customized() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property customized in model ApplicationConfigs"));
        }
        if (defaultValue() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property defaultValue in model ApplicationConfigs"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationConfigs.class);
}
