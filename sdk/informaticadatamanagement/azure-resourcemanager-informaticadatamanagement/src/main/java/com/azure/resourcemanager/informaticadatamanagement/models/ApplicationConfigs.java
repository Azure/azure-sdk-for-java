// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Application configs.
 */
@Fluent
public final class ApplicationConfigs implements JsonSerializable<ApplicationConfigs> {
    /*
     * Type of the application config.
     */
    private String type;

    /*
     * Name of the application config.
     */
    private String name;

    /*
     * Value of the application config.
     */
    private String value;

    /*
     * Platform type of the application config.
     */
    private String platform;

    /*
     * Customized value of the application config.
     */
    private String customized;

    /*
     * Default value of the application config.
     */
    private String defaultValue;

    /**
     * Creates an instance of ApplicationConfigs class.
     */
    public ApplicationConfigs() {
    }

    /**
     * Get the type property: Type of the application config.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Type of the application config.
     * 
     * @param type the type value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the name property: Name of the application config.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the application config.
     * 
     * @param name the name value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the value property: Value of the application config.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Value of the application config.
     * 
     * @param value the value value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the platform property: Platform type of the application config.
     * 
     * @return the platform value.
     */
    public String platform() {
        return this.platform;
    }

    /**
     * Set the platform property: Platform type of the application config.
     * 
     * @param platform the platform value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the customized property: Customized value of the application config.
     * 
     * @return the customized value.
     */
    public String customized() {
        return this.customized;
    }

    /**
     * Set the customized property: Customized value of the application config.
     * 
     * @param customized the customized value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withCustomized(String customized) {
        this.customized = customized;
        return this;
    }

    /**
     * Get the defaultValue property: Default value of the application config.
     * 
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: Default value of the application config.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the ApplicationConfigs object itself.
     */
    public ApplicationConfigs withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model ApplicationConfigs"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ApplicationConfigs"));
        }
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property value in model ApplicationConfigs"));
        }
        if (platform() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property platform in model ApplicationConfigs"));
        }
        if (customized() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property customized in model ApplicationConfigs"));
        }
        if (defaultValue() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property defaultValue in model ApplicationConfigs"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationConfigs.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("platform", this.platform);
        jsonWriter.writeStringField("customized", this.customized);
        jsonWriter.writeStringField("defaultValue", this.defaultValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationConfigs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationConfigs if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationConfigs.
     */
    public static ApplicationConfigs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationConfigs deserializedApplicationConfigs = new ApplicationConfigs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedApplicationConfigs.type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedApplicationConfigs.name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedApplicationConfigs.value = reader.getString();
                } else if ("platform".equals(fieldName)) {
                    deserializedApplicationConfigs.platform = reader.getString();
                } else if ("customized".equals(fieldName)) {
                    deserializedApplicationConfigs.customized = reader.getString();
                } else if ("defaultValue".equals(fieldName)) {
                    deserializedApplicationConfigs.defaultValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationConfigs;
        });
    }
}
