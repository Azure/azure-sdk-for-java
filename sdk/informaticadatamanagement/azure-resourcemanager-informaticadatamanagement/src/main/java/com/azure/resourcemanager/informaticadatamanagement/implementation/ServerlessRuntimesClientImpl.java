// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.informaticadatamanagement.fluent.ServerlessRuntimesClient;
import com.azure.resourcemanager.informaticadatamanagement.fluent.models.CheckDependenciesResponseInner;
import com.azure.resourcemanager.informaticadatamanagement.fluent.models.InformaticaServerlessRuntimeResourceInner;
import com.azure.resourcemanager.informaticadatamanagement.implementation.models.InformaticaServerlessRuntimeResourceListResult;
import com.azure.resourcemanager.informaticadatamanagement.models.InformaticaServerlessRuntimeResourceUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ServerlessRuntimesClient.
 */
public final class ServerlessRuntimesClientImpl implements ServerlessRuntimesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ServerlessRuntimesService service;

    /**
     * The service client containing this operation class.
     */
    private final DataManagementClientImpl client;

    /**
     * Initializes an instance of ServerlessRuntimesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ServerlessRuntimesClientImpl(DataManagementClientImpl client) {
        this.service = RestProxy.create(ServerlessRuntimesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataManagementClientServerlessRuntimes to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataManagementClient")
    public interface ServerlessRuntimesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InformaticaServerlessRuntimeResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") InformaticaServerlessRuntimeResourceInner resource, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InformaticaServerlessRuntimeResourceListResult>> listByInformaticaOrganizationResource(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InformaticaServerlessRuntimeResourceInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") InformaticaServerlessRuntimeResourceUpdate properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/checkDependencies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CheckDependenciesResponseInner>> checkDependencies(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/startFailedServerlessRuntime")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> startFailedServerlessRuntime(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/serverlessResourceById")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InformaticaServerlessRuntimeResourceInner>> serverlessResourceById(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @PathParam("serverlessRuntimeName") String serverlessRuntimeName, @HeaderParam("accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InformaticaServerlessRuntimeResourceListResult>> listByInformaticaOrganizationResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("accept") String accept, Context context);
    }

    /**
     * Get a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InformaticaServerlessRuntimeResource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> getWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InformaticaServerlessRuntimeResource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> getWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, organizationName, serverlessRuntimeName, accept, context);
    }

    /**
     * Get a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InformaticaServerlessRuntimeResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InformaticaServerlessRuntimeResourceInner> getAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        return getWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InformaticaServerlessRuntimeResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InformaticaServerlessRuntimeResourceInner> getWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        return getWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, context).block();
    }

    /**
     * Get a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InformaticaServerlessRuntimeResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InformaticaServerlessRuntimeResourceInner get(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        return getWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, Context.NONE).getValue();
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
                resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
            resource, context);
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InformaticaServerlessRuntimeResourceInner>, InformaticaServerlessRuntimeResourceInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String organizationName, String serverlessRuntimeName,
            InformaticaServerlessRuntimeResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource);
        return this.client
            .<InformaticaServerlessRuntimeResourceInner, InformaticaServerlessRuntimeResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), InformaticaServerlessRuntimeResourceInner.class,
                InformaticaServerlessRuntimeResourceInner.class, this.client.getContext());
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<InformaticaServerlessRuntimeResourceInner>, InformaticaServerlessRuntimeResourceInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String organizationName, String serverlessRuntimeName,
            InformaticaServerlessRuntimeResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, organizationName,
            serverlessRuntimeName, resource, context);
        return this.client
            .<InformaticaServerlessRuntimeResourceInner, InformaticaServerlessRuntimeResourceInner>getLroResult(mono,
                this.client.getHttpPipeline(), InformaticaServerlessRuntimeResourceInner.class,
                InformaticaServerlessRuntimeResourceInner.class, context);
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InformaticaServerlessRuntimeResourceInner>, InformaticaServerlessRuntimeResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String organizationName, String serverlessRuntimeName,
            InformaticaServerlessRuntimeResourceInner resource) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource)
            .getSyncPoller();
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<InformaticaServerlessRuntimeResourceInner>, InformaticaServerlessRuntimeResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String organizationName, String serverlessRuntimeName,
            InformaticaServerlessRuntimeResourceInner resource, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource, context)
            .getSyncPoller();
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InformaticaServerlessRuntimeResourceInner> createOrUpdateAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InformaticaServerlessRuntimeResourceInner> createOrUpdateAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InformaticaServerlessRuntimeResourceInner createOrUpdate(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource) {
        return createOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource).block();
    }

    /**
     * Create a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InformaticaServerlessRuntimeResourceInner createOrUpdate(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, InformaticaServerlessRuntimeResourceInner resource, Context context) {
        return createOrUpdateAsync(resourceGroupName, organizationName, serverlessRuntimeName, resource, context)
            .block();
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, organizationName, serverlessRuntimeName, accept, context);
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        return this.beginDeleteAsync(resourceGroupName, organizationName, serverlessRuntimeName).getSyncPoller();
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, organizationName, serverlessRuntimeName, context)
            .getSyncPoller();
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String organizationName, String serverlessRuntimeName) {
        return beginDeleteAsync(resourceGroupName, organizationName, serverlessRuntimeName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String organizationName, String serverlessRuntimeName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, organizationName, serverlessRuntimeName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String organizationName, String serverlessRuntimeName) {
        deleteAsync(resourceGroupName, organizationName, serverlessRuntimeName).block();
    }

    /**
     * Delete a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String organizationName, String serverlessRuntimeName,
        Context context) {
        deleteAsync(resourceGroupName, organizationName, serverlessRuntimeName, context).block();
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InformaticaServerlessRuntimeResourceInner>>
        listByInformaticaOrganizationResourceSinglePageAsync(String resourceGroupName, String organizationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByInformaticaOrganizationResource(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, organizationName,
                accept, context))
            .<PagedResponse<InformaticaServerlessRuntimeResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InformaticaServerlessRuntimeResourceInner>>
        listByInformaticaOrganizationResourceSinglePageAsync(String resourceGroupName, String organizationName,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByInformaticaOrganizationResource(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InformaticaServerlessRuntimeResourceInner>
        listByInformaticaOrganizationResourceAsync(String resourceGroupName, String organizationName) {
        return new PagedFlux<>(
            () -> listByInformaticaOrganizationResourceSinglePageAsync(resourceGroupName, organizationName),
            nextLink -> listByInformaticaOrganizationResourceNextSinglePageAsync(nextLink));
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InformaticaServerlessRuntimeResourceInner>
        listByInformaticaOrganizationResourceAsync(String resourceGroupName, String organizationName, Context context) {
        return new PagedFlux<>(
            () -> listByInformaticaOrganizationResourceSinglePageAsync(resourceGroupName, organizationName, context),
            nextLink -> listByInformaticaOrganizationResourceNextSinglePageAsync(nextLink, context));
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InformaticaServerlessRuntimeResourceInner>
        listByInformaticaOrganizationResource(String resourceGroupName, String organizationName) {
        return new PagedIterable<>(listByInformaticaOrganizationResourceAsync(resourceGroupName, organizationName));
    }

    /**
     * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InformaticaServerlessRuntimeResourceInner>
        listByInformaticaOrganizationResource(String resourceGroupName, String organizationName, Context context) {
        return new PagedIterable<>(
            listByInformaticaOrganizationResourceAsync(resourceGroupName, organizationName, context));
    }

    /**
     * Update a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> updateWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
                properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> updateWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceUpdate properties,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, organizationName, serverlessRuntimeName, accept, properties, context);
    }

    /**
     * Update a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InformaticaServerlessRuntimeResourceInner> updateAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceUpdate properties) {
        return updateWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InformaticaServerlessRuntimeResourceInner> updateWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, InformaticaServerlessRuntimeResourceUpdate properties,
        Context context) {
        return updateWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, properties, context)
            .block();
    }

    /**
     * Update a InformaticaServerlessRuntimeResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InformaticaServerlessRuntimeResourceInner update(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, InformaticaServerlessRuntimeResourceUpdate properties) {
        return updateWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, properties, Context.NONE)
            .getValue();
    }

    /**
     * Checks all dependencies for a serverless runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for the check dependencies API for an informatica serverless runtime resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckDependenciesResponseInner>> checkDependenciesWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkDependencies(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Checks all dependencies for a serverless runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for the check dependencies API for an informatica serverless runtime resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckDependenciesResponseInner>> checkDependenciesWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.checkDependencies(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
            context);
    }

    /**
     * Checks all dependencies for a serverless runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for the check dependencies API for an informatica serverless runtime resource on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckDependenciesResponseInner> checkDependenciesAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        return checkDependenciesWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Checks all dependencies for a serverless runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for the check dependencies API for an informatica serverless runtime resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckDependenciesResponseInner> checkDependenciesWithResponse(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        return checkDependenciesWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName, context)
            .block();
    }

    /**
     * Checks all dependencies for a serverless runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model for the check dependencies API for an informatica serverless runtime resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckDependenciesResponseInner checkDependencies(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        return checkDependenciesWithResponse(resourceGroupName, organizationName, serverlessRuntimeName, Context.NONE)
            .getValue();
    }

    /**
     * Starts a failed runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> startFailedServerlessRuntimeWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.startFailedServerlessRuntime(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, organizationName,
                serverlessRuntimeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Starts a failed runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> startFailedServerlessRuntimeWithResponseAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.startFailedServerlessRuntime(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
            context);
    }

    /**
     * Starts a failed runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startFailedServerlessRuntimeAsync(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        return startFailedServerlessRuntimeWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Starts a failed runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> startFailedServerlessRuntimeWithResponse(String resourceGroupName, String organizationName,
        String serverlessRuntimeName, Context context) {
        return startFailedServerlessRuntimeWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName,
            context).block();
    }

    /**
     * Starts a failed runtime resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startFailedServerlessRuntime(String resourceGroupName, String organizationName,
        String serverlessRuntimeName) {
        startFailedServerlessRuntimeWithResponse(resourceGroupName, organizationName, serverlessRuntimeName,
            Context.NONE);
    }

    /**
     * Returns a serverless runtime resource by ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> serverlessResourceByIdWithResponseAsync(
        String resourceGroupName, String organizationName, String serverlessRuntimeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.serverlessResourceById(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, organizationName,
                serverlessRuntimeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a serverless runtime resource by ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InformaticaServerlessRuntimeResourceInner>> serverlessResourceByIdWithResponseAsync(
        String resourceGroupName, String organizationName, String serverlessRuntimeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (serverlessRuntimeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverlessRuntimeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.serverlessResourceById(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, serverlessRuntimeName, accept,
            context);
    }

    /**
     * Returns a serverless runtime resource by ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InformaticaServerlessRuntimeResourceInner> serverlessResourceByIdAsync(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        return serverlessResourceByIdWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns a serverless runtime resource by ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InformaticaServerlessRuntimeResourceInner> serverlessResourceByIdWithResponse(
        String resourceGroupName, String organizationName, String serverlessRuntimeName, Context context) {
        return serverlessResourceByIdWithResponseAsync(resourceGroupName, organizationName, serverlessRuntimeName,
            context).block();
    }

    /**
     * Returns a serverless runtime resource by ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Organizations resource.
     * @param serverlessRuntimeName Name of the Serverless Runtime resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Serverless Runtime environment resource by Informatica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InformaticaServerlessRuntimeResourceInner serverlessResourceById(String resourceGroupName,
        String organizationName, String serverlessRuntimeName) {
        return serverlessResourceByIdWithResponse(resourceGroupName, organizationName, serverlessRuntimeName,
            Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InformaticaServerlessRuntimeResourceInner>>
        listByInformaticaOrganizationResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByInformaticaOrganizationResourceNext(nextLink,
                this.client.getEndpoint(), accept, context))
            .<PagedResponse<InformaticaServerlessRuntimeResourceInner>>map(
                res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                    res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InformaticaServerlessRuntimeResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InformaticaServerlessRuntimeResourceInner>>
        listByInformaticaOrganizationResourceNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByInformaticaOrganizationResourceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
