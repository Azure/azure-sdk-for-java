// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Informatica Serverless Runtime User context properties.
 */
@Fluent
public final class ServerlessRuntimeUserContextProperties
    implements JsonSerializable<ServerlessRuntimeUserContextProperties> {
    /*
     * User context token for OBO flow.
     */
    private String userContextToken;

    /**
     * Creates an instance of ServerlessRuntimeUserContextProperties class.
     */
    public ServerlessRuntimeUserContextProperties() {
    }

    /**
     * Get the userContextToken property: User context token for OBO flow.
     * 
     * @return the userContextToken value.
     */
    public String userContextToken() {
        return this.userContextToken;
    }

    /**
     * Set the userContextToken property: User context token for OBO flow.
     * 
     * @param userContextToken the userContextToken value to set.
     * @return the ServerlessRuntimeUserContextProperties object itself.
     */
    public ServerlessRuntimeUserContextProperties withUserContextToken(String userContextToken) {
        this.userContextToken = userContextToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userContextToken() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userContextToken in model ServerlessRuntimeUserContextProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerlessRuntimeUserContextProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userContextToken", this.userContextToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessRuntimeUserContextProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessRuntimeUserContextProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerlessRuntimeUserContextProperties.
     */
    public static ServerlessRuntimeUserContextProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessRuntimeUserContextProperties deserializedServerlessRuntimeUserContextProperties
                = new ServerlessRuntimeUserContextProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userContextToken".equals(fieldName)) {
                    deserializedServerlessRuntimeUserContextProperties.userContextToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessRuntimeUserContextProperties;
        });
    }
}
