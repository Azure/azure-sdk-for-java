// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Informatica runtime resource metadata as received via the informatica fetch all runtime environments API.
 */
@Immutable
public final class InfaRuntimeResourceFetchMetadata implements JsonSerializable<InfaRuntimeResourceFetchMetadata> {
    /*
     * Environment name
     */
    private String name;

    /*
     * Created time
     */
    private String createdTime;

    /*
     * Updated Time
     */
    private String updatedTime;

    /*
     * Created by
     */
    private String createdBy;

    /*
     * Last Updated by
     */
    private String updatedBy;

    /*
     * Informatica serverless runtime id
     */
    private String id;

    /*
     * Environment Type
     */
    private RuntimeType type;

    /*
     * Status of the environment
     */
    private String status;

    /*
     * Display message for the given status
     */
    private String statusLocalized;

    /*
     * status message
     */
    private String statusMessage;

    /*
     * Serverless Config Properties
     */
    private InfaServerlessFetchConfigProperties serverlessConfigProperties;

    /*
     * Description of the runtime resource
     */
    private String description;

    /**
     * Creates an instance of InfaRuntimeResourceFetchMetadata class.
     */
    private InfaRuntimeResourceFetchMetadata() {
    }

    /**
     * Get the name property: Environment name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the createdTime property: Created time.
     * 
     * @return the createdTime value.
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Get the updatedTime property: Updated Time.
     * 
     * @return the updatedTime value.
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    /**
     * Get the createdBy property: Created by.
     * 
     * @return the createdBy value.
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Get the updatedBy property: Last Updated by.
     * 
     * @return the updatedBy value.
     */
    public String updatedBy() {
        return this.updatedBy;
    }

    /**
     * Get the id property: Informatica serverless runtime id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: Environment Type.
     * 
     * @return the type value.
     */
    public RuntimeType type() {
        return this.type;
    }

    /**
     * Get the status property: Status of the environment.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the statusLocalized property: Display message for the given status.
     * 
     * @return the statusLocalized value.
     */
    public String statusLocalized() {
        return this.statusLocalized;
    }

    /**
     * Get the statusMessage property: status message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the serverlessConfigProperties property: Serverless Config Properties.
     * 
     * @return the serverlessConfigProperties value.
     */
    public InfaServerlessFetchConfigProperties serverlessConfigProperties() {
        return this.serverlessConfigProperties;
    }

    /**
     * Get the description property: Description of the runtime resource.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model InfaRuntimeResourceFetchMetadata"));
        }
        if (createdTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property createdTime in model InfaRuntimeResourceFetchMetadata"));
        }
        if (updatedTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property updatedTime in model InfaRuntimeResourceFetchMetadata"));
        }
        if (createdBy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property createdBy in model InfaRuntimeResourceFetchMetadata"));
        }
        if (updatedBy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property updatedBy in model InfaRuntimeResourceFetchMetadata"));
        }
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property id in model InfaRuntimeResourceFetchMetadata"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model InfaRuntimeResourceFetchMetadata"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model InfaRuntimeResourceFetchMetadata"));
        }
        if (statusLocalized() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statusLocalized in model InfaRuntimeResourceFetchMetadata"));
        }
        if (statusMessage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statusMessage in model InfaRuntimeResourceFetchMetadata"));
        }
        if (serverlessConfigProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serverlessConfigProperties in model InfaRuntimeResourceFetchMetadata"));
        } else {
            serverlessConfigProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(InfaRuntimeResourceFetchMetadata.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("createdTime", this.createdTime);
        jsonWriter.writeStringField("updatedTime", this.updatedTime);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeStringField("updatedBy", this.updatedBy);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("statusLocalized", this.statusLocalized);
        jsonWriter.writeStringField("statusMessage", this.statusMessage);
        jsonWriter.writeJsonField("serverlessConfigProperties", this.serverlessConfigProperties);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InfaRuntimeResourceFetchMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InfaRuntimeResourceFetchMetadata if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the InfaRuntimeResourceFetchMetadata.
     */
    public static InfaRuntimeResourceFetchMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InfaRuntimeResourceFetchMetadata deserializedInfaRuntimeResourceFetchMetadata
                = new InfaRuntimeResourceFetchMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.name = reader.getString();
                } else if ("createdTime".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.createdTime = reader.getString();
                } else if ("updatedTime".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.updatedTime = reader.getString();
                } else if ("createdBy".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.createdBy = reader.getString();
                } else if ("updatedBy".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.updatedBy = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.type = RuntimeType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.status = reader.getString();
                } else if ("statusLocalized".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.statusLocalized = reader.getString();
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.statusMessage = reader.getString();
                } else if ("serverlessConfigProperties".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.serverlessConfigProperties
                        = InfaServerlessFetchConfigProperties.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedInfaRuntimeResourceFetchMetadata.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInfaRuntimeResourceFetchMetadata;
        });
    }
}
