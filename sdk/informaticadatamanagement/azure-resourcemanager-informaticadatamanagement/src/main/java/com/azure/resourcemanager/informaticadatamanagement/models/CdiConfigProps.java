// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Informatica CDI Configuration Properties.
 */
@Fluent
public final class CdiConfigProps implements JsonSerializable<CdiConfigProps> {
    /*
     * EngineName of the application config.
     */
    private String engineName;

    /*
     * EngineVersion of the application config.
     */
    private String engineVersion;

    /*
     * ApplicationConfigs of the CDI or CDIE.
     */
    private List<ApplicationConfigs> applicationConfigs;

    /**
     * Creates an instance of CdiConfigProps class.
     */
    public CdiConfigProps() {
    }

    /**
     * Get the engineName property: EngineName of the application config.
     * 
     * @return the engineName value.
     */
    public String engineName() {
        return this.engineName;
    }

    /**
     * Set the engineName property: EngineName of the application config.
     * 
     * @param engineName the engineName value to set.
     * @return the CdiConfigProps object itself.
     */
    public CdiConfigProps withEngineName(String engineName) {
        this.engineName = engineName;
        return this;
    }

    /**
     * Get the engineVersion property: EngineVersion of the application config.
     * 
     * @return the engineVersion value.
     */
    public String engineVersion() {
        return this.engineVersion;
    }

    /**
     * Set the engineVersion property: EngineVersion of the application config.
     * 
     * @param engineVersion the engineVersion value to set.
     * @return the CdiConfigProps object itself.
     */
    public CdiConfigProps withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }

    /**
     * Get the applicationConfigs property: ApplicationConfigs of the CDI or CDIE.
     * 
     * @return the applicationConfigs value.
     */
    public List<ApplicationConfigs> applicationConfigs() {
        return this.applicationConfigs;
    }

    /**
     * Set the applicationConfigs property: ApplicationConfigs of the CDI or CDIE.
     * 
     * @param applicationConfigs the applicationConfigs value to set.
     * @return the CdiConfigProps object itself.
     */
    public CdiConfigProps withApplicationConfigs(List<ApplicationConfigs> applicationConfigs) {
        this.applicationConfigs = applicationConfigs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (engineName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property engineName in model CdiConfigProps"));
        }
        if (engineVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property engineVersion in model CdiConfigProps"));
        }
        if (applicationConfigs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applicationConfigs in model CdiConfigProps"));
        } else {
            applicationConfigs().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CdiConfigProps.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("engineName", this.engineName);
        jsonWriter.writeStringField("engineVersion", this.engineVersion);
        jsonWriter.writeArrayField("applicationConfigs", this.applicationConfigs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CdiConfigProps from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CdiConfigProps if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CdiConfigProps.
     */
    public static CdiConfigProps fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CdiConfigProps deserializedCdiConfigProps = new CdiConfigProps();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("engineName".equals(fieldName)) {
                    deserializedCdiConfigProps.engineName = reader.getString();
                } else if ("engineVersion".equals(fieldName)) {
                    deserializedCdiConfigProps.engineVersion = reader.getString();
                } else if ("applicationConfigs".equals(fieldName)) {
                    List<ApplicationConfigs> applicationConfigs
                        = reader.readArray(reader1 -> ApplicationConfigs.fromJson(reader1));
                    deserializedCdiConfigProps.applicationConfigs = applicationConfigs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCdiConfigProps;
        });
    }
}
