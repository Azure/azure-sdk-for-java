// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Marketplace details.
 */
@Fluent
public final class MarketplaceDetails implements JsonSerializable<MarketplaceDetails> {
    /*
     * Marketplace Subscription Id
     */
    private String marketplaceSubscriptionId;

    /*
     * Marketplace offer details.
     */
    private OfferDetails offerDetails;

    /**
     * Creates an instance of MarketplaceDetails class.
     */
    public MarketplaceDetails() {
    }

    /**
     * Get the marketplaceSubscriptionId property: Marketplace Subscription Id.
     * 
     * @return the marketplaceSubscriptionId value.
     */
    public String marketplaceSubscriptionId() {
        return this.marketplaceSubscriptionId;
    }

    /**
     * Set the marketplaceSubscriptionId property: Marketplace Subscription Id.
     * 
     * @param marketplaceSubscriptionId the marketplaceSubscriptionId value to set.
     * @return the MarketplaceDetails object itself.
     */
    public MarketplaceDetails withMarketplaceSubscriptionId(String marketplaceSubscriptionId) {
        this.marketplaceSubscriptionId = marketplaceSubscriptionId;
        return this;
    }

    /**
     * Get the offerDetails property: Marketplace offer details.
     * 
     * @return the offerDetails value.
     */
    public OfferDetails offerDetails() {
        return this.offerDetails;
    }

    /**
     * Set the offerDetails property: Marketplace offer details.
     * 
     * @param offerDetails the offerDetails value to set.
     * @return the MarketplaceDetails object itself.
     */
    public MarketplaceDetails withOfferDetails(OfferDetails offerDetails) {
        this.offerDetails = offerDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplaceSubscriptionId in model MarketplaceDetails"));
        }
        if (offerDetails() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property offerDetails in model MarketplaceDetails"));
        } else {
            offerDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MarketplaceDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("marketplaceSubscriptionId", this.marketplaceSubscriptionId);
        jsonWriter.writeJsonField("offerDetails", this.offerDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MarketplaceDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MarketplaceDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MarketplaceDetails.
     */
    public static MarketplaceDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MarketplaceDetails deserializedMarketplaceDetails = new MarketplaceDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplaceSubscriptionId".equals(fieldName)) {
                    deserializedMarketplaceDetails.marketplaceSubscriptionId = reader.getString();
                } else if ("offerDetails".equals(fieldName)) {
                    deserializedMarketplaceDetails.offerDetails = OfferDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMarketplaceDetails;
        });
    }
}
