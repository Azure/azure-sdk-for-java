// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.informaticadatamanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Company details of Informatica Organization resource.
 */
@Fluent
public final class CompanyDetailsUpdate implements JsonSerializable<CompanyDetailsUpdate> {
    /*
     * company Name
     */
    private String companyName;

    /*
     * Office Address
     */
    private String officeAddress;

    /*
     * Country name
     */
    private String country;

    /*
     * Domain name
     */
    private String domain;

    /*
     * Business phone number
     */
    private String business;

    /*
     * Number Of Employees
     */
    private Integer numberOfEmployees;

    /**
     * Creates an instance of CompanyDetailsUpdate class.
     */
    public CompanyDetailsUpdate() {
    }

    /**
     * Get the companyName property: company Name.
     * 
     * @return the companyName value.
     */
    public String companyName() {
        return this.companyName;
    }

    /**
     * Set the companyName property: company Name.
     * 
     * @param companyName the companyName value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }

    /**
     * Get the officeAddress property: Office Address.
     * 
     * @return the officeAddress value.
     */
    public String officeAddress() {
        return this.officeAddress;
    }

    /**
     * Set the officeAddress property: Office Address.
     * 
     * @param officeAddress the officeAddress value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withOfficeAddress(String officeAddress) {
        this.officeAddress = officeAddress;
        return this;
    }

    /**
     * Get the country property: Country name.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Country name.
     * 
     * @param country the country value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the domain property: Domain name.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Domain name.
     * 
     * @param domain the domain value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the business property: Business phone number.
     * 
     * @return the business value.
     */
    public String business() {
        return this.business;
    }

    /**
     * Set the business property: Business phone number.
     * 
     * @param business the business value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withBusiness(String business) {
        this.business = business;
        return this;
    }

    /**
     * Get the numberOfEmployees property: Number Of Employees.
     * 
     * @return the numberOfEmployees value.
     */
    public Integer numberOfEmployees() {
        return this.numberOfEmployees;
    }

    /**
     * Set the numberOfEmployees property: Number Of Employees.
     * 
     * @param numberOfEmployees the numberOfEmployees value to set.
     * @return the CompanyDetailsUpdate object itself.
     */
    public CompanyDetailsUpdate withNumberOfEmployees(Integer numberOfEmployees) {
        this.numberOfEmployees = numberOfEmployees;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("companyName", this.companyName);
        jsonWriter.writeStringField("officeAddress", this.officeAddress);
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("business", this.business);
        jsonWriter.writeNumberField("numberOfEmployees", this.numberOfEmployees);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompanyDetailsUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompanyDetailsUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CompanyDetailsUpdate.
     */
    public static CompanyDetailsUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompanyDetailsUpdate deserializedCompanyDetailsUpdate = new CompanyDetailsUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("companyName".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.companyName = reader.getString();
                } else if ("officeAddress".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.officeAddress = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.country = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.domain = reader.getString();
                } else if ("business".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.business = reader.getString();
                } else if ("numberOfEmployees".equals(fieldName)) {
                    deserializedCompanyDetailsUpdate.numberOfEmployees = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompanyDetailsUpdate;
        });
    }
}
