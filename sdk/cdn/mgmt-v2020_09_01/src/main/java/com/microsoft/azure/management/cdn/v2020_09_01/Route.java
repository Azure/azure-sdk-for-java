/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.RouteInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.CdnManager;
import java.util.List;

/**
 * Type representing Route.
 */
public interface Route extends HasInner<RouteInner>, Indexable, Refreshable<Route>, Updatable<Route.Update>, HasManager<CdnManager> {
    /**
     * @return the compressionSettings value.
     */
    Object compressionSettings();

    /**
     * @return the customDomains value.
     */
    List<ResourceReference> customDomains();

    /**
     * @return the deploymentStatus value.
     */
    DeploymentStatus deploymentStatus();

    /**
     * @return the enabledState value.
     */
    EnabledState enabledState();

    /**
     * @return the forwardingProtocol value.
     */
    ForwardingProtocol forwardingProtocol();

    /**
     * @return the httpsRedirect value.
     */
    HttpsRedirect httpsRedirect();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the linkToDefaultDomain value.
     */
    LinkToDefaultDomain linkToDefaultDomain();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the optimizationType value.
     */
    OptimizationType optimizationType();

    /**
     * @return the originGroup value.
     */
    ResourceReference originGroup();

    /**
     * @return the originPath value.
     */
    String originPath();

    /**
     * @return the patternsToMatch value.
     */
    List<String> patternsToMatch();

    /**
     * @return the provisioningState value.
     */
    AfdProvisioningState provisioningState();

    /**
     * @return the queryStringCachingBehavior value.
     */
    QueryStringCachingBehavior queryStringCachingBehavior();

    /**
     * @return the ruleSets value.
     */
    List<ResourceReference> ruleSets();

    /**
     * @return the supportedProtocols value.
     */
    List<AFDEndpointProtocols> supportedProtocols();

    /**
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the Route definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithAfdEndpoint, DefinitionStages.WithOriginGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Route definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Route definition.
         */
        interface Blank extends WithAfdEndpoint {
        }

        /**
         * The stage of the route definition allowing to specify AfdEndpoint.
         */
        interface WithAfdEndpoint {
           /**
            * Specifies resourceGroupName, profileName, endpointName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param profileName Name of the CDN profile which is unique within the resource group
            * @param endpointName Name of the endpoint under the profile which is unique globally
            * @return the next definition stage
            */
            WithOriginGroup withExistingAfdEndpoint(String resourceGroupName, String profileName, String endpointName);
        }

        /**
         * The stage of the route definition allowing to specify OriginGroup.
         */
        interface WithOriginGroup {
           /**
            * Specifies originGroup.
            * @param originGroup A reference to the origin group
            * @return the next definition stage
            */
            WithCreate withOriginGroup(ResourceReference originGroup);
        }

        /**
         * The stage of the route definition allowing to specify CompressionSettings.
         */
        interface WithCompressionSettings {
            /**
             * Specifies compressionSettings.
             * @param compressionSettings compression settings
             * @return the next definition stage
             */
            WithCreate withCompressionSettings(Object compressionSettings);
        }

        /**
         * The stage of the route definition allowing to specify CustomDomains.
         */
        interface WithCustomDomains {
            /**
             * Specifies customDomains.
             * @param customDomains Domains referenced by this endpoint
             * @return the next definition stage
             */
            WithCreate withCustomDomains(List<ResourceReference> customDomains);
        }

        /**
         * The stage of the route definition allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withEnabledState(EnabledState enabledState);
        }

        /**
         * The stage of the route definition allowing to specify ForwardingProtocol.
         */
        interface WithForwardingProtocol {
            /**
             * Specifies forwardingProtocol.
             * @param forwardingProtocol Protocol this rule will use when forwarding traffic to backends. Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'
             * @return the next definition stage
             */
            WithCreate withForwardingProtocol(ForwardingProtocol forwardingProtocol);
        }

        /**
         * The stage of the route definition allowing to specify HttpsRedirect.
         */
        interface WithHttpsRedirect {
            /**
             * Specifies httpsRedirect.
             * @param httpsRedirect Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withHttpsRedirect(HttpsRedirect httpsRedirect);
        }

        /**
         * The stage of the route definition allowing to specify LinkToDefaultDomain.
         */
        interface WithLinkToDefaultDomain {
            /**
             * Specifies linkToDefaultDomain.
             * @param linkToDefaultDomain whether this route will be linked to the default endpoint domain. Possible values include: 'Enabled', 'Disabled'
             * @return the next definition stage
             */
            WithCreate withLinkToDefaultDomain(LinkToDefaultDomain linkToDefaultDomain);
        }

        /**
         * The stage of the route definition allowing to specify OptimizationType.
         */
        interface WithOptimizationType {
            /**
             * Specifies optimizationType.
             * @param optimizationType Specifies what scenario the customer wants this AzureFrontDoor endpoint to optimize for, e.g. Download, Media services. With this information, AzureFrontDoor can apply scenario driven optimization. Possible values include: 'GeneralWebDelivery', 'GeneralMediaStreaming', 'VideoOnDemandMediaStreaming', 'LargeFileDownload', 'DynamicSiteAcceleration'
             * @return the next definition stage
             */
            WithCreate withOptimizationType(OptimizationType optimizationType);
        }

        /**
         * The stage of the route definition allowing to specify OriginPath.
         */
        interface WithOriginPath {
            /**
             * Specifies originPath.
             * @param originPath A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath
             * @return the next definition stage
             */
            WithCreate withOriginPath(String originPath);
        }

        /**
         * The stage of the route definition allowing to specify PatternsToMatch.
         */
        interface WithPatternsToMatch {
            /**
             * Specifies patternsToMatch.
             * @param patternsToMatch The route patterns of the rule
             * @return the next definition stage
             */
            WithCreate withPatternsToMatch(List<String> patternsToMatch);
        }

        /**
         * The stage of the route definition allowing to specify QueryStringCachingBehavior.
         */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies queryStringCachingBehavior.
             * @param queryStringCachingBehavior Defines how AzureFrontDoor caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL. Possible values include: 'IgnoreQueryString', 'BypassCaching', 'UseQueryString', 'NotSet'
             * @return the next definition stage
             */
            WithCreate withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }

        /**
         * The stage of the route definition allowing to specify RuleSets.
         */
        interface WithRuleSets {
            /**
             * Specifies ruleSets.
             * @param ruleSets rule sets referenced by this endpoint
             * @return the next definition stage
             */
            WithCreate withRuleSets(List<ResourceReference> ruleSets);
        }

        /**
         * The stage of the route definition allowing to specify SupportedProtocols.
         */
        interface WithSupportedProtocols {
            /**
             * Specifies supportedProtocols.
             * @param supportedProtocols List of supported protocols for this route
             * @return the next definition stage
             */
            WithCreate withSupportedProtocols(List<AFDEndpointProtocols> supportedProtocols);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Route>, DefinitionStages.WithCompressionSettings, DefinitionStages.WithCustomDomains, DefinitionStages.WithEnabledState, DefinitionStages.WithForwardingProtocol, DefinitionStages.WithHttpsRedirect, DefinitionStages.WithLinkToDefaultDomain, DefinitionStages.WithOptimizationType, DefinitionStages.WithOriginPath, DefinitionStages.WithPatternsToMatch, DefinitionStages.WithQueryStringCachingBehavior, DefinitionStages.WithRuleSets, DefinitionStages.WithSupportedProtocols {
        }
    }
    /**
     * The template for a Route update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Route>, UpdateStages.WithCompressionSettings, UpdateStages.WithCustomDomains, UpdateStages.WithEnabledState, UpdateStages.WithForwardingProtocol, UpdateStages.WithHttpsRedirect, UpdateStages.WithLinkToDefaultDomain, UpdateStages.WithOptimizationType, UpdateStages.WithOriginGroup, UpdateStages.WithOriginPath, UpdateStages.WithPatternsToMatch, UpdateStages.WithQueryStringCachingBehavior, UpdateStages.WithRuleSets, UpdateStages.WithSupportedProtocols {
    }

    /**
     * Grouping of Route update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the route update allowing to specify CompressionSettings.
         */
        interface WithCompressionSettings {
            /**
             * Specifies compressionSettings.
             * @param compressionSettings compression settings
             * @return the next update stage
             */
            Update withCompressionSettings(Object compressionSettings);
        }

        /**
         * The stage of the route update allowing to specify CustomDomains.
         */
        interface WithCustomDomains {
            /**
             * Specifies customDomains.
             * @param customDomains Domains referenced by this endpoint
             * @return the next update stage
             */
            Update withCustomDomains(List<ResourceReference> customDomains);
        }

        /**
         * The stage of the route update allowing to specify EnabledState.
         */
        interface WithEnabledState {
            /**
             * Specifies enabledState.
             * @param enabledState Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withEnabledState(EnabledState enabledState);
        }

        /**
         * The stage of the route update allowing to specify ForwardingProtocol.
         */
        interface WithForwardingProtocol {
            /**
             * Specifies forwardingProtocol.
             * @param forwardingProtocol Protocol this rule will use when forwarding traffic to backends. Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'
             * @return the next update stage
             */
            Update withForwardingProtocol(ForwardingProtocol forwardingProtocol);
        }

        /**
         * The stage of the route update allowing to specify HttpsRedirect.
         */
        interface WithHttpsRedirect {
            /**
             * Specifies httpsRedirect.
             * @param httpsRedirect Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withHttpsRedirect(HttpsRedirect httpsRedirect);
        }

        /**
         * The stage of the route update allowing to specify LinkToDefaultDomain.
         */
        interface WithLinkToDefaultDomain {
            /**
             * Specifies linkToDefaultDomain.
             * @param linkToDefaultDomain whether this route will be linked to the default endpoint domain. Possible values include: 'Enabled', 'Disabled'
             * @return the next update stage
             */
            Update withLinkToDefaultDomain(LinkToDefaultDomain linkToDefaultDomain);
        }

        /**
         * The stage of the route update allowing to specify OptimizationType.
         */
        interface WithOptimizationType {
            /**
             * Specifies optimizationType.
             * @param optimizationType Specifies what scenario the customer wants this AzureFrontDoor endpoint to optimize for, e.g. Download, Media services. With this information, AzureFrontDoor can apply scenario driven optimization. Possible values include: 'GeneralWebDelivery', 'GeneralMediaStreaming', 'VideoOnDemandMediaStreaming', 'LargeFileDownload', 'DynamicSiteAcceleration'
             * @return the next update stage
             */
            Update withOptimizationType(OptimizationType optimizationType);
        }

        /**
         * The stage of the route update allowing to specify OriginGroup.
         */
        interface WithOriginGroup {
            /**
             * Specifies originGroup.
             * @param originGroup A reference to the origin group
             * @return the next update stage
             */
            Update withOriginGroup(ResourceReference originGroup);
        }

        /**
         * The stage of the route update allowing to specify OriginPath.
         */
        interface WithOriginPath {
            /**
             * Specifies originPath.
             * @param originPath A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath
             * @return the next update stage
             */
            Update withOriginPath(String originPath);
        }

        /**
         * The stage of the route update allowing to specify PatternsToMatch.
         */
        interface WithPatternsToMatch {
            /**
             * Specifies patternsToMatch.
             * @param patternsToMatch The route patterns of the rule
             * @return the next update stage
             */
            Update withPatternsToMatch(List<String> patternsToMatch);
        }

        /**
         * The stage of the route update allowing to specify QueryStringCachingBehavior.
         */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies queryStringCachingBehavior.
             * @param queryStringCachingBehavior Defines how AzureFrontDoor caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL. Possible values include: 'IgnoreQueryString', 'BypassCaching', 'UseQueryString', 'NotSet'
             * @return the next update stage
             */
            Update withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }

        /**
         * The stage of the route update allowing to specify RuleSets.
         */
        interface WithRuleSets {
            /**
             * Specifies ruleSets.
             * @param ruleSets rule sets referenced by this endpoint
             * @return the next update stage
             */
            Update withRuleSets(List<ResourceReference> ruleSets);
        }

        /**
         * The stage of the route update allowing to specify SupportedProtocols.
         */
        interface WithSupportedProtocols {
            /**
             * Specifies supportedProtocols.
             * @param supportedProtocols List of supported protocols for this route
             * @return the next update stage
             */
            Update withSupportedProtocols(List<AFDEndpointProtocols> supportedProtocols);
        }

    }
}
