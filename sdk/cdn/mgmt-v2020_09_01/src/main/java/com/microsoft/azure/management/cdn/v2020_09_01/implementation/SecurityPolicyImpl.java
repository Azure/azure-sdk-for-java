/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01.implementation;

import com.microsoft.azure.management.cdn.v2020_09_01.SecurityPolicy;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_09_01.SecurityPolicyWebApplicationFirewallParameters;
import java.util.List;
import com.microsoft.azure.management.cdn.v2020_09_01.DeploymentStatus;
import com.microsoft.azure.management.cdn.v2020_09_01.AfdProvisioningState;
import com.microsoft.azure.management.cdn.v2020_09_01.SystemData;
import com.microsoft.azure.management.cdn.v2020_09_01.SecurityPolicyWebApplicationFirewallAssociation;
import com.microsoft.azure.management.cdn.v2020_09_01.ResourceReference;
import rx.functions.Func1;

class SecurityPolicyImpl extends CreatableUpdatableImpl<SecurityPolicy, SecurityPolicyInner, SecurityPolicyImpl> implements SecurityPolicy, SecurityPolicy.Definition, SecurityPolicy.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String securityPolicyName;
    private SecurityPolicyWebApplicationFirewallParameters cparameters;
    private SecurityPolicyWebApplicationFirewallParameters updateParameter;

    SecurityPolicyImpl(String name, CdnManager manager) {
        super(name, new SecurityPolicyInner());
        this.manager = manager;
        // Set resource name
        this.securityPolicyName = name;
        //
        this.cparameters = new SecurityPolicyWebApplicationFirewallParameters();
        this.updateParameter = new SecurityPolicyWebApplicationFirewallParameters();
    }

    SecurityPolicyImpl(SecurityPolicyInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.securityPolicyName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.securityPolicyName = IdParsingUtils.getValueFromIdByName(inner.id(), "securityPolicies");
        //
        this.cparameters = new SecurityPolicyWebApplicationFirewallParameters();
        this.updateParameter = new SecurityPolicyWebApplicationFirewallParameters();
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SecurityPolicy> createResourceAsync() {
        SecurityPoliciesInner client = this.manager().inner().securityPolicies();
        return client.createAsync(this.resourceGroupName, this.profileName, this.securityPolicyName, this.cparameters)
            .map(new Func1<SecurityPolicyInner, SecurityPolicyInner>() {
               @Override
               public SecurityPolicyInner call(SecurityPolicyInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SecurityPolicy> updateResourceAsync() {
        SecurityPoliciesInner client = this.manager().inner().securityPolicies();
        return client.patchAsync(this.resourceGroupName, this.profileName, this.securityPolicyName, this.updateParameter)
            .map(new Func1<SecurityPolicyInner, SecurityPolicyInner>() {
               @Override
               public SecurityPolicyInner call(SecurityPolicyInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SecurityPolicyInner> getInnerAsync() {
        SecurityPoliciesInner client = this.manager().inner().securityPolicies();
        return client.getAsync(this.resourceGroupName, this.profileName, this.securityPolicyName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cparameters = new SecurityPolicyWebApplicationFirewallParameters();
        this.updateParameter = new SecurityPolicyWebApplicationFirewallParameters();
    }

    @Override
    public DeploymentStatus deploymentStatus() {
        return this.inner().deploymentStatus();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public SecurityPolicyWebApplicationFirewallParameters parameters() {
        return this.inner().parameters();
    }

    @Override
    public AfdProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public SecurityPolicyImpl withExistingProfile(String resourceGroupName, String profileName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        return this;
    }

    @Override
    public SecurityPolicyImpl withParameters(SecurityPolicyWebApplicationFirewallParameters parameters) {
        this.cparameters = parameters;
        return this;
    }

    @Override
    public SecurityPolicyImpl withAssociations(List<SecurityPolicyWebApplicationFirewallAssociation> associations) {
        this.updateParameter.withAssociations(associations);
        return this;
    }

    @Override
    public SecurityPolicyImpl withWafPolicy(ResourceReference wafPolicy) {
        this.updateParameter.withWafPolicy(wafPolicy);
        return this;
    }

}
