/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.EndpointInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.CdnManager;
import java.util.Map;
import java.util.List;

/**
 * Type representing Endpoint.
 */
public interface Endpoint extends HasInner<EndpointInner>, Indexable, Refreshable<Endpoint>, Updatable<Endpoint.Update>, HasManager<CdnManager> {
    /**
     * @return the contentTypesToCompress value.
     */
    List<String> contentTypesToCompress();

    /**
     * @return the defaultOriginGroup value.
     */
    ResourceReference defaultOriginGroup();

    /**
     * @return the deliveryPolicy value.
     */
    EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy();

    /**
     * @return the geoFilters value.
     */
    List<GeoFilter> geoFilters();

    /**
     * @return the hostName value.
     */
    String hostName();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isCompressionEnabled value.
     */
    Boolean isCompressionEnabled();

    /**
     * @return the isHttpAllowed value.
     */
    Boolean isHttpAllowed();

    /**
     * @return the isHttpsAllowed value.
     */
    Boolean isHttpsAllowed();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the optimizationType value.
     */
    OptimizationType optimizationType();

    /**
     * @return the originGroups value.
     */
    List<DeepCreatedOriginGroup> originGroups();

    /**
     * @return the originHostHeader value.
     */
    String originHostHeader();

    /**
     * @return the originPath value.
     */
    String originPath();

    /**
     * @return the origins value.
     */
    List<DeepCreatedOrigin> origins();

    /**
     * @return the probePath value.
     */
    String probePath();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the queryStringCachingBehavior value.
     */
    QueryStringCachingBehavior queryStringCachingBehavior();

    /**
     * @return the resourceState value.
     */
    EndpointResourceState resourceState();

    /**
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the urlSigningKeys value.
     */
    List<UrlSigningKey> urlSigningKeys();

    /**
     * @return the webApplicationFirewallPolicyLink value.
     */
    EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink();

    /**
     * The entirety of the Endpoint definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithProfile, DefinitionStages.WithLocation, DefinitionStages.WithOrigins, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Endpoint definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Endpoint definition.
         */
        interface Blank extends WithProfile {
        }

        /**
         * The stage of the endpoint definition allowing to specify Profile.
         */
        interface WithProfile {
           /**
            * Specifies resourceGroupName, profileName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param profileName Name of the CDN profile which is unique within the resource group
            * @return the next definition stage
            */
            WithLocation withExistingProfile(String resourceGroupName, String profileName);
        }

        /**
         * The stage of the endpoint definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithOrigins withLocation(String location);
        }

        /**
         * The stage of the endpoint definition allowing to specify Origins.
         */
        interface WithOrigins {
           /**
            * Specifies origins.
            * @param origins The source of the content being delivered via CDN
            * @return the next definition stage
            */
            WithCreate withOrigins(List<DeepCreatedOrigin> origins);
        }

        /**
         * The stage of the endpoint definition allowing to specify ContentTypesToCompress.
         */
        interface WithContentTypesToCompress {
            /**
             * Specifies contentTypesToCompress.
             * @param contentTypesToCompress List of content types on which compression applies. The value should be a valid MIME type
             * @return the next definition stage
             */
            WithCreate withContentTypesToCompress(List<String> contentTypesToCompress);
        }

        /**
         * The stage of the endpoint definition allowing to specify DefaultOriginGroup.
         */
        interface WithDefaultOriginGroup {
            /**
             * Specifies defaultOriginGroup.
             * @param defaultOriginGroup A reference to the origin group
             * @return the next definition stage
             */
            WithCreate withDefaultOriginGroup(ResourceReference defaultOriginGroup);
        }

        /**
         * The stage of the endpoint definition allowing to specify DeliveryPolicy.
         */
        interface WithDeliveryPolicy {
            /**
             * Specifies deliveryPolicy.
             * @param deliveryPolicy A policy that specifies the delivery rules to be used for an endpoint
             * @return the next definition stage
             */
            WithCreate withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy);
        }

        /**
         * The stage of the endpoint definition allowing to specify GeoFilters.
         */
        interface WithGeoFilters {
            /**
             * Specifies geoFilters.
             * @param geoFilters List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
             * @return the next definition stage
             */
            WithCreate withGeoFilters(List<GeoFilter> geoFilters);
        }

        /**
         * The stage of the endpoint definition allowing to specify IsCompressionEnabled.
         */
        interface WithIsCompressionEnabled {
            /**
             * Specifies isCompressionEnabled.
             * @param isCompressionEnabled Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB
             * @return the next definition stage
             */
            WithCreate withIsCompressionEnabled(Boolean isCompressionEnabled);
        }

        /**
         * The stage of the endpoint definition allowing to specify IsHttpAllowed.
         */
        interface WithIsHttpAllowed {
            /**
             * Specifies isHttpAllowed.
             * @param isHttpAllowed Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed
             * @return the next definition stage
             */
            WithCreate withIsHttpAllowed(Boolean isHttpAllowed);
        }

        /**
         * The stage of the endpoint definition allowing to specify IsHttpsAllowed.
         */
        interface WithIsHttpsAllowed {
            /**
             * Specifies isHttpsAllowed.
             * @param isHttpsAllowed Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed
             * @return the next definition stage
             */
            WithCreate withIsHttpsAllowed(Boolean isHttpsAllowed);
        }

        /**
         * The stage of the endpoint definition allowing to specify OptimizationType.
         */
        interface WithOptimizationType {
            /**
             * Specifies optimizationType.
             * @param optimizationType Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization. Possible values include: 'GeneralWebDelivery', 'GeneralMediaStreaming', 'VideoOnDemandMediaStreaming', 'LargeFileDownload', 'DynamicSiteAcceleration'
             * @return the next definition stage
             */
            WithCreate withOptimizationType(OptimizationType optimizationType);
        }

        /**
         * The stage of the endpoint definition allowing to specify OriginGroups.
         */
        interface WithOriginGroups {
            /**
             * Specifies originGroups.
             * @param originGroups The origin groups comprising of origins that are used for load balancing the traffic based on availability
             * @return the next definition stage
             */
            WithCreate withOriginGroups(List<DeepCreatedOriginGroup> originGroups);
        }

        /**
         * The stage of the endpoint definition allowing to specify OriginHostHeader.
         */
        interface WithOriginHostHeader {
            /**
             * Specifies originHostHeader.
             * @param originHostHeader The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default
             * @return the next definition stage
             */
            WithCreate withOriginHostHeader(String originHostHeader);
        }

        /**
         * The stage of the endpoint definition allowing to specify OriginPath.
         */
        interface WithOriginPath {
            /**
             * Specifies originPath.
             * @param originPath A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath
             * @return the next definition stage
             */
            WithCreate withOriginPath(String originPath);
        }

        /**
         * The stage of the endpoint definition allowing to specify ProbePath.
         */
        interface WithProbePath {
            /**
             * Specifies probePath.
             * @param probePath Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin
             * @return the next definition stage
             */
            WithCreate withProbePath(String probePath);
        }

        /**
         * The stage of the endpoint definition allowing to specify QueryStringCachingBehavior.
         */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies queryStringCachingBehavior.
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL. Possible values include: 'IgnoreQueryString', 'BypassCaching', 'UseQueryString', 'NotSet'
             * @return the next definition stage
             */
            WithCreate withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }

        /**
         * The stage of the endpoint definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the endpoint definition allowing to specify UrlSigningKeys.
         */
        interface WithUrlSigningKeys {
            /**
             * Specifies urlSigningKeys.
             * @param urlSigningKeys List of keys used to validate the signed URL hashes
             * @return the next definition stage
             */
            WithCreate withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys);
        }

        /**
         * The stage of the endpoint definition allowing to specify WebApplicationFirewallPolicyLink.
         */
        interface WithWebApplicationFirewallPolicyLink {
            /**
             * Specifies webApplicationFirewallPolicyLink.
             * @param webApplicationFirewallPolicyLink Defines the Web Application Firewall policy for the endpoint (if applicable)
             * @return the next definition stage
             */
            WithCreate withWebApplicationFirewallPolicyLink(EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Endpoint>, DefinitionStages.WithContentTypesToCompress, DefinitionStages.WithDefaultOriginGroup, DefinitionStages.WithDeliveryPolicy, DefinitionStages.WithGeoFilters, DefinitionStages.WithIsCompressionEnabled, DefinitionStages.WithIsHttpAllowed, DefinitionStages.WithIsHttpsAllowed, DefinitionStages.WithOptimizationType, DefinitionStages.WithOriginGroups, DefinitionStages.WithOriginHostHeader, DefinitionStages.WithOriginPath, DefinitionStages.WithProbePath, DefinitionStages.WithQueryStringCachingBehavior, DefinitionStages.WithTags, DefinitionStages.WithUrlSigningKeys, DefinitionStages.WithWebApplicationFirewallPolicyLink {
        }
    }
    /**
     * The template for a Endpoint update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Endpoint>, UpdateStages.WithContentTypesToCompress, UpdateStages.WithDefaultOriginGroup, UpdateStages.WithDeliveryPolicy, UpdateStages.WithGeoFilters, UpdateStages.WithIsCompressionEnabled, UpdateStages.WithIsHttpAllowed, UpdateStages.WithIsHttpsAllowed, UpdateStages.WithOptimizationType, UpdateStages.WithOriginHostHeader, UpdateStages.WithOriginPath, UpdateStages.WithProbePath, UpdateStages.WithQueryStringCachingBehavior, UpdateStages.WithTags, UpdateStages.WithUrlSigningKeys, UpdateStages.WithWebApplicationFirewallPolicyLink {
    }

    /**
     * Grouping of Endpoint update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the endpoint update allowing to specify ContentTypesToCompress.
         */
        interface WithContentTypesToCompress {
            /**
             * Specifies contentTypesToCompress.
             * @param contentTypesToCompress List of content types on which compression applies. The value should be a valid MIME type
             * @return the next update stage
             */
            Update withContentTypesToCompress(List<String> contentTypesToCompress);
        }

        /**
         * The stage of the endpoint update allowing to specify DefaultOriginGroup.
         */
        interface WithDefaultOriginGroup {
            /**
             * Specifies defaultOriginGroup.
             * @param defaultOriginGroup A reference to the origin group
             * @return the next update stage
             */
            Update withDefaultOriginGroup(ResourceReference defaultOriginGroup);
        }

        /**
         * The stage of the endpoint update allowing to specify DeliveryPolicy.
         */
        interface WithDeliveryPolicy {
            /**
             * Specifies deliveryPolicy.
             * @param deliveryPolicy A policy that specifies the delivery rules to be used for an endpoint
             * @return the next update stage
             */
            Update withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy);
        }

        /**
         * The stage of the endpoint update allowing to specify GeoFilters.
         */
        interface WithGeoFilters {
            /**
             * Specifies geoFilters.
             * @param geoFilters List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
             * @return the next update stage
             */
            Update withGeoFilters(List<GeoFilter> geoFilters);
        }

        /**
         * The stage of the endpoint update allowing to specify IsCompressionEnabled.
         */
        interface WithIsCompressionEnabled {
            /**
             * Specifies isCompressionEnabled.
             * @param isCompressionEnabled Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB
             * @return the next update stage
             */
            Update withIsCompressionEnabled(Boolean isCompressionEnabled);
        }

        /**
         * The stage of the endpoint update allowing to specify IsHttpAllowed.
         */
        interface WithIsHttpAllowed {
            /**
             * Specifies isHttpAllowed.
             * @param isHttpAllowed Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed
             * @return the next update stage
             */
            Update withIsHttpAllowed(Boolean isHttpAllowed);
        }

        /**
         * The stage of the endpoint update allowing to specify IsHttpsAllowed.
         */
        interface WithIsHttpsAllowed {
            /**
             * Specifies isHttpsAllowed.
             * @param isHttpsAllowed Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed
             * @return the next update stage
             */
            Update withIsHttpsAllowed(Boolean isHttpsAllowed);
        }

        /**
         * The stage of the endpoint update allowing to specify OptimizationType.
         */
        interface WithOptimizationType {
            /**
             * Specifies optimizationType.
             * @param optimizationType Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization. Possible values include: 'GeneralWebDelivery', 'GeneralMediaStreaming', 'VideoOnDemandMediaStreaming', 'LargeFileDownload', 'DynamicSiteAcceleration'
             * @return the next update stage
             */
            Update withOptimizationType(OptimizationType optimizationType);
        }

        /**
         * The stage of the endpoint update allowing to specify OriginHostHeader.
         */
        interface WithOriginHostHeader {
            /**
             * Specifies originHostHeader.
             * @param originHostHeader The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default
             * @return the next update stage
             */
            Update withOriginHostHeader(String originHostHeader);
        }

        /**
         * The stage of the endpoint update allowing to specify OriginPath.
         */
        interface WithOriginPath {
            /**
             * Specifies originPath.
             * @param originPath A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath
             * @return the next update stage
             */
            Update withOriginPath(String originPath);
        }

        /**
         * The stage of the endpoint update allowing to specify ProbePath.
         */
        interface WithProbePath {
            /**
             * Specifies probePath.
             * @param probePath Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin
             * @return the next update stage
             */
            Update withProbePath(String probePath);
        }

        /**
         * The stage of the endpoint update allowing to specify QueryStringCachingBehavior.
         */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies queryStringCachingBehavior.
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL. Possible values include: 'IgnoreQueryString', 'BypassCaching', 'UseQueryString', 'NotSet'
             * @return the next update stage
             */
            Update withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }

        /**
         * The stage of the endpoint update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Endpoint tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the endpoint update allowing to specify UrlSigningKeys.
         */
        interface WithUrlSigningKeys {
            /**
             * Specifies urlSigningKeys.
             * @param urlSigningKeys List of keys used to validate the signed URL hashes
             * @return the next update stage
             */
            Update withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys);
        }

        /**
         * The stage of the endpoint update allowing to specify WebApplicationFirewallPolicyLink.
         */
        interface WithWebApplicationFirewallPolicyLink {
            /**
             * Specifies webApplicationFirewallPolicyLink.
             * @param webApplicationFirewallPolicyLink Defines the Web Application Firewall policy for the endpoint (if applicable)
             * @return the next update stage
             */
            Update withWebApplicationFirewallPolicyLink(EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink);
        }

    }
}
