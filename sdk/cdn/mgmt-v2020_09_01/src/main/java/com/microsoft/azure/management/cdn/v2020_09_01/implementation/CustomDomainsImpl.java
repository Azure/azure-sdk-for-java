/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.cdn.v2020_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.cdn.v2020_09_01.CustomDomains;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.cdn.v2020_09_01.CustomDomain;

class CustomDomainsImpl extends WrapperImpl<CustomDomainsInner> implements CustomDomains {
    private final CdnManager manager;

    CustomDomainsImpl(CdnManager manager) {
        super(manager.inner().customDomains());
        this.manager = manager;
    }

    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public CustomDomainImpl define(String name) {
        return wrapModel(name);
    }

    private CustomDomainImpl wrapModel(CustomDomainInner inner) {
        return  new CustomDomainImpl(inner, manager());
    }

    private CustomDomainImpl wrapModel(String name) {
        return new CustomDomainImpl(name, this.manager());
    }

    @Override
    public Observable<CustomDomain> disableCustomHttpsAsync(String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainsInner client = this.inner();
        return client.disableCustomHttpsAsync(resourceGroupName, profileName, endpointName, customDomainName)
        .map(new Func1<CustomDomainInner, CustomDomain>() {
            @Override
            public CustomDomain call(CustomDomainInner inner) {
                return new CustomDomainImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CustomDomain> enableCustomHttpsAsync(String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainsInner client = this.inner();
        return client.enableCustomHttpsAsync(resourceGroupName, profileName, endpointName, customDomainName)
        .map(new Func1<CustomDomainInner, CustomDomain>() {
            @Override
            public CustomDomain call(CustomDomainInner inner) {
                return new CustomDomainImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<CustomDomain> listByEndpointAsync(final String resourceGroupName, final String profileName, final String endpointName) {
        CustomDomainsInner client = this.inner();
        return client.listByEndpointAsync(resourceGroupName, profileName, endpointName)
        .flatMapIterable(new Func1<Page<CustomDomainInner>, Iterable<CustomDomainInner>>() {
            @Override
            public Iterable<CustomDomainInner> call(Page<CustomDomainInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CustomDomainInner, CustomDomain>() {
            @Override
            public CustomDomain call(CustomDomainInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CustomDomain> getAsync(String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainsInner client = this.inner();
        return client.getAsync(resourceGroupName, profileName, endpointName, customDomainName)
        .flatMap(new Func1<CustomDomainInner, Observable<CustomDomain>>() {
            @Override
            public Observable<CustomDomain> call(CustomDomainInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((CustomDomain)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, profileName, endpointName, customDomainName).toCompletable();
    }

}
