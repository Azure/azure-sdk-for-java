/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01.implementation;

import com.microsoft.azure.management.cdn.v2020_09_01.RuleSet;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_09_01.DeploymentStatus;
import com.microsoft.azure.management.cdn.v2020_09_01.AfdProvisioningState;
import com.microsoft.azure.management.cdn.v2020_09_01.SystemData;

class RuleSetImpl extends CreatableUpdatableImpl<RuleSet, RuleSetInner, RuleSetImpl> implements RuleSet, RuleSet.Definition, RuleSet.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String ruleSetName;

    RuleSetImpl(String name, CdnManager manager) {
        super(name, new RuleSetInner());
        this.manager = manager;
        // Set resource name
        this.ruleSetName = name;
        //
    }

    RuleSetImpl(RuleSetInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ruleSetName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.ruleSetName = IdParsingUtils.getValueFromIdByName(inner.id(), "ruleSets");
        //
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<RuleSet> createResourceAsync() {
        RuleSetsInner client = this.manager().inner().ruleSets();
        return client.createAsync(this.resourceGroupName, this.profileName, this.ruleSetName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<RuleSet> updateResourceAsync() {
        RuleSetsInner client = this.manager().inner().ruleSets();
        return client.createAsync(this.resourceGroupName, this.profileName, this.ruleSetName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RuleSetInner> getInnerAsync() {
        RuleSetsInner client = this.manager().inner().ruleSets();
        return client.getAsync(this.resourceGroupName, this.profileName, this.ruleSetName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DeploymentStatus deploymentStatus() {
        return this.inner().deploymentStatus();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public AfdProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public RuleSetImpl withExistingProfile(String resourceGroupName, String profileName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        return this;
    }

}
