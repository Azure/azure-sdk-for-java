/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01.implementation;

import com.microsoft.azure.management.cdn.v2020_09_01.AFDDomain;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_09_01.AFDDomainUpdateParameters;
import com.microsoft.azure.management.cdn.v2020_09_01.SystemData;
import com.microsoft.azure.management.cdn.v2020_09_01.AFDDomainHttpsParameters;
import com.microsoft.azure.management.cdn.v2020_09_01.ResourceReference;
import com.microsoft.azure.management.cdn.v2020_09_01.AfdProvisioningState;
import com.microsoft.azure.management.cdn.v2020_09_01.DeploymentStatus;
import com.microsoft.azure.management.cdn.v2020_09_01.DomainValidationState;
import com.microsoft.azure.management.cdn.v2020_09_01.DomainValidationProperties;
import rx.functions.Func1;

class AFDDomainImpl extends CreatableUpdatableImpl<AFDDomain, AFDDomainInner, AFDDomainImpl> implements AFDDomain, AFDDomain.Definition, AFDDomain.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String customDomainName;
    private AFDDomainUpdateParameters updateParameter;

    AFDDomainImpl(String name, CdnManager manager) {
        super(name, new AFDDomainInner());
        this.manager = manager;
        // Set resource name
        this.customDomainName = name;
        //
        this.updateParameter = new AFDDomainUpdateParameters();
    }

    AFDDomainImpl(AFDDomainInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.customDomainName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.customDomainName = IdParsingUtils.getValueFromIdByName(inner.id(), "customDomains");
        //
        this.updateParameter = new AFDDomainUpdateParameters();
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<AFDDomain> createResourceAsync() {
        AFDCustomDomainsInner client = this.manager().inner().aFDCustomDomains();
        return client.createAsync(this.resourceGroupName, this.profileName, this.customDomainName, this.inner())
            .map(new Func1<AFDDomainInner, AFDDomainInner>() {
               @Override
               public AFDDomainInner call(AFDDomainInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<AFDDomain> updateResourceAsync() {
        AFDCustomDomainsInner client = this.manager().inner().aFDCustomDomains();
        return client.updateAsync(this.resourceGroupName, this.profileName, this.customDomainName, this.updateParameter)
            .map(new Func1<AFDDomainInner, AFDDomainInner>() {
               @Override
               public AFDDomainInner call(AFDDomainInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<AFDDomainInner> getInnerAsync() {
        AFDCustomDomainsInner client = this.manager().inner().aFDCustomDomains();
        return client.getAsync(this.resourceGroupName, this.profileName, this.customDomainName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new AFDDomainUpdateParameters();
    }

    @Override
    public ResourceReference azureDnsZone() {
        return this.inner().azureDnsZone();
    }

    @Override
    public DeploymentStatus deploymentStatus() {
        return this.inner().deploymentStatus();
    }

    @Override
    public DomainValidationState domainValidationState() {
        return this.inner().domainValidationState();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public AfdProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public AFDDomainHttpsParameters tlsSettings() {
        return this.inner().tlsSettings();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DomainValidationProperties validationProperties() {
        return this.inner().validationProperties();
    }

    @Override
    public AFDDomainImpl withExistingProfile(String resourceGroupName, String profileName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        return this;
    }

    @Override
    public AFDDomainImpl withHostName(String hostName) {
        this.inner().withHostName(hostName);
        return this;
    }

    @Override
    public AFDDomainImpl withAzureDnsZone(ResourceReference azureDnsZone) {
        if (isInCreateMode()) {
            this.inner().withAzureDnsZone(azureDnsZone);
        } else {
            this.updateParameter.withAzureDnsZone(azureDnsZone);
        }
        return this;
    }

    @Override
    public AFDDomainImpl withTlsSettings(AFDDomainHttpsParameters tlsSettings) {
        if (isInCreateMode()) {
            this.inner().withTlsSettings(tlsSettings);
        } else {
            this.updateParameter.withTlsSettings(tlsSettings);
        }
        return this;
    }

}
