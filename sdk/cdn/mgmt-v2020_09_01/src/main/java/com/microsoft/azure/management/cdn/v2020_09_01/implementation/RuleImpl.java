/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01.implementation;

import com.microsoft.azure.management.cdn.v2020_09_01.Rule;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_09_01.RuleUpdateParameters;
import java.util.List;
import com.microsoft.azure.management.cdn.v2020_09_01.SystemData;
import com.microsoft.azure.management.cdn.v2020_09_01.DeliveryRuleCondition;
import com.microsoft.azure.management.cdn.v2020_09_01.DeliveryRuleAction;
import com.microsoft.azure.management.cdn.v2020_09_01.MatchProcessingBehavior;
import com.microsoft.azure.management.cdn.v2020_09_01.AfdProvisioningState;
import com.microsoft.azure.management.cdn.v2020_09_01.DeploymentStatus;
import rx.functions.Func1;

class RuleImpl extends CreatableUpdatableImpl<Rule, RuleInner, RuleImpl> implements Rule, Rule.Definition, Rule.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String ruleSetName;
    private String ruleName;
    private RuleUpdateParameters updateParameter;

    RuleImpl(String name, CdnManager manager) {
        super(name, new RuleInner());
        this.manager = manager;
        // Set resource name
        this.ruleName = name;
        //
        this.updateParameter = new RuleUpdateParameters();
    }

    RuleImpl(RuleInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.ruleName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.ruleSetName = IdParsingUtils.getValueFromIdByName(inner.id(), "ruleSets");
        this.ruleName = IdParsingUtils.getValueFromIdByName(inner.id(), "rules");
        //
        this.updateParameter = new RuleUpdateParameters();
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Rule> createResourceAsync() {
        RulesInner client = this.manager().inner().rules();
        return client.createAsync(this.resourceGroupName, this.profileName, this.ruleSetName, this.ruleName, this.inner())
            .map(new Func1<RuleInner, RuleInner>() {
               @Override
               public RuleInner call(RuleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Rule> updateResourceAsync() {
        RulesInner client = this.manager().inner().rules();
        return client.updateAsync(this.resourceGroupName, this.profileName, this.ruleSetName, this.ruleName, this.updateParameter)
            .map(new Func1<RuleInner, RuleInner>() {
               @Override
               public RuleInner call(RuleInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RuleInner> getInnerAsync() {
        RulesInner client = this.manager().inner().rules();
        return client.getAsync(this.resourceGroupName, this.profileName, this.ruleSetName, this.ruleName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new RuleUpdateParameters();
    }

    @Override
    public List<DeliveryRuleAction> actions() {
        return this.inner().actions();
    }

    @Override
    public List<DeliveryRuleCondition> conditions() {
        return this.inner().conditions();
    }

    @Override
    public DeploymentStatus deploymentStatus() {
        return this.inner().deploymentStatus();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public MatchProcessingBehavior matchProcessingBehavior() {
        return this.inner().matchProcessingBehavior();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public int order() {
        return this.inner().order();
    }

    @Override
    public AfdProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public RuleImpl withExistingRuleSet(String resourceGroupName, String profileName, String ruleSetName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        this.ruleSetName = ruleSetName;
        return this;
    }

    @Override
    public RuleImpl withOrder(int order) {
        this.inner().withOrder(order);
        return this;
    }

    @Override
    public RuleImpl withOrder(Integer order) {
        this.updateParameter.withOrder(order);
        return this;
    }

    @Override
    public RuleImpl withActions(List<DeliveryRuleAction> actions) {
        if (isInCreateMode()) {
            this.inner().withActions(actions);
        } else {
            this.updateParameter.withActions(actions);
        }
        return this;
    }

    @Override
    public RuleImpl withConditions(List<DeliveryRuleCondition> conditions) {
        if (isInCreateMode()) {
            this.inner().withConditions(conditions);
        } else {
            this.updateParameter.withConditions(conditions);
        }
        return this;
    }

    @Override
    public RuleImpl withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior) {
        if (isInCreateMode()) {
            this.inner().withMatchProcessingBehavior(matchProcessingBehavior);
        } else {
            this.updateParameter.withMatchProcessingBehavior(matchProcessingBehavior);
        }
        return this;
    }

}
