/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_09_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.RuleInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.cdn.v2020_09_01.implementation.CdnManager;
import java.util.List;

/**
 * Type representing Rule.
 */
public interface Rule extends HasInner<RuleInner>, Indexable, Refreshable<Rule>, Updatable<Rule.Update>, HasManager<CdnManager> {
    /**
     * @return the actions value.
     */
    List<DeliveryRuleAction> actions();

    /**
     * @return the conditions value.
     */
    List<DeliveryRuleCondition> conditions();

    /**
     * @return the deploymentStatus value.
     */
    DeploymentStatus deploymentStatus();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the matchProcessingBehavior value.
     */
    MatchProcessingBehavior matchProcessingBehavior();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the order value.
     */
    int order();

    /**
     * @return the provisioningState value.
     */
    AfdProvisioningState provisioningState();

    /**
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the Rule definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithRuleSet, DefinitionStages.WithActions, DefinitionStages.WithOrder, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Rule definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Rule definition.
         */
        interface Blank extends WithRuleSet {
        }

        /**
         * The stage of the rule definition allowing to specify RuleSet.
         */
        interface WithRuleSet {
           /**
            * Specifies resourceGroupName, profileName, ruleSetName.
            * @param resourceGroupName Name of the Resource group within the Azure subscription
            * @param profileName Name of the CDN profile which is unique within the resource group
            * @param ruleSetName Name of the rule set under the profile
            * @return the next definition stage
            */
            WithActions withExistingRuleSet(String resourceGroupName, String profileName, String ruleSetName);
        }

        /**
         * The stage of the rule definition allowing to specify Actions.
         */
        interface WithActions {
           /**
            * Specifies actions.
            * @param actions A list of actions that are executed when all the conditions of a rule are satisfied
            * @return the next definition stage
            */
            WithOrder withActions(List<DeliveryRuleAction> actions);
        }

        /**
         * The stage of the rule definition allowing to specify Order.
         */
        interface WithOrder {
           /**
            * Specifies order.
            * @param order The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied
            * @return the next definition stage
            */
            WithCreate withOrder(int order);
        }

        /**
         * The stage of the rule definition allowing to specify Conditions.
         */
        interface WithConditions {
            /**
             * Specifies conditions.
             * @param conditions A list of conditions that must be matched for the actions to be executed
             * @return the next definition stage
             */
            WithCreate withConditions(List<DeliveryRuleCondition> conditions);
        }

        /**
         * The stage of the rule definition allowing to specify MatchProcessingBehavior.
         */
        interface WithMatchProcessingBehavior {
            /**
             * Specifies matchProcessingBehavior.
             * @param matchProcessingBehavior If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue. Possible values include: 'Continue', 'Stop'
             * @return the next definition stage
             */
            WithCreate withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Rule>, DefinitionStages.WithConditions, DefinitionStages.WithMatchProcessingBehavior {
        }
    }
    /**
     * The template for a Rule update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Rule>, UpdateStages.WithActions, UpdateStages.WithConditions, UpdateStages.WithMatchProcessingBehavior, UpdateStages.WithOrder {
    }

    /**
     * Grouping of Rule update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the rule update allowing to specify Actions.
         */
        interface WithActions {
            /**
             * Specifies actions.
             * @param actions A list of actions that are executed when all the conditions of a rule are satisfied
             * @return the next update stage
             */
            Update withActions(List<DeliveryRuleAction> actions);
        }

        /**
         * The stage of the rule update allowing to specify Conditions.
         */
        interface WithConditions {
            /**
             * Specifies conditions.
             * @param conditions A list of conditions that must be matched for the actions to be executed
             * @return the next update stage
             */
            Update withConditions(List<DeliveryRuleCondition> conditions);
        }

        /**
         * The stage of the rule update allowing to specify MatchProcessingBehavior.
         */
        interface WithMatchProcessingBehavior {
            /**
             * Specifies matchProcessingBehavior.
             * @param matchProcessingBehavior If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue. Possible values include: 'Continue', 'Stop'
             * @return the next update stage
             */
            Update withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior);
        }

        /**
         * The stage of the rule update allowing to specify Order.
         */
        interface WithOrder {
            /**
             * Specifies order.
             * @param order The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied
             * @return the next update stage
             */
            Update withOrder(Integer order);
        }

    }
}
