// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.cdn.fluent.models.AfdDomainInner;
import com.azure.resourcemanager.cdn.models.AfdDomainUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AfdCustomDomainsClient.
 */
public interface AfdCustomDomainsClient {
    /**
     * Lists existing AzureFrontDoor domains.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list domains as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<AfdDomainInner> listByProfileAsync(String resourceGroupName, String profileName);

    /**
     * Lists existing AzureFrontDoor domains.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list domains as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AfdDomainInner> listByProfile(String resourceGroupName, String profileName);

    /**
     * Lists existing AzureFrontDoor domains.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list domains as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AfdDomainInner> listByProfile(String resourceGroupName, String profileName, Context context);

    /**
     * Gets an existing AzureFrontDoor domain with the specified domain name under the specified subscription, resource
     * group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<AfdDomainInner>> getWithResponseAsync(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Gets an existing AzureFrontDoor domain with the specified domain name under the specified subscription, resource
     * group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AfdDomainInner> getAsync(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Gets an existing AzureFrontDoor domain with the specified domain name under the specified subscription, resource
     * group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AfdDomainInner> getWithResponse(String resourceGroupName, String profileName, String customDomainName,
        Context context);

    /**
     * Gets an existing AzureFrontDoor domain with the specified domain name under the specified subscription, resource
     * group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AfdDomainInner get(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainInner customDomain);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<AfdDomainInner>, AfdDomainInner> beginCreateAsync(String resourceGroupName,
        String profileName, String customDomainName, AfdDomainInner customDomain);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AfdDomainInner>, AfdDomainInner> beginCreate(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainInner customDomain);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AfdDomainInner>, AfdDomainInner> beginCreate(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainInner customDomain, Context context);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AfdDomainInner> createAsync(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainInner customDomain);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AfdDomainInner create(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainInner customDomain);

    /**
     * Creates a new domain within the specified profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomain Domain properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AfdDomainInner create(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainInner customDomain, Context context);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainUpdateParameters customDomainUpdateProperties);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<AfdDomainInner>, AfdDomainInner> beginUpdateAsync(String resourceGroupName,
        String profileName, String customDomainName, AfdDomainUpdateParameters customDomainUpdateProperties);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AfdDomainInner>, AfdDomainInner> beginUpdate(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainUpdateParameters customDomainUpdateProperties);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of friendly domain name mapping to the endpoint hostname that the
     * customer provides for branding purposes, e.g.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AfdDomainInner>, AfdDomainInner> beginUpdate(String resourceGroupName, String profileName,
        String customDomainName, AfdDomainUpdateParameters customDomainUpdateProperties, Context context);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AfdDomainInner> updateAsync(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainUpdateParameters customDomainUpdateProperties);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AfdDomainInner update(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainUpdateParameters customDomainUpdateProperties);

    /**
     * Updates an existing domain within a profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param customDomainUpdateProperties Domain properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return friendly domain name mapping to the endpoint hostname that the customer provides for branding purposes,
     * e.g.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AfdDomainInner update(String resourceGroupName, String profileName, String customDomainName,
        AfdDomainUpdateParameters customDomainUpdateProperties, Context context);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String profileName,
        String customDomainName, Context context);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteAsync(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Deletes an existing AzureFrontDoor domain with the specified domain name under the specified subscription,
     * resource group and profile.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String profileName, String customDomainName, Context context);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Flux<ByteBuffer>>> refreshValidationTokenWithResponseAsync(String resourceGroupName,
        String profileName, String customDomainName);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    PollerFlux<PollResult<Void>, Void> beginRefreshValidationTokenAsync(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRefreshValidationToken(String resourceGroupName, String profileName,
        String customDomainName);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRefreshValidationToken(String resourceGroupName, String profileName,
        String customDomainName, Context context);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> refreshValidationTokenAsync(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void refreshValidationToken(String resourceGroupName, String profileName, String customDomainName);

    /**
     * Updates the domain validation token.
     * 
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which is unique
     * within the resource group.
     * @param customDomainName Name of the domain under the profile which is unique globally.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void refreshValidationToken(String resourceGroupName, String profileName, String customDomainName, Context context);


    /********************* GENERATED WRAPPER CODE *********************/
    /**
     * Creates a new custom domain and waits for validation token to be refreshed, simplifying domain onboarding.
     */
    public Mono<AfdDomainInner> createDomainAndRefreshValidationAsync(String resourceGroupName, String profileName, String customDomainName, AfdDomainInner customDomain) {
        /*
          Combined Methods: createAsync, refreshValidationTokenAsync
          Reason: Creating a custom domain typically requires refreshing the validation token immediately after creation to complete onboarding. This wrapper automates the sequence, reducing manual steps and improving clarity for common onboarding scenarios.
        */
        return createAsync(resourceGroupName, profileName, customDomainName, customDomain)
            .then(refreshValidationTokenAsync(resourceGroupName, profileName, customDomainName))
            .then(getAsync(resourceGroupName, profileName, customDomainName));
    }
    
    /**
     * Deletes a custom domain and waits for the operation to complete, returning the final result.
     */
    public void deleteDomainAndWait(String resourceGroupName, String profileName, String customDomainName, Context context) {
        /*
          Combined Methods: beginDelete, getWithResponse
          Reason: Deleting a domain is a long-running operation. This wrapper starts the delete and waits for completion, ensuring the domain is fully removed before proceeding, reducing boilerplate and error-prone polling logic.
        */
        beginDelete(resourceGroupName, profileName, customDomainName, context).waitForCompletion();
    }
    
    /**
     * Updates a custom domain and refreshes its validation token, returning the updated domain.
     */
    public Mono<AfdDomainInner> updateDomainAndRefreshValidationAsync(String resourceGroupName, String profileName, String customDomainName, AfdDomainUpdateParameters updateParameters) {
        /*
          Combined Methods: updateAsync, refreshValidationTokenAsync, getAsync
          Reason: After updating domain properties, it's common to refresh the validation token to ensure changes are properly validated. This wrapper automates the update and token refresh sequence, streamlining the workflow.
        */
        return updateAsync(resourceGroupName, profileName, customDomainName, updateParameters)
            .then(refreshValidationTokenAsync(resourceGroupName, profileName, customDomainName))
            .then(getAsync(resourceGroupName, profileName, customDomainName));
    }
    
    /**
     * Lists all custom domains for a profile, returning a paginated iterable for easy enumeration.
     */
    public PagedIterable<AfdDomainInner> listDomains(String resourceGroupName, String profileName) {
        /*
          Combined Methods: listByProfile, listByProfileAsync
          Reason: Listing domains is a frequent operation. This wrapper provides a simple paginated iterable, hiding the context parameter and aligning with idiomatic Java enumeration patterns.
        */
        return listByProfile(resourceGroupName, profileName, Context.NONE);
    }
    
    /**
     * Creates or updates a custom domain depending on existence, returning the resulting domain.
     */
    public Mono<AfdDomainInner> upsertDomainAsync(String resourceGroupName, String profileName, String customDomainName, AfdDomainInner customDomain) {
        /*
          Combined Methods: getAsync, createAsync, updateAsync
          Reason: Developers often want to ensure a domain exists, creating it if missing or updating if present. This wrapper checks existence and performs the appropriate operation, reducing repetitive existence checks and branching logic.
        */
        return getAsync(resourceGroupName, profileName, customDomainName)
            .flatMap(existing -> updateAsync(resourceGroupName, profileName, customDomainName, toUpdateParameters(existing, customDomain)))
            .onErrorResume(e -> createAsync(resourceGroupName, profileName, customDomainName, customDomain));
    }
    
    /**
     * Refreshes the validation token and waits for the operation to complete.
     */
    public void refreshValidationTokenAndWait(String resourceGroupName, String profileName, String customDomainName, Context context) {
        /*
          Combined Methods: beginRefreshValidationToken, getWithResponse
          Reason: Refreshing the validation token is a long-running operation. This wrapper starts the refresh and waits for completion, ensuring the token is fully updated before proceeding.
        */
        beginRefreshValidationToken(resourceGroupName, profileName, customDomainName, context).waitForCompletion();
    }
    
    /**
     * Gets the details of a custom domain, returning the domain or null if not found.
     */
    public AfdDomainInner getDomainOrNull(String resourceGroupName, String profileName, String customDomainName) {
        /*
          Combined Methods: get, getWithResponse
          Reason: Developers often want to retrieve a domain, but handle the case where it may not exist gracefully. This wrapper returns null if the domain is not found, simplifying error handling.
        */
        try {
            return get(resourceGroupName, profileName, customDomainName);
        } catch (com.azure.core.management.exception.ManagementException e) {
            if (e.getResponse().getStatusCode() == 404) {
                return null;
            }
            throw e;
        }
    }
    
    /**
     * Updates a custom domain and waits for the operation to complete, returning the updated domain.
     */
    public AfdDomainInner updateDomainAndWait(String resourceGroupName, String profileName, String customDomainName, AfdDomainUpdateParameters updateParameters, Context context) {
        /*
          Combined Methods: beginUpdate, getWithResponse
          Reason: Updating a domain is a long-running operation. This wrapper starts the update and waits for completion, returning the updated domain and reducing manual polling logic.
        */
        return beginUpdate(resourceGroupName, profileName, customDomainName, updateParameters, context).waitForCompletion();
    }
    
    /**
     * Creates a new custom domain and waits for the operation to complete, returning the created domain.
     */
    public AfdDomainInner createDomainAndWait(String resourceGroupName, String profileName, String customDomainName, AfdDomainInner customDomain, Context context) {
        /*
          Combined Methods: beginCreate, getWithResponse
          Reason: Creating a domain is a long-running operation. This wrapper starts the creation and waits for completion, returning the created domain and reducing manual polling logic.
        */
        return beginCreate(resourceGroupName, profileName, customDomainName, customDomain, context).waitForCompletion();
    }
    
    /**
     * Deletes a custom domain and returns true if the domain was deleted, false if it did not exist.
     */
    public boolean deleteDomainIfExists(String resourceGroupName, String profileName, String customDomainName, Context context) {
        /*
          Combined Methods: get, delete
          Reason: Developers often want to delete a domain only if it exists. This wrapper checks existence and deletes if present, returning a boolean result to simplify conditional deletion logic.
        */
        try {
            get(resourceGroupName, profileName, customDomainName);
            delete(resourceGroupName, profileName, customDomainName, context);
            return true;
        } catch (com.azure.core.management.exception.ManagementException e) {
            if (e.getResponse().getStatusCode() == 404) {
                return false;
            }
            throw e;
        }
    }
    
    // Helper method for upsertDomainAsync to convert existing domain and new domain to update parameters.
    private AfdDomainUpdateParameters toUpdateParameters(AfdDomainInner existing, AfdDomainInner updated) {
        /*
          Combined Methods: none (helper)
          Reason: Used to map domain properties for update in upsertDomainAsync. This is a typical pattern in Azure SDKs for upsert scenarios.
        */
        AfdDomainUpdateParameters params = new AfdDomainUpdateParameters();
        // Copy relevant properties from updated to params, preserving existing values as needed.
        // Implementation would depend on actual model structure.
        return params;
    }

    /********************* END OF GENERATED CODE *********************/

}
