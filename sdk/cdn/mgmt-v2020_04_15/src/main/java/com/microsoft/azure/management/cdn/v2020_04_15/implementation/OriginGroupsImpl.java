/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.cdn.v2020_04_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.cdn.v2020_04_15.OriginGroups;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.cdn.v2020_04_15.OriginGroup;

class OriginGroupsImpl extends WrapperImpl<OriginGroupsInner> implements OriginGroups {
    private final CdnManager manager;

    OriginGroupsImpl(CdnManager manager) {
        super(manager.inner().originGroups());
        this.manager = manager;
    }

    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public OriginGroupImpl define(String name) {
        return wrapModel(name);
    }

    private OriginGroupImpl wrapModel(OriginGroupInner inner) {
        return  new OriginGroupImpl(inner, manager());
    }

    private OriginGroupImpl wrapModel(String name) {
        return new OriginGroupImpl(name, this.manager());
    }

    @Override
    public Observable<OriginGroup> listByEndpointAsync(final String resourceGroupName, final String profileName, final String endpointName) {
        OriginGroupsInner client = this.inner();
        return client.listByEndpointAsync(resourceGroupName, profileName, endpointName)
        .flatMapIterable(new Func1<Page<OriginGroupInner>, Iterable<OriginGroupInner>>() {
            @Override
            public Iterable<OriginGroupInner> call(Page<OriginGroupInner> page) {
                return page.items();
            }
        })
        .map(new Func1<OriginGroupInner, OriginGroup>() {
            @Override
            public OriginGroup call(OriginGroupInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<OriginGroup> getAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName) {
        OriginGroupsInner client = this.inner();
        return client.getAsync(resourceGroupName, profileName, endpointName, originGroupName)
        .flatMap(new Func1<OriginGroupInner, Observable<OriginGroup>>() {
            @Override
            public Observable<OriginGroup> call(OriginGroupInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((OriginGroup)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String profileName, String endpointName, String originGroupName) {
        OriginGroupsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, profileName, endpointName, originGroupName).toCompletable();
    }

}
