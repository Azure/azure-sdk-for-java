/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_04_15.implementation;

import com.microsoft.azure.management.cdn.v2020_04_15.Endpoint;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_04_15.EndpointUpdateParameters;
import java.util.Map;
import java.util.List;
import com.microsoft.azure.management.cdn.v2020_04_15.QueryStringCachingBehavior;
import com.microsoft.azure.management.cdn.v2020_04_15.OptimizationType;
import com.microsoft.azure.management.cdn.v2020_04_15.GeoFilter;
import com.microsoft.azure.management.cdn.v2020_04_15.ResourceReference;
import com.microsoft.azure.management.cdn.v2020_04_15.UrlSigningKey;
import com.microsoft.azure.management.cdn.v2020_04_15.EndpointPropertiesUpdateParametersDeliveryPolicy;
import com.microsoft.azure.management.cdn.v2020_04_15.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink;
import com.microsoft.azure.management.cdn.v2020_04_15.DeepCreatedOrigin;
import com.microsoft.azure.management.cdn.v2020_04_15.DeepCreatedOriginGroup;
import com.microsoft.azure.management.cdn.v2020_04_15.EndpointResourceState;
import rx.functions.Func1;

class EndpointImpl extends CreatableUpdatableImpl<Endpoint, EndpointInner, EndpointImpl> implements Endpoint, Endpoint.Definition, Endpoint.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String endpointName;
    private EndpointUpdateParameters updateParameter;

    EndpointImpl(String name, CdnManager manager) {
        super(name, new EndpointInner());
        this.manager = manager;
        // Set resource name
        this.endpointName = name;
        //
        this.updateParameter = new EndpointUpdateParameters();
    }

    EndpointImpl(EndpointInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.endpointName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.endpointName = IdParsingUtils.getValueFromIdByName(inner.id(), "endpoints");
        //
        this.updateParameter = new EndpointUpdateParameters();
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Endpoint> createResourceAsync() {
        EndpointsInner client = this.manager().inner().endpoints();
        return client.createAsync(this.resourceGroupName, this.profileName, this.endpointName, this.inner())
            .map(new Func1<EndpointInner, EndpointInner>() {
               @Override
               public EndpointInner call(EndpointInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Endpoint> updateResourceAsync() {
        EndpointsInner client = this.manager().inner().endpoints();
        return client.updateAsync(this.resourceGroupName, this.profileName, this.endpointName, this.updateParameter)
            .map(new Func1<EndpointInner, EndpointInner>() {
               @Override
               public EndpointInner call(EndpointInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EndpointInner> getInnerAsync() {
        EndpointsInner client = this.manager().inner().endpoints();
        return client.getAsync(this.resourceGroupName, this.profileName, this.endpointName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new EndpointUpdateParameters();
    }

    @Override
    public List<String> contentTypesToCompress() {
        return this.inner().contentTypesToCompress();
    }

    @Override
    public ResourceReference defaultOriginGroup() {
        return this.inner().defaultOriginGroup();
    }

    @Override
    public EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy() {
        return this.inner().deliveryPolicy();
    }

    @Override
    public List<GeoFilter> geoFilters() {
        return this.inner().geoFilters();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Boolean isCompressionEnabled() {
        return this.inner().isCompressionEnabled();
    }

    @Override
    public Boolean isHttpAllowed() {
        return this.inner().isHttpAllowed();
    }

    @Override
    public Boolean isHttpsAllowed() {
        return this.inner().isHttpsAllowed();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public OptimizationType optimizationType() {
        return this.inner().optimizationType();
    }

    @Override
    public List<DeepCreatedOriginGroup> originGroups() {
        return this.inner().originGroups();
    }

    @Override
    public String originHostHeader() {
        return this.inner().originHostHeader();
    }

    @Override
    public String originPath() {
        return this.inner().originPath();
    }

    @Override
    public List<DeepCreatedOrigin> origins() {
        return this.inner().origins();
    }

    @Override
    public String probePath() {
        return this.inner().probePath();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public QueryStringCachingBehavior queryStringCachingBehavior() {
        return this.inner().queryStringCachingBehavior();
    }

    @Override
    public EndpointResourceState resourceState() {
        return this.inner().resourceState();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public List<UrlSigningKey> urlSigningKeys() {
        return this.inner().urlSigningKeys();
    }

    @Override
    public EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.inner().webApplicationFirewallPolicyLink();
    }

    @Override
    public EndpointImpl withExistingProfile(String resourceGroupName, String profileName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        return this;
    }

    @Override
    public EndpointImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public EndpointImpl withOrigins(List<DeepCreatedOrigin> origins) {
        this.inner().withOrigins(origins);
        return this;
    }

    @Override
    public EndpointImpl withOriginGroups(List<DeepCreatedOriginGroup> originGroups) {
        this.inner().withOriginGroups(originGroups);
        return this;
    }

    @Override
    public EndpointImpl withContentTypesToCompress(List<String> contentTypesToCompress) {
        if (isInCreateMode()) {
            this.inner().withContentTypesToCompress(contentTypesToCompress);
        } else {
            this.updateParameter.withContentTypesToCompress(contentTypesToCompress);
        }
        return this;
    }

    @Override
    public EndpointImpl withDefaultOriginGroup(ResourceReference defaultOriginGroup) {
        if (isInCreateMode()) {
            this.inner().withDefaultOriginGroup(defaultOriginGroup);
        } else {
            this.updateParameter.withDefaultOriginGroup(defaultOriginGroup);
        }
        return this;
    }

    @Override
    public EndpointImpl withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy) {
        if (isInCreateMode()) {
            this.inner().withDeliveryPolicy(deliveryPolicy);
        } else {
            this.updateParameter.withDeliveryPolicy(deliveryPolicy);
        }
        return this;
    }

    @Override
    public EndpointImpl withGeoFilters(List<GeoFilter> geoFilters) {
        if (isInCreateMode()) {
            this.inner().withGeoFilters(geoFilters);
        } else {
            this.updateParameter.withGeoFilters(geoFilters);
        }
        return this;
    }

    @Override
    public EndpointImpl withIsCompressionEnabled(Boolean isCompressionEnabled) {
        if (isInCreateMode()) {
            this.inner().withIsCompressionEnabled(isCompressionEnabled);
        } else {
            this.updateParameter.withIsCompressionEnabled(isCompressionEnabled);
        }
        return this;
    }

    @Override
    public EndpointImpl withIsHttpAllowed(Boolean isHttpAllowed) {
        if (isInCreateMode()) {
            this.inner().withIsHttpAllowed(isHttpAllowed);
        } else {
            this.updateParameter.withIsHttpAllowed(isHttpAllowed);
        }
        return this;
    }

    @Override
    public EndpointImpl withIsHttpsAllowed(Boolean isHttpsAllowed) {
        if (isInCreateMode()) {
            this.inner().withIsHttpsAllowed(isHttpsAllowed);
        } else {
            this.updateParameter.withIsHttpsAllowed(isHttpsAllowed);
        }
        return this;
    }

    @Override
    public EndpointImpl withOptimizationType(OptimizationType optimizationType) {
        if (isInCreateMode()) {
            this.inner().withOptimizationType(optimizationType);
        } else {
            this.updateParameter.withOptimizationType(optimizationType);
        }
        return this;
    }

    @Override
    public EndpointImpl withOriginHostHeader(String originHostHeader) {
        if (isInCreateMode()) {
            this.inner().withOriginHostHeader(originHostHeader);
        } else {
            this.updateParameter.withOriginHostHeader(originHostHeader);
        }
        return this;
    }

    @Override
    public EndpointImpl withOriginPath(String originPath) {
        if (isInCreateMode()) {
            this.inner().withOriginPath(originPath);
        } else {
            this.updateParameter.withOriginPath(originPath);
        }
        return this;
    }

    @Override
    public EndpointImpl withProbePath(String probePath) {
        if (isInCreateMode()) {
            this.inner().withProbePath(probePath);
        } else {
            this.updateParameter.withProbePath(probePath);
        }
        return this;
    }

    @Override
    public EndpointImpl withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
        if (isInCreateMode()) {
            this.inner().withQueryStringCachingBehavior(queryStringCachingBehavior);
        } else {
            this.updateParameter.withQueryStringCachingBehavior(queryStringCachingBehavior);
        }
        return this;
    }

    @Override
    public EndpointImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

    @Override
    public EndpointImpl withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys) {
        if (isInCreateMode()) {
            this.inner().withUrlSigningKeys(urlSigningKeys);
        } else {
            this.updateParameter.withUrlSigningKeys(urlSigningKeys);
        }
        return this;
    }

    @Override
    public EndpointImpl withWebApplicationFirewallPolicyLink(EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        if (isInCreateMode()) {
            this.inner().withWebApplicationFirewallPolicyLink(webApplicationFirewallPolicyLink);
        } else {
            this.updateParameter.withWebApplicationFirewallPolicyLink(webApplicationFirewallPolicyLink);
        }
        return this;
    }

}
