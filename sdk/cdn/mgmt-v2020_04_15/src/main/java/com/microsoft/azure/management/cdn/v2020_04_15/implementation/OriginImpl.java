/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.v2020_04_15.implementation;

import com.microsoft.azure.management.cdn.v2020_04_15.Origin;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.cdn.v2020_04_15.OriginUpdateParameters;
import com.microsoft.azure.management.cdn.v2020_04_15.OriginResourceState;
import com.microsoft.azure.management.cdn.v2020_04_15.PrivateEndpointStatus;
import rx.functions.Func1;

class OriginImpl extends CreatableUpdatableImpl<Origin, OriginInner, OriginImpl> implements Origin, Origin.Definition, Origin.Update {
    private final CdnManager manager;
    private String resourceGroupName;
    private String profileName;
    private String endpointName;
    private String originName;
    private OriginUpdateParameters updateParameter;

    OriginImpl(String name, CdnManager manager) {
        super(name, new OriginInner());
        this.manager = manager;
        // Set resource name
        this.originName = name;
        //
        this.updateParameter = new OriginUpdateParameters();
    }

    OriginImpl(OriginInner inner, CdnManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.originName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.profileName = IdParsingUtils.getValueFromIdByName(inner.id(), "profiles");
        this.endpointName = IdParsingUtils.getValueFromIdByName(inner.id(), "endpoints");
        this.originName = IdParsingUtils.getValueFromIdByName(inner.id(), "origins");
        //
        this.updateParameter = new OriginUpdateParameters();
    }

    @Override
    public CdnManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Origin> createResourceAsync() {
        OriginsInner client = this.manager().inner().origins();
        return client.createAsync(this.resourceGroupName, this.profileName, this.endpointName, this.originName, this.inner())
            .map(new Func1<OriginInner, OriginInner>() {
               @Override
               public OriginInner call(OriginInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Origin> updateResourceAsync() {
        OriginsInner client = this.manager().inner().origins();
        return client.updateAsync(this.resourceGroupName, this.profileName, this.endpointName, this.originName, this.updateParameter)
            .map(new Func1<OriginInner, OriginInner>() {
               @Override
               public OriginInner call(OriginInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<OriginInner> getInnerAsync() {
        OriginsInner client = this.manager().inner().origins();
        return client.getAsync(this.resourceGroupName, this.profileName, this.endpointName, this.originName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new OriginUpdateParameters();
    }

    @Override
    public Boolean enabled() {
        return this.inner().enabled();
    }

    @Override
    public String hostName() {
        return this.inner().hostName();
    }

    @Override
    public Integer httpPort() {
        return this.inner().httpPort();
    }

    @Override
    public Integer httpsPort() {
        return this.inner().httpsPort();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String originHostHeader() {
        return this.inner().originHostHeader();
    }

    @Override
    public Integer priority() {
        return this.inner().priority();
    }

    @Override
    public PrivateEndpointStatus privateEndpointStatus() {
        return this.inner().privateEndpointStatus();
    }

    @Override
    public String privateLinkAlias() {
        return this.inner().privateLinkAlias();
    }

    @Override
    public String privateLinkApprovalMessage() {
        return this.inner().privateLinkApprovalMessage();
    }

    @Override
    public String privateLinkLocation() {
        return this.inner().privateLinkLocation();
    }

    @Override
    public String privateLinkResourceId() {
        return this.inner().privateLinkResourceId();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public OriginResourceState resourceState() {
        return this.inner().resourceState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public Integer weight() {
        return this.inner().weight();
    }

    @Override
    public OriginImpl withExistingEndpoint(String resourceGroupName, String profileName, String endpointName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        this.endpointName = endpointName;
        return this;
    }

    @Override
    public OriginImpl withEnabled(Boolean enabled) {
        if (isInCreateMode()) {
            this.inner().withEnabled(enabled);
        } else {
            this.updateParameter.withEnabled(enabled);
        }
        return this;
    }

    @Override
    public OriginImpl withHostName(String hostName) {
        if (isInCreateMode()) {
            this.inner().withHostName(hostName);
        } else {
            this.updateParameter.withHostName(hostName);
        }
        return this;
    }

    @Override
    public OriginImpl withHttpPort(Integer httpPort) {
        if (isInCreateMode()) {
            this.inner().withHttpPort(httpPort);
        } else {
            this.updateParameter.withHttpPort(httpPort);
        }
        return this;
    }

    @Override
    public OriginImpl withHttpsPort(Integer httpsPort) {
        if (isInCreateMode()) {
            this.inner().withHttpsPort(httpsPort);
        } else {
            this.updateParameter.withHttpsPort(httpsPort);
        }
        return this;
    }

    @Override
    public OriginImpl withOriginHostHeader(String originHostHeader) {
        if (isInCreateMode()) {
            this.inner().withOriginHostHeader(originHostHeader);
        } else {
            this.updateParameter.withOriginHostHeader(originHostHeader);
        }
        return this;
    }

    @Override
    public OriginImpl withPriority(Integer priority) {
        if (isInCreateMode()) {
            this.inner().withPriority(priority);
        } else {
            this.updateParameter.withPriority(priority);
        }
        return this;
    }

    @Override
    public OriginImpl withPrivateLinkAlias(String privateLinkAlias) {
        if (isInCreateMode()) {
            this.inner().withPrivateLinkAlias(privateLinkAlias);
        } else {
            this.updateParameter.withPrivateLinkAlias(privateLinkAlias);
        }
        return this;
    }

    @Override
    public OriginImpl withPrivateLinkApprovalMessage(String privateLinkApprovalMessage) {
        if (isInCreateMode()) {
            this.inner().withPrivateLinkApprovalMessage(privateLinkApprovalMessage);
        } else {
            this.updateParameter.withPrivateLinkApprovalMessage(privateLinkApprovalMessage);
        }
        return this;
    }

    @Override
    public OriginImpl withPrivateLinkLocation(String privateLinkLocation) {
        if (isInCreateMode()) {
            this.inner().withPrivateLinkLocation(privateLinkLocation);
        } else {
            this.updateParameter.withPrivateLinkLocation(privateLinkLocation);
        }
        return this;
    }

    @Override
    public OriginImpl withPrivateLinkResourceId(String privateLinkResourceId) {
        if (isInCreateMode()) {
            this.inner().withPrivateLinkResourceId(privateLinkResourceId);
        } else {
            this.updateParameter.withPrivateLinkResourceId(privateLinkResourceId);
        }
        return this;
    }

    @Override
    public OriginImpl withWeight(Integer weight) {
        if (isInCreateMode()) {
            this.inner().withWeight(weight);
        } else {
            this.updateParameter.withWeight(weight);
        }
        return this;
    }

}
