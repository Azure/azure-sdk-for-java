// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cdn.generated.CdnManager;
import com.azure.resourcemanager.cdn.generated.fluent.AfdEndpointsClient;
import com.azure.resourcemanager.cdn.generated.fluent.models.AfdEndpointInner;
import com.azure.resourcemanager.cdn.generated.fluent.models.UsageInner;
import com.azure.resourcemanager.cdn.generated.fluent.models.ValidateCustomDomainOutputInner;
import com.azure.resourcemanager.cdn.generated.models.AfdEndpoint;
import com.azure.resourcemanager.cdn.generated.models.AfdEndpoints;
import com.azure.resourcemanager.cdn.generated.models.AfdPurgeParameters;
import com.azure.resourcemanager.cdn.generated.models.Usage;
import com.azure.resourcemanager.cdn.generated.models.ValidateCustomDomainInput;
import com.azure.resourcemanager.cdn.generated.models.ValidateCustomDomainOutput;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AfdEndpointsImpl implements AfdEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AfdEndpointsImpl.class);

    private final AfdEndpointsClient innerClient;

    private final CdnManager serviceManager;

    public AfdEndpointsImpl(AfdEndpointsClient innerClient, CdnManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AfdEndpoint> listByProfile(String resourceGroupName, String profileName) {
        PagedIterable<AfdEndpointInner> inner = this.serviceClient().listByProfile(resourceGroupName, profileName);
        return inner.mapPage(inner1 -> new AfdEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<AfdEndpoint> listByProfile(String resourceGroupName, String profileName, Context context) {
        PagedIterable<AfdEndpointInner> inner =
            this.serviceClient().listByProfile(resourceGroupName, profileName, context);
        return inner.mapPage(inner1 -> new AfdEndpointImpl(inner1, this.manager()));
    }

    public AfdEndpoint get(String resourceGroupName, String profileName, String endpointName) {
        AfdEndpointInner inner = this.serviceClient().get(resourceGroupName, profileName, endpointName);
        if (inner != null) {
            return new AfdEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AfdEndpoint> getWithResponse(
        String resourceGroupName, String profileName, String endpointName, Context context) {
        Response<AfdEndpointInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, profileName, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AfdEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String profileName, String endpointName) {
        this.serviceClient().delete(resourceGroupName, profileName, endpointName);
    }

    public void delete(String resourceGroupName, String profileName, String endpointName, Context context) {
        this.serviceClient().delete(resourceGroupName, profileName, endpointName, context);
    }

    public void purgeContent(
        String resourceGroupName, String profileName, String endpointName, AfdPurgeParameters contents) {
        this.serviceClient().purgeContent(resourceGroupName, profileName, endpointName, contents);
    }

    public void purgeContent(
        String resourceGroupName,
        String profileName,
        String endpointName,
        AfdPurgeParameters contents,
        Context context) {
        this.serviceClient().purgeContent(resourceGroupName, profileName, endpointName, contents, context);
    }

    public PagedIterable<Usage> listResourceUsage(String resourceGroupName, String profileName, String endpointName) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().listResourceUsage(resourceGroupName, profileName, endpointName);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public PagedIterable<Usage> listResourceUsage(
        String resourceGroupName, String profileName, String endpointName, Context context) {
        PagedIterable<UsageInner> inner =
            this.serviceClient().listResourceUsage(resourceGroupName, profileName, endpointName, context);
        return inner.mapPage(inner1 -> new UsageImpl(inner1, this.manager()));
    }

    public ValidateCustomDomainOutput validateCustomDomain(
        String resourceGroupName,
        String profileName,
        String endpointName,
        ValidateCustomDomainInput customDomainProperties) {
        ValidateCustomDomainOutputInner inner =
            this
                .serviceClient()
                .validateCustomDomain(resourceGroupName, profileName, endpointName, customDomainProperties);
        if (inner != null) {
            return new ValidateCustomDomainOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ValidateCustomDomainOutput> validateCustomDomainWithResponse(
        String resourceGroupName,
        String profileName,
        String endpointName,
        ValidateCustomDomainInput customDomainProperties,
        Context context) {
        Response<ValidateCustomDomainOutputInner> inner =
            this
                .serviceClient()
                .validateCustomDomainWithResponse(
                    resourceGroupName, profileName, endpointName, customDomainProperties, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ValidateCustomDomainOutputImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AfdEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, endpointName, Context.NONE).getValue();
    }

    public Response<AfdEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, endpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        this.delete(resourceGroupName, profileName, endpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "afdEndpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'afdEndpoints'.", id)));
        }
        this.delete(resourceGroupName, profileName, endpointName, context);
    }

    private AfdEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private CdnManager manager() {
        return this.serviceManager;
    }

    public AfdEndpointImpl define(String name) {
        return new AfdEndpointImpl(name, this.manager());
    }
}
