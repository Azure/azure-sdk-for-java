// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.CustomDomainInner;

/** An immutable client-side representation of CustomDomain. */
public interface CustomDomain {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the hostname property: The host name of the custom domain. Must be a domain name.
     *
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the resourceState property: Resource status of the custom domain.
     *
     * @return the resourceState value.
     */
    CustomDomainResourceState resourceState();

    /**
     * Gets the customHttpsProvisioningState property: Provisioning status of Custom Https of the custom domain.
     *
     * @return the customHttpsProvisioningState value.
     */
    CustomHttpsProvisioningState customHttpsProvisioningState();

    /**
     * Gets the customHttpsProvisioningSubstate property: Provisioning substate shows the progress of custom HTTPS
     * enabling/disabling process step by step.
     *
     * @return the customHttpsProvisioningSubstate value.
     */
    CustomHttpsProvisioningSubstate customHttpsProvisioningSubstate();

    /**
     * Gets the validationData property: Special validation or data may be required when delivering CDN to some regions
     * due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in
     * China.
     *
     * @return the validationData value.
     */
    String validationData();

    /**
     * Gets the provisioningState property: Provisioning status of the custom domain.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the inner com.azure.resourcemanager.cdn.generated.fluent.models.CustomDomainInner object.
     *
     * @return the inner object.
     */
    CustomDomainInner innerModel();

    /** The entirety of the CustomDomain definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The CustomDomain definition stages. */
    interface DefinitionStages {
        /** The first stage of the CustomDomain definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the CustomDomain definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, profileName, endpointName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param profileName Name of the CDN profile which is unique within the resource group.
             * @param endpointName Name of the endpoint under the profile which is unique globally.
             * @return the next definition stage.
             */
            WithCreate withExistingEndpoint(String resourceGroupName, String profileName, String endpointName);
        }
        /**
         * The stage of the CustomDomain definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithHostname {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            CustomDomain create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            CustomDomain create(Context context);
        }
        /** The stage of the CustomDomain definition allowing to specify hostname. */
        interface WithHostname {
            /**
             * Specifies the hostname property: The host name of the custom domain. Must be a domain name..
             *
             * @param hostname The host name of the custom domain. Must be a domain name.
             * @return the next definition stage.
             */
            WithCreate withHostname(String hostname);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    CustomDomain refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    CustomDomain refresh(Context context);

    /**
     * Disable https delivery of the custom domain.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    CustomDomain disableCustomHttps();

    /**
     * Disable https delivery of the custom domain.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    CustomDomain disableCustomHttps(Context context);

    /**
     * Enable https delivery of the custom domain.
     *
     * @param customDomainHttpsParameters The configuration specifying how to enable HTTPS for the custom domain - using
     *     CDN managed certificate or user's own certificate. If not specified, enabling ssl uses CDN managed
     *     certificate by default.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    CustomDomain enableCustomHttps(CustomDomainHttpsParameters customDomainHttpsParameters);

    /**
     * Enable https delivery of the custom domain.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    CustomDomain enableCustomHttps();

    /**
     * Enable https delivery of the custom domain.
     *
     * @param customDomainHttpsParameters The configuration specifying how to enable HTTPS for the custom domain - using
     *     CDN managed certificate or user's own certificate. If not specified, enabling ssl uses CDN managed
     *     certificate by default.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    CustomDomain enableCustomHttps(CustomDomainHttpsParameters customDomainHttpsParameters, Context context);
}
