// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.RouteInner;
import java.util.List;

/** An immutable client-side representation of Route. */
public interface Route {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the customDomains property: Domains referenced by this endpoint.
     *
     * @return the customDomains value.
     */
    List<ResourceReference> customDomains();

    /**
     * Gets the originGroup property: A reference to the origin group.
     *
     * @return the originGroup value.
     */
    ResourceReference originGroup();

    /**
     * Gets the originPath property: A directory path on the origin that AzureFrontDoor can use to retrieve content
     * from, e.g. contoso.cloudapp.net/originpath.
     *
     * @return the originPath value.
     */
    String originPath();

    /**
     * Gets the ruleSets property: rule sets referenced by this endpoint.
     *
     * @return the ruleSets value.
     */
    List<ResourceReference> ruleSets();

    /**
     * Gets the supportedProtocols property: List of supported protocols for this route.
     *
     * @return the supportedProtocols value.
     */
    List<AfdEndpointProtocols> supportedProtocols();

    /**
     * Gets the patternsToMatch property: The route patterns of the rule.
     *
     * @return the patternsToMatch value.
     */
    List<String> patternsToMatch();

    /**
     * Gets the compressionSettings property: compression settings.
     *
     * @return the compressionSettings value.
     */
    Object compressionSettings();

    /**
     * Gets the queryStringCachingBehavior property: Defines how CDN caches requests that include query strings. You can
     * ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being
     * cached, or cache every request with a unique URL.
     *
     * @return the queryStringCachingBehavior value.
     */
    AfdQueryStringCachingBehavior queryStringCachingBehavior();

    /**
     * Gets the forwardingProtocol property: Protocol this rule will use when forwarding traffic to backends.
     *
     * @return the forwardingProtocol value.
     */
    ForwardingProtocol forwardingProtocol();

    /**
     * Gets the linkToDefaultDomain property: whether this route will be linked to the default endpoint domain.
     *
     * @return the linkToDefaultDomain value.
     */
    LinkToDefaultDomain linkToDefaultDomain();

    /**
     * Gets the httpsRedirect property: Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this
     * is a easy way to set up this rule and it will be the first rule that gets executed.
     *
     * @return the httpsRedirect value.
     */
    HttpsRedirect httpsRedirect();

    /**
     * Gets the enabledState property: Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
     *
     * @return the enabledState value.
     */
    EnabledState enabledState();

    /**
     * Gets the provisioningState property: Provisioning status.
     *
     * @return the provisioningState value.
     */
    AfdProvisioningState provisioningState();

    /**
     * Gets the deploymentStatus property: The deploymentStatus property.
     *
     * @return the deploymentStatus value.
     */
    DeploymentStatus deploymentStatus();

    /**
     * Gets the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the inner com.azure.resourcemanager.cdn.generated.fluent.models.RouteInner object.
     *
     * @return the inner object.
     */
    RouteInner innerModel();

    /** The entirety of the Route definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The Route definition stages. */
    interface DefinitionStages {
        /** The first stage of the Route definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Route definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, profileName, endpointName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param profileName Name of the CDN profile which is unique within the resource group.
             * @param endpointName Name of the endpoint under the profile which is unique globally.
             * @return the next definition stage.
             */
            WithCreate withExistingAfdEndpoint(String resourceGroupName, String profileName, String endpointName);
        }
        /**
         * The stage of the Route definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithCustomDomains,
                DefinitionStages.WithOriginGroup,
                DefinitionStages.WithOriginPath,
                DefinitionStages.WithRuleSets,
                DefinitionStages.WithSupportedProtocols,
                DefinitionStages.WithPatternsToMatch,
                DefinitionStages.WithCompressionSettings,
                DefinitionStages.WithQueryStringCachingBehavior,
                DefinitionStages.WithForwardingProtocol,
                DefinitionStages.WithLinkToDefaultDomain,
                DefinitionStages.WithHttpsRedirect,
                DefinitionStages.WithEnabledState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Route create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Route create(Context context);
        }
        /** The stage of the Route definition allowing to specify customDomains. */
        interface WithCustomDomains {
            /**
             * Specifies the customDomains property: Domains referenced by this endpoint..
             *
             * @param customDomains Domains referenced by this endpoint.
             * @return the next definition stage.
             */
            WithCreate withCustomDomains(List<ResourceReference> customDomains);
        }
        /** The stage of the Route definition allowing to specify originGroup. */
        interface WithOriginGroup {
            /**
             * Specifies the originGroup property: A reference to the origin group..
             *
             * @param originGroup A reference to the origin group.
             * @return the next definition stage.
             */
            WithCreate withOriginGroup(ResourceReference originGroup);
        }
        /** The stage of the Route definition allowing to specify originPath. */
        interface WithOriginPath {
            /**
             * Specifies the originPath property: A directory path on the origin that AzureFrontDoor can use to retrieve
             * content from, e.g. contoso.cloudapp.net/originpath..
             *
             * @param originPath A directory path on the origin that AzureFrontDoor can use to retrieve content from,
             *     e.g. contoso.cloudapp.net/originpath.
             * @return the next definition stage.
             */
            WithCreate withOriginPath(String originPath);
        }
        /** The stage of the Route definition allowing to specify ruleSets. */
        interface WithRuleSets {
            /**
             * Specifies the ruleSets property: rule sets referenced by this endpoint..
             *
             * @param ruleSets rule sets referenced by this endpoint.
             * @return the next definition stage.
             */
            WithCreate withRuleSets(List<ResourceReference> ruleSets);
        }
        /** The stage of the Route definition allowing to specify supportedProtocols. */
        interface WithSupportedProtocols {
            /**
             * Specifies the supportedProtocols property: List of supported protocols for this route..
             *
             * @param supportedProtocols List of supported protocols for this route.
             * @return the next definition stage.
             */
            WithCreate withSupportedProtocols(List<AfdEndpointProtocols> supportedProtocols);
        }
        /** The stage of the Route definition allowing to specify patternsToMatch. */
        interface WithPatternsToMatch {
            /**
             * Specifies the patternsToMatch property: The route patterns of the rule..
             *
             * @param patternsToMatch The route patterns of the rule.
             * @return the next definition stage.
             */
            WithCreate withPatternsToMatch(List<String> patternsToMatch);
        }
        /** The stage of the Route definition allowing to specify compressionSettings. */
        interface WithCompressionSettings {
            /**
             * Specifies the compressionSettings property: compression settings..
             *
             * @param compressionSettings compression settings.
             * @return the next definition stage.
             */
            WithCreate withCompressionSettings(Object compressionSettings);
        }
        /** The stage of the Route definition allowing to specify queryStringCachingBehavior. */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies the queryStringCachingBehavior property: Defines how CDN caches requests that include query
             * strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain
             * query strings from being cached, or cache every request with a unique URL..
             *
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can
             *     ignore any query strings when caching, bypass caching to prevent requests that contain query strings
             *     from being cached, or cache every request with a unique URL.
             * @return the next definition stage.
             */
            WithCreate withQueryStringCachingBehavior(AfdQueryStringCachingBehavior queryStringCachingBehavior);
        }
        /** The stage of the Route definition allowing to specify forwardingProtocol. */
        interface WithForwardingProtocol {
            /**
             * Specifies the forwardingProtocol property: Protocol this rule will use when forwarding traffic to
             * backends..
             *
             * @param forwardingProtocol Protocol this rule will use when forwarding traffic to backends.
             * @return the next definition stage.
             */
            WithCreate withForwardingProtocol(ForwardingProtocol forwardingProtocol);
        }
        /** The stage of the Route definition allowing to specify linkToDefaultDomain. */
        interface WithLinkToDefaultDomain {
            /**
             * Specifies the linkToDefaultDomain property: whether this route will be linked to the default endpoint
             * domain..
             *
             * @param linkToDefaultDomain whether this route will be linked to the default endpoint domain.
             * @return the next definition stage.
             */
            WithCreate withLinkToDefaultDomain(LinkToDefaultDomain linkToDefaultDomain);
        }
        /** The stage of the Route definition allowing to specify httpsRedirect. */
        interface WithHttpsRedirect {
            /**
             * Specifies the httpsRedirect property: Whether to automatically redirect HTTP traffic to HTTPS traffic.
             * Note that this is a easy way to set up this rule and it will be the first rule that gets executed..
             *
             * @param httpsRedirect Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a
             *     easy way to set up this rule and it will be the first rule that gets executed.
             * @return the next definition stage.
             */
            WithCreate withHttpsRedirect(HttpsRedirect httpsRedirect);
        }
        /** The stage of the Route definition allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Whether to enable use of this rule. Permitted values are 'Enabled'
             * or 'Disabled'.
             *
             * @param enabledState Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
             * @return the next definition stage.
             */
            WithCreate withEnabledState(EnabledState enabledState);
        }
    }
    /**
     * Begins update for the Route resource.
     *
     * @return the stage of resource update.
     */
    Route.Update update();

    /** The template for Route update. */
    interface Update
        extends UpdateStages.WithCustomDomains,
            UpdateStages.WithOriginGroup,
            UpdateStages.WithOriginPath,
            UpdateStages.WithRuleSets,
            UpdateStages.WithSupportedProtocols,
            UpdateStages.WithPatternsToMatch,
            UpdateStages.WithCompressionSettings,
            UpdateStages.WithQueryStringCachingBehavior,
            UpdateStages.WithForwardingProtocol,
            UpdateStages.WithLinkToDefaultDomain,
            UpdateStages.WithHttpsRedirect,
            UpdateStages.WithEnabledState {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Route apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Route apply(Context context);
    }
    /** The Route update stages. */
    interface UpdateStages {
        /** The stage of the Route update allowing to specify customDomains. */
        interface WithCustomDomains {
            /**
             * Specifies the customDomains property: Domains referenced by this endpoint..
             *
             * @param customDomains Domains referenced by this endpoint.
             * @return the next definition stage.
             */
            Update withCustomDomains(List<ResourceReference> customDomains);
        }
        /** The stage of the Route update allowing to specify originGroup. */
        interface WithOriginGroup {
            /**
             * Specifies the originGroup property: A reference to the origin group..
             *
             * @param originGroup A reference to the origin group.
             * @return the next definition stage.
             */
            Update withOriginGroup(ResourceReference originGroup);
        }
        /** The stage of the Route update allowing to specify originPath. */
        interface WithOriginPath {
            /**
             * Specifies the originPath property: A directory path on the origin that AzureFrontDoor can use to retrieve
             * content from, e.g. contoso.cloudapp.net/originpath..
             *
             * @param originPath A directory path on the origin that AzureFrontDoor can use to retrieve content from,
             *     e.g. contoso.cloudapp.net/originpath.
             * @return the next definition stage.
             */
            Update withOriginPath(String originPath);
        }
        /** The stage of the Route update allowing to specify ruleSets. */
        interface WithRuleSets {
            /**
             * Specifies the ruleSets property: rule sets referenced by this endpoint..
             *
             * @param ruleSets rule sets referenced by this endpoint.
             * @return the next definition stage.
             */
            Update withRuleSets(List<ResourceReference> ruleSets);
        }
        /** The stage of the Route update allowing to specify supportedProtocols. */
        interface WithSupportedProtocols {
            /**
             * Specifies the supportedProtocols property: List of supported protocols for this route..
             *
             * @param supportedProtocols List of supported protocols for this route.
             * @return the next definition stage.
             */
            Update withSupportedProtocols(List<AfdEndpointProtocols> supportedProtocols);
        }
        /** The stage of the Route update allowing to specify patternsToMatch. */
        interface WithPatternsToMatch {
            /**
             * Specifies the patternsToMatch property: The route patterns of the rule..
             *
             * @param patternsToMatch The route patterns of the rule.
             * @return the next definition stage.
             */
            Update withPatternsToMatch(List<String> patternsToMatch);
        }
        /** The stage of the Route update allowing to specify compressionSettings. */
        interface WithCompressionSettings {
            /**
             * Specifies the compressionSettings property: compression settings..
             *
             * @param compressionSettings compression settings.
             * @return the next definition stage.
             */
            Update withCompressionSettings(Object compressionSettings);
        }
        /** The stage of the Route update allowing to specify queryStringCachingBehavior. */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies the queryStringCachingBehavior property: Defines how CDN caches requests that include query
             * strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain
             * query strings from being cached, or cache every request with a unique URL..
             *
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can
             *     ignore any query strings when caching, bypass caching to prevent requests that contain query strings
             *     from being cached, or cache every request with a unique URL.
             * @return the next definition stage.
             */
            Update withQueryStringCachingBehavior(AfdQueryStringCachingBehavior queryStringCachingBehavior);
        }
        /** The stage of the Route update allowing to specify forwardingProtocol. */
        interface WithForwardingProtocol {
            /**
             * Specifies the forwardingProtocol property: Protocol this rule will use when forwarding traffic to
             * backends..
             *
             * @param forwardingProtocol Protocol this rule will use when forwarding traffic to backends.
             * @return the next definition stage.
             */
            Update withForwardingProtocol(ForwardingProtocol forwardingProtocol);
        }
        /** The stage of the Route update allowing to specify linkToDefaultDomain. */
        interface WithLinkToDefaultDomain {
            /**
             * Specifies the linkToDefaultDomain property: whether this route will be linked to the default endpoint
             * domain..
             *
             * @param linkToDefaultDomain whether this route will be linked to the default endpoint domain.
             * @return the next definition stage.
             */
            Update withLinkToDefaultDomain(LinkToDefaultDomain linkToDefaultDomain);
        }
        /** The stage of the Route update allowing to specify httpsRedirect. */
        interface WithHttpsRedirect {
            /**
             * Specifies the httpsRedirect property: Whether to automatically redirect HTTP traffic to HTTPS traffic.
             * Note that this is a easy way to set up this rule and it will be the first rule that gets executed..
             *
             * @param httpsRedirect Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a
             *     easy way to set up this rule and it will be the first rule that gets executed.
             * @return the next definition stage.
             */
            Update withHttpsRedirect(HttpsRedirect httpsRedirect);
        }
        /** The stage of the Route update allowing to specify enabledState. */
        interface WithEnabledState {
            /**
             * Specifies the enabledState property: Whether to enable use of this rule. Permitted values are 'Enabled'
             * or 'Disabled'.
             *
             * @param enabledState Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'.
             * @return the next definition stage.
             */
            Update withEnabledState(EnabledState enabledState);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Route refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Route refresh(Context context);
}
