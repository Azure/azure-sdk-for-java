// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cdn.generated.CdnManager;
import com.azure.resourcemanager.cdn.generated.fluent.SecretsClient;
import com.azure.resourcemanager.cdn.generated.fluent.models.SecretInner;
import com.azure.resourcemanager.cdn.generated.models.Secret;
import com.azure.resourcemanager.cdn.generated.models.Secrets;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SecretsImpl implements Secrets {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SecretsImpl.class);

    private final SecretsClient innerClient;

    private final CdnManager serviceManager;

    public SecretsImpl(SecretsClient innerClient, CdnManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Secret> listByProfile(String resourceGroupName, String profileName) {
        PagedIterable<SecretInner> inner = this.serviceClient().listByProfile(resourceGroupName, profileName);
        return inner.mapPage(inner1 -> new SecretImpl(inner1, this.manager()));
    }

    public PagedIterable<Secret> listByProfile(String resourceGroupName, String profileName, Context context) {
        PagedIterable<SecretInner> inner = this.serviceClient().listByProfile(resourceGroupName, profileName, context);
        return inner.mapPage(inner1 -> new SecretImpl(inner1, this.manager()));
    }

    public Secret get(String resourceGroupName, String profileName, String secretName) {
        SecretInner inner = this.serviceClient().get(resourceGroupName, profileName, secretName);
        if (inner != null) {
            return new SecretImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Secret> getWithResponse(
        String resourceGroupName, String profileName, String secretName, Context context) {
        Response<SecretInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, profileName, secretName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecretImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String profileName, String secretName) {
        this.serviceClient().delete(resourceGroupName, profileName, secretName);
    }

    public void delete(String resourceGroupName, String profileName, String secretName, Context context) {
        this.serviceClient().delete(resourceGroupName, profileName, secretName, context);
    }

    public Secret getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String secretName = Utils.getValueFromIdByName(id, "secrets");
        if (secretName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, secretName, Context.NONE).getValue();
    }

    public Response<Secret> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String secretName = Utils.getValueFromIdByName(id, "secrets");
        if (secretName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, secretName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String secretName = Utils.getValueFromIdByName(id, "secrets");
        if (secretName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        this.delete(resourceGroupName, profileName, secretName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String secretName = Utils.getValueFromIdByName(id, "secrets");
        if (secretName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        this.delete(resourceGroupName, profileName, secretName, context);
    }

    private SecretsClient serviceClient() {
        return this.innerClient;
    }

    private CdnManager manager() {
        return this.serviceManager;
    }

    public SecretImpl define(String name) {
        return new SecretImpl(name, this.manager());
    }
}
