// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cdn.generated.CdnManager;
import com.azure.resourcemanager.cdn.generated.fluent.CustomDomainsClient;
import com.azure.resourcemanager.cdn.generated.fluent.models.CustomDomainInner;
import com.azure.resourcemanager.cdn.generated.models.CustomDomain;
import com.azure.resourcemanager.cdn.generated.models.CustomDomainHttpsParameters;
import com.azure.resourcemanager.cdn.generated.models.CustomDomains;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CustomDomainsImpl implements CustomDomains {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CustomDomainsImpl.class);

    private final CustomDomainsClient innerClient;

    private final CdnManager serviceManager;

    public CustomDomainsImpl(CustomDomainsClient innerClient, CdnManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CustomDomain> listByEndpoint(
        String resourceGroupName, String profileName, String endpointName) {
        PagedIterable<CustomDomainInner> inner =
            this.serviceClient().listByEndpoint(resourceGroupName, profileName, endpointName);
        return inner.mapPage(inner1 -> new CustomDomainImpl(inner1, this.manager()));
    }

    public PagedIterable<CustomDomain> listByEndpoint(
        String resourceGroupName, String profileName, String endpointName, Context context) {
        PagedIterable<CustomDomainInner> inner =
            this.serviceClient().listByEndpoint(resourceGroupName, profileName, endpointName, context);
        return inner.mapPage(inner1 -> new CustomDomainImpl(inner1, this.manager()));
    }

    public CustomDomain get(
        String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainInner inner =
            this.serviceClient().get(resourceGroupName, profileName, endpointName, customDomainName);
        if (inner != null) {
            return new CustomDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomain> getWithResponse(
        String resourceGroupName, String profileName, String endpointName, String customDomainName, Context context) {
        Response<CustomDomainInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, profileName, endpointName, customDomainName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomDomain delete(
        String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainInner inner =
            this.serviceClient().delete(resourceGroupName, profileName, endpointName, customDomainName);
        if (inner != null) {
            return new CustomDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CustomDomain delete(
        String resourceGroupName, String profileName, String endpointName, String customDomainName, Context context) {
        CustomDomainInner inner =
            this.serviceClient().delete(resourceGroupName, profileName, endpointName, customDomainName, context);
        if (inner != null) {
            return new CustomDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CustomDomain disableCustomHttps(
        String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainInner inner =
            this.serviceClient().disableCustomHttps(resourceGroupName, profileName, endpointName, customDomainName);
        if (inner != null) {
            return new CustomDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomain> disableCustomHttpsWithResponse(
        String resourceGroupName, String profileName, String endpointName, String customDomainName, Context context) {
        Response<CustomDomainInner> inner =
            this
                .serviceClient()
                .disableCustomHttpsWithResponse(
                    resourceGroupName, profileName, endpointName, customDomainName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomDomain enableCustomHttps(
        String resourceGroupName, String profileName, String endpointName, String customDomainName) {
        CustomDomainInner inner =
            this.serviceClient().enableCustomHttps(resourceGroupName, profileName, endpointName, customDomainName);
        if (inner != null) {
            return new CustomDomainImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomDomain> enableCustomHttpsWithResponse(
        String resourceGroupName,
        String profileName,
        String endpointName,
        String customDomainName,
        CustomDomainHttpsParameters customDomainHttpsParameters,
        Context context) {
        Response<CustomDomainInner> inner =
            this
                .serviceClient()
                .enableCustomHttpsWithResponse(
                    resourceGroupName,
                    profileName,
                    endpointName,
                    customDomainName,
                    customDomainHttpsParameters,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomDomainImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomDomain getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String customDomainName = Utils.getValueFromIdByName(id, "customDomains");
        if (customDomainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, profileName, endpointName, customDomainName, Context.NONE)
            .getValue();
    }

    public Response<CustomDomain> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String profileName = Utils.getValueFromIdByName(id, "profiles");
        if (profileName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'profiles'.", id)));
        }
        String endpointName = Utils.getValueFromIdByName(id, "endpoints");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String customDomainName = Utils.getValueFromIdByName(id, "customDomains");
        if (customDomainName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        return this.getWithResponse(resourceGroupName, profileName, endpointName, customDomainName, context);
    }

    private CustomDomainsClient serviceClient() {
        return this.innerClient;
    }

    private CdnManager manager() {
        return this.serviceManager;
    }

    public CustomDomainImpl define(String name) {
        return new CustomDomainImpl(name, this.manager());
    }
}
