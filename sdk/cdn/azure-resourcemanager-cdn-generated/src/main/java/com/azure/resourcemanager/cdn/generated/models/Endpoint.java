// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.EndpointInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Endpoint. */
public interface Endpoint {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the originPath property: A directory path on the origin that CDN can use to retrieve content from, e.g.
     * contoso.cloudapp.net/originpath.
     *
     * @return the originPath value.
     */
    String originPath();

    /**
     * Gets the contentTypesToCompress property: List of content types on which compression applies. The value should be
     * a valid MIME type.
     *
     * @return the contentTypesToCompress value.
     */
    List<String> contentTypesToCompress();

    /**
     * Gets the originHostHeader property: The host header value sent to the origin with each request. This property at
     * Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at
     * origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps,
     * Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     *
     * @return the originHostHeader value.
     */
    String originHostHeader();

    /**
     * Gets the isCompressionEnabled property: Indicates whether content compression is enabled on CDN. Default value is
     * false. If compression is enabled, content will be served as compressed if user requests for a compressed version.
     * Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.
     *
     * @return the isCompressionEnabled value.
     */
    Boolean isCompressionEnabled();

    /**
     * Gets the isHttpAllowed property: Indicates whether HTTP traffic is allowed on the endpoint. Default value is
     * true. At least one protocol (HTTP or HTTPS) must be allowed.
     *
     * @return the isHttpAllowed value.
     */
    Boolean isHttpAllowed();

    /**
     * Gets the isHttpsAllowed property: Indicates whether HTTPS traffic is allowed on the endpoint. Default value is
     * true. At least one protocol (HTTP or HTTPS) must be allowed.
     *
     * @return the isHttpsAllowed value.
     */
    Boolean isHttpsAllowed();

    /**
     * Gets the queryStringCachingBehavior property: Defines how CDN caches requests that include query strings. You can
     * ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being
     * cached, or cache every request with a unique URL.
     *
     * @return the queryStringCachingBehavior value.
     */
    QueryStringCachingBehavior queryStringCachingBehavior();

    /**
     * Gets the optimizationType property: Specifies what scenario the customer wants this CDN endpoint to optimize for,
     * e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
     *
     * @return the optimizationType value.
     */
    OptimizationType optimizationType();

    /**
     * Gets the probePath property: Path to a file hosted on the origin which helps accelerate delivery of the dynamic
     * content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is
     * only relevant when using a single origin.
     *
     * @return the probePath value.
     */
    String probePath();

    /**
     * Gets the geoFilters property: List of rules defining the user's geo access within a CDN endpoint. Each geo filter
     * defines an access rule to a specified path or content, e.g. block APAC for path /pictures/.
     *
     * @return the geoFilters value.
     */
    List<GeoFilter> geoFilters();

    /**
     * Gets the defaultOriginGroup property: A reference to the origin group.
     *
     * @return the defaultOriginGroup value.
     */
    ResourceReference defaultOriginGroup();

    /**
     * Gets the urlSigningKeys property: List of keys used to validate the signed URL hashes.
     *
     * @return the urlSigningKeys value.
     */
    List<UrlSigningKey> urlSigningKeys();

    /**
     * Gets the deliveryPolicy property: A policy that specifies the delivery rules to be used for an endpoint.
     *
     * @return the deliveryPolicy value.
     */
    EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy();

    /**
     * Gets the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for the endpoint
     * (if applicable).
     *
     * @return the webApplicationFirewallPolicyLink value.
     */
    EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink();

    /**
     * Gets the hostname property: The host name of the endpoint structured as {endpointName}.{DNSZone}, e.g.
     * contoso.azureedge.net.
     *
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the origins property: The source of the content being delivered via CDN.
     *
     * @return the origins value.
     */
    List<DeepCreatedOrigin> origins();

    /**
     * Gets the originGroups property: The origin groups comprising of origins that are used for load balancing the
     * traffic based on availability.
     *
     * @return the originGroups value.
     */
    List<DeepCreatedOriginGroup> originGroups();

    /**
     * Gets the resourceState property: Resource status of the endpoint.
     *
     * @return the resourceState value.
     */
    EndpointResourceState resourceState();

    /**
     * Gets the provisioningState property: Provisioning status of the endpoint.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.cdn.generated.fluent.models.EndpointInner object.
     *
     * @return the inner object.
     */
    EndpointInner innerModel();

    /** The entirety of the Endpoint definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Endpoint definition stages. */
    interface DefinitionStages {
        /** The first stage of the Endpoint definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Endpoint definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Endpoint definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, profileName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param profileName Name of the CDN profile which is unique within the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingProfile(String resourceGroupName, String profileName);
        }
        /**
         * The stage of the Endpoint definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithOriginPath,
                DefinitionStages.WithContentTypesToCompress,
                DefinitionStages.WithOriginHostHeader,
                DefinitionStages.WithIsCompressionEnabled,
                DefinitionStages.WithIsHttpAllowed,
                DefinitionStages.WithIsHttpsAllowed,
                DefinitionStages.WithQueryStringCachingBehavior,
                DefinitionStages.WithOptimizationType,
                DefinitionStages.WithProbePath,
                DefinitionStages.WithGeoFilters,
                DefinitionStages.WithDefaultOriginGroup,
                DefinitionStages.WithUrlSigningKeys,
                DefinitionStages.WithDeliveryPolicy,
                DefinitionStages.WithWebApplicationFirewallPolicyLink,
                DefinitionStages.WithOrigins,
                DefinitionStages.WithOriginGroups {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Endpoint create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Endpoint create(Context context);
        }
        /** The stage of the Endpoint definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Endpoint definition allowing to specify originPath. */
        interface WithOriginPath {
            /**
             * Specifies the originPath property: A directory path on the origin that CDN can use to retrieve content
             * from, e.g. contoso.cloudapp.net/originpath..
             *
             * @param originPath A directory path on the origin that CDN can use to retrieve content from, e.g.
             *     contoso.cloudapp.net/originpath.
             * @return the next definition stage.
             */
            WithCreate withOriginPath(String originPath);
        }
        /** The stage of the Endpoint definition allowing to specify contentTypesToCompress. */
        interface WithContentTypesToCompress {
            /**
             * Specifies the contentTypesToCompress property: List of content types on which compression applies. The
             * value should be a valid MIME type..
             *
             * @param contentTypesToCompress List of content types on which compression applies. The value should be a
             *     valid MIME type.
             * @return the next definition stage.
             */
            WithCreate withContentTypesToCompress(List<String> contentTypesToCompress);
        }
        /** The stage of the Endpoint definition allowing to specify originHostHeader. */
        interface WithOriginHostHeader {
            /**
             * Specifies the originHostHeader property: The host header value sent to the origin with each request. This
             * property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same
             * property specified at origin.If you leave this blank, the request hostname determines this value. Azure
             * CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match
             * the origin hostname by default..
             *
             * @param originHostHeader The host header value sent to the origin with each request. This property at
             *     Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property
             *     specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN
             *     origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match
             *     the origin hostname by default.
             * @return the next definition stage.
             */
            WithCreate withOriginHostHeader(String originHostHeader);
        }
        /** The stage of the Endpoint definition allowing to specify isCompressionEnabled. */
        interface WithIsCompressionEnabled {
            /**
             * Specifies the isCompressionEnabled property: Indicates whether content compression is enabled on CDN.
             * Default value is false. If compression is enabled, content will be served as compressed if user requests
             * for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1
             * byte or larger than 1 MB..
             *
             * @param isCompressionEnabled Indicates whether content compression is enabled on CDN. Default value is
             *     false. If compression is enabled, content will be served as compressed if user requests for a
             *     compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte
             *     or larger than 1 MB.
             * @return the next definition stage.
             */
            WithCreate withIsCompressionEnabled(Boolean isCompressionEnabled);
        }
        /** The stage of the Endpoint definition allowing to specify isHttpAllowed. */
        interface WithIsHttpAllowed {
            /**
             * Specifies the isHttpAllowed property: Indicates whether HTTP traffic is allowed on the endpoint. Default
             * value is true. At least one protocol (HTTP or HTTPS) must be allowed..
             *
             * @param isHttpAllowed Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At
             *     least one protocol (HTTP or HTTPS) must be allowed.
             * @return the next definition stage.
             */
            WithCreate withIsHttpAllowed(Boolean isHttpAllowed);
        }
        /** The stage of the Endpoint definition allowing to specify isHttpsAllowed. */
        interface WithIsHttpsAllowed {
            /**
             * Specifies the isHttpsAllowed property: Indicates whether HTTPS traffic is allowed on the endpoint.
             * Default value is true. At least one protocol (HTTP or HTTPS) must be allowed..
             *
             * @param isHttpsAllowed Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true.
             *     At least one protocol (HTTP or HTTPS) must be allowed.
             * @return the next definition stage.
             */
            WithCreate withIsHttpsAllowed(Boolean isHttpsAllowed);
        }
        /** The stage of the Endpoint definition allowing to specify queryStringCachingBehavior. */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies the queryStringCachingBehavior property: Defines how CDN caches requests that include query
             * strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain
             * query strings from being cached, or cache every request with a unique URL..
             *
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can
             *     ignore any query strings when caching, bypass caching to prevent requests that contain query strings
             *     from being cached, or cache every request with a unique URL.
             * @return the next definition stage.
             */
            WithCreate withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }
        /** The stage of the Endpoint definition allowing to specify optimizationType. */
        interface WithOptimizationType {
            /**
             * Specifies the optimizationType property: Specifies what scenario the customer wants this CDN endpoint to
             * optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven
             * optimization..
             *
             * @param optimizationType Specifies what scenario the customer wants this CDN endpoint to optimize for,
             *     e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
             * @return the next definition stage.
             */
            WithCreate withOptimizationType(OptimizationType optimizationType);
        }
        /** The stage of the Endpoint definition allowing to specify probePath. */
        interface WithProbePath {
            /**
             * Specifies the probePath property: Path to a file hosted on the origin which helps accelerate delivery of
             * the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin
             * path. This property is only relevant when using a single origin..
             *
             * @param probePath Path to a file hosted on the origin which helps accelerate delivery of the dynamic
             *     content and calculate the most optimal routes for the CDN. This is relative to the origin path. This
             *     property is only relevant when using a single origin.
             * @return the next definition stage.
             */
            WithCreate withProbePath(String probePath);
        }
        /** The stage of the Endpoint definition allowing to specify geoFilters. */
        interface WithGeoFilters {
            /**
             * Specifies the geoFilters property: List of rules defining the user's geo access within a CDN endpoint.
             * Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path
             * /pictures/.
             *
             * @param geoFilters List of rules defining the user's geo access within a CDN endpoint. Each geo filter
             *     defines an access rule to a specified path or content, e.g. block APAC for path /pictures/.
             * @return the next definition stage.
             */
            WithCreate withGeoFilters(List<GeoFilter> geoFilters);
        }
        /** The stage of the Endpoint definition allowing to specify defaultOriginGroup. */
        interface WithDefaultOriginGroup {
            /**
             * Specifies the defaultOriginGroup property: A reference to the origin group..
             *
             * @param defaultOriginGroup A reference to the origin group.
             * @return the next definition stage.
             */
            WithCreate withDefaultOriginGroup(ResourceReference defaultOriginGroup);
        }
        /** The stage of the Endpoint definition allowing to specify urlSigningKeys. */
        interface WithUrlSigningKeys {
            /**
             * Specifies the urlSigningKeys property: List of keys used to validate the signed URL hashes..
             *
             * @param urlSigningKeys List of keys used to validate the signed URL hashes.
             * @return the next definition stage.
             */
            WithCreate withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys);
        }
        /** The stage of the Endpoint definition allowing to specify deliveryPolicy. */
        interface WithDeliveryPolicy {
            /**
             * Specifies the deliveryPolicy property: A policy that specifies the delivery rules to be used for an
             * endpoint..
             *
             * @param deliveryPolicy A policy that specifies the delivery rules to be used for an endpoint.
             * @return the next definition stage.
             */
            WithCreate withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy);
        }
        /** The stage of the Endpoint definition allowing to specify webApplicationFirewallPolicyLink. */
        interface WithWebApplicationFirewallPolicyLink {
            /**
             * Specifies the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for
             * the endpoint (if applicable).
             *
             * @param webApplicationFirewallPolicyLink Defines the Web Application Firewall policy for the endpoint (if
             *     applicable).
             * @return the next definition stage.
             */
            WithCreate withWebApplicationFirewallPolicyLink(
                EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink);
        }
        /** The stage of the Endpoint definition allowing to specify origins. */
        interface WithOrigins {
            /**
             * Specifies the origins property: The source of the content being delivered via CDN..
             *
             * @param origins The source of the content being delivered via CDN.
             * @return the next definition stage.
             */
            WithCreate withOrigins(List<DeepCreatedOrigin> origins);
        }
        /** The stage of the Endpoint definition allowing to specify originGroups. */
        interface WithOriginGroups {
            /**
             * Specifies the originGroups property: The origin groups comprising of origins that are used for load
             * balancing the traffic based on availability..
             *
             * @param originGroups The origin groups comprising of origins that are used for load balancing the traffic
             *     based on availability.
             * @return the next definition stage.
             */
            WithCreate withOriginGroups(List<DeepCreatedOriginGroup> originGroups);
        }
    }
    /**
     * Begins update for the Endpoint resource.
     *
     * @return the stage of resource update.
     */
    Endpoint.Update update();

    /** The template for Endpoint update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithOriginPath,
            UpdateStages.WithContentTypesToCompress,
            UpdateStages.WithOriginHostHeader,
            UpdateStages.WithIsCompressionEnabled,
            UpdateStages.WithIsHttpAllowed,
            UpdateStages.WithIsHttpsAllowed,
            UpdateStages.WithQueryStringCachingBehavior,
            UpdateStages.WithOptimizationType,
            UpdateStages.WithProbePath,
            UpdateStages.WithGeoFilters,
            UpdateStages.WithDefaultOriginGroup,
            UpdateStages.WithUrlSigningKeys,
            UpdateStages.WithDeliveryPolicy,
            UpdateStages.WithWebApplicationFirewallPolicyLink {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Endpoint apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Endpoint apply(Context context);
    }
    /** The Endpoint update stages. */
    interface UpdateStages {
        /** The stage of the Endpoint update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Endpoint tags..
             *
             * @param tags Endpoint tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Endpoint update allowing to specify originPath. */
        interface WithOriginPath {
            /**
             * Specifies the originPath property: A directory path on the origin that CDN can use to retrieve content
             * from, e.g. contoso.cloudapp.net/originpath..
             *
             * @param originPath A directory path on the origin that CDN can use to retrieve content from, e.g.
             *     contoso.cloudapp.net/originpath.
             * @return the next definition stage.
             */
            Update withOriginPath(String originPath);
        }
        /** The stage of the Endpoint update allowing to specify contentTypesToCompress. */
        interface WithContentTypesToCompress {
            /**
             * Specifies the contentTypesToCompress property: List of content types on which compression applies. The
             * value should be a valid MIME type..
             *
             * @param contentTypesToCompress List of content types on which compression applies. The value should be a
             *     valid MIME type.
             * @return the next definition stage.
             */
            Update withContentTypesToCompress(List<String> contentTypesToCompress);
        }
        /** The stage of the Endpoint update allowing to specify originHostHeader. */
        interface WithOriginHostHeader {
            /**
             * Specifies the originHostHeader property: The host header value sent to the origin with each request. This
             * property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same
             * property specified at origin.If you leave this blank, the request hostname determines this value. Azure
             * CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match
             * the origin hostname by default..
             *
             * @param originHostHeader The host header value sent to the origin with each request. This property at
             *     Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property
             *     specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN
             *     origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match
             *     the origin hostname by default.
             * @return the next definition stage.
             */
            Update withOriginHostHeader(String originHostHeader);
        }
        /** The stage of the Endpoint update allowing to specify isCompressionEnabled. */
        interface WithIsCompressionEnabled {
            /**
             * Specifies the isCompressionEnabled property: Indicates whether content compression is enabled on CDN.
             * Default value is false. If compression is enabled, content will be served as compressed if user requests
             * for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1
             * byte or larger than 1 MB..
             *
             * @param isCompressionEnabled Indicates whether content compression is enabled on CDN. Default value is
             *     false. If compression is enabled, content will be served as compressed if user requests for a
             *     compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte
             *     or larger than 1 MB.
             * @return the next definition stage.
             */
            Update withIsCompressionEnabled(Boolean isCompressionEnabled);
        }
        /** The stage of the Endpoint update allowing to specify isHttpAllowed. */
        interface WithIsHttpAllowed {
            /**
             * Specifies the isHttpAllowed property: Indicates whether HTTP traffic is allowed on the endpoint. Default
             * value is true. At least one protocol (HTTP or HTTPS) must be allowed..
             *
             * @param isHttpAllowed Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At
             *     least one protocol (HTTP or HTTPS) must be allowed.
             * @return the next definition stage.
             */
            Update withIsHttpAllowed(Boolean isHttpAllowed);
        }
        /** The stage of the Endpoint update allowing to specify isHttpsAllowed. */
        interface WithIsHttpsAllowed {
            /**
             * Specifies the isHttpsAllowed property: Indicates whether HTTPS traffic is allowed on the endpoint.
             * Default value is true. At least one protocol (HTTP or HTTPS) must be allowed..
             *
             * @param isHttpsAllowed Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true.
             *     At least one protocol (HTTP or HTTPS) must be allowed.
             * @return the next definition stage.
             */
            Update withIsHttpsAllowed(Boolean isHttpsAllowed);
        }
        /** The stage of the Endpoint update allowing to specify queryStringCachingBehavior. */
        interface WithQueryStringCachingBehavior {
            /**
             * Specifies the queryStringCachingBehavior property: Defines how CDN caches requests that include query
             * strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain
             * query strings from being cached, or cache every request with a unique URL..
             *
             * @param queryStringCachingBehavior Defines how CDN caches requests that include query strings. You can
             *     ignore any query strings when caching, bypass caching to prevent requests that contain query strings
             *     from being cached, or cache every request with a unique URL.
             * @return the next definition stage.
             */
            Update withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior);
        }
        /** The stage of the Endpoint update allowing to specify optimizationType. */
        interface WithOptimizationType {
            /**
             * Specifies the optimizationType property: Specifies what scenario the customer wants this CDN endpoint to
             * optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven
             * optimization..
             *
             * @param optimizationType Specifies what scenario the customer wants this CDN endpoint to optimize for,
             *     e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
             * @return the next definition stage.
             */
            Update withOptimizationType(OptimizationType optimizationType);
        }
        /** The stage of the Endpoint update allowing to specify probePath. */
        interface WithProbePath {
            /**
             * Specifies the probePath property: Path to a file hosted on the origin which helps accelerate delivery of
             * the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin
             * path. This property is only relevant when using a single origin..
             *
             * @param probePath Path to a file hosted on the origin which helps accelerate delivery of the dynamic
             *     content and calculate the most optimal routes for the CDN. This is relative to the origin path. This
             *     property is only relevant when using a single origin.
             * @return the next definition stage.
             */
            Update withProbePath(String probePath);
        }
        /** The stage of the Endpoint update allowing to specify geoFilters. */
        interface WithGeoFilters {
            /**
             * Specifies the geoFilters property: List of rules defining the user's geo access within a CDN endpoint.
             * Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path
             * /pictures/.
             *
             * @param geoFilters List of rules defining the user's geo access within a CDN endpoint. Each geo filter
             *     defines an access rule to a specified path or content, e.g. block APAC for path /pictures/.
             * @return the next definition stage.
             */
            Update withGeoFilters(List<GeoFilter> geoFilters);
        }
        /** The stage of the Endpoint update allowing to specify defaultOriginGroup. */
        interface WithDefaultOriginGroup {
            /**
             * Specifies the defaultOriginGroup property: A reference to the origin group..
             *
             * @param defaultOriginGroup A reference to the origin group.
             * @return the next definition stage.
             */
            Update withDefaultOriginGroup(ResourceReference defaultOriginGroup);
        }
        /** The stage of the Endpoint update allowing to specify urlSigningKeys. */
        interface WithUrlSigningKeys {
            /**
             * Specifies the urlSigningKeys property: List of keys used to validate the signed URL hashes..
             *
             * @param urlSigningKeys List of keys used to validate the signed URL hashes.
             * @return the next definition stage.
             */
            Update withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys);
        }
        /** The stage of the Endpoint update allowing to specify deliveryPolicy. */
        interface WithDeliveryPolicy {
            /**
             * Specifies the deliveryPolicy property: A policy that specifies the delivery rules to be used for an
             * endpoint..
             *
             * @param deliveryPolicy A policy that specifies the delivery rules to be used for an endpoint.
             * @return the next definition stage.
             */
            Update withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy);
        }
        /** The stage of the Endpoint update allowing to specify webApplicationFirewallPolicyLink. */
        interface WithWebApplicationFirewallPolicyLink {
            /**
             * Specifies the webApplicationFirewallPolicyLink property: Defines the Web Application Firewall policy for
             * the endpoint (if applicable).
             *
             * @param webApplicationFirewallPolicyLink Defines the Web Application Firewall policy for the endpoint (if
             *     applicable).
             * @return the next definition stage.
             */
            Update withWebApplicationFirewallPolicyLink(
                EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Endpoint refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Endpoint refresh(Context context);
}
