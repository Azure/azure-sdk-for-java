// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.fluent.models.RuleInner;
import java.util.List;

/** An immutable client-side representation of Rule. */
public interface Rule {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the order property: The order in which the rules are applied for the endpoint. Possible values
     * {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0
     * is a special rule. It does not require any condition and actions listed in it will always be applied.
     *
     * @return the order value.
     */
    Integer order();

    /**
     * Gets the conditions property: A list of conditions that must be matched for the actions to be executed.
     *
     * @return the conditions value.
     */
    List<DeliveryRuleCondition> conditions();

    /**
     * Gets the actions property: A list of actions that are executed when all the conditions of a rule are satisfied.
     *
     * @return the actions value.
     */
    List<DeliveryRuleAction> actions();

    /**
     * Gets the matchProcessingBehavior property: If this rule is a match should the rules engine continue running the
     * remaining rules or stop. If not present, defaults to Continue.
     *
     * @return the matchProcessingBehavior value.
     */
    MatchProcessingBehavior matchProcessingBehavior();

    /**
     * Gets the provisioningState property: Provisioning status.
     *
     * @return the provisioningState value.
     */
    AfdProvisioningState provisioningState();

    /**
     * Gets the deploymentStatus property: The deploymentStatus property.
     *
     * @return the deploymentStatus value.
     */
    DeploymentStatus deploymentStatus();

    /**
     * Gets the systemData property: Read only system data.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the inner com.azure.resourcemanager.cdn.generated.fluent.models.RuleInner object.
     *
     * @return the inner object.
     */
    RuleInner innerModel();

    /** The entirety of the Rule definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The Rule definition stages. */
    interface DefinitionStages {
        /** The first stage of the Rule definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Rule definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, profileName, ruleSetName.
             *
             * @param resourceGroupName Name of the Resource group within the Azure subscription.
             * @param profileName Name of the CDN profile which is unique within the resource group.
             * @param ruleSetName Name of the rule set under the profile.
             * @return the next definition stage.
             */
            WithCreate withExistingRuleSet(String resourceGroupName, String profileName, String ruleSetName);
        }
        /**
         * The stage of the Rule definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithOrder,
                DefinitionStages.WithConditions,
                DefinitionStages.WithActions,
                DefinitionStages.WithMatchProcessingBehavior {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Rule create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Rule create(Context context);
        }
        /** The stage of the Rule definition allowing to specify order. */
        interface WithOrder {
            /**
             * Specifies the order property: The order in which the rules are applied for the endpoint. Possible values
             * {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with
             * order 0 is a special rule. It does not require any condition and actions listed in it will always be
             * applied..
             *
             * @param order The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A
             *     rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a
             *     special rule. It does not require any condition and actions listed in it will always be applied.
             * @return the next definition stage.
             */
            WithCreate withOrder(Integer order);
        }
        /** The stage of the Rule definition allowing to specify conditions. */
        interface WithConditions {
            /**
             * Specifies the conditions property: A list of conditions that must be matched for the actions to be
             * executed.
             *
             * @param conditions A list of conditions that must be matched for the actions to be executed.
             * @return the next definition stage.
             */
            WithCreate withConditions(List<DeliveryRuleCondition> conditions);
        }
        /** The stage of the Rule definition allowing to specify actions. */
        interface WithActions {
            /**
             * Specifies the actions property: A list of actions that are executed when all the conditions of a rule are
             * satisfied..
             *
             * @param actions A list of actions that are executed when all the conditions of a rule are satisfied.
             * @return the next definition stage.
             */
            WithCreate withActions(List<DeliveryRuleAction> actions);
        }
        /** The stage of the Rule definition allowing to specify matchProcessingBehavior. */
        interface WithMatchProcessingBehavior {
            /**
             * Specifies the matchProcessingBehavior property: If this rule is a match should the rules engine continue
             * running the remaining rules or stop. If not present, defaults to Continue..
             *
             * @param matchProcessingBehavior If this rule is a match should the rules engine continue running the
             *     remaining rules or stop. If not present, defaults to Continue.
             * @return the next definition stage.
             */
            WithCreate withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior);
        }
    }
    /**
     * Begins update for the Rule resource.
     *
     * @return the stage of resource update.
     */
    Rule.Update update();

    /** The template for Rule update. */
    interface Update
        extends UpdateStages.WithOrder,
            UpdateStages.WithConditions,
            UpdateStages.WithActions,
            UpdateStages.WithMatchProcessingBehavior {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Rule apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Rule apply(Context context);
    }
    /** The Rule update stages. */
    interface UpdateStages {
        /** The stage of the Rule update allowing to specify order. */
        interface WithOrder {
            /**
             * Specifies the order property: The order in which the rules are applied for the endpoint. Possible values
             * {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with
             * order 0 is a special rule. It does not require any condition and actions listed in it will always be
             * applied..
             *
             * @param order The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A
             *     rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a
             *     special rule. It does not require any condition and actions listed in it will always be applied.
             * @return the next definition stage.
             */
            Update withOrder(Integer order);
        }
        /** The stage of the Rule update allowing to specify conditions. */
        interface WithConditions {
            /**
             * Specifies the conditions property: A list of conditions that must be matched for the actions to be
             * executed.
             *
             * @param conditions A list of conditions that must be matched for the actions to be executed.
             * @return the next definition stage.
             */
            Update withConditions(List<DeliveryRuleCondition> conditions);
        }
        /** The stage of the Rule update allowing to specify actions. */
        interface WithActions {
            /**
             * Specifies the actions property: A list of actions that are executed when all the conditions of a rule are
             * satisfied..
             *
             * @param actions A list of actions that are executed when all the conditions of a rule are satisfied.
             * @return the next definition stage.
             */
            Update withActions(List<DeliveryRuleAction> actions);
        }
        /** The stage of the Rule update allowing to specify matchProcessingBehavior. */
        interface WithMatchProcessingBehavior {
            /**
             * Specifies the matchProcessingBehavior property: If this rule is a match should the rules engine continue
             * running the remaining rules or stop. If not present, defaults to Continue..
             *
             * @param matchProcessingBehavior If this rule is a match should the rules engine continue running the
             *     remaining rules or stop. If not present, defaults to Continue.
             * @return the next definition stage.
             */
            Update withMatchProcessingBehavior(MatchProcessingBehavior matchProcessingBehavior);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Rule refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Rule refresh(Context context);
}
