// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cdn.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.cdn.generated.CdnManager;
import com.azure.resourcemanager.cdn.generated.fluent.models.EndpointInner;
import com.azure.resourcemanager.cdn.generated.models.DeepCreatedOrigin;
import com.azure.resourcemanager.cdn.generated.models.DeepCreatedOriginGroup;
import com.azure.resourcemanager.cdn.generated.models.Endpoint;
import com.azure.resourcemanager.cdn.generated.models.EndpointPropertiesUpdateParametersDeliveryPolicy;
import com.azure.resourcemanager.cdn.generated.models.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink;
import com.azure.resourcemanager.cdn.generated.models.EndpointResourceState;
import com.azure.resourcemanager.cdn.generated.models.EndpointUpdateParameters;
import com.azure.resourcemanager.cdn.generated.models.GeoFilter;
import com.azure.resourcemanager.cdn.generated.models.OptimizationType;
import com.azure.resourcemanager.cdn.generated.models.QueryStringCachingBehavior;
import com.azure.resourcemanager.cdn.generated.models.ResourceReference;
import com.azure.resourcemanager.cdn.generated.models.SystemData;
import com.azure.resourcemanager.cdn.generated.models.UrlSigningKey;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class EndpointImpl implements Endpoint, Endpoint.Definition, Endpoint.Update {
    private EndpointInner innerObject;

    private final CdnManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String originPath() {
        return this.innerModel().originPath();
    }

    public List<String> contentTypesToCompress() {
        List<String> inner = this.innerModel().contentTypesToCompress();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String originHostHeader() {
        return this.innerModel().originHostHeader();
    }

    public Boolean isCompressionEnabled() {
        return this.innerModel().isCompressionEnabled();
    }

    public Boolean isHttpAllowed() {
        return this.innerModel().isHttpAllowed();
    }

    public Boolean isHttpsAllowed() {
        return this.innerModel().isHttpsAllowed();
    }

    public QueryStringCachingBehavior queryStringCachingBehavior() {
        return this.innerModel().queryStringCachingBehavior();
    }

    public OptimizationType optimizationType() {
        return this.innerModel().optimizationType();
    }

    public String probePath() {
        return this.innerModel().probePath();
    }

    public List<GeoFilter> geoFilters() {
        List<GeoFilter> inner = this.innerModel().geoFilters();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ResourceReference defaultOriginGroup() {
        return this.innerModel().defaultOriginGroup();
    }

    public List<UrlSigningKey> urlSigningKeys() {
        List<UrlSigningKey> inner = this.innerModel().urlSigningKeys();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy() {
        return this.innerModel().deliveryPolicy();
    }

    public EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink() {
        return this.innerModel().webApplicationFirewallPolicyLink();
    }

    public String hostname() {
        return this.innerModel().hostname();
    }

    public List<DeepCreatedOrigin> origins() {
        List<DeepCreatedOrigin> inner = this.innerModel().origins();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<DeepCreatedOriginGroup> originGroups() {
        List<DeepCreatedOriginGroup> inner = this.innerModel().originGroups();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public EndpointResourceState resourceState() {
        return this.innerModel().resourceState();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public EndpointInner innerModel() {
        return this.innerObject;
    }

    private CdnManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String profileName;

    private String endpointName;

    private EndpointUpdateParameters updateEndpointUpdateProperties;

    public EndpointImpl withExistingProfile(String resourceGroupName, String profileName) {
        this.resourceGroupName = resourceGroupName;
        this.profileName = profileName;
        return this;
    }

    public Endpoint create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .create(resourceGroupName, profileName, endpointName, this.innerModel(), Context.NONE);
        return this;
    }

    public Endpoint create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .create(resourceGroupName, profileName, endpointName, this.innerModel(), context);
        return this;
    }

    public EndpointImpl(String name, CdnManager serviceManager) {
        this.innerObject = new EndpointInner();
        this.serviceManager = serviceManager;
        this.endpointName = name;
    }

    public EndpointImpl update() {
        this.updateEndpointUpdateProperties = new EndpointUpdateParameters();
        return this;
    }

    public Endpoint apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .update(resourceGroupName, profileName, endpointName, updateEndpointUpdateProperties, Context.NONE);
        return this;
    }

    public Endpoint apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .update(resourceGroupName, profileName, endpointName, updateEndpointUpdateProperties, context);
        return this;
    }

    public EndpointImpl(EndpointInner innerObject, CdnManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.profileName = Utils.getValueFromIdByName(innerObject.id(), "profiles");
        this.endpointName = Utils.getValueFromIdByName(innerObject.id(), "endpoints");
    }

    public Endpoint refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .getWithResponse(resourceGroupName, profileName, endpointName, Context.NONE)
                .getValue();
        return this;
    }

    public Endpoint refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEndpoints()
                .getWithResponse(resourceGroupName, profileName, endpointName, context)
                .getValue();
        return this;
    }

    public EndpointImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EndpointImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EndpointImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withTags(tags);
            return this;
        }
    }

    public EndpointImpl withOriginPath(String originPath) {
        if (isInCreateMode()) {
            this.innerModel().withOriginPath(originPath);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withOriginPath(originPath);
            return this;
        }
    }

    public EndpointImpl withContentTypesToCompress(List<String> contentTypesToCompress) {
        if (isInCreateMode()) {
            this.innerModel().withContentTypesToCompress(contentTypesToCompress);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withContentTypesToCompress(contentTypesToCompress);
            return this;
        }
    }

    public EndpointImpl withOriginHostHeader(String originHostHeader) {
        if (isInCreateMode()) {
            this.innerModel().withOriginHostHeader(originHostHeader);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withOriginHostHeader(originHostHeader);
            return this;
        }
    }

    public EndpointImpl withIsCompressionEnabled(Boolean isCompressionEnabled) {
        if (isInCreateMode()) {
            this.innerModel().withIsCompressionEnabled(isCompressionEnabled);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withIsCompressionEnabled(isCompressionEnabled);
            return this;
        }
    }

    public EndpointImpl withIsHttpAllowed(Boolean isHttpAllowed) {
        if (isInCreateMode()) {
            this.innerModel().withIsHttpAllowed(isHttpAllowed);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withIsHttpAllowed(isHttpAllowed);
            return this;
        }
    }

    public EndpointImpl withIsHttpsAllowed(Boolean isHttpsAllowed) {
        if (isInCreateMode()) {
            this.innerModel().withIsHttpsAllowed(isHttpsAllowed);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withIsHttpsAllowed(isHttpsAllowed);
            return this;
        }
    }

    public EndpointImpl withQueryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
        if (isInCreateMode()) {
            this.innerModel().withQueryStringCachingBehavior(queryStringCachingBehavior);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withQueryStringCachingBehavior(queryStringCachingBehavior);
            return this;
        }
    }

    public EndpointImpl withOptimizationType(OptimizationType optimizationType) {
        if (isInCreateMode()) {
            this.innerModel().withOptimizationType(optimizationType);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withOptimizationType(optimizationType);
            return this;
        }
    }

    public EndpointImpl withProbePath(String probePath) {
        if (isInCreateMode()) {
            this.innerModel().withProbePath(probePath);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withProbePath(probePath);
            return this;
        }
    }

    public EndpointImpl withGeoFilters(List<GeoFilter> geoFilters) {
        if (isInCreateMode()) {
            this.innerModel().withGeoFilters(geoFilters);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withGeoFilters(geoFilters);
            return this;
        }
    }

    public EndpointImpl withDefaultOriginGroup(ResourceReference defaultOriginGroup) {
        if (isInCreateMode()) {
            this.innerModel().withDefaultOriginGroup(defaultOriginGroup);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withDefaultOriginGroup(defaultOriginGroup);
            return this;
        }
    }

    public EndpointImpl withUrlSigningKeys(List<UrlSigningKey> urlSigningKeys) {
        if (isInCreateMode()) {
            this.innerModel().withUrlSigningKeys(urlSigningKeys);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withUrlSigningKeys(urlSigningKeys);
            return this;
        }
    }

    public EndpointImpl withDeliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicy deliveryPolicy) {
        if (isInCreateMode()) {
            this.innerModel().withDeliveryPolicy(deliveryPolicy);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withDeliveryPolicy(deliveryPolicy);
            return this;
        }
    }

    public EndpointImpl withWebApplicationFirewallPolicyLink(
        EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
        if (isInCreateMode()) {
            this.innerModel().withWebApplicationFirewallPolicyLink(webApplicationFirewallPolicyLink);
            return this;
        } else {
            this.updateEndpointUpdateProperties.withWebApplicationFirewallPolicyLink(webApplicationFirewallPolicyLink);
            return this;
        }
    }

    public EndpointImpl withOrigins(List<DeepCreatedOrigin> origins) {
        this.innerModel().withOrigins(origins);
        return this;
    }

    public EndpointImpl withOriginGroups(List<DeepCreatedOriginGroup> originGroups) {
        this.innerModel().withOriginGroups(originGroups);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
