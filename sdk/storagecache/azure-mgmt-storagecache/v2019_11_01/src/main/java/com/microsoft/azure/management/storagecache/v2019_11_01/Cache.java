/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2019_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.storagecache.v2019_11_01.implementation.StorageCacheManager;
import java.util.List;
import com.microsoft.azure.management.storagecache.v2019_11_01.implementation.CacheInner;

/**
 * Type representing Cache.
 */
public interface Cache extends HasInner<CacheInner>, Resource, GroupableResourceCore<StorageCacheManager, CacheInner>, HasResourceGroup, Refreshable<Cache>, Updatable<Cache.Update>, HasManager<StorageCacheManager> {
    /**
     * @return the cacheSizeGB value.
     */
    Integer cacheSizeGB();

    /**
     * @return the health value.
     */
    CacheHealth health();

    /**
     * @return the mountAddresses value.
     */
    List<String> mountAddresses();

    /**
     * @return the provisioningState value.
     */
    ProvisioningStateType provisioningState();

    /**
     * @return the sku value.
     */
    CacheSku sku();

    /**
     * @return the subnet value.
     */
    String subnet();

    /**
     * @return the upgradeStatus value.
     */
    CacheUpgradeStatus upgradeStatus();

    /**
     * The entirety of the Cache definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Cache definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Cache definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Cache definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the cache definition allowing to specify CacheSizeGB.
         */
        interface WithCacheSizeGB {
            /**
             * Specifies cacheSizeGB.
             * @param cacheSizeGB The size of this Cache, in GB
             * @return the next definition stage
             */
            WithCreate withCacheSizeGB(Integer cacheSizeGB);
        }

        /**
         * The stage of the cache definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating'
             * @return the next definition stage
             */
            WithCreate withProvisioningState(ProvisioningStateType provisioningState);
        }

        /**
         * The stage of the cache definition allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku SKU for the Cache
             * @return the next definition stage
             */
            WithCreate withSku(CacheSku sku);
        }

        /**
         * The stage of the cache definition allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             * @param subnet Subnet used for the Cache
             * @return the next definition stage
             */
            WithCreate withSubnet(String subnet);
        }

        /**
         * The stage of the cache definition allowing to specify UpgradeStatus.
         */
        interface WithUpgradeStatus {
            /**
             * Specifies upgradeStatus.
             * @param upgradeStatus Upgrade status of the Cache
             * @return the next definition stage
             */
            WithCreate withUpgradeStatus(CacheUpgradeStatus upgradeStatus);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Cache>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithCacheSizeGB, DefinitionStages.WithProvisioningState, DefinitionStages.WithSku, DefinitionStages.WithSubnet, DefinitionStages.WithUpgradeStatus {
        }
    }
    /**
     * The template for a Cache update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Cache>, Resource.UpdateWithTags<Update>, UpdateStages.WithCacheSizeGB, UpdateStages.WithProvisioningState, UpdateStages.WithSku, UpdateStages.WithSubnet, UpdateStages.WithUpgradeStatus {
    }

    /**
     * Grouping of Cache update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the cache update allowing to specify CacheSizeGB.
         */
        interface WithCacheSizeGB {
            /**
             * Specifies cacheSizeGB.
             * @param cacheSizeGB The size of this Cache, in GB
             * @return the next update stage
             */
            Update withCacheSizeGB(Integer cacheSizeGB);
        }

        /**
         * The stage of the cache update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating'
             * @return the next update stage
             */
            Update withProvisioningState(ProvisioningStateType provisioningState);
        }

        /**
         * The stage of the cache update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku SKU for the Cache
             * @return the next update stage
             */
            Update withSku(CacheSku sku);
        }

        /**
         * The stage of the cache update allowing to specify Subnet.
         */
        interface WithSubnet {
            /**
             * Specifies subnet.
             * @param subnet Subnet used for the Cache
             * @return the next update stage
             */
            Update withSubnet(String subnet);
        }

        /**
         * The stage of the cache update allowing to specify UpgradeStatus.
         */
        interface WithUpgradeStatus {
            /**
             * Specifies upgradeStatus.
             * @param upgradeStatus Upgrade status of the Cache
             * @return the next update stage
             */
            Update withUpgradeStatus(CacheUpgradeStatus upgradeStatus);
        }

    }
}
