// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTarget;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StorageTargetsListByCacheMockTests {
    @Test
    public void testListByCache() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"junctions\":[],\"targetType\":\"clfs\",\"provisioningState\":\"Failed\",\"state\":\"Flushing\",\"nfs3\":{\"target\":\"wiipfpub\",\"usageModel\":\"bwwift\",\"verificationTimer\":1744501450,\"writeBackTimer\":1368625669},\"clfs\":{\"target\":\"vksgplsaknynfsy\"},\"unknown\":{\"attributes\":{}},\"blobNfs\":{\"target\":\"uopxodlqiyntor\",\"usageModel\":\"hleosjsw\",\"verificationTimer\":1899163147,\"writeBackTimer\":2109654936},\"allocationPercentage\":1326847440},\"location\":\"pzbchck\",\"id\":\"zqioxiysuii\",\"name\":\"ynkedyatrwyhqmib\",\"type\":\"yhwitsmypyynpcdp\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StorageCacheManager manager =
            StorageCacheManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StorageTarget> response =
            manager.storageTargets().listByCache("syrsndsytgadgvra", "aeneqnzarrwl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(StorageTargetType.CLFS, response.iterator().next().targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, response.iterator().next().state());
        Assertions.assertEquals("wiipfpub", response.iterator().next().nfs3().target());
        Assertions.assertEquals("bwwift", response.iterator().next().nfs3().usageModel());
        Assertions.assertEquals(1744501450, response.iterator().next().nfs3().verificationTimer());
        Assertions.assertEquals(1368625669, response.iterator().next().nfs3().writeBackTimer());
        Assertions.assertEquals("vksgplsaknynfsy", response.iterator().next().clfs().target());
        Assertions.assertEquals("uopxodlqiyntor", response.iterator().next().blobNfs().target());
        Assertions.assertEquals("hleosjsw", response.iterator().next().blobNfs().usageModel());
        Assertions.assertEquals(1899163147, response.iterator().next().blobNfs().verificationTimer());
        Assertions.assertEquals(2109654936, response.iterator().next().blobNfs().writeBackTimer());
    }
}
