// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import com.azure.resourcemanager.storagecache.models.ImportJob;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ImportJobsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"importPrefixes\":[\"uiqtqzfavy\",\"nqqyba\",\"yeua\",\"jkqa\"],\"conflictResolutionMode\":\"OverwriteAlways\",\"maximumErrors\":1085196762,\"status\":{\"state\":\"Canceled\",\"statusMessage\":\"cbhernntiewdj\",\"totalBlobsWalked\":994473261476719427,\"blobsWalkedPerSecond\":1890578534801366213,\"totalBlobsImported\":7210776053915624844,\"blobsImportedPerSecond\":8622823251017389633,\"lastCompletionTime\":\"2021-09-18T09:21:14Z\",\"lastStartedTime\":\"2021-09-08T01:13:47Z\",\"totalErrors\":961183610,\"totalConflicts\":519813577}},\"location\":\"qem\",\"tags\":{\"jfutacoebj\":\"mxtd\",\"guaadraufactkahz\":\"ewzcjznmwcp\"},\"id\":\"v\",\"name\":\"jjziuxxpsh\",\"type\":\"eekulfgslqubkwd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StorageCacheManager manager = StorageCacheManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ImportJob response = manager.importJobs()
            .define("kpyklyhp")
            .withRegion("odqkdlwwqfb")
            .withExistingAmlFilesystem("uripltfnhtba", "kgxywr")
            .withTags(mapOf("fsmlmbtxhwgfw", "kxtrq"))
            .withImportPrefixes(Arrays.asList("ruud"))
            .withConflictResolutionMode(ConflictResolutionMode.FAIL)
            .withMaximumErrors(766813389)
            .create();

        Assertions.assertEquals("qem", response.location());
        Assertions.assertEquals("mxtd", response.tags().get("jfutacoebj"));
        Assertions.assertEquals("uiqtqzfavy", response.importPrefixes().get(0));
        Assertions.assertEquals(ConflictResolutionMode.OVERWRITE_ALWAYS, response.conflictResolutionMode());
        Assertions.assertEquals(1085196762, response.maximumErrors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
