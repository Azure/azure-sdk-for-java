// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.models.NfsAccessPolicy;
import com.azure.resourcemanager.storagecache.models.NfsAccessRule;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NfsAccessPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NfsAccessPolicy model = BinaryData.fromString(
            "{\"name\":\"wi\",\"accessRules\":[{\"scope\":\"default\",\"filter\":\"hfjx\",\"access\":\"rw\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":true,\"anonymousUID\":\"rey\",\"anonymousGID\":\"zi\"},{\"scope\":\"network\",\"filter\":\"aw\",\"access\":\"ro\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":true,\"anonymousUID\":\"elpcirelsfeaenwa\",\"anonymousGID\":\"atklddxbjhwuaa\"},{\"scope\":\"host\",\"filter\":\"jos\",\"access\":\"rw\",\"suid\":false,\"submountAccess\":false,\"rootSquash\":true,\"anonymousUID\":\"v\",\"anonymousGID\":\"glrvimjwosytxi\"},{\"scope\":\"default\",\"filter\":\"kfcktqum\",\"access\":\"ro\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":false,\"anonymousUID\":\"hlyfjhdgqgg\",\"anonymousGID\":\"dunyg\"}]}")
            .toObject(NfsAccessPolicy.class);
        Assertions.assertEquals("wi", model.name());
        Assertions.assertEquals(NfsAccessRuleScope.DEFAULT, model.accessRules().get(0).scope());
        Assertions.assertEquals("hfjx", model.accessRules().get(0).filter());
        Assertions.assertEquals(NfsAccessRuleAccess.RW, model.accessRules().get(0).access());
        Assertions.assertFalse(model.accessRules().get(0).suid());
        Assertions.assertTrue(model.accessRules().get(0).submountAccess());
        Assertions.assertTrue(model.accessRules().get(0).rootSquash());
        Assertions.assertEquals("rey", model.accessRules().get(0).anonymousUid());
        Assertions.assertEquals("zi", model.accessRules().get(0).anonymousGid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NfsAccessPolicy model = new NfsAccessPolicy().withName("wi")
            .withAccessRules(Arrays.asList(
                new NfsAccessRule().withScope(NfsAccessRuleScope.DEFAULT)
                    .withFilter("hfjx")
                    .withAccess(NfsAccessRuleAccess.RW)
                    .withSuid(false)
                    .withSubmountAccess(true)
                    .withRootSquash(true)
                    .withAnonymousUid("rey")
                    .withAnonymousGid("zi"),
                new NfsAccessRule().withScope(NfsAccessRuleScope.NETWORK)
                    .withFilter("aw")
                    .withAccess(NfsAccessRuleAccess.RO)
                    .withSuid(false)
                    .withSubmountAccess(true)
                    .withRootSquash(true)
                    .withAnonymousUid("elpcirelsfeaenwa")
                    .withAnonymousGid("atklddxbjhwuaa"),
                new NfsAccessRule().withScope(NfsAccessRuleScope.HOST)
                    .withFilter("jos")
                    .withAccess(NfsAccessRuleAccess.RW)
                    .withSuid(false)
                    .withSubmountAccess(false)
                    .withRootSquash(true)
                    .withAnonymousUid("v")
                    .withAnonymousGid("glrvimjwosytxi"),
                new NfsAccessRule().withScope(NfsAccessRuleScope.DEFAULT)
                    .withFilter("kfcktqum")
                    .withAccess(NfsAccessRuleAccess.RO)
                    .withSuid(false)
                    .withSubmountAccess(true)
                    .withRootSquash(false)
                    .withAnonymousUid("hlyfjhdgqgg")
                    .withAnonymousGid("dunyg")));
        model = BinaryData.fromObject(model).toObject(NfsAccessPolicy.class);
        Assertions.assertEquals("wi", model.name());
        Assertions.assertEquals(NfsAccessRuleScope.DEFAULT, model.accessRules().get(0).scope());
        Assertions.assertEquals("hfjx", model.accessRules().get(0).filter());
        Assertions.assertEquals(NfsAccessRuleAccess.RW, model.accessRules().get(0).access());
        Assertions.assertFalse(model.accessRules().get(0).suid());
        Assertions.assertTrue(model.accessRules().get(0).submountAccess());
        Assertions.assertTrue(model.accessRules().get(0).rootSquash());
        Assertions.assertEquals("rey", model.accessRules().get(0).anonymousUid());
        Assertions.assertEquals("zi", model.accessRules().get(0).anonymousGid());
    }
}
