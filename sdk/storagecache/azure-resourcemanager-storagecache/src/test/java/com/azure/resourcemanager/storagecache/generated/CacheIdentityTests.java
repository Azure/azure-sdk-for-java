// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.models.CacheIdentity;
import com.azure.resourcemanager.storagecache.models.CacheIdentityType;
import com.azure.resourcemanager.storagecache.models.UserAssignedIdentitiesValueAutoGenerated;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CacheIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CacheIdentity model = BinaryData.fromString(
            "{\"principalId\":\"rdvstkwqqtch\",\"tenantId\":\"lmfmtdaay\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"mnpkukghimdblxg\":{\"principalId\":\"piohgwxrtfu\",\"clientId\":\"epxgyqagvr\"},\"szkkfoqre\":{\"principalId\":\"mfnjh\",\"clientId\":\"xw\"},\"aenwabf\":{\"principalId\":\"kzikfjawneaivxwc\",\"clientId\":\"lpcirelsf\"}}}")
            .toObject(CacheIdentity.class);
        Assertions.assertEquals(CacheIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CacheIdentity model = new CacheIdentity().withType(CacheIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(mapOf("mnpkukghimdblxg", new UserAssignedIdentitiesValueAutoGenerated(),
                "szkkfoqre", new UserAssignedIdentitiesValueAutoGenerated(), "aenwabf",
                new UserAssignedIdentitiesValueAutoGenerated()));
        model = BinaryData.fromObject(model).toObject(CacheIdentity.class);
        Assertions.assertEquals(CacheIdentityType.SYSTEM_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
