// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.models.CacheSecuritySettings;
import com.azure.resourcemanager.storagecache.models.NfsAccessPolicy;
import com.azure.resourcemanager.storagecache.models.NfsAccessRule;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CacheSecuritySettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CacheSecuritySettings model = BinaryData.fromString(
            "{\"accessPolicies\":[{\"name\":\"ozuhkfp\",\"accessRules\":[{\"scope\":\"network\",\"filter\":\"ofd\",\"access\":\"no\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":true,\"anonymousUID\":\"uwaboekqvke\",\"anonymousGID\":\"smv\"},{\"scope\":\"default\",\"filter\":\"yjsflhhcaalnji\",\"access\":\"no\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":false,\"anonymousUID\":\"yaqcslyjpkiidz\",\"anonymousGID\":\"xznelixhnrztf\"}]},{\"name\":\"lhbnxkna\",\"accessRules\":[{\"scope\":\"default\",\"filter\":\"ppg\",\"access\":\"no\",\"suid\":true,\"submountAccess\":true,\"rootSquash\":true,\"anonymousUID\":\"iropuhpigvpgylg\",\"anonymousGID\":\"itxmedjvcslynqww\"},{\"scope\":\"host\",\"filter\":\"zzhxgktrm\",\"access\":\"ro\",\"suid\":true,\"submountAccess\":false,\"rootSquash\":false,\"anonymousUID\":\"oellwp\",\"anonymousGID\":\"d\"}]}]}")
            .toObject(CacheSecuritySettings.class);
        Assertions.assertEquals("ozuhkfp", model.accessPolicies().get(0).name());
        Assertions.assertEquals(NfsAccessRuleScope.NETWORK, model.accessPolicies().get(0).accessRules().get(0).scope());
        Assertions.assertEquals("ofd", model.accessPolicies().get(0).accessRules().get(0).filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.accessPolicies().get(0).accessRules().get(0).access());
        Assertions.assertEquals(false, model.accessPolicies().get(0).accessRules().get(0).suid());
        Assertions.assertEquals(true, model.accessPolicies().get(0).accessRules().get(0).submountAccess());
        Assertions.assertEquals(true, model.accessPolicies().get(0).accessRules().get(0).rootSquash());
        Assertions.assertEquals("uwaboekqvke", model.accessPolicies().get(0).accessRules().get(0).anonymousUid());
        Assertions.assertEquals("smv", model.accessPolicies().get(0).accessRules().get(0).anonymousGid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CacheSecuritySettings model
            = new CacheSecuritySettings()
                .withAccessPolicies(
                    Arrays
                        .asList(
                            new NfsAccessPolicy()
                                .withName(
                                    "ozuhkfp")
                                .withAccessRules(
                                    Arrays
                                        .asList(
                                            new NfsAccessRule().withScope(NfsAccessRuleScope.NETWORK).withFilter("ofd")
                                                .withAccess(NfsAccessRuleAccess.NO).withSuid(false)
                                                .withSubmountAccess(true).withRootSquash(true).withAnonymousUid(
                                                    "uwaboekqvke")
                                                .withAnonymousGid("smv"),
                                            new NfsAccessRule().withScope(NfsAccessRuleScope.DEFAULT)
                                                .withFilter("yjsflhhcaalnji").withAccess(NfsAccessRuleAccess.NO)
                                                .withSuid(false).withSubmountAccess(true).withRootSquash(
                                                    false)
                                                .withAnonymousUid("yaqcslyjpkiidz").withAnonymousGid("xznelixhnrztf"))),
                            new NfsAccessPolicy().withName("lhbnxkna")
                                .withAccessRules(Arrays.asList(
                                    new NfsAccessRule().withScope(NfsAccessRuleScope.DEFAULT).withFilter("ppg")
                                        .withAccess(NfsAccessRuleAccess.NO).withSuid(true).withSubmountAccess(true)
                                        .withRootSquash(true).withAnonymousUid("iropuhpigvpgylg")
                                        .withAnonymousGid("itxmedjvcslynqww"),
                                    new NfsAccessRule().withScope(NfsAccessRuleScope.HOST).withFilter("zzhxgktrm")
                                        .withAccess(NfsAccessRuleAccess.RO).withSuid(true).withSubmountAccess(false)
                                        .withRootSquash(false).withAnonymousUid("oellwp").withAnonymousGid("d")))));
        model = BinaryData.fromObject(model).toObject(CacheSecuritySettings.class);
        Assertions.assertEquals("ozuhkfp", model.accessPolicies().get(0).name());
        Assertions.assertEquals(NfsAccessRuleScope.NETWORK, model.accessPolicies().get(0).accessRules().get(0).scope());
        Assertions.assertEquals("ofd", model.accessPolicies().get(0).accessRules().get(0).filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.accessPolicies().get(0).accessRules().get(0).access());
        Assertions.assertEquals(false, model.accessPolicies().get(0).accessRules().get(0).suid());
        Assertions.assertEquals(true, model.accessPolicies().get(0).accessRules().get(0).submountAccess());
        Assertions.assertEquals(true, model.accessPolicies().get(0).accessRules().get(0).rootSquash());
        Assertions.assertEquals("uwaboekqvke", model.accessPolicies().get(0).accessRules().get(0).anonymousUid());
        Assertions.assertEquals("smv", model.accessPolicies().get(0).accessRules().get(0).anonymousGid());
    }
}
