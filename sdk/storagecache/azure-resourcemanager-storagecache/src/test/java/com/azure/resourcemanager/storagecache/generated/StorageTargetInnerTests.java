// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetInner;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"junctions\":[{\"namespacePath\":\"kyv\",\"targetPath\":\"ca\",\"nfsExport\":\"z\",\"nfsAccessPolicy\":\"zka\"},{\"namespacePath\":\"uwbc\",\"targetPath\":\"wbme\",\"nfsExport\":\"seyvj\",\"nfsAccessPolicy\":\"rts\"},{\"namespacePath\":\"spkdee\",\"targetPath\":\"ofmxagkvtmelmqkr\",\"nfsExport\":\"hvljuahaquh\",\"nfsAccessPolicy\":\"hmdua\"},{\"namespacePath\":\"exq\",\"targetPath\":\"fadmws\",\"nfsExport\":\"r\",\"nfsAccessPolicy\":\"xpvgo\"}],\"targetType\":\"blobNfs\",\"provisioningState\":\"Creating\",\"state\":\"Flushing\",\"nfs3\":{\"target\":\"wbnb\",\"usageModel\":\"ldawkzbaliourqha\",\"verificationTimer\":30531984,\"writeBackTimer\":33232567},\"clfs\":{\"target\":\"sfwxosowzxc\"},\"unknown\":{\"attributes\":{\"ucww\":\"jooxdjebw\",\"bvmeuecivy\":\"vo\",\"ueiotwmcdyt\":\"zceuojgjrw\",\"it\":\"x\"}},\"blobNfs\":{\"target\":\"jawgqwg\",\"usageModel\":\"ni\",\"verificationTimer\":236193588,\"writeBackTimer\":1319341047},\"allocationPercentage\":494916053},\"location\":\"cg\",\"id\":\"wndnhj\",\"name\":\"auwhvylwzbtdhx\",\"type\":\"jznb\"}")
                .toObject(StorageTargetInner.class);
        Assertions.assertEquals("kyv", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("ca", model.junctions().get(0).targetPath());
        Assertions.assertEquals("z", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("zka", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.BLOB_NFS, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("wbnb", model.nfs3().target());
        Assertions.assertEquals("ldawkzbaliourqha", model.nfs3().usageModel());
        Assertions.assertEquals(30531984, model.nfs3().verificationTimer());
        Assertions.assertEquals(33232567, model.nfs3().writeBackTimer());
        Assertions.assertEquals("sfwxosowzxc", model.clfs().target());
        Assertions.assertEquals("jooxdjebw", model.unknown().attributes().get("ucww"));
        Assertions.assertEquals("jawgqwg", model.blobNfs().target());
        Assertions.assertEquals("ni", model.blobNfs().usageModel());
        Assertions.assertEquals(236193588, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1319341047, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetInner model =
            new StorageTargetInner()
                .withJunctions(
                    Arrays
                        .asList(
                            new NamespaceJunction()
                                .withNamespacePath("kyv")
                                .withTargetPath("ca")
                                .withNfsExport("z")
                                .withNfsAccessPolicy("zka"),
                            new NamespaceJunction()
                                .withNamespacePath("uwbc")
                                .withTargetPath("wbme")
                                .withNfsExport("seyvj")
                                .withNfsAccessPolicy("rts"),
                            new NamespaceJunction()
                                .withNamespacePath("spkdee")
                                .withTargetPath("ofmxagkvtmelmqkr")
                                .withNfsExport("hvljuahaquh")
                                .withNfsAccessPolicy("hmdua"),
                            new NamespaceJunction()
                                .withNamespacePath("exq")
                                .withTargetPath("fadmws")
                                .withNfsExport("r")
                                .withNfsAccessPolicy("xpvgo")))
                .withTargetType(StorageTargetType.BLOB_NFS)
                .withState(OperationalStateType.FLUSHING)
                .withNfs3(
                    new Nfs3Target()
                        .withTarget("wbnb")
                        .withUsageModel("ldawkzbaliourqha")
                        .withVerificationTimer(30531984)
                        .withWriteBackTimer(33232567))
                .withClfs(new ClfsTarget().withTarget("sfwxosowzxc"))
                .withUnknown(
                    new UnknownTarget()
                        .withAttributes(
                            mapOf("ucww", "jooxdjebw", "bvmeuecivy", "vo", "ueiotwmcdyt", "zceuojgjrw", "it", "x")))
                .withBlobNfs(
                    new BlobNfsTarget()
                        .withTarget("jawgqwg")
                        .withUsageModel("ni")
                        .withVerificationTimer(236193588)
                        .withWriteBackTimer(1319341047));
        model = BinaryData.fromObject(model).toObject(StorageTargetInner.class);
        Assertions.assertEquals("kyv", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("ca", model.junctions().get(0).targetPath());
        Assertions.assertEquals("z", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("zka", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.BLOB_NFS, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("wbnb", model.nfs3().target());
        Assertions.assertEquals("ldawkzbaliourqha", model.nfs3().usageModel());
        Assertions.assertEquals(30531984, model.nfs3().verificationTimer());
        Assertions.assertEquals(33232567, model.nfs3().writeBackTimer());
        Assertions.assertEquals("sfwxosowzxc", model.clfs().target());
        Assertions.assertEquals("jooxdjebw", model.unknown().attributes().get("ucww"));
        Assertions.assertEquals("jawgqwg", model.blobNfs().target());
        Assertions.assertEquals("ni", model.blobNfs().usageModel());
        Assertions.assertEquals(236193588, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1319341047, model.blobNfs().writeBackTimer());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
