// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetInner;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"junctions\":[{\"namespacePath\":\"urqhaka\",\"targetPath\":\"ashsfwxos\",\"nfsExport\":\"z\",\"nfsAccessPolicy\":\"ugicjooxdjebw\"}],\"targetType\":\"nfs3\",\"provisioningState\":\"Succeeded\",\"state\":\"Flushing\",\"nfs3\":{\"target\":\"vbvmeu\",\"usageModel\":\"ivyhzceuojgjrwju\",\"verificationTimer\":1907813820,\"writeBackTimer\":398532590},\"clfs\":{\"target\":\"dytdxwitx\"},\"unknown\":{\"attributes\":{\"skxfbk\":\"wgqwgxhn\",\"gklwn\":\"y\",\"vylwzbtdhxuj\":\"nhjdauw\"}},\"blobNfs\":{\"target\":\"mpowuwpr\",\"usageModel\":\"lve\",\"verificationTimer\":990417532,\"writeBackTimer\":683546621},\"allocationPercentage\":803457218},\"location\":\"hfxobbcswsrtj\",\"id\":\"plrbpbewtghf\",\"name\":\"blcg\",\"type\":\"xzvlvqhjkbegib\"}")
                .toObject(StorageTargetInner.class);
        Assertions.assertEquals("urqhaka", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("ashsfwxos", model.junctions().get(0).targetPath());
        Assertions.assertEquals("z", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ugicjooxdjebw", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("vbvmeu", model.nfs3().target());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.nfs3().usageModel());
        Assertions.assertEquals(1907813820, model.nfs3().verificationTimer());
        Assertions.assertEquals(398532590, model.nfs3().writeBackTimer());
        Assertions.assertEquals("dytdxwitx", model.clfs().target());
        Assertions.assertEquals("wgqwgxhn", model.unknown().attributes().get("skxfbk"));
        Assertions.assertEquals("mpowuwpr", model.blobNfs().target());
        Assertions.assertEquals("lve", model.blobNfs().usageModel());
        Assertions.assertEquals(990417532, model.blobNfs().verificationTimer());
        Assertions.assertEquals(683546621, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetInner model =
            new StorageTargetInner()
                .withJunctions(
                    Arrays
                        .asList(
                            new NamespaceJunction()
                                .withNamespacePath("urqhaka")
                                .withTargetPath("ashsfwxos")
                                .withNfsExport("z")
                                .withNfsAccessPolicy("ugicjooxdjebw")))
                .withTargetType(StorageTargetType.NFS3)
                .withState(OperationalStateType.FLUSHING)
                .withNfs3(
                    new Nfs3Target()
                        .withTarget("vbvmeu")
                        .withUsageModel("ivyhzceuojgjrwju")
                        .withVerificationTimer(1907813820)
                        .withWriteBackTimer(398532590))
                .withClfs(new ClfsTarget().withTarget("dytdxwitx"))
                .withUnknown(
                    new UnknownTarget()
                        .withAttributes(mapOf("skxfbk", "wgqwgxhn", "gklwn", "y", "vylwzbtdhxuj", "nhjdauw")))
                .withBlobNfs(
                    new BlobNfsTarget()
                        .withTarget("mpowuwpr")
                        .withUsageModel("lve")
                        .withVerificationTimer(990417532)
                        .withWriteBackTimer(683546621));
        model = BinaryData.fromObject(model).toObject(StorageTargetInner.class);
        Assertions.assertEquals("urqhaka", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("ashsfwxos", model.junctions().get(0).targetPath());
        Assertions.assertEquals("z", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ugicjooxdjebw", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("vbvmeu", model.nfs3().target());
        Assertions.assertEquals("ivyhzceuojgjrwju", model.nfs3().usageModel());
        Assertions.assertEquals(1907813820, model.nfs3().verificationTimer());
        Assertions.assertEquals(398532590, model.nfs3().writeBackTimer());
        Assertions.assertEquals("dytdxwitx", model.clfs().target());
        Assertions.assertEquals("wgqwgxhn", model.unknown().attributes().get("skxfbk"));
        Assertions.assertEquals("mpowuwpr", model.blobNfs().target());
        Assertions.assertEquals("lve", model.blobNfs().usageModel());
        Assertions.assertEquals(990417532, model.blobNfs().verificationTimer());
        Assertions.assertEquals(683546621, model.blobNfs().writeBackTimer());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
