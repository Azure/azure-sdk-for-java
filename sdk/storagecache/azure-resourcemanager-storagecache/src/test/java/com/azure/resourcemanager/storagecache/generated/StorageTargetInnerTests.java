// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetInner;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetInner model = BinaryData.fromString(
            "{\"properties\":{\"junctions\":[{\"namespacePath\":\"fp\",\"targetPath\":\"mpipaslthaqfxs\",\"nfsExport\":\"wutwbdsre\",\"nfsAccessPolicy\":\"drhneuyow\"},{\"namespacePath\":\"d\",\"targetPath\":\"t\",\"nfsExport\":\"ib\",\"nfsAccessPolicy\":\"cgpik\"}],\"targetType\":\"unknown\",\"provisioningState\":\"Canceled\",\"state\":\"Ready\",\"nfs3\":{\"target\":\"nlfzxiavrmbz\",\"usageModel\":\"okixrjqcir\",\"verificationTimer\":2101008571,\"writeBackTimer\":259037414},\"clfs\":{\"target\":\"zszrnwoiindfpw\"},\"unknown\":{\"attributes\":{\"zfjvfbgofe\":\"wbtlhflsjcdh\",\"iiojnal\":\"jagrqmqhldvr\"}},\"blobNfs\":{\"target\":\"kvtvsexso\",\"usageModel\":\"el\",\"verificationTimer\":1968234640,\"writeBackTimer\":1709132634},\"allocationPercentage\":958669339},\"location\":\"vrhmzk\",\"id\":\"jgwwspughftq\",\"name\":\"xhqxujxukndxdigr\",\"type\":\"guufzd\"}")
            .toObject(StorageTargetInner.class);
        Assertions.assertEquals("fp", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("mpipaslthaqfxs", model.junctions().get(0).targetPath());
        Assertions.assertEquals("wutwbdsre", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("drhneuyow", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.UNKNOWN, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("nlfzxiavrmbz", model.nfs3().target());
        Assertions.assertEquals("okixrjqcir", model.nfs3().usageModel());
        Assertions.assertEquals(2101008571, model.nfs3().verificationTimer());
        Assertions.assertEquals(259037414, model.nfs3().writeBackTimer());
        Assertions.assertEquals("zszrnwoiindfpw", model.clfs().target());
        Assertions.assertEquals("wbtlhflsjcdh", model.unknown().attributes().get("zfjvfbgofe"));
        Assertions.assertEquals("kvtvsexso", model.blobNfs().target());
        Assertions.assertEquals("el", model.blobNfs().usageModel());
        Assertions.assertEquals(1968234640, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1709132634, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetInner model = new StorageTargetInner()
            .withJunctions(Arrays.asList(
                new NamespaceJunction().withNamespacePath("fp")
                    .withTargetPath("mpipaslthaqfxs")
                    .withNfsExport("wutwbdsre")
                    .withNfsAccessPolicy("drhneuyow"),
                new NamespaceJunction().withNamespacePath("d")
                    .withTargetPath("t")
                    .withNfsExport("ib")
                    .withNfsAccessPolicy("cgpik")))
            .withTargetType(StorageTargetType.UNKNOWN)
            .withState(OperationalStateType.READY)
            .withNfs3(new Nfs3Target().withTarget("nlfzxiavrmbz")
                .withUsageModel("okixrjqcir")
                .withVerificationTimer(2101008571)
                .withWriteBackTimer(259037414))
            .withClfs(new ClfsTarget().withTarget("zszrnwoiindfpw"))
            .withUnknown(
                new UnknownTarget().withAttributes(mapOf("zfjvfbgofe", "wbtlhflsjcdh", "iiojnal", "jagrqmqhldvr")))
            .withBlobNfs(new BlobNfsTarget().withTarget("kvtvsexso")
                .withUsageModel("el")
                .withVerificationTimer(1968234640)
                .withWriteBackTimer(1709132634));
        model = BinaryData.fromObject(model).toObject(StorageTargetInner.class);
        Assertions.assertEquals("fp", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("mpipaslthaqfxs", model.junctions().get(0).targetPath());
        Assertions.assertEquals("wutwbdsre", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("drhneuyow", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.UNKNOWN, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("nlfzxiavrmbz", model.nfs3().target());
        Assertions.assertEquals("okixrjqcir", model.nfs3().usageModel());
        Assertions.assertEquals(2101008571, model.nfs3().verificationTimer());
        Assertions.assertEquals(259037414, model.nfs3().writeBackTimer());
        Assertions.assertEquals("zszrnwoiindfpw", model.clfs().target());
        Assertions.assertEquals("wbtlhflsjcdh", model.unknown().attributes().get("zfjvfbgofe"));
        Assertions.assertEquals("kvtvsexso", model.blobNfs().target());
        Assertions.assertEquals("el", model.blobNfs().usageModel());
        Assertions.assertEquals(1968234640, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1709132634, model.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
