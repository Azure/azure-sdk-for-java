// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetInner;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetInner model = BinaryData.fromString(
            "{\"properties\":{\"junctions\":[{\"namespacePath\":\"m\",\"targetPath\":\"dmjsjqb\",\"nfsExport\":\"hyxxrwlycoduhpk\",\"nfsAccessPolicy\":\"gymare\"}],\"targetType\":\"nfs3\",\"provisioningState\":\"Canceled\",\"state\":\"Suspended\",\"nfs3\":{\"target\":\"jhkycub\",\"usageModel\":\"dgssofwqmzqal\",\"verificationTimer\":1473869810,\"writeBackTimer\":1723578922},\"clfs\":{\"target\":\"pxacqqudfn\"},\"unknown\":{\"attributes\":{\"m\":\"aaabjyvayff\"}},\"blobNfs\":{\"target\":\"tuzqogsexne\",\"usageModel\":\"dnw\",\"verificationTimer\":2059840008,\"writeBackTimer\":377160768},\"allocationPercentage\":1440499034},\"location\":\"yceuzsoib\",\"id\":\"dpfrxtrthzvaytdw\",\"name\":\"qbrqubpaxhexiili\",\"type\":\"pdtii\"}")
            .toObject(StorageTargetInner.class);
        Assertions.assertEquals("m", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("dmjsjqb", model.junctions().get(0).targetPath());
        Assertions.assertEquals("hyxxrwlycoduhpk", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("gymare", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.SUSPENDED, model.state());
        Assertions.assertEquals("jhkycub", model.nfs3().target());
        Assertions.assertEquals("dgssofwqmzqal", model.nfs3().usageModel());
        Assertions.assertEquals(1473869810, model.nfs3().verificationTimer());
        Assertions.assertEquals(1723578922, model.nfs3().writeBackTimer());
        Assertions.assertEquals("pxacqqudfn", model.clfs().target());
        Assertions.assertEquals("aaabjyvayff", model.unknown().attributes().get("m"));
        Assertions.assertEquals("tuzqogsexne", model.blobNfs().target());
        Assertions.assertEquals("dnw", model.blobNfs().usageModel());
        Assertions.assertEquals(2059840008, model.blobNfs().verificationTimer());
        Assertions.assertEquals(377160768, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetInner model = new StorageTargetInner()
            .withJunctions(Arrays.asList(new NamespaceJunction().withNamespacePath("m").withTargetPath("dmjsjqb")
                .withNfsExport("hyxxrwlycoduhpk").withNfsAccessPolicy("gymare")))
            .withTargetType(StorageTargetType.NFS3).withState(OperationalStateType.SUSPENDED)
            .withNfs3(new Nfs3Target().withTarget("jhkycub").withUsageModel("dgssofwqmzqal")
                .withVerificationTimer(1473869810).withWriteBackTimer(1723578922))
            .withClfs(new ClfsTarget().withTarget("pxacqqudfn"))
            .withUnknown(new UnknownTarget().withAttributes(mapOf("m", "aaabjyvayff")))
            .withBlobNfs(new BlobNfsTarget().withTarget("tuzqogsexne").withUsageModel("dnw")
                .withVerificationTimer(2059840008).withWriteBackTimer(377160768));
        model = BinaryData.fromObject(model).toObject(StorageTargetInner.class);
        Assertions.assertEquals("m", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("dmjsjqb", model.junctions().get(0).targetPath());
        Assertions.assertEquals("hyxxrwlycoduhpk", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("gymare", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.SUSPENDED, model.state());
        Assertions.assertEquals("jhkycub", model.nfs3().target());
        Assertions.assertEquals("dgssofwqmzqal", model.nfs3().usageModel());
        Assertions.assertEquals(1473869810, model.nfs3().verificationTimer());
        Assertions.assertEquals(1723578922, model.nfs3().writeBackTimer());
        Assertions.assertEquals("pxacqqudfn", model.clfs().target());
        Assertions.assertEquals("aaabjyvayff", model.unknown().attributes().get("m"));
        Assertions.assertEquals("tuzqogsexne", model.blobNfs().target());
        Assertions.assertEquals("dnw", model.blobNfs().usageModel());
        Assertions.assertEquals(2059840008, model.blobNfs().verificationTimer());
        Assertions.assertEquals(377160768, model.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
