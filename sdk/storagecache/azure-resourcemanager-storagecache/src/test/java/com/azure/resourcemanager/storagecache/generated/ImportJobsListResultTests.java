// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.ImportJobInner;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import com.azure.resourcemanager.storagecache.models.ImportJobsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImportJobsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImportJobsListResult model = BinaryData.fromString(
            "{\"nextLink\":\"kujysvlejuvfq\",\"value\":[{\"properties\":{\"provisioningState\":\"Creating\",\"importPrefixes\":[\"kcprbnw\",\"xgjvtbv\"],\"conflictResolutionMode\":\"Skip\",\"maximumErrors\":662513837,\"status\":{\"state\":\"Cancelling\",\"statusMessage\":\"jq\",\"totalBlobsWalked\":6415098811593450314,\"blobsWalkedPerSecond\":8234236264625929189,\"totalBlobsImported\":442653296358951383,\"blobsImportedPerSecond\":1403536085047342017,\"lastCompletionTime\":\"2021-07-30T02:27:32Z\",\"lastStartedTime\":\"2021-02-13T16:28:59Z\",\"totalErrors\":1555370196,\"totalConflicts\":1015054859}},\"location\":\"uizga\",\"tags\":{\"hr\":\"fizuckyf\",\"zwdzuh\":\"idf\",\"wxmnteiwao\":\"ymwisdkft\"},\"id\":\"vkmijcmmxdcuf\",\"name\":\"fsrpymzidnse\",\"type\":\"cxtbzsg\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"importPrefixes\":[\"ewmdw\",\"jeiachboosfl\",\"ro\",\"fqpte\"],\"conflictResolutionMode\":\"OverwriteAlways\",\"maximumErrors\":1130087895,\"status\":{\"state\":\"Completed\",\"statusMessage\":\"rimz\",\"totalBlobsWalked\":2996229806276970298,\"blobsWalkedPerSecond\":4254467677090741872,\"totalBlobsImported\":2324275574179750664,\"blobsImportedPerSecond\":5283900792568808120,\"lastCompletionTime\":\"2021-11-24T02:47:54Z\",\"lastStartedTime\":\"2021-06-24T02:43:20Z\",\"totalErrors\":1455872330,\"totalConflicts\":901066642}},\"location\":\"ohjtckw\",\"tags\":{\"bznorcjxvsnby\":\"oifiyipjxsqwpgr\",\"cyshurzafbljjgp\":\"qabnmoc\",\"bqidtqaj\":\"toqcjmklja\",\"khbzhfepgzg\":\"yulpkudjkr\"},\"id\":\"e\",\"name\":\"zloc\",\"type\":\"scpai\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"importPrefixes\":[\"sglumma\",\"tjaodxobnb\"],\"conflictResolutionMode\":\"Fail\",\"maximumErrors\":372100049,\"status\":{\"state\":\"Canceled\",\"statusMessage\":\"jionpimexgstxgc\",\"totalBlobsWalked\":2253353584396123190,\"blobsWalkedPerSecond\":4756233524739772773,\"totalBlobsImported\":159667534034002555,\"blobsImportedPerSecond\":8346750306601023663,\"lastCompletionTime\":\"2021-09-11T20:00:02Z\",\"lastStartedTime\":\"2021-08-17T10:32:15Z\",\"totalErrors\":1274470316,\"totalConflicts\":1409516732}},\"location\":\"whijcoejctbza\",\"tags\":{\"ukdkexxppofmxa\":\"sycbkbfk\",\"jpgd\":\"c\",\"j\":\"toc\"},\"id\":\"hvpmoue\",\"name\":\"hd\",\"type\":\"xibqeojnx\"},{\"properties\":{\"provisioningState\":\"Failed\",\"importPrefixes\":[\"ntwndeicbtwnpzao\",\"vuhrhcffcyddgl\",\"jthjqkwpyei\"],\"conflictResolutionMode\":\"Fail\",\"maximumErrors\":1788510913,\"status\":{\"state\":\"Canceled\",\"statusMessage\":\"hkh\",\"totalBlobsWalked\":5654168720621130688,\"blobsWalkedPerSecond\":7360318284111753754,\"totalBlobsImported\":6491877655864517038,\"blobsImportedPerSecond\":5232700234439771330,\"lastCompletionTime\":\"2021-02-18T21:42:16Z\",\"lastStartedTime\":\"2021-02-17T14:37:23Z\",\"totalErrors\":20476621,\"totalConflicts\":35431541}},\"location\":\"a\",\"tags\":{\"yvvtpgvdfgio\":\"z\",\"gnxkrxdqmidtth\":\"kftutqxlngxlefg\"},\"id\":\"rvqdra\",\"name\":\"hjybigehoqfbo\",\"type\":\"skanyk\"}]}")
            .toObject(ImportJobsListResult.class);
        Assertions.assertEquals("kujysvlejuvfq", model.nextLink());
        Assertions.assertEquals("uizga", model.value().get(0).location());
        Assertions.assertEquals("fizuckyf", model.value().get(0).tags().get("hr"));
        Assertions.assertEquals("kcprbnw", model.value().get(0).importPrefixes().get(0));
        Assertions.assertEquals(ConflictResolutionMode.SKIP, model.value().get(0).conflictResolutionMode());
        Assertions.assertEquals(662513837, model.value().get(0).maximumErrors());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImportJobsListResult model = new ImportJobsListResult().withNextLink("kujysvlejuvfq")
            .withValue(Arrays.asList(
                new ImportJobInner().withLocation("uizga")
                    .withTags(mapOf("hr", "fizuckyf", "zwdzuh", "idf", "wxmnteiwao", "ymwisdkft"))
                    .withImportPrefixes(Arrays.asList("kcprbnw", "xgjvtbv"))
                    .withConflictResolutionMode(ConflictResolutionMode.SKIP)
                    .withMaximumErrors(662513837),
                new ImportJobInner().withLocation("ohjtckw")
                    .withTags(mapOf("bznorcjxvsnby", "oifiyipjxsqwpgr", "cyshurzafbljjgp", "qabnmoc", "bqidtqaj",
                        "toqcjmklja", "khbzhfepgzg", "yulpkudjkr"))
                    .withImportPrefixes(Arrays.asList("ewmdw", "jeiachboosfl", "ro", "fqpte"))
                    .withConflictResolutionMode(ConflictResolutionMode.OVERWRITE_ALWAYS)
                    .withMaximumErrors(1130087895),
                new ImportJobInner().withLocation("whijcoejctbza")
                    .withTags(mapOf("ukdkexxppofmxa", "sycbkbfk", "jpgd", "c", "j", "toc"))
                    .withImportPrefixes(Arrays.asList("sglumma", "tjaodxobnb"))
                    .withConflictResolutionMode(ConflictResolutionMode.FAIL)
                    .withMaximumErrors(372100049),
                new ImportJobInner().withLocation("a")
                    .withTags(mapOf("yvvtpgvdfgio", "z", "gnxkrxdqmidtth", "kftutqxlngxlefg"))
                    .withImportPrefixes(Arrays.asList("ntwndeicbtwnpzao", "vuhrhcffcyddgl", "jthjqkwpyei"))
                    .withConflictResolutionMode(ConflictResolutionMode.FAIL)
                    .withMaximumErrors(1788510913)));
        model = BinaryData.fromObject(model).toObject(ImportJobsListResult.class);
        Assertions.assertEquals("kujysvlejuvfq", model.nextLink());
        Assertions.assertEquals("uizga", model.value().get(0).location());
        Assertions.assertEquals("fizuckyf", model.value().get(0).tags().get("hr"));
        Assertions.assertEquals("kcprbnw", model.value().get(0).importPrefixes().get(0));
        Assertions.assertEquals(ConflictResolutionMode.SKIP, model.value().get(0).conflictResolutionMode());
        Assertions.assertEquals(662513837, model.value().get(0).maximumErrors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
