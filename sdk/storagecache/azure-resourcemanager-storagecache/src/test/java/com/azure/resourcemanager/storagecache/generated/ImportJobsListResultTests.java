// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.ImportJobInner;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import com.azure.resourcemanager.storagecache.models.ImportJobAdminStatus;
import com.azure.resourcemanager.storagecache.models.ImportJobsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ImportJobsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ImportJobsListResult model = BinaryData.fromString(
            "{\"nextLink\":\"zafb\",\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"adminStatus\":\"Active\",\"importPrefixes\":[\"jmkljavbqidtqajz\"],\"conflictResolutionMode\":\"Fail\",\"maximumErrors\":331087178,\"status\":{\"state\":\"Completed\",\"statusMessage\":\"rlkhbzhfepgzgq\",\"totalBlobsWalked\":3760414146947165367,\"blobsWalkedPerSecond\":896381788369123832,\"totalBlobsImported\":643106143486636349,\"importedFiles\":7962236738241202360,\"importedDirectories\":8634067078860679634,\"importedSymlinks\":6033938438428959705,\"preexistingFiles\":196572370819787122,\"preexistingDirectories\":8317857403352885468,\"preexistingSymlinks\":1156141059513574323,\"blobsImportedPerSecond\":7318128857361770729,\"lastCompletionTime\":\"2021-02-28T08:33:15Z\",\"lastStartedTime\":\"2021-10-05T14:42:09Z\",\"totalErrors\":1455975978,\"totalConflicts\":64161547}},\"location\":\"pxokajionp\",\"tags\":{\"txgcpodgmaajr\":\"xg\"},\"id\":\"vdjwzrlovm\",\"name\":\"lwhijcoejctbzaq\",\"type\":\"qsycbkbfkgu\"}]}")
            .toObject(ImportJobsListResult.class);
        Assertions.assertEquals("zafb", model.nextLink());
        Assertions.assertEquals("pxokajionp", model.value().get(0).location());
        Assertions.assertEquals("xg", model.value().get(0).tags().get("txgcpodgmaajr"));
        Assertions.assertEquals(ImportJobAdminStatus.ACTIVE, model.value().get(0).adminStatus());
        Assertions.assertEquals("jmkljavbqidtqajz", model.value().get(0).importPrefixes().get(0));
        Assertions.assertEquals(ConflictResolutionMode.FAIL, model.value().get(0).conflictResolutionMode());
        Assertions.assertEquals(331087178, model.value().get(0).maximumErrors());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ImportJobsListResult model = new ImportJobsListResult().withNextLink("zafb")
            .withValue(Arrays.asList(new ImportJobInner().withLocation("pxokajionp")
                .withTags(mapOf("txgcpodgmaajr", "xg"))
                .withAdminStatus(ImportJobAdminStatus.ACTIVE)
                .withImportPrefixes(Arrays.asList("jmkljavbqidtqajz"))
                .withConflictResolutionMode(ConflictResolutionMode.FAIL)
                .withMaximumErrors(331087178)));
        model = BinaryData.fromObject(model).toObject(ImportJobsListResult.class);
        Assertions.assertEquals("zafb", model.nextLink());
        Assertions.assertEquals("pxokajionp", model.value().get(0).location());
        Assertions.assertEquals("xg", model.value().get(0).tags().get("txgcpodgmaajr"));
        Assertions.assertEquals(ImportJobAdminStatus.ACTIVE, model.value().get(0).adminStatus());
        Assertions.assertEquals("jmkljavbqidtqajz", model.value().get(0).importPrefixes().get(0));
        Assertions.assertEquals(ConflictResolutionMode.FAIL, model.value().get(0).conflictResolutionMode());
        Assertions.assertEquals(331087178, model.value().get(0).maximumErrors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
