// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.AmlFilesystemInner;
import com.azure.resourcemanager.storagecache.models.AmlFilesystemIdentity;
import com.azure.resourcemanager.storagecache.models.AmlFilesystemIdentityType;
import com.azure.resourcemanager.storagecache.models.AmlFilesystemsListResult;
import com.azure.resourcemanager.storagecache.models.SkuName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AmlFilesystemsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AmlFilesystemsListResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"aq\",\"value\":[{\"identity\":{\"principalId\":\"pkii\",\"tenantId\":\"yexz\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"sku\":{\"name\":\"nr\"},\"zones\":[\"o\",\"hb\",\"xknalaulppg\"],\"properties\":{\"storageCapacityTiB\":96.281746,\"provisioningState\":\"Failed\",\"filesystemSubnet\":\"pnyiropuhp\",\"mgsAddress\":\"vpgylgqgitxmed\",\"mountCommand\":\"c\",\"lustreVersion\":\"ynqwwncwzzhxgk\",\"throughputProvisionedMBps\":1481822403},\"location\":\"napkteoellw\",\"tags\":{\"gpfqbuace\":\"d\",\"qeqxo\":\"pzfqrhhuaoppp\",\"ahzxctobgbk\":\"z\",\"mgrcfbu\":\"moizpos\"},\"id\":\"rmfqjhhkxbpvj\",\"name\":\"mjh\",\"type\":\"xjyngudivk\"},{\"identity\":{\"principalId\":\"wbxqzvszjfau\",\"tenantId\":\"fdxxivetvtcqaqtd\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"sku\":{\"name\":\"vwvxyslqbhsfx\"},\"zones\":[\"ytkblmpew\"],\"properties\":{\"storageCapacityTiB\":62.109833,\"provisioningState\":\"Updating\",\"filesystemSubnet\":\"vrnsvshqjohxc\",\"mgsAddress\":\"bfovasrruvwbhsq\",\"mountCommand\":\"ubcgjbirxb\",\"lustreVersion\":\"bsrfbj\",\"throughputProvisionedMBps\":837542479},\"location\":\"otftpvjzbexilz\",\"tags\":{\"aruoujmkcjhwqyt\":\"qqnvwpmq\",\"bnw\":\"r\",\"enq\":\"ewgdrjervn\",\"ndoygmifthnzdnd\":\"eh\"},\"id\":\"l\",\"name\":\"nayqi\",\"type\":\"ynduha\"}]}")
                .toObject(AmlFilesystemsListResult.class);
        Assertions.assertEquals("aq", model.nextLink());
        Assertions.assertEquals("napkteoellw", model.value().get(0).location());
        Assertions.assertEquals("d", model.value().get(0).tags().get("gpfqbuace"));
        Assertions.assertEquals(AmlFilesystemIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("nr", model.value().get(0).sku().name());
        Assertions.assertEquals("o", model.value().get(0).zones().get(0));
        Assertions.assertEquals(96.281746f, model.value().get(0).storageCapacityTiB());
        Assertions.assertEquals("pnyiropuhp", model.value().get(0).filesystemSubnet());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AmlFilesystemsListResult model =
            new AmlFilesystemsListResult()
                .withNextLink("aq")
                .withValue(
                    Arrays
                        .asList(
                            new AmlFilesystemInner()
                                .withLocation("napkteoellw")
                                .withTags(
                                    mapOf(
                                        "gpfqbuace",
                                        "d",
                                        "qeqxo",
                                        "pzfqrhhuaoppp",
                                        "ahzxctobgbk",
                                        "z",
                                        "mgrcfbu",
                                        "moizpos"))
                                .withIdentity(
                                    new AmlFilesystemIdentity()
                                        .withType(AmlFilesystemIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withSku(new SkuName().withName("nr"))
                                .withZones(Arrays.asList("o", "hb", "xknalaulppg"))
                                .withStorageCapacityTiB(96.281746f)
                                .withFilesystemSubnet("pnyiropuhp"),
                            new AmlFilesystemInner()
                                .withLocation("otftpvjzbexilz")
                                .withTags(
                                    mapOf(
                                        "aruoujmkcjhwqyt",
                                        "qqnvwpmq",
                                        "bnw",
                                        "r",
                                        "enq",
                                        "ewgdrjervn",
                                        "ndoygmifthnzdnd",
                                        "eh"))
                                .withIdentity(
                                    new AmlFilesystemIdentity()
                                        .withType(AmlFilesystemIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withSku(new SkuName().withName("vwvxyslqbhsfx"))
                                .withZones(Arrays.asList("ytkblmpew"))
                                .withStorageCapacityTiB(62.109833f)
                                .withFilesystemSubnet("vrnsvshqjohxc")));
        model = BinaryData.fromObject(model).toObject(AmlFilesystemsListResult.class);
        Assertions.assertEquals("aq", model.nextLink());
        Assertions.assertEquals("napkteoellw", model.value().get(0).location());
        Assertions.assertEquals("d", model.value().get(0).tags().get("gpfqbuace"));
        Assertions.assertEquals(AmlFilesystemIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("nr", model.value().get(0).sku().name());
        Assertions.assertEquals("o", model.value().get(0).zones().get(0));
        Assertions.assertEquals(96.281746f, model.value().get(0).storageCapacityTiB());
        Assertions.assertEquals("pnyiropuhp", model.value().get(0).filesystemSubnet());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
