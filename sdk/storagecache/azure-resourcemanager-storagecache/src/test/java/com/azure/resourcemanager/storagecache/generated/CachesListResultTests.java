// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.CacheInner;
import com.azure.resourcemanager.storagecache.models.CacheIdentity;
import com.azure.resourcemanager.storagecache.models.CacheIdentityType;
import com.azure.resourcemanager.storagecache.models.CacheSku;
import com.azure.resourcemanager.storagecache.models.CachesListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CachesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CachesListResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"fwnfnb\",\"value\":[{\"identity\":{\"principalId\":\"nlebxetqgtzxd\",\"tenantId\":\"qbqqwxr\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"properties\":{\"cacheSizeGB\":69356874,\"mountAddresses\":[],\"provisioningState\":\"Failed\",\"subnet\":\"njampm\",\"zones\":[],\"primingJobs\":[],\"spaceAllocation\":[]},\"sku\":{\"name\":\"chcbonqvpkvlrxnj\"},\"location\":\"ase\",\"tags\":{\"lokeyy\":\"eo\",\"jp\":\"enjbdlwtgrhp\",\"e\":\"umasxazjpq\",\"zvdudgwdslfhotwm\":\"ualhbxxhejj\"},\"id\":\"ynpwlbj\",\"name\":\"pgacftadehxnlty\",\"type\":\"sop\"},{\"identity\":{\"principalId\":\"uesnzwdejbavo\",\"tenantId\":\"zdmohctbqvu\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"cacheSizeGB\":378897714,\"mountAddresses\":[],\"provisioningState\":\"Deleting\",\"subnet\":\"jugwdkcglhsl\",\"zones\":[],\"primingJobs\":[],\"spaceAllocation\":[]},\"sku\":{\"name\":\"hbkuofqwey\"},\"location\":\"hmenevfyexfwhybc\",\"tags\":{\"dectehfiqsc\":\"yvdcsitynnaa\",\"hcjrefovgmk\":\"eypvhezrkg\"},\"id\":\"sle\",\"name\":\"yvxyqjp\",\"type\":\"cattpngjcrcczsq\"}]}")
                .toObject(CachesListResult.class);
        Assertions.assertEquals("fwnfnb", model.nextLink());
        Assertions.assertEquals("ase", model.value().get(0).location());
        Assertions.assertEquals("eo", model.value().get(0).tags().get("lokeyy"));
        Assertions.assertEquals(CacheIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.value().get(0).sku().name());
        Assertions.assertEquals(69356874, model.value().get(0).cacheSizeGB());
        Assertions.assertEquals("njampm", model.value().get(0).subnet());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CachesListResult model =
            new CachesListResult()
                .withNextLink("fwnfnb")
                .withValue(
                    Arrays
                        .asList(
                            new CacheInner()
                                .withLocation("ase")
                                .withTags(
                                    mapOf(
                                        "lokeyy",
                                        "eo",
                                        "jp",
                                        "enjbdlwtgrhp",
                                        "e",
                                        "umasxazjpq",
                                        "zvdudgwdslfhotwm",
                                        "ualhbxxhejj"))
                                .withIdentity(
                                    new CacheIdentity()
                                        .withType(CacheIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withSku(new CacheSku().withName("chcbonqvpkvlrxnj"))
                                .withCacheSizeGB(69356874)
                                .withSubnet("njampm")
                                .withZones(Arrays.asList()),
                            new CacheInner()
                                .withLocation("hmenevfyexfwhybc")
                                .withTags(mapOf("dectehfiqsc", "yvdcsitynnaa", "hcjrefovgmk", "eypvhezrkg"))
                                .withIdentity(
                                    new CacheIdentity()
                                        .withType(CacheIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withSku(new CacheSku().withName("hbkuofqwey"))
                                .withCacheSizeGB(378897714)
                                .withSubnet("jugwdkcglhsl")
                                .withZones(Arrays.asList())));
        model = BinaryData.fromObject(model).toObject(CachesListResult.class);
        Assertions.assertEquals("fwnfnb", model.nextLink());
        Assertions.assertEquals("ase", model.value().get(0).location());
        Assertions.assertEquals("eo", model.value().get(0).tags().get("lokeyy"));
        Assertions.assertEquals(CacheIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.value().get(0).sku().name());
        Assertions.assertEquals(69356874, model.value().get(0).cacheSizeGB());
        Assertions.assertEquals("njampm", model.value().get(0).subnet());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
