// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.models.NfsAccessRule;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope;
import org.junit.jupiter.api.Assertions;

public final class NfsAccessRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NfsAccessRule model = BinaryData.fromString(
            "{\"scope\":\"network\",\"filter\":\"idb\",\"access\":\"no\",\"suid\":false,\"submountAccess\":true,\"rootSquash\":false,\"anonymousUID\":\"xcyjmoadsuvarmy\",\"anonymousGID\":\"mjsjqb\"}")
            .toObject(NfsAccessRule.class);
        Assertions.assertEquals(NfsAccessRuleScope.NETWORK, model.scope());
        Assertions.assertEquals("idb", model.filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.access());
        Assertions.assertFalse(model.suid());
        Assertions.assertTrue(model.submountAccess());
        Assertions.assertFalse(model.rootSquash());
        Assertions.assertEquals("xcyjmoadsuvarmy", model.anonymousUid());
        Assertions.assertEquals("mjsjqb", model.anonymousGid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NfsAccessRule model = new NfsAccessRule().withScope(NfsAccessRuleScope.NETWORK)
            .withFilter("idb")
            .withAccess(NfsAccessRuleAccess.NO)
            .withSuid(false)
            .withSubmountAccess(true)
            .withRootSquash(false)
            .withAnonymousUid("xcyjmoadsuvarmy")
            .withAnonymousGid("mjsjqb");
        model = BinaryData.fromObject(model).toObject(NfsAccessRule.class);
        Assertions.assertEquals(NfsAccessRuleScope.NETWORK, model.scope());
        Assertions.assertEquals("idb", model.filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.access());
        Assertions.assertFalse(model.suid());
        Assertions.assertTrue(model.submountAccess());
        Assertions.assertFalse(model.rootSquash());
        Assertions.assertEquals("xcyjmoadsuvarmy", model.anonymousUid());
        Assertions.assertEquals("mjsjqb", model.anonymousGid());
    }
}
