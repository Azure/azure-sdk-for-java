// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.models.NfsAccessRule;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess;
import com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope;
import org.junit.jupiter.api.Assertions;

public final class NfsAccessRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NfsAccessRule model = BinaryData.fromString(
            "{\"scope\":\"host\",\"filter\":\"ongbjcnt\",\"access\":\"no\",\"suid\":false,\"submountAccess\":false,\"rootSquash\":false,\"anonymousUID\":\"twwaezkojvdcpzf\",\"anonymousGID\":\"ouicybxarzgszu\"}")
            .toObject(NfsAccessRule.class);
        Assertions.assertEquals(NfsAccessRuleScope.HOST, model.scope());
        Assertions.assertEquals("ongbjcnt", model.filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.access());
        Assertions.assertEquals(false, model.suid());
        Assertions.assertEquals(false, model.submountAccess());
        Assertions.assertEquals(false, model.rootSquash());
        Assertions.assertEquals("twwaezkojvdcpzf", model.anonymousUid());
        Assertions.assertEquals("ouicybxarzgszu", model.anonymousGid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NfsAccessRule model = new NfsAccessRule().withScope(NfsAccessRuleScope.HOST)
            .withFilter("ongbjcnt")
            .withAccess(NfsAccessRuleAccess.NO)
            .withSuid(false)
            .withSubmountAccess(false)
            .withRootSquash(false)
            .withAnonymousUid("twwaezkojvdcpzf")
            .withAnonymousGid("ouicybxarzgszu");
        model = BinaryData.fromObject(model).toObject(NfsAccessRule.class);
        Assertions.assertEquals(NfsAccessRuleScope.HOST, model.scope());
        Assertions.assertEquals("ongbjcnt", model.filter());
        Assertions.assertEquals(NfsAccessRuleAccess.NO, model.access());
        Assertions.assertEquals(false, model.suid());
        Assertions.assertEquals(false, model.submountAccess());
        Assertions.assertEquals(false, model.rootSquash());
        Assertions.assertEquals("twwaezkojvdcpzf", model.anonymousUid());
        Assertions.assertEquals("ouicybxarzgszu", model.anonymousGid());
    }
}
