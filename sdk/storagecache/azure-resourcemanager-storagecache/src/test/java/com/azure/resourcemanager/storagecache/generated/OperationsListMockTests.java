// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.ApiOperation;
import com.azure.resourcemanager.storagecache.models.MetricAggregationType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"display\":{\"operation\":\"indfpwpjyl\",\"provider\":\"tlhflsjcdhszf\",\"resource\":\"fbgofeljagrqmqh\",\"description\":\"vriiio\"},\"origin\":\"al\",\"isDataAction\":false,\"name\":\"vtvsexsowueluq\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"vrhmzk\",\"displayName\":\"jgwwspughftq\",\"displayDescription\":\"hqxujxukndxdi\",\"unit\":\"jguufzdm\",\"aggregationType\":\"qtfihwhbotzinga\",\"supportedAggregationTypes\":[\"Average\"],\"metricClass\":\"o\",\"dimensions\":[{},{}]},{\"name\":\"udphqamvdkfwyn\",\"displayName\":\"vtbvkayh\",\"displayDescription\":\"nvyq\",\"unit\":\"tkzwpcnpwzc\",\"aggregationType\":\"esgvvsccyaj\",\"supportedAggregationTypes\":[\"None\",\"Average\"],\"metricClass\":\"ygz\",\"dimensions\":[{},{}]},{\"name\":\"kfxu\",\"displayName\":\"mdwzrmuhapfcqdps\",\"displayDescription\":\"qvpsvuoymg\",\"unit\":\"elvezrypq\",\"aggregationType\":\"feo\",\"supportedAggregationTypes\":[\"Maximum\",\"Average\"],\"metricClass\":\"yhko\",\"dimensions\":[{}]}],\"logSpecifications\":[{\"name\":\"dkow\",\"displayName\":\"bqpc\"}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        StorageCacheManager manager = StorageCacheManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApiOperation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("indfpwpjyl", response.iterator().next().display().operation());
        Assertions.assertEquals("tlhflsjcdhszf", response.iterator().next().display().provider());
        Assertions.assertEquals("fbgofeljagrqmqh", response.iterator().next().display().resource());
        Assertions.assertEquals("vriiio", response.iterator().next().display().description());
        Assertions.assertEquals("al", response.iterator().next().origin());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("vtvsexsowueluq", response.iterator().next().name());
        Assertions.assertEquals("vrhmzk",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("jgwwspughftq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("hqxujxukndxdi",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("jguufzdm",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("qtfihwhbotzinga",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(MetricAggregationType.AVERAGE, response.iterator().next().serviceSpecification()
            .metricSpecifications().get(0).supportedAggregationTypes().get(0));
        Assertions.assertEquals("o",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).metricClass());
        Assertions.assertEquals("dkow",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("bqpc",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
