// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.ApiOperation;
import com.azure.resourcemanager.storagecache.models.MetricAggregationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"display\":{\"operation\":\"ibbdaxconfoza\",\"provider\":\"rsukokwbqplh\",\"resource\":\"nuuepzlrp\",\"description\":\"zsoldwey\"},\"origin\":\"dunvmnnrwrbiorkt\",\"isDataAction\":true,\"name\":\"jhhgdnhxmsi\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"ox\",\"displayName\":\"dufiq\",\"displayDescription\":\"ieuzaofjchvcyyy\",\"unit\":\"gdotcubiipuipwo\",\"aggregationType\":\"nmacj\",\"supportedAggregationTypes\":[\"NotSpecified\",\"NotSpecified\",\"Total\"],\"metricClass\":\"qvci\",\"dimensions\":[{}]},{\"name\":\"fgmblrrilbywdxsm\",\"displayName\":\"cwrwfs\",\"displayDescription\":\"fnynszqujizdvoqy\",\"unit\":\"byowbblgyavutp\",\"aggregationType\":\"joxoism\",\"supportedAggregationTypes\":[\"Count\",\"Total\"],\"metricClass\":\"mlqoljx\",\"dimensions\":[{},{},{},{}]},{\"name\":\"xlx\",\"displayName\":\"fgcviz\",\"displayDescription\":\"dwl\",\"unit\":\"lyoupfgfbkju\",\"aggregationType\":\"yhgk\",\"supportedAggregationTypes\":[\"None\"],\"metricClass\":\"g\",\"dimensions\":[{},{},{},{}]}],\"logSpecifications\":[{\"name\":\"sttktlahbqa\",\"displayName\":\"xtgzukxitmmqtgqq\"},{\"name\":\"hrnxrxc\",\"displayName\":\"uisavokq\"},{\"name\":\"fvazivjlfrqttba\",\"displayName\":\"katnwxyi\"},{\"name\":\"id\",\"displayName\":\"qfkuvscxkdmli\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StorageCacheManager manager = StorageCacheManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApiOperation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ibbdaxconfoza", response.iterator().next().display().operation());
        Assertions.assertEquals("rsukokwbqplh", response.iterator().next().display().provider());
        Assertions.assertEquals("nuuepzlrp", response.iterator().next().display().resource());
        Assertions.assertEquals("zsoldwey", response.iterator().next().display().description());
        Assertions.assertEquals("dunvmnnrwrbiorkt", response.iterator().next().origin());
        Assertions.assertEquals(true, response.iterator().next().isDataAction());
        Assertions.assertEquals("jhhgdnhxmsi", response.iterator().next().name());
        Assertions.assertEquals("ox",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("dufiq",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("ieuzaofjchvcyyy",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("gdotcubiipuipwo",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("nmacj",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(MetricAggregationType.NOT_SPECIFIED,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("qvci",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).metricClass());
        Assertions.assertEquals("sttktlahbqa",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("xtgzukxitmmqtgqq",
            response.iterator().next().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
