// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTarget;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StorageTargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"junctions\":[],\"targetType\":\"blobNfs\",\"provisioningState\":\"Succeeded\",\"state\":\"Ready\",\"nfs3\":{\"target\":\"ksrpqv\",\"usageModel\":\"zraehtwd\",\"verificationTimer\":1778813982,\"writeBackTimer\":1438579727},\"clfs\":{\"target\":\"byrcdlbhshfwp\"},\"unknown\":{\"attributes\":{}},\"blobNfs\":{\"target\":\"wity\",\"usageModel\":\"evxccedcp\",\"verificationTimer\":586634828,\"writeBackTimer\":684475424},\"allocationPercentage\":167865446},\"location\":\"zxltjcvn\",\"id\":\"tiugcxnav\",\"name\":\"wxqibyq\",\"type\":\"nyowxwlmdjrkvfg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StorageCacheManager manager =
            StorageCacheManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageTarget response =
            manager
                .storageTargets()
                .define("piyylhalnswhccsp")
                .withExistingCache("ah", "icslfaoq")
                .withJunctions(Arrays.asList())
                .withTargetType(StorageTargetType.UNKNOWN)
                .withState(OperationalStateType.BUSY)
                .withNfs3(
                    new Nfs3Target()
                        .withTarget("ywuggwoluhcz")
                        .withUsageModel("emh")
                        .withVerificationTimer(200585156)
                        .withWriteBackTimer(1060937316))
                .withClfs(new ClfsTarget().withTarget("z"))
                .withUnknown(new UnknownTarget().withAttributes(mapOf()))
                .withBlobNfs(
                    new BlobNfsTarget()
                        .withTarget("eypqwdxggicccn")
                        .withUsageModel("huexmk")
                        .withVerificationTimer(171161135)
                        .withWriteBackTimer(1054348500))
                .create();

        Assertions.assertEquals(StorageTargetType.BLOB_NFS, response.targetType());
        Assertions.assertEquals(OperationalStateType.READY, response.state());
        Assertions.assertEquals("ksrpqv", response.nfs3().target());
        Assertions.assertEquals("zraehtwd", response.nfs3().usageModel());
        Assertions.assertEquals(1778813982, response.nfs3().verificationTimer());
        Assertions.assertEquals(1438579727, response.nfs3().writeBackTimer());
        Assertions.assertEquals("byrcdlbhshfwp", response.clfs().target());
        Assertions.assertEquals("wity", response.blobNfs().target());
        Assertions.assertEquals("evxccedcp", response.blobNfs().usageModel());
        Assertions.assertEquals(586634828, response.blobNfs().verificationTimer());
        Assertions.assertEquals(684475424, response.blobNfs().writeBackTimer());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
