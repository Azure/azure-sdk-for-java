// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagecache.StorageCacheManager;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTarget;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StorageTargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"junctions\":[{\"namespacePath\":\"va\",\"targetPath\":\"zqadf\",\"nfsExport\":\"z\",\"nfsAccessPolicy\":\"iglaecx\"}],\"targetType\":\"unknown\",\"provisioningState\":\"Succeeded\",\"state\":\"Busy\",\"nfs3\":{\"target\":\"vzm\",\"usageModel\":\"t\",\"verificationTimer\":443285023,\"writeBackTimer\":60135256},\"clfs\":{\"target\":\"firclnpkciayz\"},\"unknown\":{\"attributes\":{\"fvjlboxqvkjlmx\":\"hya\",\"nraauzz\":\"omdynhdwdigum\",\"zysdzh\":\"tj\",\"qyuvvfonkp\":\"zwwva\"}},\"blobNfs\":{\"target\":\"yik\",\"usageModel\":\"lauyav\",\"verificationTimer\":712290061,\"writeBackTimer\":1095680793},\"allocationPercentage\":305978693},\"location\":\"tijfybvp\",\"id\":\"krsgsgb\",\"name\":\"huzqgn\",\"type\":\"dgkynscliqhzvhxn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        StorageCacheManager manager = StorageCacheManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        StorageTarget response = manager.storageTargets().define("uajlyj").withExistingCache("pgogtqxepny", "b")
            .withJunctions(Arrays.asList(new NamespaceJunction().withNamespacePath("qzhv").withTargetPath("ibyfmo")
                .withNfsExport("xrkjpvdw").withNfsAccessPolicy("zwiivwzjbhyzs")))
            .withTargetType(StorageTargetType.BLOB_NFS).withState(OperationalStateType.SUSPENDED)
            .withNfs3(new Nfs3Target().withTarget("rnegvmn").withUsageModel("q").withVerificationTimer(1352705933)
                .withWriteBackTimer(1399003891))
            .withClfs(new ClfsTarget().withTarget("astjbkkdmflvestm"))
            .withUnknown(new UnknownTarget().withAttributes(mapOf("zapeewchpx", "ril", "levufuztcktyhj", "ktwkuziyc")))
            .withBlobNfs(new BlobNfsTarget().withTarget("dcgzul").withUsageModel("mrqzzrrjvpgl")
                .withVerificationTimer(1750112370).withWriteBackTimer(928156540))
            .create();

        Assertions.assertEquals("va", response.junctions().get(0).namespacePath());
        Assertions.assertEquals("zqadf", response.junctions().get(0).targetPath());
        Assertions.assertEquals("z", response.junctions().get(0).nfsExport());
        Assertions.assertEquals("iglaecx", response.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.UNKNOWN, response.targetType());
        Assertions.assertEquals(OperationalStateType.BUSY, response.state());
        Assertions.assertEquals("vzm", response.nfs3().target());
        Assertions.assertEquals("t", response.nfs3().usageModel());
        Assertions.assertEquals(443285023, response.nfs3().verificationTimer());
        Assertions.assertEquals(60135256, response.nfs3().writeBackTimer());
        Assertions.assertEquals("firclnpkciayz", response.clfs().target());
        Assertions.assertEquals("hya", response.unknown().attributes().get("fvjlboxqvkjlmx"));
        Assertions.assertEquals("yik", response.blobNfs().target());
        Assertions.assertEquals("lauyav", response.blobNfs().usageModel());
        Assertions.assertEquals(712290061, response.blobNfs().verificationTimer());
        Assertions.assertEquals(1095680793, response.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
