// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetProperties;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetProperties model = BinaryData.fromString(
            "{\"junctions\":[{\"namespacePath\":\"otzi\",\"targetPath\":\"amvpphoszqzudph\",\"nfsExport\":\"mvdk\",\"nfsAccessPolicy\":\"ynwcvtbv\"},{\"namespacePath\":\"yhmtnvyqiat\",\"targetPath\":\"wp\",\"nfsExport\":\"p\",\"nfsAccessPolicy\":\"cjaesgvvs\"},{\"namespacePath\":\"yajguqfhwygzlv\",\"targetPath\":\"kfxu\",\"nfsExport\":\"mdwzrmuhapfcqdps\",\"nfsAccessPolicy\":\"qvpsvuoymg\"},{\"namespacePath\":\"elvezrypq\",\"targetPath\":\"feo\",\"nfsExport\":\"rqwky\",\"nfsAccessPolicy\":\"ob\"}],\"targetType\":\"nfs3\",\"provisioningState\":\"Deleting\",\"state\":\"Ready\",\"nfs3\":{\"target\":\"wep\",\"usageModel\":\"pc\",\"verificationTimer\":1318988279,\"writeBackTimer\":2091376747},\"clfs\":{\"target\":\"snjvcdwxlpqekftn\"},\"unknown\":{\"attributes\":{\"dvypgikdgsz\":\"syingwfqatmtdht\",\"birryuzhl\":\"w\",\"qrvqq\":\"kj\"}},\"blobNfs\":{\"target\":\"jinrvgoupmfiibfg\",\"usageModel\":\"ioolvrwxkvtkkgll\",\"verificationTimer\":342609300,\"writeBackTimer\":423959041},\"allocationPercentage\":104545862}")
            .toObject(StorageTargetProperties.class);
        Assertions.assertEquals("otzi", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("amvpphoszqzudph", model.junctions().get(0).targetPath());
        Assertions.assertEquals("mvdk", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ynwcvtbv", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("wep", model.nfs3().target());
        Assertions.assertEquals("pc", model.nfs3().usageModel());
        Assertions.assertEquals(1318988279, model.nfs3().verificationTimer());
        Assertions.assertEquals(2091376747, model.nfs3().writeBackTimer());
        Assertions.assertEquals("snjvcdwxlpqekftn", model.clfs().target());
        Assertions.assertEquals("syingwfqatmtdht", model.unknown().attributes().get("dvypgikdgsz"));
        Assertions.assertEquals("jinrvgoupmfiibfg", model.blobNfs().target());
        Assertions.assertEquals("ioolvrwxkvtkkgll", model.blobNfs().usageModel());
        Assertions.assertEquals(342609300, model.blobNfs().verificationTimer());
        Assertions.assertEquals(423959041, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetProperties model = new StorageTargetProperties()
            .withJunctions(Arrays.asList(
                new NamespaceJunction().withNamespacePath("otzi")
                    .withTargetPath("amvpphoszqzudph")
                    .withNfsExport("mvdk")
                    .withNfsAccessPolicy("ynwcvtbv"),
                new NamespaceJunction().withNamespacePath("yhmtnvyqiat")
                    .withTargetPath("wp")
                    .withNfsExport("p")
                    .withNfsAccessPolicy("cjaesgvvs"),
                new NamespaceJunction().withNamespacePath("yajguqfhwygzlv")
                    .withTargetPath("kfxu")
                    .withNfsExport("mdwzrmuhapfcqdps")
                    .withNfsAccessPolicy("qvpsvuoymg"),
                new NamespaceJunction().withNamespacePath("elvezrypq")
                    .withTargetPath("feo")
                    .withNfsExport("rqwky")
                    .withNfsAccessPolicy("ob")))
            .withTargetType(StorageTargetType.NFS3)
            .withState(OperationalStateType.READY)
            .withNfs3(new Nfs3Target().withTarget("wep")
                .withUsageModel("pc")
                .withVerificationTimer(1318988279)
                .withWriteBackTimer(2091376747))
            .withClfs(new ClfsTarget().withTarget("snjvcdwxlpqekftn"))
            .withUnknown(new UnknownTarget()
                .withAttributes(mapOf("dvypgikdgsz", "syingwfqatmtdht", "birryuzhl", "w", "qrvqq", "kj")))
            .withBlobNfs(new BlobNfsTarget().withTarget("jinrvgoupmfiibfg")
                .withUsageModel("ioolvrwxkvtkkgll")
                .withVerificationTimer(342609300)
                .withWriteBackTimer(423959041));
        model = BinaryData.fromObject(model).toObject(StorageTargetProperties.class);
        Assertions.assertEquals("otzi", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("amvpphoszqzudph", model.junctions().get(0).targetPath());
        Assertions.assertEquals("mvdk", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ynwcvtbv", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("wep", model.nfs3().target());
        Assertions.assertEquals("pc", model.nfs3().usageModel());
        Assertions.assertEquals(1318988279, model.nfs3().verificationTimer());
        Assertions.assertEquals(2091376747, model.nfs3().writeBackTimer());
        Assertions.assertEquals("snjvcdwxlpqekftn", model.clfs().target());
        Assertions.assertEquals("syingwfqatmtdht", model.unknown().attributes().get("dvypgikdgsz"));
        Assertions.assertEquals("jinrvgoupmfiibfg", model.blobNfs().target());
        Assertions.assertEquals("ioolvrwxkvtkkgll", model.blobNfs().usageModel());
        Assertions.assertEquals(342609300, model.blobNfs().verificationTimer());
        Assertions.assertEquals(423959041, model.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
