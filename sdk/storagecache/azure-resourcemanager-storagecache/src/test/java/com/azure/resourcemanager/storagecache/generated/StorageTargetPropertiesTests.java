// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetProperties;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetProperties model = BinaryData.fromString(
            "{\"junctions\":[{\"namespacePath\":\"qoaxoruzfgs\",\"targetPath\":\"yfxrx\",\"nfsExport\":\"eptra\",\"nfsAccessPolicy\":\"jezwlwnw\"},{\"namespacePath\":\"qlcvydy\",\"targetPath\":\"tdooaoj\",\"nfsExport\":\"iodkooebwnujhem\",\"nfsAccessPolicy\":\"bvdkcrodtjin\"},{\"namespacePath\":\"jlfltkacjvefkdlf\",\"targetPath\":\"kggkfpa\",\"nfsExport\":\"owpulpq\",\"nfsAccessPolicy\":\"ylsyxkqjnsje\"},{\"namespacePath\":\"tiagx\",\"targetPath\":\"sz\",\"nfsExport\":\"mpsbzkfzbeyv\",\"nfsAccessPolicy\":\"qi\"}],\"targetType\":\"clfs\",\"provisioningState\":\"Succeeded\",\"state\":\"Ready\",\"nfs3\":{\"target\":\"xdxr\",\"usageModel\":\"ukzclewyhmlwpaz\",\"verificationTimer\":1765730251,\"writeBackTimer\":437728645},\"clfs\":{\"target\":\"ckw\"},\"unknown\":{\"attributes\":{\"feqztppriol\":\"whxxbuyqax\",\"altol\":\"or\",\"wcsdbnwdcfhucq\":\"ncwsob\",\"vxb\":\"pfuvglsbjjca\"}},\"blobNfs\":{\"target\":\"udutnco\",\"usageModel\":\"r\",\"verificationTimer\":1360670450,\"writeBackTimer\":1954508595},\"allocationPercentage\":625929025}")
            .toObject(StorageTargetProperties.class);
        Assertions.assertEquals("qoaxoruzfgs", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("yfxrx", model.junctions().get(0).targetPath());
        Assertions.assertEquals("eptra", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("jezwlwnw", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.CLFS, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("xdxr", model.nfs3().target());
        Assertions.assertEquals("ukzclewyhmlwpaz", model.nfs3().usageModel());
        Assertions.assertEquals(1765730251, model.nfs3().verificationTimer());
        Assertions.assertEquals(437728645, model.nfs3().writeBackTimer());
        Assertions.assertEquals("ckw", model.clfs().target());
        Assertions.assertEquals("whxxbuyqax", model.unknown().attributes().get("feqztppriol"));
        Assertions.assertEquals("udutnco", model.blobNfs().target());
        Assertions.assertEquals("r", model.blobNfs().usageModel());
        Assertions.assertEquals(1360670450, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1954508595, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetProperties model = new StorageTargetProperties()
            .withJunctions(Arrays.asList(
                new NamespaceJunction().withNamespacePath("qoaxoruzfgs").withTargetPath("yfxrx").withNfsExport("eptra")
                    .withNfsAccessPolicy("jezwlwnw"),
                new NamespaceJunction().withNamespacePath("qlcvydy").withTargetPath("tdooaoj")
                    .withNfsExport("iodkooebwnujhem").withNfsAccessPolicy("bvdkcrodtjin"),
                new NamespaceJunction().withNamespacePath("jlfltkacjvefkdlf").withTargetPath("kggkfpa")
                    .withNfsExport("owpulpq").withNfsAccessPolicy("ylsyxkqjnsje"),
                new NamespaceJunction().withNamespacePath("tiagx").withTargetPath("sz").withNfsExport("mpsbzkfzbeyv")
                    .withNfsAccessPolicy("qi")))
            .withTargetType(StorageTargetType.CLFS).withState(OperationalStateType.READY)
            .withNfs3(new Nfs3Target().withTarget("xdxr").withUsageModel("ukzclewyhmlwpaz")
                .withVerificationTimer(1765730251).withWriteBackTimer(437728645))
            .withClfs(new ClfsTarget().withTarget("ckw"))
            .withUnknown(new UnknownTarget().withAttributes(
                mapOf("feqztppriol", "whxxbuyqax", "altol", "or", "wcsdbnwdcfhucq", "ncwsob", "vxb", "pfuvglsbjjca")))
            .withBlobNfs(new BlobNfsTarget().withTarget("udutnco").withUsageModel("r").withVerificationTimer(1360670450)
                .withWriteBackTimer(1954508595));
        model = BinaryData.fromObject(model).toObject(StorageTargetProperties.class);
        Assertions.assertEquals("qoaxoruzfgs", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("yfxrx", model.junctions().get(0).targetPath());
        Assertions.assertEquals("eptra", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("jezwlwnw", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.CLFS, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("xdxr", model.nfs3().target());
        Assertions.assertEquals("ukzclewyhmlwpaz", model.nfs3().usageModel());
        Assertions.assertEquals(1765730251, model.nfs3().verificationTimer());
        Assertions.assertEquals(437728645, model.nfs3().writeBackTimer());
        Assertions.assertEquals("ckw", model.clfs().target());
        Assertions.assertEquals("whxxbuyqax", model.unknown().attributes().get("feqztppriol"));
        Assertions.assertEquals("udutnco", model.blobNfs().target());
        Assertions.assertEquals("r", model.blobNfs().usageModel());
        Assertions.assertEquals(1360670450, model.blobNfs().verificationTimer());
        Assertions.assertEquals(1954508595, model.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
