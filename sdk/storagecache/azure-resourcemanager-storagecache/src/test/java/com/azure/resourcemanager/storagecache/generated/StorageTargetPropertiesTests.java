// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetProperties;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetProperties model = BinaryData.fromString(
            "{\"junctions\":[{\"namespacePath\":\"tfih\",\"targetPath\":\"botzingamvppho\",\"nfsExport\":\"qzudphq\",\"nfsAccessPolicy\":\"vdkfwynwcvtbvk\"},{\"namespacePath\":\"hmtnvy\",\"targetPath\":\"atkzwpcnpw\",\"nfsExport\":\"jaesgvvsccya\",\"nfsAccessPolicy\":\"uq\"}],\"targetType\":\"nfs3\",\"provisioningState\":\"Succeeded\",\"state\":\"Flushing\",\"nfs3\":{\"target\":\"dnkfx\",\"usageModel\":\"emdwzrmuhapfc\",\"verificationTimer\":1106936227,\"writeBackTimer\":1335767849},\"clfs\":{\"target\":\"vpsvuoymgcce\"},\"unknown\":{\"attributes\":{\"erqwkyhkobopg\":\"rypqlmfeo\",\"wccsnjvcdwxlpqek\":\"edkowepbqpcrfk\",\"htjsying\":\"tn\",\"tmtdhtmdvypgik\":\"fq\"}},\"blobNfs\":{\"target\":\"zywkb\",\"usageModel\":\"ryuzh\",\"verificationTimer\":524454595,\"writeBackTimer\":904307607},\"allocationPercentage\":1964093020}")
            .toObject(StorageTargetProperties.class);
        Assertions.assertEquals("tfih", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("botzingamvppho", model.junctions().get(0).targetPath());
        Assertions.assertEquals("qzudphq", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("dnkfx", model.nfs3().target());
        Assertions.assertEquals("emdwzrmuhapfc", model.nfs3().usageModel());
        Assertions.assertEquals(1106936227, model.nfs3().verificationTimer());
        Assertions.assertEquals(1335767849, model.nfs3().writeBackTimer());
        Assertions.assertEquals("vpsvuoymgcce", model.clfs().target());
        Assertions.assertEquals("rypqlmfeo", model.unknown().attributes().get("erqwkyhkobopg"));
        Assertions.assertEquals("zywkb", model.blobNfs().target());
        Assertions.assertEquals("ryuzh", model.blobNfs().usageModel());
        Assertions.assertEquals(524454595, model.blobNfs().verificationTimer());
        Assertions.assertEquals(904307607, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetProperties model = new StorageTargetProperties()
            .withJunctions(Arrays.asList(
                new NamespaceJunction().withNamespacePath("tfih")
                    .withTargetPath("botzingamvppho")
                    .withNfsExport("qzudphq")
                    .withNfsAccessPolicy("vdkfwynwcvtbvk"),
                new NamespaceJunction().withNamespacePath("hmtnvy")
                    .withTargetPath("atkzwpcnpw")
                    .withNfsExport("jaesgvvsccya")
                    .withNfsAccessPolicy("uq")))
            .withTargetType(StorageTargetType.NFS3)
            .withState(OperationalStateType.FLUSHING)
            .withNfs3(new Nfs3Target().withTarget("dnkfx")
                .withUsageModel("emdwzrmuhapfc")
                .withVerificationTimer(1106936227)
                .withWriteBackTimer(1335767849))
            .withClfs(new ClfsTarget().withTarget("vpsvuoymgcce"))
            .withUnknown(new UnknownTarget().withAttributes(mapOf("erqwkyhkobopg", "rypqlmfeo", "wccsnjvcdwxlpqek",
                "edkowepbqpcrfk", "htjsying", "tn", "tmtdhtmdvypgik", "fq")))
            .withBlobNfs(new BlobNfsTarget().withTarget("zywkb")
                .withUsageModel("ryuzh")
                .withVerificationTimer(524454595)
                .withWriteBackTimer(904307607));
        model = BinaryData.fromObject(model).toObject(StorageTargetProperties.class);
        Assertions.assertEquals("tfih", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("botzingamvppho", model.junctions().get(0).targetPath());
        Assertions.assertEquals("qzudphq", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.NFS3, model.targetType());
        Assertions.assertEquals(OperationalStateType.FLUSHING, model.state());
        Assertions.assertEquals("dnkfx", model.nfs3().target());
        Assertions.assertEquals("emdwzrmuhapfc", model.nfs3().usageModel());
        Assertions.assertEquals(1106936227, model.nfs3().verificationTimer());
        Assertions.assertEquals(1335767849, model.nfs3().writeBackTimer());
        Assertions.assertEquals("vpsvuoymgcce", model.clfs().target());
        Assertions.assertEquals("rypqlmfeo", model.unknown().attributes().get("erqwkyhkobopg"));
        Assertions.assertEquals("zywkb", model.blobNfs().target());
        Assertions.assertEquals("ryuzh", model.blobNfs().usageModel());
        Assertions.assertEquals(524454595, model.blobNfs().verificationTimer());
        Assertions.assertEquals(904307607, model.blobNfs().writeBackTimer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
