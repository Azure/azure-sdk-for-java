// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagecache.fluent.models.StorageTargetProperties;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTargetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTargetProperties model =
            BinaryData
                .fromString(
                    "{\"junctions\":[{\"namespacePath\":\"iebwwaloayqcgwrt\",\"targetPath\":\"uzgwyzmhtx\",\"nfsExport\":\"gmtsavjcbpwxqpsr\",\"nfsAccessPolicy\":\"ftguv\"},{\"namespacePath\":\"uhprwmdyvxqt\",\"targetPath\":\"riwwroy\",\"nfsExport\":\"exrmcqibycnojvk\",\"nfsAccessPolicy\":\"e\"}],\"targetType\":\"unknown\",\"provisioningState\":\"Cancelled\",\"state\":\"Ready\",\"nfs3\":{\"target\":\"apj\",\"usageModel\":\"hpvgqz\",\"verificationTimer\":256612038,\"writeBackTimer\":391970506},\"clfs\":{\"target\":\"zlmwlxkvugfhz\"},\"unknown\":{\"attributes\":{\"nxipeil\":\"jvzunluthnnp\",\"dzumveekg\":\"jzuaejxdultskzbb\",\"bsjyofdx\":\"wozuhkf\"}},\"blobNfs\":{\"target\":\"sd\",\"usageModel\":\"ouwaboekqvkeln\",\"verificationTimer\":566883460,\"writeBackTimer\":314739755},\"allocationPercentage\":1393240700}")
                .toObject(StorageTargetProperties.class);
        Assertions.assertEquals("iebwwaloayqcgwrt", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("uzgwyzmhtx", model.junctions().get(0).targetPath());
        Assertions.assertEquals("gmtsavjcbpwxqpsr", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ftguv", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.UNKNOWN, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("apj", model.nfs3().target());
        Assertions.assertEquals("hpvgqz", model.nfs3().usageModel());
        Assertions.assertEquals(256612038, model.nfs3().verificationTimer());
        Assertions.assertEquals(391970506, model.nfs3().writeBackTimer());
        Assertions.assertEquals("zlmwlxkvugfhz", model.clfs().target());
        Assertions.assertEquals("jvzunluthnnp", model.unknown().attributes().get("nxipeil"));
        Assertions.assertEquals("sd", model.blobNfs().target());
        Assertions.assertEquals("ouwaboekqvkeln", model.blobNfs().usageModel());
        Assertions.assertEquals(566883460, model.blobNfs().verificationTimer());
        Assertions.assertEquals(314739755, model.blobNfs().writeBackTimer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTargetProperties model =
            new StorageTargetProperties()
                .withJunctions(
                    Arrays
                        .asList(
                            new NamespaceJunction()
                                .withNamespacePath("iebwwaloayqcgwrt")
                                .withTargetPath("uzgwyzmhtx")
                                .withNfsExport("gmtsavjcbpwxqpsr")
                                .withNfsAccessPolicy("ftguv"),
                            new NamespaceJunction()
                                .withNamespacePath("uhprwmdyvxqt")
                                .withTargetPath("riwwroy")
                                .withNfsExport("exrmcqibycnojvk")
                                .withNfsAccessPolicy("e")))
                .withTargetType(StorageTargetType.UNKNOWN)
                .withState(OperationalStateType.READY)
                .withNfs3(
                    new Nfs3Target()
                        .withTarget("apj")
                        .withUsageModel("hpvgqz")
                        .withVerificationTimer(256612038)
                        .withWriteBackTimer(391970506))
                .withClfs(new ClfsTarget().withTarget("zlmwlxkvugfhz"))
                .withUnknown(
                    new UnknownTarget()
                        .withAttributes(
                            mapOf("nxipeil", "jvzunluthnnp", "dzumveekg", "jzuaejxdultskzbb", "bsjyofdx", "wozuhkf")))
                .withBlobNfs(
                    new BlobNfsTarget()
                        .withTarget("sd")
                        .withUsageModel("ouwaboekqvkeln")
                        .withVerificationTimer(566883460)
                        .withWriteBackTimer(314739755));
        model = BinaryData.fromObject(model).toObject(StorageTargetProperties.class);
        Assertions.assertEquals("iebwwaloayqcgwrt", model.junctions().get(0).namespacePath());
        Assertions.assertEquals("uzgwyzmhtx", model.junctions().get(0).targetPath());
        Assertions.assertEquals("gmtsavjcbpwxqpsr", model.junctions().get(0).nfsExport());
        Assertions.assertEquals("ftguv", model.junctions().get(0).nfsAccessPolicy());
        Assertions.assertEquals(StorageTargetType.UNKNOWN, model.targetType());
        Assertions.assertEquals(OperationalStateType.READY, model.state());
        Assertions.assertEquals("apj", model.nfs3().target());
        Assertions.assertEquals("hpvgqz", model.nfs3().usageModel());
        Assertions.assertEquals(256612038, model.nfs3().verificationTimer());
        Assertions.assertEquals(391970506, model.nfs3().writeBackTimer());
        Assertions.assertEquals("zlmwlxkvugfhz", model.clfs().target());
        Assertions.assertEquals("jvzunluthnnp", model.unknown().attributes().get("nxipeil"));
        Assertions.assertEquals("sd", model.blobNfs().target());
        Assertions.assertEquals("ouwaboekqvkeln", model.blobNfs().usageModel());
        Assertions.assertEquals(566883460, model.blobNfs().verificationTimer());
        Assertions.assertEquals(314739755, model.blobNfs().writeBackTimer());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
