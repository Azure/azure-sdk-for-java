// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties pertaining to the Nfs3Target. */
@Fluent
public final class Nfs3Target {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(Nfs3Target.class);

    /*
     * IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
     */
    @JsonProperty(value = "target")
    private String target;

    /*
     * Identifies the StorageCache usage model to be used for this storage
     * target.
     */
    @JsonProperty(value = "usageModel")
    private String usageModel;

    /**
     * Get the target property: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
     *
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
     *
     * @param target the target value to set.
     * @return the Nfs3Target object itself.
     */
    public Nfs3Target withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Get the usageModel property: Identifies the StorageCache usage model to be used for this storage target.
     *
     * @return the usageModel value.
     */
    public String usageModel() {
        return this.usageModel;
    }

    /**
     * Set the usageModel property: Identifies the StorageCache usage model to be used for this storage target.
     *
     * @param usageModel the usageModel value to set.
     * @return the Nfs3Target object itself.
     */
    public Nfs3Target withUsageModel(String usageModel) {
        this.usageModel = usageModel;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
