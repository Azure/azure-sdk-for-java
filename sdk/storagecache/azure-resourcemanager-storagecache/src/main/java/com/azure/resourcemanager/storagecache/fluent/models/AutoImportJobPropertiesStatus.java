// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesStatusBlobSyncEvents;
import com.azure.resourcemanager.storagecache.models.AutoImportJobState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The status of the auto import job.
 */
@Immutable
public final class AutoImportJobPropertiesStatus implements JsonSerializable<AutoImportJobPropertiesStatus> {
    /*
     * The state of the auto import operation.
     */
    private AutoImportJobState state;

    /*
     * Server-defined status code for auto import job.
     */
    private String statusCode;

    /*
     * Server-defined status message for auto import job.
     */
    private String statusMessage;

    /*
     * Date and time of when the currently running full scan began.
     */
    private OffsetDateTime scanStartTime;

    /*
     * Date and time of when the full scan ended.
     */
    private OffsetDateTime scanEndTime;

    /*
     * Total number of blobs walked during full scan.
     */
    private Long totalBlobsWalked;

    /*
     * Rate of blobs walked during full scan.
     */
    private Long rateOfBlobWalk;

    /*
     * Total number of blobs imported during full scan.
     */
    private Long totalBlobsImported;

    /*
     * Rate of blob import during full scan.
     */
    private Long rateOfBlobImport;

    /*
     * Number of files imported during full scan.
     */
    private Long importedFiles;

    /*
     * Number of directories imported during full scan.
     */
    private Long importedDirectories;

    /*
     * Number of symlinks imported during full scan.
     */
    private Long importedSymlinks;

    /*
     * Number of preexisting files during full scan.
     */
    private Long preexistingFiles;

    /*
     * Number of preexisting directories during full scan.
     */
    private Long preexistingDirectories;

    /*
     * Number of preexisting symlinks during full scan.
     */
    private Long preexistingSymlinks;

    /*
     * Total errors encountered during full scan.
     */
    private Long totalErrors;

    /*
     * Total conflicts encountered during full scan.
     */
    private Long totalConflicts;

    /*
     * The storage account blob change feed status of the auto import job.
     */
    private AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents;

    /*
     * The time (in UTC) the latest auto import job started.
     */
    private OffsetDateTime lastStartedTimeUtc;

    /*
     * The time (in UTC) of the last completed auto import job.
     */
    private OffsetDateTime lastCompletionTimeUtc;

    /**
     * Creates an instance of AutoImportJobPropertiesStatus class.
     */
    public AutoImportJobPropertiesStatus() {
    }

    /**
     * Get the state property: The state of the auto import operation.
     * 
     * @return the state value.
     */
    public AutoImportJobState state() {
        return this.state;
    }

    /**
     * Get the statusCode property: Server-defined status code for auto import job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto import job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the scanStartTime property: Date and time of when the currently running full scan began.
     * 
     * @return the scanStartTime value.
     */
    public OffsetDateTime scanStartTime() {
        return this.scanStartTime;
    }

    /**
     * Get the scanEndTime property: Date and time of when the full scan ended.
     * 
     * @return the scanEndTime value.
     */
    public OffsetDateTime scanEndTime() {
        return this.scanEndTime;
    }

    /**
     * Get the totalBlobsWalked property: Total number of blobs walked during full scan.
     * 
     * @return the totalBlobsWalked value.
     */
    public Long totalBlobsWalked() {
        return this.totalBlobsWalked;
    }

    /**
     * Get the rateOfBlobWalk property: Rate of blobs walked during full scan.
     * 
     * @return the rateOfBlobWalk value.
     */
    public Long rateOfBlobWalk() {
        return this.rateOfBlobWalk;
    }

    /**
     * Get the totalBlobsImported property: Total number of blobs imported during full scan.
     * 
     * @return the totalBlobsImported value.
     */
    public Long totalBlobsImported() {
        return this.totalBlobsImported;
    }

    /**
     * Get the rateOfBlobImport property: Rate of blob import during full scan.
     * 
     * @return the rateOfBlobImport value.
     */
    public Long rateOfBlobImport() {
        return this.rateOfBlobImport;
    }

    /**
     * Get the importedFiles property: Number of files imported during full scan.
     * 
     * @return the importedFiles value.
     */
    public Long importedFiles() {
        return this.importedFiles;
    }

    /**
     * Get the importedDirectories property: Number of directories imported during full scan.
     * 
     * @return the importedDirectories value.
     */
    public Long importedDirectories() {
        return this.importedDirectories;
    }

    /**
     * Get the importedSymlinks property: Number of symlinks imported during full scan.
     * 
     * @return the importedSymlinks value.
     */
    public Long importedSymlinks() {
        return this.importedSymlinks;
    }

    /**
     * Get the preexistingFiles property: Number of preexisting files during full scan.
     * 
     * @return the preexistingFiles value.
     */
    public Long preexistingFiles() {
        return this.preexistingFiles;
    }

    /**
     * Get the preexistingDirectories property: Number of preexisting directories during full scan.
     * 
     * @return the preexistingDirectories value.
     */
    public Long preexistingDirectories() {
        return this.preexistingDirectories;
    }

    /**
     * Get the preexistingSymlinks property: Number of preexisting symlinks during full scan.
     * 
     * @return the preexistingSymlinks value.
     */
    public Long preexistingSymlinks() {
        return this.preexistingSymlinks;
    }

    /**
     * Get the totalErrors property: Total errors encountered during full scan.
     * 
     * @return the totalErrors value.
     */
    public Long totalErrors() {
        return this.totalErrors;
    }

    /**
     * Get the totalConflicts property: Total conflicts encountered during full scan.
     * 
     * @return the totalConflicts value.
     */
    public Long totalConflicts() {
        return this.totalConflicts;
    }

    /**
     * Get the blobSyncEvents property: The storage account blob change feed status of the auto import job.
     * 
     * @return the blobSyncEvents value.
     */
    public AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents() {
        return this.blobSyncEvents;
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto import job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.lastStartedTimeUtc;
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto import job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.lastCompletionTimeUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (blobSyncEvents() != null) {
            blobSyncEvents().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoImportJobPropertiesStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoImportJobPropertiesStatus if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoImportJobPropertiesStatus.
     */
    public static AutoImportJobPropertiesStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoImportJobPropertiesStatus deserializedAutoImportJobPropertiesStatus
                = new AutoImportJobPropertiesStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.state = AutoImportJobState.fromString(reader.getString());
                } else if ("statusCode".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.statusCode = reader.getString();
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.statusMessage = reader.getString();
                } else if ("scanStartTime".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.scanStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("scanEndTime".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.scanEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalBlobsWalked".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.totalBlobsWalked
                        = reader.getNullable(JsonReader::getLong);
                } else if ("rateOfBlobWalk".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.rateOfBlobWalk = reader.getNullable(JsonReader::getLong);
                } else if ("totalBlobsImported".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.totalBlobsImported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("rateOfBlobImport".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.rateOfBlobImport
                        = reader.getNullable(JsonReader::getLong);
                } else if ("importedFiles".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.importedFiles = reader.getNullable(JsonReader::getLong);
                } else if ("importedDirectories".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.importedDirectories
                        = reader.getNullable(JsonReader::getLong);
                } else if ("importedSymlinks".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.importedSymlinks
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingFiles".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.preexistingFiles
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingDirectories".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.preexistingDirectories
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingSymlinks".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.preexistingSymlinks
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalErrors".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.totalErrors = reader.getNullable(JsonReader::getLong);
                } else if ("totalConflicts".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.totalConflicts = reader.getNullable(JsonReader::getLong);
                } else if ("blobSyncEvents".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.blobSyncEvents
                        = AutoImportJobPropertiesStatusBlobSyncEvents.fromJson(reader);
                } else if ("lastStartedTimeUTC".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.lastStartedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastCompletionTimeUTC".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatus.lastCompletionTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoImportJobPropertiesStatus;
        });
    }
}
