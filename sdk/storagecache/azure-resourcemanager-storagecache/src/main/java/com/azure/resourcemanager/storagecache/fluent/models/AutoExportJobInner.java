// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoExportJobAdminStatus;
import com.azure.resourcemanager.storagecache.models.AutoExportJobProvisioningStateType;
import com.azure.resourcemanager.storagecache.models.AutoExportStatusType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An auto export job instance. Follows Azure Resource Manager standards:
 * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md.
 */
@Fluent
public final class AutoExportJobInner extends Resource {
    /*
     * Properties of the auto export job.
     */
    private AutoExportJobProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AutoExportJobInner class.
     */
    public AutoExportJobInner() {
    }

    /**
     * Get the innerProperties property: Properties of the auto export job.
     * 
     * @return the innerProperties value.
     */
    private AutoExportJobProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutoExportJobInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutoExportJobInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: ARM provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AutoExportJobProvisioningStateType provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the adminStatus property: The administrative status of the auto export job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto export job. By default it is set
     * to 'Enable'.
     * 
     * @return the adminStatus value.
     */
    public AutoExportJobAdminStatus adminStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().adminStatus();
    }

    /**
     * Set the adminStatus property: The administrative status of the auto export job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto export job. By default it is set
     * to 'Enable'.
     * 
     * @param adminStatus the adminStatus value to set.
     * @return the AutoExportJobInner object itself.
     */
    public AutoExportJobInner withAdminStatus(AutoExportJobAdminStatus adminStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoExportJobProperties();
        }
        this.innerProperties().withAdminStatus(adminStatus);
        return this;
    }

    /**
     * Get the autoExportPrefixes property: An array of blob paths/prefixes that get auto exported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths for now is 1.
     * 
     * @return the autoExportPrefixes value.
     */
    public List<String> autoExportPrefixes() {
        return this.innerProperties() == null ? null : this.innerProperties().autoExportPrefixes();
    }

    /**
     * Set the autoExportPrefixes property: An array of blob paths/prefixes that get auto exported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths for now is 1.
     * 
     * @param autoExportPrefixes the autoExportPrefixes value to set.
     * @return the AutoExportJobInner object itself.
     */
    public AutoExportJobInner withAutoExportPrefixes(List<String> autoExportPrefixes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoExportJobProperties();
        }
        this.innerProperties().withAutoExportPrefixes(autoExportPrefixes);
        return this;
    }

    /**
     * Get the state property: The operational state of auto export. InProgress indicates the export is running.
     * Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled
     * indicates auto export has been disabled. DisableFailed indicates the disabling has failed. Failed means the
     * export was unable to continue, due to a fatal error.
     * 
     * @return the state value.
     */
    public AutoExportStatusType state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the statusCode property: Server-defined status code for auto export job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.innerProperties() == null ? null : this.innerProperties().statusCode();
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto export job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessage();
    }

    /**
     * Get the totalFilesExported property: Total files exported since the start of the export. This is accumulative,
     * some files may be counted repeatedly.
     * 
     * @return the totalFilesExported value.
     */
    public Long totalFilesExported() {
        return this.innerProperties() == null ? null : this.innerProperties().totalFilesExported();
    }

    /**
     * Get the totalMiBExported property: Total data (in MiB) exported since the start of the export. This is
     * accumulative, some files may be counted repeatedly.
     * 
     * @return the totalMiBExported value.
     */
    public Long totalMiBExported() {
        return this.innerProperties() == null ? null : this.innerProperties().totalMiBExported();
    }

    /**
     * Get the totalFilesFailed property: Total files failed to be export since the last successfully completed
     * iteration. This is accumulative, some files may be counted repeatedly.
     * 
     * @return the totalFilesFailed value.
     */
    public Long totalFilesFailed() {
        return this.innerProperties() == null ? null : this.innerProperties().totalFilesFailed();
    }

    /**
     * Get the exportIterationCount property: Number of iterations completed since the start of the export.
     * 
     * @return the exportIterationCount value.
     */
    public Integer exportIterationCount() {
        return this.innerProperties() == null ? null : this.innerProperties().exportIterationCount();
    }

    /**
     * Get the lastSuccessfulIterationCompletionTimeUtc property: Time (in UTC) of the last successfully completed
     * export iteration. Look at logging container for details.
     * 
     * @return the lastSuccessfulIterationCompletionTimeUtc value.
     */
    public OffsetDateTime lastSuccessfulIterationCompletionTimeUtc() {
        return this.innerProperties() == null
            ? null
            : this.innerProperties().lastSuccessfulIterationCompletionTimeUtc();
    }

    /**
     * Get the currentIterationFilesDiscovered property: Files discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationFilesDiscovered value.
     */
    public Long currentIterationFilesDiscovered() {
        return this.innerProperties() == null ? null : this.innerProperties().currentIterationFilesDiscovered();
    }

    /**
     * Get the currentIterationMiBDiscovered property: Data (in MiB) discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationMiBDiscovered value.
     */
    public Long currentIterationMiBDiscovered() {
        return this.innerProperties() == null ? null : this.innerProperties().currentIterationMiBDiscovered();
    }

    /**
     * Get the currentIterationFilesExported property: Files that have been exported in current iteration.
     * 
     * @return the currentIterationFilesExported value.
     */
    public Long currentIterationFilesExported() {
        return this.innerProperties() == null ? null : this.innerProperties().currentIterationFilesExported();
    }

    /**
     * Get the currentIterationMiBExported property: Data (in MiB) that have been exported in current iteration.
     * 
     * @return the currentIterationMiBExported value.
     */
    public Long currentIterationMiBExported() {
        return this.innerProperties() == null ? null : this.innerProperties().currentIterationMiBExported();
    }

    /**
     * Get the currentIterationFilesFailed property: Files failed to export in current iteration.
     * 
     * @return the currentIterationFilesFailed value.
     */
    public Long currentIterationFilesFailed() {
        return this.innerProperties() == null ? null : this.innerProperties().currentIterationFilesFailed();
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto export job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastStartedTimeUtc();
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto export job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastCompletionTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoExportJobInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoExportJobInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutoExportJobInner.
     */
    public static AutoExportJobInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoExportJobInner deserializedAutoExportJobInner = new AutoExportJobInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAutoExportJobInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAutoExportJobInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAutoExportJobInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAutoExportJobInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAutoExportJobInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAutoExportJobInner.innerProperties = AutoExportJobProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAutoExportJobInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoExportJobInner;
        });
    }
}
