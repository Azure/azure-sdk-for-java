// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * When present, these are the credentials for the secure LDAP connection.
 */
@Fluent
public final class CacheUsernameDownloadSettingsCredentials
    implements JsonSerializable<CacheUsernameDownloadSettingsCredentials> {
    /*
     * The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and
     * not returned on response.
     */
    private String bindDn;

    /*
     * The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on
     * response.
     */
    private String bindPassword;

    /**
     * Creates an instance of CacheUsernameDownloadSettingsCredentials class.
     */
    public CacheUsernameDownloadSettingsCredentials() {
    }

    /**
     * Get the bindDn property: The Bind Distinguished Name identity to be used in the secure LDAP connection. This
     * value is stored encrypted and not returned on response.
     * 
     * @return the bindDn value.
     */
    public String bindDn() {
        return this.bindDn;
    }

    /**
     * Set the bindDn property: The Bind Distinguished Name identity to be used in the secure LDAP connection. This
     * value is stored encrypted and not returned on response.
     * 
     * @param bindDn the bindDn value to set.
     * @return the CacheUsernameDownloadSettingsCredentials object itself.
     */
    public CacheUsernameDownloadSettingsCredentials withBindDn(String bindDn) {
        this.bindDn = bindDn;
        return this;
    }

    /**
     * Get the bindPassword property: The Bind password to be used in the secure LDAP connection. This value is stored
     * encrypted and not returned on response.
     * 
     * @return the bindPassword value.
     */
    public String bindPassword() {
        return this.bindPassword;
    }

    /**
     * Set the bindPassword property: The Bind password to be used in the secure LDAP connection. This value is stored
     * encrypted and not returned on response.
     * 
     * @param bindPassword the bindPassword value to set.
     * @return the CacheUsernameDownloadSettingsCredentials object itself.
     */
    public CacheUsernameDownloadSettingsCredentials withBindPassword(String bindPassword) {
        this.bindPassword = bindPassword;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bindDn", this.bindDn);
        jsonWriter.writeStringField("bindPassword", this.bindPassword);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheUsernameDownloadSettingsCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheUsernameDownloadSettingsCredentials if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheUsernameDownloadSettingsCredentials.
     */
    public static CacheUsernameDownloadSettingsCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheUsernameDownloadSettingsCredentials deserializedCacheUsernameDownloadSettingsCredentials
                = new CacheUsernameDownloadSettingsCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bindDn".equals(fieldName)) {
                    deserializedCacheUsernameDownloadSettingsCredentials.bindDn = reader.getString();
                } else if ("bindPassword".equals(fieldName)) {
                    deserializedCacheUsernameDownloadSettingsCredentials.bindPassword = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheUsernameDownloadSettingsCredentials;
        });
    }
}
