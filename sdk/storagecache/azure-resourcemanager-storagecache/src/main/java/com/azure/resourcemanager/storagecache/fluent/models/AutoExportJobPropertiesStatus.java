// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoExportStatusType;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The status of the auto export.
 */
@Fluent
public final class AutoExportJobPropertiesStatus implements JsonSerializable<AutoExportJobPropertiesStatus> {
    /*
     * The operational state of auto export. InProgress indicates the export is running. Disabling indicates the user
     * has requested to disable the export but the disabling is still in progress. Disabled indicates auto export has
     * been disabled. DisableFailed indicates the disabling has failed. Failed means the export was unable to continue,
     * due to a fatal error.
     */
    private AutoExportStatusType state;

    /*
     * Server-defined status code for auto export job.
     */
    private String statusCode;

    /*
     * Server-defined status message for auto export job.
     */
    private String statusMessage;

    /*
     * Total files exported since the start of the export. This is accumulative, some files may be counted repeatedly.
     */
    private Long totalFilesExported;

    /*
     * Total data (in MiB) exported since the start of the export. This is accumulative, some files may be counted
     * repeatedly.
     */
    private Long totalMiBExported;

    /*
     * Total files failed to be export since the last successfully completed iteration. This is accumulative, some files
     * may be counted repeatedly.
     */
    private Long totalFilesFailed;

    /*
     * Number of iterations completed since the start of the export.
     */
    private Integer exportIterationCount;

    /*
     * Time (in UTC) of the last successfully completed export iteration. Look at logging container for details.
     */
    private OffsetDateTime lastSuccessfulIterationCompletionTimeUtc;

    /*
     * Files discovered for export in current iteration. It may increase while more export items are found.
     */
    private Long currentIterationFilesDiscovered;

    /*
     * Data (in MiB) discovered for export in current iteration. It may increase while more export items are found.
     */
    private Long currentIterationMiBDiscovered;

    /*
     * Files that have been exported in current iteration.
     */
    private Long currentIterationFilesExported;

    /*
     * Data (in MiB) that have been exported in current iteration.
     */
    private Long currentIterationMiBExported;

    /*
     * Files failed to export in current iteration.
     */
    private Long currentIterationFilesFailed;

    /*
     * The time (in UTC) the latest auto export job started.
     */
    private OffsetDateTime lastStartedTimeUtc;

    /*
     * The time (in UTC) of the last completed auto export job.
     */
    private OffsetDateTime lastCompletionTimeUtc;

    /**
     * Creates an instance of AutoExportJobPropertiesStatus class.
     */
    public AutoExportJobPropertiesStatus() {
    }

    /**
     * Get the state property: The operational state of auto export. InProgress indicates the export is running.
     * Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled
     * indicates auto export has been disabled. DisableFailed indicates the disabling has failed. Failed means the
     * export was unable to continue, due to a fatal error.
     * 
     * @return the state value.
     */
    public AutoExportStatusType state() {
        return this.state;
    }

    /**
     * Set the state property: The operational state of auto export. InProgress indicates the export is running.
     * Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled
     * indicates auto export has been disabled. DisableFailed indicates the disabling has failed. Failed means the
     * export was unable to continue, due to a fatal error.
     * 
     * @param state the state value to set.
     * @return the AutoExportJobPropertiesStatus object itself.
     */
    public AutoExportJobPropertiesStatus withState(AutoExportStatusType state) {
        this.state = state;
        return this;
    }

    /**
     * Get the statusCode property: Server-defined status code for auto export job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto export job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the totalFilesExported property: Total files exported since the start of the export. This is accumulative,
     * some files may be counted repeatedly.
     * 
     * @return the totalFilesExported value.
     */
    public Long totalFilesExported() {
        return this.totalFilesExported;
    }

    /**
     * Get the totalMiBExported property: Total data (in MiB) exported since the start of the export. This is
     * accumulative, some files may be counted repeatedly.
     * 
     * @return the totalMiBExported value.
     */
    public Long totalMiBExported() {
        return this.totalMiBExported;
    }

    /**
     * Get the totalFilesFailed property: Total files failed to be export since the last successfully completed
     * iteration. This is accumulative, some files may be counted repeatedly.
     * 
     * @return the totalFilesFailed value.
     */
    public Long totalFilesFailed() {
        return this.totalFilesFailed;
    }

    /**
     * Get the exportIterationCount property: Number of iterations completed since the start of the export.
     * 
     * @return the exportIterationCount value.
     */
    public Integer exportIterationCount() {
        return this.exportIterationCount;
    }

    /**
     * Get the lastSuccessfulIterationCompletionTimeUtc property: Time (in UTC) of the last successfully completed
     * export iteration. Look at logging container for details.
     * 
     * @return the lastSuccessfulIterationCompletionTimeUtc value.
     */
    public OffsetDateTime lastSuccessfulIterationCompletionTimeUtc() {
        return this.lastSuccessfulIterationCompletionTimeUtc;
    }

    /**
     * Get the currentIterationFilesDiscovered property: Files discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationFilesDiscovered value.
     */
    public Long currentIterationFilesDiscovered() {
        return this.currentIterationFilesDiscovered;
    }

    /**
     * Get the currentIterationMiBDiscovered property: Data (in MiB) discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationMiBDiscovered value.
     */
    public Long currentIterationMiBDiscovered() {
        return this.currentIterationMiBDiscovered;
    }

    /**
     * Get the currentIterationFilesExported property: Files that have been exported in current iteration.
     * 
     * @return the currentIterationFilesExported value.
     */
    public Long currentIterationFilesExported() {
        return this.currentIterationFilesExported;
    }

    /**
     * Get the currentIterationMiBExported property: Data (in MiB) that have been exported in current iteration.
     * 
     * @return the currentIterationMiBExported value.
     */
    public Long currentIterationMiBExported() {
        return this.currentIterationMiBExported;
    }

    /**
     * Get the currentIterationFilesFailed property: Files failed to export in current iteration.
     * 
     * @return the currentIterationFilesFailed value.
     */
    public Long currentIterationFilesFailed() {
        return this.currentIterationFilesFailed;
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto export job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.lastStartedTimeUtc;
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto export job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.lastCompletionTimeUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoExportJobPropertiesStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoExportJobPropertiesStatus if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoExportJobPropertiesStatus.
     */
    public static AutoExportJobPropertiesStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoExportJobPropertiesStatus deserializedAutoExportJobPropertiesStatus
                = new AutoExportJobPropertiesStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.state
                        = AutoExportStatusType.fromString(reader.getString());
                } else if ("statusCode".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.statusCode = reader.getString();
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.statusMessage = reader.getString();
                } else if ("totalFilesExported".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.totalFilesExported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalMiBExported".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.totalMiBExported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalFilesFailed".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.totalFilesFailed
                        = reader.getNullable(JsonReader::getLong);
                } else if ("exportIterationCount".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.exportIterationCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("lastSuccessfulIterationCompletionTimeUTC".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.lastSuccessfulIterationCompletionTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("currentIterationFilesDiscovered".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.currentIterationFilesDiscovered
                        = reader.getNullable(JsonReader::getLong);
                } else if ("currentIterationMiBDiscovered".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.currentIterationMiBDiscovered
                        = reader.getNullable(JsonReader::getLong);
                } else if ("currentIterationFilesExported".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.currentIterationFilesExported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("currentIterationMiBExported".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.currentIterationMiBExported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("currentIterationFilesFailed".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.currentIterationFilesFailed
                        = reader.getNullable(JsonReader::getLong);
                } else if ("lastStartedTimeUTC".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.lastStartedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastCompletionTimeUTC".equals(fieldName)) {
                    deserializedAutoExportJobPropertiesStatus.lastCompletionTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoExportJobPropertiesStatus;
        });
    }
}
