// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.storagecache.fluent.AutoExportJobsClient;
import com.azure.resourcemanager.storagecache.fluent.models.AutoExportJobInner;
import com.azure.resourcemanager.storagecache.models.AutoExportJobUpdate;
import com.azure.resourcemanager.storagecache.models.AutoExportJobsListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AutoExportJobsClient.
 */
public final class AutoExportJobsClientImpl implements AutoExportJobsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AutoExportJobsService service;

    /**
     * The service client containing this operation class.
     */
    private final StorageCacheManagementClientImpl client;

    /**
     * Initializes an instance of AutoExportJobsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AutoExportJobsClientImpl(StorageCacheManagementClientImpl client) {
        this.service
            = RestProxy.create(AutoExportJobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for StorageCacheManagementClientAutoExportJobs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "StorageCacheManagementClientAutoExportJobs")
    public interface AutoExportJobsService {
        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("amlFilesystemName") String amlFilesystemName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("autoExportJobName") String autoExportJobName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("amlFilesystemName") String amlFilesystemName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("autoExportJobName") String autoExportJobName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AutoExportJobInner>> get(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("amlFilesystemName") String amlFilesystemName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("autoExportJobName") String autoExportJobName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AutoExportJobInner> getSync(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("amlFilesystemName") String amlFilesystemName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("autoExportJobName") String autoExportJobName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName,
            @PathParam("autoExportJobName") String autoExportJobName,
            @BodyParam("application/json") AutoExportJobInner autoExportJob, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName,
            @PathParam("autoExportJobName") String autoExportJobName,
            @BodyParam("application/json") AutoExportJobInner autoExportJob, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName,
            @PathParam("autoExportJobName") String autoExportJobName,
            @BodyParam("application/json") AutoExportJobUpdate autoExportJob, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName,
            @PathParam("autoExportJobName") String autoExportJobName,
            @BodyParam("application/json") AutoExportJobUpdate autoExportJob, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AutoExportJobsListResult>> listByAmlFilesystem(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AutoExportJobsListResult> listByAmlFilesystemSync(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("amlFilesystemName") String amlFilesystemName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AutoExportJobsListResult>> listByAmlFilesystemNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AutoExportJobsListResult> listByAmlFilesystemNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName, amlFilesystemName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), autoExportJobName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), resourceGroupName, amlFilesystemName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), autoExportJobName, accept, Context.NONE);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), resourceGroupName, amlFilesystemName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), autoExportJobName, accept, context);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, amlFilesystemName, autoExportJobName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String amlFilesystemName, String autoExportJobName) {
        return beginDeleteAsync(resourceGroupName, amlFilesystemName, autoExportJobName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String amlFilesystemName, String autoExportJobName) {
        beginDelete(resourceGroupName, amlFilesystemName, autoExportJobName).getFinalResult();
    }

    /**
     * Schedules an auto export job for deletion.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String amlFilesystemName, String autoExportJobName, Context context) {
        beginDelete(resourceGroupName, amlFilesystemName, autoExportJobName, context).getFinalResult();
    }

    /**
     * Returns an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AutoExportJobInner>> getWithResponseAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), resourceGroupName, amlFilesystemName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), autoExportJobName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AutoExportJobInner> getAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName) {
        return getWithResponseAsync(resourceGroupName, amlFilesystemName, autoExportJobName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AutoExportJobInner> getWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), resourceGroupName, amlFilesystemName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), autoExportJobName, accept, context);
    }

    /**
     * Returns an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoExportJobInner get(String resourceGroupName, String amlFilesystemName, String autoExportJobName) {
        return getWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, Context.NONE).getValue();
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobInner autoExportJob) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            return Mono.error(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName,
                autoExportJob, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobInner autoExportJob) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName, autoExportJob, accept, Context.NONE);
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobInner autoExportJob, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName, autoExportJob, accept, context);
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AutoExportJobInner>, AutoExportJobInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String amlFilesystemName, String autoExportJobName,
        AutoExportJobInner autoExportJob) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(mono, this.client.getHttpPipeline(),
            AutoExportJobInner.class, AutoExportJobInner.class, this.client.getContext());
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AutoExportJobInner>, AutoExportJobInner> beginCreateOrUpdate(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobInner autoExportJob) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(response, AutoExportJobInner.class,
            AutoExportJobInner.class, Context.NONE);
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AutoExportJobInner>, AutoExportJobInner> beginCreateOrUpdate(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobInner autoExportJob, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, amlFilesystemName,
            autoExportJobName, autoExportJob, context);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(response, AutoExportJobInner.class,
            AutoExportJobInner.class, context);
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AutoExportJobInner> createOrUpdateAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobInner autoExportJob) {
        return beginCreateOrUpdateAsync(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoExportJobInner createOrUpdate(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobInner autoExportJob) {
        return beginCreateOrUpdate(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob)
            .getFinalResult();
    }

    /**
     * Create or update an auto export job.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoExportJobInner createOrUpdate(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobInner autoExportJob, Context context) {
        return beginCreateOrUpdate(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob, context)
            .getFinalResult();
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobUpdate autoExportJob) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            return Mono.error(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), resourceGroupName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName,
                autoExportJob, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobUpdate autoExportJob) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName, autoExportJob, accept, Context.NONE);
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobUpdate autoExportJob, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        if (autoExportJobName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJobName is required and cannot be null."));
        }
        if (autoExportJob == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter autoExportJob is required and cannot be null."));
        } else {
            autoExportJob.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), amlFilesystemName, autoExportJobName, autoExportJob, accept, context);
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AutoExportJobInner>, AutoExportJobInner> beginUpdateAsync(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobUpdate autoExportJob) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(mono, this.client.getHttpPipeline(),
            AutoExportJobInner.class, AutoExportJobInner.class, this.client.getContext());
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AutoExportJobInner>, AutoExportJobInner> beginUpdate(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobUpdate autoExportJob) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(response, AutoExportJobInner.class,
            AutoExportJobInner.class, Context.NONE);
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AutoExportJobInner>, AutoExportJobInner> beginUpdate(String resourceGroupName,
        String amlFilesystemName, String autoExportJobName, AutoExportJobUpdate autoExportJob, Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob, context);
        return this.client.<AutoExportJobInner, AutoExportJobInner>getLroResult(response, AutoExportJobInner.class,
            AutoExportJobInner.class, context);
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AutoExportJobInner> updateAsync(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, AutoExportJobUpdate autoExportJob) {
        return beginUpdateAsync(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoExportJobInner update(String resourceGroupName, String amlFilesystemName, String autoExportJobName,
        AutoExportJobUpdate autoExportJob) {
        return beginUpdate(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob).getFinalResult();
    }

    /**
     * Update an auto export job instance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param autoExportJob Object containing the user-selectable properties of the auto export job. If read-only
     * properties are included, they must match the existing values of those properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an auto export job instance.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AutoExportJobInner update(String resourceGroupName, String amlFilesystemName, String autoExportJobName,
        AutoExportJobUpdate autoExportJob, Context context) {
        return beginUpdate(resourceGroupName, amlFilesystemName, autoExportJobName, autoExportJob, context)
            .getFinalResult();
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AutoExportJobInner>> listByAmlFilesystemSinglePageAsync(String resourceGroupName,
        String amlFilesystemName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByAmlFilesystem(this.client.getEndpoint(), resourceGroupName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), amlFilesystemName, accept, context))
            .<PagedResponse<AutoExportJobInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AutoExportJobInner> listByAmlFilesystemAsync(String resourceGroupName, String amlFilesystemName) {
        return new PagedFlux<>(() -> listByAmlFilesystemSinglePageAsync(resourceGroupName, amlFilesystemName),
            nextLink -> listByAmlFilesystemNextSinglePageAsync(nextLink));
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AutoExportJobInner> listByAmlFilesystemSinglePage(String resourceGroupName,
        String amlFilesystemName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AutoExportJobsListResult> res
            = service.listByAmlFilesystemSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), amlFilesystemName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AutoExportJobInner> listByAmlFilesystemSinglePage(String resourceGroupName,
        String amlFilesystemName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (amlFilesystemName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter amlFilesystemName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AutoExportJobsListResult> res
            = service.listByAmlFilesystemSync(this.client.getEndpoint(), resourceGroupName, this.client.getApiVersion(),
                this.client.getSubscriptionId(), amlFilesystemName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AutoExportJobInner> listByAmlFilesystem(String resourceGroupName, String amlFilesystemName) {
        return new PagedIterable<>(() -> listByAmlFilesystemSinglePage(resourceGroupName, amlFilesystemName),
            nextLink -> listByAmlFilesystemNextSinglePage(nextLink));
    }

    /**
     * Returns all the auto export jobs the user has access to under an AML File System.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and
     * end with alphanumeric.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AutoExportJobInner> listByAmlFilesystem(String resourceGroupName, String amlFilesystemName,
        Context context) {
        return new PagedIterable<>(() -> listByAmlFilesystemSinglePage(resourceGroupName, amlFilesystemName, context),
            nextLink -> listByAmlFilesystemNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AutoExportJobInner>> listByAmlFilesystemNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByAmlFilesystemNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AutoExportJobInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AutoExportJobInner> listByAmlFilesystemNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AutoExportJobsListResult> res
            = service.listByAmlFilesystemNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list auto export jobs along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AutoExportJobInner> listByAmlFilesystemNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AutoExportJobsListResult> res
            = service.listByAmlFilesystemNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(AutoExportJobsClientImpl.class);
}
