// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.storagecache.fluent.models.AutoImportJobInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of AutoImportJob.
 */
public interface AutoImportJob {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: ARM provisioning state.
     * 
     * @return the provisioningState value.
     */
    AutoImportJobPropertiesProvisioningState provisioningState();

    /**
     * Gets the adminStatus property: The administrative status of the auto import job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set
     * to 'Enable'.
     * 
     * @return the adminStatus value.
     */
    AutoImportJobPropertiesAdminStatus adminStatus();

    /**
     * Gets the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
     * 
     * @return the autoImportPrefixes value.
     */
    List<String> autoImportPrefixes();

    /**
     * Gets the conflictResolutionMode property: How the auto import job will handle conflicts. For example, if the auto
     * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that
     * the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should
     * pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory
     * if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     * 
     * @return the conflictResolutionMode value.
     */
    ConflictResolutionMode conflictResolutionMode();

    /**
     * Gets the enableDeletions property: Whether or not to enable deletions during auto import. This only affects
     * overwrite-dirty.
     * 
     * @return the enableDeletions value.
     */
    Boolean enableDeletions();

    /**
     * Gets the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
     * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
     * 
     * @return the maximumErrors value.
     */
    Long maximumErrors();

    /**
     * Gets the state property: The state of the auto import operation.
     * 
     * @return the state value.
     */
    AutoImportJobState state();

    /**
     * Gets the statusCode property: Server-defined status code for auto import job.
     * 
     * @return the statusCode value.
     */
    String statusCode();

    /**
     * Gets the statusMessage property: Server-defined status message for auto import job.
     * 
     * @return the statusMessage value.
     */
    String statusMessage();

    /**
     * Gets the scanStartTime property: Date and time of when the currently running full scan began.
     * 
     * @return the scanStartTime value.
     */
    OffsetDateTime scanStartTime();

    /**
     * Gets the scanEndTime property: Date and time of when the full scan ended.
     * 
     * @return the scanEndTime value.
     */
    OffsetDateTime scanEndTime();

    /**
     * Gets the totalBlobsWalked property: Total number of blobs walked during full scan.
     * 
     * @return the totalBlobsWalked value.
     */
    Long totalBlobsWalked();

    /**
     * Gets the rateOfBlobWalk property: Rate of blobs walked during full scan.
     * 
     * @return the rateOfBlobWalk value.
     */
    Long rateOfBlobWalk();

    /**
     * Gets the totalBlobsImported property: Total number of blobs imported during full scan.
     * 
     * @return the totalBlobsImported value.
     */
    Long totalBlobsImported();

    /**
     * Gets the rateOfBlobImport property: Rate of blob import during full scan.
     * 
     * @return the rateOfBlobImport value.
     */
    Long rateOfBlobImport();

    /**
     * Gets the importedFiles property: Number of files imported during full scan.
     * 
     * @return the importedFiles value.
     */
    Long importedFiles();

    /**
     * Gets the importedDirectories property: Number of directories imported during full scan.
     * 
     * @return the importedDirectories value.
     */
    Long importedDirectories();

    /**
     * Gets the importedSymlinks property: Number of symlinks imported during full scan.
     * 
     * @return the importedSymlinks value.
     */
    Long importedSymlinks();

    /**
     * Gets the preexistingFiles property: Number of preexisting files during full scan.
     * 
     * @return the preexistingFiles value.
     */
    Long preexistingFiles();

    /**
     * Gets the preexistingDirectories property: Number of preexisting directories during full scan.
     * 
     * @return the preexistingDirectories value.
     */
    Long preexistingDirectories();

    /**
     * Gets the preexistingSymlinks property: Number of preexisting symlinks during full scan.
     * 
     * @return the preexistingSymlinks value.
     */
    Long preexistingSymlinks();

    /**
     * Gets the totalErrors property: Total errors encountered during full scan.
     * 
     * @return the totalErrors value.
     */
    Long totalErrors();

    /**
     * Gets the totalConflicts property: Total conflicts encountered during full scan.
     * 
     * @return the totalConflicts value.
     */
    Long totalConflicts();

    /**
     * Gets the blobSyncEvents property: The storage account blob change feed status of the auto import job.
     * 
     * @return the blobSyncEvents value.
     */
    AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents();

    /**
     * Gets the lastStartedTimeUtc property: The time (in UTC) the latest auto import job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    OffsetDateTime lastStartedTimeUtc();

    /**
     * Gets the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto import job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    OffsetDateTime lastCompletionTimeUtc();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.storagecache.fluent.models.AutoImportJobInner object.
     * 
     * @return the inner object.
     */
    AutoImportJobInner innerModel();

    /**
     * The entirety of the AutoImportJob definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The AutoImportJob definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the AutoImportJob definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, amlFilesystemName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and hyphens.
             * Start and end with alphanumeric.
             * @return the next definition stage.
             */
            WithCreate withExistingAmlFilesystem(String resourceGroupName, String amlFilesystemName);
        }

        /**
         * The stage of the AutoImportJob definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithAdminStatus,
            DefinitionStages.WithAutoImportPrefixes, DefinitionStages.WithConflictResolutionMode,
            DefinitionStages.WithEnableDeletions, DefinitionStages.WithMaximumErrors {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            AutoImportJob create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AutoImportJob create(Context context);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify adminStatus.
         */
        interface WithAdminStatus {
            /**
             * Specifies the adminStatus property: The administrative status of the auto import job. Possible values:
             * 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By
             * default it is set to 'Enable'..
             * 
             * @param adminStatus The administrative status of the auto import job. Possible values: 'Enable',
             * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it
             * is set to 'Enable'.
             * @return the next definition stage.
             */
            WithCreate withAdminStatus(AutoImportJobPropertiesAdminStatus adminStatus);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify autoImportPrefixes.
         */
        interface WithAutoImportPrefixes {
            /**
             * Specifies the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the
             * cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100..
             * 
             * @param autoImportPrefixes An array of blob paths/prefixes that get auto imported to the cluster
             * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
             * @return the next definition stage.
             */
            WithCreate withAutoImportPrefixes(List<String> autoImportPrefixes);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify conflictResolutionMode.
         */
        interface WithConflictResolutionMode {
            /**
             * Specifies the conflictResolutionMode property: How the auto import job will handle conflicts. For
             * example, if the auto import job is trying to bring in a directory, but a file is at that path, how it
             * handles it. Fail indicates that the auto import job should stop immediately and not do anything with the
             * conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import
             * job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently
             * released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but
             * were not dirty. Please reference
             * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode
             * for a thorough explanation of these resolution modes..
             * 
             * @param conflictResolutionMode How the auto import job will handle conflicts. For example, if the auto
             * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail
             * indicates that the auto import job should stop immediately and not do anything with the conflict. Skip
             * indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete
             * and re-import the file or directory if it is a conflicting type, is dirty, or is currently released.
             * OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not
             * dirty. Please reference
             * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode
             * for a thorough explanation of these resolution modes.
             * @return the next definition stage.
             */
            WithCreate withConflictResolutionMode(ConflictResolutionMode conflictResolutionMode);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify enableDeletions.
         */
        interface WithEnableDeletions {
            /**
             * Specifies the enableDeletions property: Whether or not to enable deletions during auto import. This only
             * affects overwrite-dirty..
             * 
             * @param enableDeletions Whether or not to enable deletions during auto import. This only affects
             * overwrite-dirty.
             * @return the next definition stage.
             */
            WithCreate withEnableDeletions(Boolean enableDeletions);
        }

        /**
         * The stage of the AutoImportJob definition allowing to specify maximumErrors.
         */
        interface WithMaximumErrors {
            /**
             * Specifies the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will
             * tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error..
             * 
             * @param maximumErrors Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
             * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
             * @return the next definition stage.
             */
            WithCreate withMaximumErrors(Long maximumErrors);
        }
    }

    /**
     * Begins update for the AutoImportJob resource.
     * 
     * @return the stage of resource update.
     */
    AutoImportJob.Update update();

    /**
     * The template for AutoImportJob update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithAdminStatus {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        AutoImportJob apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AutoImportJob apply(Context context);
    }

    /**
     * The AutoImportJob update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the AutoImportJob update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the AutoImportJob update allowing to specify adminStatus.
         */
        interface WithAdminStatus {
            /**
             * Specifies the adminStatus property: The administrative status of the auto import job. Possible values:
             * 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By
             * default it is set to 'Enable'..
             * 
             * @param adminStatus The administrative status of the auto import job. Possible values: 'Enable',
             * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it
             * is set to 'Enable'.
             * @return the next definition stage.
             */
            Update withAdminStatus(AutoImportJobUpdatePropertiesAdminStatus adminStatus);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    AutoImportJob refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AutoImportJob refresh(Context context);
}
