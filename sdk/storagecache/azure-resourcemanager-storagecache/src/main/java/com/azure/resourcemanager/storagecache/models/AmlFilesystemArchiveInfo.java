// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information required to execute the archive operation.
 */
@Fluent
public final class AmlFilesystemArchiveInfo implements JsonSerializable<AmlFilesystemArchiveInfo> {
    /*
     * Lustre file system path to archive relative to the file system root. Specify '/' to archive all modified data.
     */
    private String filesystemPath;

    /**
     * Creates an instance of AmlFilesystemArchiveInfo class.
     */
    public AmlFilesystemArchiveInfo() {
    }

    /**
     * Get the filesystemPath property: Lustre file system path to archive relative to the file system root. Specify '/'
     * to archive all modified data.
     * 
     * @return the filesystemPath value.
     */
    public String filesystemPath() {
        return this.filesystemPath;
    }

    /**
     * Set the filesystemPath property: Lustre file system path to archive relative to the file system root. Specify '/'
     * to archive all modified data.
     * 
     * @param filesystemPath the filesystemPath value to set.
     * @return the AmlFilesystemArchiveInfo object itself.
     */
    public AmlFilesystemArchiveInfo withFilesystemPath(String filesystemPath) {
        this.filesystemPath = filesystemPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filesystemPath", this.filesystemPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmlFilesystemArchiveInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmlFilesystemArchiveInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AmlFilesystemArchiveInfo.
     */
    public static AmlFilesystemArchiveInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmlFilesystemArchiveInfo deserializedAmlFilesystemArchiveInfo = new AmlFilesystemArchiveInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filesystemPath".equals(fieldName)) {
                    deserializedAmlFilesystemArchiveInfo.filesystemPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmlFilesystemArchiveInfo;
        });
    }
}
