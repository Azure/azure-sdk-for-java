// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about the AML file system archive.
 */
@Immutable
public final class AmlFilesystemArchive implements JsonSerializable<AmlFilesystemArchive> {
    /*
     * Lustre file system path to archive relative to the file system root. Specify '/' to archive all modified data.
     */
    private String filesystemPath;

    /*
     * The status of the archive
     */
    private AmlFilesystemArchiveStatus status;

    /**
     * Creates an instance of AmlFilesystemArchive class.
     */
    public AmlFilesystemArchive() {
    }

    /**
     * Get the filesystemPath property: Lustre file system path to archive relative to the file system root. Specify '/'
     * to archive all modified data.
     * 
     * @return the filesystemPath value.
     */
    public String filesystemPath() {
        return this.filesystemPath;
    }

    /**
     * Get the status property: The status of the archive.
     * 
     * @return the status value.
     */
    public AmlFilesystemArchiveStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AmlFilesystemArchive from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AmlFilesystemArchive if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AmlFilesystemArchive.
     */
    public static AmlFilesystemArchive fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AmlFilesystemArchive deserializedAmlFilesystemArchive = new AmlFilesystemArchive();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filesystemPath".equals(fieldName)) {
                    deserializedAmlFilesystemArchive.filesystemPath = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAmlFilesystemArchive.status = AmlFilesystemArchiveStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAmlFilesystemArchive;
        });
    }
}
