// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesAdminStatus;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesProvisioningState;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesStatusBlobSyncEvents;
import com.azure.resourcemanager.storagecache.models.AutoImportJobState;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of the auto import job.
 */
@Fluent
public final class AutoImportJobProperties implements JsonSerializable<AutoImportJobProperties> {
    /*
     * ARM provisioning state.
     */
    private AutoImportJobPropertiesProvisioningState provisioningState;

    /*
     * The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of
     * 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.
     */
    private AutoImportJobPropertiesAdminStatus adminStatus;

    /*
     * An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value.
     * Number of maximum allowed paths is 100.
     */
    private List<String> autoImportPrefixes;

    /*
     * How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a
     * directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop
     * immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict.
     * OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting
     * type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files
     * that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     */
    private ConflictResolutionMode conflictResolutionMode;

    /*
     * Whether or not to enable deletions during auto import. This only affects overwrite-dirty.
     */
    private Boolean enableDeletions;

    /*
     * Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means
     * infinite. 0 means exit immediately on any error.
     */
    private Long maximumErrors;

    /*
     * The status of the auto import job.
     */
    private AutoImportJobPropertiesStatus innerStatus;

    /**
     * Creates an instance of AutoImportJobProperties class.
     */
    public AutoImportJobProperties() {
    }

    /**
     * Get the provisioningState property: ARM provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AutoImportJobPropertiesProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the adminStatus property: The administrative status of the auto import job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set
     * to 'Enable'.
     * 
     * @return the adminStatus value.
     */
    public AutoImportJobPropertiesAdminStatus adminStatus() {
        return this.adminStatus;
    }

    /**
     * Set the adminStatus property: The administrative status of the auto import job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set
     * to 'Enable'.
     * 
     * @param adminStatus the adminStatus value to set.
     * @return the AutoImportJobProperties object itself.
     */
    public AutoImportJobProperties withAdminStatus(AutoImportJobPropertiesAdminStatus adminStatus) {
        this.adminStatus = adminStatus;
        return this;
    }

    /**
     * Get the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
     * 
     * @return the autoImportPrefixes value.
     */
    public List<String> autoImportPrefixes() {
        return this.autoImportPrefixes;
    }

    /**
     * Set the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
     * 
     * @param autoImportPrefixes the autoImportPrefixes value to set.
     * @return the AutoImportJobProperties object itself.
     */
    public AutoImportJobProperties withAutoImportPrefixes(List<String> autoImportPrefixes) {
        this.autoImportPrefixes = autoImportPrefixes;
        return this;
    }

    /**
     * Get the conflictResolutionMode property: How the auto import job will handle conflicts. For example, if the auto
     * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that
     * the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should
     * pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory
     * if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     * 
     * @return the conflictResolutionMode value.
     */
    public ConflictResolutionMode conflictResolutionMode() {
        return this.conflictResolutionMode;
    }

    /**
     * Set the conflictResolutionMode property: How the auto import job will handle conflicts. For example, if the auto
     * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that
     * the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should
     * pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory
     * if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     * 
     * @param conflictResolutionMode the conflictResolutionMode value to set.
     * @return the AutoImportJobProperties object itself.
     */
    public AutoImportJobProperties withConflictResolutionMode(ConflictResolutionMode conflictResolutionMode) {
        this.conflictResolutionMode = conflictResolutionMode;
        return this;
    }

    /**
     * Get the enableDeletions property: Whether or not to enable deletions during auto import. This only affects
     * overwrite-dirty.
     * 
     * @return the enableDeletions value.
     */
    public Boolean enableDeletions() {
        return this.enableDeletions;
    }

    /**
     * Set the enableDeletions property: Whether or not to enable deletions during auto import. This only affects
     * overwrite-dirty.
     * 
     * @param enableDeletions the enableDeletions value to set.
     * @return the AutoImportJobProperties object itself.
     */
    public AutoImportJobProperties withEnableDeletions(Boolean enableDeletions) {
        this.enableDeletions = enableDeletions;
        return this;
    }

    /**
     * Get the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
     * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
     * 
     * @return the maximumErrors value.
     */
    public Long maximumErrors() {
        return this.maximumErrors;
    }

    /**
     * Set the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
     * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
     * 
     * @param maximumErrors the maximumErrors value to set.
     * @return the AutoImportJobProperties object itself.
     */
    public AutoImportJobProperties withMaximumErrors(Long maximumErrors) {
        this.maximumErrors = maximumErrors;
        return this;
    }

    /**
     * Get the innerStatus property: The status of the auto import job.
     * 
     * @return the innerStatus value.
     */
    private AutoImportJobPropertiesStatus innerStatus() {
        return this.innerStatus;
    }

    /**
     * Get the state property: The state of the auto import operation.
     * 
     * @return the state value.
     */
    public AutoImportJobState state() {
        return this.innerStatus() == null ? null : this.innerStatus().state();
    }

    /**
     * Get the statusCode property: Server-defined status code for auto import job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.innerStatus() == null ? null : this.innerStatus().statusCode();
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto import job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerStatus() == null ? null : this.innerStatus().statusMessage();
    }

    /**
     * Get the scanStartTime property: Date and time of when the currently running full scan began.
     * 
     * @return the scanStartTime value.
     */
    public OffsetDateTime scanStartTime() {
        return this.innerStatus() == null ? null : this.innerStatus().scanStartTime();
    }

    /**
     * Get the scanEndTime property: Date and time of when the full scan ended.
     * 
     * @return the scanEndTime value.
     */
    public OffsetDateTime scanEndTime() {
        return this.innerStatus() == null ? null : this.innerStatus().scanEndTime();
    }

    /**
     * Get the totalBlobsWalked property: Total number of blobs walked during full scan.
     * 
     * @return the totalBlobsWalked value.
     */
    public Long totalBlobsWalked() {
        return this.innerStatus() == null ? null : this.innerStatus().totalBlobsWalked();
    }

    /**
     * Get the rateOfBlobWalk property: Rate of blobs walked during full scan.
     * 
     * @return the rateOfBlobWalk value.
     */
    public Long rateOfBlobWalk() {
        return this.innerStatus() == null ? null : this.innerStatus().rateOfBlobWalk();
    }

    /**
     * Get the totalBlobsImported property: Total number of blobs imported during full scan.
     * 
     * @return the totalBlobsImported value.
     */
    public Long totalBlobsImported() {
        return this.innerStatus() == null ? null : this.innerStatus().totalBlobsImported();
    }

    /**
     * Get the rateOfBlobImport property: Rate of blob import during full scan.
     * 
     * @return the rateOfBlobImport value.
     */
    public Long rateOfBlobImport() {
        return this.innerStatus() == null ? null : this.innerStatus().rateOfBlobImport();
    }

    /**
     * Get the importedFiles property: Number of files imported during full scan.
     * 
     * @return the importedFiles value.
     */
    public Long importedFiles() {
        return this.innerStatus() == null ? null : this.innerStatus().importedFiles();
    }

    /**
     * Get the importedDirectories property: Number of directories imported during full scan.
     * 
     * @return the importedDirectories value.
     */
    public Long importedDirectories() {
        return this.innerStatus() == null ? null : this.innerStatus().importedDirectories();
    }

    /**
     * Get the importedSymlinks property: Number of symlinks imported during full scan.
     * 
     * @return the importedSymlinks value.
     */
    public Long importedSymlinks() {
        return this.innerStatus() == null ? null : this.innerStatus().importedSymlinks();
    }

    /**
     * Get the preexistingFiles property: Number of preexisting files during full scan.
     * 
     * @return the preexistingFiles value.
     */
    public Long preexistingFiles() {
        return this.innerStatus() == null ? null : this.innerStatus().preexistingFiles();
    }

    /**
     * Get the preexistingDirectories property: Number of preexisting directories during full scan.
     * 
     * @return the preexistingDirectories value.
     */
    public Long preexistingDirectories() {
        return this.innerStatus() == null ? null : this.innerStatus().preexistingDirectories();
    }

    /**
     * Get the preexistingSymlinks property: Number of preexisting symlinks during full scan.
     * 
     * @return the preexistingSymlinks value.
     */
    public Long preexistingSymlinks() {
        return this.innerStatus() == null ? null : this.innerStatus().preexistingSymlinks();
    }

    /**
     * Get the totalErrors property: Total errors encountered during full scan.
     * 
     * @return the totalErrors value.
     */
    public Long totalErrors() {
        return this.innerStatus() == null ? null : this.innerStatus().totalErrors();
    }

    /**
     * Get the totalConflicts property: Total conflicts encountered during full scan.
     * 
     * @return the totalConflicts value.
     */
    public Long totalConflicts() {
        return this.innerStatus() == null ? null : this.innerStatus().totalConflicts();
    }

    /**
     * Get the blobSyncEvents property: The storage account blob change feed status of the auto import job.
     * 
     * @return the blobSyncEvents value.
     */
    public AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents() {
        return this.innerStatus() == null ? null : this.innerStatus().blobSyncEvents();
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto import job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.innerStatus() == null ? null : this.innerStatus().lastStartedTimeUtc();
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto import job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.innerStatus() == null ? null : this.innerStatus().lastCompletionTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerStatus() != null) {
            innerStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminStatus", this.adminStatus == null ? null : this.adminStatus.toString());
        jsonWriter.writeArrayField("autoImportPrefixes", this.autoImportPrefixes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("conflictResolutionMode",
            this.conflictResolutionMode == null ? null : this.conflictResolutionMode.toString());
        jsonWriter.writeBooleanField("enableDeletions", this.enableDeletions);
        jsonWriter.writeNumberField("maximumErrors", this.maximumErrors);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoImportJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoImportJobProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoImportJobProperties.
     */
    public static AutoImportJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoImportJobProperties deserializedAutoImportJobProperties = new AutoImportJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAutoImportJobProperties.provisioningState
                        = AutoImportJobPropertiesProvisioningState.fromString(reader.getString());
                } else if ("adminStatus".equals(fieldName)) {
                    deserializedAutoImportJobProperties.adminStatus
                        = AutoImportJobPropertiesAdminStatus.fromString(reader.getString());
                } else if ("autoImportPrefixes".equals(fieldName)) {
                    List<String> autoImportPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutoImportJobProperties.autoImportPrefixes = autoImportPrefixes;
                } else if ("conflictResolutionMode".equals(fieldName)) {
                    deserializedAutoImportJobProperties.conflictResolutionMode
                        = ConflictResolutionMode.fromString(reader.getString());
                } else if ("enableDeletions".equals(fieldName)) {
                    deserializedAutoImportJobProperties.enableDeletions = reader.getNullable(JsonReader::getBoolean);
                } else if ("maximumErrors".equals(fieldName)) {
                    deserializedAutoImportJobProperties.maximumErrors = reader.getNullable(JsonReader::getLong);
                } else if ("status".equals(fieldName)) {
                    deserializedAutoImportJobProperties.innerStatus = AutoImportJobPropertiesStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoImportJobProperties;
        });
    }
}
