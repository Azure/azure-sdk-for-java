// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoExportJobAdminStatus;
import com.azure.resourcemanager.storagecache.models.AutoExportJobProvisioningStateType;
import com.azure.resourcemanager.storagecache.models.AutoExportStatusType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of the auto export job.
 */
@Fluent
public final class AutoExportJobProperties implements JsonSerializable<AutoExportJobProperties> {
    /*
     * ARM provisioning state.
     */
    private AutoExportJobProvisioningStateType provisioningState;

    /*
     * The administrative status of the auto export job. Possible values: 'Enable', 'Disable'. Passing in a value of
     * 'Disable' will disable the current active auto export job. By default it is set to 'Enable'.
     */
    private AutoExportJobAdminStatus adminStatus;

    /*
     * An array of blob paths/prefixes that get auto exported to the cluster namespace. It has '/' as the default value.
     * Number of maximum allowed paths for now is 1.
     */
    private List<String> autoExportPrefixes;

    /*
     * The status of the auto export
     */
    private AutoExportJobPropertiesStatus innerStatus;

    /**
     * Creates an instance of AutoExportJobProperties class.
     */
    public AutoExportJobProperties() {
    }

    /**
     * Get the provisioningState property: ARM provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AutoExportJobProvisioningStateType provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the adminStatus property: The administrative status of the auto export job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto export job. By default it is set
     * to 'Enable'.
     * 
     * @return the adminStatus value.
     */
    public AutoExportJobAdminStatus adminStatus() {
        return this.adminStatus;
    }

    /**
     * Set the adminStatus property: The administrative status of the auto export job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto export job. By default it is set
     * to 'Enable'.
     * 
     * @param adminStatus the adminStatus value to set.
     * @return the AutoExportJobProperties object itself.
     */
    public AutoExportJobProperties withAdminStatus(AutoExportJobAdminStatus adminStatus) {
        this.adminStatus = adminStatus;
        return this;
    }

    /**
     * Get the autoExportPrefixes property: An array of blob paths/prefixes that get auto exported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths for now is 1.
     * 
     * @return the autoExportPrefixes value.
     */
    public List<String> autoExportPrefixes() {
        return this.autoExportPrefixes;
    }

    /**
     * Set the autoExportPrefixes property: An array of blob paths/prefixes that get auto exported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths for now is 1.
     * 
     * @param autoExportPrefixes the autoExportPrefixes value to set.
     * @return the AutoExportJobProperties object itself.
     */
    public AutoExportJobProperties withAutoExportPrefixes(List<String> autoExportPrefixes) {
        this.autoExportPrefixes = autoExportPrefixes;
        return this;
    }

    /**
     * Get the innerStatus property: The status of the auto export.
     * 
     * @return the innerStatus value.
     */
    private AutoExportJobPropertiesStatus innerStatus() {
        return this.innerStatus;
    }

    /**
     * Get the state property: The operational state of auto export. InProgress indicates the export is running.
     * Disabling indicates the user has requested to disable the export but the disabling is still in progress. Disabled
     * indicates auto export has been disabled. DisableFailed indicates the disabling has failed. Failed means the
     * export was unable to continue, due to a fatal error.
     * 
     * @return the state value.
     */
    public AutoExportStatusType state() {
        return this.innerStatus() == null ? null : this.innerStatus().state();
    }

    /**
     * Get the statusCode property: Server-defined status code for auto export job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.innerStatus() == null ? null : this.innerStatus().statusCode();
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto export job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerStatus() == null ? null : this.innerStatus().statusMessage();
    }

    /**
     * Get the totalFilesExported property: Total files exported since the start of the export. This is accumulative,
     * some files may be counted repeatedly.
     * 
     * @return the totalFilesExported value.
     */
    public Long totalFilesExported() {
        return this.innerStatus() == null ? null : this.innerStatus().totalFilesExported();
    }

    /**
     * Get the totalMiBExported property: Total data (in MiB) exported since the start of the export. This is
     * accumulative, some files may be counted repeatedly.
     * 
     * @return the totalMiBExported value.
     */
    public Long totalMiBExported() {
        return this.innerStatus() == null ? null : this.innerStatus().totalMiBExported();
    }

    /**
     * Get the totalFilesFailed property: Total files failed to be export since the last successfully completed
     * iteration. This is accumulative, some files may be counted repeatedly.
     * 
     * @return the totalFilesFailed value.
     */
    public Long totalFilesFailed() {
        return this.innerStatus() == null ? null : this.innerStatus().totalFilesFailed();
    }

    /**
     * Get the exportIterationCount property: Number of iterations completed since the start of the export.
     * 
     * @return the exportIterationCount value.
     */
    public Integer exportIterationCount() {
        return this.innerStatus() == null ? null : this.innerStatus().exportIterationCount();
    }

    /**
     * Get the lastSuccessfulIterationCompletionTimeUtc property: Time (in UTC) of the last successfully completed
     * export iteration. Look at logging container for details.
     * 
     * @return the lastSuccessfulIterationCompletionTimeUtc value.
     */
    public OffsetDateTime lastSuccessfulIterationCompletionTimeUtc() {
        return this.innerStatus() == null ? null : this.innerStatus().lastSuccessfulIterationCompletionTimeUtc();
    }

    /**
     * Get the currentIterationFilesDiscovered property: Files discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationFilesDiscovered value.
     */
    public Long currentIterationFilesDiscovered() {
        return this.innerStatus() == null ? null : this.innerStatus().currentIterationFilesDiscovered();
    }

    /**
     * Get the currentIterationMiBDiscovered property: Data (in MiB) discovered for export in current iteration. It may
     * increase while more export items are found.
     * 
     * @return the currentIterationMiBDiscovered value.
     */
    public Long currentIterationMiBDiscovered() {
        return this.innerStatus() == null ? null : this.innerStatus().currentIterationMiBDiscovered();
    }

    /**
     * Get the currentIterationFilesExported property: Files that have been exported in current iteration.
     * 
     * @return the currentIterationFilesExported value.
     */
    public Long currentIterationFilesExported() {
        return this.innerStatus() == null ? null : this.innerStatus().currentIterationFilesExported();
    }

    /**
     * Get the currentIterationMiBExported property: Data (in MiB) that have been exported in current iteration.
     * 
     * @return the currentIterationMiBExported value.
     */
    public Long currentIterationMiBExported() {
        return this.innerStatus() == null ? null : this.innerStatus().currentIterationMiBExported();
    }

    /**
     * Get the currentIterationFilesFailed property: Files failed to export in current iteration.
     * 
     * @return the currentIterationFilesFailed value.
     */
    public Long currentIterationFilesFailed() {
        return this.innerStatus() == null ? null : this.innerStatus().currentIterationFilesFailed();
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto export job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.innerStatus() == null ? null : this.innerStatus().lastStartedTimeUtc();
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto export job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.innerStatus() == null ? null : this.innerStatus().lastCompletionTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerStatus() != null) {
            innerStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminStatus", this.adminStatus == null ? null : this.adminStatus.toString());
        jsonWriter.writeArrayField("autoExportPrefixes", this.autoExportPrefixes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoExportJobProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoExportJobProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoExportJobProperties.
     */
    public static AutoExportJobProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoExportJobProperties deserializedAutoExportJobProperties = new AutoExportJobProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAutoExportJobProperties.provisioningState
                        = AutoExportJobProvisioningStateType.fromString(reader.getString());
                } else if ("adminStatus".equals(fieldName)) {
                    deserializedAutoExportJobProperties.adminStatus
                        = AutoExportJobAdminStatus.fromString(reader.getString());
                } else if ("autoExportPrefixes".equals(fieldName)) {
                    List<String> autoExportPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedAutoExportJobProperties.autoExportPrefixes = autoExportPrefixes;
                } else if ("status".equals(fieldName)) {
                    deserializedAutoExportJobProperties.innerStatus = AutoExportJobPropertiesStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoExportJobProperties;
        });
    }
}
