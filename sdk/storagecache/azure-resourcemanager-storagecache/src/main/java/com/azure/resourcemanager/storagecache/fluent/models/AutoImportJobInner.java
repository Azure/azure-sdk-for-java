// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesAdminStatus;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesProvisioningState;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesStatusBlobSyncEvents;
import com.azure.resourcemanager.storagecache.models.AutoImportJobState;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An auto import job instance. Follows Azure Resource Manager standards:
 * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md.
 */
@Fluent
public final class AutoImportJobInner extends Resource {
    /*
     * Properties of the auto import job.
     */
    private AutoImportJobProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of AutoImportJobInner class.
     */
    public AutoImportJobInner() {
    }

    /**
     * Get the innerProperties property: Properties of the auto import job.
     * 
     * @return the innerProperties value.
     */
    private AutoImportJobProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutoImportJobInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AutoImportJobInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: ARM provisioning state.
     * 
     * @return the provisioningState value.
     */
    public AutoImportJobPropertiesProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the adminStatus property: The administrative status of the auto import job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set
     * to 'Enable'.
     * 
     * @return the adminStatus value.
     */
    public AutoImportJobPropertiesAdminStatus adminStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().adminStatus();
    }

    /**
     * Set the adminStatus property: The administrative status of the auto import job. Possible values: 'Enable',
     * 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set
     * to 'Enable'.
     * 
     * @param adminStatus the adminStatus value to set.
     * @return the AutoImportJobInner object itself.
     */
    public AutoImportJobInner withAdminStatus(AutoImportJobPropertiesAdminStatus adminStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoImportJobProperties();
        }
        this.innerProperties().withAdminStatus(adminStatus);
        return this;
    }

    /**
     * Get the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
     * 
     * @return the autoImportPrefixes value.
     */
    public List<String> autoImportPrefixes() {
        return this.innerProperties() == null ? null : this.innerProperties().autoImportPrefixes();
    }

    /**
     * Set the autoImportPrefixes property: An array of blob paths/prefixes that get auto imported to the cluster
     * namespace. It has '/' as the default value. Number of maximum allowed paths is 100.
     * 
     * @param autoImportPrefixes the autoImportPrefixes value to set.
     * @return the AutoImportJobInner object itself.
     */
    public AutoImportJobInner withAutoImportPrefixes(List<String> autoImportPrefixes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoImportJobProperties();
        }
        this.innerProperties().withAutoImportPrefixes(autoImportPrefixes);
        return this;
    }

    /**
     * Get the conflictResolutionMode property: How the auto import job will handle conflicts. For example, if the auto
     * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that
     * the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should
     * pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory
     * if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     * 
     * @return the conflictResolutionMode value.
     */
    public ConflictResolutionMode conflictResolutionMode() {
        return this.innerProperties() == null ? null : this.innerProperties().conflictResolutionMode();
    }

    /**
     * Set the conflictResolutionMode property: How the auto import job will handle conflicts. For example, if the auto
     * import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that
     * the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should
     * pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory
     * if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to
     * include releasing files that had been restored but were not dirty. Please reference
     * https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a
     * thorough explanation of these resolution modes.
     * 
     * @param conflictResolutionMode the conflictResolutionMode value to set.
     * @return the AutoImportJobInner object itself.
     */
    public AutoImportJobInner withConflictResolutionMode(ConflictResolutionMode conflictResolutionMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoImportJobProperties();
        }
        this.innerProperties().withConflictResolutionMode(conflictResolutionMode);
        return this;
    }

    /**
     * Get the enableDeletions property: Whether or not to enable deletions during auto import. This only affects
     * overwrite-dirty.
     * 
     * @return the enableDeletions value.
     */
    public Boolean enableDeletions() {
        return this.innerProperties() == null ? null : this.innerProperties().enableDeletions();
    }

    /**
     * Set the enableDeletions property: Whether or not to enable deletions during auto import. This only affects
     * overwrite-dirty.
     * 
     * @param enableDeletions the enableDeletions value to set.
     * @return the AutoImportJobInner object itself.
     */
    public AutoImportJobInner withEnableDeletions(Boolean enableDeletions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoImportJobProperties();
        }
        this.innerProperties().withEnableDeletions(enableDeletions);
        return this;
    }

    /**
     * Get the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
     * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
     * 
     * @return the maximumErrors value.
     */
    public Long maximumErrors() {
        return this.innerProperties() == null ? null : this.innerProperties().maximumErrors();
    }

    /**
     * Set the maximumErrors property: Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before
     * exiting with failure. -1 means infinite. 0 means exit immediately on any error.
     * 
     * @param maximumErrors the maximumErrors value to set.
     * @return the AutoImportJobInner object itself.
     */
    public AutoImportJobInner withMaximumErrors(Long maximumErrors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AutoImportJobProperties();
        }
        this.innerProperties().withMaximumErrors(maximumErrors);
        return this;
    }

    /**
     * Get the state property: The state of the auto import operation.
     * 
     * @return the state value.
     */
    public AutoImportJobState state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the statusCode property: Server-defined status code for auto import job.
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.innerProperties() == null ? null : this.innerProperties().statusCode();
    }

    /**
     * Get the statusMessage property: Server-defined status message for auto import job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.innerProperties() == null ? null : this.innerProperties().statusMessage();
    }

    /**
     * Get the scanStartTime property: Date and time of when the currently running full scan began.
     * 
     * @return the scanStartTime value.
     */
    public OffsetDateTime scanStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().scanStartTime();
    }

    /**
     * Get the scanEndTime property: Date and time of when the full scan ended.
     * 
     * @return the scanEndTime value.
     */
    public OffsetDateTime scanEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().scanEndTime();
    }

    /**
     * Get the totalBlobsWalked property: Total number of blobs walked during full scan.
     * 
     * @return the totalBlobsWalked value.
     */
    public Long totalBlobsWalked() {
        return this.innerProperties() == null ? null : this.innerProperties().totalBlobsWalked();
    }

    /**
     * Get the rateOfBlobWalk property: Rate of blobs walked during full scan.
     * 
     * @return the rateOfBlobWalk value.
     */
    public Long rateOfBlobWalk() {
        return this.innerProperties() == null ? null : this.innerProperties().rateOfBlobWalk();
    }

    /**
     * Get the totalBlobsImported property: Total number of blobs imported during full scan.
     * 
     * @return the totalBlobsImported value.
     */
    public Long totalBlobsImported() {
        return this.innerProperties() == null ? null : this.innerProperties().totalBlobsImported();
    }

    /**
     * Get the rateOfBlobImport property: Rate of blob import during full scan.
     * 
     * @return the rateOfBlobImport value.
     */
    public Long rateOfBlobImport() {
        return this.innerProperties() == null ? null : this.innerProperties().rateOfBlobImport();
    }

    /**
     * Get the importedFiles property: Number of files imported during full scan.
     * 
     * @return the importedFiles value.
     */
    public Long importedFiles() {
        return this.innerProperties() == null ? null : this.innerProperties().importedFiles();
    }

    /**
     * Get the importedDirectories property: Number of directories imported during full scan.
     * 
     * @return the importedDirectories value.
     */
    public Long importedDirectories() {
        return this.innerProperties() == null ? null : this.innerProperties().importedDirectories();
    }

    /**
     * Get the importedSymlinks property: Number of symlinks imported during full scan.
     * 
     * @return the importedSymlinks value.
     */
    public Long importedSymlinks() {
        return this.innerProperties() == null ? null : this.innerProperties().importedSymlinks();
    }

    /**
     * Get the preexistingFiles property: Number of preexisting files during full scan.
     * 
     * @return the preexistingFiles value.
     */
    public Long preexistingFiles() {
        return this.innerProperties() == null ? null : this.innerProperties().preexistingFiles();
    }

    /**
     * Get the preexistingDirectories property: Number of preexisting directories during full scan.
     * 
     * @return the preexistingDirectories value.
     */
    public Long preexistingDirectories() {
        return this.innerProperties() == null ? null : this.innerProperties().preexistingDirectories();
    }

    /**
     * Get the preexistingSymlinks property: Number of preexisting symlinks during full scan.
     * 
     * @return the preexistingSymlinks value.
     */
    public Long preexistingSymlinks() {
        return this.innerProperties() == null ? null : this.innerProperties().preexistingSymlinks();
    }

    /**
     * Get the totalErrors property: Total errors encountered during full scan.
     * 
     * @return the totalErrors value.
     */
    public Long totalErrors() {
        return this.innerProperties() == null ? null : this.innerProperties().totalErrors();
    }

    /**
     * Get the totalConflicts property: Total conflicts encountered during full scan.
     * 
     * @return the totalConflicts value.
     */
    public Long totalConflicts() {
        return this.innerProperties() == null ? null : this.innerProperties().totalConflicts();
    }

    /**
     * Get the blobSyncEvents property: The storage account blob change feed status of the auto import job.
     * 
     * @return the blobSyncEvents value.
     */
    public AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents() {
        return this.innerProperties() == null ? null : this.innerProperties().blobSyncEvents();
    }

    /**
     * Get the lastStartedTimeUtc property: The time (in UTC) the latest auto import job started.
     * 
     * @return the lastStartedTimeUtc value.
     */
    public OffsetDateTime lastStartedTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastStartedTimeUtc();
    }

    /**
     * Get the lastCompletionTimeUtc property: The time (in UTC) of the last completed auto import job.
     * 
     * @return the lastCompletionTimeUtc value.
     */
    public OffsetDateTime lastCompletionTimeUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().lastCompletionTimeUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoImportJobInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoImportJobInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AutoImportJobInner.
     */
    public static AutoImportJobInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoImportJobInner deserializedAutoImportJobInner = new AutoImportJobInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAutoImportJobInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAutoImportJobInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAutoImportJobInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAutoImportJobInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAutoImportJobInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedAutoImportJobInner.innerProperties = AutoImportJobProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedAutoImportJobInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoImportJobInner;
        });
    }
}
