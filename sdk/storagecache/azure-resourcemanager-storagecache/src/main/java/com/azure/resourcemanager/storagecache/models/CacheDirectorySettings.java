// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cache Directory Services settings.
 */
@Fluent
public final class CacheDirectorySettings implements JsonSerializable<CacheDirectorySettings> {
    /*
     * Specifies settings for joining the HPC Cache to an Active Directory domain.
     */
    private CacheActiveDirectorySettings activeDirectory;

    /*
     * Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
     */
    private CacheUsernameDownloadSettings usernameDownload;

    /**
     * Creates an instance of CacheDirectorySettings class.
     */
    public CacheDirectorySettings() {
    }

    /**
     * Get the activeDirectory property: Specifies settings for joining the HPC Cache to an Active Directory domain.
     * 
     * @return the activeDirectory value.
     */
    public CacheActiveDirectorySettings activeDirectory() {
        return this.activeDirectory;
    }

    /**
     * Set the activeDirectory property: Specifies settings for joining the HPC Cache to an Active Directory domain.
     * 
     * @param activeDirectory the activeDirectory value to set.
     * @return the CacheDirectorySettings object itself.
     */
    public CacheDirectorySettings withActiveDirectory(CacheActiveDirectorySettings activeDirectory) {
        this.activeDirectory = activeDirectory;
        return this;
    }

    /**
     * Get the usernameDownload property: Specifies settings for Extended Groups. Extended Groups allows users to be
     * members of more than 16 groups.
     * 
     * @return the usernameDownload value.
     */
    public CacheUsernameDownloadSettings usernameDownload() {
        return this.usernameDownload;
    }

    /**
     * Set the usernameDownload property: Specifies settings for Extended Groups. Extended Groups allows users to be
     * members of more than 16 groups.
     * 
     * @param usernameDownload the usernameDownload value to set.
     * @return the CacheDirectorySettings object itself.
     */
    public CacheDirectorySettings withUsernameDownload(CacheUsernameDownloadSettings usernameDownload) {
        this.usernameDownload = usernameDownload;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (activeDirectory() != null) {
            activeDirectory().validate();
        }
        if (usernameDownload() != null) {
            usernameDownload().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("activeDirectory", this.activeDirectory);
        jsonWriter.writeJsonField("usernameDownload", this.usernameDownload);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheDirectorySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheDirectorySettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CacheDirectorySettings.
     */
    public static CacheDirectorySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheDirectorySettings deserializedCacheDirectorySettings = new CacheDirectorySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeDirectory".equals(fieldName)) {
                    deserializedCacheDirectorySettings.activeDirectory = CacheActiveDirectorySettings.fromJson(reader);
                } else if ("usernameDownload".equals(fieldName)) {
                    deserializedCacheDirectorySettings.usernameDownload
                        = CacheUsernameDownloadSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheDirectorySettings;
        });
    }
}
