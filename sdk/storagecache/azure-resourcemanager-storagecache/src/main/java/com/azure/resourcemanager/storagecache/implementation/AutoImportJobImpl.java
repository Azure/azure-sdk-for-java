// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.storagecache.fluent.models.AutoImportJobInner;
import com.azure.resourcemanager.storagecache.models.AutoImportJob;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesAdminStatus;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesProvisioningState;
import com.azure.resourcemanager.storagecache.models.AutoImportJobPropertiesStatusBlobSyncEvents;
import com.azure.resourcemanager.storagecache.models.AutoImportJobState;
import com.azure.resourcemanager.storagecache.models.AutoImportJobUpdate;
import com.azure.resourcemanager.storagecache.models.AutoImportJobUpdatePropertiesAdminStatus;
import com.azure.resourcemanager.storagecache.models.ConflictResolutionMode;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class AutoImportJobImpl implements AutoImportJob, AutoImportJob.Definition, AutoImportJob.Update {
    private AutoImportJobInner innerObject;

    private final com.azure.resourcemanager.storagecache.StorageCacheManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public AutoImportJobPropertiesProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public AutoImportJobPropertiesAdminStatus adminStatus() {
        return this.innerModel().adminStatus();
    }

    public List<String> autoImportPrefixes() {
        List<String> inner = this.innerModel().autoImportPrefixes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ConflictResolutionMode conflictResolutionMode() {
        return this.innerModel().conflictResolutionMode();
    }

    public Boolean enableDeletions() {
        return this.innerModel().enableDeletions();
    }

    public Long maximumErrors() {
        return this.innerModel().maximumErrors();
    }

    public AutoImportJobState state() {
        return this.innerModel().state();
    }

    public String statusCode() {
        return this.innerModel().statusCode();
    }

    public String statusMessage() {
        return this.innerModel().statusMessage();
    }

    public OffsetDateTime scanStartTime() {
        return this.innerModel().scanStartTime();
    }

    public OffsetDateTime scanEndTime() {
        return this.innerModel().scanEndTime();
    }

    public Long totalBlobsWalked() {
        return this.innerModel().totalBlobsWalked();
    }

    public Long rateOfBlobWalk() {
        return this.innerModel().rateOfBlobWalk();
    }

    public Long totalBlobsImported() {
        return this.innerModel().totalBlobsImported();
    }

    public Long rateOfBlobImport() {
        return this.innerModel().rateOfBlobImport();
    }

    public Long importedFiles() {
        return this.innerModel().importedFiles();
    }

    public Long importedDirectories() {
        return this.innerModel().importedDirectories();
    }

    public Long importedSymlinks() {
        return this.innerModel().importedSymlinks();
    }

    public Long preexistingFiles() {
        return this.innerModel().preexistingFiles();
    }

    public Long preexistingDirectories() {
        return this.innerModel().preexistingDirectories();
    }

    public Long preexistingSymlinks() {
        return this.innerModel().preexistingSymlinks();
    }

    public Long totalErrors() {
        return this.innerModel().totalErrors();
    }

    public Long totalConflicts() {
        return this.innerModel().totalConflicts();
    }

    public AutoImportJobPropertiesStatusBlobSyncEvents blobSyncEvents() {
        return this.innerModel().blobSyncEvents();
    }

    public OffsetDateTime lastStartedTimeUtc() {
        return this.innerModel().lastStartedTimeUtc();
    }

    public OffsetDateTime lastCompletionTimeUtc() {
        return this.innerModel().lastCompletionTimeUtc();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AutoImportJobInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.storagecache.StorageCacheManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String amlFilesystemName;

    private String autoImportJobName;

    private AutoImportJobUpdate updateAutoImportJob;

    public AutoImportJobImpl withExistingAmlFilesystem(String resourceGroupName, String amlFilesystemName) {
        this.resourceGroupName = resourceGroupName;
        this.amlFilesystemName = amlFilesystemName;
        return this;
    }

    public AutoImportJob create() {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .createOrUpdate(resourceGroupName, amlFilesystemName, autoImportJobName, this.innerModel(), Context.NONE);
        return this;
    }

    public AutoImportJob create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .createOrUpdate(resourceGroupName, amlFilesystemName, autoImportJobName, this.innerModel(), context);
        return this;
    }

    AutoImportJobImpl(String name, com.azure.resourcemanager.storagecache.StorageCacheManager serviceManager) {
        this.innerObject = new AutoImportJobInner();
        this.serviceManager = serviceManager;
        this.autoImportJobName = name;
    }

    public AutoImportJobImpl update() {
        this.updateAutoImportJob = new AutoImportJobUpdate();
        return this;
    }

    public AutoImportJob apply() {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .update(resourceGroupName, amlFilesystemName, autoImportJobName, updateAutoImportJob, Context.NONE);
        return this;
    }

    public AutoImportJob apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .update(resourceGroupName, amlFilesystemName, autoImportJobName, updateAutoImportJob, context);
        return this;
    }

    AutoImportJobImpl(AutoImportJobInner innerObject,
        com.azure.resourcemanager.storagecache.StorageCacheManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.amlFilesystemName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "amlFilesystems");
        this.autoImportJobName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "autoImportJobs");
    }

    public AutoImportJob refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .getWithResponse(resourceGroupName, amlFilesystemName, autoImportJobName, Context.NONE)
            .getValue();
        return this;
    }

    public AutoImportJob refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAutoImportJobs()
            .getWithResponse(resourceGroupName, amlFilesystemName, autoImportJobName, context)
            .getValue();
        return this;
    }

    public AutoImportJobImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AutoImportJobImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AutoImportJobImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateAutoImportJob.withTags(tags);
            return this;
        }
    }

    public AutoImportJobImpl withAdminStatus(AutoImportJobPropertiesAdminStatus adminStatus) {
        this.innerModel().withAdminStatus(adminStatus);
        return this;
    }

    public AutoImportJobImpl withAutoImportPrefixes(List<String> autoImportPrefixes) {
        this.innerModel().withAutoImportPrefixes(autoImportPrefixes);
        return this;
    }

    public AutoImportJobImpl withConflictResolutionMode(ConflictResolutionMode conflictResolutionMode) {
        this.innerModel().withConflictResolutionMode(conflictResolutionMode);
        return this;
    }

    public AutoImportJobImpl withEnableDeletions(Boolean enableDeletions) {
        this.innerModel().withEnableDeletions(enableDeletions);
        return this;
    }

    public AutoImportJobImpl withMaximumErrors(Long maximumErrors) {
        this.innerModel().withMaximumErrors(maximumErrors);
        return this;
    }

    public AutoImportJobImpl withAdminStatus(AutoImportJobUpdatePropertiesAdminStatus adminStatus) {
        this.updateAutoImportJob.withAdminStatus(adminStatus);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
