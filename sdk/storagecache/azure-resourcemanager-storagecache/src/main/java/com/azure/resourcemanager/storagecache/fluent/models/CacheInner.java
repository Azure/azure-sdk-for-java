// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagecache.models.CacheDirectorySettings;
import com.azure.resourcemanager.storagecache.models.CacheEncryptionSettings;
import com.azure.resourcemanager.storagecache.models.CacheHealth;
import com.azure.resourcemanager.storagecache.models.CacheIdentity;
import com.azure.resourcemanager.storagecache.models.CacheNetworkSettings;
import com.azure.resourcemanager.storagecache.models.CacheSecuritySettings;
import com.azure.resourcemanager.storagecache.models.CacheSku;
import com.azure.resourcemanager.storagecache.models.CacheUpgradeStatus;
import com.azure.resourcemanager.storagecache.models.ProvisioningStateType;
import com.azure.resourcemanager.storagecache.models.SystemData;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * A Cache instance. Follows Azure Resource Manager standards:
 * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md.
 */
@JsonFlatten
@Fluent
public class CacheInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CacheInner.class);

    /*
     * The identity of the cache, if configured.
     */
    @JsonProperty(value = "identity")
    private CacheIdentity identity;

    /*
     * The system meta data relating to this resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * SKU for the Cache.
     */
    @JsonProperty(value = "sku")
    private CacheSku sku;

    /*
     * The size of this Cache, in GB.
     */
    @JsonProperty(value = "properties.cacheSizeGB")
    private Integer cacheSizeGB;

    /*
     * Health of the Cache.
     */
    @JsonProperty(value = "properties.health", access = JsonProperty.Access.WRITE_ONLY)
    private CacheHealth health;

    /*
     * Array of IP addresses that can be used by clients mounting this Cache.
     */
    @JsonProperty(value = "properties.mountAddresses", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> mountAddresses;

    /*
     * ARM provisioning state, see
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     */
    @JsonProperty(value = "properties.provisioningState")
    private ProvisioningStateType provisioningState;

    /*
     * Subnet used for the Cache.
     */
    @JsonProperty(value = "properties.subnet")
    private String subnet;

    /*
     * Upgrade status of the Cache.
     */
    @JsonProperty(value = "properties.upgradeStatus")
    private CacheUpgradeStatus upgradeStatus;

    /*
     * Specifies network settings of the cache.
     */
    @JsonProperty(value = "properties.networkSettings")
    private CacheNetworkSettings networkSettings;

    /*
     * Specifies encryption settings of the cache.
     */
    @JsonProperty(value = "properties.encryptionSettings")
    private CacheEncryptionSettings encryptionSettings;

    /*
     * Specifies security settings of the cache.
     */
    @JsonProperty(value = "properties.securitySettings")
    private CacheSecuritySettings securitySettings;

    /*
     * Specifies Directory Services settings of the cache.
     */
    @JsonProperty(value = "properties.directoryServicesSettings")
    private CacheDirectorySettings directoryServicesSettings;

    /**
     * Get the identity property: The identity of the cache, if configured.
     *
     * @return the identity value.
     */
    public CacheIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the cache, if configured.
     *
     * @param identity the identity value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withIdentity(CacheIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: The system meta data relating to this resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the sku property: SKU for the Cache.
     *
     * @return the sku value.
     */
    public CacheSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: SKU for the Cache.
     *
     * @param sku the sku value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withSku(CacheSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the cacheSizeGB property: The size of this Cache, in GB.
     *
     * @return the cacheSizeGB value.
     */
    public Integer cacheSizeGB() {
        return this.cacheSizeGB;
    }

    /**
     * Set the cacheSizeGB property: The size of this Cache, in GB.
     *
     * @param cacheSizeGB the cacheSizeGB value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withCacheSizeGB(Integer cacheSizeGB) {
        this.cacheSizeGB = cacheSizeGB;
        return this;
    }

    /**
     * Get the health property: Health of the Cache.
     *
     * @return the health value.
     */
    public CacheHealth health() {
        return this.health;
    }

    /**
     * Get the mountAddresses property: Array of IP addresses that can be used by clients mounting this Cache.
     *
     * @return the mountAddresses value.
     */
    public List<String> mountAddresses() {
        return this.mountAddresses;
    }

    /**
     * Get the provisioningState property: ARM provisioning state, see
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateType provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: ARM provisioning state, see
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withProvisioningState(ProvisioningStateType provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the subnet property: Subnet used for the Cache.
     *
     * @return the subnet value.
     */
    public String subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Subnet used for the Cache.
     *
     * @param subnet the subnet value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withSubnet(String subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get the upgradeStatus property: Upgrade status of the Cache.
     *
     * @return the upgradeStatus value.
     */
    public CacheUpgradeStatus upgradeStatus() {
        return this.upgradeStatus;
    }

    /**
     * Set the upgradeStatus property: Upgrade status of the Cache.
     *
     * @param upgradeStatus the upgradeStatus value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withUpgradeStatus(CacheUpgradeStatus upgradeStatus) {
        this.upgradeStatus = upgradeStatus;
        return this;
    }

    /**
     * Get the networkSettings property: Specifies network settings of the cache.
     *
     * @return the networkSettings value.
     */
    public CacheNetworkSettings networkSettings() {
        return this.networkSettings;
    }

    /**
     * Set the networkSettings property: Specifies network settings of the cache.
     *
     * @param networkSettings the networkSettings value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withNetworkSettings(CacheNetworkSettings networkSettings) {
        this.networkSettings = networkSettings;
        return this;
    }

    /**
     * Get the encryptionSettings property: Specifies encryption settings of the cache.
     *
     * @return the encryptionSettings value.
     */
    public CacheEncryptionSettings encryptionSettings() {
        return this.encryptionSettings;
    }

    /**
     * Set the encryptionSettings property: Specifies encryption settings of the cache.
     *
     * @param encryptionSettings the encryptionSettings value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withEncryptionSettings(CacheEncryptionSettings encryptionSettings) {
        this.encryptionSettings = encryptionSettings;
        return this;
    }

    /**
     * Get the securitySettings property: Specifies security settings of the cache.
     *
     * @return the securitySettings value.
     */
    public CacheSecuritySettings securitySettings() {
        return this.securitySettings;
    }

    /**
     * Set the securitySettings property: Specifies security settings of the cache.
     *
     * @param securitySettings the securitySettings value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withSecuritySettings(CacheSecuritySettings securitySettings) {
        this.securitySettings = securitySettings;
        return this;
    }

    /**
     * Get the directoryServicesSettings property: Specifies Directory Services settings of the cache.
     *
     * @return the directoryServicesSettings value.
     */
    public CacheDirectorySettings directoryServicesSettings() {
        return this.directoryServicesSettings;
    }

    /**
     * Set the directoryServicesSettings property: Specifies Directory Services settings of the cache.
     *
     * @param directoryServicesSettings the directoryServicesSettings value to set.
     * @return the CacheInner object itself.
     */
    public CacheInner withDirectoryServicesSettings(CacheDirectorySettings directoryServicesSettings) {
        this.directoryServicesSettings = directoryServicesSettings;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CacheInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CacheInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (systemData() != null) {
            systemData().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
        if (health() != null) {
            health().validate();
        }
        if (upgradeStatus() != null) {
            upgradeStatus().validate();
        }
        if (networkSettings() != null) {
            networkSettings().validate();
        }
        if (encryptionSettings() != null) {
            encryptionSettings().validate();
        }
        if (securitySettings() != null) {
            securitySettings().validate();
        }
        if (directoryServicesSettings() != null) {
            directoryServicesSettings().validate();
        }
    }
}
