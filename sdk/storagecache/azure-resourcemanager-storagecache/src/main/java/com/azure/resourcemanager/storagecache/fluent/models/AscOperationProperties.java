// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Additional operation-specific output.
 */
@Fluent
public final class AscOperationProperties implements JsonSerializable<AscOperationProperties> {
    /*
     * Additional operation-specific output.
     */
    private Map<String, Object> output;

    /**
     * Creates an instance of AscOperationProperties class.
     */
    public AscOperationProperties() {
    }

    /**
     * Get the output property: Additional operation-specific output.
     * 
     * @return the output value.
     */
    public Map<String, Object> output() {
        return this.output;
    }

    /**
     * Set the output property: Additional operation-specific output.
     * 
     * @param output the output value to set.
     * @return the AscOperationProperties object itself.
     */
    public AscOperationProperties withOutput(Map<String, Object> output) {
        this.output = output;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("output", this.output, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AscOperationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AscOperationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AscOperationProperties.
     */
    public static AscOperationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AscOperationProperties deserializedAscOperationProperties = new AscOperationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("output".equals(fieldName)) {
                    Map<String, Object> output = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAscOperationProperties.output = output;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAscOperationProperties;
        });
    }
}
