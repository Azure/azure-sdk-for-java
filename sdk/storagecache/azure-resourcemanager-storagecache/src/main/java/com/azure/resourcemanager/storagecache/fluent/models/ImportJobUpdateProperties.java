// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.ImportJobAdminStatus;
import java.io.IOException;

/**
 * The ImportJobUpdateProperties model.
 */
@Fluent
public final class ImportJobUpdateProperties implements JsonSerializable<ImportJobUpdateProperties> {
    /*
     * The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel'
     * will cancel the current active import job.
     */
    private ImportJobAdminStatus adminStatus;

    /**
     * Creates an instance of ImportJobUpdateProperties class.
     */
    public ImportJobUpdateProperties() {
    }

    /**
     * Get the adminStatus property: The administrative status of the import job. Possible values: 'Active', 'Cancel'.
     * Passing in a value of 'Cancel' will cancel the current active import job.
     * 
     * @return the adminStatus value.
     */
    public ImportJobAdminStatus adminStatus() {
        return this.adminStatus;
    }

    /**
     * Set the adminStatus property: The administrative status of the import job. Possible values: 'Active', 'Cancel'.
     * Passing in a value of 'Cancel' will cancel the current active import job.
     * 
     * @param adminStatus the adminStatus value to set.
     * @return the ImportJobUpdateProperties object itself.
     */
    public ImportJobUpdateProperties withAdminStatus(ImportJobAdminStatus adminStatus) {
        this.adminStatus = adminStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminStatus", this.adminStatus == null ? null : this.adminStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportJobUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportJobUpdateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImportJobUpdateProperties.
     */
    public static ImportJobUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportJobUpdateProperties deserializedImportJobUpdateProperties = new ImportJobUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminStatus".equals(fieldName)) {
                    deserializedImportJobUpdateProperties.adminStatus
                        = ImportJobAdminStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportJobUpdateProperties;
        });
    }
}
