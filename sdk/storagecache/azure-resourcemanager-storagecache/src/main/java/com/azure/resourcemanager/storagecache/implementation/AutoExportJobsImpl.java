// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagecache.fluent.AutoExportJobsClient;
import com.azure.resourcemanager.storagecache.fluent.models.AutoExportJobInner;
import com.azure.resourcemanager.storagecache.models.AutoExportJob;
import com.azure.resourcemanager.storagecache.models.AutoExportJobs;

public final class AutoExportJobsImpl implements AutoExportJobs {
    private static final ClientLogger LOGGER = new ClientLogger(AutoExportJobsImpl.class);

    private final AutoExportJobsClient innerClient;

    private final com.azure.resourcemanager.storagecache.StorageCacheManager serviceManager;

    public AutoExportJobsImpl(AutoExportJobsClient innerClient,
        com.azure.resourcemanager.storagecache.StorageCacheManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String amlFilesystemName, String autoExportJobName) {
        this.serviceClient().delete(resourceGroupName, amlFilesystemName, autoExportJobName);
    }

    public void delete(String resourceGroupName, String amlFilesystemName, String autoExportJobName, Context context) {
        this.serviceClient().delete(resourceGroupName, amlFilesystemName, autoExportJobName, context);
    }

    public Response<AutoExportJob> getWithResponse(String resourceGroupName, String amlFilesystemName,
        String autoExportJobName, Context context) {
        Response<AutoExportJobInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AutoExportJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AutoExportJob get(String resourceGroupName, String amlFilesystemName, String autoExportJobName) {
        AutoExportJobInner inner = this.serviceClient().get(resourceGroupName, amlFilesystemName, autoExportJobName);
        if (inner != null) {
            return new AutoExportJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<AutoExportJob> listByAmlFilesystem(String resourceGroupName, String amlFilesystemName) {
        PagedIterable<AutoExportJobInner> inner
            = this.serviceClient().listByAmlFilesystem(resourceGroupName, amlFilesystemName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutoExportJobImpl(inner1, this.manager()));
    }

    public PagedIterable<AutoExportJob> listByAmlFilesystem(String resourceGroupName, String amlFilesystemName,
        Context context) {
        PagedIterable<AutoExportJobInner> inner
            = this.serviceClient().listByAmlFilesystem(resourceGroupName, amlFilesystemName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AutoExportJobImpl(inner1, this.manager()));
    }

    public AutoExportJob getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amlFilesystemName = ResourceManagerUtils.getValueFromIdByName(id, "amlFilesystems");
        if (amlFilesystemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amlFilesystems'.", id)));
        }
        String autoExportJobName = ResourceManagerUtils.getValueFromIdByName(id, "autoExportJobs");
        if (autoExportJobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autoExportJobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, Context.NONE).getValue();
    }

    public Response<AutoExportJob> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amlFilesystemName = ResourceManagerUtils.getValueFromIdByName(id, "amlFilesystems");
        if (amlFilesystemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amlFilesystems'.", id)));
        }
        String autoExportJobName = ResourceManagerUtils.getValueFromIdByName(id, "autoExportJobs");
        if (autoExportJobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autoExportJobs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, amlFilesystemName, autoExportJobName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amlFilesystemName = ResourceManagerUtils.getValueFromIdByName(id, "amlFilesystems");
        if (amlFilesystemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amlFilesystems'.", id)));
        }
        String autoExportJobName = ResourceManagerUtils.getValueFromIdByName(id, "autoExportJobs");
        if (autoExportJobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autoExportJobs'.", id)));
        }
        this.delete(resourceGroupName, amlFilesystemName, autoExportJobName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String amlFilesystemName = ResourceManagerUtils.getValueFromIdByName(id, "amlFilesystems");
        if (amlFilesystemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'amlFilesystems'.", id)));
        }
        String autoExportJobName = ResourceManagerUtils.getValueFromIdByName(id, "autoExportJobs");
        if (autoExportJobName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'autoExportJobs'.", id)));
        }
        this.delete(resourceGroupName, amlFilesystemName, autoExportJobName, context);
    }

    private AutoExportJobsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagecache.StorageCacheManager manager() {
        return this.serviceManager;
    }

    public AutoExportJobImpl define(String name) {
        return new AutoExportJobImpl(name, this.manager());
    }
}
