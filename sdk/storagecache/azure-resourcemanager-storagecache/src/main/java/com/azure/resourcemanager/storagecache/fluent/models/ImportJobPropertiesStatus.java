// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.storagecache.models.ImportStatusType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * The status of the import.
 */
@Immutable
public final class ImportJobPropertiesStatus {
    /*
     * The state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private ImportStatusType state;

    /*
     * The status message of the import job.
     */
    @JsonProperty(value = "statusMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String statusMessage;

    /*
     * The total blob objects walked.
     */
    @JsonProperty(value = "totalBlobsWalked", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalBlobsWalked;

    /*
     * A recent and frequently updated rate of blobs walked per second.
     */
    @JsonProperty(value = "blobsWalkedPerSecond", access = JsonProperty.Access.WRITE_ONLY)
    private Long blobsWalkedPerSecond;

    /*
     * The total blobs that have been imported since import began.
     */
    @JsonProperty(value = "totalBlobsImported", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalBlobsImported;

    /*
     * A recent and frequently updated rate of total files, directories, and symlinks imported per second.
     */
    @JsonProperty(value = "blobsImportedPerSecond", access = JsonProperty.Access.WRITE_ONLY)
    private Long blobsImportedPerSecond;

    /*
     * The time of the last completed archive operation
     */
    @JsonProperty(value = "lastCompletionTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastCompletionTime;

    /*
     * The time the latest archive operation started
     */
    @JsonProperty(value = "lastStartedTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastStartedTime;

    /*
     * Number of errors in the import job.
     */
    @JsonProperty(value = "totalErrors", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalErrors;

    /*
     * Number of conflicts in the import job.
     */
    @JsonProperty(value = "totalConflicts", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalConflicts;

    /**
     * Creates an instance of ImportJobPropertiesStatus class.
     */
    public ImportJobPropertiesStatus() {
    }

    /**
     * Get the state property: The state of the import job. InProgress indicates the import is still running. Canceled
     * indicates it has been canceled by the user. Completed indicates import finished, successfully importing all
     * discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either
     * were found to be conflicting and could not be imported or other errors were encountered. Failed means the import
     * was unable to complete due to a fatal error.
     * 
     * @return the state value.
     */
    public ImportStatusType state() {
        return this.state;
    }

    /**
     * Get the statusMessage property: The status message of the import job.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the totalBlobsWalked property: The total blob objects walked.
     * 
     * @return the totalBlobsWalked value.
     */
    public Long totalBlobsWalked() {
        return this.totalBlobsWalked;
    }

    /**
     * Get the blobsWalkedPerSecond property: A recent and frequently updated rate of blobs walked per second.
     * 
     * @return the blobsWalkedPerSecond value.
     */
    public Long blobsWalkedPerSecond() {
        return this.blobsWalkedPerSecond;
    }

    /**
     * Get the totalBlobsImported property: The total blobs that have been imported since import began.
     * 
     * @return the totalBlobsImported value.
     */
    public Long totalBlobsImported() {
        return this.totalBlobsImported;
    }

    /**
     * Get the blobsImportedPerSecond property: A recent and frequently updated rate of total files, directories, and
     * symlinks imported per second.
     * 
     * @return the blobsImportedPerSecond value.
     */
    public Long blobsImportedPerSecond() {
        return this.blobsImportedPerSecond;
    }

    /**
     * Get the lastCompletionTime property: The time of the last completed archive operation.
     * 
     * @return the lastCompletionTime value.
     */
    public OffsetDateTime lastCompletionTime() {
        return this.lastCompletionTime;
    }

    /**
     * Get the lastStartedTime property: The time the latest archive operation started.
     * 
     * @return the lastStartedTime value.
     */
    public OffsetDateTime lastStartedTime() {
        return this.lastStartedTime;
    }

    /**
     * Get the totalErrors property: Number of errors in the import job.
     * 
     * @return the totalErrors value.
     */
    public Integer totalErrors() {
        return this.totalErrors;
    }

    /**
     * Get the totalConflicts property: Number of conflicts in the import job.
     * 
     * @return the totalConflicts value.
     */
    public Integer totalConflicts() {
        return this.totalConflicts;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
