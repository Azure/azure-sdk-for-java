// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
import com.azure.resourcemanager.storagecache.models.ClfsTarget;
import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
import com.azure.resourcemanager.storagecache.models.Nfs3Target;
import com.azure.resourcemanager.storagecache.models.OperationalStateType;
import com.azure.resourcemanager.storagecache.models.ProvisioningStateType;
import com.azure.resourcemanager.storagecache.models.StorageTargetResource;
import com.azure.resourcemanager.storagecache.models.StorageTargetType;
import com.azure.resourcemanager.storagecache.models.UnknownTarget;
import java.io.IOException;
import java.util.List;

/**
 * Type of the Storage Target.
 */
@Fluent
public final class StorageTargetInner extends StorageTargetResource {
    /*
     * StorageTarget properties
     */
    private StorageTargetProperties innerProperties;

    /*
     * The system meta data relating to this resource.
     */
    private SystemData systemData;

    /*
     * Region name string.
     */
    private String location;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of StorageTargetInner class.
     */
    public StorageTargetInner() {
    }

    /**
     * Get the innerProperties property: StorageTarget properties.
     * 
     * @return the innerProperties value.
     */
    private StorageTargetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system meta data relating to this resource.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the location property: Region name string.
     * 
     * @return the location value.
     */
    @Override
    public String location() {
        return this.location;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the junctions property: List of cache namespace junctions to target for namespace associations.
     * 
     * @return the junctions value.
     */
    public List<NamespaceJunction> junctions() {
        return this.innerProperties() == null ? null : this.innerProperties().junctions();
    }

    /**
     * Set the junctions property: List of cache namespace junctions to target for namespace associations.
     * 
     * @param junctions the junctions value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withJunctions(List<NamespaceJunction> junctions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withJunctions(junctions);
        return this;
    }

    /**
     * Get the targetType property: Type of the Storage Target.
     * 
     * @return the targetType value.
     */
    public StorageTargetType targetType() {
        return this.innerProperties() == null ? null : this.innerProperties().targetType();
    }

    /**
     * Set the targetType property: Type of the Storage Target.
     * 
     * @param targetType the targetType value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withTargetType(StorageTargetType targetType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withTargetType(targetType);
        return this;
    }

    /**
     * Get the provisioningState property: ARM provisioning state, see
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateType provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the state property: Storage target operational state.
     * 
     * @return the state value.
     */
    public OperationalStateType state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Set the state property: Storage target operational state.
     * 
     * @param state the state value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withState(OperationalStateType state) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withState(state);
        return this;
    }

    /**
     * Get the nfs3 property: Properties when targetType is nfs3.
     * 
     * @return the nfs3 value.
     */
    public Nfs3Target nfs3() {
        return this.innerProperties() == null ? null : this.innerProperties().nfs3();
    }

    /**
     * Set the nfs3 property: Properties when targetType is nfs3.
     * 
     * @param nfs3 the nfs3 value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withNfs3(Nfs3Target nfs3) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withNfs3(nfs3);
        return this;
    }

    /**
     * Get the clfs property: Properties when targetType is clfs.
     * 
     * @return the clfs value.
     */
    public ClfsTarget clfs() {
        return this.innerProperties() == null ? null : this.innerProperties().clfs();
    }

    /**
     * Set the clfs property: Properties when targetType is clfs.
     * 
     * @param clfs the clfs value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withClfs(ClfsTarget clfs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withClfs(clfs);
        return this;
    }

    /**
     * Get the unknown property: Properties when targetType is unknown.
     * 
     * @return the unknown value.
     */
    public UnknownTarget unknown() {
        return this.innerProperties() == null ? null : this.innerProperties().unknown();
    }

    /**
     * Set the unknown property: Properties when targetType is unknown.
     * 
     * @param unknown the unknown value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withUnknown(UnknownTarget unknown) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withUnknown(unknown);
        return this;
    }

    /**
     * Get the blobNfs property: Properties when targetType is blobNfs.
     * 
     * @return the blobNfs value.
     */
    public BlobNfsTarget blobNfs() {
        return this.innerProperties() == null ? null : this.innerProperties().blobNfs();
    }

    /**
     * Set the blobNfs property: Properties when targetType is blobNfs.
     * 
     * @param blobNfs the blobNfs value to set.
     * @return the StorageTargetInner object itself.
     */
    public StorageTargetInner withBlobNfs(BlobNfsTarget blobNfs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTargetProperties();
        }
        this.innerProperties().withBlobNfs(blobNfs);
        return this;
    }

    /**
     * Get the allocationPercentage property: The percentage of cache space allocated for this storage target.
     * 
     * @return the allocationPercentage value.
     */
    public Integer allocationPercentage() {
        return this.innerProperties() == null ? null : this.innerProperties().allocationPercentage();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTargetInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTargetInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTargetInner.
     */
    public static StorageTargetInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTargetInner deserializedStorageTargetInner = new StorageTargetInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStorageTargetInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedStorageTargetInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStorageTargetInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedStorageTargetInner.location = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedStorageTargetInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedStorageTargetInner.innerProperties = StorageTargetProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTargetInner;
        });
    }
}
