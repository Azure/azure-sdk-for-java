// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A namespace junction. */
@Fluent
public final class NamespaceJunction {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NamespaceJunction.class);

    /*
     * Namespace path on a Cache for a Storage Target.
     */
    @JsonProperty(value = "namespacePath")
    private String namespacePath;

    /*
     * Path in Storage Target to which namespacePath points.
     */
    @JsonProperty(value = "targetPath")
    private String targetPath;

    /*
     * NFS export where targetPath exists.
     */
    @JsonProperty(value = "nfsExport")
    private String nfsExport;

    /*
     * Name of the access policy applied to this junction.
     */
    @JsonProperty(value = "nfsAccessPolicy")
    private String nfsAccessPolicy;

    /**
     * Get the namespacePath property: Namespace path on a Cache for a Storage Target.
     *
     * @return the namespacePath value.
     */
    public String namespacePath() {
        return this.namespacePath;
    }

    /**
     * Set the namespacePath property: Namespace path on a Cache for a Storage Target.
     *
     * @param namespacePath the namespacePath value to set.
     * @return the NamespaceJunction object itself.
     */
    public NamespaceJunction withNamespacePath(String namespacePath) {
        this.namespacePath = namespacePath;
        return this;
    }

    /**
     * Get the targetPath property: Path in Storage Target to which namespacePath points.
     *
     * @return the targetPath value.
     */
    public String targetPath() {
        return this.targetPath;
    }

    /**
     * Set the targetPath property: Path in Storage Target to which namespacePath points.
     *
     * @param targetPath the targetPath value to set.
     * @return the NamespaceJunction object itself.
     */
    public NamespaceJunction withTargetPath(String targetPath) {
        this.targetPath = targetPath;
        return this;
    }

    /**
     * Get the nfsExport property: NFS export where targetPath exists.
     *
     * @return the nfsExport value.
     */
    public String nfsExport() {
        return this.nfsExport;
    }

    /**
     * Set the nfsExport property: NFS export where targetPath exists.
     *
     * @param nfsExport the nfsExport value to set.
     * @return the NamespaceJunction object itself.
     */
    public NamespaceJunction withNfsExport(String nfsExport) {
        this.nfsExport = nfsExport;
        return this;
    }

    /**
     * Get the nfsAccessPolicy property: Name of the access policy applied to this junction.
     *
     * @return the nfsAccessPolicy value.
     */
    public String nfsAccessPolicy() {
        return this.nfsAccessPolicy;
    }

    /**
     * Set the nfsAccessPolicy property: Name of the access policy applied to this junction.
     *
     * @param nfsAccessPolicy the nfsAccessPolicy value to set.
     * @return the NamespaceJunction object itself.
     */
    public NamespaceJunction withNfsAccessPolicy(String nfsAccessPolicy) {
        this.nfsAccessPolicy = nfsAccessPolicy;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
