// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagecache.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The storage account blob change feed status of the auto import job.
 */
@Immutable
public final class AutoImportJobPropertiesStatusBlobSyncEvents
    implements JsonSerializable<AutoImportJobPropertiesStatusBlobSyncEvents> {
    /*
     * Number of files imported during auto import.
     */
    private Long importedFiles;

    /*
     * Number of directories imported during auto import.
     */
    private Long importedDirectories;

    /*
     * Number of symlinks imported during auto import.
     */
    private Long importedSymlinks;

    /*
     * Number of preexisting files during auto import.
     */
    private Long preexistingFiles;

    /*
     * Number of preexisting directories during auto import.
     */
    private Long preexistingDirectories;

    /*
     * Number of preexisting symlinks during auto import.
     */
    private Long preexistingSymlinks;

    /*
     * Total number of blobs imported during auto import.
     */
    private Long totalBlobsImported;

    /*
     * Rate of blob import per second during auto import.
     */
    private Long rateOfBlobImport;

    /*
     * Total errors encountered during auto import.
     */
    private Long totalErrors;

    /*
     * Total conflicts encountered during auto import.
     */
    private Long totalConflicts;

    /*
     * Number of deletions during auto import.
     */
    private Long deletions;

    /*
     * Date and time of the last Change Feed event consumed.
     */
    private OffsetDateTime lastChangeFeedEventConsumedTime;

    /*
     * Date and time when last fully synchronized.
     */
    private OffsetDateTime lastTimeFullySynchronized;

    /**
     * Creates an instance of AutoImportJobPropertiesStatusBlobSyncEvents class.
     */
    public AutoImportJobPropertiesStatusBlobSyncEvents() {
    }

    /**
     * Get the importedFiles property: Number of files imported during auto import.
     * 
     * @return the importedFiles value.
     */
    public Long importedFiles() {
        return this.importedFiles;
    }

    /**
     * Get the importedDirectories property: Number of directories imported during auto import.
     * 
     * @return the importedDirectories value.
     */
    public Long importedDirectories() {
        return this.importedDirectories;
    }

    /**
     * Get the importedSymlinks property: Number of symlinks imported during auto import.
     * 
     * @return the importedSymlinks value.
     */
    public Long importedSymlinks() {
        return this.importedSymlinks;
    }

    /**
     * Get the preexistingFiles property: Number of preexisting files during auto import.
     * 
     * @return the preexistingFiles value.
     */
    public Long preexistingFiles() {
        return this.preexistingFiles;
    }

    /**
     * Get the preexistingDirectories property: Number of preexisting directories during auto import.
     * 
     * @return the preexistingDirectories value.
     */
    public Long preexistingDirectories() {
        return this.preexistingDirectories;
    }

    /**
     * Get the preexistingSymlinks property: Number of preexisting symlinks during auto import.
     * 
     * @return the preexistingSymlinks value.
     */
    public Long preexistingSymlinks() {
        return this.preexistingSymlinks;
    }

    /**
     * Get the totalBlobsImported property: Total number of blobs imported during auto import.
     * 
     * @return the totalBlobsImported value.
     */
    public Long totalBlobsImported() {
        return this.totalBlobsImported;
    }

    /**
     * Get the rateOfBlobImport property: Rate of blob import per second during auto import.
     * 
     * @return the rateOfBlobImport value.
     */
    public Long rateOfBlobImport() {
        return this.rateOfBlobImport;
    }

    /**
     * Get the totalErrors property: Total errors encountered during auto import.
     * 
     * @return the totalErrors value.
     */
    public Long totalErrors() {
        return this.totalErrors;
    }

    /**
     * Get the totalConflicts property: Total conflicts encountered during auto import.
     * 
     * @return the totalConflicts value.
     */
    public Long totalConflicts() {
        return this.totalConflicts;
    }

    /**
     * Get the deletions property: Number of deletions during auto import.
     * 
     * @return the deletions value.
     */
    public Long deletions() {
        return this.deletions;
    }

    /**
     * Get the lastChangeFeedEventConsumedTime property: Date and time of the last Change Feed event consumed.
     * 
     * @return the lastChangeFeedEventConsumedTime value.
     */
    public OffsetDateTime lastChangeFeedEventConsumedTime() {
        return this.lastChangeFeedEventConsumedTime;
    }

    /**
     * Get the lastTimeFullySynchronized property: Date and time when last fully synchronized.
     * 
     * @return the lastTimeFullySynchronized value.
     */
    public OffsetDateTime lastTimeFullySynchronized() {
        return this.lastTimeFullySynchronized;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoImportJobPropertiesStatusBlobSyncEvents from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoImportJobPropertiesStatusBlobSyncEvents if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoImportJobPropertiesStatusBlobSyncEvents.
     */
    public static AutoImportJobPropertiesStatusBlobSyncEvents fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoImportJobPropertiesStatusBlobSyncEvents deserializedAutoImportJobPropertiesStatusBlobSyncEvents
                = new AutoImportJobPropertiesStatusBlobSyncEvents();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("importedFiles".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.importedFiles
                        = reader.getNullable(JsonReader::getLong);
                } else if ("importedDirectories".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.importedDirectories
                        = reader.getNullable(JsonReader::getLong);
                } else if ("importedSymlinks".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.importedSymlinks
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingFiles".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.preexistingFiles
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingDirectories".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.preexistingDirectories
                        = reader.getNullable(JsonReader::getLong);
                } else if ("preexistingSymlinks".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.preexistingSymlinks
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalBlobsImported".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.totalBlobsImported
                        = reader.getNullable(JsonReader::getLong);
                } else if ("rateOfBlobImport".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.rateOfBlobImport
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalErrors".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.totalErrors
                        = reader.getNullable(JsonReader::getLong);
                } else if ("totalConflicts".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.totalConflicts
                        = reader.getNullable(JsonReader::getLong);
                } else if ("deletions".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.deletions
                        = reader.getNullable(JsonReader::getLong);
                } else if ("lastChangeFeedEventConsumedTime".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.lastChangeFeedEventConsumedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastTimeFullySynchronized".equals(fieldName)) {
                    deserializedAutoImportJobPropertiesStatusBlobSyncEvents.lastTimeFullySynchronized = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoImportJobPropertiesStatusBlobSyncEvents;
        });
    }
}
