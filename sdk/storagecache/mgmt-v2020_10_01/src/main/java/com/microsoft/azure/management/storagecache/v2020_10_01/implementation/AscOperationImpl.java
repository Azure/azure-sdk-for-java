/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_10_01.implementation;

import com.microsoft.azure.management.storagecache.v2020_10_01.AscOperation;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import com.microsoft.azure.management.storagecache.v2020_10_01.ErrorResponse;
import java.util.Map;

class AscOperationImpl extends IndexableRefreshableWrapperImpl<AscOperation, AscOperationInner> implements AscOperation {
    private final StorageCacheManager manager;
    private String location;
    private String operationId;

    AscOperationImpl(AscOperationInner inner,  StorageCacheManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.location = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
        this.operationId = IdParsingUtils.getValueFromIdByName(inner.id(), "ascOperations");
    }

    @Override
    public StorageCacheManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<AscOperationInner> getInnerAsync() {
        AscOperationsInner client = this.manager().inner().ascOperations();
        return client.getAsync(this.location, this.operationId);
    }



    @Override
    public String endTime() {
        return this.inner().endTime();
    }

    @Override
    public ErrorResponse error() {
        return this.inner().error();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, Object> output() {
        return this.inner().output();
    }

    @Override
    public String startTime() {
        return this.inner().startTime();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

}
