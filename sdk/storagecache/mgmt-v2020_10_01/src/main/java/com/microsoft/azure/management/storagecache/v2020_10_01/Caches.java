/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_10_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.storagecache.v2020_10_01.implementation.CachesInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Caches.
 */
public interface Caches extends SupportsCreating<Cache.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Cache>, SupportsListingByResourceGroup<Cache>, SupportsListing<Cache>, HasInner<CachesInner> {
    /**
     * Tells a Cache to write generate debug info for support to process.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable debugInfoAsync(String resourceGroupName, String cacheName);

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable flushAsync(String resourceGroupName, String cacheName);

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startAsync(String resourceGroupName, String cacheName);

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopAsync(String resourceGroupName, String cacheName);

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable upgradeFirmwareAsync(String resourceGroupName, String cacheName);

}
