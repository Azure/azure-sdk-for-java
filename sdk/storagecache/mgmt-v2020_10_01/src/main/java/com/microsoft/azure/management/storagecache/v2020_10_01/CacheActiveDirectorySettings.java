/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_10_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Active Directory settings used to join a cache to a domain.
 */
public class CacheActiveDirectorySettings {
    /**
     * Primary DNS IP address used to resolve the Active Directory domain
     * controller's fully qualified domain name.
     */
    @JsonProperty(value = "primaryDnsIpAddress", required = true)
    private String primaryDnsIpAddress;

    /**
     * Secondary DNS IP address used to resolve the Active Directory domain
     * controller's fully qualified domain name.
     */
    @JsonProperty(value = "secondaryDnsIpAddress")
    private String secondaryDnsIpAddress;

    /**
     * The fully qualified domain name of the Active Directory domain
     * controller.
     */
    @JsonProperty(value = "domainName", required = true)
    private String domainName;

    /**
     * The Active Directory domain's NetBIOS name.
     */
    @JsonProperty(value = "domainNetBiosName", required = true)
    private String domainNetBiosName;

    /**
     * The NetBIOS name to assign to the HPC Cache when it joins the Active
     * Directory domain as a server. Length must 1-15 characters from the class
     * [-0-9a-zA-Z].
     */
    @JsonProperty(value = "cacheNetBiosName", required = true)
    private String cacheNetBiosName;

    /**
     * True if the HPC Cache is joined to the Active Directory domain. Possible
     * values include: 'Yes', 'No', 'Error'.
     */
    @JsonProperty(value = "domainJoined", access = JsonProperty.Access.WRITE_ONLY)
    private DomainJoinedType domainJoined;

    /**
     * Active Directory admin credentials used to join the HPC Cache to a
     * domain.
     */
    @JsonProperty(value = "credentials")
    private CacheActiveDirectorySettingsCredentials credentials;

    /**
     * Get primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
     *
     * @return the primaryDnsIpAddress value
     */
    public String primaryDnsIpAddress() {
        return this.primaryDnsIpAddress;
    }

    /**
     * Set primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
     *
     * @param primaryDnsIpAddress the primaryDnsIpAddress value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withPrimaryDnsIpAddress(String primaryDnsIpAddress) {
        this.primaryDnsIpAddress = primaryDnsIpAddress;
        return this;
    }

    /**
     * Get secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
     *
     * @return the secondaryDnsIpAddress value
     */
    public String secondaryDnsIpAddress() {
        return this.secondaryDnsIpAddress;
    }

    /**
     * Set secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
     *
     * @param secondaryDnsIpAddress the secondaryDnsIpAddress value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withSecondaryDnsIpAddress(String secondaryDnsIpAddress) {
        this.secondaryDnsIpAddress = secondaryDnsIpAddress;
        return this;
    }

    /**
     * Get the fully qualified domain name of the Active Directory domain controller.
     *
     * @return the domainName value
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the fully qualified domain name of the Active Directory domain controller.
     *
     * @param domainName the domainName value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the Active Directory domain's NetBIOS name.
     *
     * @return the domainNetBiosName value
     */
    public String domainNetBiosName() {
        return this.domainNetBiosName;
    }

    /**
     * Set the Active Directory domain's NetBIOS name.
     *
     * @param domainNetBiosName the domainNetBiosName value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withDomainNetBiosName(String domainNetBiosName) {
        this.domainNetBiosName = domainNetBiosName;
        return this;
    }

    /**
     * Get the NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
     *
     * @return the cacheNetBiosName value
     */
    public String cacheNetBiosName() {
        return this.cacheNetBiosName;
    }

    /**
     * Set the NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
     *
     * @param cacheNetBiosName the cacheNetBiosName value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withCacheNetBiosName(String cacheNetBiosName) {
        this.cacheNetBiosName = cacheNetBiosName;
        return this;
    }

    /**
     * Get true if the HPC Cache is joined to the Active Directory domain. Possible values include: 'Yes', 'No', 'Error'.
     *
     * @return the domainJoined value
     */
    public DomainJoinedType domainJoined() {
        return this.domainJoined;
    }

    /**
     * Get active Directory admin credentials used to join the HPC Cache to a domain.
     *
     * @return the credentials value
     */
    public CacheActiveDirectorySettingsCredentials credentials() {
        return this.credentials;
    }

    /**
     * Set active Directory admin credentials used to join the HPC Cache to a domain.
     *
     * @param credentials the credentials value to set
     * @return the CacheActiveDirectorySettings object itself.
     */
    public CacheActiveDirectorySettings withCredentials(CacheActiveDirectorySettingsCredentials credentials) {
        this.credentials = credentials;
        return this;
    }

}
