/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_10_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Rule to place restrictions on portions of the cache namespace being
 * presented to clients.
 */
public class NfsAccessRule {
    /**
     * Scope for this rule. The scope and filter determine which clients match
     * the rule. Possible values include: 'default', 'network', 'host'.
     */
    @JsonProperty(value = "scope", required = true)
    private NfsAccessRuleScope scope;

    /**
     * Filter applied to the scope for this rule. The filter's format depends
     * on its scope. 'default' scope matches all clients and has no filter
     * value. 'network' scope takes a filter in CIDR format (for example,
     * 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name
     * as filter. If a client does not match any filter rule and there is no
     * default rule, access is denied.
     */
    @JsonProperty(value = "filter")
    private String filter;

    /**
     * Access allowed by this rule. Possible values include: 'no', 'ro', 'rw'.
     */
    @JsonProperty(value = "access", required = true)
    private NfsAccessRuleAccess access;

    /**
     * Allow SUID semantics.
     */
    @JsonProperty(value = "suid")
    private Boolean suid;

    /**
     * For the default policy, allow access to subdirectories under the root
     * export. If this is set to no, clients can only mount the path '/'. If
     * set to yes, clients can mount a deeper path, like '/a/b'.
     */
    @JsonProperty(value = "submountAccess")
    private Boolean submountAccess;

    /**
     * Map root accesses to anonymousUID and anonymousGID.
     */
    @JsonProperty(value = "rootSquash")
    private Boolean rootSquash;

    /**
     * UID value that replaces 0 when rootSquash is true.
     */
    @JsonProperty(value = "anonymousUID")
    private String anonymousUID;

    /**
     * GID value that replaces 0 when rootSquash is true.
     */
    @JsonProperty(value = "anonymousGID")
    private String anonymousGID;

    /**
     * Get scope for this rule. The scope and filter determine which clients match the rule. Possible values include: 'default', 'network', 'host'.
     *
     * @return the scope value
     */
    public NfsAccessRuleScope scope() {
        return this.scope;
    }

    /**
     * Set scope for this rule. The scope and filter determine which clients match the rule. Possible values include: 'default', 'network', 'host'.
     *
     * @param scope the scope value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withScope(NfsAccessRuleScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
     *
     * @return the filter value
     */
    public String filter() {
        return this.filter;
    }

    /**
     * Set filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
     *
     * @param filter the filter value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get access allowed by this rule. Possible values include: 'no', 'ro', 'rw'.
     *
     * @return the access value
     */
    public NfsAccessRuleAccess access() {
        return this.access;
    }

    /**
     * Set access allowed by this rule. Possible values include: 'no', 'ro', 'rw'.
     *
     * @param access the access value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withAccess(NfsAccessRuleAccess access) {
        this.access = access;
        return this;
    }

    /**
     * Get allow SUID semantics.
     *
     * @return the suid value
     */
    public Boolean suid() {
        return this.suid;
    }

    /**
     * Set allow SUID semantics.
     *
     * @param suid the suid value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withSuid(Boolean suid) {
        this.suid = suid;
        return this;
    }

    /**
     * Get for the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
     *
     * @return the submountAccess value
     */
    public Boolean submountAccess() {
        return this.submountAccess;
    }

    /**
     * Set for the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'.
     *
     * @param submountAccess the submountAccess value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withSubmountAccess(Boolean submountAccess) {
        this.submountAccess = submountAccess;
        return this;
    }

    /**
     * Get map root accesses to anonymousUID and anonymousGID.
     *
     * @return the rootSquash value
     */
    public Boolean rootSquash() {
        return this.rootSquash;
    }

    /**
     * Set map root accesses to anonymousUID and anonymousGID.
     *
     * @param rootSquash the rootSquash value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withRootSquash(Boolean rootSquash) {
        this.rootSquash = rootSquash;
        return this;
    }

    /**
     * Get uID value that replaces 0 when rootSquash is true.
     *
     * @return the anonymousUID value
     */
    public String anonymousUID() {
        return this.anonymousUID;
    }

    /**
     * Set uID value that replaces 0 when rootSquash is true.
     *
     * @param anonymousUID the anonymousUID value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withAnonymousUID(String anonymousUID) {
        this.anonymousUID = anonymousUID;
        return this;
    }

    /**
     * Get gID value that replaces 0 when rootSquash is true.
     *
     * @return the anonymousGID value
     */
    public String anonymousGID() {
        return this.anonymousGID;
    }

    /**
     * Set gID value that replaces 0 when rootSquash is true.
     *
     * @param anonymousGID the anonymousGID value to set
     * @return the NfsAccessRule object itself.
     */
    public NfsAccessRule withAnonymousGID(String anonymousGID) {
        this.anonymousGID = anonymousGID;
        return this;
    }

}
