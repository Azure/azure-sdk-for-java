/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_03_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.storagecache.v2020_03_01.implementation.StorageTargetInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.storagecache.v2020_03_01.implementation.StorageCacheManager;
import java.util.List;

/**
 * Type representing StorageTarget.
 */
public interface StorageTarget extends HasInner<StorageTargetInner>, Indexable, Refreshable<StorageTarget>, Updatable<StorageTarget.Update>, HasManager<StorageCacheManager> {
    /**
     * @return the clfs value.
     */
    ClfsTarget clfs();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the junctions value.
     */
    List<NamespaceJunction> junctions();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the nfs3 value.
     */
    Nfs3Target nfs3();

    /**
     * @return the provisioningState value.
     */
    ProvisioningStateType provisioningState();

    /**
     * @return the targetType value.
     */
    String targetType();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the unknown value.
     */
    UnknownTarget unknown();

    /**
     * The entirety of the StorageTarget definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCach, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of StorageTarget definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a StorageTarget definition.
         */
        interface Blank extends WithCach {
        }

        /**
         * The stage of the storagetarget definition allowing to specify Cach.
         */
        interface WithCach {
           /**
            * Specifies resourceGroupName, cacheName.
            * @param resourceGroupName Target resource group
            * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class
            * @return the next definition stage
            */
            WithCreate withExistingCach(String resourceGroupName, String cacheName);
        }

        /**
         * The stage of the storagetarget definition allowing to specify Clfs.
         */
        interface WithClfs {
            /**
             * Specifies clfs.
             * @param clfs Properties when targetType is clfs
             * @return the next definition stage
             */
            WithCreate withClfs(ClfsTarget clfs);
        }

        /**
         * The stage of the storagetarget definition allowing to specify Junctions.
         */
        interface WithJunctions {
            /**
             * Specifies junctions.
             * @param junctions List of Cache namespace junctions to target for namespace associations
             * @return the next definition stage
             */
            WithCreate withJunctions(List<NamespaceJunction> junctions);
        }

        /**
         * The stage of the storagetarget definition allowing to specify Nfs3.
         */
        interface WithNfs3 {
            /**
             * Specifies nfs3.
             * @param nfs3 Properties when targetType is nfs3
             * @return the next definition stage
             */
            WithCreate withNfs3(Nfs3Target nfs3);
        }

        /**
         * The stage of the storagetarget definition allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating'
             * @return the next definition stage
             */
            WithCreate withProvisioningState(ProvisioningStateType provisioningState);
        }

        /**
         * The stage of the storagetarget definition allowing to specify TargetType.
         */
        interface WithTargetType {
            /**
             * Specifies targetType.
             * @param targetType Type of the Storage Target
             * @return the next definition stage
             */
            WithCreate withTargetType(String targetType);
        }

        /**
         * The stage of the storagetarget definition allowing to specify Unknown.
         */
        interface WithUnknown {
            /**
             * Specifies unknown.
             * @param unknown Properties when targetType is unknown
             * @return the next definition stage
             */
            WithCreate withUnknown(UnknownTarget unknown);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<StorageTarget>, DefinitionStages.WithClfs, DefinitionStages.WithJunctions, DefinitionStages.WithNfs3, DefinitionStages.WithProvisioningState, DefinitionStages.WithTargetType, DefinitionStages.WithUnknown {
        }
    }
    /**
     * The template for a StorageTarget update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<StorageTarget>, UpdateStages.WithClfs, UpdateStages.WithJunctions, UpdateStages.WithNfs3, UpdateStages.WithProvisioningState, UpdateStages.WithTargetType, UpdateStages.WithUnknown {
    }

    /**
     * Grouping of StorageTarget update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the storagetarget update allowing to specify Clfs.
         */
        interface WithClfs {
            /**
             * Specifies clfs.
             * @param clfs Properties when targetType is clfs
             * @return the next update stage
             */
            Update withClfs(ClfsTarget clfs);
        }

        /**
         * The stage of the storagetarget update allowing to specify Junctions.
         */
        interface WithJunctions {
            /**
             * Specifies junctions.
             * @param junctions List of Cache namespace junctions to target for namespace associations
             * @return the next update stage
             */
            Update withJunctions(List<NamespaceJunction> junctions);
        }

        /**
         * The stage of the storagetarget update allowing to specify Nfs3.
         */
        interface WithNfs3 {
            /**
             * Specifies nfs3.
             * @param nfs3 Properties when targetType is nfs3
             * @return the next update stage
             */
            Update withNfs3(Nfs3Target nfs3);
        }

        /**
         * The stage of the storagetarget update allowing to specify ProvisioningState.
         */
        interface WithProvisioningState {
            /**
             * Specifies provisioningState.
             * @param provisioningState ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property. Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating'
             * @return the next update stage
             */
            Update withProvisioningState(ProvisioningStateType provisioningState);
        }

        /**
         * The stage of the storagetarget update allowing to specify TargetType.
         */
        interface WithTargetType {
            /**
             * Specifies targetType.
             * @param targetType Type of the Storage Target
             * @return the next update stage
             */
            Update withTargetType(String targetType);
        }

        /**
         * The stage of the storagetarget update allowing to specify Unknown.
         */
        interface WithUnknown {
            /**
             * Specifies unknown.
             * @param unknown Properties when targetType is unknown
             * @return the next update stage
             */
            Update withUnknown(UnknownTarget unknown);
        }

    }
}
