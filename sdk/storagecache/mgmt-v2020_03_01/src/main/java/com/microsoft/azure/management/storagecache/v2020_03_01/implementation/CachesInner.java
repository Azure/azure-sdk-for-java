/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_03_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in Caches.
 */
public class CachesInner implements InnerSupportsGet<CacheInner>, InnerSupportsDelete<Object>, InnerSupportsListing<CacheInner> {
    /** The Retrofit service to perform REST calls. */
    private CachesService service;
    /** The service client containing this operation class. */
    private StorageCacheManagementClientImpl client;

    /**
     * Initializes an instance of CachesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CachesInner(Retrofit retrofit, StorageCacheManagementClientImpl client) {
        this.service = retrofit.create(CachesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Caches to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CachesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/caches")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("cacheName") String cacheName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("cacheName") String cacheName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("cacheName") String cacheName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Body CacheInner cache, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Body CacheInner cache, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches update" })
        @PATCH("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Body CacheInner cache, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches flush" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush")
        Observable<Response<ResponseBody>> flush(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginFlush" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush")
        Observable<Response<ResponseBody>> beginFlush(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches start" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start")
        Observable<Response<ResponseBody>> start(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginStart" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start")
        Observable<Response<ResponseBody>> beginStart(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches stop" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop")
        Observable<Response<ResponseBody>> stop(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginStop" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop")
        Observable<Response<ResponseBody>> beginStop(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches upgradeFirmware" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade")
        Observable<Response<ResponseBody>> upgradeFirmware(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches beginUpgradeFirmware" })
        @POST("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade")
        Observable<Response<ResponseBody>> beginUpgradeFirmware(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Path("cacheName") String cacheName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagecache.v2020_03_01.Caches listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CacheInner&gt; object if successful.
     */
    public PagedList<CacheInner> list() {
        ServiceResponse<Page<CacheInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<CacheInner>(response.body()) {
            @Override
            public Page<CacheInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CacheInner>> listAsync(final ListOperationCallback<CacheInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<Page<CacheInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<CacheInner>>, Page<CacheInner>>() {
                @Override
                public Page<CacheInner> call(ServiceResponse<Page<CacheInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<CacheInner>>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(ServiceResponse<Page<CacheInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CacheInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CacheInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CacheInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CacheInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CacheInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CacheInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param resourceGroupName Target resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CacheInner&gt; object if successful.
     */
    public PagedList<CacheInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<CacheInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<CacheInner>(response.body()) {
            @Override
            public Page<CacheInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param resourceGroupName Target resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CacheInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<CacheInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param resourceGroupName Target resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<Page<CacheInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<CacheInner>>, Page<CacheInner>>() {
                @Override
                public Page<CacheInner> call(ServiceResponse<Page<CacheInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param resourceGroupName Target resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<CacheInner>>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(ServiceResponse<Page<CacheInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
    ServiceResponse<PageImpl<CacheInner>> * @param resourceGroupName Target resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CacheInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CacheInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CacheInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CacheInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CacheInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CacheInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object delete(String resourceGroupName, String cacheName) {
        return deleteWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> deleteAsync(String resourceGroupName, String cacheName) {
        return deleteWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, cacheName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Object>() { }.getType());
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginDelete(String resourceGroupName, String cacheName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginDeleteAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginDeleteAsync(String resourceGroupName, String cacheName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, cacheName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner getByResourceGroup(String resourceGroupName, String cacheName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Returns a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> getByResourceGroupAsync(String resourceGroupName, String cacheName, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Returns a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<CacheInner> getByResourceGroupAsync(String resourceGroupName, String cacheName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<ServiceResponse<CacheInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, cacheName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CacheInner>>>() {
                @Override
                public Observable<ServiceResponse<CacheInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CacheInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CacheInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CacheInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CacheInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner createOrUpdate(String resourceGroupName, String cacheName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> createOrUpdateAsync(String resourceGroupName, String cacheName, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CacheInner> createOrUpdateAsync(String resourceGroupName, String cacheName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CacheInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CacheInner cache = null;
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CacheInner>() { }.getType());
    }
    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner createOrUpdate(String resourceGroupName, String cacheName, CacheInner cache) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache).toBlocking().last().body();
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> createOrUpdateAsync(String resourceGroupName, String cacheName, CacheInner cache, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache), serviceCallback);
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<CacheInner> createOrUpdateAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<CacheInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(cache);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<CacheInner>() { }.getType());
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner beginCreateOrUpdate(String resourceGroupName, String cacheName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> beginCreateOrUpdateAsync(String resourceGroupName, String cacheName, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<CacheInner> beginCreateOrUpdateAsync(String resourceGroupName, String cacheName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<ServiceResponse<CacheInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CacheInner cache = null;
        return service.beginCreateOrUpdate(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CacheInner>>>() {
                @Override
                public Observable<ServiceResponse<CacheInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CacheInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner beginCreateOrUpdate(String resourceGroupName, String cacheName, CacheInner cache) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache).toBlocking().single().body();
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> beginCreateOrUpdateAsync(String resourceGroupName, String cacheName, CacheInner cache, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache), serviceCallback);
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<CacheInner> beginCreateOrUpdateAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, cacheName, cache).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a Cache.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the new Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<ServiceResponse<CacheInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(cache);
        return service.beginCreateOrUpdate(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CacheInner>>>() {
                @Override
                public Observable<ServiceResponse<CacheInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CacheInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CacheInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CacheInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CacheInner>() { }.getType())
                .register(201, new TypeToken<CacheInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner update(String resourceGroupName, String cacheName) {
        return updateWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> updateAsync(String resourceGroupName, String cacheName, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<CacheInner> updateAsync(String resourceGroupName, String cacheName) {
        return updateWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<ServiceResponse<CacheInner>> updateWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final CacheInner cache = null;
        return service.update(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CacheInner>>>() {
                @Override
                public Observable<ServiceResponse<CacheInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CacheInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CacheInner object if successful.
     */
    public CacheInner update(String resourceGroupName, String cacheName, CacheInner cache) {
        return updateWithServiceResponseAsync(resourceGroupName, cacheName, cache).toBlocking().single().body();
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the Cache. If read-only properties are included, they must match the existing values of those properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CacheInner> updateAsync(String resourceGroupName, String cacheName, CacheInner cache, final ServiceCallback<CacheInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, cacheName, cache), serviceCallback);
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<CacheInner> updateAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        return updateWithServiceResponseAsync(resourceGroupName, cacheName, cache).map(new Func1<ServiceResponse<CacheInner>, CacheInner>() {
            @Override
            public CacheInner call(ServiceResponse<CacheInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a Cache instance.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param cache Object containing the user-selectable properties of the Cache. If read-only properties are included, they must match the existing values of those properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CacheInner object
     */
    public Observable<ServiceResponse<CacheInner>> updateWithServiceResponseAsync(String resourceGroupName, String cacheName, CacheInner cache) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(cache);
        return service.update(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), cache, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CacheInner>>>() {
                @Override
                public Observable<ServiceResponse<CacheInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CacheInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CacheInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CacheInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CacheInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object flush(String resourceGroupName, String cacheName) {
        return flushWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> flushAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(flushWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> flushAsync(String resourceGroupName, String cacheName) {
        return flushWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> flushWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.flush(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Object>() { }.getType());
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginFlush(String resourceGroupName, String cacheName) {
        return beginFlushWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginFlushAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginFlushWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginFlushAsync(String resourceGroupName, String cacheName) {
        return beginFlushWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginFlushWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginFlush(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginFlushDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginFlushDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object start(String resourceGroupName, String cacheName) {
        return startWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> startAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(startWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> startAsync(String resourceGroupName, String cacheName) {
        return startWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> startWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.start(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Object>() { }.getType());
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginStart(String resourceGroupName, String cacheName) {
        return beginStartWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginStartAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginStartWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginStartAsync(String resourceGroupName, String cacheName) {
        return beginStartWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginStartWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStart(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginStartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginStartDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object stop(String resourceGroupName, String cacheName) {
        return stopWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> stopAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(stopWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> stopAsync(String resourceGroupName, String cacheName) {
        return stopWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> stopWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.stop(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Object>() { }.getType());
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginStop(String resourceGroupName, String cacheName) {
        return beginStopWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginStopAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginStopWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginStopAsync(String resourceGroupName, String cacheName) {
        return beginStopWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginStopWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStop(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginStopDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginStopDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object upgradeFirmware(String resourceGroupName, String cacheName) {
        return upgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().last().body();
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> upgradeFirmwareAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(upgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Object> upgradeFirmwareAsync(String resourceGroupName, String cacheName) {
        return upgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Object>> upgradeFirmwareWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.upgradeFirmware(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.AZURE_ASYNC_OPERATION), new TypeToken<Object>() { }.getType());
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object beginUpgradeFirmware(String resourceGroupName, String cacheName) {
        return beginUpgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName).toBlocking().single().body();
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> beginUpgradeFirmwareAsync(String resourceGroupName, String cacheName, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName), serviceCallback);
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> beginUpgradeFirmwareAsync(String resourceGroupName, String cacheName) {
        return beginUpgradeFirmwareWithServiceResponseAsync(resourceGroupName, cacheName).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @param resourceGroupName Target resource group.
     * @param cacheName Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> beginUpgradeFirmwareWithServiceResponseAsync(String resourceGroupName, String cacheName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (cacheName == null) {
            throw new IllegalArgumentException("Parameter cacheName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginUpgradeFirmware(resourceGroupName, this.client.subscriptionId(), cacheName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = beginUpgradeFirmwareDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> beginUpgradeFirmwareDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<Object>() { }.getType())
                .register(202, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CacheInner&gt; object if successful.
     */
    public PagedList<CacheInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<CacheInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CacheInner>(response.body()) {
            @Override
            public Page<CacheInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CacheInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CacheInner>> serviceFuture, final ListOperationCallback<CacheInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<Page<CacheInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CacheInner>>, Page<CacheInner>>() {
                @Override
                public Page<CacheInner> call(ServiceResponse<Page<CacheInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CacheInner>>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(ServiceResponse<Page<CacheInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
    ServiceResponse<PageImpl<CacheInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CacheInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CacheInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CacheInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CacheInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CacheInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CacheInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;CacheInner&gt; object if successful.
     */
    public PagedList<CacheInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<CacheInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CacheInner>(response.body()) {
            @Override
            public Page<CacheInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<CacheInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<CacheInner>> serviceFuture, final ListOperationCallback<CacheInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<Page<CacheInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CacheInner>>, Page<CacheInner>>() {
                @Override
                public Page<CacheInner> call(ServiceResponse<Page<CacheInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;CacheInner&gt; object
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CacheInner>>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(ServiceResponse<Page<CacheInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
    ServiceResponse<PageImpl<CacheInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;CacheInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CacheInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CacheInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CacheInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CacheInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CacheInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CacheInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<CacheInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<CacheInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
