/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagecache.v2020_03_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.storagecache.v2020_03_01.Cache;
import rx.Observable;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheIdentity;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheHealth;
import java.util.List;
import com.microsoft.azure.management.storagecache.v2020_03_01.ProvisioningStateType;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheUpgradeStatus;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheNetworkSettings;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheEncryptionSettings;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheSecuritySettings;
import com.microsoft.azure.management.storagecache.v2020_03_01.CacheSku;

class CacheImpl extends GroupableResourceCoreImpl<Cache, CacheInner, CacheImpl, StorageCacheManager> implements Cache, Cache.Definition, Cache.Update {
    CacheImpl(String name, CacheInner inner, StorageCacheManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Cache> createResourceAsync() {
        CachesInner client = this.manager().inner().caches();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Cache> updateResourceAsync() {
        CachesInner client = this.manager().inner().caches();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CacheInner> getInnerAsync() {
        CachesInner client = this.manager().inner().caches();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Integer cacheSizeGB() {
        return this.inner().cacheSizeGB();
    }

    @Override
    public CacheEncryptionSettings encryptionSettings() {
        return this.inner().encryptionSettings();
    }

    @Override
    public CacheHealth health() {
        return this.inner().health();
    }

    @Override
    public CacheIdentity identity() {
        return this.inner().identity();
    }

    @Override
    public List<String> mountAddresses() {
        return this.inner().mountAddresses();
    }

    @Override
    public CacheNetworkSettings networkSettings() {
        return this.inner().networkSettings();
    }

    @Override
    public ProvisioningStateType provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public CacheSecuritySettings securitySettings() {
        return this.inner().securitySettings();
    }

    @Override
    public CacheSku sku() {
        return this.inner().sku();
    }

    @Override
    public String subnet() {
        return this.inner().subnet();
    }

    @Override
    public CacheUpgradeStatus upgradeStatus() {
        return this.inner().upgradeStatus();
    }

    @Override
    public CacheImpl withCacheSizeGB(Integer cacheSizeGB) {
        this.inner().withCacheSizeGB(cacheSizeGB);
        return this;
    }

    @Override
    public CacheImpl withEncryptionSettings(CacheEncryptionSettings encryptionSettings) {
        this.inner().withEncryptionSettings(encryptionSettings);
        return this;
    }

    @Override
    public CacheImpl withIdentity(CacheIdentity identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public CacheImpl withNetworkSettings(CacheNetworkSettings networkSettings) {
        this.inner().withNetworkSettings(networkSettings);
        return this;
    }

    @Override
    public CacheImpl withProvisioningState(ProvisioningStateType provisioningState) {
        this.inner().withProvisioningState(provisioningState);
        return this;
    }

    @Override
    public CacheImpl withSecuritySettings(CacheSecuritySettings securitySettings) {
        this.inner().withSecuritySettings(securitySettings);
        return this;
    }

    @Override
    public CacheImpl withSku(CacheSku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public CacheImpl withSubnet(String subnet) {
        this.inner().withSubnet(subnet);
        return this;
    }

    @Override
    public CacheImpl withUpgradeStatus(CacheUpgradeStatus upgradeStatus) {
        this.inner().withUpgradeStatus(upgradeStatus);
        return this;
    }

}
