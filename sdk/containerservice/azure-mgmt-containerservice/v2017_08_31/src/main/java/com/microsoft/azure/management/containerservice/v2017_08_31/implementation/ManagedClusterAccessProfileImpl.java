/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerservice.v2017_08_31.implementation;

import com.microsoft.azure.management.containerservice.v2017_08_31.ManagedClusterAccessProfile;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import java.util.Map;

class ManagedClusterAccessProfileImpl extends IndexableRefreshableWrapperImpl<ManagedClusterAccessProfile, ManagedClusterAccessProfileInner> implements ManagedClusterAccessProfile {
    private final ContainerServiceManager manager;
    private String resourceGroupName;
    private String resourceName;
    private String roleName;

    ManagedClusterAccessProfileImpl(ManagedClusterAccessProfileInner inner,  ContainerServiceManager manager) {
        super(null, inner);
        this.manager = manager;
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.resourceName = IdParsingUtils.getValueFromIdByName(inner.id(), "managedClusters");
        this.roleName = IdParsingUtils.getValueFromIdByName(inner.id(), "accessProfiles");
    }

    @Override
    public ContainerServiceManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<ManagedClusterAccessProfileInner> getInnerAsync() {
        ManagedClustersInner client = this.manager().inner().managedClusters();
        return client.getAccessProfilesAsync(this.resourceGroupName, this.resourceName, this.roleName);
    }



    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public byte[] kubeConfig() {
        return this.inner().kubeConfig();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
