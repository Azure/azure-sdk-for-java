// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.generated.fluent.models.ContainerServiceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of ContainerService. */
public interface ContainerService {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the orchestratorProfile property: Profile for the container service orchestrator.
     *
     * @return the orchestratorProfile value.
     */
    ContainerServiceOrchestratorProfile orchestratorProfile();

    /**
     * Gets the customProfile property: Properties to configure a custom container service cluster.
     *
     * @return the customProfile value.
     */
    ContainerServiceCustomProfile customProfile();

    /**
     * Gets the servicePrincipalProfile property: Information about a service principal identity for the cluster to use
     * for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
     *
     * @return the servicePrincipalProfile value.
     */
    ContainerServicePrincipalProfile servicePrincipalProfile();

    /**
     * Gets the masterProfile property: Profile for the container service master.
     *
     * @return the masterProfile value.
     */
    ContainerServiceMasterProfile masterProfile();

    /**
     * Gets the agentPoolProfiles property: Properties of the agent pool.
     *
     * @return the agentPoolProfiles value.
     */
    List<ContainerServiceAgentPoolProfile> agentPoolProfiles();

    /**
     * Gets the windowsProfile property: Profile for Windows VMs in the container service cluster.
     *
     * @return the windowsProfile value.
     */
    ContainerServiceWindowsProfile windowsProfile();

    /**
     * Gets the linuxProfile property: Profile for Linux VMs in the container service cluster.
     *
     * @return the linuxProfile value.
     */
    ContainerServiceLinuxProfile linuxProfile();

    /**
     * Gets the diagnosticsProfile property: Profile for diagnostics in the container service cluster.
     *
     * @return the diagnosticsProfile value.
     */
    ContainerServiceDiagnosticsProfile diagnosticsProfile();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerservice.generated.fluent.models.ContainerServiceInner object.
     *
     * @return the inner object.
     */
    ContainerServiceInner innerModel();

    /** The entirety of the ContainerService definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The ContainerService definition stages. */
    interface DefinitionStages {
        /** The first stage of the ContainerService definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ContainerService definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ContainerService definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the ContainerService definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithOrchestratorProfile,
                DefinitionStages.WithCustomProfile,
                DefinitionStages.WithServicePrincipalProfile,
                DefinitionStages.WithMasterProfile,
                DefinitionStages.WithAgentPoolProfiles,
                DefinitionStages.WithWindowsProfile,
                DefinitionStages.WithLinuxProfile,
                DefinitionStages.WithDiagnosticsProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ContainerService create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ContainerService create(Context context);
        }
        /** The stage of the ContainerService definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ContainerService definition allowing to specify orchestratorProfile. */
        interface WithOrchestratorProfile {
            /**
             * Specifies the orchestratorProfile property: Profile for the container service orchestrator..
             *
             * @param orchestratorProfile Profile for the container service orchestrator.
             * @return the next definition stage.
             */
            WithCreate withOrchestratorProfile(ContainerServiceOrchestratorProfile orchestratorProfile);
        }
        /** The stage of the ContainerService definition allowing to specify customProfile. */
        interface WithCustomProfile {
            /**
             * Specifies the customProfile property: Properties to configure a custom container service cluster..
             *
             * @param customProfile Properties to configure a custom container service cluster.
             * @return the next definition stage.
             */
            WithCreate withCustomProfile(ContainerServiceCustomProfile customProfile);
        }
        /** The stage of the ContainerService definition allowing to specify servicePrincipalProfile. */
        interface WithServicePrincipalProfile {
            /**
             * Specifies the servicePrincipalProfile property: Information about a service principal identity for the
             * cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be
             * specified..
             *
             * @param servicePrincipalProfile Information about a service principal identity for the cluster to use for
             *     manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
             * @return the next definition stage.
             */
            WithCreate withServicePrincipalProfile(ContainerServicePrincipalProfile servicePrincipalProfile);
        }
        /** The stage of the ContainerService definition allowing to specify masterProfile. */
        interface WithMasterProfile {
            /**
             * Specifies the masterProfile property: Profile for the container service master..
             *
             * @param masterProfile Profile for the container service master.
             * @return the next definition stage.
             */
            WithCreate withMasterProfile(ContainerServiceMasterProfile masterProfile);
        }
        /** The stage of the ContainerService definition allowing to specify agentPoolProfiles. */
        interface WithAgentPoolProfiles {
            /**
             * Specifies the agentPoolProfiles property: Properties of the agent pool..
             *
             * @param agentPoolProfiles Properties of the agent pool.
             * @return the next definition stage.
             */
            WithCreate withAgentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles);
        }
        /** The stage of the ContainerService definition allowing to specify windowsProfile. */
        interface WithWindowsProfile {
            /**
             * Specifies the windowsProfile property: Profile for Windows VMs in the container service cluster..
             *
             * @param windowsProfile Profile for Windows VMs in the container service cluster.
             * @return the next definition stage.
             */
            WithCreate withWindowsProfile(ContainerServiceWindowsProfile windowsProfile);
        }
        /** The stage of the ContainerService definition allowing to specify linuxProfile. */
        interface WithLinuxProfile {
            /**
             * Specifies the linuxProfile property: Profile for Linux VMs in the container service cluster..
             *
             * @param linuxProfile Profile for Linux VMs in the container service cluster.
             * @return the next definition stage.
             */
            WithCreate withLinuxProfile(ContainerServiceLinuxProfile linuxProfile);
        }
        /** The stage of the ContainerService definition allowing to specify diagnosticsProfile. */
        interface WithDiagnosticsProfile {
            /**
             * Specifies the diagnosticsProfile property: Profile for diagnostics in the container service cluster..
             *
             * @param diagnosticsProfile Profile for diagnostics in the container service cluster.
             * @return the next definition stage.
             */
            WithCreate withDiagnosticsProfile(ContainerServiceDiagnosticsProfile diagnosticsProfile);
        }
    }
    /**
     * Begins update for the ContainerService resource.
     *
     * @return the stage of resource update.
     */
    ContainerService.Update update();

    /** The template for ContainerService update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithOrchestratorProfile,
            UpdateStages.WithCustomProfile,
            UpdateStages.WithServicePrincipalProfile,
            UpdateStages.WithMasterProfile,
            UpdateStages.WithAgentPoolProfiles,
            UpdateStages.WithWindowsProfile,
            UpdateStages.WithLinuxProfile,
            UpdateStages.WithDiagnosticsProfile {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ContainerService apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ContainerService apply(Context context);
    }
    /** The ContainerService update stages. */
    interface UpdateStages {
        /** The stage of the ContainerService update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ContainerService update allowing to specify orchestratorProfile. */
        interface WithOrchestratorProfile {
            /**
             * Specifies the orchestratorProfile property: Profile for the container service orchestrator..
             *
             * @param orchestratorProfile Profile for the container service orchestrator.
             * @return the next definition stage.
             */
            Update withOrchestratorProfile(ContainerServiceOrchestratorProfile orchestratorProfile);
        }
        /** The stage of the ContainerService update allowing to specify customProfile. */
        interface WithCustomProfile {
            /**
             * Specifies the customProfile property: Properties to configure a custom container service cluster..
             *
             * @param customProfile Properties to configure a custom container service cluster.
             * @return the next definition stage.
             */
            Update withCustomProfile(ContainerServiceCustomProfile customProfile);
        }
        /** The stage of the ContainerService update allowing to specify servicePrincipalProfile. */
        interface WithServicePrincipalProfile {
            /**
             * Specifies the servicePrincipalProfile property: Information about a service principal identity for the
             * cluster to use for manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be
             * specified..
             *
             * @param servicePrincipalProfile Information about a service principal identity for the cluster to use for
             *     manipulating Azure APIs. Exact one of secret or keyVaultSecretRef need to be specified.
             * @return the next definition stage.
             */
            Update withServicePrincipalProfile(ContainerServicePrincipalProfile servicePrincipalProfile);
        }
        /** The stage of the ContainerService update allowing to specify masterProfile. */
        interface WithMasterProfile {
            /**
             * Specifies the masterProfile property: Profile for the container service master..
             *
             * @param masterProfile Profile for the container service master.
             * @return the next definition stage.
             */
            Update withMasterProfile(ContainerServiceMasterProfile masterProfile);
        }
        /** The stage of the ContainerService update allowing to specify agentPoolProfiles. */
        interface WithAgentPoolProfiles {
            /**
             * Specifies the agentPoolProfiles property: Properties of the agent pool..
             *
             * @param agentPoolProfiles Properties of the agent pool.
             * @return the next definition stage.
             */
            Update withAgentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles);
        }
        /** The stage of the ContainerService update allowing to specify windowsProfile. */
        interface WithWindowsProfile {
            /**
             * Specifies the windowsProfile property: Profile for Windows VMs in the container service cluster..
             *
             * @param windowsProfile Profile for Windows VMs in the container service cluster.
             * @return the next definition stage.
             */
            Update withWindowsProfile(ContainerServiceWindowsProfile windowsProfile);
        }
        /** The stage of the ContainerService update allowing to specify linuxProfile. */
        interface WithLinuxProfile {
            /**
             * Specifies the linuxProfile property: Profile for Linux VMs in the container service cluster..
             *
             * @param linuxProfile Profile for Linux VMs in the container service cluster.
             * @return the next definition stage.
             */
            Update withLinuxProfile(ContainerServiceLinuxProfile linuxProfile);
        }
        /** The stage of the ContainerService update allowing to specify diagnosticsProfile. */
        interface WithDiagnosticsProfile {
            /**
             * Specifies the diagnosticsProfile property: Profile for diagnostics in the container service cluster..
             *
             * @param diagnosticsProfile Profile for diagnostics in the container service cluster.
             * @return the next definition stage.
             */
            Update withDiagnosticsProfile(ContainerServiceDiagnosticsProfile diagnosticsProfile);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ContainerService refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ContainerService refresh(Context context);
}
