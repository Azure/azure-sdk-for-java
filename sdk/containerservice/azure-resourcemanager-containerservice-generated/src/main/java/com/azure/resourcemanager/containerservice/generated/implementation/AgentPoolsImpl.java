// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservice.generated.fluent.AgentPoolsClient;
import com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolAvailableVersionsInner;
import com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolInner;
import com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolUpgradeProfileInner;
import com.azure.resourcemanager.containerservice.generated.models.AgentPool;
import com.azure.resourcemanager.containerservice.generated.models.AgentPoolAvailableVersions;
import com.azure.resourcemanager.containerservice.generated.models.AgentPoolUpgradeProfile;
import com.azure.resourcemanager.containerservice.generated.models.AgentPools;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AgentPoolsImpl implements AgentPools {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AgentPoolsImpl.class);

    private final AgentPoolsClient innerClient;

    private final com.azure.resourcemanager.containerservice.generated.ContainerServiceManager serviceManager;

    public AgentPoolsImpl(
        AgentPoolsClient innerClient,
        com.azure.resourcemanager.containerservice.generated.ContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AgentPool> list(String resourceGroupName, String resourceName) {
        PagedIterable<AgentPoolInner> inner = this.serviceClient().list(resourceGroupName, resourceName);
        return Utils.mapPage(inner, inner1 -> new AgentPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<AgentPool> list(String resourceGroupName, String resourceName, Context context) {
        PagedIterable<AgentPoolInner> inner = this.serviceClient().list(resourceGroupName, resourceName, context);
        return Utils.mapPage(inner, inner1 -> new AgentPoolImpl(inner1, this.manager()));
    }

    public AgentPool get(String resourceGroupName, String resourceName, String agentPoolName) {
        AgentPoolInner inner = this.serviceClient().get(resourceGroupName, resourceName, agentPoolName);
        if (inner != null) {
            return new AgentPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AgentPool> getWithResponse(
        String resourceGroupName, String resourceName, String agentPoolName, Context context) {
        Response<AgentPoolInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, resourceName, agentPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AgentPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String resourceName, String agentPoolName) {
        this.serviceClient().delete(resourceGroupName, resourceName, agentPoolName);
    }

    public void delete(String resourceGroupName, String resourceName, String agentPoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, agentPoolName, context);
    }

    public AgentPoolUpgradeProfile getUpgradeProfile(
        String resourceGroupName, String resourceName, String agentPoolName) {
        AgentPoolUpgradeProfileInner inner =
            this.serviceClient().getUpgradeProfile(resourceGroupName, resourceName, agentPoolName);
        if (inner != null) {
            return new AgentPoolUpgradeProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AgentPoolUpgradeProfile> getUpgradeProfileWithResponse(
        String resourceGroupName, String resourceName, String agentPoolName, Context context) {
        Response<AgentPoolUpgradeProfileInner> inner =
            this.serviceClient().getUpgradeProfileWithResponse(resourceGroupName, resourceName, agentPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AgentPoolUpgradeProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgentPoolAvailableVersions getAvailableAgentPoolVersions(String resourceGroupName, String resourceName) {
        AgentPoolAvailableVersionsInner inner =
            this.serviceClient().getAvailableAgentPoolVersions(resourceGroupName, resourceName);
        if (inner != null) {
            return new AgentPoolAvailableVersionsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AgentPoolAvailableVersions> getAvailableAgentPoolVersionsWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        Response<AgentPoolAvailableVersionsInner> inner =
            this.serviceClient().getAvailableAgentPoolVersionsWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AgentPoolAvailableVersionsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgentPool upgradeNodeImageVersion(String resourceGroupName, String resourceName, String agentPoolName) {
        AgentPoolInner inner =
            this.serviceClient().upgradeNodeImageVersion(resourceGroupName, resourceName, agentPoolName);
        if (inner != null) {
            return new AgentPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AgentPool upgradeNodeImageVersion(
        String resourceGroupName, String resourceName, String agentPoolName, Context context) {
        AgentPoolInner inner =
            this.serviceClient().upgradeNodeImageVersion(resourceGroupName, resourceName, agentPoolName, context);
        if (inner != null) {
            return new AgentPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AgentPool getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByName(id, "agentPools");
        if (agentPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, agentPoolName, Context.NONE).getValue();
    }

    public Response<AgentPool> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByName(id, "agentPools");
        if (agentPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, resourceName, agentPoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByName(id, "agentPools");
        if (agentPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        this.delete(resourceGroupName, resourceName, agentPoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "managedClusters");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String agentPoolName = Utils.getValueFromIdByName(id, "agentPools");
        if (agentPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'agentPools'.", id)));
        }
        this.delete(resourceGroupName, resourceName, agentPoolName, context);
    }

    private AgentPoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerservice.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    public AgentPoolImpl define(String name) {
        return new AgentPoolImpl(name, this.manager());
    }
}
