// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.generated.ContainerServiceManager;
import com.azure.resourcemanager.containerservice.generated.fluent.models.ManagedClusterInner;
import com.azure.resourcemanager.containerservice.generated.models.ContainerServiceLinuxProfile;
import com.azure.resourcemanager.containerservice.generated.models.ContainerServiceNetworkProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedCluster;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterAadProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterAddonProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterAgentPoolProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterApiServerAccessProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterAutoUpgradeProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterIdentity;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterPodIdentityProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterPropertiesAutoScalerProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterServicePrincipalProfile;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterSku;
import com.azure.resourcemanager.containerservice.generated.models.ManagedClusterWindowsProfile;
import com.azure.resourcemanager.containerservice.generated.models.PowerState;
import com.azure.resourcemanager.containerservice.generated.models.TagsObject;
import com.azure.resourcemanager.containerservice.generated.models.UserAssignedIdentity;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ManagedClusterImpl implements ManagedCluster, ManagedCluster.Definition, ManagedCluster.Update {
    private ManagedClusterInner innerObject;

    private final ContainerServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedClusterSku sku() {
        return this.innerModel().sku();
    }

    public ManagedClusterIdentity identity() {
        return this.innerModel().identity();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public PowerState powerState() {
        return this.innerModel().powerState();
    }

    public Integer maxAgentPools() {
        return this.innerModel().maxAgentPools();
    }

    public String kubernetesVersion() {
        return this.innerModel().kubernetesVersion();
    }

    public String dnsPrefix() {
        return this.innerModel().dnsPrefix();
    }

    public String fqdn() {
        return this.innerModel().fqdn();
    }

    public String privateFqdn() {
        return this.innerModel().privateFqdn();
    }

    public List<ManagedClusterAgentPoolProfile> agentPoolProfiles() {
        List<ManagedClusterAgentPoolProfile> inner = this.innerModel().agentPoolProfiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ContainerServiceLinuxProfile linuxProfile() {
        return this.innerModel().linuxProfile();
    }

    public ManagedClusterWindowsProfile windowsProfile() {
        return this.innerModel().windowsProfile();
    }

    public ManagedClusterServicePrincipalProfile servicePrincipalProfile() {
        return this.innerModel().servicePrincipalProfile();
    }

    public Map<String, ManagedClusterAddonProfile> addonProfiles() {
        Map<String, ManagedClusterAddonProfile> inner = this.innerModel().addonProfiles();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedClusterPodIdentityProfile podIdentityProfile() {
        return this.innerModel().podIdentityProfile();
    }

    public String nodeResourceGroup() {
        return this.innerModel().nodeResourceGroup();
    }

    public Boolean enableRbac() {
        return this.innerModel().enableRbac();
    }

    public Boolean enablePodSecurityPolicy() {
        return this.innerModel().enablePodSecurityPolicy();
    }

    public ContainerServiceNetworkProfile networkProfile() {
        return this.innerModel().networkProfile();
    }

    public ManagedClusterAadProfile aadProfile() {
        return this.innerModel().aadProfile();
    }

    public ManagedClusterAutoUpgradeProfile autoUpgradeProfile() {
        return this.innerModel().autoUpgradeProfile();
    }

    public ManagedClusterPropertiesAutoScalerProfile autoScalerProfile() {
        return this.innerModel().autoScalerProfile();
    }

    public ManagedClusterApiServerAccessProfile apiServerAccessProfile() {
        return this.innerModel().apiServerAccessProfile();
    }

    public String diskEncryptionSetId() {
        return this.innerModel().diskEncryptionSetId();
    }

    public Map<String, UserAssignedIdentity> identityProfile() {
        Map<String, UserAssignedIdentity> inner = this.innerModel().identityProfile();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ManagedClusterInner innerModel() {
        return this.innerObject;
    }

    private ContainerServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String resourceName;

    private TagsObject updateParameters;

    public ManagedClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ManagedCluster create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .createOrUpdate(resourceGroupName, resourceName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedCluster create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .createOrUpdate(resourceGroupName, resourceName, this.innerModel(), context);
        return this;
    }

    ManagedClusterImpl(String name, ContainerServiceManager serviceManager) {
        this.innerObject = new ManagedClusterInner();
        this.serviceManager = serviceManager;
        this.resourceName = name;
    }

    public ManagedClusterImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public ManagedCluster apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .updateTags(resourceGroupName, resourceName, updateParameters, Context.NONE);
        return this;
    }

    public ManagedCluster apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .updateTags(resourceGroupName, resourceName, updateParameters, context);
        return this;
    }

    ManagedClusterImpl(ManagedClusterInner innerObject, ContainerServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.resourceName = Utils.getValueFromIdByName(innerObject.id(), "managedClusters");
    }

    public ManagedCluster refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedCluster refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .getByResourceGroupWithResponse(resourceGroupName, resourceName, context)
                .getValue();
        return this;
    }

    public ManagedClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ManagedClusterImpl withSku(ManagedClusterSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ManagedClusterImpl withIdentity(ManagedClusterIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ManagedClusterImpl withKubernetesVersion(String kubernetesVersion) {
        this.innerModel().withKubernetesVersion(kubernetesVersion);
        return this;
    }

    public ManagedClusterImpl withDnsPrefix(String dnsPrefix) {
        this.innerModel().withDnsPrefix(dnsPrefix);
        return this;
    }

    public ManagedClusterImpl withAgentPoolProfiles(List<ManagedClusterAgentPoolProfile> agentPoolProfiles) {
        this.innerModel().withAgentPoolProfiles(agentPoolProfiles);
        return this;
    }

    public ManagedClusterImpl withLinuxProfile(ContainerServiceLinuxProfile linuxProfile) {
        this.innerModel().withLinuxProfile(linuxProfile);
        return this;
    }

    public ManagedClusterImpl withWindowsProfile(ManagedClusterWindowsProfile windowsProfile) {
        this.innerModel().withWindowsProfile(windowsProfile);
        return this;
    }

    public ManagedClusterImpl withServicePrincipalProfile(
        ManagedClusterServicePrincipalProfile servicePrincipalProfile) {
        this.innerModel().withServicePrincipalProfile(servicePrincipalProfile);
        return this;
    }

    public ManagedClusterImpl withAddonProfiles(Map<String, ManagedClusterAddonProfile> addonProfiles) {
        this.innerModel().withAddonProfiles(addonProfiles);
        return this;
    }

    public ManagedClusterImpl withPodIdentityProfile(ManagedClusterPodIdentityProfile podIdentityProfile) {
        this.innerModel().withPodIdentityProfile(podIdentityProfile);
        return this;
    }

    public ManagedClusterImpl withNodeResourceGroup(String nodeResourceGroup) {
        this.innerModel().withNodeResourceGroup(nodeResourceGroup);
        return this;
    }

    public ManagedClusterImpl withEnableRbac(Boolean enableRbac) {
        this.innerModel().withEnableRbac(enableRbac);
        return this;
    }

    public ManagedClusterImpl withEnablePodSecurityPolicy(Boolean enablePodSecurityPolicy) {
        this.innerModel().withEnablePodSecurityPolicy(enablePodSecurityPolicy);
        return this;
    }

    public ManagedClusterImpl withNetworkProfile(ContainerServiceNetworkProfile networkProfile) {
        this.innerModel().withNetworkProfile(networkProfile);
        return this;
    }

    public ManagedClusterImpl withAadProfile(ManagedClusterAadProfile aadProfile) {
        this.innerModel().withAadProfile(aadProfile);
        return this;
    }

    public ManagedClusterImpl withAutoUpgradeProfile(ManagedClusterAutoUpgradeProfile autoUpgradeProfile) {
        this.innerModel().withAutoUpgradeProfile(autoUpgradeProfile);
        return this;
    }

    public ManagedClusterImpl withAutoScalerProfile(ManagedClusterPropertiesAutoScalerProfile autoScalerProfile) {
        this.innerModel().withAutoScalerProfile(autoScalerProfile);
        return this;
    }

    public ManagedClusterImpl withApiServerAccessProfile(ManagedClusterApiServerAccessProfile apiServerAccessProfile) {
        this.innerModel().withApiServerAccessProfile(apiServerAccessProfile);
        return this;
    }

    public ManagedClusterImpl withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.innerModel().withDiskEncryptionSetId(diskEncryptionSetId);
        return this;
    }

    public ManagedClusterImpl withIdentityProfile(Map<String, UserAssignedIdentity> identityProfile) {
        this.innerModel().withIdentityProfile(identityProfile);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
