// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of AgentPool. */
public interface AgentPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the count property: Number of agents (VMs) to host docker containers. Allowed values must be in the range of
     * 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value
     * is 1.
     *
     * @return the count value.
     */
    Integer count();

    /**
     * Gets the vmSize property: Size of agent VMs.
     *
     * @return the vmSize value.
     */
    ContainerServiceVMSizeTypes vmSize();

    /**
     * Gets the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every machine in this
     * master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     *
     * @return the osDiskSizeGB value.
     */
    Integer osDiskSizeGB();

    /**
     * Gets the osDiskType property: OS disk type to be used for machines in a given agent pool. Allowed values are
     * 'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation.
     *
     * @return the osDiskType value.
     */
    OSDiskType osDiskType();

    /**
     * Gets the kubeletDiskType property: KubeletDiskType determines the placement of emptyDir volumes, container
     * runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the
     * OS disk for data.
     *
     * @return the kubeletDiskType value.
     */
    KubeletDiskType kubeletDiskType();

    /**
     * Gets the vnetSubnetId property: VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods.
     *
     * @return the vnetSubnetId value.
     */
    String vnetSubnetId();

    /**
     * Gets the podSubnetId property: Pod SubnetID specifies the VNet's subnet identifier for pods.
     *
     * @return the podSubnetId value.
     */
    String podSubnetId();

    /**
     * Gets the maxPods property: Maximum number of pods that can run on a node.
     *
     * @return the maxPods value.
     */
    Integer maxPods();

    /**
     * Gets the osType property: OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     *
     * @return the osType value.
     */
    OSType osType();

    /**
     * Gets the maxCount property: Maximum number of nodes for auto-scaling.
     *
     * @return the maxCount value.
     */
    Integer maxCount();

    /**
     * Gets the minCount property: Minimum number of nodes for auto-scaling.
     *
     * @return the minCount value.
     */
    Integer minCount();

    /**
     * Gets the enableAutoScaling property: Whether to enable auto-scaler.
     *
     * @return the enableAutoScaling value.
     */
    Boolean enableAutoScaling();

    /**
     * Gets the typePropertiesType property: AgentPoolType represents types of an agent pool.
     *
     * @return the typePropertiesType value.
     */
    AgentPoolType typePropertiesType();

    /**
     * Gets the mode property: AgentPoolMode represents mode of an agent pool.
     *
     * @return the mode value.
     */
    AgentPoolMode mode();

    /**
     * Gets the orchestratorVersion property: Version of orchestrator specified when creating the managed cluster.
     *
     * @return the orchestratorVersion value.
     */
    String orchestratorVersion();

    /**
     * Gets the nodeImageVersion property: Version of node image.
     *
     * @return the nodeImageVersion value.
     */
    String nodeImageVersion();

    /**
     * Gets the upgradeSettings property: Settings for upgrading the agentpool.
     *
     * @return the upgradeSettings value.
     */
    AgentPoolUpgradeSettings upgradeSettings();

    /**
     * Gets the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the powerState property: Describes whether the Agent Pool is Running or Stopped.
     *
     * @return the powerState value.
     */
    PowerState powerState();

    /**
     * Gets the availabilityZones property: Availability zones for nodes. Must use VirtualMachineScaleSets
     * AgentPoolType.
     *
     * @return the availabilityZones value.
     */
    List<String> availabilityZones();

    /**
     * Gets the enableNodePublicIp property: Enable public IP for nodes.
     *
     * @return the enableNodePublicIp value.
     */
    Boolean enableNodePublicIp();

    /**
     * Gets the scaleSetPriority property: ScaleSetPriority to be used to specify virtual machine scale set priority.
     * Default to regular.
     *
     * @return the scaleSetPriority value.
     */
    ScaleSetPriority scaleSetPriority();

    /**
     * Gets the scaleSetEvictionPolicy property: ScaleSetEvictionPolicy to be used to specify eviction policy for Spot
     * virtual machine scale set. Default to Delete.
     *
     * @return the scaleSetEvictionPolicy value.
     */
    ScaleSetEvictionPolicy scaleSetEvictionPolicy();

    /**
     * Gets the spotMaxPrice property: SpotMaxPrice to be used to specify the maximum price you are willing to pay in US
     * Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to
     * on-demand.
     *
     * @return the spotMaxPrice value.
     */
    Float spotMaxPrice();

    /**
     * Gets the tags property: Agent pool tags to be persisted on the agent pool virtual machine scale set.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the nodeLabels property: Agent pool node labels to be persisted across all nodes in agent pool.
     *
     * @return the nodeLabels value.
     */
    Map<String, String> nodeLabels();

    /**
     * Gets the nodeTaints property: Taints added to new nodes during node pool create and scale. For example,
     * key=value:NoSchedule.
     *
     * @return the nodeTaints value.
     */
    List<String> nodeTaints();

    /**
     * Gets the proximityPlacementGroupId property: The ID for Proximity Placement Group.
     *
     * @return the proximityPlacementGroupId value.
     */
    String proximityPlacementGroupId();

    /**
     * Gets the kubeletConfig property: KubeletConfig specifies the configuration of kubelet on agent nodes.
     *
     * @return the kubeletConfig value.
     */
    KubeletConfig kubeletConfig();

    /**
     * Gets the linuxOSConfig property: LinuxOSConfig specifies the OS configuration of linux agent nodes.
     *
     * @return the linuxOSConfig value.
     */
    LinuxOSConfig linuxOSConfig();

    /**
     * Gets the enableEncryptionAtHost property: Whether to enable EncryptionAtHost.
     *
     * @return the enableEncryptionAtHost value.
     */
    Boolean enableEncryptionAtHost();

    /**
     * Gets the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the inner com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolInner object.
     *
     * @return the inner object.
     */
    AgentPoolInner innerModel();

    /** The entirety of the AgentPool definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The AgentPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the AgentPool definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the AgentPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param resourceName The name of the managed cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedCluster(String resourceGroupName, String resourceName);
        }
        /**
         * The stage of the AgentPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithCount,
                DefinitionStages.WithVmSize,
                DefinitionStages.WithOsDiskSizeGB,
                DefinitionStages.WithOsDiskType,
                DefinitionStages.WithKubeletDiskType,
                DefinitionStages.WithVnetSubnetId,
                DefinitionStages.WithPodSubnetId,
                DefinitionStages.WithMaxPods,
                DefinitionStages.WithOsType,
                DefinitionStages.WithMaxCount,
                DefinitionStages.WithMinCount,
                DefinitionStages.WithEnableAutoScaling,
                DefinitionStages.WithTypePropertiesType,
                DefinitionStages.WithMode,
                DefinitionStages.WithOrchestratorVersion,
                DefinitionStages.WithUpgradeSettings,
                DefinitionStages.WithAvailabilityZones,
                DefinitionStages.WithEnableNodePublicIp,
                DefinitionStages.WithScaleSetPriority,
                DefinitionStages.WithScaleSetEvictionPolicy,
                DefinitionStages.WithSpotMaxPrice,
                DefinitionStages.WithNodeLabels,
                DefinitionStages.WithNodeTaints,
                DefinitionStages.WithProximityPlacementGroupId,
                DefinitionStages.WithKubeletConfig,
                DefinitionStages.WithLinuxOSConfig,
                DefinitionStages.WithEnableEncryptionAtHost {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            AgentPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AgentPool create(Context context);
        }
        /** The stage of the AgentPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Agent pool tags to be persisted on the agent pool virtual machine scale
             * set..
             *
             * @param tags Agent pool tags to be persisted on the agent pool virtual machine scale set.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool definition allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: Number of agents (VMs) to host docker containers. Allowed values must be in
             * the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system
             * pools. The default value is 1..
             *
             * @param count Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0
             *     to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The
             *     default value is 1.
             * @return the next definition stage.
             */
            WithCreate withCount(Integer count);
        }
        /** The stage of the AgentPool definition allowing to specify vmSize. */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: Size of agent VMs..
             *
             * @param vmSize Size of agent VMs.
             * @return the next definition stage.
             */
            WithCreate withVmSize(ContainerServiceVMSizeTypes vmSize);
        }
        /** The stage of the AgentPool definition allowing to specify osDiskSizeGB. */
        interface WithOsDiskSizeGB {
            /**
             * Specifies the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every
             * machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to
             * the vmSize specified..
             *
             * @param osDiskSizeGB OS Disk Size in GB to be used to specify the disk size for every machine in this
             *     master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize
             *     specified.
             * @return the next definition stage.
             */
            WithCreate withOsDiskSizeGB(Integer osDiskSizeGB);
        }
        /** The stage of the AgentPool definition allowing to specify osDiskType. */
        interface WithOsDiskType {
            /**
             * Specifies the osDiskType property: OS disk type to be used for machines in a given agent pool. Allowed
             * values are 'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation..
             *
             * @param osDiskType OS disk type to be used for machines in a given agent pool. Allowed values are
             *     'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation.
             * @return the next definition stage.
             */
            WithCreate withOsDiskType(OSDiskType osDiskType);
        }
        /** The stage of the AgentPool definition allowing to specify kubeletDiskType. */
        interface WithKubeletDiskType {
            /**
             * Specifies the kubeletDiskType property: KubeletDiskType determines the placement of emptyDir volumes,
             * container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in
             * Kubelet using the OS disk for data..
             *
             * @param kubeletDiskType KubeletDiskType determines the placement of emptyDir volumes, container runtime
             *     data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using
             *     the OS disk for data.
             * @return the next definition stage.
             */
            WithCreate withKubeletDiskType(KubeletDiskType kubeletDiskType);
        }
        /** The stage of the AgentPool definition allowing to specify vnetSubnetId. */
        interface WithVnetSubnetId {
            /**
             * Specifies the vnetSubnetId property: VNet SubnetID specifies the VNet's subnet identifier for nodes and
             * maybe pods.
             *
             * @param vnetSubnetId VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods.
             * @return the next definition stage.
             */
            WithCreate withVnetSubnetId(String vnetSubnetId);
        }
        /** The stage of the AgentPool definition allowing to specify podSubnetId. */
        interface WithPodSubnetId {
            /**
             * Specifies the podSubnetId property: Pod SubnetID specifies the VNet's subnet identifier for pods..
             *
             * @param podSubnetId Pod SubnetID specifies the VNet's subnet identifier for pods.
             * @return the next definition stage.
             */
            WithCreate withPodSubnetId(String podSubnetId);
        }
        /** The stage of the AgentPool definition allowing to specify maxPods. */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: Maximum number of pods that can run on a node..
             *
             * @param maxPods Maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            WithCreate withMaxPods(Integer maxPods);
        }
        /** The stage of the AgentPool definition allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: OsType to be used to specify os type. Choose from Linux and Windows.
             * Default to Linux..
             *
             * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
             * @return the next definition stage.
             */
            WithCreate withOsType(OSType osType);
        }
        /** The stage of the AgentPool definition allowing to specify maxCount. */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: Maximum number of nodes for auto-scaling.
             *
             * @param maxCount Maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMaxCount(Integer maxCount);
        }
        /** The stage of the AgentPool definition allowing to specify minCount. */
        interface WithMinCount {
            /**
             * Specifies the minCount property: Minimum number of nodes for auto-scaling.
             *
             * @param minCount Minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMinCount(Integer minCount);
        }
        /** The stage of the AgentPool definition allowing to specify enableAutoScaling. */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler.
             *
             * @param enableAutoScaling Whether to enable auto-scaler.
             * @return the next definition stage.
             */
            WithCreate withEnableAutoScaling(Boolean enableAutoScaling);
        }
        /** The stage of the AgentPool definition allowing to specify typePropertiesType. */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: AgentPoolType represents types of an agent pool.
             *
             * @param typePropertiesType AgentPoolType represents types of an agent pool.
             * @return the next definition stage.
             */
            WithCreate withTypePropertiesType(AgentPoolType typePropertiesType);
        }
        /** The stage of the AgentPool definition allowing to specify mode. */
        interface WithMode {
            /**
             * Specifies the mode property: AgentPoolMode represents mode of an agent pool.
             *
             * @param mode AgentPoolMode represents mode of an agent pool.
             * @return the next definition stage.
             */
            WithCreate withMode(AgentPoolMode mode);
        }
        /** The stage of the AgentPool definition allowing to specify orchestratorVersion. */
        interface WithOrchestratorVersion {
            /**
             * Specifies the orchestratorVersion property: Version of orchestrator specified when creating the managed
             * cluster..
             *
             * @param orchestratorVersion Version of orchestrator specified when creating the managed cluster.
             * @return the next definition stage.
             */
            WithCreate withOrchestratorVersion(String orchestratorVersion);
        }
        /** The stage of the AgentPool definition allowing to specify upgradeSettings. */
        interface WithUpgradeSettings {
            /**
             * Specifies the upgradeSettings property: Settings for upgrading the agentpool.
             *
             * @param upgradeSettings Settings for upgrading the agentpool.
             * @return the next definition stage.
             */
            WithCreate withUpgradeSettings(AgentPoolUpgradeSettings upgradeSettings);
        }
        /** The stage of the AgentPool definition allowing to specify availabilityZones. */
        interface WithAvailabilityZones {
            /**
             * Specifies the availabilityZones property: Availability zones for nodes. Must use VirtualMachineScaleSets
             * AgentPoolType..
             *
             * @param availabilityZones Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
             * @return the next definition stage.
             */
            WithCreate withAvailabilityZones(List<String> availabilityZones);
        }
        /** The stage of the AgentPool definition allowing to specify enableNodePublicIp. */
        interface WithEnableNodePublicIp {
            /**
             * Specifies the enableNodePublicIp property: Enable public IP for nodes.
             *
             * @param enableNodePublicIp Enable public IP for nodes.
             * @return the next definition stage.
             */
            WithCreate withEnableNodePublicIp(Boolean enableNodePublicIp);
        }
        /** The stage of the AgentPool definition allowing to specify scaleSetPriority. */
        interface WithScaleSetPriority {
            /**
             * Specifies the scaleSetPriority property: ScaleSetPriority to be used to specify virtual machine scale set
             * priority. Default to regular..
             *
             * @param scaleSetPriority ScaleSetPriority to be used to specify virtual machine scale set priority.
             *     Default to regular.
             * @return the next definition stage.
             */
            WithCreate withScaleSetPriority(ScaleSetPriority scaleSetPriority);
        }
        /** The stage of the AgentPool definition allowing to specify scaleSetEvictionPolicy. */
        interface WithScaleSetEvictionPolicy {
            /**
             * Specifies the scaleSetEvictionPolicy property: ScaleSetEvictionPolicy to be used to specify eviction
             * policy for Spot virtual machine scale set. Default to Delete..
             *
             * @param scaleSetEvictionPolicy ScaleSetEvictionPolicy to be used to specify eviction policy for Spot
             *     virtual machine scale set. Default to Delete.
             * @return the next definition stage.
             */
            WithCreate withScaleSetEvictionPolicy(ScaleSetEvictionPolicy scaleSetEvictionPolicy);
        }
        /** The stage of the AgentPool definition allowing to specify spotMaxPrice. */
        interface WithSpotMaxPrice {
            /**
             * Specifies the spotMaxPrice property: SpotMaxPrice to be used to specify the maximum price you are willing
             * to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates
             * default price to be up-to on-demand..
             *
             * @param spotMaxPrice SpotMaxPrice to be used to specify the maximum price you are willing to pay in US
             *     Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price
             *     to be up-to on-demand.
             * @return the next definition stage.
             */
            WithCreate withSpotMaxPrice(Float spotMaxPrice);
        }
        /** The stage of the AgentPool definition allowing to specify nodeLabels. */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: Agent pool node labels to be persisted across all nodes in agent
             * pool..
             *
             * @param nodeLabels Agent pool node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            WithCreate withNodeLabels(Map<String, String> nodeLabels);
        }
        /** The stage of the AgentPool definition allowing to specify nodeTaints. */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: Taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             *
             * @param nodeTaints Taints added to new nodes during node pool create and scale. For example,
             *     key=value:NoSchedule.
             * @return the next definition stage.
             */
            WithCreate withNodeTaints(List<String> nodeTaints);
        }
        /** The stage of the AgentPool definition allowing to specify proximityPlacementGroupId. */
        interface WithProximityPlacementGroupId {
            /**
             * Specifies the proximityPlacementGroupId property: The ID for Proximity Placement Group..
             *
             * @param proximityPlacementGroupId The ID for Proximity Placement Group.
             * @return the next definition stage.
             */
            WithCreate withProximityPlacementGroupId(String proximityPlacementGroupId);
        }
        /** The stage of the AgentPool definition allowing to specify kubeletConfig. */
        interface WithKubeletConfig {
            /**
             * Specifies the kubeletConfig property: KubeletConfig specifies the configuration of kubelet on agent
             * nodes..
             *
             * @param kubeletConfig KubeletConfig specifies the configuration of kubelet on agent nodes.
             * @return the next definition stage.
             */
            WithCreate withKubeletConfig(KubeletConfig kubeletConfig);
        }
        /** The stage of the AgentPool definition allowing to specify linuxOSConfig. */
        interface WithLinuxOSConfig {
            /**
             * Specifies the linuxOSConfig property: LinuxOSConfig specifies the OS configuration of linux agent nodes..
             *
             * @param linuxOSConfig LinuxOSConfig specifies the OS configuration of linux agent nodes.
             * @return the next definition stage.
             */
            WithCreate withLinuxOSConfig(LinuxOSConfig linuxOSConfig);
        }
        /** The stage of the AgentPool definition allowing to specify enableEncryptionAtHost. */
        interface WithEnableEncryptionAtHost {
            /**
             * Specifies the enableEncryptionAtHost property: Whether to enable EncryptionAtHost.
             *
             * @param enableEncryptionAtHost Whether to enable EncryptionAtHost.
             * @return the next definition stage.
             */
            WithCreate withEnableEncryptionAtHost(Boolean enableEncryptionAtHost);
        }
    }
    /**
     * Begins update for the AgentPool resource.
     *
     * @return the stage of resource update.
     */
    AgentPool.Update update();

    /** The template for AgentPool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithCount,
            UpdateStages.WithVmSize,
            UpdateStages.WithOsDiskSizeGB,
            UpdateStages.WithOsDiskType,
            UpdateStages.WithKubeletDiskType,
            UpdateStages.WithVnetSubnetId,
            UpdateStages.WithPodSubnetId,
            UpdateStages.WithMaxPods,
            UpdateStages.WithOsType,
            UpdateStages.WithMaxCount,
            UpdateStages.WithMinCount,
            UpdateStages.WithEnableAutoScaling,
            UpdateStages.WithTypePropertiesType,
            UpdateStages.WithMode,
            UpdateStages.WithOrchestratorVersion,
            UpdateStages.WithUpgradeSettings,
            UpdateStages.WithAvailabilityZones,
            UpdateStages.WithEnableNodePublicIp,
            UpdateStages.WithScaleSetPriority,
            UpdateStages.WithScaleSetEvictionPolicy,
            UpdateStages.WithSpotMaxPrice,
            UpdateStages.WithNodeLabels,
            UpdateStages.WithNodeTaints,
            UpdateStages.WithProximityPlacementGroupId,
            UpdateStages.WithKubeletConfig,
            UpdateStages.WithLinuxOSConfig,
            UpdateStages.WithEnableEncryptionAtHost {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        AgentPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AgentPool apply(Context context);
    }
    /** The AgentPool update stages. */
    interface UpdateStages {
        /** The stage of the AgentPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Agent pool tags to be persisted on the agent pool virtual machine scale
             * set..
             *
             * @param tags Agent pool tags to be persisted on the agent pool virtual machine scale set.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool update allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: Number of agents (VMs) to host docker containers. Allowed values must be in
             * the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system
             * pools. The default value is 1..
             *
             * @param count Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0
             *     to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The
             *     default value is 1.
             * @return the next definition stage.
             */
            Update withCount(Integer count);
        }
        /** The stage of the AgentPool update allowing to specify vmSize. */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: Size of agent VMs..
             *
             * @param vmSize Size of agent VMs.
             * @return the next definition stage.
             */
            Update withVmSize(ContainerServiceVMSizeTypes vmSize);
        }
        /** The stage of the AgentPool update allowing to specify osDiskSizeGB. */
        interface WithOsDiskSizeGB {
            /**
             * Specifies the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every
             * machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to
             * the vmSize specified..
             *
             * @param osDiskSizeGB OS Disk Size in GB to be used to specify the disk size for every machine in this
             *     master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize
             *     specified.
             * @return the next definition stage.
             */
            Update withOsDiskSizeGB(Integer osDiskSizeGB);
        }
        /** The stage of the AgentPool update allowing to specify osDiskType. */
        interface WithOsDiskType {
            /**
             * Specifies the osDiskType property: OS disk type to be used for machines in a given agent pool. Allowed
             * values are 'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation..
             *
             * @param osDiskType OS disk type to be used for machines in a given agent pool. Allowed values are
             *     'Ephemeral' and 'Managed'. Defaults to 'Managed'. May not be changed after creation.
             * @return the next definition stage.
             */
            Update withOsDiskType(OSDiskType osDiskType);
        }
        /** The stage of the AgentPool update allowing to specify kubeletDiskType. */
        interface WithKubeletDiskType {
            /**
             * Specifies the kubeletDiskType property: KubeletDiskType determines the placement of emptyDir volumes,
             * container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in
             * Kubelet using the OS disk for data..
             *
             * @param kubeletDiskType KubeletDiskType determines the placement of emptyDir volumes, container runtime
             *     data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using
             *     the OS disk for data.
             * @return the next definition stage.
             */
            Update withKubeletDiskType(KubeletDiskType kubeletDiskType);
        }
        /** The stage of the AgentPool update allowing to specify vnetSubnetId. */
        interface WithVnetSubnetId {
            /**
             * Specifies the vnetSubnetId property: VNet SubnetID specifies the VNet's subnet identifier for nodes and
             * maybe pods.
             *
             * @param vnetSubnetId VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods.
             * @return the next definition stage.
             */
            Update withVnetSubnetId(String vnetSubnetId);
        }
        /** The stage of the AgentPool update allowing to specify podSubnetId. */
        interface WithPodSubnetId {
            /**
             * Specifies the podSubnetId property: Pod SubnetID specifies the VNet's subnet identifier for pods..
             *
             * @param podSubnetId Pod SubnetID specifies the VNet's subnet identifier for pods.
             * @return the next definition stage.
             */
            Update withPodSubnetId(String podSubnetId);
        }
        /** The stage of the AgentPool update allowing to specify maxPods. */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: Maximum number of pods that can run on a node..
             *
             * @param maxPods Maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            Update withMaxPods(Integer maxPods);
        }
        /** The stage of the AgentPool update allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: OsType to be used to specify os type. Choose from Linux and Windows.
             * Default to Linux..
             *
             * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
             * @return the next definition stage.
             */
            Update withOsType(OSType osType);
        }
        /** The stage of the AgentPool update allowing to specify maxCount. */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: Maximum number of nodes for auto-scaling.
             *
             * @param maxCount Maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMaxCount(Integer maxCount);
        }
        /** The stage of the AgentPool update allowing to specify minCount. */
        interface WithMinCount {
            /**
             * Specifies the minCount property: Minimum number of nodes for auto-scaling.
             *
             * @param minCount Minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMinCount(Integer minCount);
        }
        /** The stage of the AgentPool update allowing to specify enableAutoScaling. */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler.
             *
             * @param enableAutoScaling Whether to enable auto-scaler.
             * @return the next definition stage.
             */
            Update withEnableAutoScaling(Boolean enableAutoScaling);
        }
        /** The stage of the AgentPool update allowing to specify typePropertiesType. */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: AgentPoolType represents types of an agent pool.
             *
             * @param typePropertiesType AgentPoolType represents types of an agent pool.
             * @return the next definition stage.
             */
            Update withTypePropertiesType(AgentPoolType typePropertiesType);
        }
        /** The stage of the AgentPool update allowing to specify mode. */
        interface WithMode {
            /**
             * Specifies the mode property: AgentPoolMode represents mode of an agent pool.
             *
             * @param mode AgentPoolMode represents mode of an agent pool.
             * @return the next definition stage.
             */
            Update withMode(AgentPoolMode mode);
        }
        /** The stage of the AgentPool update allowing to specify orchestratorVersion. */
        interface WithOrchestratorVersion {
            /**
             * Specifies the orchestratorVersion property: Version of orchestrator specified when creating the managed
             * cluster..
             *
             * @param orchestratorVersion Version of orchestrator specified when creating the managed cluster.
             * @return the next definition stage.
             */
            Update withOrchestratorVersion(String orchestratorVersion);
        }
        /** The stage of the AgentPool update allowing to specify upgradeSettings. */
        interface WithUpgradeSettings {
            /**
             * Specifies the upgradeSettings property: Settings for upgrading the agentpool.
             *
             * @param upgradeSettings Settings for upgrading the agentpool.
             * @return the next definition stage.
             */
            Update withUpgradeSettings(AgentPoolUpgradeSettings upgradeSettings);
        }
        /** The stage of the AgentPool update allowing to specify availabilityZones. */
        interface WithAvailabilityZones {
            /**
             * Specifies the availabilityZones property: Availability zones for nodes. Must use VirtualMachineScaleSets
             * AgentPoolType..
             *
             * @param availabilityZones Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
             * @return the next definition stage.
             */
            Update withAvailabilityZones(List<String> availabilityZones);
        }
        /** The stage of the AgentPool update allowing to specify enableNodePublicIp. */
        interface WithEnableNodePublicIp {
            /**
             * Specifies the enableNodePublicIp property: Enable public IP for nodes.
             *
             * @param enableNodePublicIp Enable public IP for nodes.
             * @return the next definition stage.
             */
            Update withEnableNodePublicIp(Boolean enableNodePublicIp);
        }
        /** The stage of the AgentPool update allowing to specify scaleSetPriority. */
        interface WithScaleSetPriority {
            /**
             * Specifies the scaleSetPriority property: ScaleSetPriority to be used to specify virtual machine scale set
             * priority. Default to regular..
             *
             * @param scaleSetPriority ScaleSetPriority to be used to specify virtual machine scale set priority.
             *     Default to regular.
             * @return the next definition stage.
             */
            Update withScaleSetPriority(ScaleSetPriority scaleSetPriority);
        }
        /** The stage of the AgentPool update allowing to specify scaleSetEvictionPolicy. */
        interface WithScaleSetEvictionPolicy {
            /**
             * Specifies the scaleSetEvictionPolicy property: ScaleSetEvictionPolicy to be used to specify eviction
             * policy for Spot virtual machine scale set. Default to Delete..
             *
             * @param scaleSetEvictionPolicy ScaleSetEvictionPolicy to be used to specify eviction policy for Spot
             *     virtual machine scale set. Default to Delete.
             * @return the next definition stage.
             */
            Update withScaleSetEvictionPolicy(ScaleSetEvictionPolicy scaleSetEvictionPolicy);
        }
        /** The stage of the AgentPool update allowing to specify spotMaxPrice. */
        interface WithSpotMaxPrice {
            /**
             * Specifies the spotMaxPrice property: SpotMaxPrice to be used to specify the maximum price you are willing
             * to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates
             * default price to be up-to on-demand..
             *
             * @param spotMaxPrice SpotMaxPrice to be used to specify the maximum price you are willing to pay in US
             *     Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price
             *     to be up-to on-demand.
             * @return the next definition stage.
             */
            Update withSpotMaxPrice(Float spotMaxPrice);
        }
        /** The stage of the AgentPool update allowing to specify nodeLabels. */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: Agent pool node labels to be persisted across all nodes in agent
             * pool..
             *
             * @param nodeLabels Agent pool node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            Update withNodeLabels(Map<String, String> nodeLabels);
        }
        /** The stage of the AgentPool update allowing to specify nodeTaints. */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: Taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             *
             * @param nodeTaints Taints added to new nodes during node pool create and scale. For example,
             *     key=value:NoSchedule.
             * @return the next definition stage.
             */
            Update withNodeTaints(List<String> nodeTaints);
        }
        /** The stage of the AgentPool update allowing to specify proximityPlacementGroupId. */
        interface WithProximityPlacementGroupId {
            /**
             * Specifies the proximityPlacementGroupId property: The ID for Proximity Placement Group..
             *
             * @param proximityPlacementGroupId The ID for Proximity Placement Group.
             * @return the next definition stage.
             */
            Update withProximityPlacementGroupId(String proximityPlacementGroupId);
        }
        /** The stage of the AgentPool update allowing to specify kubeletConfig. */
        interface WithKubeletConfig {
            /**
             * Specifies the kubeletConfig property: KubeletConfig specifies the configuration of kubelet on agent
             * nodes..
             *
             * @param kubeletConfig KubeletConfig specifies the configuration of kubelet on agent nodes.
             * @return the next definition stage.
             */
            Update withKubeletConfig(KubeletConfig kubeletConfig);
        }
        /** The stage of the AgentPool update allowing to specify linuxOSConfig. */
        interface WithLinuxOSConfig {
            /**
             * Specifies the linuxOSConfig property: LinuxOSConfig specifies the OS configuration of linux agent nodes..
             *
             * @param linuxOSConfig LinuxOSConfig specifies the OS configuration of linux agent nodes.
             * @return the next definition stage.
             */
            Update withLinuxOSConfig(LinuxOSConfig linuxOSConfig);
        }
        /** The stage of the AgentPool update allowing to specify enableEncryptionAtHost. */
        interface WithEnableEncryptionAtHost {
            /**
             * Specifies the enableEncryptionAtHost property: Whether to enable EncryptionAtHost.
             *
             * @param enableEncryptionAtHost Whether to enable EncryptionAtHost.
             * @return the next definition stage.
             */
            Update withEnableEncryptionAtHost(Boolean enableEncryptionAtHost);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    AgentPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AgentPool refresh(Context context);
}
