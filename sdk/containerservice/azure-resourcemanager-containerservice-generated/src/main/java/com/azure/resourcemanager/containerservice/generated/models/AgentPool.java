// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of AgentPool. */
public interface AgentPool {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the count property: Number of agents (VMs) to host docker containers. Allowed values must be in the range of
     * 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default
     * value is 1.
     *
     * @return the count value.
     */
    Integer count();

    /**
     * Gets the vmSize property: VM size availability varies by region. If a node contains insufficient compute
     * resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see:
     * https://docs.microsoft.com/azure/aks/quotas-skus-regions.
     *
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * Gets the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every machine in the
     * master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     *
     * @return the osDiskSizeGB value.
     */
    Integer osDiskSizeGB();

    /**
     * Gets the osDiskType property: The default is 'Ephemeral' if the VM supports it and has a cache disk larger than
     * the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more
     * information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
     *
     * @return the osDiskType value.
     */
    OSDiskType osDiskType();

    /**
     * Gets the kubeletDiskType property: Determines the placement of emptyDir volumes, container runtime data root, and
     * Kubelet ephemeral storage.
     *
     * @return the kubeletDiskType value.
     */
    KubeletDiskType kubeletDiskType();

    /**
     * Gets the vnetSubnetId property: If this is not specified, a VNET and subnet will be generated and used. If no
     * podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the
     * form:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
     *
     * @return the vnetSubnetId value.
     */
    String vnetSubnetId();

    /**
     * Gets the podSubnetId property: If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID
     * for more details). This is of the form:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
     *
     * @return the podSubnetId value.
     */
    String podSubnetId();

    /**
     * Gets the maxPods property: The maximum number of pods that can run on a node.
     *
     * @return the maxPods value.
     */
    Integer maxPods();

    /**
     * Gets the osType property: OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     *
     * @return the osType value.
     */
    OSType osType();

    /**
     * Gets the osSku property: Specifies an OS SKU. This value must not be specified if OSType is Windows.
     *
     * @return the osSku value.
     */
    Ossku osSku();

    /**
     * Gets the maxCount property: The maximum number of nodes for auto-scaling.
     *
     * @return the maxCount value.
     */
    Integer maxCount();

    /**
     * Gets the minCount property: The minimum number of nodes for auto-scaling.
     *
     * @return the minCount value.
     */
    Integer minCount();

    /**
     * Gets the enableAutoScaling property: Whether to enable auto-scaler.
     *
     * @return the enableAutoScaling value.
     */
    Boolean enableAutoScaling();

    /**
     * Gets the typePropertiesType property: The type of Agent Pool.
     *
     * @return the typePropertiesType value.
     */
    AgentPoolType typePropertiesType();

    /**
     * Gets the mode property: A cluster must have at least one 'System' Agent Pool at all times. For additional
     * information on agent pool restrictions and best practices, see:
     * https://docs.microsoft.com/azure/aks/use-system-pools.
     *
     * @return the mode value.
     */
    AgentPoolMode mode();

    /**
     * Gets the orchestratorVersion property: As a best practice, you should upgrade all node pools in an AKS cluster to
     * the same Kubernetes version. The node pool version must have the same major version as the control plane. The
     * node pool minor version must be within two minor versions of the control plane version. The node pool version
     * cannot be greater than the control plane version. For more information see [upgrading a node
     * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
     *
     * @return the orchestratorVersion value.
     */
    String orchestratorVersion();

    /**
     * Gets the nodeImageVersion property: The version of node image.
     *
     * @return the nodeImageVersion value.
     */
    String nodeImageVersion();

    /**
     * Gets the upgradeSettings property: Settings for upgrading the agentpool.
     *
     * @return the upgradeSettings value.
     */
    AgentPoolUpgradeSettings upgradeSettings();

    /**
     * Gets the provisioningState property: The current deployment or provisioning state.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the powerState property: Describes whether the Agent Pool is Running or Stopped.
     *
     * @return the powerState value.
     */
    PowerState powerState();

    /**
     * Gets the availabilityZones property: The list of Availability zones to use for nodes. This can only be specified
     * if the AgentPoolType property is 'VirtualMachineScaleSets'.
     *
     * @return the availabilityZones value.
     */
    List<String> availabilityZones();

    /**
     * Gets the enableNodePublicIp property: Some scenarios may require nodes in a node pool to receive their own
     * dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct
     * connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per
     * node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
     * The default is false.
     *
     * @return the enableNodePublicIp value.
     */
    Boolean enableNodePublicIp();

    /**
     * Gets the nodePublicIpPrefixId property: This is of the form:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
     *
     * @return the nodePublicIpPrefixId value.
     */
    String nodePublicIpPrefixId();

    /**
     * Gets the scaleSetPriority property: The Virtual Machine Scale Set priority. If not specified, the default is
     * 'Regular'.
     *
     * @return the scaleSetPriority value.
     */
    ScaleSetPriority scaleSetPriority();

    /**
     * Gets the scaleSetEvictionPolicy property: This cannot be specified unless the scaleSetPriority is 'Spot'. If not
     * specified, the default is 'Delete'.
     *
     * @return the scaleSetEvictionPolicy value.
     */
    ScaleSetEvictionPolicy scaleSetEvictionPolicy();

    /**
     * Gets the spotMaxPrice property: Possible values are any decimal value greater than zero or -1 which indicates the
     * willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs
     * pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
     *
     * @return the spotMaxPrice value.
     */
    Float spotMaxPrice();

    /**
     * Gets the tags property: The tags to be persisted on the agent pool virtual machine scale set.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the nodeLabels property: The node labels to be persisted across all nodes in agent pool.
     *
     * @return the nodeLabels value.
     */
    Map<String, String> nodeLabels();

    /**
     * Gets the nodeTaints property: The taints added to new nodes during node pool create and scale. For example,
     * key=value:NoSchedule.
     *
     * @return the nodeTaints value.
     */
    List<String> nodeTaints();

    /**
     * Gets the proximityPlacementGroupId property: The ID for Proximity Placement Group.
     *
     * @return the proximityPlacementGroupId value.
     */
    String proximityPlacementGroupId();

    /**
     * Gets the kubeletConfig property: The Kubelet configuration on the agent pool nodes.
     *
     * @return the kubeletConfig value.
     */
    KubeletConfig kubeletConfig();

    /**
     * Gets the linuxOSConfig property: The OS configuration of Linux agent nodes.
     *
     * @return the linuxOSConfig value.
     */
    LinuxOSConfig linuxOSConfig();

    /**
     * Gets the enableEncryptionAtHost property: This is only supported on certain VM sizes and in certain Azure
     * regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption.
     *
     * @return the enableEncryptionAtHost value.
     */
    Boolean enableEncryptionAtHost();

    /**
     * Gets the enableUltraSsd property: Whether to enable UltraSSD.
     *
     * @return the enableUltraSsd value.
     */
    Boolean enableUltraSsd();

    /**
     * Gets the enableFips property: See [Add a FIPS-enabled node
     * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more
     * details.
     *
     * @return the enableFips value.
     */
    Boolean enableFips();

    /**
     * Gets the gpuInstanceProfile property: GPUInstanceProfile to be used to specify GPU MIG instance profile for
     * supported GPU VM SKU.
     *
     * @return the gpuInstanceProfile value.
     */
    GpuInstanceProfile gpuInstanceProfile();

    /**
     * Gets the name property: The name of the resource that is unique within a resource group. This name can be used to
     * access the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: Resource type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the inner com.azure.resourcemanager.containerservice.generated.fluent.models.AgentPoolInner object.
     *
     * @return the inner object.
     */
    AgentPoolInner innerModel();

    /** The entirety of the AgentPool definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The AgentPool definition stages. */
    interface DefinitionStages {
        /** The first stage of the AgentPool definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the AgentPool definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, resourceName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param resourceName The name of the managed cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedCluster(String resourceGroupName, String resourceName);
        }
        /**
         * The stage of the AgentPool definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithCount,
                DefinitionStages.WithVmSize,
                DefinitionStages.WithOsDiskSizeGB,
                DefinitionStages.WithOsDiskType,
                DefinitionStages.WithKubeletDiskType,
                DefinitionStages.WithVnetSubnetId,
                DefinitionStages.WithPodSubnetId,
                DefinitionStages.WithMaxPods,
                DefinitionStages.WithOsType,
                DefinitionStages.WithOsSku,
                DefinitionStages.WithMaxCount,
                DefinitionStages.WithMinCount,
                DefinitionStages.WithEnableAutoScaling,
                DefinitionStages.WithTypePropertiesType,
                DefinitionStages.WithMode,
                DefinitionStages.WithOrchestratorVersion,
                DefinitionStages.WithUpgradeSettings,
                DefinitionStages.WithAvailabilityZones,
                DefinitionStages.WithEnableNodePublicIp,
                DefinitionStages.WithNodePublicIpPrefixId,
                DefinitionStages.WithScaleSetPriority,
                DefinitionStages.WithScaleSetEvictionPolicy,
                DefinitionStages.WithSpotMaxPrice,
                DefinitionStages.WithNodeLabels,
                DefinitionStages.WithNodeTaints,
                DefinitionStages.WithProximityPlacementGroupId,
                DefinitionStages.WithKubeletConfig,
                DefinitionStages.WithLinuxOSConfig,
                DefinitionStages.WithEnableEncryptionAtHost,
                DefinitionStages.WithEnableUltraSsd,
                DefinitionStages.WithEnableFips,
                DefinitionStages.WithGpuInstanceProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            AgentPool create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            AgentPool create(Context context);
        }
        /** The stage of the AgentPool definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags to be persisted on the agent pool virtual machine scale set..
             *
             * @param tags The tags to be persisted on the agent pool virtual machine scale set.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool definition allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: Number of agents (VMs) to host docker containers. Allowed values must be in
             * the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system
             * pools. The default value is 1..
             *
             * @param count Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0
             *     to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The
             *     default value is 1.
             * @return the next definition stage.
             */
            WithCreate withCount(Integer count);
        }
        /** The stage of the AgentPool definition allowing to specify vmSize. */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: VM size availability varies by region. If a node contains insufficient
             * compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM
             * sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions.
             *
             * @param vmSize VM size availability varies by region. If a node contains insufficient compute resources
             *     (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see:
             *     https://docs.microsoft.com/azure/aks/quotas-skus-regions.
             * @return the next definition stage.
             */
            WithCreate withVmSize(String vmSize);
        }
        /** The stage of the AgentPool definition allowing to specify osDiskSizeGB. */
        interface WithOsDiskSizeGB {
            /**
             * Specifies the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every
             * machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to
             * the vmSize specified..
             *
             * @param osDiskSizeGB OS Disk Size in GB to be used to specify the disk size for every machine in the
             *     master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize
             *     specified.
             * @return the next definition stage.
             */
            WithCreate withOsDiskSizeGB(Integer osDiskSizeGB);
        }
        /** The stage of the AgentPool definition allowing to specify osDiskType. */
        interface WithOsDiskType {
            /**
             * Specifies the osDiskType property: The default is 'Ephemeral' if the VM supports it and has a cache disk
             * larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after
             * creation. For more information see [Ephemeral
             * OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os)..
             *
             * @param osDiskType The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the
             *     requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more
             *     information see [Ephemeral
             *     OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
             * @return the next definition stage.
             */
            WithCreate withOsDiskType(OSDiskType osDiskType);
        }
        /** The stage of the AgentPool definition allowing to specify kubeletDiskType. */
        interface WithKubeletDiskType {
            /**
             * Specifies the kubeletDiskType property: Determines the placement of emptyDir volumes, container runtime
             * data root, and Kubelet ephemeral storage..
             *
             * @param kubeletDiskType Determines the placement of emptyDir volumes, container runtime data root, and
             *     Kubelet ephemeral storage.
             * @return the next definition stage.
             */
            WithCreate withKubeletDiskType(KubeletDiskType kubeletDiskType);
        }
        /** The stage of the AgentPool definition allowing to specify vnetSubnetId. */
        interface WithVnetSubnetId {
            /**
             * Specifies the vnetSubnetId property: If this is not specified, a VNET and subnet will be generated and
             * used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes.
             * This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             *
             * @param vnetSubnetId If this is not specified, a VNET and subnet will be generated and used. If no
             *     podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is
             *     of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             * @return the next definition stage.
             */
            WithCreate withVnetSubnetId(String vnetSubnetId);
        }
        /** The stage of the AgentPool definition allowing to specify podSubnetId. */
        interface WithPodSubnetId {
            /**
             * Specifies the podSubnetId property: If omitted, pod IPs are statically assigned on the node subnet (see
             * vnetSubnetID for more details). This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             *
             * @param podSubnetId If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for
             *     more details). This is of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             * @return the next definition stage.
             */
            WithCreate withPodSubnetId(String podSubnetId);
        }
        /** The stage of the AgentPool definition allowing to specify maxPods. */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: The maximum number of pods that can run on a node..
             *
             * @param maxPods The maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            WithCreate withMaxPods(Integer maxPods);
        }
        /** The stage of the AgentPool definition allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: OsType to be used to specify os type. Choose from Linux and Windows.
             * Default to Linux..
             *
             * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
             * @return the next definition stage.
             */
            WithCreate withOsType(OSType osType);
        }
        /** The stage of the AgentPool definition allowing to specify osSku. */
        interface WithOsSku {
            /**
             * Specifies the osSku property: Specifies an OS SKU. This value must not be specified if OSType is
             * Windows..
             *
             * @param osSku Specifies an OS SKU. This value must not be specified if OSType is Windows.
             * @return the next definition stage.
             */
            WithCreate withOsSku(Ossku osSku);
        }
        /** The stage of the AgentPool definition allowing to specify maxCount. */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: The maximum number of nodes for auto-scaling.
             *
             * @param maxCount The maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMaxCount(Integer maxCount);
        }
        /** The stage of the AgentPool definition allowing to specify minCount. */
        interface WithMinCount {
            /**
             * Specifies the minCount property: The minimum number of nodes for auto-scaling.
             *
             * @param minCount The minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            WithCreate withMinCount(Integer minCount);
        }
        /** The stage of the AgentPool definition allowing to specify enableAutoScaling. */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler.
             *
             * @param enableAutoScaling Whether to enable auto-scaler.
             * @return the next definition stage.
             */
            WithCreate withEnableAutoScaling(Boolean enableAutoScaling);
        }
        /** The stage of the AgentPool definition allowing to specify typePropertiesType. */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: The type of Agent Pool..
             *
             * @param typePropertiesType The type of Agent Pool.
             * @return the next definition stage.
             */
            WithCreate withTypePropertiesType(AgentPoolType typePropertiesType);
        }
        /** The stage of the AgentPool definition allowing to specify mode. */
        interface WithMode {
            /**
             * Specifies the mode property: A cluster must have at least one 'System' Agent Pool at all times. For
             * additional information on agent pool restrictions and best practices, see:
             * https://docs.microsoft.com/azure/aks/use-system-pools.
             *
             * @param mode A cluster must have at least one 'System' Agent Pool at all times. For additional information
             *     on agent pool restrictions and best practices, see:
             *     https://docs.microsoft.com/azure/aks/use-system-pools.
             * @return the next definition stage.
             */
            WithCreate withMode(AgentPoolMode mode);
        }
        /** The stage of the AgentPool definition allowing to specify orchestratorVersion. */
        interface WithOrchestratorVersion {
            /**
             * Specifies the orchestratorVersion property: As a best practice, you should upgrade all node pools in an
             * AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the
             * control plane. The node pool minor version must be within two minor versions of the control plane
             * version. The node pool version cannot be greater than the control plane version. For more information see
             * [upgrading a node
             * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool)..
             *
             * @param orchestratorVersion As a best practice, you should upgrade all node pools in an AKS cluster to the
             *     same Kubernetes version. The node pool version must have the same major version as the control plane.
             *     The node pool minor version must be within two minor versions of the control plane version. The node
             *     pool version cannot be greater than the control plane version. For more information see [upgrading a
             *     node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
             * @return the next definition stage.
             */
            WithCreate withOrchestratorVersion(String orchestratorVersion);
        }
        /** The stage of the AgentPool definition allowing to specify upgradeSettings. */
        interface WithUpgradeSettings {
            /**
             * Specifies the upgradeSettings property: Settings for upgrading the agentpool.
             *
             * @param upgradeSettings Settings for upgrading the agentpool.
             * @return the next definition stage.
             */
            WithCreate withUpgradeSettings(AgentPoolUpgradeSettings upgradeSettings);
        }
        /** The stage of the AgentPool definition allowing to specify availabilityZones. */
        interface WithAvailabilityZones {
            /**
             * Specifies the availabilityZones property: The list of Availability zones to use for nodes. This can only
             * be specified if the AgentPoolType property is 'VirtualMachineScaleSets'..
             *
             * @param availabilityZones The list of Availability zones to use for nodes. This can only be specified if
             *     the AgentPoolType property is 'VirtualMachineScaleSets'.
             * @return the next definition stage.
             */
            WithCreate withAvailabilityZones(List<String> availabilityZones);
        }
        /** The stage of the AgentPool definition allowing to specify enableNodePublicIp. */
        interface WithEnableNodePublicIp {
            /**
             * Specifies the enableNodePublicIp property: Some scenarios may require nodes in a node pool to receive
             * their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs
             * to make a direct connection to a cloud virtual machine to minimize hops. For more information see
             * [assigning a public IP per
             * node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
             * The default is false..
             *
             * @param enableNodePublicIp Some scenarios may require nodes in a node pool to receive their own dedicated
             *     public IP addresses. A common scenario is for gaming workloads, where a console needs to make a
             *     direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a
             *     public IP per
             *     node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
             *     The default is false.
             * @return the next definition stage.
             */
            WithCreate withEnableNodePublicIp(Boolean enableNodePublicIp);
        }
        /** The stage of the AgentPool definition allowing to specify nodePublicIpPrefixId. */
        interface WithNodePublicIpPrefixId {
            /**
             * Specifies the nodePublicIpPrefixId property: This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
             *
             * @param nodePublicIpPrefixId This is of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
             * @return the next definition stage.
             */
            WithCreate withNodePublicIpPrefixId(String nodePublicIpPrefixId);
        }
        /** The stage of the AgentPool definition allowing to specify scaleSetPriority. */
        interface WithScaleSetPriority {
            /**
             * Specifies the scaleSetPriority property: The Virtual Machine Scale Set priority. If not specified, the
             * default is 'Regular'..
             *
             * @param scaleSetPriority The Virtual Machine Scale Set priority. If not specified, the default is
             *     'Regular'.
             * @return the next definition stage.
             */
            WithCreate withScaleSetPriority(ScaleSetPriority scaleSetPriority);
        }
        /** The stage of the AgentPool definition allowing to specify scaleSetEvictionPolicy. */
        interface WithScaleSetEvictionPolicy {
            /**
             * Specifies the scaleSetEvictionPolicy property: This cannot be specified unless the scaleSetPriority is
             * 'Spot'. If not specified, the default is 'Delete'..
             *
             * @param scaleSetEvictionPolicy This cannot be specified unless the scaleSetPriority is 'Spot'. If not
             *     specified, the default is 'Delete'.
             * @return the next definition stage.
             */
            WithCreate withScaleSetEvictionPolicy(ScaleSetEvictionPolicy scaleSetEvictionPolicy);
        }
        /** The stage of the AgentPool definition allowing to specify spotMaxPrice. */
        interface WithSpotMaxPrice {
            /**
             * Specifies the spotMaxPrice property: Possible values are any decimal value greater than zero or -1 which
             * indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs
             * pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
             *
             * @param spotMaxPrice Possible values are any decimal value greater than zero or -1 which indicates the
             *     willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs
             *     pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
             * @return the next definition stage.
             */
            WithCreate withSpotMaxPrice(Float spotMaxPrice);
        }
        /** The stage of the AgentPool definition allowing to specify nodeLabels. */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: The node labels to be persisted across all nodes in agent pool..
             *
             * @param nodeLabels The node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            WithCreate withNodeLabels(Map<String, String> nodeLabels);
        }
        /** The stage of the AgentPool definition allowing to specify nodeTaints. */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: The taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             *
             * @param nodeTaints The taints added to new nodes during node pool create and scale. For example,
             *     key=value:NoSchedule.
             * @return the next definition stage.
             */
            WithCreate withNodeTaints(List<String> nodeTaints);
        }
        /** The stage of the AgentPool definition allowing to specify proximityPlacementGroupId. */
        interface WithProximityPlacementGroupId {
            /**
             * Specifies the proximityPlacementGroupId property: The ID for Proximity Placement Group..
             *
             * @param proximityPlacementGroupId The ID for Proximity Placement Group.
             * @return the next definition stage.
             */
            WithCreate withProximityPlacementGroupId(String proximityPlacementGroupId);
        }
        /** The stage of the AgentPool definition allowing to specify kubeletConfig. */
        interface WithKubeletConfig {
            /**
             * Specifies the kubeletConfig property: The Kubelet configuration on the agent pool nodes..
             *
             * @param kubeletConfig The Kubelet configuration on the agent pool nodes.
             * @return the next definition stage.
             */
            WithCreate withKubeletConfig(KubeletConfig kubeletConfig);
        }
        /** The stage of the AgentPool definition allowing to specify linuxOSConfig. */
        interface WithLinuxOSConfig {
            /**
             * Specifies the linuxOSConfig property: The OS configuration of Linux agent nodes..
             *
             * @param linuxOSConfig The OS configuration of Linux agent nodes.
             * @return the next definition stage.
             */
            WithCreate withLinuxOSConfig(LinuxOSConfig linuxOSConfig);
        }
        /** The stage of the AgentPool definition allowing to specify enableEncryptionAtHost. */
        interface WithEnableEncryptionAtHost {
            /**
             * Specifies the enableEncryptionAtHost property: This is only supported on certain VM sizes and in certain
             * Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption.
             *
             * @param enableEncryptionAtHost This is only supported on certain VM sizes and in certain Azure regions.
             *     For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption.
             * @return the next definition stage.
             */
            WithCreate withEnableEncryptionAtHost(Boolean enableEncryptionAtHost);
        }
        /** The stage of the AgentPool definition allowing to specify enableUltraSsd. */
        interface WithEnableUltraSsd {
            /**
             * Specifies the enableUltraSsd property: Whether to enable UltraSSD.
             *
             * @param enableUltraSsd Whether to enable UltraSSD.
             * @return the next definition stage.
             */
            WithCreate withEnableUltraSsd(Boolean enableUltraSsd);
        }
        /** The stage of the AgentPool definition allowing to specify enableFips. */
        interface WithEnableFips {
            /**
             * Specifies the enableFips property: See [Add a FIPS-enabled node
             * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
             * for more details..
             *
             * @param enableFips See [Add a FIPS-enabled node
             *     pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
             *     for more details.
             * @return the next definition stage.
             */
            WithCreate withEnableFips(Boolean enableFips);
        }
        /** The stage of the AgentPool definition allowing to specify gpuInstanceProfile. */
        interface WithGpuInstanceProfile {
            /**
             * Specifies the gpuInstanceProfile property: GPUInstanceProfile to be used to specify GPU MIG instance
             * profile for supported GPU VM SKU..
             *
             * @param gpuInstanceProfile GPUInstanceProfile to be used to specify GPU MIG instance profile for supported
             *     GPU VM SKU.
             * @return the next definition stage.
             */
            WithCreate withGpuInstanceProfile(GpuInstanceProfile gpuInstanceProfile);
        }
    }
    /**
     * Begins update for the AgentPool resource.
     *
     * @return the stage of resource update.
     */
    AgentPool.Update update();

    /** The template for AgentPool update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithCount,
            UpdateStages.WithVmSize,
            UpdateStages.WithOsDiskSizeGB,
            UpdateStages.WithOsDiskType,
            UpdateStages.WithKubeletDiskType,
            UpdateStages.WithVnetSubnetId,
            UpdateStages.WithPodSubnetId,
            UpdateStages.WithMaxPods,
            UpdateStages.WithOsType,
            UpdateStages.WithOsSku,
            UpdateStages.WithMaxCount,
            UpdateStages.WithMinCount,
            UpdateStages.WithEnableAutoScaling,
            UpdateStages.WithTypePropertiesType,
            UpdateStages.WithMode,
            UpdateStages.WithOrchestratorVersion,
            UpdateStages.WithUpgradeSettings,
            UpdateStages.WithAvailabilityZones,
            UpdateStages.WithEnableNodePublicIp,
            UpdateStages.WithNodePublicIpPrefixId,
            UpdateStages.WithScaleSetPriority,
            UpdateStages.WithScaleSetEvictionPolicy,
            UpdateStages.WithSpotMaxPrice,
            UpdateStages.WithNodeLabels,
            UpdateStages.WithNodeTaints,
            UpdateStages.WithProximityPlacementGroupId,
            UpdateStages.WithKubeletConfig,
            UpdateStages.WithLinuxOSConfig,
            UpdateStages.WithEnableEncryptionAtHost,
            UpdateStages.WithEnableUltraSsd,
            UpdateStages.WithEnableFips,
            UpdateStages.WithGpuInstanceProfile {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        AgentPool apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        AgentPool apply(Context context);
    }
    /** The AgentPool update stages. */
    interface UpdateStages {
        /** The stage of the AgentPool update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags to be persisted on the agent pool virtual machine scale set..
             *
             * @param tags The tags to be persisted on the agent pool virtual machine scale set.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the AgentPool update allowing to specify count. */
        interface WithCount {
            /**
             * Specifies the count property: Number of agents (VMs) to host docker containers. Allowed values must be in
             * the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system
             * pools. The default value is 1..
             *
             * @param count Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0
             *     to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The
             *     default value is 1.
             * @return the next definition stage.
             */
            Update withCount(Integer count);
        }
        /** The stage of the AgentPool update allowing to specify vmSize. */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: VM size availability varies by region. If a node contains insufficient
             * compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM
             * sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions.
             *
             * @param vmSize VM size availability varies by region. If a node contains insufficient compute resources
             *     (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see:
             *     https://docs.microsoft.com/azure/aks/quotas-skus-regions.
             * @return the next definition stage.
             */
            Update withVmSize(String vmSize);
        }
        /** The stage of the AgentPool update allowing to specify osDiskSizeGB. */
        interface WithOsDiskSizeGB {
            /**
             * Specifies the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every
             * machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to
             * the vmSize specified..
             *
             * @param osDiskSizeGB OS Disk Size in GB to be used to specify the disk size for every machine in the
             *     master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize
             *     specified.
             * @return the next definition stage.
             */
            Update withOsDiskSizeGB(Integer osDiskSizeGB);
        }
        /** The stage of the AgentPool update allowing to specify osDiskType. */
        interface WithOsDiskType {
            /**
             * Specifies the osDiskType property: The default is 'Ephemeral' if the VM supports it and has a cache disk
             * larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after
             * creation. For more information see [Ephemeral
             * OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os)..
             *
             * @param osDiskType The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the
             *     requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more
             *     information see [Ephemeral
             *     OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
             * @return the next definition stage.
             */
            Update withOsDiskType(OSDiskType osDiskType);
        }
        /** The stage of the AgentPool update allowing to specify kubeletDiskType. */
        interface WithKubeletDiskType {
            /**
             * Specifies the kubeletDiskType property: Determines the placement of emptyDir volumes, container runtime
             * data root, and Kubelet ephemeral storage..
             *
             * @param kubeletDiskType Determines the placement of emptyDir volumes, container runtime data root, and
             *     Kubelet ephemeral storage.
             * @return the next definition stage.
             */
            Update withKubeletDiskType(KubeletDiskType kubeletDiskType);
        }
        /** The stage of the AgentPool update allowing to specify vnetSubnetId. */
        interface WithVnetSubnetId {
            /**
             * Specifies the vnetSubnetId property: If this is not specified, a VNET and subnet will be generated and
             * used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes.
             * This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             *
             * @param vnetSubnetId If this is not specified, a VNET and subnet will be generated and used. If no
             *     podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is
             *     of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             * @return the next definition stage.
             */
            Update withVnetSubnetId(String vnetSubnetId);
        }
        /** The stage of the AgentPool update allowing to specify podSubnetId. */
        interface WithPodSubnetId {
            /**
             * Specifies the podSubnetId property: If omitted, pod IPs are statically assigned on the node subnet (see
             * vnetSubnetID for more details). This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             *
             * @param podSubnetId If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for
             *     more details). This is of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             * @return the next definition stage.
             */
            Update withPodSubnetId(String podSubnetId);
        }
        /** The stage of the AgentPool update allowing to specify maxPods. */
        interface WithMaxPods {
            /**
             * Specifies the maxPods property: The maximum number of pods that can run on a node..
             *
             * @param maxPods The maximum number of pods that can run on a node.
             * @return the next definition stage.
             */
            Update withMaxPods(Integer maxPods);
        }
        /** The stage of the AgentPool update allowing to specify osType. */
        interface WithOsType {
            /**
             * Specifies the osType property: OsType to be used to specify os type. Choose from Linux and Windows.
             * Default to Linux..
             *
             * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
             * @return the next definition stage.
             */
            Update withOsType(OSType osType);
        }
        /** The stage of the AgentPool update allowing to specify osSku. */
        interface WithOsSku {
            /**
             * Specifies the osSku property: Specifies an OS SKU. This value must not be specified if OSType is
             * Windows..
             *
             * @param osSku Specifies an OS SKU. This value must not be specified if OSType is Windows.
             * @return the next definition stage.
             */
            Update withOsSku(Ossku osSku);
        }
        /** The stage of the AgentPool update allowing to specify maxCount. */
        interface WithMaxCount {
            /**
             * Specifies the maxCount property: The maximum number of nodes for auto-scaling.
             *
             * @param maxCount The maximum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMaxCount(Integer maxCount);
        }
        /** The stage of the AgentPool update allowing to specify minCount. */
        interface WithMinCount {
            /**
             * Specifies the minCount property: The minimum number of nodes for auto-scaling.
             *
             * @param minCount The minimum number of nodes for auto-scaling.
             * @return the next definition stage.
             */
            Update withMinCount(Integer minCount);
        }
        /** The stage of the AgentPool update allowing to specify enableAutoScaling. */
        interface WithEnableAutoScaling {
            /**
             * Specifies the enableAutoScaling property: Whether to enable auto-scaler.
             *
             * @param enableAutoScaling Whether to enable auto-scaler.
             * @return the next definition stage.
             */
            Update withEnableAutoScaling(Boolean enableAutoScaling);
        }
        /** The stage of the AgentPool update allowing to specify typePropertiesType. */
        interface WithTypePropertiesType {
            /**
             * Specifies the typePropertiesType property: The type of Agent Pool..
             *
             * @param typePropertiesType The type of Agent Pool.
             * @return the next definition stage.
             */
            Update withTypePropertiesType(AgentPoolType typePropertiesType);
        }
        /** The stage of the AgentPool update allowing to specify mode. */
        interface WithMode {
            /**
             * Specifies the mode property: A cluster must have at least one 'System' Agent Pool at all times. For
             * additional information on agent pool restrictions and best practices, see:
             * https://docs.microsoft.com/azure/aks/use-system-pools.
             *
             * @param mode A cluster must have at least one 'System' Agent Pool at all times. For additional information
             *     on agent pool restrictions and best practices, see:
             *     https://docs.microsoft.com/azure/aks/use-system-pools.
             * @return the next definition stage.
             */
            Update withMode(AgentPoolMode mode);
        }
        /** The stage of the AgentPool update allowing to specify orchestratorVersion. */
        interface WithOrchestratorVersion {
            /**
             * Specifies the orchestratorVersion property: As a best practice, you should upgrade all node pools in an
             * AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the
             * control plane. The node pool minor version must be within two minor versions of the control plane
             * version. The node pool version cannot be greater than the control plane version. For more information see
             * [upgrading a node
             * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool)..
             *
             * @param orchestratorVersion As a best practice, you should upgrade all node pools in an AKS cluster to the
             *     same Kubernetes version. The node pool version must have the same major version as the control plane.
             *     The node pool minor version must be within two minor versions of the control plane version. The node
             *     pool version cannot be greater than the control plane version. For more information see [upgrading a
             *     node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
             * @return the next definition stage.
             */
            Update withOrchestratorVersion(String orchestratorVersion);
        }
        /** The stage of the AgentPool update allowing to specify upgradeSettings. */
        interface WithUpgradeSettings {
            /**
             * Specifies the upgradeSettings property: Settings for upgrading the agentpool.
             *
             * @param upgradeSettings Settings for upgrading the agentpool.
             * @return the next definition stage.
             */
            Update withUpgradeSettings(AgentPoolUpgradeSettings upgradeSettings);
        }
        /** The stage of the AgentPool update allowing to specify availabilityZones. */
        interface WithAvailabilityZones {
            /**
             * Specifies the availabilityZones property: The list of Availability zones to use for nodes. This can only
             * be specified if the AgentPoolType property is 'VirtualMachineScaleSets'..
             *
             * @param availabilityZones The list of Availability zones to use for nodes. This can only be specified if
             *     the AgentPoolType property is 'VirtualMachineScaleSets'.
             * @return the next definition stage.
             */
            Update withAvailabilityZones(List<String> availabilityZones);
        }
        /** The stage of the AgentPool update allowing to specify enableNodePublicIp. */
        interface WithEnableNodePublicIp {
            /**
             * Specifies the enableNodePublicIp property: Some scenarios may require nodes in a node pool to receive
             * their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs
             * to make a direct connection to a cloud virtual machine to minimize hops. For more information see
             * [assigning a public IP per
             * node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
             * The default is false..
             *
             * @param enableNodePublicIp Some scenarios may require nodes in a node pool to receive their own dedicated
             *     public IP addresses. A common scenario is for gaming workloads, where a console needs to make a
             *     direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a
             *     public IP per
             *     node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
             *     The default is false.
             * @return the next definition stage.
             */
            Update withEnableNodePublicIp(Boolean enableNodePublicIp);
        }
        /** The stage of the AgentPool update allowing to specify nodePublicIpPrefixId. */
        interface WithNodePublicIpPrefixId {
            /**
             * Specifies the nodePublicIpPrefixId property: This is of the form:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
             *
             * @param nodePublicIpPrefixId This is of the form:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}.
             * @return the next definition stage.
             */
            Update withNodePublicIpPrefixId(String nodePublicIpPrefixId);
        }
        /** The stage of the AgentPool update allowing to specify scaleSetPriority. */
        interface WithScaleSetPriority {
            /**
             * Specifies the scaleSetPriority property: The Virtual Machine Scale Set priority. If not specified, the
             * default is 'Regular'..
             *
             * @param scaleSetPriority The Virtual Machine Scale Set priority. If not specified, the default is
             *     'Regular'.
             * @return the next definition stage.
             */
            Update withScaleSetPriority(ScaleSetPriority scaleSetPriority);
        }
        /** The stage of the AgentPool update allowing to specify scaleSetEvictionPolicy. */
        interface WithScaleSetEvictionPolicy {
            /**
             * Specifies the scaleSetEvictionPolicy property: This cannot be specified unless the scaleSetPriority is
             * 'Spot'. If not specified, the default is 'Delete'..
             *
             * @param scaleSetEvictionPolicy This cannot be specified unless the scaleSetPriority is 'Spot'. If not
             *     specified, the default is 'Delete'.
             * @return the next definition stage.
             */
            Update withScaleSetEvictionPolicy(ScaleSetEvictionPolicy scaleSetEvictionPolicy);
        }
        /** The stage of the AgentPool update allowing to specify spotMaxPrice. */
        interface WithSpotMaxPrice {
            /**
             * Specifies the spotMaxPrice property: Possible values are any decimal value greater than zero or -1 which
             * indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs
             * pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
             *
             * @param spotMaxPrice Possible values are any decimal value greater than zero or -1 which indicates the
             *     willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs
             *     pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing).
             * @return the next definition stage.
             */
            Update withSpotMaxPrice(Float spotMaxPrice);
        }
        /** The stage of the AgentPool update allowing to specify nodeLabels. */
        interface WithNodeLabels {
            /**
             * Specifies the nodeLabels property: The node labels to be persisted across all nodes in agent pool..
             *
             * @param nodeLabels The node labels to be persisted across all nodes in agent pool.
             * @return the next definition stage.
             */
            Update withNodeLabels(Map<String, String> nodeLabels);
        }
        /** The stage of the AgentPool update allowing to specify nodeTaints. */
        interface WithNodeTaints {
            /**
             * Specifies the nodeTaints property: The taints added to new nodes during node pool create and scale. For
             * example, key=value:NoSchedule..
             *
             * @param nodeTaints The taints added to new nodes during node pool create and scale. For example,
             *     key=value:NoSchedule.
             * @return the next definition stage.
             */
            Update withNodeTaints(List<String> nodeTaints);
        }
        /** The stage of the AgentPool update allowing to specify proximityPlacementGroupId. */
        interface WithProximityPlacementGroupId {
            /**
             * Specifies the proximityPlacementGroupId property: The ID for Proximity Placement Group..
             *
             * @param proximityPlacementGroupId The ID for Proximity Placement Group.
             * @return the next definition stage.
             */
            Update withProximityPlacementGroupId(String proximityPlacementGroupId);
        }
        /** The stage of the AgentPool update allowing to specify kubeletConfig. */
        interface WithKubeletConfig {
            /**
             * Specifies the kubeletConfig property: The Kubelet configuration on the agent pool nodes..
             *
             * @param kubeletConfig The Kubelet configuration on the agent pool nodes.
             * @return the next definition stage.
             */
            Update withKubeletConfig(KubeletConfig kubeletConfig);
        }
        /** The stage of the AgentPool update allowing to specify linuxOSConfig. */
        interface WithLinuxOSConfig {
            /**
             * Specifies the linuxOSConfig property: The OS configuration of Linux agent nodes..
             *
             * @param linuxOSConfig The OS configuration of Linux agent nodes.
             * @return the next definition stage.
             */
            Update withLinuxOSConfig(LinuxOSConfig linuxOSConfig);
        }
        /** The stage of the AgentPool update allowing to specify enableEncryptionAtHost. */
        interface WithEnableEncryptionAtHost {
            /**
             * Specifies the enableEncryptionAtHost property: This is only supported on certain VM sizes and in certain
             * Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption.
             *
             * @param enableEncryptionAtHost This is only supported on certain VM sizes and in certain Azure regions.
             *     For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption.
             * @return the next definition stage.
             */
            Update withEnableEncryptionAtHost(Boolean enableEncryptionAtHost);
        }
        /** The stage of the AgentPool update allowing to specify enableUltraSsd. */
        interface WithEnableUltraSsd {
            /**
             * Specifies the enableUltraSsd property: Whether to enable UltraSSD.
             *
             * @param enableUltraSsd Whether to enable UltraSSD.
             * @return the next definition stage.
             */
            Update withEnableUltraSsd(Boolean enableUltraSsd);
        }
        /** The stage of the AgentPool update allowing to specify enableFips. */
        interface WithEnableFips {
            /**
             * Specifies the enableFips property: See [Add a FIPS-enabled node
             * pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
             * for more details..
             *
             * @param enableFips See [Add a FIPS-enabled node
             *     pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
             *     for more details.
             * @return the next definition stage.
             */
            Update withEnableFips(Boolean enableFips);
        }
        /** The stage of the AgentPool update allowing to specify gpuInstanceProfile. */
        interface WithGpuInstanceProfile {
            /**
             * Specifies the gpuInstanceProfile property: GPUInstanceProfile to be used to specify GPU MIG instance
             * profile for supported GPU VM SKU..
             *
             * @param gpuInstanceProfile GPUInstanceProfile to be used to specify GPU MIG instance profile for supported
             *     GPU VM SKU.
             * @return the next definition stage.
             */
            Update withGpuInstanceProfile(GpuInstanceProfile gpuInstanceProfile);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    AgentPool refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    AgentPool refresh(Context context);

    /**
     * Upgrading the node image version of an agent pool applies the newest OS and runtime updates to the nodes. AKS
     * provides one new image per week with the latest updates. For more details on node image versions, see:
     * https://docs.microsoft.com/azure/aks/node-image-upgrade.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    AgentPool upgradeNodeImageVersion();

    /**
     * Upgrading the node image version of an agent pool applies the newest OS and runtime updates to the nodes. AKS
     * provides one new image per week with the latest updates. For more details on node image versions, see:
     * https://docs.microsoft.com/azure/aks/node-image-upgrade.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    AgentPool upgradeNodeImageVersion(Context context);
}
