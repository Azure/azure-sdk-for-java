// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservice.generated.fluent.models.PrivateLinkResourceInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The BaseManagedCluster model. */
@JsonFlatten
@Fluent
public class BaseManagedCluster {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BaseManagedCluster.class);

    /*
     * The identity of the managed cluster, if configured.
     */
    @JsonProperty(value = "identity")
    private ManagedClusterIdentity identity;

    /*
     * The current provisioning state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The Power State of the cluster.
     */
    @JsonProperty(value = "properties.powerState", access = JsonProperty.Access.WRITE_ONLY)
    private PowerState powerState;

    /*
     * The max number of agent pools for the managed cluster.
     */
    @JsonProperty(value = "properties.maxAgentPools", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxAgentPools;

    /*
     * When you upgrade a supported AKS cluster, Kubernetes minor versions
     * cannot be skipped. All upgrades must be performed sequentially by major
     * version number. For example, upgrades between 1.14.x -> 1.15.x or 1.15.x
     * -> 1.16.x are allowed, however 1.14.x -> 1.16.x is not allowed. See
     * [upgrading an AKS
     * cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more
     * details.
     */
    @JsonProperty(value = "properties.kubernetesVersion")
    private String kubernetesVersion;

    /*
     * This cannot be updated once the Managed Cluster has been created.
     */
    @JsonProperty(value = "properties.dnsPrefix")
    private String dnsPrefix;

    /*
     * This cannot be updated once the Managed Cluster has been created.
     */
    @JsonProperty(value = "properties.fqdnSubdomain")
    private String fqdnSubdomain;

    /*
     * The FQDN of the master pool.
     */
    @JsonProperty(value = "properties.fqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String fqdn;

    /*
     * The FQDN of private cluster.
     */
    @JsonProperty(value = "properties.privateFQDN", access = JsonProperty.Access.WRITE_ONLY)
    private String privateFqdn;

    /*
     * The Azure Portal requires certain Cross-Origin Resource Sharing (CORS)
     * headers to be sent in some responses, which Kubernetes APIServer doesn't
     * handle by default. This special FQDN supports CORS, allowing the Azure
     * Portal to function properly.
     */
    @JsonProperty(value = "properties.azurePortalFQDN", access = JsonProperty.Access.WRITE_ONLY)
    private String azurePortalFqdn;

    /*
     * The agent pool properties.
     */
    @JsonProperty(value = "properties.agentPoolProfiles")
    private List<ManagedClusterAgentPoolProfile> agentPoolProfiles;

    /*
     * The profile for Linux VMs in the Managed Cluster.
     */
    @JsonProperty(value = "properties.linuxProfile")
    private ContainerServiceLinuxProfileAutoGenerated linuxProfile;

    /*
     * The profile for Windows VMs in the Managed Cluster.
     */
    @JsonProperty(value = "properties.windowsProfile")
    private ManagedClusterWindowsProfile windowsProfile;

    /*
     * Information about a service principal identity for the cluster to use
     * for manipulating Azure APIs.
     */
    @JsonProperty(value = "properties.servicePrincipalProfile")
    private ManagedClusterServicePrincipalProfile servicePrincipalProfile;

    /*
     * The profile of managed cluster add-on.
     */
    @JsonProperty(value = "properties.addonProfiles")
    private Map<String, ManagedClusterAddonProfile> addonProfiles;

    /*
     * See [use AAD pod
     * identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity)
     * for more details on AAD pod identity integration.
     */
    @JsonProperty(value = "properties.podIdentityProfile")
    private ManagedClusterPodIdentityProfile podIdentityProfile;

    /*
     * The name of the resource group containing agent pool nodes.
     */
    @JsonProperty(value = "properties.nodeResourceGroup")
    private String nodeResourceGroup;

    /*
     * Whether to enable Kubernetes Role-Based Access Control.
     */
    @JsonProperty(value = "properties.enableRBAC")
    private Boolean enableRbac;

    /*
     * (DEPRECATING) Whether to enable Kubernetes pod security policy
     * (preview). This feature is set for removal on October 15th, 2020. Learn
     * more at aka.ms/aks/azpodpolicy.
     */
    @JsonProperty(value = "properties.enablePodSecurityPolicy")
    private Boolean enablePodSecurityPolicy;

    /*
     * The network configuration profile.
     */
    @JsonProperty(value = "properties.networkProfile")
    private ContainerServiceNetworkProfile networkProfile;

    /*
     * The Azure Active Directory configuration.
     */
    @JsonProperty(value = "properties.aadProfile")
    private ManagedClusterAadProfile aadProfile;

    /*
     * The auto upgrade configuration.
     */
    @JsonProperty(value = "properties.autoUpgradeProfile")
    private ManagedClusterAutoUpgradeProfile autoUpgradeProfile;

    /*
     * Parameters to be applied to the cluster-autoscaler when enabled
     */
    @JsonProperty(value = "properties.autoScalerProfile")
    private ManagedClusterPropertiesAutoScalerProfile autoScalerProfile;

    /*
     * The access profile for managed cluster API server.
     */
    @JsonProperty(value = "properties.apiServerAccessProfile")
    private ManagedClusterApiServerAccessProfile apiServerAccessProfile;

    /*
     * This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'
     */
    @JsonProperty(value = "properties.diskEncryptionSetID")
    private String diskEncryptionSetId;

    /*
     * Identities associated with the cluster.
     */
    @JsonProperty(value = "properties.identityProfile")
    private Map<String, ManagedClusterPropertiesIdentityProfile> identityProfile;

    /*
     * Private link resources associated with the cluster.
     */
    @JsonProperty(value = "properties.privateLinkResources")
    private List<PrivateLinkResourceInner> privateLinkResources;

    /*
     * If set to true, getting static credentials will be disabled for this
     * cluster. This must only be used on Managed Clusters that are AAD
     * enabled. For more details see [disable local
     * accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     */
    @JsonProperty(value = "properties.disableLocalAccounts")
    private Boolean disableLocalAccounts;

    /*
     * Configurations for provisioning the cluster with HTTP proxy servers.
     */
    @JsonProperty(value = "properties.httpProxyConfig")
    private ManagedClusterHttpProxyConfig httpProxyConfig;

    /**
     * Get the identity property: The identity of the managed cluster, if configured.
     *
     * @return the identity value.
     */
    public ManagedClusterIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the managed cluster, if configured.
     *
     * @param identity the identity value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withIdentity(ManagedClusterIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the powerState property: The Power State of the cluster.
     *
     * @return the powerState value.
     */
    public PowerState powerState() {
        return this.powerState;
    }

    /**
     * Get the maxAgentPools property: The max number of agent pools for the managed cluster.
     *
     * @return the maxAgentPools value.
     */
    public Integer maxAgentPools() {
        return this.maxAgentPools;
    }

    /**
     * Get the kubernetesVersion property: When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be
     * skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between
     * 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not allowed. See
     * [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
     *
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Set the kubernetesVersion property: When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be
     * skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between
     * 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not allowed. See
     * [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
     *
     * @param kubernetesVersion the kubernetesVersion value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withKubernetesVersion(String kubernetesVersion) {
        this.kubernetesVersion = kubernetesVersion;
        return this;
    }

    /**
     * Get the dnsPrefix property: This cannot be updated once the Managed Cluster has been created.
     *
     * @return the dnsPrefix value.
     */
    public String dnsPrefix() {
        return this.dnsPrefix;
    }

    /**
     * Set the dnsPrefix property: This cannot be updated once the Managed Cluster has been created.
     *
     * @param dnsPrefix the dnsPrefix value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withDnsPrefix(String dnsPrefix) {
        this.dnsPrefix = dnsPrefix;
        return this;
    }

    /**
     * Get the fqdnSubdomain property: This cannot be updated once the Managed Cluster has been created.
     *
     * @return the fqdnSubdomain value.
     */
    public String fqdnSubdomain() {
        return this.fqdnSubdomain;
    }

    /**
     * Set the fqdnSubdomain property: This cannot be updated once the Managed Cluster has been created.
     *
     * @param fqdnSubdomain the fqdnSubdomain value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withFqdnSubdomain(String fqdnSubdomain) {
        this.fqdnSubdomain = fqdnSubdomain;
        return this;
    }

    /**
     * Get the fqdn property: The FQDN of the master pool.
     *
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the privateFqdn property: The FQDN of private cluster.
     *
     * @return the privateFqdn value.
     */
    public String privateFqdn() {
        return this.privateFqdn;
    }

    /**
     * Get the azurePortalFqdn property: The Azure Portal requires certain Cross-Origin Resource Sharing (CORS) headers
     * to be sent in some responses, which Kubernetes APIServer doesn't handle by default. This special FQDN supports
     * CORS, allowing the Azure Portal to function properly.
     *
     * @return the azurePortalFqdn value.
     */
    public String azurePortalFqdn() {
        return this.azurePortalFqdn;
    }

    /**
     * Get the agentPoolProfiles property: The agent pool properties.
     *
     * @return the agentPoolProfiles value.
     */
    public List<ManagedClusterAgentPoolProfile> agentPoolProfiles() {
        return this.agentPoolProfiles;
    }

    /**
     * Set the agentPoolProfiles property: The agent pool properties.
     *
     * @param agentPoolProfiles the agentPoolProfiles value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withAgentPoolProfiles(List<ManagedClusterAgentPoolProfile> agentPoolProfiles) {
        this.agentPoolProfiles = agentPoolProfiles;
        return this;
    }

    /**
     * Get the linuxProfile property: The profile for Linux VMs in the Managed Cluster.
     *
     * @return the linuxProfile value.
     */
    public ContainerServiceLinuxProfileAutoGenerated linuxProfile() {
        return this.linuxProfile;
    }

    /**
     * Set the linuxProfile property: The profile for Linux VMs in the Managed Cluster.
     *
     * @param linuxProfile the linuxProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withLinuxProfile(ContainerServiceLinuxProfileAutoGenerated linuxProfile) {
        this.linuxProfile = linuxProfile;
        return this;
    }

    /**
     * Get the windowsProfile property: The profile for Windows VMs in the Managed Cluster.
     *
     * @return the windowsProfile value.
     */
    public ManagedClusterWindowsProfile windowsProfile() {
        return this.windowsProfile;
    }

    /**
     * Set the windowsProfile property: The profile for Windows VMs in the Managed Cluster.
     *
     * @param windowsProfile the windowsProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withWindowsProfile(ManagedClusterWindowsProfile windowsProfile) {
        this.windowsProfile = windowsProfile;
        return this;
    }

    /**
     * Get the servicePrincipalProfile property: Information about a service principal identity for the cluster to use
     * for manipulating Azure APIs.
     *
     * @return the servicePrincipalProfile value.
     */
    public ManagedClusterServicePrincipalProfile servicePrincipalProfile() {
        return this.servicePrincipalProfile;
    }

    /**
     * Set the servicePrincipalProfile property: Information about a service principal identity for the cluster to use
     * for manipulating Azure APIs.
     *
     * @param servicePrincipalProfile the servicePrincipalProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withServicePrincipalProfile(
        ManagedClusterServicePrincipalProfile servicePrincipalProfile) {
        this.servicePrincipalProfile = servicePrincipalProfile;
        return this;
    }

    /**
     * Get the addonProfiles property: The profile of managed cluster add-on.
     *
     * @return the addonProfiles value.
     */
    public Map<String, ManagedClusterAddonProfile> addonProfiles() {
        return this.addonProfiles;
    }

    /**
     * Set the addonProfiles property: The profile of managed cluster add-on.
     *
     * @param addonProfiles the addonProfiles value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withAddonProfiles(Map<String, ManagedClusterAddonProfile> addonProfiles) {
        this.addonProfiles = addonProfiles;
        return this;
    }

    /**
     * Get the podIdentityProfile property: See [use AAD pod
     * identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity
     * integration.
     *
     * @return the podIdentityProfile value.
     */
    public ManagedClusterPodIdentityProfile podIdentityProfile() {
        return this.podIdentityProfile;
    }

    /**
     * Set the podIdentityProfile property: See [use AAD pod
     * identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity
     * integration.
     *
     * @param podIdentityProfile the podIdentityProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withPodIdentityProfile(ManagedClusterPodIdentityProfile podIdentityProfile) {
        this.podIdentityProfile = podIdentityProfile;
        return this;
    }

    /**
     * Get the nodeResourceGroup property: The name of the resource group containing agent pool nodes.
     *
     * @return the nodeResourceGroup value.
     */
    public String nodeResourceGroup() {
        return this.nodeResourceGroup;
    }

    /**
     * Set the nodeResourceGroup property: The name of the resource group containing agent pool nodes.
     *
     * @param nodeResourceGroup the nodeResourceGroup value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withNodeResourceGroup(String nodeResourceGroup) {
        this.nodeResourceGroup = nodeResourceGroup;
        return this;
    }

    /**
     * Get the enableRbac property: Whether to enable Kubernetes Role-Based Access Control.
     *
     * @return the enableRbac value.
     */
    public Boolean enableRbac() {
        return this.enableRbac;
    }

    /**
     * Set the enableRbac property: Whether to enable Kubernetes Role-Based Access Control.
     *
     * @param enableRbac the enableRbac value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withEnableRbac(Boolean enableRbac) {
        this.enableRbac = enableRbac;
        return this;
    }

    /**
     * Get the enablePodSecurityPolicy property: (DEPRECATING) Whether to enable Kubernetes pod security policy
     * (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
     *
     * @return the enablePodSecurityPolicy value.
     */
    public Boolean enablePodSecurityPolicy() {
        return this.enablePodSecurityPolicy;
    }

    /**
     * Set the enablePodSecurityPolicy property: (DEPRECATING) Whether to enable Kubernetes pod security policy
     * (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
     *
     * @param enablePodSecurityPolicy the enablePodSecurityPolicy value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withEnablePodSecurityPolicy(Boolean enablePodSecurityPolicy) {
        this.enablePodSecurityPolicy = enablePodSecurityPolicy;
        return this;
    }

    /**
     * Get the networkProfile property: The network configuration profile.
     *
     * @return the networkProfile value.
     */
    public ContainerServiceNetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: The network configuration profile.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withNetworkProfile(ContainerServiceNetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the aadProfile property: The Azure Active Directory configuration.
     *
     * @return the aadProfile value.
     */
    public ManagedClusterAadProfile aadProfile() {
        return this.aadProfile;
    }

    /**
     * Set the aadProfile property: The Azure Active Directory configuration.
     *
     * @param aadProfile the aadProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withAadProfile(ManagedClusterAadProfile aadProfile) {
        this.aadProfile = aadProfile;
        return this;
    }

    /**
     * Get the autoUpgradeProfile property: The auto upgrade configuration.
     *
     * @return the autoUpgradeProfile value.
     */
    public ManagedClusterAutoUpgradeProfile autoUpgradeProfile() {
        return this.autoUpgradeProfile;
    }

    /**
     * Set the autoUpgradeProfile property: The auto upgrade configuration.
     *
     * @param autoUpgradeProfile the autoUpgradeProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withAutoUpgradeProfile(ManagedClusterAutoUpgradeProfile autoUpgradeProfile) {
        this.autoUpgradeProfile = autoUpgradeProfile;
        return this;
    }

    /**
     * Get the autoScalerProfile property: Parameters to be applied to the cluster-autoscaler when enabled.
     *
     * @return the autoScalerProfile value.
     */
    public ManagedClusterPropertiesAutoScalerProfile autoScalerProfile() {
        return this.autoScalerProfile;
    }

    /**
     * Set the autoScalerProfile property: Parameters to be applied to the cluster-autoscaler when enabled.
     *
     * @param autoScalerProfile the autoScalerProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withAutoScalerProfile(ManagedClusterPropertiesAutoScalerProfile autoScalerProfile) {
        this.autoScalerProfile = autoScalerProfile;
        return this;
    }

    /**
     * Get the apiServerAccessProfile property: The access profile for managed cluster API server.
     *
     * @return the apiServerAccessProfile value.
     */
    public ManagedClusterApiServerAccessProfile apiServerAccessProfile() {
        return this.apiServerAccessProfile;
    }

    /**
     * Set the apiServerAccessProfile property: The access profile for managed cluster API server.
     *
     * @param apiServerAccessProfile the apiServerAccessProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withApiServerAccessProfile(ManagedClusterApiServerAccessProfile apiServerAccessProfile) {
        this.apiServerAccessProfile = apiServerAccessProfile;
        return this;
    }

    /**
     * Get the diskEncryptionSetId property: This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'.
     *
     * @return the diskEncryptionSetId value.
     */
    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * Set the diskEncryptionSetId property: This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'.
     *
     * @param diskEncryptionSetId the diskEncryptionSetId value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withDiskEncryptionSetId(String diskEncryptionSetId) {
        this.diskEncryptionSetId = diskEncryptionSetId;
        return this;
    }

    /**
     * Get the identityProfile property: Identities associated with the cluster.
     *
     * @return the identityProfile value.
     */
    public Map<String, ManagedClusterPropertiesIdentityProfile> identityProfile() {
        return this.identityProfile;
    }

    /**
     * Set the identityProfile property: Identities associated with the cluster.
     *
     * @param identityProfile the identityProfile value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withIdentityProfile(
        Map<String, ManagedClusterPropertiesIdentityProfile> identityProfile) {
        this.identityProfile = identityProfile;
        return this;
    }

    /**
     * Get the privateLinkResources property: Private link resources associated with the cluster.
     *
     * @return the privateLinkResources value.
     */
    public List<PrivateLinkResourceInner> privateLinkResources() {
        return this.privateLinkResources;
    }

    /**
     * Set the privateLinkResources property: Private link resources associated with the cluster.
     *
     * @param privateLinkResources the privateLinkResources value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withPrivateLinkResources(List<PrivateLinkResourceInner> privateLinkResources) {
        this.privateLinkResources = privateLinkResources;
        return this;
    }

    /**
     * Get the disableLocalAccounts property: If set to true, getting static credentials will be disabled for this
     * cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local
     * accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     *
     * @return the disableLocalAccounts value.
     */
    public Boolean disableLocalAccounts() {
        return this.disableLocalAccounts;
    }

    /**
     * Set the disableLocalAccounts property: If set to true, getting static credentials will be disabled for this
     * cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local
     * accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     *
     * @param disableLocalAccounts the disableLocalAccounts value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withDisableLocalAccounts(Boolean disableLocalAccounts) {
        this.disableLocalAccounts = disableLocalAccounts;
        return this;
    }

    /**
     * Get the httpProxyConfig property: Configurations for provisioning the cluster with HTTP proxy servers.
     *
     * @return the httpProxyConfig value.
     */
    public ManagedClusterHttpProxyConfig httpProxyConfig() {
        return this.httpProxyConfig;
    }

    /**
     * Set the httpProxyConfig property: Configurations for provisioning the cluster with HTTP proxy servers.
     *
     * @param httpProxyConfig the httpProxyConfig value to set.
     * @return the BaseManagedCluster object itself.
     */
    public BaseManagedCluster withHttpProxyConfig(ManagedClusterHttpProxyConfig httpProxyConfig) {
        this.httpProxyConfig = httpProxyConfig;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (powerState() != null) {
            powerState().validate();
        }
        if (agentPoolProfiles() != null) {
            agentPoolProfiles().forEach(e -> e.validate());
        }
        if (linuxProfile() != null) {
            linuxProfile().validate();
        }
        if (windowsProfile() != null) {
            windowsProfile().validate();
        }
        if (servicePrincipalProfile() != null) {
            servicePrincipalProfile().validate();
        }
        if (addonProfiles() != null) {
            addonProfiles()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (podIdentityProfile() != null) {
            podIdentityProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (aadProfile() != null) {
            aadProfile().validate();
        }
        if (autoUpgradeProfile() != null) {
            autoUpgradeProfile().validate();
        }
        if (autoScalerProfile() != null) {
            autoScalerProfile().validate();
        }
        if (apiServerAccessProfile() != null) {
            apiServerAccessProfile().validate();
        }
        if (identityProfile() != null) {
            identityProfile()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (privateLinkResources() != null) {
            privateLinkResources().forEach(e -> e.validate());
        }
        if (httpProxyConfig() != null) {
            httpProxyConfig().validate();
        }
    }
}
