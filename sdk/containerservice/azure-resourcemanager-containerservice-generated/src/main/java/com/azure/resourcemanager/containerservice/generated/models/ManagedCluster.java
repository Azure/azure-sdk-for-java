// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerservice.generated.fluent.models.ManagedClusterInner;
import com.azure.resourcemanager.containerservice.generated.fluent.models.PrivateLinkResourceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of ManagedCluster. */
public interface ManagedCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The managed cluster SKU.
     *
     * @return the sku value.
     */
    ManagedClusterSku sku();

    /**
     * Gets the extendedLocation property: The extended location of the Virtual Machine.
     *
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the identity property: The identity of the managed cluster, if configured.
     *
     * @return the identity value.
     */
    ManagedClusterIdentity identity();

    /**
     * Gets the provisioningState property: The current provisioning state.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the powerState property: The Power State of the cluster.
     *
     * @return the powerState value.
     */
    PowerState powerState();

    /**
     * Gets the maxAgentPools property: The max number of agent pools for the managed cluster.
     *
     * @return the maxAgentPools value.
     */
    Integer maxAgentPools();

    /**
     * Gets the kubernetesVersion property: When you upgrade a supported AKS cluster, Kubernetes minor versions cannot
     * be skipped. All upgrades must be performed sequentially by major version number. For example, upgrades between
     * 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not allowed. See
     * [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details.
     *
     * @return the kubernetesVersion value.
     */
    String kubernetesVersion();

    /**
     * Gets the dnsPrefix property: This cannot be updated once the Managed Cluster has been created.
     *
     * @return the dnsPrefix value.
     */
    String dnsPrefix();

    /**
     * Gets the fqdnSubdomain property: This cannot be updated once the Managed Cluster has been created.
     *
     * @return the fqdnSubdomain value.
     */
    String fqdnSubdomain();

    /**
     * Gets the fqdn property: The FQDN of the master pool.
     *
     * @return the fqdn value.
     */
    String fqdn();

    /**
     * Gets the privateFqdn property: The FQDN of private cluster.
     *
     * @return the privateFqdn value.
     */
    String privateFqdn();

    /**
     * Gets the azurePortalFqdn property: The Azure Portal requires certain Cross-Origin Resource Sharing (CORS) headers
     * to be sent in some responses, which Kubernetes APIServer doesn't handle by default. This special FQDN supports
     * CORS, allowing the Azure Portal to function properly.
     *
     * @return the azurePortalFqdn value.
     */
    String azurePortalFqdn();

    /**
     * Gets the agentPoolProfiles property: The agent pool properties.
     *
     * @return the agentPoolProfiles value.
     */
    List<ManagedClusterAgentPoolProfile> agentPoolProfiles();

    /**
     * Gets the linuxProfile property: The profile for Linux VMs in the Managed Cluster.
     *
     * @return the linuxProfile value.
     */
    ContainerServiceLinuxProfileAutoGenerated linuxProfile();

    /**
     * Gets the windowsProfile property: The profile for Windows VMs in the Managed Cluster.
     *
     * @return the windowsProfile value.
     */
    ManagedClusterWindowsProfile windowsProfile();

    /**
     * Gets the servicePrincipalProfile property: Information about a service principal identity for the cluster to use
     * for manipulating Azure APIs.
     *
     * @return the servicePrincipalProfile value.
     */
    ManagedClusterServicePrincipalProfile servicePrincipalProfile();

    /**
     * Gets the addonProfiles property: The profile of managed cluster add-on.
     *
     * @return the addonProfiles value.
     */
    Map<String, ManagedClusterAddonProfile> addonProfiles();

    /**
     * Gets the podIdentityProfile property: See [use AAD pod
     * identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod identity
     * integration.
     *
     * @return the podIdentityProfile value.
     */
    ManagedClusterPodIdentityProfile podIdentityProfile();

    /**
     * Gets the nodeResourceGroup property: The name of the resource group containing agent pool nodes.
     *
     * @return the nodeResourceGroup value.
     */
    String nodeResourceGroup();

    /**
     * Gets the enableRbac property: Whether to enable Kubernetes Role-Based Access Control.
     *
     * @return the enableRbac value.
     */
    Boolean enableRbac();

    /**
     * Gets the enablePodSecurityPolicy property: (DEPRECATING) Whether to enable Kubernetes pod security policy
     * (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
     *
     * @return the enablePodSecurityPolicy value.
     */
    Boolean enablePodSecurityPolicy();

    /**
     * Gets the networkProfile property: The network configuration profile.
     *
     * @return the networkProfile value.
     */
    ContainerServiceNetworkProfile networkProfile();

    /**
     * Gets the aadProfile property: The Azure Active Directory configuration.
     *
     * @return the aadProfile value.
     */
    ManagedClusterAadProfile aadProfile();

    /**
     * Gets the autoUpgradeProfile property: The auto upgrade configuration.
     *
     * @return the autoUpgradeProfile value.
     */
    ManagedClusterAutoUpgradeProfile autoUpgradeProfile();

    /**
     * Gets the autoScalerProfile property: Parameters to be applied to the cluster-autoscaler when enabled.
     *
     * @return the autoScalerProfile value.
     */
    ManagedClusterPropertiesAutoScalerProfile autoScalerProfile();

    /**
     * Gets the apiServerAccessProfile property: The access profile for managed cluster API server.
     *
     * @return the apiServerAccessProfile value.
     */
    ManagedClusterApiServerAccessProfile apiServerAccessProfile();

    /**
     * Gets the diskEncryptionSetId property: This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'.
     *
     * @return the diskEncryptionSetId value.
     */
    String diskEncryptionSetId();

    /**
     * Gets the identityProfile property: Identities associated with the cluster.
     *
     * @return the identityProfile value.
     */
    Map<String, ManagedClusterPropertiesIdentityProfile> identityProfile();

    /**
     * Gets the privateLinkResources property: Private link resources associated with the cluster.
     *
     * @return the privateLinkResources value.
     */
    List<PrivateLinkResource> privateLinkResources();

    /**
     * Gets the disableLocalAccounts property: If set to true, getting static credentials will be disabled for this
     * cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local
     * accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
     *
     * @return the disableLocalAccounts value.
     */
    Boolean disableLocalAccounts();

    /**
     * Gets the httpProxyConfig property: Configurations for provisioning the cluster with HTTP proxy servers.
     *
     * @return the httpProxyConfig value.
     */
    ManagedClusterHttpProxyConfig httpProxyConfig();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.containerservice.generated.fluent.models.ManagedClusterInner object.
     *
     * @return the inner object.
     */
    ManagedClusterInner innerModel();

    /** The entirety of the ManagedCluster definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The ManagedCluster definition stages. */
    interface DefinitionStages {
        /** The first stage of the ManagedCluster definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ManagedCluster definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the ManagedCluster definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the ManagedCluster definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithExtendedLocation,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithKubernetesVersion,
                DefinitionStages.WithDnsPrefix,
                DefinitionStages.WithFqdnSubdomain,
                DefinitionStages.WithAgentPoolProfiles,
                DefinitionStages.WithLinuxProfile,
                DefinitionStages.WithWindowsProfile,
                DefinitionStages.WithServicePrincipalProfile,
                DefinitionStages.WithAddonProfiles,
                DefinitionStages.WithPodIdentityProfile,
                DefinitionStages.WithNodeResourceGroup,
                DefinitionStages.WithEnableRbac,
                DefinitionStages.WithEnablePodSecurityPolicy,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithAadProfile,
                DefinitionStages.WithAutoUpgradeProfile,
                DefinitionStages.WithAutoScalerProfile,
                DefinitionStages.WithApiServerAccessProfile,
                DefinitionStages.WithDiskEncryptionSetId,
                DefinitionStages.WithIdentityProfile,
                DefinitionStages.WithPrivateLinkResources,
                DefinitionStages.WithDisableLocalAccounts,
                DefinitionStages.WithHttpProxyConfig {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ManagedCluster create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedCluster create(Context context);
        }
        /** The stage of the ManagedCluster definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ManagedCluster definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The managed cluster SKU..
             *
             * @param sku The managed cluster SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(ManagedClusterSku sku);
        }
        /** The stage of the ManagedCluster definition allowing to specify extendedLocation. */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: The extended location of the Virtual Machine..
             *
             * @param extendedLocation The extended location of the Virtual Machine.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(ExtendedLocation extendedLocation);
        }
        /** The stage of the ManagedCluster definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the managed cluster, if configured..
             *
             * @param identity The identity of the managed cluster, if configured.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedClusterIdentity identity);
        }
        /** The stage of the ManagedCluster definition allowing to specify kubernetesVersion. */
        interface WithKubernetesVersion {
            /**
             * Specifies the kubernetesVersion property: When you upgrade a supported AKS cluster, Kubernetes minor
             * versions cannot be skipped. All upgrades must be performed sequentially by major version number. For
             * example, upgrades between 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt;
             * 1.16.x is not allowed. See [upgrading an AKS
             * cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for more details..
             *
             * @param kubernetesVersion When you upgrade a supported AKS cluster, Kubernetes minor versions cannot be
             *     skipped. All upgrades must be performed sequentially by major version number. For example, upgrades
             *     between 1.14.x -&gt; 1.15.x or 1.15.x -&gt; 1.16.x are allowed, however 1.14.x -&gt; 1.16.x is not
             *     allowed. See [upgrading an AKS cluster](https://docs.microsoft.com/azure/aks/upgrade-cluster) for
             *     more details.
             * @return the next definition stage.
             */
            WithCreate withKubernetesVersion(String kubernetesVersion);
        }
        /** The stage of the ManagedCluster definition allowing to specify dnsPrefix. */
        interface WithDnsPrefix {
            /**
             * Specifies the dnsPrefix property: This cannot be updated once the Managed Cluster has been created..
             *
             * @param dnsPrefix This cannot be updated once the Managed Cluster has been created.
             * @return the next definition stage.
             */
            WithCreate withDnsPrefix(String dnsPrefix);
        }
        /** The stage of the ManagedCluster definition allowing to specify fqdnSubdomain. */
        interface WithFqdnSubdomain {
            /**
             * Specifies the fqdnSubdomain property: This cannot be updated once the Managed Cluster has been created..
             *
             * @param fqdnSubdomain This cannot be updated once the Managed Cluster has been created.
             * @return the next definition stage.
             */
            WithCreate withFqdnSubdomain(String fqdnSubdomain);
        }
        /** The stage of the ManagedCluster definition allowing to specify agentPoolProfiles. */
        interface WithAgentPoolProfiles {
            /**
             * Specifies the agentPoolProfiles property: The agent pool properties..
             *
             * @param agentPoolProfiles The agent pool properties.
             * @return the next definition stage.
             */
            WithCreate withAgentPoolProfiles(List<ManagedClusterAgentPoolProfile> agentPoolProfiles);
        }
        /** The stage of the ManagedCluster definition allowing to specify linuxProfile. */
        interface WithLinuxProfile {
            /**
             * Specifies the linuxProfile property: The profile for Linux VMs in the Managed Cluster..
             *
             * @param linuxProfile The profile for Linux VMs in the Managed Cluster.
             * @return the next definition stage.
             */
            WithCreate withLinuxProfile(ContainerServiceLinuxProfileAutoGenerated linuxProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify windowsProfile. */
        interface WithWindowsProfile {
            /**
             * Specifies the windowsProfile property: The profile for Windows VMs in the Managed Cluster..
             *
             * @param windowsProfile The profile for Windows VMs in the Managed Cluster.
             * @return the next definition stage.
             */
            WithCreate withWindowsProfile(ManagedClusterWindowsProfile windowsProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify servicePrincipalProfile. */
        interface WithServicePrincipalProfile {
            /**
             * Specifies the servicePrincipalProfile property: Information about a service principal identity for the
             * cluster to use for manipulating Azure APIs..
             *
             * @param servicePrincipalProfile Information about a service principal identity for the cluster to use for
             *     manipulating Azure APIs.
             * @return the next definition stage.
             */
            WithCreate withServicePrincipalProfile(ManagedClusterServicePrincipalProfile servicePrincipalProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify addonProfiles. */
        interface WithAddonProfiles {
            /**
             * Specifies the addonProfiles property: The profile of managed cluster add-on..
             *
             * @param addonProfiles The profile of managed cluster add-on.
             * @return the next definition stage.
             */
            WithCreate withAddonProfiles(Map<String, ManagedClusterAddonProfile> addonProfiles);
        }
        /** The stage of the ManagedCluster definition allowing to specify podIdentityProfile. */
        interface WithPodIdentityProfile {
            /**
             * Specifies the podIdentityProfile property: See [use AAD pod
             * identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod
             * identity integration..
             *
             * @param podIdentityProfile See [use AAD pod
             *     identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on AAD pod
             *     identity integration.
             * @return the next definition stage.
             */
            WithCreate withPodIdentityProfile(ManagedClusterPodIdentityProfile podIdentityProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify nodeResourceGroup. */
        interface WithNodeResourceGroup {
            /**
             * Specifies the nodeResourceGroup property: The name of the resource group containing agent pool nodes..
             *
             * @param nodeResourceGroup The name of the resource group containing agent pool nodes.
             * @return the next definition stage.
             */
            WithCreate withNodeResourceGroup(String nodeResourceGroup);
        }
        /** The stage of the ManagedCluster definition allowing to specify enableRbac. */
        interface WithEnableRbac {
            /**
             * Specifies the enableRbac property: Whether to enable Kubernetes Role-Based Access Control..
             *
             * @param enableRbac Whether to enable Kubernetes Role-Based Access Control.
             * @return the next definition stage.
             */
            WithCreate withEnableRbac(Boolean enableRbac);
        }
        /** The stage of the ManagedCluster definition allowing to specify enablePodSecurityPolicy. */
        interface WithEnablePodSecurityPolicy {
            /**
             * Specifies the enablePodSecurityPolicy property: (DEPRECATING) Whether to enable Kubernetes pod security
             * policy (preview). This feature is set for removal on October 15th, 2020. Learn more at
             * aka.ms/aks/azpodpolicy..
             *
             * @param enablePodSecurityPolicy (DEPRECATING) Whether to enable Kubernetes pod security policy (preview).
             *     This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
             * @return the next definition stage.
             */
            WithCreate withEnablePodSecurityPolicy(Boolean enablePodSecurityPolicy);
        }
        /** The stage of the ManagedCluster definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: The network configuration profile..
             *
             * @param networkProfile The network configuration profile.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(ContainerServiceNetworkProfile networkProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify aadProfile. */
        interface WithAadProfile {
            /**
             * Specifies the aadProfile property: The Azure Active Directory configuration..
             *
             * @param aadProfile The Azure Active Directory configuration.
             * @return the next definition stage.
             */
            WithCreate withAadProfile(ManagedClusterAadProfile aadProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify autoUpgradeProfile. */
        interface WithAutoUpgradeProfile {
            /**
             * Specifies the autoUpgradeProfile property: The auto upgrade configuration..
             *
             * @param autoUpgradeProfile The auto upgrade configuration.
             * @return the next definition stage.
             */
            WithCreate withAutoUpgradeProfile(ManagedClusterAutoUpgradeProfile autoUpgradeProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify autoScalerProfile. */
        interface WithAutoScalerProfile {
            /**
             * Specifies the autoScalerProfile property: Parameters to be applied to the cluster-autoscaler when
             * enabled.
             *
             * @param autoScalerProfile Parameters to be applied to the cluster-autoscaler when enabled.
             * @return the next definition stage.
             */
            WithCreate withAutoScalerProfile(ManagedClusterPropertiesAutoScalerProfile autoScalerProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify apiServerAccessProfile. */
        interface WithApiServerAccessProfile {
            /**
             * Specifies the apiServerAccessProfile property: The access profile for managed cluster API server..
             *
             * @param apiServerAccessProfile The access profile for managed cluster API server.
             * @return the next definition stage.
             */
            WithCreate withApiServerAccessProfile(ManagedClusterApiServerAccessProfile apiServerAccessProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify diskEncryptionSetId. */
        interface WithDiskEncryptionSetId {
            /**
             * Specifies the diskEncryptionSetId property: This is of the form:
             * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'.
             *
             * @param diskEncryptionSetId This is of the form:
             *     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{encryptionSetName}'.
             * @return the next definition stage.
             */
            WithCreate withDiskEncryptionSetId(String diskEncryptionSetId);
        }
        /** The stage of the ManagedCluster definition allowing to specify identityProfile. */
        interface WithIdentityProfile {
            /**
             * Specifies the identityProfile property: Identities associated with the cluster..
             *
             * @param identityProfile Identities associated with the cluster.
             * @return the next definition stage.
             */
            WithCreate withIdentityProfile(Map<String, ManagedClusterPropertiesIdentityProfile> identityProfile);
        }
        /** The stage of the ManagedCluster definition allowing to specify privateLinkResources. */
        interface WithPrivateLinkResources {
            /**
             * Specifies the privateLinkResources property: Private link resources associated with the cluster..
             *
             * @param privateLinkResources Private link resources associated with the cluster.
             * @return the next definition stage.
             */
            WithCreate withPrivateLinkResources(List<PrivateLinkResourceInner> privateLinkResources);
        }
        /** The stage of the ManagedCluster definition allowing to specify disableLocalAccounts. */
        interface WithDisableLocalAccounts {
            /**
             * Specifies the disableLocalAccounts property: If set to true, getting static credentials will be disabled
             * for this cluster. This must only be used on Managed Clusters that are AAD enabled. For more details see
             * [disable local
             * accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview)..
             *
             * @param disableLocalAccounts If set to true, getting static credentials will be disabled for this cluster.
             *     This must only be used on Managed Clusters that are AAD enabled. For more details see [disable local
             *     accounts](https://docs.microsoft.com/azure/aks/managed-aad#disable-local-accounts-preview).
             * @return the next definition stage.
             */
            WithCreate withDisableLocalAccounts(Boolean disableLocalAccounts);
        }
        /** The stage of the ManagedCluster definition allowing to specify httpProxyConfig. */
        interface WithHttpProxyConfig {
            /**
             * Specifies the httpProxyConfig property: Configurations for provisioning the cluster with HTTP proxy
             * servers..
             *
             * @param httpProxyConfig Configurations for provisioning the cluster with HTTP proxy servers.
             * @return the next definition stage.
             */
            WithCreate withHttpProxyConfig(ManagedClusterHttpProxyConfig httpProxyConfig);
        }
    }
    /**
     * Begins update for the ManagedCluster resource.
     *
     * @return the stage of resource update.
     */
    ManagedCluster.Update update();

    /** The template for ManagedCluster update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ManagedCluster apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedCluster apply(Context context);
    }
    /** The ManagedCluster update stages. */
    interface UpdateStages {
        /** The stage of the ManagedCluster update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ManagedCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedCluster refresh(Context context);

    /**
     * Lists the admin credentials of a managed cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    CredentialResults listClusterAdminCredentials();

    /**
     * Lists the admin credentials of a managed cluster.
     *
     * @param serverFqdn server fqdn type for credentials to be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    Response<CredentialResults> listClusterAdminCredentialsWithResponse(String serverFqdn, Context context);

    /**
     * Lists the user credentials of a managed cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    CredentialResults listClusterUserCredentials();

    /**
     * Lists the user credentials of a managed cluster.
     *
     * @param serverFqdn server fqdn type for credentials to be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    Response<CredentialResults> listClusterUserCredentialsWithResponse(String serverFqdn, Context context);

    /**
     * Lists the cluster monitoring user credentials of a managed cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    CredentialResults listClusterMonitoringUserCredentials();

    /**
     * Lists the cluster monitoring user credentials of a managed cluster.
     *
     * @param serverFqdn server fqdn type for credentials to be returned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list credential result response.
     */
    Response<CredentialResults> listClusterMonitoringUserCredentialsWithResponse(String serverFqdn, Context context);

    /**
     * This action cannot be performed on a cluster that is not using a service principal.
     *
     * @param parameters The service principal profile to set on the managed cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetServicePrincipalProfile(ManagedClusterServicePrincipalProfile parameters);

    /**
     * This action cannot be performed on a cluster that is not using a service principal.
     *
     * @param parameters The service principal profile to set on the managed cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetServicePrincipalProfile(ManagedClusterServicePrincipalProfile parameters, Context context);

    /**
     * Reset the AAD Profile of a managed cluster.
     *
     * @param parameters The AAD profile to set on the Managed Cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetAadProfile(ManagedClusterAadProfile parameters);

    /**
     * Reset the AAD Profile of a managed cluster.
     *
     * @param parameters The AAD profile to set on the Managed Cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetAadProfile(ManagedClusterAadProfile parameters, Context context);

    /**
     * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more details about
     * rotating managed cluster certificates.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateClusterCertificates();

    /**
     * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more details about
     * rotating managed cluster certificates.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void rotateClusterCertificates(Context context);

    /**
     * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster stops the
     * control plane and agent nodes entirely, while maintaining all object and cluster state. A cluster does not accrue
     * charges while it is stopped. See [stopping a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster)
     * for more details about stopping a cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster stops the
     * control plane and agent nodes entirely, while maintaining all object and cluster state. A cluster does not accrue
     * charges while it is stopped. See [stopping a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster)
     * for more details about stopping a cluster.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(Context context);

    /**
     * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about starting
     * a cluster.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about starting
     * a cluster.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * AKS will create a pod to run the command. This is primarily useful for private clusters. For more information see
     * [AKS Run Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).
     *
     * @param requestPayload The run command request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run command result.
     */
    RunCommandResult runCommand(RunCommandRequest requestPayload);

    /**
     * AKS will create a pod to run the command. This is primarily useful for private clusters. For more information see
     * [AKS Run Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).
     *
     * @param requestPayload The run command request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return run command result.
     */
    RunCommandResult runCommand(RunCommandRequest requestPayload, Context context);
}
