// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerservice.generated.fluent.ContainerServicesClient;
import com.azure.resourcemanager.containerservice.generated.fluent.models.ContainerServiceInner;
import com.azure.resourcemanager.containerservice.generated.fluent.models.OrchestratorVersionProfileListResultInner;
import com.azure.resourcemanager.containerservice.generated.models.ContainerService;
import com.azure.resourcemanager.containerservice.generated.models.ContainerServices;
import com.azure.resourcemanager.containerservice.generated.models.OrchestratorVersionProfileListResult;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ContainerServicesImpl implements ContainerServices {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContainerServicesImpl.class);

    private final ContainerServicesClient innerClient;

    private final com.azure.resourcemanager.containerservice.generated.ContainerServiceManager serviceManager;

    public ContainerServicesImpl(
        ContainerServicesClient innerClient,
        com.azure.resourcemanager.containerservice.generated.ContainerServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ContainerService> list() {
        PagedIterable<ContainerServiceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ContainerServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerService> list(Context context) {
        PagedIterable<ContainerServiceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new ContainerServiceImpl(inner1, this.manager()));
    }

    public ContainerService getByResourceGroup(String resourceGroupName, String containerServiceName) {
        ContainerServiceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, containerServiceName);
        if (inner != null) {
            return new ContainerServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContainerService> getByResourceGroupWithResponse(
        String resourceGroupName, String containerServiceName, Context context) {
        Response<ContainerServiceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, containerServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContainerServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String containerServiceName) {
        this.serviceClient().delete(resourceGroupName, containerServiceName);
    }

    public void delete(String resourceGroupName, String containerServiceName, Context context) {
        this.serviceClient().delete(resourceGroupName, containerServiceName, context);
    }

    public PagedIterable<ContainerService> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ContainerServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ContainerServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerService> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ContainerServiceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ContainerServiceImpl(inner1, this.manager()));
    }

    public OrchestratorVersionProfileListResult listOrchestrators(String location) {
        OrchestratorVersionProfileListResultInner inner = this.serviceClient().listOrchestrators(location);
        if (inner != null) {
            return new OrchestratorVersionProfileListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<OrchestratorVersionProfileListResult> listOrchestratorsWithResponse(
        String location, String resourceType, Context context) {
        Response<OrchestratorVersionProfileListResultInner> inner =
            this.serviceClient().listOrchestratorsWithResponse(location, resourceType, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new OrchestratorVersionProfileListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerService getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerServiceName = Utils.getValueFromIdByName(id, "containerServices");
        if (containerServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'containerServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerServiceName, Context.NONE).getValue();
    }

    public Response<ContainerService> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerServiceName = Utils.getValueFromIdByName(id, "containerServices");
        if (containerServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'containerServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerServiceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerServiceName = Utils.getValueFromIdByName(id, "containerServices");
        if (containerServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'containerServices'.", id)));
        }
        this.delete(resourceGroupName, containerServiceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerServiceName = Utils.getValueFromIdByName(id, "containerServices");
        if (containerServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'containerServices'.", id)));
        }
        this.delete(resourceGroupName, containerServiceName, context);
    }

    private ContainerServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerservice.generated.ContainerServiceManager manager() {
        return this.serviceManager;
    }

    public ContainerServiceImpl define(String name) {
        return new ContainerServiceImpl(name, this.manager());
    }
}
