/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerservice.v2017_08_31.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.containerservice.v2017_08_31.ManagedCluster;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.containerservice.v2017_08_31.ContainerServiceAgentPoolProfile;
import com.microsoft.azure.management.containerservice.v2017_08_31.ContainerServiceLinuxProfile;
import com.microsoft.azure.management.containerservice.v2017_08_31.ContainerServiceServicePrincipalProfile;

class ManagedClusterImpl extends GroupableResourceCoreImpl<ManagedCluster, ManagedClusterInner, ManagedClusterImpl, ContainerServiceManager> implements ManagedCluster, ManagedCluster.Definition, ManagedCluster.Update {
    ManagedClusterImpl(String name, ManagedClusterInner inner, ContainerServiceManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<ManagedCluster> createResourceAsync() {
        ManagedClustersInner client = this.manager().inner().managedClusters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ManagedCluster> updateResourceAsync() {
        ManagedClustersInner client = this.manager().inner().managedClusters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ManagedClusterInner> getInnerAsync() {
        ManagedClustersInner client = this.manager().inner().managedClusters();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<ContainerServiceAgentPoolProfile> agentPoolProfiles() {
        return this.inner().agentPoolProfiles();
    }

    @Override
    public String dnsPrefix() {
        return this.inner().dnsPrefix();
    }

    @Override
    public String fqdn() {
        return this.inner().fqdn();
    }

    @Override
    public String kubernetesVersion() {
        return this.inner().kubernetesVersion();
    }

    @Override
    public ContainerServiceLinuxProfile linuxProfile() {
        return this.inner().linuxProfile();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public ContainerServiceServicePrincipalProfile servicePrincipalProfile() {
        return this.inner().servicePrincipalProfile();
    }

    @Override
    public ManagedClusterImpl withAgentPoolProfiles(List<ContainerServiceAgentPoolProfile> agentPoolProfiles) {
        this.inner().withAgentPoolProfiles(agentPoolProfiles);
        return this;
    }

    @Override
    public ManagedClusterImpl withDnsPrefix(String dnsPrefix) {
        this.inner().withDnsPrefix(dnsPrefix);
        return this;
    }

    @Override
    public ManagedClusterImpl withKubernetesVersion(String kubernetesVersion) {
        this.inner().withKubernetesVersion(kubernetesVersion);
        return this;
    }

    @Override
    public ManagedClusterImpl withLinuxProfile(ContainerServiceLinuxProfile linuxProfile) {
        this.inner().withLinuxProfile(linuxProfile);
        return this;
    }

    @Override
    public ManagedClusterImpl withServicePrincipalProfile(ContainerServiceServicePrincipalProfile servicePrincipalProfile) {
        this.inner().withServicePrincipalProfile(servicePrincipalProfile);
        return this;
    }

}
