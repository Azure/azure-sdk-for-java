/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.containerservice.v2020_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfiguration;

class MaintenanceConfigurationsImpl extends WrapperImpl<MaintenanceConfigurationsInner> implements MaintenanceConfigurations {
    private final ContainerServiceManager manager;

    MaintenanceConfigurationsImpl(ContainerServiceManager manager) {
        super(manager.inner().maintenanceConfigurations());
        this.manager = manager;
    }

    public ContainerServiceManager manager() {
        return this.manager;
    }

    @Override
    public MaintenanceConfigurationImpl define(String name) {
        return wrapModel(name);
    }

    private MaintenanceConfigurationImpl wrapModel(MaintenanceConfigurationInner inner) {
        return  new MaintenanceConfigurationImpl(inner, manager());
    }

    private MaintenanceConfigurationImpl wrapModel(String name) {
        return new MaintenanceConfigurationImpl(name, this.manager());
    }

    @Override
    public Observable<MaintenanceConfiguration> listByManagedClusterAsync(final String resourceGroupName, final String resourceName) {
        MaintenanceConfigurationsInner client = this.inner();
        return client.listByManagedClusterAsync(resourceGroupName, resourceName)
        .flatMapIterable(new Func1<Page<MaintenanceConfigurationInner>, Iterable<MaintenanceConfigurationInner>>() {
            @Override
            public Iterable<MaintenanceConfigurationInner> call(Page<MaintenanceConfigurationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MaintenanceConfigurationInner, MaintenanceConfiguration>() {
            @Override
            public MaintenanceConfiguration call(MaintenanceConfigurationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<MaintenanceConfiguration> getAsync(String resourceGroupName, String resourceName, String configName) {
        MaintenanceConfigurationsInner client = this.inner();
        return client.getAsync(resourceGroupName, resourceName, configName)
        .flatMap(new Func1<MaintenanceConfigurationInner, Observable<MaintenanceConfiguration>>() {
            @Override
            public Observable<MaintenanceConfiguration> call(MaintenanceConfigurationInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((MaintenanceConfiguration)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String resourceName, String configName) {
        MaintenanceConfigurationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, resourceName, configName).toCompletable();
    }

}
