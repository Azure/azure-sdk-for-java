/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerservice.v2020_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MaintenanceConfigurations.
 */
public class MaintenanceConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private MaintenanceConfigurationsService service;
    /** The service client containing this operation class. */
    private ContainerServiceManagementClientImpl client;

    /**
     * Initializes an instance of MaintenanceConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MaintenanceConfigurationsInner(Retrofit retrofit, ContainerServiceManagementClientImpl client) {
        this.service = retrofit.create(MaintenanceConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MaintenanceConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MaintenanceConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations listByManagedCluster" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations")
        Observable<Response<ResponseBody>> listByManagedCluster(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("configName") String configName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("configName") String configName, @Query("api-version") String apiVersion, @Body MaintenanceConfigurationInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Path("configName") String configName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.containerservice.v2020_12_01.MaintenanceConfigurations listByManagedClusterNext" })
        @GET
        Observable<Response<ResponseBody>> listByManagedClusterNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MaintenanceConfigurationInner&gt; object if successful.
     */
    public PagedList<MaintenanceConfigurationInner> listByManagedCluster(final String resourceGroupName, final String resourceName) {
        ServiceResponse<Page<MaintenanceConfigurationInner>> response = listByManagedClusterSinglePageAsync(resourceGroupName, resourceName).toBlocking().single();
        return new PagedList<MaintenanceConfigurationInner>(response.body()) {
            @Override
            public Page<MaintenanceConfigurationInner> nextPage(String nextPageLink) {
                return listByManagedClusterNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MaintenanceConfigurationInner>> listByManagedClusterAsync(final String resourceGroupName, final String resourceName, final ListOperationCallback<MaintenanceConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByManagedClusterSinglePageAsync(resourceGroupName, resourceName),
            new Func1<String, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(String nextPageLink) {
                    return listByManagedClusterNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MaintenanceConfigurationInner&gt; object
     */
    public Observable<Page<MaintenanceConfigurationInner>> listByManagedClusterAsync(final String resourceGroupName, final String resourceName) {
        return listByManagedClusterWithServiceResponseAsync(resourceGroupName, resourceName)
            .map(new Func1<ServiceResponse<Page<MaintenanceConfigurationInner>>, Page<MaintenanceConfigurationInner>>() {
                @Override
                public Page<MaintenanceConfigurationInner> call(ServiceResponse<Page<MaintenanceConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MaintenanceConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> listByManagedClusterWithServiceResponseAsync(final String resourceGroupName, final String resourceName) {
        return listByManagedClusterSinglePageAsync(resourceGroupName, resourceName)
            .concatMap(new Func1<ServiceResponse<Page<MaintenanceConfigurationInner>>, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(ServiceResponse<Page<MaintenanceConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByManagedClusterNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
    ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> * @param resourceName The name of the managed cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MaintenanceConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> listByManagedClusterSinglePageAsync(final String resourceGroupName, final String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByManagedCluster(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> result = listByManagedClusterDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MaintenanceConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> listByManagedClusterDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<MaintenanceConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<MaintenanceConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the maintenance configuration.
     * Gets the details of maintenance configurations by managed cluster and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MaintenanceConfigurationInner object if successful.
     */
    public MaintenanceConfigurationInner get(String resourceGroupName, String resourceName, String configName) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, configName).toBlocking().single().body();
    }

    /**
     * Gets the maintenance configuration.
     * Gets the details of maintenance configurations by managed cluster and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MaintenanceConfigurationInner> getAsync(String resourceGroupName, String resourceName, String configName, final ServiceCallback<MaintenanceConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, resourceName, configName), serviceCallback);
    }

    /**
     * Gets the maintenance configuration.
     * Gets the details of maintenance configurations by managed cluster and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MaintenanceConfigurationInner object
     */
    public Observable<MaintenanceConfigurationInner> getAsync(String resourceGroupName, String resourceName, String configName) {
        return getWithServiceResponseAsync(resourceGroupName, resourceName, configName).map(new Func1<ServiceResponse<MaintenanceConfigurationInner>, MaintenanceConfigurationInner>() {
            @Override
            public MaintenanceConfigurationInner call(ServiceResponse<MaintenanceConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the maintenance configuration.
     * Gets the details of maintenance configurations by managed cluster and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MaintenanceConfigurationInner object
     */
    public Observable<ServiceResponse<MaintenanceConfigurationInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceName, String configName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configName == null) {
            throw new IllegalArgumentException("Parameter configName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, resourceName, configName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MaintenanceConfigurationInner>>>() {
                @Override
                public Observable<ServiceResponse<MaintenanceConfigurationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MaintenanceConfigurationInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MaintenanceConfigurationInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MaintenanceConfigurationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MaintenanceConfigurationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a maintenance configurations.
     * Creates or updates a maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param parameters Parameters supplied to the Create or Update a default maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MaintenanceConfigurationInner object if successful.
     */
    public MaintenanceConfigurationInner createOrUpdate(String resourceGroupName, String resourceName, String configName, MaintenanceConfigurationInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, configName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a maintenance configurations.
     * Creates or updates a maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param parameters Parameters supplied to the Create or Update a default maintenance configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MaintenanceConfigurationInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String configName, MaintenanceConfigurationInner parameters, final ServiceCallback<MaintenanceConfigurationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, configName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a maintenance configurations.
     * Creates or updates a maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param parameters Parameters supplied to the Create or Update a default maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MaintenanceConfigurationInner> createOrUpdateAsync(String resourceGroupName, String resourceName, String configName, MaintenanceConfigurationInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, configName, parameters).map(new Func1<ServiceResponse<MaintenanceConfigurationInner>, MaintenanceConfigurationInner>() {
            @Override
            public MaintenanceConfigurationInner call(ServiceResponse<MaintenanceConfigurationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a maintenance configurations.
     * Creates or updates a maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param parameters Parameters supplied to the Create or Update a default maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MaintenanceConfigurationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, String configName, MaintenanceConfigurationInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configName == null) {
            throw new IllegalArgumentException("Parameter configName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, configName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MaintenanceConfigurationInner>() { }.getType());
    }

    /**
     * Deletes a maintenance configuration.
     * Deletes the maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName, String configName) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName, configName).toBlocking().last().body();
    }

    /**
     * Deletes a maintenance configuration.
     * Deletes the maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, String configName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName, configName), serviceCallback);
    }

    /**
     * Deletes a maintenance configuration.
     * Deletes the maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName, String configName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName, configName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a maintenance configuration.
     * Deletes the maintenance configuration in the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceName The name of the managed cluster resource.
     * @param configName The name of the maintenance configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName, String configName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (configName == null) {
            throw new IllegalArgumentException("Parameter configName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, configName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MaintenanceConfigurationInner&gt; object if successful.
     */
    public PagedList<MaintenanceConfigurationInner> listByManagedClusterNext(final String nextPageLink) {
        ServiceResponse<Page<MaintenanceConfigurationInner>> response = listByManagedClusterNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MaintenanceConfigurationInner>(response.body()) {
            @Override
            public Page<MaintenanceConfigurationInner> nextPage(String nextPageLink) {
                return listByManagedClusterNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MaintenanceConfigurationInner>> listByManagedClusterNextAsync(final String nextPageLink, final ServiceFuture<List<MaintenanceConfigurationInner>> serviceFuture, final ListOperationCallback<MaintenanceConfigurationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByManagedClusterNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(String nextPageLink) {
                    return listByManagedClusterNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MaintenanceConfigurationInner&gt; object
     */
    public Observable<Page<MaintenanceConfigurationInner>> listByManagedClusterNextAsync(final String nextPageLink) {
        return listByManagedClusterNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MaintenanceConfigurationInner>>, Page<MaintenanceConfigurationInner>>() {
                @Override
                public Page<MaintenanceConfigurationInner> call(ServiceResponse<Page<MaintenanceConfigurationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MaintenanceConfigurationInner&gt; object
     */
    public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> listByManagedClusterNextWithServiceResponseAsync(final String nextPageLink) {
        return listByManagedClusterNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MaintenanceConfigurationInner>>, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(ServiceResponse<Page<MaintenanceConfigurationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByManagedClusterNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of maintenance configurations in the specified managed cluster.
     * Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration.
     *
    ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MaintenanceConfigurationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> listByManagedClusterNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByManagedClusterNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MaintenanceConfigurationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> result = listByManagedClusterNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MaintenanceConfigurationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<MaintenanceConfigurationInner>> listByManagedClusterNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<MaintenanceConfigurationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<MaintenanceConfigurationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
