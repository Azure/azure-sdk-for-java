// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The operating system and disk used by the machine.
 */
@Fluent
public final class MachineOSProfile implements JsonSerializable<MachineOSProfile> {
    /*
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     */
    private OSType osType;

    /*
     * Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if OSType=Linux or
     * Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after Windows2019 is
     * deprecated.
     */
    private OSSku osSku;

    /*
     * OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify
     * 0, it will apply the default osDisk size according to the vmSize specified.
     */
    private Integer osDiskSizeGB;

    /*
     * The OS disk type to be used for machines in the agent pool. The default is 'Ephemeral' if the VM supports it and
     * has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed
     * after creation. For more information see [Ephemeral
     * OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
     */
    private OSDiskType osDiskType;

    /*
     * Whether to use a FIPS-enabled OS.
     */
    private Boolean enableFips;

    /*
     * The Linux machine's specific profile.
     */
    private MachineOSProfileLinuxProfile linuxProfile;

    /*
     * The Windows machine's specific profile.
     */
    private AgentPoolWindowsProfile windowsProfile;

    /**
     * Creates an instance of MachineOSProfile class.
     */
    public MachineOSProfile() {
    }

    /**
     * Get the osType property: OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     * @return the osType value.
     */
    public OSType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     * @param osType the osType value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withOsType(OSType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osSku property: Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if
     * OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after
     * Windows2019 is deprecated.
     * 
     * @return the osSku value.
     */
    public OSSku osSku() {
        return this.osSku;
    }

    /**
     * Set the osSku property: Specifies the OS SKU used by the agent pool. If not specified, the default is Ubuntu if
     * OSType=Linux or Windows2019 if OSType=Windows. And the default Windows OSSKU will be changed to Windows2022 after
     * Windows2019 is deprecated.
     * 
     * @param osSku the osSku value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withOsSku(OSSku osSku) {
        this.osSku = osSku;
        return this;
    }

    /**
     * Get the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every machine in the
     * master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     * 
     * @return the osDiskSizeGB value.
     */
    public Integer osDiskSizeGB() {
        return this.osDiskSizeGB;
    }

    /**
     * Set the osDiskSizeGB property: OS Disk Size in GB to be used to specify the disk size for every machine in the
     * master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     * 
     * @param osDiskSizeGB the osDiskSizeGB value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withOsDiskSizeGB(Integer osDiskSizeGB) {
        this.osDiskSizeGB = osDiskSizeGB;
        return this;
    }

    /**
     * Get the osDiskType property: The OS disk type to be used for machines in the agent pool. The default is
     * 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise,
     * defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral
     * OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
     * 
     * @return the osDiskType value.
     */
    public OSDiskType osDiskType() {
        return this.osDiskType;
    }

    /**
     * Set the osDiskType property: The OS disk type to be used for machines in the agent pool. The default is
     * 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise,
     * defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral
     * OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
     * 
     * @param osDiskType the osDiskType value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withOsDiskType(OSDiskType osDiskType) {
        this.osDiskType = osDiskType;
        return this;
    }

    /**
     * Get the enableFips property: Whether to use a FIPS-enabled OS.
     * 
     * @return the enableFips value.
     */
    public Boolean enableFips() {
        return this.enableFips;
    }

    /**
     * Set the enableFips property: Whether to use a FIPS-enabled OS.
     * 
     * @param enableFips the enableFips value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withEnableFips(Boolean enableFips) {
        this.enableFips = enableFips;
        return this;
    }

    /**
     * Get the linuxProfile property: The Linux machine's specific profile.
     * 
     * @return the linuxProfile value.
     */
    public MachineOSProfileLinuxProfile linuxProfile() {
        return this.linuxProfile;
    }

    /**
     * Set the linuxProfile property: The Linux machine's specific profile.
     * 
     * @param linuxProfile the linuxProfile value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withLinuxProfile(MachineOSProfileLinuxProfile linuxProfile) {
        this.linuxProfile = linuxProfile;
        return this;
    }

    /**
     * Get the windowsProfile property: The Windows machine's specific profile.
     * 
     * @return the windowsProfile value.
     */
    public AgentPoolWindowsProfile windowsProfile() {
        return this.windowsProfile;
    }

    /**
     * Set the windowsProfile property: The Windows machine's specific profile.
     * 
     * @param windowsProfile the windowsProfile value to set.
     * @return the MachineOSProfile object itself.
     */
    public MachineOSProfile withWindowsProfile(AgentPoolWindowsProfile windowsProfile) {
        this.windowsProfile = windowsProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linuxProfile() != null) {
            linuxProfile().validate();
        }
        if (windowsProfile() != null) {
            windowsProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("osSKU", this.osSku == null ? null : this.osSku.toString());
        jsonWriter.writeNumberField("osDiskSizeGB", this.osDiskSizeGB);
        jsonWriter.writeStringField("osDiskType", this.osDiskType == null ? null : this.osDiskType.toString());
        jsonWriter.writeBooleanField("enableFIPS", this.enableFips);
        jsonWriter.writeJsonField("linuxProfile", this.linuxProfile);
        jsonWriter.writeJsonField("windowsProfile", this.windowsProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineOSProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineOSProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineOSProfile.
     */
    public static MachineOSProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineOSProfile deserializedMachineOSProfile = new MachineOSProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedMachineOSProfile.osType = OSType.fromString(reader.getString());
                } else if ("osSKU".equals(fieldName)) {
                    deserializedMachineOSProfile.osSku = OSSku.fromString(reader.getString());
                } else if ("osDiskSizeGB".equals(fieldName)) {
                    deserializedMachineOSProfile.osDiskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("osDiskType".equals(fieldName)) {
                    deserializedMachineOSProfile.osDiskType = OSDiskType.fromString(reader.getString());
                } else if ("enableFIPS".equals(fieldName)) {
                    deserializedMachineOSProfile.enableFips = reader.getNullable(JsonReader::getBoolean);
                } else if ("linuxProfile".equals(fieldName)) {
                    deserializedMachineOSProfile.linuxProfile = MachineOSProfileLinuxProfile.fromJson(reader);
                } else if ("windowsProfile".equals(fieldName)) {
                    deserializedMachineOSProfile.windowsProfile = AgentPoolWindowsProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineOSProfile;
        });
    }
}
