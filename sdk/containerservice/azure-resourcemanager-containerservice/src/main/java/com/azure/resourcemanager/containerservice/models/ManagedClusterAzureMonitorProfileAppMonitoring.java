// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Application Monitoring Profile for Kubernetes Application Container. Collects application logs, metrics and traces
 * through auto-instrumentation of the application using Azure Monitor OpenTelemetry based SDKs. See
 * aka.ms/AzureMonitorApplicationMonitoring for an overview.
 */
@Fluent
public final class ManagedClusterAzureMonitorProfileAppMonitoring
    implements JsonSerializable<ManagedClusterAzureMonitorProfileAppMonitoring> {
    /*
     * Application Monitoring Auto Instrumentation for Kubernetes Application Container. Deploys web hook to
     * auto-instrument Azure Monitor OpenTelemetry based SDKs to collect OpenTelemetry metrics, logs and traces of the
     * application. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     */
    private ManagedClusterAzureMonitorProfileAppMonitoringAutoInstrumentation autoInstrumentation;

    /*
     * Application Monitoring Open Telemetry Metrics Profile for Kubernetes Application Container Metrics. Collects
     * OpenTelemetry metrics of the application using Azure Monitor OpenTelemetry based SDKs. See
     * aka.ms/AzureMonitorApplicationMonitoring for an overview.
     */
    private ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics openTelemetryMetrics;

    /*
     * Application Monitoring Open Telemetry Metrics Profile for Kubernetes Application Container Logs and Traces.
     * Collects OpenTelemetry logs and traces of the application using Azure Monitor OpenTelemetry based SDKs. See
     * aka.ms/AzureMonitorApplicationMonitoring for an overview.
     */
    private ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryLogs openTelemetryLogs;

    /**
     * Creates an instance of ManagedClusterAzureMonitorProfileAppMonitoring class.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoring() {
    }

    /**
     * Get the autoInstrumentation property: Application Monitoring Auto Instrumentation for Kubernetes Application
     * Container. Deploys web hook to auto-instrument Azure Monitor OpenTelemetry based SDKs to collect OpenTelemetry
     * metrics, logs and traces of the application. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @return the autoInstrumentation value.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringAutoInstrumentation autoInstrumentation() {
        return this.autoInstrumentation;
    }

    /**
     * Set the autoInstrumentation property: Application Monitoring Auto Instrumentation for Kubernetes Application
     * Container. Deploys web hook to auto-instrument Azure Monitor OpenTelemetry based SDKs to collect OpenTelemetry
     * metrics, logs and traces of the application. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @param autoInstrumentation the autoInstrumentation value to set.
     * @return the ManagedClusterAzureMonitorProfileAppMonitoring object itself.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoring
        withAutoInstrumentation(ManagedClusterAzureMonitorProfileAppMonitoringAutoInstrumentation autoInstrumentation) {
        this.autoInstrumentation = autoInstrumentation;
        return this;
    }

    /**
     * Get the openTelemetryMetrics property: Application Monitoring Open Telemetry Metrics Profile for Kubernetes
     * Application Container Metrics. Collects OpenTelemetry metrics of the application using Azure Monitor
     * OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @return the openTelemetryMetrics value.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics openTelemetryMetrics() {
        return this.openTelemetryMetrics;
    }

    /**
     * Set the openTelemetryMetrics property: Application Monitoring Open Telemetry Metrics Profile for Kubernetes
     * Application Container Metrics. Collects OpenTelemetry metrics of the application using Azure Monitor
     * OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @param openTelemetryMetrics the openTelemetryMetrics value to set.
     * @return the ManagedClusterAzureMonitorProfileAppMonitoring object itself.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoring withOpenTelemetryMetrics(
        ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics openTelemetryMetrics) {
        this.openTelemetryMetrics = openTelemetryMetrics;
        return this;
    }

    /**
     * Get the openTelemetryLogs property: Application Monitoring Open Telemetry Metrics Profile for Kubernetes
     * Application Container Logs and Traces. Collects OpenTelemetry logs and traces of the application using Azure
     * Monitor OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @return the openTelemetryLogs value.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryLogs openTelemetryLogs() {
        return this.openTelemetryLogs;
    }

    /**
     * Set the openTelemetryLogs property: Application Monitoring Open Telemetry Metrics Profile for Kubernetes
     * Application Container Logs and Traces. Collects OpenTelemetry logs and traces of the application using Azure
     * Monitor OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     * 
     * @param openTelemetryLogs the openTelemetryLogs value to set.
     * @return the ManagedClusterAzureMonitorProfileAppMonitoring object itself.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoring
        withOpenTelemetryLogs(ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryLogs openTelemetryLogs) {
        this.openTelemetryLogs = openTelemetryLogs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoInstrumentation() != null) {
            autoInstrumentation().validate();
        }
        if (openTelemetryMetrics() != null) {
            openTelemetryMetrics().validate();
        }
        if (openTelemetryLogs() != null) {
            openTelemetryLogs().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("autoInstrumentation", this.autoInstrumentation);
        jsonWriter.writeJsonField("openTelemetryMetrics", this.openTelemetryMetrics);
        jsonWriter.writeJsonField("openTelemetryLogs", this.openTelemetryLogs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterAzureMonitorProfileAppMonitoring from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterAzureMonitorProfileAppMonitoring if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedClusterAzureMonitorProfileAppMonitoring.
     */
    public static ManagedClusterAzureMonitorProfileAppMonitoring fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterAzureMonitorProfileAppMonitoring deserializedManagedClusterAzureMonitorProfileAppMonitoring
                = new ManagedClusterAzureMonitorProfileAppMonitoring();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoInstrumentation".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileAppMonitoring.autoInstrumentation
                        = ManagedClusterAzureMonitorProfileAppMonitoringAutoInstrumentation.fromJson(reader);
                } else if ("openTelemetryMetrics".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileAppMonitoring.openTelemetryMetrics
                        = ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics.fromJson(reader);
                } else if ("openTelemetryLogs".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileAppMonitoring.openTelemetryLogs
                        = ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryLogs.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterAzureMonitorProfileAppMonitoring;
        });
    }
}
