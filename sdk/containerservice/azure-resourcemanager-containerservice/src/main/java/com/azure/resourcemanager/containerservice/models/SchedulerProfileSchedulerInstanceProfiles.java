// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mapping of each scheduler instance to its profile.
 */
@Fluent
public final class SchedulerProfileSchedulerInstanceProfiles
    implements JsonSerializable<SchedulerProfileSchedulerInstanceProfiles> {
    /*
     * The scheduler profile for the upstream scheduler instance.
     */
    private SchedulerInstanceProfile upstream;

    /**
     * Creates an instance of SchedulerProfileSchedulerInstanceProfiles class.
     */
    public SchedulerProfileSchedulerInstanceProfiles() {
    }

    /**
     * Get the upstream property: The scheduler profile for the upstream scheduler instance.
     * 
     * @return the upstream value.
     */
    public SchedulerInstanceProfile upstream() {
        return this.upstream;
    }

    /**
     * Set the upstream property: The scheduler profile for the upstream scheduler instance.
     * 
     * @param upstream the upstream value to set.
     * @return the SchedulerProfileSchedulerInstanceProfiles object itself.
     */
    public SchedulerProfileSchedulerInstanceProfiles withUpstream(SchedulerInstanceProfile upstream) {
        this.upstream = upstream;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (upstream() != null) {
            upstream().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("upstream", this.upstream);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchedulerProfileSchedulerInstanceProfiles from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchedulerProfileSchedulerInstanceProfiles if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SchedulerProfileSchedulerInstanceProfiles.
     */
    public static SchedulerProfileSchedulerInstanceProfiles fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchedulerProfileSchedulerInstanceProfiles deserializedSchedulerProfileSchedulerInstanceProfiles
                = new SchedulerProfileSchedulerInstanceProfiles();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("upstream".equals(fieldName)) {
                    deserializedSchedulerProfileSchedulerInstanceProfiles.upstream
                        = SchedulerInstanceProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedulerProfileSchedulerInstanceProfiles;
        });
    }
}
