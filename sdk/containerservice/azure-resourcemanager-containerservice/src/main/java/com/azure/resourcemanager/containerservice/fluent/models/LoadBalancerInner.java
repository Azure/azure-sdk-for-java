// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.LabelSelector;
import java.io.IOException;

/**
 * The configurations regarding multiple standard load balancers. If not supplied, single load balancer mode will be
 * used. Multiple standard load balancers mode will be used if at lease one configuration is supplied. There has to be a
 * configuration named `kubernetes`. The name field will be the name of the corresponding public load balancer. There
 * will be an internal load balancer created if needed, and the name will be `&lt;name&gt;-internal`. The internal lb
 * shares the same configurations as the external one. The internal lbs are not needed to be included in LoadBalancer
 * list.
 */
@Fluent
public final class LoadBalancerInner extends ProxyResource {
    /*
     * The properties of the load balancer.
     */
    private LoadBalancerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of LoadBalancerInner class.
     */
    public LoadBalancerInner() {
    }

    /**
     * Get the innerProperties property: The properties of the load balancer.
     * 
     * @return the innerProperties value.
     */
    private LoadBalancerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the primaryAgentPoolName property: Required field. A string value that must specify the ID of an existing
     * agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at
     * least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a
     * single load balancer.
     * 
     * @return the primaryAgentPoolName value.
     */
    public String primaryAgentPoolName() {
        return this.innerProperties() == null ? null : this.innerProperties().primaryAgentPoolName();
    }

    /**
     * Set the primaryAgentPoolName property: Required field. A string value that must specify the ID of an existing
     * agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at
     * least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a
     * single load balancer.
     * 
     * @param primaryAgentPoolName the primaryAgentPoolName value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withPrimaryAgentPoolName(String primaryAgentPoolName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withPrimaryAgentPoolName(primaryAgentPoolName);
        return this;
    }

    /**
     * Get the allowServicePlacement property: Whether to automatically place services on the load balancer. If not
     * supplied, the default value is true. If set to false manually, both of the external and the internal load
     * balancer will not be selected for services unless they explicitly target it.
     * 
     * @return the allowServicePlacement value.
     */
    public Boolean allowServicePlacement() {
        return this.innerProperties() == null ? null : this.innerProperties().allowServicePlacement();
    }

    /**
     * Set the allowServicePlacement property: Whether to automatically place services on the load balancer. If not
     * supplied, the default value is true. If set to false manually, both of the external and the internal load
     * balancer will not be selected for services unless they explicitly target it.
     * 
     * @param allowServicePlacement the allowServicePlacement value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withAllowServicePlacement(Boolean allowServicePlacement) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withAllowServicePlacement(allowServicePlacement);
        return this;
    }

    /**
     * Get the serviceLabelSelector property: Only services that must match this selector can be placed on this load
     * balancer.
     * 
     * @return the serviceLabelSelector value.
     */
    public LabelSelector serviceLabelSelector() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceLabelSelector();
    }

    /**
     * Set the serviceLabelSelector property: Only services that must match this selector can be placed on this load
     * balancer.
     * 
     * @param serviceLabelSelector the serviceLabelSelector value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withServiceLabelSelector(LabelSelector serviceLabelSelector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withServiceLabelSelector(serviceLabelSelector);
        return this;
    }

    /**
     * Get the serviceNamespaceSelector property: Services created in namespaces that match the selector can be placed
     * on this load balancer.
     * 
     * @return the serviceNamespaceSelector value.
     */
    public LabelSelector serviceNamespaceSelector() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceNamespaceSelector();
    }

    /**
     * Set the serviceNamespaceSelector property: Services created in namespaces that match the selector can be placed
     * on this load balancer.
     * 
     * @param serviceNamespaceSelector the serviceNamespaceSelector value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withServiceNamespaceSelector(LabelSelector serviceNamespaceSelector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withServiceNamespaceSelector(serviceNamespaceSelector);
        return this;
    }

    /**
     * Get the nodeSelector property: Nodes that match this selector will be possible members of this load balancer.
     * 
     * @return the nodeSelector value.
     */
    public LabelSelector nodeSelector() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeSelector();
    }

    /**
     * Set the nodeSelector property: Nodes that match this selector will be possible members of this load balancer.
     * 
     * @param nodeSelector the nodeSelector value to set.
     * @return the LoadBalancerInner object itself.
     */
    public LoadBalancerInner withNodeSelector(LabelSelector nodeSelector) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LoadBalancerProperties();
        }
        this.innerProperties().withNodeSelector(nodeSelector);
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancerInner.
     */
    public static LoadBalancerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerInner deserializedLoadBalancerInner = new LoadBalancerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLoadBalancerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLoadBalancerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLoadBalancerInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedLoadBalancerInner.innerProperties = LoadBalancerProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedLoadBalancerInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerInner;
        });
    }
}
