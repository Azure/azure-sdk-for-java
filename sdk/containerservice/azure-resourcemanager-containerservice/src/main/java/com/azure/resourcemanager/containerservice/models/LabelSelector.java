// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed.
 * An empty label selector matches all objects. A null label selector matches no objects.
 */
@Fluent
public final class LabelSelector implements JsonSerializable<LabelSelector> {
    /*
     * matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an
     * element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only
     * `value`. The requirements are ANDed.
     */
    private List<String> matchLabels;

    /*
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     */
    private List<LabelSelectorRequirement> matchExpressions;

    /**
     * Creates an instance of LabelSelector class.
     */
    public LabelSelector() {
    }

    /**
     * Get the matchLabels property: matchLabels is an array of {key=value} pairs. A single {key=value} in the
     * matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`,
     * and the values array contains only `value`. The requirements are ANDed.
     * 
     * @return the matchLabels value.
     */
    public List<String> matchLabels() {
        return this.matchLabels;
    }

    /**
     * Set the matchLabels property: matchLabels is an array of {key=value} pairs. A single {key=value} in the
     * matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`,
     * and the values array contains only `value`. The requirements are ANDed.
     * 
     * @param matchLabels the matchLabels value to set.
     * @return the LabelSelector object itself.
     */
    public LabelSelector withMatchLabels(List<String> matchLabels) {
        this.matchLabels = matchLabels;
        return this;
    }

    /**
     * Get the matchExpressions property: matchExpressions is a list of label selector requirements. The requirements
     * are ANDed.
     * 
     * @return the matchExpressions value.
     */
    public List<LabelSelectorRequirement> matchExpressions() {
        return this.matchExpressions;
    }

    /**
     * Set the matchExpressions property: matchExpressions is a list of label selector requirements. The requirements
     * are ANDed.
     * 
     * @param matchExpressions the matchExpressions value to set.
     * @return the LabelSelector object itself.
     */
    public LabelSelector withMatchExpressions(List<LabelSelectorRequirement> matchExpressions) {
        this.matchExpressions = matchExpressions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchExpressions() != null) {
            matchExpressions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("matchLabels", this.matchLabels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("matchExpressions", this.matchExpressions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabelSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabelSelector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabelSelector.
     */
    public static LabelSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabelSelector deserializedLabelSelector = new LabelSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("matchLabels".equals(fieldName)) {
                    List<String> matchLabels = reader.readArray(reader1 -> reader1.getString());
                    deserializedLabelSelector.matchLabels = matchLabels;
                } else if ("matchExpressions".equals(fieldName)) {
                    List<LabelSelectorRequirement> matchExpressions
                        = reader.readArray(reader1 -> LabelSelectorRequirement.fromJson(reader1));
                    deserializedLabelSelector.matchExpressions = matchExpressions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabelSelector;
        });
    }
}
