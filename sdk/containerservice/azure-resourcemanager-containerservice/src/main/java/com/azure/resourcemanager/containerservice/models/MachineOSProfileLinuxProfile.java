// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Linux machine's specific profile.
 */
@Fluent
public final class MachineOSProfileLinuxProfile implements JsonSerializable<MachineOSProfileLinuxProfile> {
    /*
     * The OS configuration of Linux machine.
     */
    private LinuxOSConfig linuxOSConfig;

    /*
     * Message of the day for Linux nodes, base64-encoded. A base64-encoded string which will be written to /etc/motd
     * after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for
     * Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
     */
    private String messageOfTheDay;

    /**
     * Creates an instance of MachineOSProfileLinuxProfile class.
     */
    public MachineOSProfileLinuxProfile() {
    }

    /**
     * Get the linuxOSConfig property: The OS configuration of Linux machine.
     * 
     * @return the linuxOSConfig value.
     */
    public LinuxOSConfig linuxOSConfig() {
        return this.linuxOSConfig;
    }

    /**
     * Set the linuxOSConfig property: The OS configuration of Linux machine.
     * 
     * @param linuxOSConfig the linuxOSConfig value to set.
     * @return the MachineOSProfileLinuxProfile object itself.
     */
    public MachineOSProfileLinuxProfile withLinuxOSConfig(LinuxOSConfig linuxOSConfig) {
        this.linuxOSConfig = linuxOSConfig;
        return this;
    }

    /**
     * Get the messageOfTheDay property: Message of the day for Linux nodes, base64-encoded. A base64-encoded string
     * which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux
     * nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not
     * be executed as a script).
     * 
     * @return the messageOfTheDay value.
     */
    public String messageOfTheDay() {
        return this.messageOfTheDay;
    }

    /**
     * Set the messageOfTheDay property: Message of the day for Linux nodes, base64-encoded. A base64-encoded string
     * which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux
     * nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not
     * be executed as a script).
     * 
     * @param messageOfTheDay the messageOfTheDay value to set.
     * @return the MachineOSProfileLinuxProfile object itself.
     */
    public MachineOSProfileLinuxProfile withMessageOfTheDay(String messageOfTheDay) {
        this.messageOfTheDay = messageOfTheDay;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linuxOSConfig() != null) {
            linuxOSConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("linuxOSConfig", this.linuxOSConfig);
        jsonWriter.writeStringField("messageOfTheDay", this.messageOfTheDay);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineOSProfileLinuxProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineOSProfileLinuxProfile if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineOSProfileLinuxProfile.
     */
    public static MachineOSProfileLinuxProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineOSProfileLinuxProfile deserializedMachineOSProfileLinuxProfile = new MachineOSProfileLinuxProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("linuxOSConfig".equals(fieldName)) {
                    deserializedMachineOSProfileLinuxProfile.linuxOSConfig = LinuxOSConfig.fromJson(reader);
                } else if ("messageOfTheDay".equals(fieldName)) {
                    deserializedMachineOSProfileLinuxProfile.messageOfTheDay = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineOSProfileLinuxProfile;
        });
    }
}
