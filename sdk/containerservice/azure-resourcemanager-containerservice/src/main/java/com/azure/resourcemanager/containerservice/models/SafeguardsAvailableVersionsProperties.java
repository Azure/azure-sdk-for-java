// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Whether the version is default or not and support info.
 */
@Immutable
public final class SafeguardsAvailableVersionsProperties
    implements JsonSerializable<SafeguardsAvailableVersionsProperties> {
    /*
     * The isDefaultVersion property.
     */
    private Boolean isDefaultVersion;

    /*
     * Whether the version is preview or stable.
     */
    private SafeguardsSupport support;

    /**
     * Creates an instance of SafeguardsAvailableVersionsProperties class.
     */
    public SafeguardsAvailableVersionsProperties() {
    }

    /**
     * Get the isDefaultVersion property: The isDefaultVersion property.
     * 
     * @return the isDefaultVersion value.
     */
    public Boolean isDefaultVersion() {
        return this.isDefaultVersion;
    }

    /**
     * Get the support property: Whether the version is preview or stable.
     * 
     * @return the support value.
     */
    public SafeguardsSupport support() {
        return this.support;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SafeguardsAvailableVersionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SafeguardsAvailableVersionsProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SafeguardsAvailableVersionsProperties.
     */
    public static SafeguardsAvailableVersionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SafeguardsAvailableVersionsProperties deserializedSafeguardsAvailableVersionsProperties
                = new SafeguardsAvailableVersionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isDefaultVersion".equals(fieldName)) {
                    deserializedSafeguardsAvailableVersionsProperties.isDefaultVersion
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("support".equals(fieldName)) {
                    deserializedSafeguardsAvailableVersionsProperties.support
                        = SafeguardsSupport.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSafeguardsAvailableVersionsProperties;
        });
    }
}
