// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Profile to enable performance-enhancing features on clusters that use Azure CNI powered by Cilium.
 */
@Fluent
public final class AdvancedNetworkingPerformance implements JsonSerializable<AdvancedNetworkingPerformance> {
    /*
     * Enable advanced network acceleration options. This allows users to configure acceleration using BPF host routing.
     * This can be enabled only with Cilium dataplane. If not specified, the default value is None (no acceleration).
     * The acceleration mode can be changed on a pre-existing cluster. See https://aka.ms/acnsperformance for a detailed
     * explanation
     */
    private AccelerationMode accelerationMode;

    /**
     * Creates an instance of AdvancedNetworkingPerformance class.
     */
    public AdvancedNetworkingPerformance() {
    }

    /**
     * Get the accelerationMode property: Enable advanced network acceleration options. This allows users to configure
     * acceleration using BPF host routing. This can be enabled only with Cilium dataplane. If not specified, the
     * default value is None (no acceleration). The acceleration mode can be changed on a pre-existing cluster. See
     * https://aka.ms/acnsperformance for a detailed explanation.
     * 
     * @return the accelerationMode value.
     */
    public AccelerationMode accelerationMode() {
        return this.accelerationMode;
    }

    /**
     * Set the accelerationMode property: Enable advanced network acceleration options. This allows users to configure
     * acceleration using BPF host routing. This can be enabled only with Cilium dataplane. If not specified, the
     * default value is None (no acceleration). The acceleration mode can be changed on a pre-existing cluster. See
     * https://aka.ms/acnsperformance for a detailed explanation.
     * 
     * @param accelerationMode the accelerationMode value to set.
     * @return the AdvancedNetworkingPerformance object itself.
     */
    public AdvancedNetworkingPerformance withAccelerationMode(AccelerationMode accelerationMode) {
        this.accelerationMode = accelerationMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accelerationMode",
            this.accelerationMode == null ? null : this.accelerationMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvancedNetworkingPerformance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvancedNetworkingPerformance if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvancedNetworkingPerformance.
     */
    public static AdvancedNetworkingPerformance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvancedNetworkingPerformance deserializedAdvancedNetworkingPerformance
                = new AdvancedNetworkingPerformance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accelerationMode".equals(fieldName)) {
                    deserializedAdvancedNetworkingPerformance.accelerationMode
                        = AccelerationMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvancedNetworkingPerformance;
        });
    }
}
