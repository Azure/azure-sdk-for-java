// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The hardware and GPU settings of the machine.
 */
@Fluent
public final class MachineHardwareProfile implements JsonSerializable<MachineHardwareProfile> {
    /*
     * The size of the VM. VM size availability varies by region. If a node contains insufficient compute resources
     * (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see:
     * https://docs.microsoft.com/azure/aks/quotas-skus-regions
     */
    private String vmSize;

    /*
     * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
     */
    private GpuInstanceProfile gpuInstanceProfile;

    /*
     * The GPU settings of the machine.
     */
    private GpuProfile gpuProfile;

    /**
     * Creates an instance of MachineHardwareProfile class.
     */
    public MachineHardwareProfile() {
    }

    /**
     * Get the vmSize property: The size of the VM. VM size availability varies by region. If a node contains
     * insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on
     * restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The size of the VM. VM size availability varies by region. If a node contains
     * insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on
     * restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions.
     * 
     * @param vmSize the vmSize value to set.
     * @return the MachineHardwareProfile object itself.
     */
    public MachineHardwareProfile withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the gpuInstanceProfile property: GPUInstanceProfile to be used to specify GPU MIG instance profile for
     * supported GPU VM SKU.
     * 
     * @return the gpuInstanceProfile value.
     */
    public GpuInstanceProfile gpuInstanceProfile() {
        return this.gpuInstanceProfile;
    }

    /**
     * Set the gpuInstanceProfile property: GPUInstanceProfile to be used to specify GPU MIG instance profile for
     * supported GPU VM SKU.
     * 
     * @param gpuInstanceProfile the gpuInstanceProfile value to set.
     * @return the MachineHardwareProfile object itself.
     */
    public MachineHardwareProfile withGpuInstanceProfile(GpuInstanceProfile gpuInstanceProfile) {
        this.gpuInstanceProfile = gpuInstanceProfile;
        return this;
    }

    /**
     * Get the gpuProfile property: The GPU settings of the machine.
     * 
     * @return the gpuProfile value.
     */
    public GpuProfile gpuProfile() {
        return this.gpuProfile;
    }

    /**
     * Set the gpuProfile property: The GPU settings of the machine.
     * 
     * @param gpuProfile the gpuProfile value to set.
     * @return the MachineHardwareProfile object itself.
     */
    public MachineHardwareProfile withGpuProfile(GpuProfile gpuProfile) {
        this.gpuProfile = gpuProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gpuProfile() != null) {
            gpuProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeStringField("gpuInstanceProfile",
            this.gpuInstanceProfile == null ? null : this.gpuInstanceProfile.toString());
        jsonWriter.writeJsonField("gpuProfile", this.gpuProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineHardwareProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineHardwareProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineHardwareProfile.
     */
    public static MachineHardwareProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineHardwareProfile deserializedMachineHardwareProfile = new MachineHardwareProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmSize".equals(fieldName)) {
                    deserializedMachineHardwareProfile.vmSize = reader.getString();
                } else if ("gpuInstanceProfile".equals(fieldName)) {
                    deserializedMachineHardwareProfile.gpuInstanceProfile
                        = GpuInstanceProfile.fromString(reader.getString());
                } else if ("gpuProfile".equals(fieldName)) {
                    deserializedMachineHardwareProfile.gpuProfile = GpuProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineHardwareProfile;
        });
    }
}
