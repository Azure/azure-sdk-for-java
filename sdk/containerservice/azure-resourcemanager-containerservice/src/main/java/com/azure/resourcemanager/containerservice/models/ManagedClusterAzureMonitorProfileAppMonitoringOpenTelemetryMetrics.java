// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Application Monitoring Open Telemetry Metrics Profile for Kubernetes Application Container Metrics. Collects
 * OpenTelemetry metrics of the application using Azure Monitor OpenTelemetry based SDKs. See
 * aka.ms/AzureMonitorApplicationMonitoring for an overview.
 */
@Fluent
public final class ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics
    implements JsonSerializable<ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics> {
    /*
     * Indicates if Application Monitoring Open Telemetry Metrics is enabled or not.
     */
    private Boolean enabled;

    /*
     * The Open Telemetry host port for Open Telemetry metrics. If not specified, the default port is 28333.
     */
    private Long port;

    /**
     * Creates an instance of ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics class.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics() {
    }

    /**
     * Get the enabled property: Indicates if Application Monitoring Open Telemetry Metrics is enabled or not.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates if Application Monitoring Open Telemetry Metrics is enabled or not.
     * 
     * @param enabled the enabled value to set.
     * @return the ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics object itself.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the port property: The Open Telemetry host port for Open Telemetry metrics. If not specified, the default
     * port is 28333.
     * 
     * @return the port value.
     */
    public Long port() {
        return this.port;
    }

    /**
     * Set the port property: The Open Telemetry host port for Open Telemetry metrics. If not specified, the default
     * port is 28333.
     * 
     * @param port the port value to set.
     * @return the ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics object itself.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics withPort(Long port) {
        this.port = port;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics.
     */
    public static ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics deserializedManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics
                = new ManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics.enabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("port".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics.port
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterAzureMonitorProfileAppMonitoringOpenTelemetryMetrics;
        });
    }
}
