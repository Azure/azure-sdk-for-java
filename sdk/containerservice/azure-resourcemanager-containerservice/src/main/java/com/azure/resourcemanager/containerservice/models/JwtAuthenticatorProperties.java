// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of JWTAuthenticator. For details on how to configure the properties of a JWT authenticator, please
 * refer to the Kubernetes documentation:
 * https://kubernetes.io/docs/reference/access-authn-authz/authentication/#using-authentication-configuration. Please
 * note that not all fields available in the Kubernetes documentation are supported by AKS. For troubleshooting, please
 * see https://aka.ms/aks-external-issuers-docs.
 */
@Fluent
public final class JwtAuthenticatorProperties implements JsonSerializable<JwtAuthenticatorProperties> {
    /*
     * The current provisioning state of the JWT authenticator.
     */
    private JwtAuthenticatorProvisioningState provisioningState;

    /*
     * The JWT OIDC issuer details.
     */
    private JwtAuthenticatorIssuer issuer;

    /*
     * The rules that are applied to validate token claims to authenticate users. All the expressions must evaluate to
     * true for validation to succeed.
     */
    private List<JwtAuthenticatorValidationRule> claimValidationRules;

    /*
     * The mappings that define how user attributes are extracted from the token claims.
     */
    private JwtAuthenticatorClaimMappings claimMappings;

    /*
     * The rules that are applied to the mapped user before completing authentication. All the expressions must evaluate
     * to true for validation to succeed.
     */
    private List<JwtAuthenticatorValidationRule> userValidationRules;

    /**
     * Creates an instance of JwtAuthenticatorProperties class.
     */
    public JwtAuthenticatorProperties() {
    }

    /**
     * Get the provisioningState property: The current provisioning state of the JWT authenticator.
     * 
     * @return the provisioningState value.
     */
    public JwtAuthenticatorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the issuer property: The JWT OIDC issuer details.
     * 
     * @return the issuer value.
     */
    public JwtAuthenticatorIssuer issuer() {
        return this.issuer;
    }

    /**
     * Set the issuer property: The JWT OIDC issuer details.
     * 
     * @param issuer the issuer value to set.
     * @return the JwtAuthenticatorProperties object itself.
     */
    public JwtAuthenticatorProperties withIssuer(JwtAuthenticatorIssuer issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Get the claimValidationRules property: The rules that are applied to validate token claims to authenticate users.
     * All the expressions must evaluate to true for validation to succeed.
     * 
     * @return the claimValidationRules value.
     */
    public List<JwtAuthenticatorValidationRule> claimValidationRules() {
        return this.claimValidationRules;
    }

    /**
     * Set the claimValidationRules property: The rules that are applied to validate token claims to authenticate users.
     * All the expressions must evaluate to true for validation to succeed.
     * 
     * @param claimValidationRules the claimValidationRules value to set.
     * @return the JwtAuthenticatorProperties object itself.
     */
    public JwtAuthenticatorProperties
        withClaimValidationRules(List<JwtAuthenticatorValidationRule> claimValidationRules) {
        this.claimValidationRules = claimValidationRules;
        return this;
    }

    /**
     * Get the claimMappings property: The mappings that define how user attributes are extracted from the token claims.
     * 
     * @return the claimMappings value.
     */
    public JwtAuthenticatorClaimMappings claimMappings() {
        return this.claimMappings;
    }

    /**
     * Set the claimMappings property: The mappings that define how user attributes are extracted from the token claims.
     * 
     * @param claimMappings the claimMappings value to set.
     * @return the JwtAuthenticatorProperties object itself.
     */
    public JwtAuthenticatorProperties withClaimMappings(JwtAuthenticatorClaimMappings claimMappings) {
        this.claimMappings = claimMappings;
        return this;
    }

    /**
     * Get the userValidationRules property: The rules that are applied to the mapped user before completing
     * authentication. All the expressions must evaluate to true for validation to succeed.
     * 
     * @return the userValidationRules value.
     */
    public List<JwtAuthenticatorValidationRule> userValidationRules() {
        return this.userValidationRules;
    }

    /**
     * Set the userValidationRules property: The rules that are applied to the mapped user before completing
     * authentication. All the expressions must evaluate to true for validation to succeed.
     * 
     * @param userValidationRules the userValidationRules value to set.
     * @return the JwtAuthenticatorProperties object itself.
     */
    public JwtAuthenticatorProperties
        withUserValidationRules(List<JwtAuthenticatorValidationRule> userValidationRules) {
        this.userValidationRules = userValidationRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issuer in model JwtAuthenticatorProperties"));
        } else {
            issuer().validate();
        }
        if (claimValidationRules() != null) {
            claimValidationRules().forEach(e -> e.validate());
        }
        if (claimMappings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property claimMappings in model JwtAuthenticatorProperties"));
        } else {
            claimMappings().validate();
        }
        if (userValidationRules() != null) {
            userValidationRules().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthenticatorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("issuer", this.issuer);
        jsonWriter.writeJsonField("claimMappings", this.claimMappings);
        jsonWriter.writeArrayField("claimValidationRules", this.claimValidationRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("userValidationRules", this.userValidationRules,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthenticatorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthenticatorProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthenticatorProperties.
     */
    public static JwtAuthenticatorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthenticatorProperties deserializedJwtAuthenticatorProperties = new JwtAuthenticatorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issuer".equals(fieldName)) {
                    deserializedJwtAuthenticatorProperties.issuer = JwtAuthenticatorIssuer.fromJson(reader);
                } else if ("claimMappings".equals(fieldName)) {
                    deserializedJwtAuthenticatorProperties.claimMappings
                        = JwtAuthenticatorClaimMappings.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedJwtAuthenticatorProperties.provisioningState
                        = JwtAuthenticatorProvisioningState.fromString(reader.getString());
                } else if ("claimValidationRules".equals(fieldName)) {
                    List<JwtAuthenticatorValidationRule> claimValidationRules
                        = reader.readArray(reader1 -> JwtAuthenticatorValidationRule.fromJson(reader1));
                    deserializedJwtAuthenticatorProperties.claimValidationRules = claimValidationRules;
                } else if ("userValidationRules".equals(fieldName)) {
                    List<JwtAuthenticatorValidationRule> userValidationRules
                        = reader.readArray(reader1 -> JwtAuthenticatorValidationRule.fromJson(reader1));
                    deserializedJwtAuthenticatorProperties.userValidationRules = userValidationRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthenticatorProperties;
        });
    }
}
