// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and
 * values.
 */
@Fluent
public final class LabelSelectorRequirement implements JsonSerializable<LabelSelectorRequirement> {
    /*
     * key is the label key that the selector applies to.
     */
    private String key;

    /*
     * operator represents a key's relationship to a set of values. Valid operators are In and NotIn
     */
    private Operator operator;

    /*
     * values is an array of string values, the values array must be non-empty.
     */
    private List<String> values;

    /**
     * Creates an instance of LabelSelectorRequirement class.
     */
    public LabelSelectorRequirement() {
    }

    /**
     * Get the key property: key is the label key that the selector applies to.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: key is the label key that the selector applies to.
     * 
     * @param key the key value to set.
     * @return the LabelSelectorRequirement object itself.
     */
    public LabelSelectorRequirement withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the operator property: operator represents a key's relationship to a set of values. Valid operators are In
     * and NotIn.
     * 
     * @return the operator value.
     */
    public Operator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: operator represents a key's relationship to a set of values. Valid operators are In
     * and NotIn.
     * 
     * @param operator the operator value to set.
     * @return the LabelSelectorRequirement object itself.
     */
    public LabelSelectorRequirement withOperator(Operator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the values property: values is an array of string values, the values array must be non-empty.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: values is an array of string values, the values array must be non-empty.
     * 
     * @param values the values value to set.
     * @return the LabelSelectorRequirement object itself.
     */
    public LabelSelectorRequirement withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabelSelectorRequirement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabelSelectorRequirement if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabelSelectorRequirement.
     */
    public static LabelSelectorRequirement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabelSelectorRequirement deserializedLabelSelectorRequirement = new LabelSelectorRequirement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedLabelSelectorRequirement.key = reader.getString();
                } else if ("operator".equals(fieldName)) {
                    deserializedLabelSelectorRequirement.operator = Operator.fromString(reader.getString());
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedLabelSelectorRequirement.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabelSelectorRequirement;
        });
    }
}
