// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * network profile for managed cluster snapshot, these properties are read only.
 */
@Fluent
public final class NetworkProfileForSnapshot implements JsonSerializable<NetworkProfileForSnapshot> {
    /*
     * networkPlugin for managed cluster snapshot.
     */
    private NetworkPlugin networkPlugin;

    /*
     * NetworkPluginMode for managed cluster snapshot.
     */
    private NetworkPluginMode networkPluginMode;

    /*
     * networkPolicy for managed cluster snapshot.
     */
    private NetworkPolicy networkPolicy;

    /*
     * networkMode for managed cluster snapshot.
     */
    private NetworkMode networkMode;

    /*
     * loadBalancerSku for managed cluster snapshot.
     */
    private LoadBalancerSku loadBalancerSku;

    /**
     * Creates an instance of NetworkProfileForSnapshot class.
     */
    public NetworkProfileForSnapshot() {
    }

    /**
     * Get the networkPlugin property: networkPlugin for managed cluster snapshot.
     * 
     * @return the networkPlugin value.
     */
    public NetworkPlugin networkPlugin() {
        return this.networkPlugin;
    }

    /**
     * Set the networkPlugin property: networkPlugin for managed cluster snapshot.
     * 
     * @param networkPlugin the networkPlugin value to set.
     * @return the NetworkProfileForSnapshot object itself.
     */
    public NetworkProfileForSnapshot withNetworkPlugin(NetworkPlugin networkPlugin) {
        this.networkPlugin = networkPlugin;
        return this;
    }

    /**
     * Get the networkPluginMode property: NetworkPluginMode for managed cluster snapshot.
     * 
     * @return the networkPluginMode value.
     */
    public NetworkPluginMode networkPluginMode() {
        return this.networkPluginMode;
    }

    /**
     * Set the networkPluginMode property: NetworkPluginMode for managed cluster snapshot.
     * 
     * @param networkPluginMode the networkPluginMode value to set.
     * @return the NetworkProfileForSnapshot object itself.
     */
    public NetworkProfileForSnapshot withNetworkPluginMode(NetworkPluginMode networkPluginMode) {
        this.networkPluginMode = networkPluginMode;
        return this;
    }

    /**
     * Get the networkPolicy property: networkPolicy for managed cluster snapshot.
     * 
     * @return the networkPolicy value.
     */
    public NetworkPolicy networkPolicy() {
        return this.networkPolicy;
    }

    /**
     * Set the networkPolicy property: networkPolicy for managed cluster snapshot.
     * 
     * @param networkPolicy the networkPolicy value to set.
     * @return the NetworkProfileForSnapshot object itself.
     */
    public NetworkProfileForSnapshot withNetworkPolicy(NetworkPolicy networkPolicy) {
        this.networkPolicy = networkPolicy;
        return this;
    }

    /**
     * Get the networkMode property: networkMode for managed cluster snapshot.
     * 
     * @return the networkMode value.
     */
    public NetworkMode networkMode() {
        return this.networkMode;
    }

    /**
     * Set the networkMode property: networkMode for managed cluster snapshot.
     * 
     * @param networkMode the networkMode value to set.
     * @return the NetworkProfileForSnapshot object itself.
     */
    public NetworkProfileForSnapshot withNetworkMode(NetworkMode networkMode) {
        this.networkMode = networkMode;
        return this;
    }

    /**
     * Get the loadBalancerSku property: loadBalancerSku for managed cluster snapshot.
     * 
     * @return the loadBalancerSku value.
     */
    public LoadBalancerSku loadBalancerSku() {
        return this.loadBalancerSku;
    }

    /**
     * Set the loadBalancerSku property: loadBalancerSku for managed cluster snapshot.
     * 
     * @param loadBalancerSku the loadBalancerSku value to set.
     * @return the NetworkProfileForSnapshot object itself.
     */
    public NetworkProfileForSnapshot withLoadBalancerSku(LoadBalancerSku loadBalancerSku) {
        this.loadBalancerSku = loadBalancerSku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkPlugin", this.networkPlugin == null ? null : this.networkPlugin.toString());
        jsonWriter.writeStringField("networkPluginMode",
            this.networkPluginMode == null ? null : this.networkPluginMode.toString());
        jsonWriter.writeStringField("networkPolicy", this.networkPolicy == null ? null : this.networkPolicy.toString());
        jsonWriter.writeStringField("networkMode", this.networkMode == null ? null : this.networkMode.toString());
        jsonWriter.writeStringField("loadBalancerSku",
            this.loadBalancerSku == null ? null : this.loadBalancerSku.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkProfileForSnapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkProfileForSnapshot if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkProfileForSnapshot.
     */
    public static NetworkProfileForSnapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkProfileForSnapshot deserializedNetworkProfileForSnapshot = new NetworkProfileForSnapshot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkPlugin".equals(fieldName)) {
                    deserializedNetworkProfileForSnapshot.networkPlugin = NetworkPlugin.fromString(reader.getString());
                } else if ("networkPluginMode".equals(fieldName)) {
                    deserializedNetworkProfileForSnapshot.networkPluginMode
                        = NetworkPluginMode.fromString(reader.getString());
                } else if ("networkPolicy".equals(fieldName)) {
                    deserializedNetworkProfileForSnapshot.networkPolicy = NetworkPolicy.fromString(reader.getString());
                } else if ("networkMode".equals(fieldName)) {
                    deserializedNetworkProfileForSnapshot.networkMode = NetworkMode.fromString(reader.getString());
                } else if ("loadBalancerSku".equals(fieldName)) {
                    deserializedNetworkProfileForSnapshot.loadBalancerSku
                        = LoadBalancerSku.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkProfileForSnapshot;
        });
    }
}
