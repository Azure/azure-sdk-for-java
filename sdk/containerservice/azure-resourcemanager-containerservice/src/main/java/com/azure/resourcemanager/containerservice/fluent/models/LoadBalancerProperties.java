// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.LabelSelector;
import java.io.IOException;

/**
 * The LoadBalancerProperties model.
 */
@Fluent
public final class LoadBalancerProperties implements JsonSerializable<LoadBalancerProperties> {
    /*
     * Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool
     * will always be added to this load balancer. This agent pool must have at least one node and minCount>=1 for
     * autoscaling operations. An agent pool can only be the primary pool for a single load balancer.
     */
    private String primaryAgentPoolName;

    /*
     * Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set
     * to false manually, both of the external and the internal load balancer will not be selected for services unless
     * they explicitly target it.
     */
    private Boolean allowServicePlacement;

    /*
     * Only services that must match this selector can be placed on this load balancer.
     */
    private LabelSelector serviceLabelSelector;

    /*
     * Services created in namespaces that match the selector can be placed on this load balancer.
     */
    private LabelSelector serviceNamespaceSelector;

    /*
     * Nodes that match this selector will be possible members of this load balancer.
     */
    private LabelSelector nodeSelector;

    /*
     * The current provisioning state.
     */
    private String provisioningState;

    /**
     * Creates an instance of LoadBalancerProperties class.
     */
    public LoadBalancerProperties() {
    }

    /**
     * Get the primaryAgentPoolName property: Required field. A string value that must specify the ID of an existing
     * agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at
     * least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a
     * single load balancer.
     * 
     * @return the primaryAgentPoolName value.
     */
    public String primaryAgentPoolName() {
        return this.primaryAgentPoolName;
    }

    /**
     * Set the primaryAgentPoolName property: Required field. A string value that must specify the ID of an existing
     * agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at
     * least one node and minCount&gt;=1 for autoscaling operations. An agent pool can only be the primary pool for a
     * single load balancer.
     * 
     * @param primaryAgentPoolName the primaryAgentPoolName value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withPrimaryAgentPoolName(String primaryAgentPoolName) {
        this.primaryAgentPoolName = primaryAgentPoolName;
        return this;
    }

    /**
     * Get the allowServicePlacement property: Whether to automatically place services on the load balancer. If not
     * supplied, the default value is true. If set to false manually, both of the external and the internal load
     * balancer will not be selected for services unless they explicitly target it.
     * 
     * @return the allowServicePlacement value.
     */
    public Boolean allowServicePlacement() {
        return this.allowServicePlacement;
    }

    /**
     * Set the allowServicePlacement property: Whether to automatically place services on the load balancer. If not
     * supplied, the default value is true. If set to false manually, both of the external and the internal load
     * balancer will not be selected for services unless they explicitly target it.
     * 
     * @param allowServicePlacement the allowServicePlacement value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withAllowServicePlacement(Boolean allowServicePlacement) {
        this.allowServicePlacement = allowServicePlacement;
        return this;
    }

    /**
     * Get the serviceLabelSelector property: Only services that must match this selector can be placed on this load
     * balancer.
     * 
     * @return the serviceLabelSelector value.
     */
    public LabelSelector serviceLabelSelector() {
        return this.serviceLabelSelector;
    }

    /**
     * Set the serviceLabelSelector property: Only services that must match this selector can be placed on this load
     * balancer.
     * 
     * @param serviceLabelSelector the serviceLabelSelector value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withServiceLabelSelector(LabelSelector serviceLabelSelector) {
        this.serviceLabelSelector = serviceLabelSelector;
        return this;
    }

    /**
     * Get the serviceNamespaceSelector property: Services created in namespaces that match the selector can be placed
     * on this load balancer.
     * 
     * @return the serviceNamespaceSelector value.
     */
    public LabelSelector serviceNamespaceSelector() {
        return this.serviceNamespaceSelector;
    }

    /**
     * Set the serviceNamespaceSelector property: Services created in namespaces that match the selector can be placed
     * on this load balancer.
     * 
     * @param serviceNamespaceSelector the serviceNamespaceSelector value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withServiceNamespaceSelector(LabelSelector serviceNamespaceSelector) {
        this.serviceNamespaceSelector = serviceNamespaceSelector;
        return this;
    }

    /**
     * Get the nodeSelector property: Nodes that match this selector will be possible members of this load balancer.
     * 
     * @return the nodeSelector value.
     */
    public LabelSelector nodeSelector() {
        return this.nodeSelector;
    }

    /**
     * Set the nodeSelector property: Nodes that match this selector will be possible members of this load balancer.
     * 
     * @param nodeSelector the nodeSelector value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withNodeSelector(LabelSelector nodeSelector) {
        this.nodeSelector = nodeSelector;
        return this;
    }

    /**
     * Get the provisioningState property: The current provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (primaryAgentPoolName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property primaryAgentPoolName in model LoadBalancerProperties"));
        }
        if (serviceLabelSelector() != null) {
            serviceLabelSelector().validate();
        }
        if (serviceNamespaceSelector() != null) {
            serviceNamespaceSelector().validate();
        }
        if (nodeSelector() != null) {
            nodeSelector().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("primaryAgentPoolName", this.primaryAgentPoolName);
        jsonWriter.writeBooleanField("allowServicePlacement", this.allowServicePlacement);
        jsonWriter.writeJsonField("serviceLabelSelector", this.serviceLabelSelector);
        jsonWriter.writeJsonField("serviceNamespaceSelector", this.serviceNamespaceSelector);
        jsonWriter.writeJsonField("nodeSelector", this.nodeSelector);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancerProperties.
     */
    public static LoadBalancerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerProperties deserializedLoadBalancerProperties = new LoadBalancerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryAgentPoolName".equals(fieldName)) {
                    deserializedLoadBalancerProperties.primaryAgentPoolName = reader.getString();
                } else if ("allowServicePlacement".equals(fieldName)) {
                    deserializedLoadBalancerProperties.allowServicePlacement
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("serviceLabelSelector".equals(fieldName)) {
                    deserializedLoadBalancerProperties.serviceLabelSelector = LabelSelector.fromJson(reader);
                } else if ("serviceNamespaceSelector".equals(fieldName)) {
                    deserializedLoadBalancerProperties.serviceNamespaceSelector = LabelSelector.fromJson(reader);
                } else if ("nodeSelector".equals(fieldName)) {
                    deserializedLoadBalancerProperties.nodeSelector = LabelSelector.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLoadBalancerProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerProperties;
        });
    }
}
