// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.CreationData;
import com.azure.resourcemanager.containerservice.models.ManagedClusterPropertiesForSnapshot;
import com.azure.resourcemanager.containerservice.models.SnapshotType;
import java.io.IOException;

/**
 * Properties for a managed cluster snapshot.
 */
@Fluent
public final class ManagedClusterSnapshotProperties implements JsonSerializable<ManagedClusterSnapshotProperties> {
    /*
     * CreationData to be used to specify the source resource ID to create this snapshot.
     */
    private CreationData creationData;

    /*
     * The type of a snapshot. The default is NodePool.
     */
    private SnapshotType snapshotType;

    /*
     * What the properties will be showed when getting managed cluster snapshot. Those properties are read-only.
     */
    private ManagedClusterPropertiesForSnapshot managedClusterPropertiesReadOnly;

    /**
     * Creates an instance of ManagedClusterSnapshotProperties class.
     */
    public ManagedClusterSnapshotProperties() {
    }

    /**
     * Get the creationData property: CreationData to be used to specify the source resource ID to create this snapshot.
     * 
     * @return the creationData value.
     */
    public CreationData creationData() {
        return this.creationData;
    }

    /**
     * Set the creationData property: CreationData to be used to specify the source resource ID to create this snapshot.
     * 
     * @param creationData the creationData value to set.
     * @return the ManagedClusterSnapshotProperties object itself.
     */
    public ManagedClusterSnapshotProperties withCreationData(CreationData creationData) {
        this.creationData = creationData;
        return this;
    }

    /**
     * Get the snapshotType property: The type of a snapshot. The default is NodePool.
     * 
     * @return the snapshotType value.
     */
    public SnapshotType snapshotType() {
        return this.snapshotType;
    }

    /**
     * Set the snapshotType property: The type of a snapshot. The default is NodePool.
     * 
     * @param snapshotType the snapshotType value to set.
     * @return the ManagedClusterSnapshotProperties object itself.
     */
    public ManagedClusterSnapshotProperties withSnapshotType(SnapshotType snapshotType) {
        this.snapshotType = snapshotType;
        return this;
    }

    /**
     * Get the managedClusterPropertiesReadOnly property: What the properties will be showed when getting managed
     * cluster snapshot. Those properties are read-only.
     * 
     * @return the managedClusterPropertiesReadOnly value.
     */
    public ManagedClusterPropertiesForSnapshot managedClusterPropertiesReadOnly() {
        return this.managedClusterPropertiesReadOnly;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (creationData() != null) {
            creationData().validate();
        }
        if (managedClusterPropertiesReadOnly() != null) {
            managedClusterPropertiesReadOnly().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("creationData", this.creationData);
        jsonWriter.writeStringField("snapshotType", this.snapshotType == null ? null : this.snapshotType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterSnapshotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterSnapshotProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedClusterSnapshotProperties.
     */
    public static ManagedClusterSnapshotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterSnapshotProperties deserializedManagedClusterSnapshotProperties
                = new ManagedClusterSnapshotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("creationData".equals(fieldName)) {
                    deserializedManagedClusterSnapshotProperties.creationData = CreationData.fromJson(reader);
                } else if ("snapshotType".equals(fieldName)) {
                    deserializedManagedClusterSnapshotProperties.snapshotType
                        = SnapshotType.fromString(reader.getString());
                } else if ("managedClusterPropertiesReadOnly".equals(fieldName)) {
                    deserializedManagedClusterSnapshotProperties.managedClusterPropertiesReadOnly
                        = ManagedClusterPropertiesForSnapshot.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterSnapshotProperties;
        });
    }
}
