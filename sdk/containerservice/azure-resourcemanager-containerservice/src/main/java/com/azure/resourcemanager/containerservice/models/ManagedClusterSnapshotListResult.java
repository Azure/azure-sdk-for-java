// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.fluent.models.ManagedClusterSnapshotInner;
import java.io.IOException;
import java.util.List;

/**
 * The response from the List Managed Cluster Snapshots operation.
 */
@Fluent
public final class ManagedClusterSnapshotListResult implements JsonSerializable<ManagedClusterSnapshotListResult> {
    /*
     * The list of managed cluster snapshots.
     */
    private List<ManagedClusterSnapshotInner> value;

    /*
     * The URL to get the next set of managed cluster snapshot results.
     */
    private String nextLink;

    /**
     * Creates an instance of ManagedClusterSnapshotListResult class.
     */
    public ManagedClusterSnapshotListResult() {
    }

    /**
     * Get the value property: The list of managed cluster snapshots.
     * 
     * @return the value value.
     */
    public List<ManagedClusterSnapshotInner> value() {
        return this.value;
    }

    /**
     * Set the value property: The list of managed cluster snapshots.
     * 
     * @param value the value value to set.
     * @return the ManagedClusterSnapshotListResult object itself.
     */
    public ManagedClusterSnapshotListResult withValue(List<ManagedClusterSnapshotInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: The URL to get the next set of managed cluster snapshot results.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterSnapshotListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterSnapshotListResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedClusterSnapshotListResult.
     */
    public static ManagedClusterSnapshotListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterSnapshotListResult deserializedManagedClusterSnapshotListResult
                = new ManagedClusterSnapshotListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<ManagedClusterSnapshotInner> value
                        = reader.readArray(reader1 -> ManagedClusterSnapshotInner.fromJson(reader1));
                    deserializedManagedClusterSnapshotListResult.value = value;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedManagedClusterSnapshotListResult.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterSnapshotListResult;
        });
    }
}
