// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Metrics profile for the prometheus service addon.
 */
@Fluent
public final class ManagedClusterAzureMonitorProfileMetrics
    implements JsonSerializable<ManagedClusterAzureMonitorProfileMetrics> {
    /*
     * Whether to enable the Prometheus collector
     */
    private boolean enabled;

    /*
     * Kube State Metrics for prometheus addon profile for the container service cluster
     */
    private ManagedClusterAzureMonitorProfileKubeStateMetrics kubeStateMetrics;

    /**
     * Creates an instance of ManagedClusterAzureMonitorProfileMetrics class.
     */
    public ManagedClusterAzureMonitorProfileMetrics() {
    }

    /**
     * Get the enabled property: Whether to enable the Prometheus collector.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether to enable the Prometheus collector.
     * 
     * @param enabled the enabled value to set.
     * @return the ManagedClusterAzureMonitorProfileMetrics object itself.
     */
    public ManagedClusterAzureMonitorProfileMetrics withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the kubeStateMetrics property: Kube State Metrics for prometheus addon profile for the container service
     * cluster.
     * 
     * @return the kubeStateMetrics value.
     */
    public ManagedClusterAzureMonitorProfileKubeStateMetrics kubeStateMetrics() {
        return this.kubeStateMetrics;
    }

    /**
     * Set the kubeStateMetrics property: Kube State Metrics for prometheus addon profile for the container service
     * cluster.
     * 
     * @param kubeStateMetrics the kubeStateMetrics value to set.
     * @return the ManagedClusterAzureMonitorProfileMetrics object itself.
     */
    public ManagedClusterAzureMonitorProfileMetrics
        withKubeStateMetrics(ManagedClusterAzureMonitorProfileKubeStateMetrics kubeStateMetrics) {
        this.kubeStateMetrics = kubeStateMetrics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kubeStateMetrics() != null) {
            kubeStateMetrics().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeJsonField("kubeStateMetrics", this.kubeStateMetrics);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterAzureMonitorProfileMetrics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterAzureMonitorProfileMetrics if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedClusterAzureMonitorProfileMetrics.
     */
    public static ManagedClusterAzureMonitorProfileMetrics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterAzureMonitorProfileMetrics deserializedManagedClusterAzureMonitorProfileMetrics
                = new ManagedClusterAzureMonitorProfileMetrics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileMetrics.enabled = reader.getBoolean();
                } else if ("kubeStateMetrics".equals(fieldName)) {
                    deserializedManagedClusterAzureMonitorProfileMetrics.kubeStateMetrics
                        = ManagedClusterAzureMonitorProfileKubeStateMetrics.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterAzureMonitorProfileMetrics;
        });
    }
}
