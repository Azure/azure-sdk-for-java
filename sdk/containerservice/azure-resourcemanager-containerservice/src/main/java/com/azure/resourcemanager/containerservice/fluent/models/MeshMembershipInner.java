// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.MeshMembershipProperties;
import java.io.IOException;

/**
 * Mesh membership of a managed cluster.
 */
@Fluent
public final class MeshMembershipInner extends ProxyResource {
    /*
     * The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed
     * by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is
     * removed from the template since it is managed by another resource.
     */
    private String managedBy;

    /*
     * Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is
     * updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable
     * optimistic concurrency per the normal eTag convention.
     */
    private String etag;

    /*
     * Mesh membership properties of a managed cluster.
     */
    private MeshMembershipProperties properties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MeshMembershipInner class.
     */
    public MeshMembershipInner() {
    }

    /**
     * Get the managedBy property: The fully qualified resource ID of the resource that manages this resource. Indicates
     * if this resource is managed by another Azure resource. If this is present, complete mode deployment will not
     * delete the resource if it is removed from the template since it is managed by another resource.
     * 
     * @return the managedBy value.
     */
    public String managedBy() {
        return this.managedBy;
    }

    /**
     * Set the managedBy property: The fully qualified resource ID of the resource that manages this resource. Indicates
     * if this resource is managed by another Azure resource. If this is present, complete mode deployment will not
     * delete the resource if it is removed from the template since it is managed by another resource.
     * 
     * @param managedBy the managedBy value to set.
     * @return the MeshMembershipInner object itself.
     */
    public MeshMembershipInner withManagedBy(String managedBy) {
        this.managedBy = managedBy;
        return this;
    }

    /**
     * Get the etag property: Unique read-only string used to implement optimistic concurrency. The eTag value will
     * change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a
     * subsequent request to enable optimistic concurrency per the normal eTag convention.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the properties property: Mesh membership properties of a managed cluster.
     * 
     * @return the properties value.
     */
    public MeshMembershipProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Mesh membership properties of a managed cluster.
     * 
     * @param properties the properties value to set.
     * @return the MeshMembershipInner object itself.
     */
    public MeshMembershipInner withProperties(MeshMembershipProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedBy", this.managedBy);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MeshMembershipInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MeshMembershipInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MeshMembershipInner.
     */
    public static MeshMembershipInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MeshMembershipInner deserializedMeshMembershipInner = new MeshMembershipInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMeshMembershipInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMeshMembershipInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMeshMembershipInner.type = reader.getString();
                } else if ("managedBy".equals(fieldName)) {
                    deserializedMeshMembershipInner.managedBy = reader.getString();
                } else if ("eTag".equals(fieldName)) {
                    deserializedMeshMembershipInner.etag = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMeshMembershipInner.properties = MeshMembershipProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMeshMembershipInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMeshMembershipInner;
        });
    }
}
