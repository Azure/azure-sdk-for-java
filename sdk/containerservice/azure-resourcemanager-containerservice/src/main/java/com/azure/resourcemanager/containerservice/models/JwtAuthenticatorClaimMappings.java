// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The claim mappings for JWTAuthenticator.
 */
@Fluent
public final class JwtAuthenticatorClaimMappings implements JsonSerializable<JwtAuthenticatorClaimMappings> {
    /*
     * The expression to extract username attribute from the token claims.
     */
    private JwtAuthenticatorClaimMappingExpression username;

    /*
     * The expression to extract groups attribute from the token claims. When not provided, no groups are extracted from
     * the token claims.
     */
    private JwtAuthenticatorClaimMappingExpression groups;

    /*
     * The expression to extract uid attribute from the token claims. When not provided, no uid is extracted from the
     * token claims.
     */
    private JwtAuthenticatorClaimMappingExpression uid;

    /*
     * The expression to extract extra attribute from the token claims. When not provided, no extra attributes are
     * extracted from the token claims.
     */
    private List<JwtAuthenticatorExtraClaimMappingExpression> extra;

    /**
     * Creates an instance of JwtAuthenticatorClaimMappings class.
     */
    public JwtAuthenticatorClaimMappings() {
    }

    /**
     * Get the username property: The expression to extract username attribute from the token claims.
     * 
     * @return the username value.
     */
    public JwtAuthenticatorClaimMappingExpression username() {
        return this.username;
    }

    /**
     * Set the username property: The expression to extract username attribute from the token claims.
     * 
     * @param username the username value to set.
     * @return the JwtAuthenticatorClaimMappings object itself.
     */
    public JwtAuthenticatorClaimMappings withUsername(JwtAuthenticatorClaimMappingExpression username) {
        this.username = username;
        return this;
    }

    /**
     * Get the groups property: The expression to extract groups attribute from the token claims. When not provided, no
     * groups are extracted from the token claims.
     * 
     * @return the groups value.
     */
    public JwtAuthenticatorClaimMappingExpression groups() {
        return this.groups;
    }

    /**
     * Set the groups property: The expression to extract groups attribute from the token claims. When not provided, no
     * groups are extracted from the token claims.
     * 
     * @param groups the groups value to set.
     * @return the JwtAuthenticatorClaimMappings object itself.
     */
    public JwtAuthenticatorClaimMappings withGroups(JwtAuthenticatorClaimMappingExpression groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Get the uid property: The expression to extract uid attribute from the token claims. When not provided, no uid is
     * extracted from the token claims.
     * 
     * @return the uid value.
     */
    public JwtAuthenticatorClaimMappingExpression uid() {
        return this.uid;
    }

    /**
     * Set the uid property: The expression to extract uid attribute from the token claims. When not provided, no uid is
     * extracted from the token claims.
     * 
     * @param uid the uid value to set.
     * @return the JwtAuthenticatorClaimMappings object itself.
     */
    public JwtAuthenticatorClaimMappings withUid(JwtAuthenticatorClaimMappingExpression uid) {
        this.uid = uid;
        return this;
    }

    /**
     * Get the extra property: The expression to extract extra attribute from the token claims. When not provided, no
     * extra attributes are extracted from the token claims.
     * 
     * @return the extra value.
     */
    public List<JwtAuthenticatorExtraClaimMappingExpression> extra() {
        return this.extra;
    }

    /**
     * Set the extra property: The expression to extract extra attribute from the token claims. When not provided, no
     * extra attributes are extracted from the token claims.
     * 
     * @param extra the extra value to set.
     * @return the JwtAuthenticatorClaimMappings object itself.
     */
    public JwtAuthenticatorClaimMappings withExtra(List<JwtAuthenticatorExtraClaimMappingExpression> extra) {
        this.extra = extra;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property username in model JwtAuthenticatorClaimMappings"));
        } else {
            username().validate();
        }
        if (groups() != null) {
            groups().validate();
        }
        if (uid() != null) {
            uid().validate();
        }
        if (extra() != null) {
            extra().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthenticatorClaimMappings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("username", this.username);
        jsonWriter.writeJsonField("groups", this.groups);
        jsonWriter.writeJsonField("uid", this.uid);
        jsonWriter.writeArrayField("extra", this.extra, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthenticatorClaimMappings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthenticatorClaimMappings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthenticatorClaimMappings.
     */
    public static JwtAuthenticatorClaimMappings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthenticatorClaimMappings deserializedJwtAuthenticatorClaimMappings
                = new JwtAuthenticatorClaimMappings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    deserializedJwtAuthenticatorClaimMappings.username
                        = JwtAuthenticatorClaimMappingExpression.fromJson(reader);
                } else if ("groups".equals(fieldName)) {
                    deserializedJwtAuthenticatorClaimMappings.groups
                        = JwtAuthenticatorClaimMappingExpression.fromJson(reader);
                } else if ("uid".equals(fieldName)) {
                    deserializedJwtAuthenticatorClaimMappings.uid
                        = JwtAuthenticatorClaimMappingExpression.fromJson(reader);
                } else if ("extra".equals(fieldName)) {
                    List<JwtAuthenticatorExtraClaimMappingExpression> extra
                        = reader.readArray(reader1 -> JwtAuthenticatorExtraClaimMappingExpression.fromJson(reader1));
                    deserializedJwtAuthenticatorClaimMappings.extra = extra;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthenticatorClaimMappings;
        });
    }
}
