// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Encryption configuration for Cilium-based clusters. Once enabled all traffic between Cilium managed pods will be
 * encrypted when it leaves the node boundary.
 */
@Fluent
public final class AdvancedNetworkingSecurityTransitEncryption
    implements JsonSerializable<AdvancedNetworkingSecurityTransitEncryption> {
    /*
     * Configures pod-to-pod encryption. This can be enabled only on Cilium-based clusters. If not specified, the
     * default value is None.
     */
    private TransitEncryptionType type;

    /**
     * Creates an instance of AdvancedNetworkingSecurityTransitEncryption class.
     */
    public AdvancedNetworkingSecurityTransitEncryption() {
    }

    /**
     * Get the type property: Configures pod-to-pod encryption. This can be enabled only on Cilium-based clusters. If
     * not specified, the default value is None.
     * 
     * @return the type value.
     */
    public TransitEncryptionType type() {
        return this.type;
    }

    /**
     * Set the type property: Configures pod-to-pod encryption. This can be enabled only on Cilium-based clusters. If
     * not specified, the default value is None.
     * 
     * @param type the type value to set.
     * @return the AdvancedNetworkingSecurityTransitEncryption object itself.
     */
    public AdvancedNetworkingSecurityTransitEncryption withType(TransitEncryptionType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvancedNetworkingSecurityTransitEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvancedNetworkingSecurityTransitEncryption if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvancedNetworkingSecurityTransitEncryption.
     */
    public static AdvancedNetworkingSecurityTransitEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvancedNetworkingSecurityTransitEncryption deserializedAdvancedNetworkingSecurityTransitEncryption
                = new AdvancedNetworkingSecurityTransitEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAdvancedNetworkingSecurityTransitEncryption.type
                        = TransitEncryptionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvancedNetworkingSecurityTransitEncryption;
        });
    }
}
