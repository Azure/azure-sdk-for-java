// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * node image version profile for given major.minor.patch release.
 */
@Fluent
public final class NodeImageVersionInner implements JsonSerializable<NodeImageVersionInner> {
    /*
     * The operating system of the node image. Example: AKSUbuntu
     */
    private String os;

    /*
     * The SKU or flavor of the node image. Example: 2004gen2containerd
     */
    private String sku;

    /*
     * major.minor.patch version of the node image version release. Example: 2024.02.02
     */
    private String version;

    /*
     * The OS + SKU + version of the node image. Example: AKSUbuntu-1804gen2containerd-2024.02.02
     */
    private String fullName;

    /**
     * Creates an instance of NodeImageVersionInner class.
     */
    public NodeImageVersionInner() {
    }

    /**
     * Get the os property: The operating system of the node image. Example: AKSUbuntu.
     * 
     * @return the os value.
     */
    public String os() {
        return this.os;
    }

    /**
     * Set the os property: The operating system of the node image. Example: AKSUbuntu.
     * 
     * @param os the os value to set.
     * @return the NodeImageVersionInner object itself.
     */
    public NodeImageVersionInner withOs(String os) {
        this.os = os;
        return this;
    }

    /**
     * Get the sku property: The SKU or flavor of the node image. Example: 2004gen2containerd.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU or flavor of the node image. Example: 2004gen2containerd.
     * 
     * @param sku the sku value to set.
     * @return the NodeImageVersionInner object itself.
     */
    public NodeImageVersionInner withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the version property: major.minor.patch version of the node image version release. Example: 2024.02.02.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: major.minor.patch version of the node image version release. Example: 2024.02.02.
     * 
     * @param version the version value to set.
     * @return the NodeImageVersionInner object itself.
     */
    public NodeImageVersionInner withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the fullName property: The OS + SKU + version of the node image. Example:
     * AKSUbuntu-1804gen2containerd-2024.02.02.
     * 
     * @return the fullName value.
     */
    public String fullName() {
        return this.fullName;
    }

    /**
     * Set the fullName property: The OS + SKU + version of the node image. Example:
     * AKSUbuntu-1804gen2containerd-2024.02.02.
     * 
     * @param fullName the fullName value to set.
     * @return the NodeImageVersionInner object itself.
     */
    public NodeImageVersionInner withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("os", this.os);
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("fullName", this.fullName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeImageVersionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeImageVersionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeImageVersionInner.
     */
    public static NodeImageVersionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeImageVersionInner deserializedNodeImageVersionInner = new NodeImageVersionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("os".equals(fieldName)) {
                    deserializedNodeImageVersionInner.os = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedNodeImageVersionInner.sku = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedNodeImageVersionInner.version = reader.getString();
                } else if ("fullName".equals(fieldName)) {
                    deserializedNodeImageVersionInner.fullName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeImageVersionInner;
        });
    }
}
