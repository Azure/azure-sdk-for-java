// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for blue-green upgrade on an agentpool.
 */
@Fluent
public final class AgentPoolBlueGreenUpgradeSettings implements JsonSerializable<AgentPoolBlueGreenUpgradeSettings> {
    /*
     * The number or percentage of nodes to drain in batch during blue-green upgrade. Must be a non-zero number. This
     * can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the
     * percentage of the total number of blue nodes of the initial upgrade operation. For percentages, fractional nodes
     * are rounded up. If not specified, the default is 10%. For more information, including best practices, see:
     * https://learn.microsoft.com/en-us/azure/aks/upgrade-cluster
     */
    private String drainBatchSize;

    /*
     * The drain timeout for a node, i.e., the amount of time (in minutes) to wait on eviction of pods and graceful
     * termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded,
     * the upgrade fails. If not specified, the default is 30 minutes.
     */
    private Integer drainTimeoutInMinutes;

    /*
     * The soak duration after draining a batch of nodes, i.e., the amount of time (in minutes) to wait after draining a
     * batch of nodes before moving on the next batch. If not specified, the default is 15 minutes.
     */
    private Integer batchSoakDurationInMinutes;

    /*
     * The soak duration for a node pool, i.e., the amount of time (in minutes) to wait after all old nodes are drained
     * before we remove the old nodes. If not specified, the default is 60 minutes. Only applicable for blue-green
     * upgrade strategy.
     */
    private Integer finalSoakDurationInMinutes;

    /**
     * Creates an instance of AgentPoolBlueGreenUpgradeSettings class.
     */
    public AgentPoolBlueGreenUpgradeSettings() {
    }

    /**
     * Get the drainBatchSize property: The number or percentage of nodes to drain in batch during blue-green upgrade.
     * Must be a non-zero number. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a
     * percentage is specified, it is the percentage of the total number of blue nodes of the initial upgrade operation.
     * For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information,
     * including best practices, see: https://learn.microsoft.com/en-us/azure/aks/upgrade-cluster.
     * 
     * @return the drainBatchSize value.
     */
    public String drainBatchSize() {
        return this.drainBatchSize;
    }

    /**
     * Set the drainBatchSize property: The number or percentage of nodes to drain in batch during blue-green upgrade.
     * Must be a non-zero number. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a
     * percentage is specified, it is the percentage of the total number of blue nodes of the initial upgrade operation.
     * For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information,
     * including best practices, see: https://learn.microsoft.com/en-us/azure/aks/upgrade-cluster.
     * 
     * @param drainBatchSize the drainBatchSize value to set.
     * @return the AgentPoolBlueGreenUpgradeSettings object itself.
     */
    public AgentPoolBlueGreenUpgradeSettings withDrainBatchSize(String drainBatchSize) {
        this.drainBatchSize = drainBatchSize;
        return this;
    }

    /**
     * Get the drainTimeoutInMinutes property: The drain timeout for a node, i.e., the amount of time (in minutes) to
     * wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod
     * disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
     * 
     * @return the drainTimeoutInMinutes value.
     */
    public Integer drainTimeoutInMinutes() {
        return this.drainTimeoutInMinutes;
    }

    /**
     * Set the drainTimeoutInMinutes property: The drain timeout for a node, i.e., the amount of time (in minutes) to
     * wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod
     * disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
     * 
     * @param drainTimeoutInMinutes the drainTimeoutInMinutes value to set.
     * @return the AgentPoolBlueGreenUpgradeSettings object itself.
     */
    public AgentPoolBlueGreenUpgradeSettings withDrainTimeoutInMinutes(Integer drainTimeoutInMinutes) {
        this.drainTimeoutInMinutes = drainTimeoutInMinutes;
        return this;
    }

    /**
     * Get the batchSoakDurationInMinutes property: The soak duration after draining a batch of nodes, i.e., the amount
     * of time (in minutes) to wait after draining a batch of nodes before moving on the next batch. If not specified,
     * the default is 15 minutes.
     * 
     * @return the batchSoakDurationInMinutes value.
     */
    public Integer batchSoakDurationInMinutes() {
        return this.batchSoakDurationInMinutes;
    }

    /**
     * Set the batchSoakDurationInMinutes property: The soak duration after draining a batch of nodes, i.e., the amount
     * of time (in minutes) to wait after draining a batch of nodes before moving on the next batch. If not specified,
     * the default is 15 minutes.
     * 
     * @param batchSoakDurationInMinutes the batchSoakDurationInMinutes value to set.
     * @return the AgentPoolBlueGreenUpgradeSettings object itself.
     */
    public AgentPoolBlueGreenUpgradeSettings withBatchSoakDurationInMinutes(Integer batchSoakDurationInMinutes) {
        this.batchSoakDurationInMinutes = batchSoakDurationInMinutes;
        return this;
    }

    /**
     * Get the finalSoakDurationInMinutes property: The soak duration for a node pool, i.e., the amount of time (in
     * minutes) to wait after all old nodes are drained before we remove the old nodes. If not specified, the default is
     * 60 minutes. Only applicable for blue-green upgrade strategy.
     * 
     * @return the finalSoakDurationInMinutes value.
     */
    public Integer finalSoakDurationInMinutes() {
        return this.finalSoakDurationInMinutes;
    }

    /**
     * Set the finalSoakDurationInMinutes property: The soak duration for a node pool, i.e., the amount of time (in
     * minutes) to wait after all old nodes are drained before we remove the old nodes. If not specified, the default is
     * 60 minutes. Only applicable for blue-green upgrade strategy.
     * 
     * @param finalSoakDurationInMinutes the finalSoakDurationInMinutes value to set.
     * @return the AgentPoolBlueGreenUpgradeSettings object itself.
     */
    public AgentPoolBlueGreenUpgradeSettings withFinalSoakDurationInMinutes(Integer finalSoakDurationInMinutes) {
        this.finalSoakDurationInMinutes = finalSoakDurationInMinutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("drainBatchSize", this.drainBatchSize);
        jsonWriter.writeNumberField("drainTimeoutInMinutes", this.drainTimeoutInMinutes);
        jsonWriter.writeNumberField("batchSoakDurationInMinutes", this.batchSoakDurationInMinutes);
        jsonWriter.writeNumberField("finalSoakDurationInMinutes", this.finalSoakDurationInMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentPoolBlueGreenUpgradeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentPoolBlueGreenUpgradeSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentPoolBlueGreenUpgradeSettings.
     */
    public static AgentPoolBlueGreenUpgradeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentPoolBlueGreenUpgradeSettings deserializedAgentPoolBlueGreenUpgradeSettings
                = new AgentPoolBlueGreenUpgradeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("drainBatchSize".equals(fieldName)) {
                    deserializedAgentPoolBlueGreenUpgradeSettings.drainBatchSize = reader.getString();
                } else if ("drainTimeoutInMinutes".equals(fieldName)) {
                    deserializedAgentPoolBlueGreenUpgradeSettings.drainTimeoutInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("batchSoakDurationInMinutes".equals(fieldName)) {
                    deserializedAgentPoolBlueGreenUpgradeSettings.batchSoakDurationInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("finalSoakDurationInMinutes".equals(fieldName)) {
                    deserializedAgentPoolBlueGreenUpgradeSettings.finalSoakDurationInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentPoolBlueGreenUpgradeSettings;
        });
    }
}
