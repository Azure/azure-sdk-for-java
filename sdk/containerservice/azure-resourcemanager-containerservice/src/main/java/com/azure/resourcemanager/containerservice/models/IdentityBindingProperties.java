// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IdentityBinding properties.
 */
@Fluent
public final class IdentityBindingProperties implements JsonSerializable<IdentityBindingProperties> {
    /*
     * Managed identity profile for the identity binding.
     */
    private IdentityBindingManagedIdentityProfile managedIdentity;

    /*
     * The OIDC issuer URL of the IdentityBinding.
     */
    private IdentityBindingOidcIssuerProfile oidcIssuer;

    /*
     * The status of the last operation.
     */
    private IdentityBindingProvisioningState provisioningState;

    /**
     * Creates an instance of IdentityBindingProperties class.
     */
    public IdentityBindingProperties() {
    }

    /**
     * Get the managedIdentity property: Managed identity profile for the identity binding.
     * 
     * @return the managedIdentity value.
     */
    public IdentityBindingManagedIdentityProfile managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: Managed identity profile for the identity binding.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the IdentityBindingProperties object itself.
     */
    public IdentityBindingProperties withManagedIdentity(IdentityBindingManagedIdentityProfile managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Get the oidcIssuer property: The OIDC issuer URL of the IdentityBinding.
     * 
     * @return the oidcIssuer value.
     */
    public IdentityBindingOidcIssuerProfile oidcIssuer() {
        return this.oidcIssuer;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public IdentityBindingProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedIdentity in model IdentityBindingProperties"));
        } else {
            managedIdentity().validate();
        }
        if (oidcIssuer() != null) {
            oidcIssuer().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IdentityBindingProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentityBindingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentityBindingProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IdentityBindingProperties.
     */
    public static IdentityBindingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentityBindingProperties deserializedIdentityBindingProperties = new IdentityBindingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedIdentity".equals(fieldName)) {
                    deserializedIdentityBindingProperties.managedIdentity
                        = IdentityBindingManagedIdentityProfile.fromJson(reader);
                } else if ("oidcIssuer".equals(fieldName)) {
                    deserializedIdentityBindingProperties.oidcIssuer
                        = IdentityBindingOidcIssuerProfile.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedIdentityBindingProperties.provisioningState
                        = IdentityBindingProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentityBindingProperties;
        });
    }
}
