// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Contains read-only information about the machine.
 */
@Immutable
public final class MachineStatus implements JsonSerializable<MachineStatus> {
    /*
     * The error details information of the machine. Preserves the detailed info of failure. If there was no error, this
     * field is omitted.
     */
    private ManagementError provisioningError;

    /*
     * Specifies the time at which the machine was created.
     */
    private OffsetDateTime creationTimestamp;

    /*
     * The drift action of the machine. Indicates whether a machine has deviated from its expected state due to changes
     * in managed cluster properties, requiring corrective action.
     */
    private DriftAction driftAction;

    /*
     * Reason for machine drift. Provides detailed information on why the machine has drifted. This field is omitted if
     * the machine is up to date.
     */
    private String driftReason;

    /*
     * Virtual machine state. Indicates the current state of the underlying virtual machine.
     */
    private VmState vmState;

    /**
     * Creates an instance of MachineStatus class.
     */
    public MachineStatus() {
    }

    /**
     * Get the provisioningError property: The error details information of the machine. Preserves the detailed info of
     * failure. If there was no error, this field is omitted.
     * 
     * @return the provisioningError value.
     */
    public ManagementError provisioningError() {
        return this.provisioningError;
    }

    /**
     * Get the creationTimestamp property: Specifies the time at which the machine was created.
     * 
     * @return the creationTimestamp value.
     */
    public OffsetDateTime creationTimestamp() {
        return this.creationTimestamp;
    }

    /**
     * Get the driftAction property: The drift action of the machine. Indicates whether a machine has deviated from its
     * expected state due to changes in managed cluster properties, requiring corrective action.
     * 
     * @return the driftAction value.
     */
    public DriftAction driftAction() {
        return this.driftAction;
    }

    /**
     * Get the driftReason property: Reason for machine drift. Provides detailed information on why the machine has
     * drifted. This field is omitted if the machine is up to date.
     * 
     * @return the driftReason value.
     */
    public String driftReason() {
        return this.driftReason;
    }

    /**
     * Get the vmState property: Virtual machine state. Indicates the current state of the underlying virtual machine.
     * 
     * @return the vmState value.
     */
    public VmState vmState() {
        return this.vmState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineStatus.
     */
    public static MachineStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineStatus deserializedMachineStatus = new MachineStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningError".equals(fieldName)) {
                    deserializedMachineStatus.provisioningError = ManagementError.fromJson(reader);
                } else if ("creationTimestamp".equals(fieldName)) {
                    deserializedMachineStatus.creationTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("driftAction".equals(fieldName)) {
                    deserializedMachineStatus.driftAction = DriftAction.fromString(reader.getString());
                } else if ("driftReason".equals(fieldName)) {
                    deserializedMachineStatus.driftReason = reader.getString();
                } else if ("vmState".equals(fieldName)) {
                    deserializedMachineStatus.vmState = VmState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineStatus;
        });
    }
}
