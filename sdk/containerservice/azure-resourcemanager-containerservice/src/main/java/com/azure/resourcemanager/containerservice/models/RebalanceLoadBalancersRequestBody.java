// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The names of the load balancers to rebalance. If set to empty, all load balancers will be rebalanced.
 */
@Fluent
public final class RebalanceLoadBalancersRequestBody implements JsonSerializable<RebalanceLoadBalancersRequestBody> {
    /*
     * The load balancer names list.
     */
    private List<String> loadBalancerNames;

    /**
     * Creates an instance of RebalanceLoadBalancersRequestBody class.
     */
    public RebalanceLoadBalancersRequestBody() {
    }

    /**
     * Get the loadBalancerNames property: The load balancer names list.
     * 
     * @return the loadBalancerNames value.
     */
    public List<String> loadBalancerNames() {
        return this.loadBalancerNames;
    }

    /**
     * Set the loadBalancerNames property: The load balancer names list.
     * 
     * @param loadBalancerNames the loadBalancerNames value to set.
     * @return the RebalanceLoadBalancersRequestBody object itself.
     */
    public RebalanceLoadBalancersRequestBody withLoadBalancerNames(List<String> loadBalancerNames) {
        this.loadBalancerNames = loadBalancerNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("loadBalancerNames", this.loadBalancerNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RebalanceLoadBalancersRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RebalanceLoadBalancersRequestBody if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RebalanceLoadBalancersRequestBody.
     */
    public static RebalanceLoadBalancersRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RebalanceLoadBalancersRequestBody deserializedRebalanceLoadBalancersRequestBody
                = new RebalanceLoadBalancersRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("loadBalancerNames".equals(fieldName)) {
                    List<String> loadBalancerNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedRebalanceLoadBalancersRequestBody.loadBalancerNames = loadBalancerNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRebalanceLoadBalancersRequestBody;
        });
    }
}
