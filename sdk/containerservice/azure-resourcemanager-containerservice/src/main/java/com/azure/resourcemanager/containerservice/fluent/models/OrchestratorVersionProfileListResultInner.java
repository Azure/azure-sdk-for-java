// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerservice.models.OrchestratorVersionProfile;
import java.io.IOException;
import java.util.List;

/**
 * The list of versions for supported orchestrators.
 */
@Fluent
public final class OrchestratorVersionProfileListResultInner
    implements JsonSerializable<OrchestratorVersionProfileListResultInner> {
    /*
     * Id of the orchestrator version profile list result.
     */
    private String id;

    /*
     * Name of the orchestrator version profile list result.
     */
    private String name;

    /*
     * Type of the orchestrator version profile list result.
     */
    private String type;

    /*
     * The properties of an orchestrator version profile.
     */
    private OrchestratorVersionProfileProperties innerProperties = new OrchestratorVersionProfileProperties();

    /**
     * Creates an instance of OrchestratorVersionProfileListResultInner class.
     */
    public OrchestratorVersionProfileListResultInner() {
    }

    /**
     * Get the id property: Id of the orchestrator version profile list result.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the orchestrator version profile list result.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Type of the orchestrator version profile list result.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: The properties of an orchestrator version profile.
     * 
     * @return the innerProperties value.
     */
    private OrchestratorVersionProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the orchestrators property: List of orchestrator version profiles.
     * 
     * @return the orchestrators value.
     */
    public List<OrchestratorVersionProfile> orchestrators() {
        return this.innerProperties() == null ? null : this.innerProperties().orchestrators();
    }

    /**
     * Set the orchestrators property: List of orchestrator version profiles.
     * 
     * @param orchestrators the orchestrators value to set.
     * @return the OrchestratorVersionProfileListResultInner object itself.
     */
    public OrchestratorVersionProfileListResultInner withOrchestrators(List<OrchestratorVersionProfile> orchestrators) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrchestratorVersionProfileProperties();
        }
        this.innerProperties().withOrchestrators(orchestrators);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model OrchestratorVersionProfileListResultInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrchestratorVersionProfileListResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrchestratorVersionProfileListResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrchestratorVersionProfileListResultInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrchestratorVersionProfileListResultInner.
     */
    public static OrchestratorVersionProfileListResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrchestratorVersionProfileListResultInner deserializedOrchestratorVersionProfileListResultInner
                = new OrchestratorVersionProfileListResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedOrchestratorVersionProfileListResultInner.innerProperties
                        = OrchestratorVersionProfileProperties.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedOrchestratorVersionProfileListResultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOrchestratorVersionProfileListResultInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOrchestratorVersionProfileListResultInner.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrchestratorVersionProfileListResultInner;
        });
    }
}
