// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mesh membership properties of a managed cluster.
 */
@Fluent
public final class MeshMembershipProperties implements JsonSerializable<MeshMembershipProperties> {
    /*
     * The current provisioning state of the Mesh Membership.
     */
    private MeshMembershipProvisioningState provisioningState;

    /*
     * The ARM resource id for the managed mesh member. This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppLink/applinks/{
     * appLinkName}/appLinkMembers/{appLinkMemberName}'. Visit https://aka.ms/applink for more information.
     */
    private String managedMeshId;

    /**
     * Creates an instance of MeshMembershipProperties class.
     */
    public MeshMembershipProperties() {
    }

    /**
     * Get the provisioningState property: The current provisioning state of the Mesh Membership.
     * 
     * @return the provisioningState value.
     */
    public MeshMembershipProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the managedMeshId property: The ARM resource id for the managed mesh member. This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppLink/applinks/{appLinkName}/appLinkMembers/{appLinkMemberName}'.
     * Visit https://aka.ms/applink for more information.
     * 
     * @return the managedMeshId value.
     */
    public String managedMeshId() {
        return this.managedMeshId;
    }

    /**
     * Set the managedMeshId property: The ARM resource id for the managed mesh member. This is of the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppLink/applinks/{appLinkName}/appLinkMembers/{appLinkMemberName}'.
     * Visit https://aka.ms/applink for more information.
     * 
     * @param managedMeshId the managedMeshId value to set.
     * @return the MeshMembershipProperties object itself.
     */
    public MeshMembershipProperties withManagedMeshId(String managedMeshId) {
        this.managedMeshId = managedMeshId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedMeshId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedMeshId in model MeshMembershipProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MeshMembershipProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedMeshID", this.managedMeshId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MeshMembershipProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MeshMembershipProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MeshMembershipProperties.
     */
    public static MeshMembershipProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MeshMembershipProperties deserializedMeshMembershipProperties = new MeshMembershipProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedMeshID".equals(fieldName)) {
                    deserializedMeshMembershipProperties.managedMeshId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMeshMembershipProperties.provisioningState
                        = MeshMembershipProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMeshMembershipProperties;
        });
    }
}
