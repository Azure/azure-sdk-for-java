// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * A historical version that can be used for rollback operations.
 */
@Fluent
public final class AgentPoolRecentlyUsedVersion implements JsonSerializable<AgentPoolRecentlyUsedVersion> {
    /*
     * The Kubernetes version (major.minor.patch) available for rollback.
     */
    private String orchestratorVersion;

    /*
     * The node image version available for rollback.
     */
    private String nodeImageVersion;

    /*
     * The timestamp when this version was last used.
     */
    private OffsetDateTime timestamp;

    /**
     * Creates an instance of AgentPoolRecentlyUsedVersion class.
     */
    public AgentPoolRecentlyUsedVersion() {
    }

    /**
     * Get the orchestratorVersion property: The Kubernetes version (major.minor.patch) available for rollback.
     * 
     * @return the orchestratorVersion value.
     */
    public String orchestratorVersion() {
        return this.orchestratorVersion;
    }

    /**
     * Set the orchestratorVersion property: The Kubernetes version (major.minor.patch) available for rollback.
     * 
     * @param orchestratorVersion the orchestratorVersion value to set.
     * @return the AgentPoolRecentlyUsedVersion object itself.
     */
    public AgentPoolRecentlyUsedVersion withOrchestratorVersion(String orchestratorVersion) {
        this.orchestratorVersion = orchestratorVersion;
        return this;
    }

    /**
     * Get the nodeImageVersion property: The node image version available for rollback.
     * 
     * @return the nodeImageVersion value.
     */
    public String nodeImageVersion() {
        return this.nodeImageVersion;
    }

    /**
     * Set the nodeImageVersion property: The node image version available for rollback.
     * 
     * @param nodeImageVersion the nodeImageVersion value to set.
     * @return the AgentPoolRecentlyUsedVersion object itself.
     */
    public AgentPoolRecentlyUsedVersion withNodeImageVersion(String nodeImageVersion) {
        this.nodeImageVersion = nodeImageVersion;
        return this;
    }

    /**
     * Get the timestamp property: The timestamp when this version was last used.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The timestamp when this version was last used.
     * 
     * @param timestamp the timestamp value to set.
     * @return the AgentPoolRecentlyUsedVersion object itself.
     */
    public AgentPoolRecentlyUsedVersion withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("orchestratorVersion", this.orchestratorVersion);
        jsonWriter.writeStringField("nodeImageVersion", this.nodeImageVersion);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentPoolRecentlyUsedVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentPoolRecentlyUsedVersion if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentPoolRecentlyUsedVersion.
     */
    public static AgentPoolRecentlyUsedVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentPoolRecentlyUsedVersion deserializedAgentPoolRecentlyUsedVersion = new AgentPoolRecentlyUsedVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("orchestratorVersion".equals(fieldName)) {
                    deserializedAgentPoolRecentlyUsedVersion.orchestratorVersion = reader.getString();
                } else if ("nodeImageVersion".equals(fieldName)) {
                    deserializedAgentPoolRecentlyUsedVersion.nodeImageVersion = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedAgentPoolRecentlyUsedVersion.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentPoolRecentlyUsedVersion;
        });
    }
}
