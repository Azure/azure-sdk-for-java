// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifications on auto-scaling.
 */
@Fluent
public final class AutoScaleProfile implements JsonSerializable<AutoScaleProfile> {
    /*
     * VM size that AKS will use when creating and scaling e.g. 'Standard_E4s_v3', 'Standard_E16s_v3' or
     * 'Standard_D16s_v5'.
     */
    private String size;

    /*
     * The minimum number of nodes of the specified sizes.
     */
    private Integer minCount;

    /*
     * The maximum number of nodes of the specified sizes.
     */
    private Integer maxCount;

    /**
     * Creates an instance of AutoScaleProfile class.
     */
    public AutoScaleProfile() {
    }

    /**
     * Get the size property: VM size that AKS will use when creating and scaling e.g. 'Standard_E4s_v3',
     * 'Standard_E16s_v3' or 'Standard_D16s_v5'.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: VM size that AKS will use when creating and scaling e.g. 'Standard_E4s_v3',
     * 'Standard_E16s_v3' or 'Standard_D16s_v5'.
     * 
     * @param size the size value to set.
     * @return the AutoScaleProfile object itself.
     */
    public AutoScaleProfile withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the minCount property: The minimum number of nodes of the specified sizes.
     * 
     * @return the minCount value.
     */
    public Integer minCount() {
        return this.minCount;
    }

    /**
     * Set the minCount property: The minimum number of nodes of the specified sizes.
     * 
     * @param minCount the minCount value to set.
     * @return the AutoScaleProfile object itself.
     */
    public AutoScaleProfile withMinCount(Integer minCount) {
        this.minCount = minCount;
        return this;
    }

    /**
     * Get the maxCount property: The maximum number of nodes of the specified sizes.
     * 
     * @return the maxCount value.
     */
    public Integer maxCount() {
        return this.maxCount;
    }

    /**
     * Set the maxCount property: The maximum number of nodes of the specified sizes.
     * 
     * @param maxCount the maxCount value to set.
     * @return the AutoScaleProfile object itself.
     */
    public AutoScaleProfile withMaxCount(Integer maxCount) {
        this.maxCount = maxCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeNumberField("minCount", this.minCount);
        jsonWriter.writeNumberField("maxCount", this.maxCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoScaleProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoScaleProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoScaleProfile.
     */
    public static AutoScaleProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoScaleProfile deserializedAutoScaleProfile = new AutoScaleProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("size".equals(fieldName)) {
                    deserializedAutoScaleProfile.size = reader.getString();
                } else if ("minCount".equals(fieldName)) {
                    deserializedAutoScaleProfile.minCount = reader.getNullable(JsonReader::getInt);
                } else if ("maxCount".equals(fieldName)) {
                    deserializedAutoScaleProfile.maxCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoScaleProfile;
        });
    }
}
