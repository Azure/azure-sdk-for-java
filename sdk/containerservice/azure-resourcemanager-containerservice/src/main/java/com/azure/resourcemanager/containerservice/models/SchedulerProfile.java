// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The pod scheduler profile for the cluster.
 */
@Fluent
public final class SchedulerProfile implements JsonSerializable<SchedulerProfile> {
    /*
     * Mapping of each scheduler instance to its profile.
     */
    private SchedulerProfileSchedulerInstanceProfiles schedulerInstanceProfiles;

    /**
     * Creates an instance of SchedulerProfile class.
     */
    public SchedulerProfile() {
    }

    /**
     * Get the schedulerInstanceProfiles property: Mapping of each scheduler instance to its profile.
     * 
     * @return the schedulerInstanceProfiles value.
     */
    public SchedulerProfileSchedulerInstanceProfiles schedulerInstanceProfiles() {
        return this.schedulerInstanceProfiles;
    }

    /**
     * Set the schedulerInstanceProfiles property: Mapping of each scheduler instance to its profile.
     * 
     * @param schedulerInstanceProfiles the schedulerInstanceProfiles value to set.
     * @return the SchedulerProfile object itself.
     */
    public SchedulerProfile
        withSchedulerInstanceProfiles(SchedulerProfileSchedulerInstanceProfiles schedulerInstanceProfiles) {
        this.schedulerInstanceProfiles = schedulerInstanceProfiles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schedulerInstanceProfiles() != null) {
            schedulerInstanceProfiles().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("schedulerInstanceProfiles", this.schedulerInstanceProfiles);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchedulerProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchedulerProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SchedulerProfile.
     */
    public static SchedulerProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchedulerProfile deserializedSchedulerProfile = new SchedulerProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schedulerInstanceProfiles".equals(fieldName)) {
                    deserializedSchedulerProfile.schedulerInstanceProfiles
                        = SchedulerProfileSchedulerInstanceProfiles.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedulerProfile;
        });
    }
}
