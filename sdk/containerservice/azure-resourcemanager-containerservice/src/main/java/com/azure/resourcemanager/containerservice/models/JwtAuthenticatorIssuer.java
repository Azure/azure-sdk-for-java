// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The OIDC issuer details for JWTAuthenticator.
 */
@Fluent
public final class JwtAuthenticatorIssuer implements JsonSerializable<JwtAuthenticatorIssuer> {
    /*
     * The issuer URL. The URL must begin with the scheme https and cannot contain a query string or fragment. This must
     * match the "iss" claim in the presented JWT, and the issuer returned from discovery.
     */
    private String url;

    /*
     * The set of acceptable audiences the JWT must be issued to. At least one is required. When multiple is set,
     * AudienceMatchPolicy is used in API Server configuration.
     */
    private List<String> audiences;

    /**
     * Creates an instance of JwtAuthenticatorIssuer class.
     */
    public JwtAuthenticatorIssuer() {
    }

    /**
     * Get the url property: The issuer URL. The URL must begin with the scheme https and cannot contain a query string
     * or fragment. This must match the "iss" claim in the presented JWT, and the issuer returned from discovery.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The issuer URL. The URL must begin with the scheme https and cannot contain a query string
     * or fragment. This must match the "iss" claim in the presented JWT, and the issuer returned from discovery.
     * 
     * @param url the url value to set.
     * @return the JwtAuthenticatorIssuer object itself.
     */
    public JwtAuthenticatorIssuer withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the audiences property: The set of acceptable audiences the JWT must be issued to. At least one is required.
     * When multiple is set, AudienceMatchPolicy is used in API Server configuration.
     * 
     * @return the audiences value.
     */
    public List<String> audiences() {
        return this.audiences;
    }

    /**
     * Set the audiences property: The set of acceptable audiences the JWT must be issued to. At least one is required.
     * When multiple is set, AudienceMatchPolicy is used in API Server configuration.
     * 
     * @param audiences the audiences value to set.
     * @return the JwtAuthenticatorIssuer object itself.
     */
    public JwtAuthenticatorIssuer withAudiences(List<String> audiences) {
        this.audiences = audiences;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property url in model JwtAuthenticatorIssuer"));
        }
        if (audiences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property audiences in model JwtAuthenticatorIssuer"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthenticatorIssuer.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeArrayField("audiences", this.audiences, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthenticatorIssuer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthenticatorIssuer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthenticatorIssuer.
     */
    public static JwtAuthenticatorIssuer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthenticatorIssuer deserializedJwtAuthenticatorIssuer = new JwtAuthenticatorIssuer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    deserializedJwtAuthenticatorIssuer.url = reader.getString();
                } else if ("audiences".equals(fieldName)) {
                    List<String> audiences = reader.readArray(reader1 -> reader1.getString());
                    deserializedJwtAuthenticatorIssuer.audiences = audiences;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthenticatorIssuer;
        });
    }
}
