// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The claim mapping expression for JWTAuthenticator.
 */
@Fluent
public final class JwtAuthenticatorClaimMappingExpression
    implements JsonSerializable<JwtAuthenticatorClaimMappingExpression> {
    /*
     * The CEL expression used to access token claims.
     */
    private String expression;

    /**
     * Creates an instance of JwtAuthenticatorClaimMappingExpression class.
     */
    public JwtAuthenticatorClaimMappingExpression() {
    }

    /**
     * Get the expression property: The CEL expression used to access token claims.
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: The CEL expression used to access token claims.
     * 
     * @param expression the expression value to set.
     * @return the JwtAuthenticatorClaimMappingExpression object itself.
     */
    public JwtAuthenticatorClaimMappingExpression withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (expression() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property expression in model JwtAuthenticatorClaimMappingExpression"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthenticatorClaimMappingExpression.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expression", this.expression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthenticatorClaimMappingExpression from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthenticatorClaimMappingExpression if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthenticatorClaimMappingExpression.
     */
    public static JwtAuthenticatorClaimMappingExpression fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthenticatorClaimMappingExpression deserializedJwtAuthenticatorClaimMappingExpression
                = new JwtAuthenticatorClaimMappingExpression();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expression".equals(fieldName)) {
                    deserializedJwtAuthenticatorClaimMappingExpression.expression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthenticatorClaimMappingExpression;
        });
    }
}
