// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Microsoft Defender settings for security gating, validates container images eligibility for deployment based on
 * Defender for Containers security findings. Using Admission Controller, it either audits or prevents the deployment of
 * images that do not meet security standards.
 */
@Fluent
public final class ManagedClusterSecurityProfileDefenderSecurityGating
    implements JsonSerializable<ManagedClusterSecurityProfileDefenderSecurityGating> {
    /*
     * Whether to enable Defender security gating. When enabled, the gating feature will scan container images and audit
     * or block the deployment of images that do not meet security standards according to the configured security rules.
     */
    private Boolean enabled;

    /*
     * List of identities that the admission controller will make use of in order to pull security artifacts from the
     * registry. These are the same identities used by the cluster to pull container images. Each identity provided
     * should have federated identity credential attached to it.
     */
    private List<ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem> identities;

    /*
     * In use only while registry access granted by secret rather than managed identity. Set whether to grant the
     * Defender gating agent access to the cluster's secrets for pulling images from registries. If secret access is
     * denied and the registry requires pull secrets, the add-on will not perform any image validation. Default value is
     * false.
     */
    private Boolean allowSecretAccess;

    /**
     * Creates an instance of ManagedClusterSecurityProfileDefenderSecurityGating class.
     */
    public ManagedClusterSecurityProfileDefenderSecurityGating() {
    }

    /**
     * Get the enabled property: Whether to enable Defender security gating. When enabled, the gating feature will scan
     * container images and audit or block the deployment of images that do not meet security standards according to the
     * configured security rules.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether to enable Defender security gating. When enabled, the gating feature will scan
     * container images and audit or block the deployment of images that do not meet security standards according to the
     * configured security rules.
     * 
     * @param enabled the enabled value to set.
     * @return the ManagedClusterSecurityProfileDefenderSecurityGating object itself.
     */
    public ManagedClusterSecurityProfileDefenderSecurityGating withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the identities property: List of identities that the admission controller will make use of in order to pull
     * security artifacts from the registry. These are the same identities used by the cluster to pull container images.
     * Each identity provided should have federated identity credential attached to it.
     * 
     * @return the identities value.
     */
    public List<ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem> identities() {
        return this.identities;
    }

    /**
     * Set the identities property: List of identities that the admission controller will make use of in order to pull
     * security artifacts from the registry. These are the same identities used by the cluster to pull container images.
     * Each identity provided should have federated identity credential attached to it.
     * 
     * @param identities the identities value to set.
     * @return the ManagedClusterSecurityProfileDefenderSecurityGating object itself.
     */
    public ManagedClusterSecurityProfileDefenderSecurityGating
        withIdentities(List<ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem> identities) {
        this.identities = identities;
        return this;
    }

    /**
     * Get the allowSecretAccess property: In use only while registry access granted by secret rather than managed
     * identity. Set whether to grant the Defender gating agent access to the cluster's secrets for pulling images from
     * registries. If secret access is denied and the registry requires pull secrets, the add-on will not perform any
     * image validation. Default value is false.
     * 
     * @return the allowSecretAccess value.
     */
    public Boolean allowSecretAccess() {
        return this.allowSecretAccess;
    }

    /**
     * Set the allowSecretAccess property: In use only while registry access granted by secret rather than managed
     * identity. Set whether to grant the Defender gating agent access to the cluster's secrets for pulling images from
     * registries. If secret access is denied and the registry requires pull secrets, the add-on will not perform any
     * image validation. Default value is false.
     * 
     * @param allowSecretAccess the allowSecretAccess value to set.
     * @return the ManagedClusterSecurityProfileDefenderSecurityGating object itself.
     */
    public ManagedClusterSecurityProfileDefenderSecurityGating withAllowSecretAccess(Boolean allowSecretAccess) {
        this.allowSecretAccess = allowSecretAccess;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identities() != null) {
            identities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("identities", this.identities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("allowSecretAccess", this.allowSecretAccess);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterSecurityProfileDefenderSecurityGating from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterSecurityProfileDefenderSecurityGating if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedClusterSecurityProfileDefenderSecurityGating.
     */
    public static ManagedClusterSecurityProfileDefenderSecurityGating fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterSecurityProfileDefenderSecurityGating deserializedManagedClusterSecurityProfileDefenderSecurityGating
                = new ManagedClusterSecurityProfileDefenderSecurityGating();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedManagedClusterSecurityProfileDefenderSecurityGating.enabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("identities".equals(fieldName)) {
                    List<ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem> identities
                        = reader.readArray(reader1 -> ManagedClusterSecurityProfileDefenderSecurityGatingIdentitiesItem
                            .fromJson(reader1));
                    deserializedManagedClusterSecurityProfileDefenderSecurityGating.identities = identities;
                } else if ("allowSecretAccess".equals(fieldName)) {
                    deserializedManagedClusterSecurityProfileDefenderSecurityGating.allowSecretAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterSecurityProfileDefenderSecurityGating;
        });
    }
}
