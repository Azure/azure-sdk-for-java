// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The extra claim mapping expression for JWTAuthenticator.
 */
@Fluent
public final class JwtAuthenticatorExtraClaimMappingExpression
    implements JsonSerializable<JwtAuthenticatorExtraClaimMappingExpression> {
    /*
     * The key of the extra attribute.
     */
    private String key;

    /*
     * The CEL expression used to extract the value of the extra attribute.
     */
    private String valueExpression;

    /**
     * Creates an instance of JwtAuthenticatorExtraClaimMappingExpression class.
     */
    public JwtAuthenticatorExtraClaimMappingExpression() {
    }

    /**
     * Get the key property: The key of the extra attribute.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The key of the extra attribute.
     * 
     * @param key the key value to set.
     * @return the JwtAuthenticatorExtraClaimMappingExpression object itself.
     */
    public JwtAuthenticatorExtraClaimMappingExpression withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the valueExpression property: The CEL expression used to extract the value of the extra attribute.
     * 
     * @return the valueExpression value.
     */
    public String valueExpression() {
        return this.valueExpression;
    }

    /**
     * Set the valueExpression property: The CEL expression used to extract the value of the extra attribute.
     * 
     * @param valueExpression the valueExpression value to set.
     * @return the JwtAuthenticatorExtraClaimMappingExpression object itself.
     */
    public JwtAuthenticatorExtraClaimMappingExpression withValueExpression(String valueExpression) {
        this.valueExpression = valueExpression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property key in model JwtAuthenticatorExtraClaimMappingExpression"));
        }
        if (valueExpression() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property valueExpression in model JwtAuthenticatorExtraClaimMappingExpression"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JwtAuthenticatorExtraClaimMappingExpression.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("valueExpression", this.valueExpression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JwtAuthenticatorExtraClaimMappingExpression from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JwtAuthenticatorExtraClaimMappingExpression if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JwtAuthenticatorExtraClaimMappingExpression.
     */
    public static JwtAuthenticatorExtraClaimMappingExpression fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JwtAuthenticatorExtraClaimMappingExpression deserializedJwtAuthenticatorExtraClaimMappingExpression
                = new JwtAuthenticatorExtraClaimMappingExpression();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedJwtAuthenticatorExtraClaimMappingExpression.key = reader.getString();
                } else if ("valueExpression".equals(fieldName)) {
                    deserializedJwtAuthenticatorExtraClaimMappingExpression.valueExpression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJwtAuthenticatorExtraClaimMappingExpression;
        });
    }
}
