// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * managed cluster properties for snapshot, these properties are read only.
 */
@Fluent
public final class ManagedClusterPropertiesForSnapshot
    implements JsonSerializable<ManagedClusterPropertiesForSnapshot> {
    /*
     * The current kubernetes version.
     */
    private String kubernetesVersion;

    /*
     * The current managed cluster sku.
     */
    private ManagedClusterSku sku;

    /*
     * Whether the cluster has enabled Kubernetes Role-Based Access Control or not.
     */
    private Boolean enableRbac;

    /*
     * The current network profile.
     */
    private NetworkProfileForSnapshot networkProfile;

    /**
     * Creates an instance of ManagedClusterPropertiesForSnapshot class.
     */
    public ManagedClusterPropertiesForSnapshot() {
    }

    /**
     * Get the kubernetesVersion property: The current kubernetes version.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Set the kubernetesVersion property: The current kubernetes version.
     * 
     * @param kubernetesVersion the kubernetesVersion value to set.
     * @return the ManagedClusterPropertiesForSnapshot object itself.
     */
    public ManagedClusterPropertiesForSnapshot withKubernetesVersion(String kubernetesVersion) {
        this.kubernetesVersion = kubernetesVersion;
        return this;
    }

    /**
     * Get the sku property: The current managed cluster sku.
     * 
     * @return the sku value.
     */
    public ManagedClusterSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The current managed cluster sku.
     * 
     * @param sku the sku value to set.
     * @return the ManagedClusterPropertiesForSnapshot object itself.
     */
    public ManagedClusterPropertiesForSnapshot withSku(ManagedClusterSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the enableRbac property: Whether the cluster has enabled Kubernetes Role-Based Access Control or not.
     * 
     * @return the enableRbac value.
     */
    public Boolean enableRbac() {
        return this.enableRbac;
    }

    /**
     * Set the enableRbac property: Whether the cluster has enabled Kubernetes Role-Based Access Control or not.
     * 
     * @param enableRbac the enableRbac value to set.
     * @return the ManagedClusterPropertiesForSnapshot object itself.
     */
    public ManagedClusterPropertiesForSnapshot withEnableRbac(Boolean enableRbac) {
        this.enableRbac = enableRbac;
        return this;
    }

    /**
     * Get the networkProfile property: The current network profile.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfileForSnapshot networkProfile() {
        return this.networkProfile;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kubernetesVersion", this.kubernetesVersion);
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeBooleanField("enableRbac", this.enableRbac);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedClusterPropertiesForSnapshot from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedClusterPropertiesForSnapshot if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedClusterPropertiesForSnapshot.
     */
    public static ManagedClusterPropertiesForSnapshot fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedClusterPropertiesForSnapshot deserializedManagedClusterPropertiesForSnapshot
                = new ManagedClusterPropertiesForSnapshot();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kubernetesVersion".equals(fieldName)) {
                    deserializedManagedClusterPropertiesForSnapshot.kubernetesVersion = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedManagedClusterPropertiesForSnapshot.sku = ManagedClusterSku.fromJson(reader);
                } else if ("enableRbac".equals(fieldName)) {
                    deserializedManagedClusterPropertiesForSnapshot.enableRbac
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedManagedClusterPropertiesForSnapshot.networkProfile
                        = NetworkProfileForSnapshot.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedClusterPropertiesForSnapshot;
        });
    }
}
