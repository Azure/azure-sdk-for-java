// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents server role group configuration value.
 */
@Fluent
public final class ServerRoleGroupConfiguration implements JsonSerializable<ServerRoleGroupConfiguration> {
    /*
     * The role of servers in the server role group.
     */
    private ServerRole role;

    /*
     * Value of the configuration.
     */
    private String value;

    /*
     * Default value of the configuration.
     */
    private String defaultValue;

    /*
     * Source of the configuration.
     */
    private String source;

    /**
     * Creates an instance of ServerRoleGroupConfiguration class.
     */
    public ServerRoleGroupConfiguration() {
    }

    /**
     * Get the role property: The role of servers in the server role group.
     * 
     * @return the role value.
     */
    public ServerRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role of servers in the server role group.
     * 
     * @param role the role value to set.
     * @return the ServerRoleGroupConfiguration object itself.
     */
    public ServerRoleGroupConfiguration withRole(ServerRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the value property: Value of the configuration.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: Value of the configuration.
     * 
     * @param value the value value to set.
     * @return the ServerRoleGroupConfiguration object itself.
     */
    public ServerRoleGroupConfiguration withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the defaultValue property: Default value of the configuration.
     * 
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Get the source property: Source of the configuration.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property role in model ServerRoleGroupConfiguration"));
        }
        if (value() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property value in model ServerRoleGroupConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServerRoleGroupConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerRoleGroupConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerRoleGroupConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServerRoleGroupConfiguration.
     */
    public static ServerRoleGroupConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerRoleGroupConfiguration deserializedServerRoleGroupConfiguration = new ServerRoleGroupConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedServerRoleGroupConfiguration.role = ServerRole.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedServerRoleGroupConfiguration.value = reader.getString();
                } else if ("defaultValue".equals(fieldName)) {
                    deserializedServerRoleGroupConfiguration.defaultValue = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedServerRoleGroupConfiguration.source = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerRoleGroupConfiguration;
        });
    }
}
