// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.ServerProperties;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.ServerRole;
import java.io.IOException;

/**
 * The properties of a server in cluster.
 */
@Fluent
public final class ClusterServerProperties extends ServerProperties {
    /*
     * The fully qualified domain name of a server.
     */
    private String fullyQualifiedDomainName;

    /*
     * The role of server in the cluster.
     */
    private ServerRole role;

    /*
     * A state of a cluster/server that is visible to user.
     */
    private String state;

    /*
     * A state of HA feature for the cluster.
     */
    private String haState;

    /*
     * Availability Zone information of the server.
     */
    private String availabilityZone;

    /*
     * The major PostgreSQL version of server.
     */
    private String postgresqlVersion;

    /*
     * The Citus extension version of server.
     */
    private String citusVersion;

    /*
     * The administrator's login name of the servers in the cluster.
     */
    private String administratorLogin;

    /*
     * If server database is set to read-only by system maintenance depending on high disk space usage.
     */
    private Boolean isReadOnly;

    /*
     * If public access is enabled on server.
     */
    private Boolean enablePublicIpAccess;

    /**
     * Creates an instance of ClusterServerProperties class.
     */
    public ClusterServerProperties() {
    }

    /**
     * Get the fullyQualifiedDomainName property: The fully qualified domain name of a server.
     * 
     * @return the fullyQualifiedDomainName value.
     */
    public String fullyQualifiedDomainName() {
        return this.fullyQualifiedDomainName;
    }

    /**
     * Get the role property: The role of server in the cluster.
     * 
     * @return the role value.
     */
    public ServerRole role() {
        return this.role;
    }

    /**
     * Set the role property: The role of server in the cluster.
     * 
     * @param role the role value to set.
     * @return the ClusterServerProperties object itself.
     */
    public ClusterServerProperties withRole(ServerRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the state property: A state of a cluster/server that is visible to user.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the haState property: A state of HA feature for the cluster.
     * 
     * @return the haState value.
     */
    public String haState() {
        return this.haState;
    }

    /**
     * Get the availabilityZone property: Availability Zone information of the server.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: Availability Zone information of the server.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the ClusterServerProperties object itself.
     */
    public ClusterServerProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the postgresqlVersion property: The major PostgreSQL version of server.
     * 
     * @return the postgresqlVersion value.
     */
    public String postgresqlVersion() {
        return this.postgresqlVersion;
    }

    /**
     * Set the postgresqlVersion property: The major PostgreSQL version of server.
     * 
     * @param postgresqlVersion the postgresqlVersion value to set.
     * @return the ClusterServerProperties object itself.
     */
    public ClusterServerProperties withPostgresqlVersion(String postgresqlVersion) {
        this.postgresqlVersion = postgresqlVersion;
        return this;
    }

    /**
     * Get the citusVersion property: The Citus extension version of server.
     * 
     * @return the citusVersion value.
     */
    public String citusVersion() {
        return this.citusVersion;
    }

    /**
     * Set the citusVersion property: The Citus extension version of server.
     * 
     * @param citusVersion the citusVersion value to set.
     * @return the ClusterServerProperties object itself.
     */
    public ClusterServerProperties withCitusVersion(String citusVersion) {
        this.citusVersion = citusVersion;
        return this;
    }

    /**
     * Get the administratorLogin property: The administrator's login name of the servers in the cluster.
     * 
     * @return the administratorLogin value.
     */
    @Override
    public String administratorLogin() {
        return this.administratorLogin;
    }

    /**
     * Get the isReadOnly property: If server database is set to read-only by system maintenance depending on high disk
     * space usage.
     * 
     * @return the isReadOnly value.
     */
    @Override
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }

    /**
     * Get the enablePublicIpAccess property: If public access is enabled on server.
     * 
     * @return the enablePublicIpAccess value.
     */
    @Override
    public Boolean enablePublicIpAccess() {
        return this.enablePublicIpAccess;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServerProperties withServerEdition(String serverEdition) {
        super.withServerEdition(serverEdition);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServerProperties withStorageQuotaInMb(Integer storageQuotaInMb) {
        super.withStorageQuotaInMb(storageQuotaInMb);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServerProperties withVCores(Integer vCores) {
        super.withVCores(vCores);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClusterServerProperties withEnableHa(Boolean enableHa) {
        super.withEnableHa(enableHa);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverEdition", serverEdition());
        jsonWriter.writeNumberField("storageQuotaInMb", storageQuotaInMb());
        jsonWriter.writeNumberField("vCores", vCores());
        jsonWriter.writeBooleanField("enableHa", enableHa());
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("postgresqlVersion", this.postgresqlVersion);
        jsonWriter.writeStringField("citusVersion", this.citusVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterServerProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterServerProperties.
     */
    public static ClusterServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterServerProperties deserializedClusterServerProperties = new ClusterServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverEdition".equals(fieldName)) {
                    deserializedClusterServerProperties.withServerEdition(reader.getString());
                } else if ("storageQuotaInMb".equals(fieldName)) {
                    deserializedClusterServerProperties.withStorageQuotaInMb(reader.getNullable(JsonReader::getInt));
                } else if ("vCores".equals(fieldName)) {
                    deserializedClusterServerProperties.withVCores(reader.getNullable(JsonReader::getInt));
                } else if ("enableHa".equals(fieldName)) {
                    deserializedClusterServerProperties.withEnableHa(reader.getNullable(JsonReader::getBoolean));
                } else if ("enablePublicIpAccess".equals(fieldName)) {
                    deserializedClusterServerProperties.enablePublicIpAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isReadOnly".equals(fieldName)) {
                    deserializedClusterServerProperties.isReadOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("administratorLogin".equals(fieldName)) {
                    deserializedClusterServerProperties.administratorLogin = reader.getString();
                } else if ("fullyQualifiedDomainName".equals(fieldName)) {
                    deserializedClusterServerProperties.fullyQualifiedDomainName = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedClusterServerProperties.role = ServerRole.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedClusterServerProperties.state = reader.getString();
                } else if ("haState".equals(fieldName)) {
                    deserializedClusterServerProperties.haState = reader.getString();
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedClusterServerProperties.availabilityZone = reader.getString();
                } else if ("postgresqlVersion".equals(fieldName)) {
                    deserializedClusterServerProperties.postgresqlVersion = reader.getString();
                } else if ("citusVersion".equals(fieldName)) {
                    deserializedClusterServerProperties.citusVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterServerProperties;
        });
    }
}
