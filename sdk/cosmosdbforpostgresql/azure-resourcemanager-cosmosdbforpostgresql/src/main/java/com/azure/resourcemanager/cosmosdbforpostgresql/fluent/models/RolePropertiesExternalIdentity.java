// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.PrincipalType;
import java.io.IOException;

/**
 * The RolePropertiesExternalIdentity model.
 */
@Fluent
public final class RolePropertiesExternalIdentity implements JsonSerializable<RolePropertiesExternalIdentity> {
    /*
     * The objectId property.
     */
    private String objectId;

    /*
     * The principalType property.
     */
    private PrincipalType principalType;

    /*
     * The tenantId property.
     */
    private String tenantId;

    /**
     * Creates an instance of RolePropertiesExternalIdentity class.
     */
    public RolePropertiesExternalIdentity() {
    }

    /**
     * Get the objectId property: The objectId property.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: The objectId property.
     * 
     * @param objectId the objectId value to set.
     * @return the RolePropertiesExternalIdentity object itself.
     */
    public RolePropertiesExternalIdentity withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the principalType property: The principalType property.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: The principalType property.
     * 
     * @param principalType the principalType value to set.
     * @return the RolePropertiesExternalIdentity object itself.
     */
    public RolePropertiesExternalIdentity withPrincipalType(PrincipalType principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * Get the tenantId property: The tenantId property.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenantId property.
     * 
     * @param tenantId the tenantId value to set.
     * @return the RolePropertiesExternalIdentity object itself.
     */
    public RolePropertiesExternalIdentity withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (objectId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property objectId in model RolePropertiesExternalIdentity"));
        }
        if (principalType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property principalType in model RolePropertiesExternalIdentity"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RolePropertiesExternalIdentity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("principalType", this.principalType == null ? null : this.principalType.toString());
        jsonWriter.writeStringField("tenantId", this.tenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RolePropertiesExternalIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RolePropertiesExternalIdentity if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RolePropertiesExternalIdentity.
     */
    public static RolePropertiesExternalIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RolePropertiesExternalIdentity deserializedRolePropertiesExternalIdentity
                = new RolePropertiesExternalIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectId".equals(fieldName)) {
                    deserializedRolePropertiesExternalIdentity.objectId = reader.getString();
                } else if ("principalType".equals(fieldName)) {
                    deserializedRolePropertiesExternalIdentity.principalType
                        = PrincipalType.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedRolePropertiesExternalIdentity.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRolePropertiesExternalIdentity;
        });
    }
}
