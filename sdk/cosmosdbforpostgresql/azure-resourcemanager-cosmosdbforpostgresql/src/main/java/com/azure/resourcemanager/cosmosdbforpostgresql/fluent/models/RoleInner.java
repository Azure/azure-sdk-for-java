// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.PrincipalType;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.ProvisioningState;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.RoleType;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents a cluster role.
 */
@Fluent
public final class RoleInner extends ProxyResource {
    /*
     * The properties of a role.
     */
    @JsonProperty(value = "properties", required = true)
    private RoleProperties innerProperties = new RoleProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of RoleInner class.
     */
    public RoleInner() {
    }

    /**
     * Get the innerProperties property: The properties of a role.
     * 
     * @return the innerProperties value.
     */
    private RoleProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the roleType property: The roleType property.
     * 
     * @return the roleType value.
     */
    public RoleType roleType() {
        return this.innerProperties() == null ? null : this.innerProperties().roleType();
    }

    /**
     * Set the roleType property: The roleType property.
     * 
     * @param roleType the roleType value to set.
     * @return the RoleInner object itself.
     */
    public RoleInner withRoleType(RoleType roleType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RoleProperties();
        }
        this.innerProperties().withRoleType(roleType);
        return this;
    }

    /**
     * Get the password property: The password of the cluster role. If an identity is used, password will not be
     * required.
     * 
     * @return the password value.
     */
    public String password() {
        return this.innerProperties() == null ? null : this.innerProperties().password();
    }

    /**
     * Set the password property: The password of the cluster role. If an identity is used, password will not be
     * required.
     * 
     * @param password the password value to set.
     * @return the RoleInner object itself.
     */
    public RoleInner withPassword(String password) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RoleProperties();
        }
        this.innerProperties().withPassword(password);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the role.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the objectId property: The objectId property.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.innerProperties() == null ? null : this.innerProperties().objectId();
    }

    /**
     * Set the objectId property: The objectId property.
     * 
     * @param objectId the objectId value to set.
     * @return the RoleInner object itself.
     */
    public RoleInner withObjectId(String objectId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RoleProperties();
        }
        this.innerProperties().withObjectId(objectId);
        return this;
    }

    /**
     * Get the principalType property: The principalType property.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.innerProperties() == null ? null : this.innerProperties().principalType();
    }

    /**
     * Set the principalType property: The principalType property.
     * 
     * @param principalType the principalType value to set.
     * @return the RoleInner object itself.
     */
    public RoleInner withPrincipalType(PrincipalType principalType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RoleProperties();
        }
        this.innerProperties().withPrincipalType(principalType);
        return this;
    }

    /**
     * Get the tenantId property: The tenantId property.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The tenantId property.
     * 
     * @param tenantId the tenantId value to set.
     * @return the RoleInner object itself.
     */
    public RoleInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RoleProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property innerProperties in model RoleInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RoleInner.class);
}
