// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cosmosdbforpostgresql.CosmosDBForPostgreSqlManager;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.Configuration;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.ServerRole;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConfigurationsListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"bjf\",\"dataType\":\"Boolean\",\"allowedValues\":\"sotftpvj\",\"requiresRestart\":true,\"serverRoleGroupConfigurations\":[{\"role\":\"Worker\",\"value\":\"l\",\"defaultValue\":\"nfqqnvwp\",\"source\":\"taruoujmkcj\"},{\"role\":\"Worker\",\"value\":\"qytjrybnwjewgd\",\"defaultValue\":\"ervnaenqpehi\",\"source\":\"oygmift\"}],\"provisioningState\":\"Canceled\"},\"id\":\"ndslgnayqigynduh\",\"name\":\"vhqlkthumaqo\",\"type\":\"bgycduiertgccym\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CosmosDBForPostgreSqlManager manager = CosmosDBForPostgreSqlManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Configuration> response
            = manager.configurations().listByCluster("gjb", "rxbpyb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(true, response.iterator().next().requiresRestart());
        Assertions.assertEquals(ServerRole.WORKER,
            response.iterator().next().serverRoleGroupConfigurations().get(0).role());
        Assertions.assertEquals("l", response.iterator().next().serverRoleGroupConfigurations().get(0).value());
    }
}
