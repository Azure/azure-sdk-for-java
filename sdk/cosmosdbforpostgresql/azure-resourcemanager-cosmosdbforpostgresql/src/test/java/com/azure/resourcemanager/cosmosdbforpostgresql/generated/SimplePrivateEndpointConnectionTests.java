// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.PrivateEndpointProperty;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.SimplePrivateEndpointConnection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SimplePrivateEndpointConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SimplePrivateEndpointConnection model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpoint\":{\"id\":\"cqqjnqglhqgn\"},\"groupIds\":[\"oo\",\"ywifsqesaag\",\"f\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"hjxri\",\"actionsRequired\":\"wmrvktsizntocipa\"}},\"id\":\"ajpsquc\",\"name\":\"poyfdkfogkn\",\"type\":\"gjofjd\"}")
            .toObject(SimplePrivateEndpointConnection.class);
        Assertions.assertEquals("cqqjnqglhqgn", model.privateEndpoint().id());
        Assertions.assertEquals("oo", model.groupIds().get(0));
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("hjxri", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("wmrvktsizntocipa", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SimplePrivateEndpointConnection model = new SimplePrivateEndpointConnection()
            .withPrivateEndpoint(new PrivateEndpointProperty().withId("cqqjnqglhqgn"))
            .withGroupIds(Arrays.asList("oo", "ywifsqesaag", "f"))
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.REJECTED)
                    .withDescription("hjxri")
                    .withActionsRequired("wmrvktsizntocipa"));
        model = BinaryData.fromObject(model).toObject(SimplePrivateEndpointConnection.class);
        Assertions.assertEquals("cqqjnqglhqgn", model.privateEndpoint().id());
        Assertions.assertEquals("oo", model.groupIds().get(0));
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("hjxri", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("wmrvktsizntocipa", model.privateLinkServiceConnectionState().actionsRequired());
    }
}
