// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbforpostgresql.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.IdentityProperties;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.IdentityType;
import com.azure.resourcemanager.cosmosdbforpostgresql.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IdentityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IdentityProperties model = BinaryData.fromString(
            "{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"zsymglzufcyzkohd\":{\"principalId\":\"2d7f363c-d993-43d8-af24-801f9d1be9c3\",\"clientId\":\"4a809164-5b95-4d84-a1e6-e4ab41099c8c\"},\"anufhfcbjysag\":{\"principalId\":\"8904d10c-5ad9-4e84-bf22-f5000bcbfb1e\",\"clientId\":\"e53ed03b-7950-4eda-9cf4-2343db98b976\"},\"xqhabi\":{\"principalId\":\"0654cab7-2e8b-415e-8c47-68ea64dc088c\",\"clientId\":\"fcdd3f4d-d7f2-4283-8986-221d4fcae048\"},\"kxwczbyscnpqxuhi\":{\"principalId\":\"e858815f-a37d-4742-bbe3-2ca083415df1\",\"clientId\":\"d9195d3a-254f-49ea-91a8-ce4b8eef8c59\"}}}")
            .toObject(IdentityProperties.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IdentityProperties model = new IdentityProperties().withType(IdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("zsymglzufcyzkohd", new UserAssignedIdentity(), "anufhfcbjysag", new UserAssignedIdentity(),
                    "xqhabi", new UserAssignedIdentity(), "kxwczbyscnpqxuhi", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(IdentityProperties.class);
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
