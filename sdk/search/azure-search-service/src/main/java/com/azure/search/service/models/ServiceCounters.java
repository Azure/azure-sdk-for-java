/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents service-level resource counters and quotas.
 */
public class ServiceCounters {
    /**
     * Total number of documents across all indexes in the service.
     */
    @JsonProperty(value = "documentCount")
    private ResourceCounter documentCounter;

    /**
     * Total number of indexes.
     */
    @JsonProperty(value = "indexesCount")
    private ResourceCounter indexCounter;

    /**
     * Total number of indexers.
     */
    @JsonProperty(value = "indexersCount")
    private ResourceCounter indexerCounter;

    /**
     * Total number of data sources.
     */
    @JsonProperty(value = "dataSourcesCount")
    private ResourceCounter dataSourceCounter;

    /**
     * Total size of used storage in bytes.
     */
    @JsonProperty(value = "storageSize")
    private ResourceCounter storageSizeCounter;

    /**
     * Total number of synonym maps.
     */
    @JsonProperty(value = "synonymMaps")
    private ResourceCounter synonymMapCounter;

    /**
     * Get total number of documents across all indexes in the service.
     *
     * @return the documentCounter value
     */
    public ResourceCounter documentCounter() {
        return this.documentCounter;
    }

    /**
     * Set total number of documents across all indexes in the service.
     *
     * @param documentCounter the documentCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withDocumentCounter(ResourceCounter documentCounter) {
        this.documentCounter = documentCounter;
        return this;
    }

    /**
     * Get total number of indexes.
     *
     * @return the indexCounter value
     */
    public ResourceCounter indexCounter() {
        return this.indexCounter;
    }

    /**
     * Set total number of indexes.
     *
     * @param indexCounter the indexCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withIndexCounter(ResourceCounter indexCounter) {
        this.indexCounter = indexCounter;
        return this;
    }

    /**
     * Get total number of indexers.
     *
     * @return the indexerCounter value
     */
    public ResourceCounter indexerCounter() {
        return this.indexerCounter;
    }

    /**
     * Set total number of indexers.
     *
     * @param indexerCounter the indexerCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withIndexerCounter(ResourceCounter indexerCounter) {
        this.indexerCounter = indexerCounter;
        return this;
    }

    /**
     * Get total number of data sources.
     *
     * @return the dataSourceCounter value
     */
    public ResourceCounter dataSourceCounter() {
        return this.dataSourceCounter;
    }

    /**
     * Set total number of data sources.
     *
     * @param dataSourceCounter the dataSourceCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withDataSourceCounter(ResourceCounter dataSourceCounter) {
        this.dataSourceCounter = dataSourceCounter;
        return this;
    }

    /**
     * Get total size of used storage in bytes.
     *
     * @return the storageSizeCounter value
     */
    public ResourceCounter storageSizeCounter() {
        return this.storageSizeCounter;
    }

    /**
     * Set total size of used storage in bytes.
     *
     * @param storageSizeCounter the storageSizeCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withStorageSizeCounter(ResourceCounter storageSizeCounter) {
        this.storageSizeCounter = storageSizeCounter;
        return this;
    }

    /**
     * Get total number of synonym maps.
     *
     * @return the synonymMapCounter value
     */
    public ResourceCounter synonymMapCounter() {
        return this.synonymMapCounter;
    }

    /**
     * Set total number of synonym maps.
     *
     * @param synonymMapCounter the synonymMapCounter value to set
     * @return the ServiceCounters object itself.
     */
    public ServiceCounters withSynonymMapCounter(ResourceCounter synonymMapCounter) {
        this.synonymMapCounter = synonymMapCounter;
        return this;
    }

}
