/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Divides text using language-specific rules and reduces words to their base
 * forms.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer")
public class MicrosoftLanguageStemmingTokenizer extends Tokenizer {
    /**
     * The maximum token length. Tokens longer than the maximum length are
     * split. Maximum token length that can be used is 300 characters. Tokens
     * longer than 300 characters are first split into tokens of length 300 and
     * then each of those tokens is split based on the max token length set.
     * Default is 255.
     */
    @JsonProperty(value = "maxTokenLength")
    private Integer maxTokenLength;

    /**
     * A value indicating how the tokenizer is used. Set to true if used as the
     * search tokenizer, set to false if used as the indexing tokenizer.
     * Default is false.
     */
    @JsonProperty(value = "isSearchTokenizer")
    private Boolean isSearchTokenizer;

    /**
     * The language to use. The default is English. Possible values include:
     * 'arabic', 'bangla', 'bulgarian', 'catalan', 'croatian', 'czech',
     * 'danish', 'dutch', 'english', 'estonian', 'finnish', 'french', 'german',
     * 'greek', 'gujarati', 'hebrew', 'hindi', 'hungarian', 'icelandic',
     * 'indonesian', 'italian', 'kannada', 'latvian', 'lithuanian', 'malay',
     * 'malayalam', 'marathi', 'norwegianBokmaal', 'polish', 'portuguese',
     * 'portugueseBrazilian', 'punjabi', 'romanian', 'russian',
     * 'serbianCyrillic', 'serbianLatin', 'slovak', 'slovenian', 'spanish',
     * 'swedish', 'tamil', 'telugu', 'turkish', 'ukrainian', 'urdu'.
     */
    @JsonProperty(value = "language")
    private MicrosoftStemmingTokenizerLanguage language;

    /**
     * Get the maximum token length. Tokens longer than the maximum length are split. Maximum token length that can
     * be used is 300 characters. Tokens longer than 300 characters are first split into tokens of length 300 and
     * then each of those tokens is split based on the max token length set. Default is 255.
     *
     * @return the maxTokenLength value
     */
    public Integer maxTokenLength() {
        return this.maxTokenLength;
    }

    /**
     * Set the maximum token length. Tokens longer than the maximum length are split. Maximum token length that can
     * be used is 300 characters. Tokens longer than 300 characters are first split into tokens of length 300 and
     * then each of those tokens is split based on the max token length set. Default is 255.
     *
     * @param maxTokenLength the maxTokenLength value to set
     * @return the MicrosoftLanguageStemmingTokenizer object itself.
     */
    public MicrosoftLanguageStemmingTokenizer withMaxTokenLength(Integer maxTokenLength) {
        this.maxTokenLength = maxTokenLength;
        return this;
    }

    /**
     * Get a value indicating how the tokenizer is used. Set to true if used as the search tokenizer, set to false if
     * used as the indexing tokenizer. Default is false.
     *
     * @return the isSearchTokenizer value
     */
    public Boolean isSearchTokenizer() {
        return this.isSearchTokenizer;
    }

    /**
     * Set a value indicating how the tokenizer is used. Set to true if used as the search tokenizer, set to false if
     * used as the indexing tokenizer. Default is false.
     *
     * @param isSearchTokenizer the isSearchTokenizer value to set
     * @return the MicrosoftLanguageStemmingTokenizer object itself.
     */
    public MicrosoftLanguageStemmingTokenizer withIsSearchTokenizer(Boolean isSearchTokenizer) {
        this.isSearchTokenizer = isSearchTokenizer;
        return this;
    }

    /**
     * Get the language to use. The default is English. Possible values include: 'arabic', 'bangla', 'bulgarian',
     * 'catalan', 'croatian', 'czech', 'danish', 'dutch', 'english', 'estonian', 'finnish', 'french', 'german',
     * 'greek', 'gujarati', 'hebrew', 'hindi', 'hungarian', 'icelandic', 'indonesian', 'italian', 'kannada',
     * 'latvian', 'lithuanian', 'malay', 'malayalam', 'marathi', 'norwegianBokmaal', 'polish', 'portuguese',
     * 'portugueseBrazilian', 'punjabi', 'romanian', 'russian', 'serbianCyrillic', 'serbianLatin', 'slovak',
     * 'slovenian', 'spanish', 'swedish', 'tamil', 'telugu', 'turkish', 'ukrainian', 'urdu'.
     *
     * @return the language value
     */
    public MicrosoftStemmingTokenizerLanguage language() {
        return this.language;
    }

    /**
     * Set the language to use. The default is English. Possible values include: 'arabic', 'bangla', 'bulgarian',
     * 'catalan', 'croatian', 'czech', 'danish', 'dutch', 'english', 'estonian', 'finnish', 'french', 'german',
     * 'greek', 'gujarati', 'hebrew', 'hindi', 'hungarian', 'icelandic', 'indonesian', 'italian', 'kannada',
     * 'latvian', 'lithuanian', 'malay', 'malayalam', 'marathi', 'norwegianBokmaal', 'polish', 'portuguese',
     * 'portugueseBrazilian', 'punjabi', 'romanian', 'russian', 'serbianCyrillic', 'serbianLatin', 'slovak',
     * 'slovenian', 'spanish', 'swedish', 'tamil', 'telugu', 'turkish', 'ukrainian', 'urdu'.
     *
     * @param language the language value to set
     * @return the MicrosoftLanguageStemmingTokenizer object itself.
     */
    public MicrosoftLanguageStemmingTokenizer withLanguage(MicrosoftStemmingTokenizerLanguage language) {
        this.language = language;
        return this;
    }

}
