/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.implementation;

import com.azure.search.service.Indexers;
import com.azure.search.service.models.*;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.*;
import rx.Observable;
import rx.functions.Func1;

import java.io.IOException;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined
 * in Indexers.
 */
public class IndexersImpl implements Indexers {
    /**
     * The Retrofit service to perform REST calls.
     */
    private IndexersService service;
    /**
     * The service client containing this operation class.
     */
    private SearchServiceClientImpl client;

    /**
     * Initializes an instance of IndexersImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public IndexersImpl(Retrofit retrofit, SearchServiceClientImpl client) {
        this.service = retrofit.create(IndexersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Indexers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface IndexersService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers reset"})
        @POST("indexers('{indexerName}')/search.reset")
        Observable<Response<ResponseBody>> reset(
            @Path("indexerName") String indexerName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers run"})
        @POST("indexers('{indexerName}')/search.run")
        Observable<Response<ResponseBody>> run(
            @Path("indexerName") String indexerName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers createOrUpdate"})
        @PUT("indexers('{indexerName}')")
        Observable<Response<ResponseBody>> createOrUpdate(
            @Path("indexerName") String indexerName, @Body Indexer indexer, @Header("Prefer") String prefer,
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId, @Header("If-Match") String ifMatch,
            @Header("If-None-Match") String ifNoneMatch, @Header("x-ms-parameterized-host") String parameterizedHost,
            @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers delete"})
        @HTTP(path = "indexers('{indexerName}')", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(
            @Path("indexerName") String indexerName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers get"})
        @GET("indexers('{indexerName}')")
        Observable<Response<ResponseBody>> get(
            @Path("indexerName") String indexerName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers list"})
        @GET("indexers")
        Observable<Response<ResponseBody>> list(
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers create"})
        @POST("indexers")
        Observable<Response<ResponseBody>> create(
            @Body Indexer indexer, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".Indexers getStatus"})
        @GET("indexers('{indexerName}')/search.status")
        Observable<Response<ResponseBody>> getStatus(
            @Path("indexerName") String indexerName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void reset(String indexerName) {
        resetWithServiceResponseAsync(indexerName).toBlocking().single().body();
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName     The name of the indexer to reset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> resetAsync(String indexerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resetWithServiceResponseAsync(indexerName), serviceCallback);
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> resetAsync(String indexerName) {
        return resetWithServiceResponseAsync(indexerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to reset.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> resetWithServiceResponseAsync(String indexerName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.reset(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = resetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void reset(String indexerName, SearchRequestOptions searchRequestOptions) {
        resetWithServiceResponseAsync(indexerName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> resetAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture
            .fromResponse(resetWithServiceResponseAsync(indexerName, searchRequestOptions), serviceCallback);
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> resetAsync(String indexerName, SearchRequestOptions searchRequestOptions) {
        return resetWithServiceResponseAsync(indexerName, searchRequestOptions)
            .map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
    }

    /**
     * Resets the change tracking state associated with an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to reset.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> resetWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.reset(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = resetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> resetDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(204, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void run(String indexerName) {
        runWithServiceResponseAsync(indexerName).toBlocking().single().body();
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName     The name of the indexer to run.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> runAsync(String indexerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(runWithServiceResponseAsync(indexerName), serviceCallback);
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> runAsync(String indexerName) {
        return runWithServiceResponseAsync(indexerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName The name of the indexer to run.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> runWithServiceResponseAsync(String indexerName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.run(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = runDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void run(String indexerName, SearchRequestOptions searchRequestOptions) {
        runWithServiceResponseAsync(indexerName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> runAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture
            .fromResponse(runWithServiceResponseAsync(indexerName, searchRequestOptions), serviceCallback);
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> runAsync(String indexerName, SearchRequestOptions searchRequestOptions) {
        return runWithServiceResponseAsync(indexerName, searchRequestOptions)
            .map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
    }

    /**
     * Runs an Azure Search indexer on-demand.
     *
     * @param indexerName          The name of the indexer to run.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> runWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.run(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = runDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> runDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(202, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer createOrUpdate(String indexerName, Indexer indexer) {
        return createOrUpdateWithServiceResponseAsync(indexerName, indexer).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName     The name of the indexer to create or update.
     * @param indexer         The definition of the indexer to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture
            .fromResponse(createOrUpdateWithServiceResponseAsync(indexerName, indexer), serviceCallback);
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> createOrUpdateAsync(String indexerName, Indexer indexer) {
        return createOrUpdateWithServiceResponseAsync(indexerName, indexer)
            .map(new Func1<ServiceResponse<Indexer>, Indexer>() {
                @Override
                public Indexer call(ServiceResponse<Indexer> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName The name of the indexer to create or update.
     * @param indexer     The definition of the indexer to create or update.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> createOrUpdateWithServiceResponseAsync(
        String indexerName, Indexer indexer) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (indexer == null) {
            throw new IllegalArgumentException("Parameter indexer is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(indexer);
        final String prefer = "return=representation";
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(indexerName, indexer, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer createOrUpdate(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(indexerName, indexer, searchRequestOptions, accessCondition)
            .toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture.fromResponse(
            createOrUpdateWithServiceResponseAsync(indexerName, indexer, searchRequestOptions, accessCondition),
            serviceCallback);
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> createOrUpdateAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(indexerName, indexer, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<Indexer>, Indexer>() {
                @Override
                public Indexer call(ServiceResponse<Indexer> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search indexer or updates an indexer if it already exists.
     *
     * @param indexerName          The name of the indexer to create or update.
     * @param indexer              The definition of the indexer to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> createOrUpdateWithServiceResponseAsync(
        String indexerName, Indexer indexer, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (indexer == null) {
            throw new IllegalArgumentException("Parameter indexer is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(indexer);
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        final String prefer = "return=representation";
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(indexerName, indexer, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Indexer> createOrUpdateDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Indexer, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<Indexer>() {
            }.getType())
            .register(201, new TypeToken<Indexer>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String indexerName) {
        deleteWithServiceResponseAsync(indexerName).toBlocking().single().body();
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName     The name of the indexer to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(String indexerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(indexerName), serviceCallback);
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(String indexerName) {
        return deleteWithServiceResponseAsync(indexerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName The name of the indexer to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String indexerName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        deleteWithServiceResponseAsync(indexerName, searchRequestOptions, accessCondition).toBlocking().single().body();
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture
            .fromResponse(
                deleteWithServiceResponseAsync(indexerName, searchRequestOptions, accessCondition),
                serviceCallback);
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        return deleteWithServiceResponseAsync(indexerName, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
    }

    /**
     * Deletes an Azure Search indexer.
     *
     * @param indexerName          The name of the indexer to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(204, new TypeToken<Void>() {
            }.getType())
            .register(404, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer get(String indexerName) {
        return getWithServiceResponseAsync(indexerName).toBlocking().single().body();
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName     The name of the indexer to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> getAsync(String indexerName, final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(indexerName), serviceCallback);
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> getAsync(String indexerName) {
        return getWithServiceResponseAsync(indexerName).map(new Func1<ServiceResponse<Indexer>, Indexer>() {
            @Override
            public Indexer call(ServiceResponse<Indexer> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName The name of the indexer to retrieve.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> getWithServiceResponseAsync(String indexerName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer get(String indexerName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(indexerName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> getAsync(
        String indexerName, SearchRequestOptions searchRequestOptions, final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture
            .fromResponse(getWithServiceResponseAsync(indexerName, searchRequestOptions), serviceCallback);
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> getAsync(String indexerName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(indexerName, searchRequestOptions)
            .map(new Func1<ServiceResponse<Indexer>, Indexer>() {
                @Override
                public Indexer call(ServiceResponse<Indexer> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves an indexer definition from Azure Search.
     *
     * @param indexerName          The name of the indexer to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> getWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Indexer> getDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Indexer, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<Indexer>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the IndexerListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public IndexerListResult list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<IndexerListResult> listAsync(final ServiceCallback<IndexerListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<IndexerListResult> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<IndexerListResult>, IndexerListResult>() {
            @Override
            public IndexerListResult call(ServiceResponse<IndexerListResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<IndexerListResult>> listWithServiceResponseAsync() {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndexerListResult>>>() {
                @Override
                public Observable<ServiceResponse<IndexerListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndexerListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexerListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public IndexerListResult list(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<IndexerListResult> listAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<IndexerListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(searchRequestOptions), serviceCallback);
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<IndexerListResult> listAsync(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions)
            .map(new Func1<ServiceResponse<IndexerListResult>, IndexerListResult>() {
                @Override
                public IndexerListResult call(ServiceResponse<IndexerListResult> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all indexers available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<IndexerListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndexerListResult>>>() {
                @Override
                public Observable<ServiceResponse<IndexerListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndexerListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IndexerListResult> listDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IndexerListResult, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<IndexerListResult>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer create(Indexer indexer) {
        return createWithServiceResponseAsync(indexer).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer         The definition of the indexer to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> createAsync(Indexer indexer, final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(indexer), serviceCallback);
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> createAsync(Indexer indexer) {
        return createWithServiceResponseAsync(indexer).map(new Func1<ServiceResponse<Indexer>, Indexer>() {
            @Override
            public Indexer call(ServiceResponse<Indexer> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer The definition of the indexer to create.
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> createWithServiceResponseAsync(Indexer indexer) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexer == null) {
            throw new IllegalArgumentException("Parameter indexer is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(indexer);
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .create(indexer, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
                this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the Indexer object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public Indexer create(Indexer indexer, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(indexer, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Indexer> createAsync(
        Indexer indexer, SearchRequestOptions searchRequestOptions, final ServiceCallback<Indexer> serviceCallback) {
        return ServiceFuture
            .fromResponse(createWithServiceResponseAsync(indexer, searchRequestOptions), serviceCallback);
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Indexer> createAsync(Indexer indexer, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(indexer, searchRequestOptions)
            .map(new Func1<ServiceResponse<Indexer>, Indexer>() {
                @Override
                public Indexer call(ServiceResponse<Indexer> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search indexer.
     *
     * @param indexer              The definition of the indexer to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the Indexer object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Indexer>> createWithServiceResponseAsync(
        Indexer indexer, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexer == null) {
            throw new IllegalArgumentException("Parameter indexer is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(indexer);
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .create(indexer, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
                this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Indexer>>>() {
                @Override
                public Observable<ServiceResponse<Indexer>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Indexer> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Indexer> createDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Indexer, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(201, new TypeToken<Indexer>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the IndexerExecutionInfo object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public IndexerExecutionInfo getStatus(String indexerName) {
        return getStatusWithServiceResponseAsync(indexerName).toBlocking().single().body();
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName     The name of the indexer for which to retrieve status.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<IndexerExecutionInfo> getStatusAsync(
        String indexerName, final ServiceCallback<IndexerExecutionInfo> serviceCallback) {
        return ServiceFuture.fromResponse(getStatusWithServiceResponseAsync(indexerName), serviceCallback);
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<IndexerExecutionInfo> getStatusAsync(String indexerName) {
        return getStatusWithServiceResponseAsync(indexerName)
            .map(new Func1<ServiceResponse<IndexerExecutionInfo>, IndexerExecutionInfo>() {
                @Override
                public IndexerExecutionInfo call(ServiceResponse<IndexerExecutionInfo> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName The name of the indexer for which to retrieve status.
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<IndexerExecutionInfo>> getStatusWithServiceResponseAsync(String indexerName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.getStatus(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndexerExecutionInfo>>>() {
                @Override
                public Observable<ServiceResponse<IndexerExecutionInfo>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndexerExecutionInfo> clientResponse = getStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the IndexerExecutionInfo object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public IndexerExecutionInfo getStatus(String indexerName, SearchRequestOptions searchRequestOptions) {
        return getStatusWithServiceResponseAsync(indexerName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<IndexerExecutionInfo> getStatusAsync(
        String indexerName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<IndexerExecutionInfo> serviceCallback) {
        return ServiceFuture
            .fromResponse(getStatusWithServiceResponseAsync(indexerName, searchRequestOptions), serviceCallback);
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<IndexerExecutionInfo> getStatusAsync(
        String indexerName, SearchRequestOptions searchRequestOptions) {
        return getStatusWithServiceResponseAsync(indexerName, searchRequestOptions)
            .map(new Func1<ServiceResponse<IndexerExecutionInfo>, IndexerExecutionInfo>() {
                @Override
                public IndexerExecutionInfo call(ServiceResponse<IndexerExecutionInfo> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns the current status and execution history of an indexer.
     *
     * @param indexerName          The name of the indexer for which to retrieve status.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the IndexerExecutionInfo object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<IndexerExecutionInfo>> getStatusWithServiceResponseAsync(
        String indexerName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (indexerName == null) {
            throw new IllegalArgumentException("Parameter indexerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.getStatus(indexerName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndexerExecutionInfo>>>() {
                @Override
                public Observable<ServiceResponse<IndexerExecutionInfo>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndexerExecutionInfo> clientResponse = getStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IndexerExecutionInfo> getStatusDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IndexerExecutionInfo, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<IndexerExecutionInfo>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

}
