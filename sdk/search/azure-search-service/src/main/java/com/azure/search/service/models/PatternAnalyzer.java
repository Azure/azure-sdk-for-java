/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.List;

/**
 * Flexibly separates text into terms via a regular expression pattern. This
 * analyzer is implemented using Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.PatternAnalyzer")
public class PatternAnalyzer extends Analyzer {
    /**
     * A value indicating whether terms should be lower-cased. Default is true.
     */
    @JsonProperty(value = "lowercase")
    private Boolean lowerCaseTerms;

    /**
     * A regular expression pattern to match token separators. Default is an
     * expression that matches one or more whitespace characters.
     */
    @JsonProperty(value = "pattern")
    private String pattern;

    /**
     * Regular expression flags. Possible values include: 'CANON_EQ',
     * 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL', 'LITERAL', 'MULTILINE',
     * 'UNICODE_CASE', 'UNIX_LINES'.
     */
    @JsonProperty(value = "flags")
    private RegexFlags flags;

    /**
     * A list of stopwords.
     */
    @JsonProperty(value = "stopwords")
    private List<String> stopwords;

    /**
     * Get a value indicating whether terms should be lower-cased. Default is true.
     *
     * @return the lowerCaseTerms value
     */
    public Boolean lowerCaseTerms() {
        return this.lowerCaseTerms;
    }

    /**
     * Set a value indicating whether terms should be lower-cased. Default is true.
     *
     * @param lowerCaseTerms the lowerCaseTerms value to set
     * @return the PatternAnalyzer object itself.
     */
    public PatternAnalyzer withLowerCaseTerms(Boolean lowerCaseTerms) {
        this.lowerCaseTerms = lowerCaseTerms;
        return this;
    }

    /**
     * Get a regular expression pattern to match token separators. Default is an expression that matches one or more
     * whitespace characters.
     *
     * @return the pattern value
     */
    public String pattern() {
        return this.pattern;
    }

    /**
     * Set a regular expression pattern to match token separators. Default is an expression that matches one or more
     * whitespace characters.
     *
     * @param pattern the pattern value to set
     * @return the PatternAnalyzer object itself.
     */
    public PatternAnalyzer withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL',
     * 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'.
     *
     * @return the flags value
     */
    public RegexFlags flags() {
        return this.flags;
    }

    /**
     * Set regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL',
     * 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'.
     *
     * @param flags the flags value to set
     * @return the PatternAnalyzer object itself.
     */
    public PatternAnalyzer withFlags(RegexFlags flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get a list of stopwords.
     *
     * @return the stopwords value
     */
    public List<String> stopwords() {
        return this.stopwords;
    }

    /**
     * Set a list of stopwords.
     *
     * @param stopwords the stopwords value to set
     * @return the PatternAnalyzer object itself.
     */
    public PatternAnalyzer withStopwords(List<String> stopwords) {
        this.stopwords = stopwords;
        return this;
    }

}
