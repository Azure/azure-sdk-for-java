/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service;

import com.azure.search.service.models.AccessCondition;
import com.azure.search.service.models.DataSource;
import com.azure.search.service.models.DataSourceListResult;
import com.azure.search.service.models.SearchRequestOptions;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DataSources.
 */
public interface DataSources {
    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource createOrUpdate(String dataSourceName, DataSource dataSource);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName  The name of the datasource to create or update.
     * @param dataSource      The definition of the datasource to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, final ServiceCallback<DataSource> serviceCallback);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> createOrUpdateAsync(String dataSourceName, DataSource dataSource);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName The name of the datasource to create or update.
     * @param dataSource     The definition of the datasource to create or update.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> createOrUpdateWithServiceResponseAsync(
        String dataSourceName, DataSource dataSource);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource createOrUpdate(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition, final ServiceCallback<DataSource> serviceCallback);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> createOrUpdateAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Creates a new Azure Search datasource or updates a datasource if it already exists.
     *
     * @param dataSourceName       The name of the datasource to create or update.
     * @param dataSource           The definition of the datasource to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> createOrUpdateWithServiceResponseAsync(
        String dataSourceName, DataSource dataSource, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String dataSourceName);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName  The name of the datasource to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(String dataSourceName, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(String dataSourceName);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName The name of the datasource to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String dataSourceName);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<Void> deleteAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<Void> deleteAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Deletes an Azure Search datasource.
     *
     * @param dataSourceName       The name of the datasource to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource get(String dataSourceName);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName  The name of the datasource to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> getAsync(String dataSourceName, final ServiceCallback<DataSource> serviceCallback);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> getAsync(String dataSourceName);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName The name of the datasource to retrieve.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> getWithServiceResponseAsync(String dataSourceName);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource get(String dataSourceName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> getAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<DataSource> serviceCallback);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> getAsync(String dataSourceName, SearchRequestOptions searchRequestOptions);

    /**
     * Retrieves a datasource definition from Azure Search.
     *
     * @param dataSourceName       The name of the datasource to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> getWithServiceResponseAsync(
        String dataSourceName, SearchRequestOptions searchRequestOptions);

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the DataSourceListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSourceListResult list();

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSourceListResult> listAsync(final ServiceCallback<DataSourceListResult> serviceCallback);

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSourceListResult> listAsync();

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSourceListResult>> listWithServiceResponseAsync();

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSourceListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSourceListResult list(SearchRequestOptions searchRequestOptions);

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSourceListResult> listAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<DataSourceListResult> serviceCallback);

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSourceListResult> listAsync(SearchRequestOptions searchRequestOptions);

    /**
     * Lists all datasources available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSourceListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSourceListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource create(DataSource dataSource);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource      The definition of the datasource to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> createAsync(DataSource dataSource, final ServiceCallback<DataSource> serviceCallback);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> createAsync(DataSource dataSource);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource The definition of the datasource to create.
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> createWithServiceResponseAsync(DataSource dataSource);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the DataSource object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    DataSource create(DataSource dataSource, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<DataSource> createAsync(
        DataSource dataSource, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<DataSource> serviceCallback);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<DataSource> createAsync(DataSource dataSource, SearchRequestOptions searchRequestOptions);

    /**
     * Creates a new Azure Search datasource.
     *
     * @param dataSource           The definition of the datasource to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the DataSource object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<DataSource>> createWithServiceResponseAsync(
        DataSource dataSource, SearchRequestOptions searchRequestOptions);

}
