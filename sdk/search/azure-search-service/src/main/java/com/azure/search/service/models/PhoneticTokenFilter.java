/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Create tokens for phonetic matches. This token filter is implemented using
 * Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.PhoneticTokenFilter")
public class PhoneticTokenFilter extends TokenFilter {
    /**
     * The phonetic encoder to use. Default is "metaphone". Possible values
     * include: 'metaphone', 'doubleMetaphone', 'soundex', 'refinedSoundex',
     * 'caverphone1', 'caverphone2', 'cologne', 'nysiis', 'koelnerPhonetik',
     * 'haasePhonetik', 'beiderMorse'.
     */
    @JsonProperty(value = "encoder")
    private PhoneticEncoder encoder;

    /**
     * A value indicating whether encoded tokens should replace original
     * tokens. If false, encoded tokens are added as synonyms. Default is true.
     */
    @JsonProperty(value = "replace")
    private Boolean replaceOriginalTokens;

    /**
     * Get the phonetic encoder to use. Default is "metaphone". Possible values include: 'metaphone',
     * 'doubleMetaphone', 'soundex', 'refinedSoundex', 'caverphone1', 'caverphone2', 'cologne', 'nysiis',
     * 'koelnerPhonetik', 'haasePhonetik', 'beiderMorse'.
     *
     * @return the encoder value
     */
    public PhoneticEncoder encoder() {
        return this.encoder;
    }

    /**
     * Set the phonetic encoder to use. Default is "metaphone". Possible values include: 'metaphone',
     * 'doubleMetaphone', 'soundex', 'refinedSoundex', 'caverphone1', 'caverphone2', 'cologne', 'nysiis',
     * 'koelnerPhonetik', 'haasePhonetik', 'beiderMorse'.
     *
     * @param encoder the encoder value to set
     * @return the PhoneticTokenFilter object itself.
     */
    public PhoneticTokenFilter withEncoder(PhoneticEncoder encoder) {
        this.encoder = encoder;
        return this;
    }

    /**
     * Get a value indicating whether encoded tokens should replace original tokens. If false, encoded tokens are
     * added as synonyms. Default is true.
     *
     * @return the replaceOriginalTokens value
     */
    public Boolean replaceOriginalTokens() {
        return this.replaceOriginalTokens;
    }

    /**
     * Set a value indicating whether encoded tokens should replace original tokens. If false, encoded tokens are
     * added as synonyms. Default is true.
     *
     * @param replaceOriginalTokens the replaceOriginalTokens value to set
     * @return the PhoneticTokenFilter object itself.
     */
    public PhoneticTokenFilter withReplaceOriginalTokens(Boolean replaceOriginalTokens) {
        this.replaceOriginalTokens = replaceOriginalTokens;
        return this;
    }

}
