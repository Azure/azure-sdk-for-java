/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.implementation;

import com.azure.search.service.SynonymMaps;
import com.azure.search.service.models.AccessCondition;
import com.azure.search.service.models.SearchRequestOptions;
import com.azure.search.service.models.SynonymMap;
import com.azure.search.service.models.SynonymMapListResult;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import okhttp3.ResponseBody;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.*;
import rx.Observable;
import rx.functions.Func1;

import java.io.IOException;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined
 * in SynonymMaps.
 */
public class SynonymMapsImpl implements SynonymMaps {
    /**
     * The Retrofit service to perform REST calls.
     */
    private SynonymMapsService service;
    /**
     * The service client containing this operation class.
     */
    private SearchServiceClientImpl client;

    /**
     * Initializes an instance of SynonymMapsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client   the instance of the service client containing this operation class.
     */
    public SynonymMapsImpl(Retrofit retrofit, SearchServiceClientImpl client) {
        this.service = retrofit.create(SynonymMapsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SynonymMaps to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SynonymMapsService {
        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".SynonymMaps createOrUpdate"})
        @PUT("synonymmaps('{synonymMapName}')")
        Observable<Response<ResponseBody>> createOrUpdate(
            @Path("synonymMapName") String synonymMapName, @Body SynonymMap synonymMap, @Header("Prefer") String prefer,
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId, @Header("If-Match") String ifMatch,
            @Header("If-None-Match") String ifNoneMatch, @Header("x-ms-parameterized-host") String parameterizedHost,
            @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".SynonymMaps delete"})
        @HTTP(path = "synonymmaps('{synonymMapName}')", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(
            @Path("synonymMapName") String synonymMapName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".SynonymMaps get"})
        @GET("synonymmaps('{synonymMapName}')")
        Observable<Response<ResponseBody>> get(
            @Path("synonymMapName") String synonymMapName, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".SynonymMaps list"})
        @GET("synonymmaps")
        Observable<Response<ResponseBody>> list(
            @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage,
            @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({"Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.azure.search.service" +
            ".SynonymMaps create"})
        @POST("synonymmaps")
        Observable<Response<ResponseBody>> create(
            @Body SynonymMap synonymMap, @Query("api-version") String apiVersion,
            @Header("accept-language") String acceptLanguage, @Header("client-request-id") UUID clientRequestId,
            @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName The name of the synonym map to create or update.
     * @param synonymMap     The definition of the synonym map to create or update.
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap createOrUpdate(String synonymMapName, SynonymMap synonymMap) {
        return createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName  The name of the synonym map to create or update.
     * @param synonymMap      The definition of the synonym map to create or update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> createOrUpdateAsync(
        String synonymMapName, SynonymMap synonymMap, final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture
            .fromResponse(createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap), serviceCallback);
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName The name of the synonym map to create or update.
     * @param synonymMap     The definition of the synonym map to create or update.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> createOrUpdateAsync(String synonymMapName, SynonymMap synonymMap) {
        return createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap)
            .map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
                @Override
                public SynonymMap call(ServiceResponse<SynonymMap> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName The name of the synonym map to create or update.
     * @param synonymMap     The definition of the synonym map to create or update.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> createOrUpdateWithServiceResponseAsync(
        String synonymMapName, SynonymMap synonymMap) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (synonymMap == null) {
            throw new IllegalArgumentException("Parameter synonymMap is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(synonymMap);
        final String prefer = "return=representation";
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(synonymMapName, synonymMap, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName       The name of the synonym map to create or update.
     * @param synonymMap           The definition of the synonym map to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap createOrUpdate(
        String synonymMapName, SynonymMap synonymMap, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap, searchRequestOptions, accessCondition)
            .toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName       The name of the synonym map to create or update.
     * @param synonymMap           The definition of the synonym map to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> createOrUpdateAsync(
        String synonymMapName, SynonymMap synonymMap, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition, final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture.fromResponse(
            createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap, searchRequestOptions, accessCondition),
            serviceCallback);
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName       The name of the synonym map to create or update.
     * @param synonymMap           The definition of the synonym map to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> createOrUpdateAsync(
        String synonymMapName, SynonymMap synonymMap, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        return createOrUpdateWithServiceResponseAsync(synonymMapName, synonymMap, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
                @Override
                public SynonymMap call(ServiceResponse<SynonymMap> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search synonym map or updates a synonym map if it already exists.
     *
     * @param synonymMapName       The name of the synonym map to create or update.
     * @param synonymMap           The definition of the synonym map to create or update.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> createOrUpdateWithServiceResponseAsync(
        String synonymMapName, SynonymMap synonymMap, SearchRequestOptions searchRequestOptions,
        AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (synonymMap == null) {
            throw new IllegalArgumentException("Parameter synonymMap is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(synonymMap);
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        final String prefer = "return=representation";
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .createOrUpdate(synonymMapName, synonymMap, prefer, this.client.apiVersion(), this.client.acceptLanguage(),
                clientRequestId, ifMatch, ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SynonymMap> createOrUpdateDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SynonymMap, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<SynonymMap>() {
            }.getType())
            .register(201, new TypeToken<SynonymMap>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName The name of the synonym map to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String synonymMapName) {
        deleteWithServiceResponseAsync(synonymMapName).toBlocking().single().body();
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName  The name of the synonym map to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(String synonymMapName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(synonymMapName), serviceCallback);
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName The name of the synonym map to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(String synonymMapName) {
        return deleteWithServiceResponseAsync(synonymMapName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName The name of the synonym map to delete.
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String synonymMapName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        final AccessCondition accessCondition = null;
        UUID clientRequestId = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(synonymMapName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName       The name of the synonym map to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(
        String synonymMapName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        deleteWithServiceResponseAsync(synonymMapName, searchRequestOptions, accessCondition).toBlocking().single()
            .body();
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName       The name of the synonym map to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<Void> deleteAsync(
        String synonymMapName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition,
        final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture
            .fromResponse(
                deleteWithServiceResponseAsync(synonymMapName, searchRequestOptions, accessCondition),
                serviceCallback);
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName       The name of the synonym map to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<Void> deleteAsync(
        String synonymMapName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        return deleteWithServiceResponseAsync(synonymMapName, searchRequestOptions, accessCondition)
            .map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
    }

    /**
     * Deletes an Azure Search synonym map.
     *
     * @param synonymMapName       The name of the synonym map to delete.
     * @param searchRequestOptions Additional parameters for the operation
     * @param accessCondition      Additional parameters for the operation
     * @return the {@link ServiceResponse} object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(
        String synonymMapName, SearchRequestOptions searchRequestOptions, AccessCondition accessCondition) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        Validator.validate(accessCondition);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String ifMatch = null;
        if (accessCondition != null) {
            ifMatch = accessCondition.ifMatch();
        }
        String ifNoneMatch = null;
        if (accessCondition != null) {
            ifNoneMatch = accessCondition.ifNoneMatch();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service
            .delete(synonymMapName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, ifMatch,
                ifNoneMatch, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(204, new TypeToken<Void>() {
            }.getType())
            .register(404, new TypeToken<Void>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName The name of the synonym map to retrieve.
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap get(String synonymMapName) {
        return getWithServiceResponseAsync(synonymMapName).toBlocking().single().body();
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName  The name of the synonym map to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> getAsync(
        String synonymMapName, final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(synonymMapName), serviceCallback);
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName The name of the synonym map to retrieve.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> getAsync(String synonymMapName) {
        return getWithServiceResponseAsync(synonymMapName).map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
            @Override
            public SynonymMap call(ServiceResponse<SynonymMap> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName The name of the synonym map to retrieve.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> getWithServiceResponseAsync(String synonymMapName) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(synonymMapName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName       The name of the synonym map to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap get(String synonymMapName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(synonymMapName, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName       The name of the synonym map to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> getAsync(
        String synonymMapName, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture
            .fromResponse(getWithServiceResponseAsync(synonymMapName, searchRequestOptions), serviceCallback);
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName       The name of the synonym map to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> getAsync(String synonymMapName, SearchRequestOptions searchRequestOptions) {
        return getWithServiceResponseAsync(synonymMapName, searchRequestOptions)
            .map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
                @Override
                public SynonymMap call(ServiceResponse<SynonymMap> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieves a synonym map definition from Azure Search.
     *
     * @param synonymMapName       The name of the synonym map to retrieve.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> getWithServiceResponseAsync(
        String synonymMapName, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMapName == null) {
            throw new IllegalArgumentException("Parameter synonymMapName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.get(synonymMapName, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SynonymMap> getDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SynonymMap, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<SynonymMap>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @return the SynonymMapListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMapListResult list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMapListResult> listAsync(final ServiceCallback<SynonymMapListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @return the observable to the SynonymMapListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMapListResult> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<SynonymMapListResult>, SynonymMapListResult>() {
                @Override
                public SynonymMapListResult call(ServiceResponse<SynonymMapListResult> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @return the observable to the SynonymMapListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMapListResult>> listWithServiceResponseAsync() {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMapListResult>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMapListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMapListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the SynonymMapListResult object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMapListResult list(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMapListResult> listAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<SynonymMapListResult> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(searchRequestOptions), serviceCallback);
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMapListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMapListResult> listAsync(SearchRequestOptions searchRequestOptions) {
        return listWithServiceResponseAsync(searchRequestOptions)
            .map(new Func1<ServiceResponse<SynonymMapListResult>, SynonymMapListResult>() {
                @Override
                public SynonymMapListResult call(ServiceResponse<SynonymMapListResult> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all synonym maps available for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMapListResult object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMapListResult>> listWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId, parameterizedHost,
            this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMapListResult>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMapListResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMapListResult> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SynonymMapListResult> listDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SynonymMapListResult, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(200, new TypeToken<SynonymMapListResult>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap The definition of the synonym map to create.
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap create(SynonymMap synonymMap) {
        return createWithServiceResponseAsync(synonymMap).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap      The definition of the synonym map to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> createAsync(
        SynonymMap synonymMap, final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(synonymMap), serviceCallback);
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap The definition of the synonym map to create.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> createAsync(SynonymMap synonymMap) {
        return createWithServiceResponseAsync(synonymMap).map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
            @Override
            public SynonymMap call(ServiceResponse<SynonymMap> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap The definition of the synonym map to create.
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> createWithServiceResponseAsync(SynonymMap synonymMap) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMap == null) {
            throw new IllegalArgumentException("Parameter synonymMap is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(synonymMap);
        final SearchRequestOptions searchRequestOptions = null;
        UUID clientRequestId = null;
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(synonymMap, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap           The definition of the synonym map to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the SynonymMap object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    public SynonymMap create(SynonymMap synonymMap, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(synonymMap, searchRequestOptions).toBlocking().single().body();
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap           The definition of the synonym map to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public ServiceFuture<SynonymMap> createAsync(
        SynonymMap synonymMap, SearchRequestOptions searchRequestOptions,
        final ServiceCallback<SynonymMap> serviceCallback) {
        return ServiceFuture
            .fromResponse(createWithServiceResponseAsync(synonymMap, searchRequestOptions), serviceCallback);
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap           The definition of the synonym map to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<SynonymMap> createAsync(SynonymMap synonymMap, SearchRequestOptions searchRequestOptions) {
        return createWithServiceResponseAsync(synonymMap, searchRequestOptions)
            .map(new Func1<ServiceResponse<SynonymMap>, SynonymMap>() {
                @Override
                public SynonymMap call(ServiceResponse<SynonymMap> response) {
                    return response.body();
                }
            });
    }

    /**
     * Creates a new Azure Search synonym map.
     *
     * @param synonymMap           The definition of the synonym map to create.
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the SynonymMap object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    public Observable<ServiceResponse<SynonymMap>> createWithServiceResponseAsync(
        SynonymMap synonymMap, SearchRequestOptions searchRequestOptions) {
        if (client.searchServiceName() == null) {
            throw new IllegalArgumentException("Parameter client.searchServiceName() is required and cannot be null.");
        }
        if (client.searchDnsSuffix() == null) {
            throw new IllegalArgumentException("Parameter client.searchDnsSuffix() is required and cannot be null.");
        }
        if (synonymMap == null) {
            throw new IllegalArgumentException("Parameter synonymMap is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(synonymMap);
        Validator.validate(searchRequestOptions);
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String parameterizedHost = Joiner.on(", ")
            .join("{searchServiceName}", client.searchServiceName(), "{searchDnsSuffix}", client.searchDnsSuffix());
        return service.create(synonymMap, this.client.apiVersion(), this.client.acceptLanguage(), clientRequestId,
            parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SynonymMap>>>() {
                @Override
                public Observable<ServiceResponse<SynonymMap>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SynonymMap> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SynonymMap> createDelegate(Response<ResponseBody> response)
        throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SynonymMap, CloudException>newInstance(
            this.client.serializerAdapter())
            .register(201, new TypeToken<SynonymMap>() {
            }.getType())
            .registerError(CloudException.class)
            .build(response);
    }

}
