/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Creates combinations of tokens as a single token. This token filter is
 * implemented using Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.ShingleTokenFilter")
public class ShingleTokenFilter extends TokenFilter {
    /**
     * The maximum shingle size. Default and minimum value is 2.
     */
    @JsonProperty(value = "maxShingleSize")
    private Integer maxShingleSize;

    /**
     * The minimum shingle size. Default and minimum value is 2. Must be less
     * than the value of maxShingleSize.
     */
    @JsonProperty(value = "minShingleSize")
    private Integer minShingleSize;

    /**
     * A value indicating whether the output stream will contain the input
     * tokens (unigrams) as well as shingles. Default is true.
     */
    @JsonProperty(value = "outputUnigrams")
    private Boolean outputUnigrams;

    /**
     * A value indicating whether to output unigrams for those times when no
     * shingles are available. This property takes precedence when
     * outputUnigrams is set to false. Default is false.
     */
    @JsonProperty(value = "outputUnigramsIfNoShingles")
    private Boolean outputUnigramsIfNoShingles;

    /**
     * The string to use when joining adjacent tokens to form a shingle.
     * Default is a single space (" ").
     */
    @JsonProperty(value = "tokenSeparator")
    private String tokenSeparator;

    /**
     * The string to insert for each position at which there is no token.
     * Default is an underscore ("_").
     */
    @JsonProperty(value = "filterToken")
    private String filterToken;

    /**
     * Get the maximum shingle size. Default and minimum value is 2.
     *
     * @return the maxShingleSize value
     */
    public Integer maxShingleSize() {
        return this.maxShingleSize;
    }

    /**
     * Set the maximum shingle size. Default and minimum value is 2.
     *
     * @param maxShingleSize the maxShingleSize value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withMaxShingleSize(Integer maxShingleSize) {
        this.maxShingleSize = maxShingleSize;
        return this;
    }

    /**
     * Get the minimum shingle size. Default and minimum value is 2. Must be less than the value of maxShingleSize.
     *
     * @return the minShingleSize value
     */
    public Integer minShingleSize() {
        return this.minShingleSize;
    }

    /**
     * Set the minimum shingle size. Default and minimum value is 2. Must be less than the value of maxShingleSize.
     *
     * @param minShingleSize the minShingleSize value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withMinShingleSize(Integer minShingleSize) {
        this.minShingleSize = minShingleSize;
        return this;
    }

    /**
     * Get a value indicating whether the output stream will contain the input tokens (unigrams) as well as shingles.
     * Default is true.
     *
     * @return the outputUnigrams value
     */
    public Boolean outputUnigrams() {
        return this.outputUnigrams;
    }

    /**
     * Set a value indicating whether the output stream will contain the input tokens (unigrams) as well as shingles.
     * Default is true.
     *
     * @param outputUnigrams the outputUnigrams value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withOutputUnigrams(Boolean outputUnigrams) {
        this.outputUnigrams = outputUnigrams;
        return this;
    }

    /**
     * Get a value indicating whether to output unigrams for those times when no shingles are available. This
     * property takes precedence when outputUnigrams is set to false. Default is false.
     *
     * @return the outputUnigramsIfNoShingles value
     */
    public Boolean outputUnigramsIfNoShingles() {
        return this.outputUnigramsIfNoShingles;
    }

    /**
     * Set a value indicating whether to output unigrams for those times when no shingles are available. This
     * property takes precedence when outputUnigrams is set to false. Default is false.
     *
     * @param outputUnigramsIfNoShingles the outputUnigramsIfNoShingles value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withOutputUnigramsIfNoShingles(Boolean outputUnigramsIfNoShingles) {
        this.outputUnigramsIfNoShingles = outputUnigramsIfNoShingles;
        return this;
    }

    /**
     * Get the string to use when joining adjacent tokens to form a shingle. Default is a single space (" ").
     *
     * @return the tokenSeparator value
     */
    public String tokenSeparator() {
        return this.tokenSeparator;
    }

    /**
     * Set the string to use when joining adjacent tokens to form a shingle. Default is a single space (" ").
     *
     * @param tokenSeparator the tokenSeparator value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withTokenSeparator(String tokenSeparator) {
        this.tokenSeparator = tokenSeparator;
        return this;
    }

    /**
     * Get the string to insert for each position at which there is no token. Default is an underscore ("_").
     *
     * @return the filterToken value
     */
    public String filterToken() {
        return this.filterToken;
    }

    /**
     * Set the string to insert for each position at which there is no token. Default is an underscore ("_").
     *
     * @param filterToken the filterToken value to set
     * @return the ShingleTokenFilter object itself.
     */
    public ShingleTokenFilter withFilterToken(String filterToken) {
        this.filterToken = filterToken;
        return this;
    }

}
