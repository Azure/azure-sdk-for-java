/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service;

import com.azure.search.service.models.SearchRequestOptions;
import com.azure.search.service.models.ServiceStatistics;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import rx.Observable;

/**
 * The interface for SearchServiceClient class.
 */
public interface SearchServiceClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
     */
    RestClient restClient();

    /**
     * Gets the {@link AzureClient} used for long running operations.
     *
     * @return the azure client;
     */
    AzureClient getAzureClient();

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    String userAgent();

    /**
     * Gets Client Api Version..
     *
     * @return the apiVersion value.
     */
    String apiVersion();

    /**
     * Gets The name of the Azure Search service..
     *
     * @return the searchServiceName value.
     */
    String searchServiceName();

    /**
     * Sets The name of the Azure Search service..
     *
     * @param searchServiceName the searchServiceName value.
     * @return the service client itself
     */
    SearchServiceClient withSearchServiceName(String searchServiceName);

    /**
     * Gets The DNS suffix of the Azure Search service. The default is search.windows.net..
     *
     * @return the searchDnsSuffix value.
     */
    String searchDnsSuffix();

    /**
     * Sets The DNS suffix of the Azure Search service. The default is search.windows.net..
     *
     * @param searchDnsSuffix the searchDnsSuffix value.
     * @return the service client itself
     */
    SearchServiceClient withSearchDnsSuffix(String searchDnsSuffix);

    /**
     * Gets The preferred language for the response..
     *
     * @return the acceptLanguage value.
     */
    String acceptLanguage();

    /**
     * Sets The preferred language for the response..
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    SearchServiceClient withAcceptLanguage(String acceptLanguage);

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    int longRunningOperationRetryTimeout();

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30..
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    SearchServiceClient withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout);

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique
     * x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @return the generateClientRequestId value.
     */
    boolean generateClientRequestId();

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique
     * x-ms-client-request-id value is generated and included in each request. Default is true..
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    SearchServiceClient withGenerateClientRequestId(boolean generateClientRequestId);

    /**
     * Gets the DataSources object to access its operations.
     *
     * @return the DataSources object.
     */
    DataSources dataSources();

    /**
     * Gets the Indexers object to access its operations.
     *
     * @return the Indexers object.
     */
    Indexers indexers();

    /**
     * Gets the Skillsets object to access its operations.
     *
     * @return the Skillsets object.
     */
    Skillsets skillsets();

    /**
     * Gets the SynonymMaps object to access its operations.
     *
     * @return the SynonymMaps object.
     */
    SynonymMaps synonymMaps();

    /**
     * Gets the Indexes object to access its operations.
     *
     * @return the Indexes object.
     */
    Indexes indexes();

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @return the ServiceStatistics object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    ServiceStatistics getServiceStatistics();

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<ServiceStatistics> getServiceStatisticsAsync(
        final ServiceCallback<ServiceStatistics> serviceCallback);

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @return the observable to the ServiceStatistics object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceStatistics> getServiceStatisticsAsync();

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @return the observable to the ServiceStatistics object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<ServiceStatistics>> getServiceStatisticsWithServiceResponseAsync();

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the ServiceStatistics object if successful.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException           thrown if the request is rejected by server
     * @throws RuntimeException         all other wrapped checked exceptions if the request fails to be sent
     */
    ServiceStatistics getServiceStatistics(SearchRequestOptions searchRequestOptions);

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @param serviceCallback      the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    ServiceFuture<ServiceStatistics> getServiceStatisticsAsync(
        SearchRequestOptions searchRequestOptions, final ServiceCallback<ServiceStatistics> serviceCallback);

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the ServiceStatistics object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceStatistics> getServiceStatisticsAsync(SearchRequestOptions searchRequestOptions);

    /**
     * Gets service level statistics for an Azure Search service.
     *
     * @param searchRequestOptions Additional parameters for the operation
     * @return the observable to the ServiceStatistics object
     * @throws IllegalArgumentException thrown if parameters fail the validation
     */
    Observable<ServiceResponse<ServiceStatistics>> getServiceStatisticsWithServiceResponseAsync(
        SearchRequestOptions searchRequestOptions);

}
