/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Tokenizer that uses regex pattern matching to construct distinct tokens.
 * This tokenizer is implemented using Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.PatternTokenizer")
public class PatternTokenizer extends Tokenizer {
    /**
     * A regular expression pattern to match token separators. Default is an
     * expression that matches one or more whitespace characters.
     */
    @JsonProperty(value = "pattern")
    private String pattern;

    /**
     * Regular expression flags. Possible values include: 'CANON_EQ',
     * 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL', 'LITERAL', 'MULTILINE',
     * 'UNICODE_CASE', 'UNIX_LINES'.
     */
    @JsonProperty(value = "flags")
    private RegexFlags flags;

    /**
     * The zero-based ordinal of the matching group in the regular expression
     * pattern to extract into tokens. Use -1 if you want to use the entire
     * pattern to split the input into tokens, irrespective of matching groups.
     * Default is -1.
     */
    @JsonProperty(value = "group")
    private Integer group;

    /**
     * Get a regular expression pattern to match token separators. Default is an expression that matches one or more
     * whitespace characters.
     *
     * @return the pattern value
     */
    public String pattern() {
        return this.pattern;
    }

    /**
     * Set a regular expression pattern to match token separators. Default is an expression that matches one or more
     * whitespace characters.
     *
     * @param pattern the pattern value to set
     * @return the PatternTokenizer object itself.
     */
    public PatternTokenizer withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL',
     * 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'.
     *
     * @return the flags value
     */
    public RegexFlags flags() {
        return this.flags;
    }

    /**
     * Set regular expression flags. Possible values include: 'CANON_EQ', 'CASE_INSENSITIVE', 'COMMENTS', 'DOTALL',
     * 'LITERAL', 'MULTILINE', 'UNICODE_CASE', 'UNIX_LINES'.
     *
     * @param flags the flags value to set
     * @return the PatternTokenizer object itself.
     */
    public PatternTokenizer withFlags(RegexFlags flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get the zero-based ordinal of the matching group in the regular expression pattern to extract into tokens. Use
     * -1 if you want to use the entire pattern to split the input into tokens, irrespective of matching groups.
     * Default is -1.
     *
     * @return the group value
     */
    public Integer group() {
        return this.group;
    }

    /**
     * Set the zero-based ordinal of the matching group in the regular expression pattern to extract into tokens. Use
     * -1 if you want to use the entire pattern to split the input into tokens, irrespective of matching groups.
     * Default is -1.
     *
     * @param group the group value to set
     * @return the PatternTokenizer object itself.
     */
    public PatternTokenizer withGroup(Integer group) {
        this.group = group;
        return this;
    }

}
