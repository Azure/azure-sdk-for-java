/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.search.service.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.List;

/**
 * Decomposes compound words found in many Germanic languages. This token
 * filter is implemented using Apache Lucene.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter")
public class DictionaryDecompounderTokenFilter extends TokenFilter {
    /**
     * The list of words to match against.
     */
    @JsonProperty(value = "wordList", required = true)
    private List<String> wordList;

    /**
     * The minimum word size. Only words longer than this get processed.
     * Default is 5. Maximum is 300.
     */
    @JsonProperty(value = "minWordSize")
    private Integer minWordSize;

    /**
     * The minimum subword size. Only subwords longer than this are outputted.
     * Default is 2. Maximum is 300.
     */
    @JsonProperty(value = "minSubwordSize")
    private Integer minSubwordSize;

    /**
     * The maximum subword size. Only subwords shorter than this are outputted.
     * Default is 15. Maximum is 300.
     */
    @JsonProperty(value = "maxSubwordSize")
    private Integer maxSubwordSize;

    /**
     * A value indicating whether to add only the longest matching subword to
     * the output. Default is false.
     */
    @JsonProperty(value = "onlyLongestMatch")
    private Boolean onlyLongestMatch;

    /**
     * Get the list of words to match against.
     *
     * @return the wordList value
     */
    public List<String> wordList() {
        return this.wordList;
    }

    /**
     * Set the list of words to match against.
     *
     * @param wordList the wordList value to set
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    public DictionaryDecompounderTokenFilter withWordList(List<String> wordList) {
        this.wordList = wordList;
        return this;
    }

    /**
     * Get the minimum word size. Only words longer than this get processed. Default is 5. Maximum is 300.
     *
     * @return the minWordSize value
     */
    public Integer minWordSize() {
        return this.minWordSize;
    }

    /**
     * Set the minimum word size. Only words longer than this get processed. Default is 5. Maximum is 300.
     *
     * @param minWordSize the minWordSize value to set
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    public DictionaryDecompounderTokenFilter withMinWordSize(Integer minWordSize) {
        this.minWordSize = minWordSize;
        return this;
    }

    /**
     * Get the minimum subword size. Only subwords longer than this are outputted. Default is 2. Maximum is 300.
     *
     * @return the minSubwordSize value
     */
    public Integer minSubwordSize() {
        return this.minSubwordSize;
    }

    /**
     * Set the minimum subword size. Only subwords longer than this are outputted. Default is 2. Maximum is 300.
     *
     * @param minSubwordSize the minSubwordSize value to set
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    public DictionaryDecompounderTokenFilter withMinSubwordSize(Integer minSubwordSize) {
        this.minSubwordSize = minSubwordSize;
        return this;
    }

    /**
     * Get the maximum subword size. Only subwords shorter than this are outputted. Default is 15. Maximum is 300.
     *
     * @return the maxSubwordSize value
     */
    public Integer maxSubwordSize() {
        return this.maxSubwordSize;
    }

    /**
     * Set the maximum subword size. Only subwords shorter than this are outputted. Default is 15. Maximum is 300.
     *
     * @param maxSubwordSize the maxSubwordSize value to set
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    public DictionaryDecompounderTokenFilter withMaxSubwordSize(Integer maxSubwordSize) {
        this.maxSubwordSize = maxSubwordSize;
        return this;
    }

    /**
     * Get a value indicating whether to add only the longest matching subword to the output. Default is false.
     *
     * @return the onlyLongestMatch value
     */
    public Boolean onlyLongestMatch() {
        return this.onlyLongestMatch;
    }

    /**
     * Set a value indicating whether to add only the longest matching subword to the output. Default is false.
     *
     * @param onlyLongestMatch the onlyLongestMatch value to set
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    public DictionaryDecompounderTokenFilter withOnlyLongestMatch(Boolean onlyLongestMatch) {
        this.onlyLongestMatch = onlyLongestMatch;
        return this;
    }

}
