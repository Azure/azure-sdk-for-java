// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.data.generated.implementation;
import com.azure.search.data.customization.Document;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.CollectionFormat;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.HostParam;
import com.azure.core.implementation.annotation.PathParam;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.QueryParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.serializer.jackson.JacksonAdapter;
import com.azure.search.data.generated.Documents;
import com.azure.search.data.generated.models.AutocompleteMode;
import com.azure.search.data.generated.models.AutocompleteParameters;
import com.azure.search.data.generated.models.AutocompleteRequest;
import com.azure.search.data.generated.models.AutocompleteResult;
import com.azure.search.data.generated.models.DocumentIndexResult;
import com.azure.search.data.generated.models.DocumentSearchResult;
import com.azure.search.data.generated.models.DocumentSuggestResult;
import com.azure.search.data.generated.models.IndexBatch;
import com.azure.search.data.generated.models.QueryType;
import com.azure.search.data.generated.models.SearchMode;
import com.azure.search.data.generated.models.SearchParameters;
import com.azure.search.data.generated.models.SearchRequest;
import com.azure.search.data.generated.models.SearchRequestOptions;
import com.azure.search.data.generated.models.SuggestParameters;
import com.azure.search.data.generated.models.SuggestRequest;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Documents.
 */
public final class DocumentsImpl implements Documents {
    /**
     * The proxy service used to perform REST calls.
     */
    private DocumentsService service;

    /**
     * The service client containing this operation class.
     */
    private SearchIndexRestClientImpl client;

    /**
     * Initializes an instance of DocumentsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DocumentsImpl(SearchIndexRestClientImpl client) {
        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * SearchIndexRestClientDocuments to be used by the proxy service to
     * perform REST calls.
     */
    @Host("https://{searchServiceName}.{searchDnsSuffix}/indexes('{indexName}')")
    @ServiceInterface(name = "SearchIndexRestClientDocuments")
    private interface DocumentsService {
        @Get("docs/$count")
        @ExpectedResponses({200})
        Mono<SimpleResponse<Long>> count(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("api-version") String apiVersion, @HeaderParam("client-request-id") UUID clientRequestId);

        @Get("docs")
        @ExpectedResponses({200})
        Mono<SimpleResponse<DocumentSearchResult>> searchGet(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("search") String searchText, @QueryParam("api-version") String apiVersion, @QueryParam("$count") Boolean includeTotalResultCount, @QueryParam("facet") String facets, @QueryParam("$filter") String filter, @QueryParam("highlight") String highlightFields, @QueryParam("highlightPostTag") String highlightPostTag, @QueryParam("highlightPreTag") String highlightPreTag, @QueryParam("minimumCoverage") Double minimumCoverage, @QueryParam("$orderby") String orderBy, @QueryParam("queryType") QueryType queryType, @QueryParam("scoringParameter") String scoringParameters, @QueryParam("scoringProfile") String scoringProfile, @QueryParam("searchFields") String searchFields, @QueryParam("searchMode") SearchMode searchMode, @QueryParam("$select") String select, @QueryParam("$skip") Integer skip, @QueryParam("$top") Integer top, @HeaderParam("client-request-id") UUID clientRequestId);

        @Post("docs/search.post.search")
        @ExpectedResponses({200})
        Mono<SimpleResponse<DocumentSearchResult>> searchPost(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @BodyParam("application/json; charset=utf-8") SearchRequest searchRequest, @QueryParam("api-version") String apiVersion, @HeaderParam("client-request-id") UUID clientRequestId);

        @Get("docs('{key}')")
        @ExpectedResponses({200})
        Mono<SimpleResponse<Document>> get(@PathParam("key") String key, @HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("$select") String selectedFields, @QueryParam("api-version") String apiVersion, @HeaderParam("client-request-id") UUID clientRequestId);

        @Get("docs/search.suggest")
        @ExpectedResponses({200})
        Mono<SimpleResponse<DocumentSuggestResult>> suggestGet(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("search") String searchText, @QueryParam("suggesterName") String suggesterName, @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter, @QueryParam("fuzzy") Boolean useFuzzyMatching, @QueryParam("highlightPostTag") String highlightPostTag, @QueryParam("highlightPreTag") String highlightPreTag, @QueryParam("minimumCoverage") Double minimumCoverage, @QueryParam("$orderby") String orderBy, @QueryParam("searchFields") String searchFields, @QueryParam("$select") String select, @QueryParam("$top") Integer top, @HeaderParam("client-request-id") UUID clientRequestId);

        @Post("docs/search.post.suggest")
        @ExpectedResponses({200})
        Mono<SimpleResponse<DocumentSuggestResult>> suggestPost(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @BodyParam("application/json; charset=utf-8") SuggestRequest suggestRequest, @QueryParam("api-version") String apiVersion, @HeaderParam("client-request-id") UUID clientRequestId);

        @Post("docs/search.index")
        @ExpectedResponses({200, 207})
        Mono<SimpleResponse<DocumentIndexResult>> index(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @BodyParam("application/json; charset=utf-8") IndexBatch batch, @QueryParam("api-version") String apiVersion, @HeaderParam("client-request-id") UUID clientRequestId);

        @Get("docs/search.autocomplete")
        @ExpectedResponses({200})
        Mono<SimpleResponse<AutocompleteResult>> autocompleteGet(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("api-version") String apiVersion, @QueryParam("search") String searchText, @QueryParam("suggesterName") String suggesterName, @HeaderParam("client-request-id") UUID clientRequestId, @QueryParam("autocompleteMode") AutocompleteMode autocompleteMode, @QueryParam("$filter") String filter, @QueryParam("fuzzy") Boolean useFuzzyMatching, @QueryParam("highlightPostTag") String highlightPostTag, @QueryParam("highlightPreTag") String highlightPreTag, @QueryParam("minimumCoverage") Double minimumCoverage, @QueryParam("searchFields") String searchFields, @QueryParam("$top") Integer top);

        @Post("docs/search.post.autocomplete")
        @ExpectedResponses({200})
        Mono<SimpleResponse<AutocompleteResult>> autocompletePost(@HostParam("searchServiceName") String searchServiceName, @HostParam("searchDnsSuffix") String searchDnsSuffix, @HostParam("indexName") String indexName, @QueryParam("api-version") String apiVersion, @BodyParam("application/json; charset=utf-8") AutocompleteRequest autocompleteRequest, @HeaderParam("client-request-id") UUID clientRequestId);
    }

    /**
     * Queries the number of documents in the Azure Search index.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Long>> countWithRestResponseAsync() {
        final UUID clientRequestId = null;
        return service.count(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Queries the number of documents in the Azure Search index.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Long> countAsync() {
        return countWithRestResponseAsync()
            .flatMap((SimpleResponse<Long> res) -> Mono.just(res.value()));
    }

    /**
     * Queries the number of documents in the Azure Search index.
     *
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Long>> countWithRestResponseAsync(SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        return service.count(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Queries the number of documents in the Azure Search index.
     *
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Long> countAsync(SearchRequestOptions searchRequestOptions) {
        return countWithRestResponseAsync(searchRequestOptions)
            .flatMap((SimpleResponse<Long> res) -> Mono.just(res.value()));
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSearchResult>> searchGetWithRestResponseAsync() {
        final String searchText = null;
        final Boolean includeTotalResultCount = null;
        final String filter = null;
        final String highlightPostTag = null;
        final String highlightPreTag = null;
        final Double minimumCoverage = null;
        final QueryType queryType = null;
        final String scoringProfile = null;
        final SearchMode searchMode = null;
        final Integer skip = null;
        final Integer top = null;
        final UUID clientRequestId = null;
        String facetsConverted = null;
        String highlightFieldsConverted = null;
        String orderByConverted = null;
        String scoringParametersConverted = null;
        String searchFieldsConverted = null;
        String selectConverted = null;
        return service.searchGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchText, this.client.getApiVersion(), includeTotalResultCount, facetsConverted, filter, highlightFieldsConverted, highlightPostTag, highlightPreTag, minimumCoverage, orderByConverted, queryType, scoringParametersConverted, scoringProfile, searchFieldsConverted, searchMode, selectConverted, skip, top, clientRequestId);
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSearchResult> searchGetAsync() {
        return searchGetWithRestResponseAsync()
            .flatMap((SimpleResponse<DocumentSearchResult> res) -> Mono.just(res.value()));
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchText A full-text search query expression; Use "*" or omit this parameter to match all documents.
     * @param searchParameters Additional parameters for the operation.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSearchResult>> searchGetWithRestResponseAsync(String searchText, SearchParameters searchParameters, SearchRequestOptions searchRequestOptions) {
        Boolean includeTotalResultCount = null;
        if (searchParameters != null) {
            includeTotalResultCount = searchParameters.includeTotalResultCount();
        }
        List<String> facets = null;
        if (searchParameters != null) {
            facets = searchParameters.facets();
        }
        String filter = null;
        if (searchParameters != null) {
            filter = searchParameters.filter();
        }
        List<String> highlightFields = null;
        if (searchParameters != null) {
            highlightFields = searchParameters.highlightFields();
        }
        String highlightPostTag = null;
        if (searchParameters != null) {
            highlightPostTag = searchParameters.highlightPostTag();
        }
        String highlightPreTag = null;
        if (searchParameters != null) {
            highlightPreTag = searchParameters.highlightPreTag();
        }
        Double minimumCoverage = null;
        if (searchParameters != null) {
            minimumCoverage = searchParameters.minimumCoverage();
        }
        List<String> orderBy = null;
        if (searchParameters != null) {
            orderBy = searchParameters.orderBy();
        }
        QueryType queryType = null;
        if (searchParameters != null) {
            queryType = searchParameters.queryType();
        }
        List<String> scoringParameters = null;
        if (searchParameters != null) {
            scoringParameters = searchParameters.scoringParameters();
        }
        String scoringProfile = null;
        if (searchParameters != null) {
            scoringProfile = searchParameters.scoringProfile();
        }
        List<String> searchFields = null;
        if (searchParameters != null) {
            searchFields = searchParameters.searchFields();
        }
        SearchMode searchMode = null;
        if (searchParameters != null) {
            searchMode = searchParameters.searchMode();
        }
        List<String> select = null;
        if (searchParameters != null) {
            select = searchParameters.select();
        }
        Integer skip = null;
        if (searchParameters != null) {
            skip = searchParameters.skip();
        }
        Integer top = null;
        if (searchParameters != null) {
            top = searchParameters.top();
        }
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String facetsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(facets, CollectionFormat.MULTI);
        String highlightFieldsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(highlightFields, CollectionFormat.CSV);
        String orderByConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderBy, CollectionFormat.CSV);
        String scoringParametersConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(scoringParameters, CollectionFormat.MULTI);
        String searchFieldsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(searchFields, CollectionFormat.CSV);
        String selectConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.searchGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchText, this.client.getApiVersion(), includeTotalResultCount, facetsConverted, filter, highlightFieldsConverted, highlightPostTag, highlightPreTag, minimumCoverage, orderByConverted, queryType, scoringParametersConverted, scoringProfile, searchFieldsConverted, searchMode, selectConverted, skip, top, clientRequestId);
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchText A full-text search query expression; Use "*" or omit this parameter to match all documents.
     * @param searchParameters Additional parameters for the operation.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSearchResult> searchGetAsync(String searchText, SearchParameters searchParameters, SearchRequestOptions searchRequestOptions) {
        return searchGetWithRestResponseAsync(searchText, searchParameters, searchRequestOptions)
            .flatMap((SimpleResponse<DocumentSearchResult> res) -> Mono.just(res.value()));
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchRequest The definition of the Search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSearchResult>> searchPostWithRestResponseAsync(SearchRequest searchRequest) {
        final UUID clientRequestId = null;
        return service.searchPost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchRequest, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchRequest The definition of the Search request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSearchResult> searchPostAsync(SearchRequest searchRequest) {
        return searchPostWithRestResponseAsync(searchRequest)
            .flatMap((SimpleResponse<DocumentSearchResult> res) -> Mono.just(res.value()));
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchRequest The definition of the Search request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSearchResult>> searchPostWithRestResponseAsync(SearchRequest searchRequest, SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        return service.searchPost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchRequest, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Searches for documents in the Azure Search index.
     *
     * @param searchRequest The definition of the Search request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSearchResult> searchPostAsync(SearchRequest searchRequest, SearchRequestOptions searchRequestOptions) {
        return searchPostWithRestResponseAsync(searchRequest, searchRequestOptions)
            .flatMap((SimpleResponse<DocumentSearchResult> res) -> Mono.just(res.value()));
    }

    /**
     * Retrieves a document from the Azure Search index.
     *
     * @param key The key of the document to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Document>> getWithRestResponseAsync(String key) {
        final UUID clientRequestId = null;
        String selectedFieldsConverted = null;
        return service.get(key, this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), selectedFieldsConverted, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Retrieves a document from the Azure Search index.
     *
     * @param key The key of the document to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Document> getAsync(String key) {
        return getWithRestResponseAsync(key)
            .flatMap((SimpleResponse<Document> res) -> Mono.just(res.value()));
    }

    /**
     * Retrieves a document from the Azure Search index.
     *
     * @param key The key of the document to retrieve.
     * @param selectedFields List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Document>> getWithRestResponseAsync(String key, List<String> selectedFields, SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String selectedFieldsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(selectedFields, CollectionFormat.CSV);
        return service.get(key, this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), selectedFieldsConverted, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Retrieves a document from the Azure Search index.
     *
     * @param key The key of the document to retrieve.
     * @param selectedFields List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Document> getAsync(String key, List<String> selectedFields, SearchRequestOptions searchRequestOptions) {
        return getWithRestResponseAsync(key, selectedFields, searchRequestOptions)
            .flatMap((SimpleResponse<Document> res) -> Mono.just(res.value()));
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSuggestResult>> suggestGetWithRestResponseAsync(String searchText, String suggesterName) {
        final String filter = null;
        final Boolean useFuzzyMatching = null;
        final String highlightPostTag = null;
        final String highlightPreTag = null;
        final Double minimumCoverage = null;
        final Integer top = null;
        final UUID clientRequestId = null;
        String orderByConverted = null;
        String searchFieldsConverted = null;
        String selectConverted = null;
        return service.suggestGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchText, suggesterName, this.client.getApiVersion(), filter, useFuzzyMatching, highlightPostTag, highlightPreTag, minimumCoverage, orderByConverted, searchFieldsConverted, selectConverted, top, clientRequestId);
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSuggestResult> suggestGetAsync(String searchText, String suggesterName) {
        return suggestGetWithRestResponseAsync(searchText, suggesterName)
            .flatMap((SimpleResponse<DocumentSuggestResult> res) -> Mono.just(res.value()));
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @param suggestParameters Additional parameters for the operation.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSuggestResult>> suggestGetWithRestResponseAsync(String searchText, String suggesterName, SuggestParameters suggestParameters, SearchRequestOptions searchRequestOptions) {
        String filter = null;
        if (suggestParameters != null) {
            filter = suggestParameters.filter();
        }
        Boolean useFuzzyMatching = null;
        if (suggestParameters != null) {
            useFuzzyMatching = suggestParameters.useFuzzyMatching();
        }
        String highlightPostTag = null;
        if (suggestParameters != null) {
            highlightPostTag = suggestParameters.highlightPostTag();
        }
        String highlightPreTag = null;
        if (suggestParameters != null) {
            highlightPreTag = suggestParameters.highlightPreTag();
        }
        Double minimumCoverage = null;
        if (suggestParameters != null) {
            minimumCoverage = suggestParameters.minimumCoverage();
        }
        List<String> orderBy = null;
        if (suggestParameters != null) {
            orderBy = suggestParameters.orderBy();
        }
        List<String> searchFields = null;
        if (suggestParameters != null) {
            searchFields = suggestParameters.searchFields();
        }
        List<String> select = null;
        if (suggestParameters != null) {
            select = suggestParameters.select();
        }
        Integer top = null;
        if (suggestParameters != null) {
            top = suggestParameters.top();
        }
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        String orderByConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(orderBy, CollectionFormat.CSV);
        String searchFieldsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(searchFields, CollectionFormat.CSV);
        String selectConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(select, CollectionFormat.CSV);
        return service.suggestGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), searchText, suggesterName, this.client.getApiVersion(), filter, useFuzzyMatching, highlightPostTag, highlightPreTag, minimumCoverage, orderByConverted, searchFieldsConverted, selectConverted, top, clientRequestId);
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param searchText The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @param suggestParameters Additional parameters for the operation.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSuggestResult> suggestGetAsync(String searchText, String suggesterName, SuggestParameters suggestParameters, SearchRequestOptions searchRequestOptions) {
        return suggestGetWithRestResponseAsync(searchText, suggesterName, suggestParameters, searchRequestOptions)
            .flatMap((SimpleResponse<DocumentSuggestResult> res) -> Mono.just(res.value()));
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param suggestRequest The Suggest request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSuggestResult>> suggestPostWithRestResponseAsync(SuggestRequest suggestRequest) {
        final UUID clientRequestId = null;
        return service.suggestPost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), suggestRequest, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param suggestRequest The Suggest request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSuggestResult> suggestPostAsync(SuggestRequest suggestRequest) {
        return suggestPostWithRestResponseAsync(suggestRequest)
            .flatMap((SimpleResponse<DocumentSuggestResult> res) -> Mono.just(res.value()));
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param suggestRequest The Suggest request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentSuggestResult>> suggestPostWithRestResponseAsync(SuggestRequest suggestRequest, SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        return service.suggestPost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), suggestRequest, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Suggests documents in the Azure Search index that match the given partial query text.
     *
     * @param suggestRequest The Suggest request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentSuggestResult> suggestPostAsync(SuggestRequest suggestRequest, SearchRequestOptions searchRequestOptions) {
        return suggestPostWithRestResponseAsync(suggestRequest, searchRequestOptions)
            .flatMap((SimpleResponse<DocumentSuggestResult> res) -> Mono.just(res.value()));
    }

    /**
     * Sends a batch of document write actions to the Azure Search index.
     *
     * @param batch The batch of index actions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentIndexResult>> indexWithRestResponseAsync(IndexBatch batch) {
        final UUID clientRequestId = null;
        return service.index(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), batch, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Sends a batch of document write actions to the Azure Search index.
     *
     * @param batch The batch of index actions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentIndexResult> indexAsync(IndexBatch batch) {
        return indexWithRestResponseAsync(batch)
            .flatMap((SimpleResponse<DocumentIndexResult> res) -> Mono.just(res.value()));
    }

    /**
     * Sends a batch of document write actions to the Azure Search index.
     *
     * @param batch The batch of index actions.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DocumentIndexResult>> indexWithRestResponseAsync(IndexBatch batch, SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        return service.index(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), batch, this.client.getApiVersion(), clientRequestId);
    }

    /**
     * Sends a batch of document write actions to the Azure Search index.
     *
     * @param batch The batch of index actions.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DocumentIndexResult> indexAsync(IndexBatch batch, SearchRequestOptions searchRequestOptions) {
        return indexWithRestResponseAsync(batch, searchRequestOptions)
            .flatMap((SimpleResponse<DocumentIndexResult> res) -> Mono.just(res.value()));
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param searchText The incomplete term which should be auto-completed.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AutocompleteResult>> autocompleteGetWithRestResponseAsync(String searchText, String suggesterName) {
        final UUID clientRequestId = null;
        final AutocompleteMode autocompleteMode = null;
        final String filter = null;
        final Boolean useFuzzyMatching = null;
        final String highlightPostTag = null;
        final String highlightPreTag = null;
        final Double minimumCoverage = null;
        final Integer top = null;
        String searchFieldsConverted = null;
        return service.autocompleteGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), searchText, suggesterName, clientRequestId, autocompleteMode, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, minimumCoverage, searchFieldsConverted, top);
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param searchText The incomplete term which should be auto-completed.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AutocompleteResult> autocompleteGetAsync(String searchText, String suggesterName) {
        return autocompleteGetWithRestResponseAsync(searchText, suggesterName)
            .flatMap((SimpleResponse<AutocompleteResult> res) -> Mono.just(res.value()));
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param searchText The incomplete term which should be auto-completed.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @param searchRequestOptions Additional parameters for the operation.
     * @param autocompleteParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AutocompleteResult>> autocompleteGetWithRestResponseAsync(String searchText, String suggesterName, SearchRequestOptions searchRequestOptions, AutocompleteParameters autocompleteParameters) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        AutocompleteMode autocompleteMode = null;
        if (autocompleteParameters != null) {
            autocompleteMode = autocompleteParameters.autocompleteMode();
        }
        String filter = null;
        if (autocompleteParameters != null) {
            filter = autocompleteParameters.filter();
        }
        Boolean useFuzzyMatching = null;
        if (autocompleteParameters != null) {
            useFuzzyMatching = autocompleteParameters.useFuzzyMatching();
        }
        String highlightPostTag = null;
        if (autocompleteParameters != null) {
            highlightPostTag = autocompleteParameters.highlightPostTag();
        }
        String highlightPreTag = null;
        if (autocompleteParameters != null) {
            highlightPreTag = autocompleteParameters.highlightPreTag();
        }
        Double minimumCoverage = null;
        if (autocompleteParameters != null) {
            minimumCoverage = autocompleteParameters.minimumCoverage();
        }
        List<String> searchFields = null;
        if (autocompleteParameters != null) {
            searchFields = autocompleteParameters.searchFields();
        }
        Integer top = null;
        if (autocompleteParameters != null) {
            top = autocompleteParameters.top();
        }
        String searchFieldsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(searchFields, CollectionFormat.CSV);
        return service.autocompleteGet(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), searchText, suggesterName, clientRequestId, autocompleteMode, filter, useFuzzyMatching, highlightPostTag, highlightPreTag, minimumCoverage, searchFieldsConverted, top);
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param searchText The incomplete term which should be auto-completed.
     * @param suggesterName The name of the suggester as specified in the suggesters collection that's part of the index definition.
     * @param searchRequestOptions Additional parameters for the operation.
     * @param autocompleteParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AutocompleteResult> autocompleteGetAsync(String searchText, String suggesterName, SearchRequestOptions searchRequestOptions, AutocompleteParameters autocompleteParameters) {
        return autocompleteGetWithRestResponseAsync(searchText, suggesterName, searchRequestOptions, autocompleteParameters)
            .flatMap((SimpleResponse<AutocompleteResult> res) -> Mono.just(res.value()));
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param autocompleteRequest The definition of the Autocomplete request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AutocompleteResult>> autocompletePostWithRestResponseAsync(AutocompleteRequest autocompleteRequest) {
        final UUID clientRequestId = null;
        return service.autocompletePost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), autocompleteRequest, clientRequestId);
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param autocompleteRequest The definition of the Autocomplete request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AutocompleteResult> autocompletePostAsync(AutocompleteRequest autocompleteRequest) {
        return autocompletePostWithRestResponseAsync(autocompleteRequest)
            .flatMap((SimpleResponse<AutocompleteResult> res) -> Mono.just(res.value()));
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param autocompleteRequest The definition of the Autocomplete request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AutocompleteResult>> autocompletePostWithRestResponseAsync(AutocompleteRequest autocompleteRequest, SearchRequestOptions searchRequestOptions) {
        UUID clientRequestId = null;
        if (searchRequestOptions != null) {
            clientRequestId = searchRequestOptions.clientRequestId();
        }
        return service.autocompletePost(this.client.getSearchServiceName(), this.client.getSearchDnsSuffix(), this.client.getIndexName(), this.client.getApiVersion(), autocompleteRequest, clientRequestId);
    }

    /**
     * Autocompletes incomplete query terms based on input text and matching terms in the Azure Search index.
     *
     * @param autocompleteRequest The definition of the Autocomplete request.
     * @param searchRequestOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AutocompleteResult> autocompletePostAsync(AutocompleteRequest autocompleteRequest, SearchRequestOptions searchRequestOptions) {
        return autocompletePostWithRestResponseAsync(autocompleteRequest, searchRequestOptions)
            .flatMap((SimpleResponse<AutocompleteResult> res) -> Mono.just(res.value()));
    }
}
