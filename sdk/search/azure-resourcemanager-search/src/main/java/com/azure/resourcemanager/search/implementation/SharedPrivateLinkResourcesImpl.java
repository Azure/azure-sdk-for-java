// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.search.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.search.fluent.SharedPrivateLinkResourcesClient;
import com.azure.resourcemanager.search.fluent.models.SharedPrivateLinkResourceInner;
import com.azure.resourcemanager.search.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.search.models.SharedPrivateLinkResources;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.UUID;

public final class SharedPrivateLinkResourcesImpl implements SharedPrivateLinkResources {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SharedPrivateLinkResourcesImpl.class);

    private final SharedPrivateLinkResourcesClient innerClient;

    private final com.azure.resourcemanager.search.SearchManager serviceManager;

    public SharedPrivateLinkResourcesImpl(
        SharedPrivateLinkResourcesClient innerClient, com.azure.resourcemanager.search.SearchManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SharedPrivateLinkResource get(
        String resourceGroupName, String searchServiceName, String sharedPrivateLinkResourceName) {
        SharedPrivateLinkResourceInner inner =
            this.serviceClient().get(resourceGroupName, searchServiceName, sharedPrivateLinkResourceName);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SharedPrivateLinkResource> getWithResponse(
        String resourceGroupName,
        String searchServiceName,
        String sharedPrivateLinkResourceName,
        UUID clientRequestId,
        Context context) {
        Response<SharedPrivateLinkResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, clientRequestId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SharedPrivateLinkResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName,
        String searchServiceName,
        String sharedPrivateLinkResourceName,
        UUID clientRequestId) {
        this
            .serviceClient()
            .delete(resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, clientRequestId);
    }

    public void delete(String resourceGroupName, String searchServiceName, String sharedPrivateLinkResourceName) {
        this.serviceClient().delete(resourceGroupName, searchServiceName, sharedPrivateLinkResourceName);
    }

    public void delete(
        String resourceGroupName,
        String searchServiceName,
        String sharedPrivateLinkResourceName,
        UUID clientRequestId,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, clientRequestId, context);
    }

    public PagedIterable<SharedPrivateLinkResource> listByService(String resourceGroupName, String searchServiceName) {
        PagedIterable<SharedPrivateLinkResourceInner> inner =
            this.serviceClient().listByService(resourceGroupName, searchServiceName);
        return Utils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SharedPrivateLinkResource> listByService(
        String resourceGroupName, String searchServiceName, UUID clientRequestId, Context context) {
        PagedIterable<SharedPrivateLinkResourceInner> inner =
            this.serviceClient().listByService(resourceGroupName, searchServiceName, clientRequestId, context);
        return Utils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public SharedPrivateLinkResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String searchServiceName = Utils.getValueFromIdByName(id, "searchServices");
        if (searchServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'searchServices'.", id)));
        }
        String sharedPrivateLinkResourceName = Utils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.",
                                id)));
        }
        UUID localClientRequestId = null;
        return this
            .getWithResponse(
                resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, localClientRequestId, Context.NONE)
            .getValue();
    }

    public Response<SharedPrivateLinkResource> getByIdWithResponse(String id, UUID clientRequestId, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String searchServiceName = Utils.getValueFromIdByName(id, "searchServices");
        if (searchServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'searchServices'.", id)));
        }
        String sharedPrivateLinkResourceName = Utils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, clientRequestId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String searchServiceName = Utils.getValueFromIdByName(id, "searchServices");
        if (searchServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'searchServices'.", id)));
        }
        String sharedPrivateLinkResourceName = Utils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.",
                                id)));
        }
        UUID localClientRequestId = null;
        this
            .delete(
                resourceGroupName,
                searchServiceName,
                sharedPrivateLinkResourceName,
                localClientRequestId,
                Context.NONE);
    }

    public void deleteByIdWithResponse(String id, UUID clientRequestId, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String searchServiceName = Utils.getValueFromIdByName(id, "searchServices");
        if (searchServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'searchServices'.", id)));
        }
        String sharedPrivateLinkResourceName = Utils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.",
                                id)));
        }
        this.delete(resourceGroupName, searchServiceName, sharedPrivateLinkResourceName, clientRequestId, context);
    }

    private SharedPrivateLinkResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.search.SearchManager manager() {
        return this.serviceManager;
    }

    public SharedPrivateLinkResourceImpl define(String name) {
        return new SharedPrivateLinkResourceImpl(name, this.manager());
    }
}
