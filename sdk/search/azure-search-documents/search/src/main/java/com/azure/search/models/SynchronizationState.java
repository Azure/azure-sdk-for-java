// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the current state of an ongoing synchronization that spans multiple indexer runs.
 */
@Fluent
public final class SynchronizationState implements JsonSerializable<SynchronizationState> {
    /*
     * The start time of the current synchronization.
     */
    @Generated
    private OffsetDateTime startTime;

    /*
     * The number of item updates successfully processed in the current synchronization.
     */
    @Generated
    private int itemsUpdatesProcessed;

    /*
     * The number of item updates that failed in the current synchronization.
     */
    @Generated
    private int itemsUpdatesFailed;

    /*
     * The number of items skipped in the current synchronization.
     */
    @Generated
    private int itemsSkipped;

    /**
     * Creates an instance of SynchronizationState class.
     */
    @Generated
    public SynchronizationState() {
    }

    /**
     * Get the startTime property: The start time of the current synchronization.
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the current synchronization.
     * 
     * @param startTime the startTime value to set.
     * @return the SynchronizationState object itself.
     */
    @Generated
    public SynchronizationState setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the itemsUpdatesProcessed property: The number of item updates successfully processed in the current
     * synchronization.
     * 
     * @return the itemsUpdatesProcessed value.
     */
    @Generated
    public int getItemsUpdatesProcessed() {
        return this.itemsUpdatesProcessed;
    }

    /**
     * Set the itemsUpdatesProcessed property: The number of item updates successfully processed in the current
     * synchronization.
     * 
     * @param itemsUpdatesProcessed the itemsUpdatesProcessed value to set.
     * @return the SynchronizationState object itself.
     */
    @Generated
    public SynchronizationState setItemsUpdatesProcessed(int itemsUpdatesProcessed) {
        this.itemsUpdatesProcessed = itemsUpdatesProcessed;
        return this;
    }

    /**
     * Get the itemsUpdatesFailed property: The number of item updates that failed in the current synchronization.
     * 
     * @return the itemsUpdatesFailed value.
     */
    @Generated
    public int getItemsUpdatesFailed() {
        return this.itemsUpdatesFailed;
    }

    /**
     * Set the itemsUpdatesFailed property: The number of item updates that failed in the current synchronization.
     * 
     * @param itemsUpdatesFailed the itemsUpdatesFailed value to set.
     * @return the SynchronizationState object itself.
     */
    @Generated
    public SynchronizationState setItemsUpdatesFailed(int itemsUpdatesFailed) {
        this.itemsUpdatesFailed = itemsUpdatesFailed;
        return this;
    }

    /**
     * Get the itemsSkipped property: The number of items skipped in the current synchronization.
     * 
     * @return the itemsSkipped value.
     */
    @Generated
    public int getItemsSkipped() {
        return this.itemsSkipped;
    }

    /**
     * Set the itemsSkipped property: The number of items skipped in the current synchronization.
     * 
     * @param itemsSkipped the itemsSkipped value to set.
     * @return the SynchronizationState object itself.
     */
    @Generated
    public SynchronizationState setItemsSkipped(int itemsSkipped) {
        this.itemsSkipped = itemsSkipped;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeIntField("itemsUpdatesProcessed", this.itemsUpdatesProcessed);
        jsonWriter.writeIntField("itemsUpdatesFailed", this.itemsUpdatesFailed);
        jsonWriter.writeIntField("itemsSkipped", this.itemsSkipped);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SynchronizationState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SynchronizationState if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SynchronizationState.
     */
    @Generated
    public static SynchronizationState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SynchronizationState deserializedSynchronizationState = new SynchronizationState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedSynchronizationState.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("itemsUpdatesProcessed".equals(fieldName)) {
                    deserializedSynchronizationState.itemsUpdatesProcessed = reader.getInt();
                } else if ("itemsUpdatesFailed".equals(fieldName)) {
                    deserializedSynchronizationState.itemsUpdatesFailed = reader.getInt();
                } else if ("itemsSkipped".equals(fieldName)) {
                    deserializedSynchronizationState.itemsSkipped = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSynchronizationState;
        });
    }
}
