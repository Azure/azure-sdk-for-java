// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an item- or document-level indexing error.
 */
@Immutable
public final class SearchIndexerError implements JsonSerializable<SearchIndexerError> {
    /*
     * The key of the item for which indexing failed.
     */
    @Generated
    private String key;

    /*
     * The message describing the error that occurred while processing the item.
     */
    @Generated
    private String errorMessage;

    /*
     * The status code indicating why the indexing operation failed. Possible values include: 400 for a malformed input
     * document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable,
     * or 503 for when the service is too busy.
     */
    @Generated
    private int statusCode;

    /*
     * The name of the source at which the error originated. For example, this could refer to a particular skill in the
     * attached skillset. This may not be always available.
     */
    @Generated
    private String name;

    /*
     * Additional, verbose details about the error to assist in debugging the indexer. This may not be always available.
     */
    @Generated
    private String details;

    /*
     * A link to a troubleshooting guide for these classes of errors. This may not be always available.
     */
    @Generated
    private String documentationLink;

    /**
     * Creates an instance of SearchIndexerError class.
     */
    @Generated
    public SearchIndexerError() {
    }

    /**
     * Get the key property: The key of the item for which indexing failed.
     * 
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the errorMessage property: The message describing the error that occurred while processing the item.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the statusCode property: The status code indicating why the indexing operation failed. Possible values
     * include: 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the
     * index is temporarily unavailable, or 503 for when the service is too busy.
     * 
     * @return the statusCode value.
     */
    @Generated
    public int getStatusCode() {
        return this.statusCode;
    }

    /**
     * Get the name property: The name of the source at which the error originated. For example, this could refer to a
     * particular skill in the attached skillset. This may not be always available.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the details property: Additional, verbose details about the error to assist in debugging the indexer. This
     * may not be always available.
     * 
     * @return the details value.
     */
    @Generated
    public String getDetails() {
        return this.details;
    }

    /**
     * Get the documentationLink property: A link to a troubleshooting guide for these classes of errors. This may not
     * be always available.
     * 
     * @return the documentationLink value.
     */
    @Generated
    public String getDocumentationLink() {
        return this.documentationLink;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexerError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexerError.
     */
    @Generated
    public static SearchIndexerError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchIndexerError deserializedSearchIndexerError = new SearchIndexerError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorMessage".equals(fieldName)) {
                    deserializedSearchIndexerError.errorMessage = reader.getString();
                } else if ("statusCode".equals(fieldName)) {
                    deserializedSearchIndexerError.statusCode = reader.getInt();
                } else if ("key".equals(fieldName)) {
                    deserializedSearchIndexerError.key = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSearchIndexerError.name = reader.getString();
                } else if ("details".equals(fieldName)) {
                    deserializedSearchIndexerError.details = reader.getString();
                } else if ("documentationLink".equals(fieldName)) {
                    deserializedSearchIndexerError.documentationLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchIndexerError;
        });
    }
}
