// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * A skill that extracts content from a file within the enrichment pipeline.
 */
@Fluent
public final class DocumentExtractionSkill extends SearchIndexerSkill {
    /*
     * A URI fragment specifying the type of skill.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Util.DocumentExtractionSkill";

    /*
     * The parsingMode for the skill. Will be set to 'default' if not defined.
     */
    @Generated
    private String parsingMode;

    /*
     * The type of data to be extracted for the skill. Will be set to 'contentAndMetadata' if not defined.
     */
    @Generated
    private String dataToExtract;

    /*
     * A dictionary of configurations for the skill.
     */
    @Generated
    private Map<String, Object> configuration;

    /**
     * Creates an instance of DocumentExtractionSkill class.
     */
    @Generated
    public DocumentExtractionSkill() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of skill.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the parsingMode property: The parsingMode for the skill. Will be set to 'default' if not defined.
     * 
     * @return the parsingMode value.
     */
    @Generated
    public String getParsingMode() {
        return this.parsingMode;
    }

    /**
     * Set the parsingMode property: The parsingMode for the skill. Will be set to 'default' if not defined.
     * 
     * @param parsingMode the parsingMode value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    @Generated
    public DocumentExtractionSkill setParsingMode(String parsingMode) {
        this.parsingMode = parsingMode;
        return this;
    }

    /**
     * Get the dataToExtract property: The type of data to be extracted for the skill. Will be set to
     * 'contentAndMetadata' if not defined.
     * 
     * @return the dataToExtract value.
     */
    @Generated
    public String getDataToExtract() {
        return this.dataToExtract;
    }

    /**
     * Set the dataToExtract property: The type of data to be extracted for the skill. Will be set to
     * 'contentAndMetadata' if not defined.
     * 
     * @param dataToExtract the dataToExtract value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    @Generated
    public DocumentExtractionSkill setDataToExtract(String dataToExtract) {
        this.dataToExtract = dataToExtract;
        return this;
    }

    /**
     * Get the configuration property: A dictionary of configurations for the skill.
     * 
     * @return the configuration value.
     */
    @Generated
    public Map<String, Object> getConfiguration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: A dictionary of configurations for the skill.
     * 
     * @param configuration the configuration value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    @Generated
    public DocumentExtractionSkill setConfiguration(Map<String, Object> configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DocumentExtractionSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DocumentExtractionSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DocumentExtractionSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DocumentExtractionSkill setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DocumentExtractionSkill setOutputs(List<OutputFieldMappingEntry> outputs) {
        super.setOutputs(outputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("parsingMode", this.parsingMode);
        jsonWriter.writeStringField("dataToExtract", this.dataToExtract);
        jsonWriter.writeMapField("configuration", this.configuration,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentExtractionSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentExtractionSkill if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentExtractionSkill.
     */
    @Generated
    public static DocumentExtractionSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentExtractionSkill deserializedDocumentExtractionSkill = new DocumentExtractionSkill();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedDocumentExtractionSkill.setInputs(inputs);
                } else if ("outputs".equals(fieldName)) {
                    List<OutputFieldMappingEntry> outputs
                        = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    deserializedDocumentExtractionSkill.setOutputs(outputs);
                } else if ("name".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.setDescription(reader.getString());
                } else if ("context".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.setContext(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.odataType = reader.getString();
                } else if ("parsingMode".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.parsingMode = reader.getString();
                } else if ("dataToExtract".equals(fieldName)) {
                    deserializedDocumentExtractionSkill.dataToExtract = reader.getString();
                } else if ("configuration".equals(fieldName)) {
                    Map<String, Object> configuration = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedDocumentExtractionSkill.configuration = configuration;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentExtractionSkill;
        });
    }
}
