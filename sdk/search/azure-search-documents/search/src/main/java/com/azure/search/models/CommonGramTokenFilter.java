// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Construct bigrams for frequently occurring terms while indexing. Single terms are still indexed too, with bigrams
 * overlaid. This token filter is implemented using Apache Lucene.
 */
@Fluent
public final class CommonGramTokenFilter extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.CommonGramTokenFilter";

    /*
     * The set of common words.
     */
    @Generated
    private List<String> commonWords;

    /*
     * A value indicating whether common words matching will be case insensitive. Default is false.
     */
    @Generated
    private Boolean ignoreCase;

    /*
     * A value that indicates whether the token filter is in query mode. When in query mode, the token filter generates
     * bigrams and then removes common words and single terms followed by a common word. Default is false.
     */
    @Generated
    private Boolean useQueryMode;

    /**
     * Creates an instance of CommonGramTokenFilter class.
     */
    @Generated
    public CommonGramTokenFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the commonWords property: The set of common words.
     * 
     * @return the commonWords value.
     */
    @Generated
    public List<String> getCommonWords() {
        return this.commonWords;
    }

    /**
     * Set the commonWords property: The set of common words.
     * 
     * @param commonWords the commonWords value to set.
     * @return the CommonGramTokenFilter object itself.
     */
    @Generated
    public CommonGramTokenFilter setCommonWords(List<String> commonWords) {
        this.commonWords = commonWords;
        return this;
    }

    /**
     * Get the ignoreCase property: A value indicating whether common words matching will be case insensitive. Default
     * is false.
     * 
     * @return the ignoreCase value.
     */
    @Generated
    public Boolean isIgnoreCase() {
        return this.ignoreCase;
    }

    /**
     * Set the ignoreCase property: A value indicating whether common words matching will be case insensitive. Default
     * is false.
     * 
     * @param ignoreCase the ignoreCase value to set.
     * @return the CommonGramTokenFilter object itself.
     */
    @Generated
    public CommonGramTokenFilter setIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * Get the useQueryMode property: A value that indicates whether the token filter is in query mode. When in query
     * mode, the token filter generates bigrams and then removes common words and single terms followed by a common
     * word. Default is false.
     * 
     * @return the useQueryMode value.
     */
    @Generated
    public Boolean isUseQueryMode() {
        return this.useQueryMode;
    }

    /**
     * Set the useQueryMode property: A value that indicates whether the token filter is in query mode. When in query
     * mode, the token filter generates bigrams and then removes common words and single terms followed by a common
     * word. Default is false.
     * 
     * @param useQueryMode the useQueryMode value to set.
     * @return the CommonGramTokenFilter object itself.
     */
    @Generated
    public CommonGramTokenFilter setUseQueryMode(Boolean useQueryMode) {
        this.useQueryMode = useQueryMode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CommonGramTokenFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("commonWords", this.commonWords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeBooleanField("ignoreCase", this.ignoreCase);
        jsonWriter.writeBooleanField("queryMode", this.useQueryMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommonGramTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommonGramTokenFilter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CommonGramTokenFilter.
     */
    @Generated
    public static CommonGramTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommonGramTokenFilter deserializedCommonGramTokenFilter = new CommonGramTokenFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCommonGramTokenFilter.setName(reader.getString());
                } else if ("commonWords".equals(fieldName)) {
                    List<String> commonWords = reader.readArray(reader1 -> reader1.getString());
                    deserializedCommonGramTokenFilter.commonWords = commonWords;
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedCommonGramTokenFilter.odataType = reader.getString();
                } else if ("ignoreCase".equals(fieldName)) {
                    deserializedCommonGramTokenFilter.ignoreCase = reader.getNullable(JsonReader::getBoolean);
                } else if ("queryMode".equals(fieldName)) {
                    deserializedCommonGramTokenFilter.useQueryMode = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommonGramTokenFilter;
        });
    }
}
