// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Using the Text Analytics API, evaluates unstructured text and for each record, provides sentiment labels (such as
 * "negative", "neutral" and "positive") based on the highest confidence score found by the service at a sentence and
 * document-level.
 */
@Fluent
public final class SentimentSkillV3 extends SearchIndexerSkill {
    /*
     * A URI fragment specifying the type of skill.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Text.V3.SentimentSkill";

    /*
     * A value indicating which language code to use. Default is `en`.
     */
    @Generated
    private String defaultLanguageCode;

    /*
     * If set to true, the skill output will include information from Text Analytics for opinion mining, namely targets
     * (nouns or verbs) and their associated assessment (adjective) in the text. Default is false.
     */
    @Generated
    private Boolean includeOpinionMining;

    /*
     * The version of the model to use when calling the Text Analytics service. It will default to the latest available
     * when not specified. We recommend you do not specify this value unless absolutely necessary.
     */
    @Generated
    private String modelVersion;

    /**
     * Creates an instance of SentimentSkillV3 class.
     */
    @Generated
    public SentimentSkillV3() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of skill.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @return the defaultLanguageCode value.
     */
    @Generated
    public String getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the SentimentSkillV3 object itself.
     */
    @Generated
    public SentimentSkillV3 setDefaultLanguageCode(String defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the includeOpinionMining property: If set to true, the skill output will include information from Text
     * Analytics for opinion mining, namely targets (nouns or verbs) and their associated assessment (adjective) in the
     * text. Default is false.
     * 
     * @return the includeOpinionMining value.
     */
    @Generated
    public Boolean isIncludeOpinionMining() {
        return this.includeOpinionMining;
    }

    /**
     * Set the includeOpinionMining property: If set to true, the skill output will include information from Text
     * Analytics for opinion mining, namely targets (nouns or verbs) and their associated assessment (adjective) in the
     * text. Default is false.
     * 
     * @param includeOpinionMining the includeOpinionMining value to set.
     * @return the SentimentSkillV3 object itself.
     */
    @Generated
    public SentimentSkillV3 setIncludeOpinionMining(Boolean includeOpinionMining) {
        this.includeOpinionMining = includeOpinionMining;
        return this;
    }

    /**
     * Get the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     * 
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Set the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     * 
     * @param modelVersion the modelVersion value to set.
     * @return the SentimentSkillV3 object itself.
     */
    @Generated
    public SentimentSkillV3 setModelVersion(String modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SentimentSkillV3 setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SentimentSkillV3 setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SentimentSkillV3 setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SentimentSkillV3 setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SentimentSkillV3 setOutputs(List<OutputFieldMappingEntry> outputs) {
        super.setOutputs(outputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("defaultLanguageCode", this.defaultLanguageCode);
        jsonWriter.writeBooleanField("includeOpinionMining", this.includeOpinionMining);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SentimentSkillV3 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SentimentSkillV3 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SentimentSkillV3.
     */
    @Generated
    public static SentimentSkillV3 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SentimentSkillV3 deserializedSentimentSkillV3 = new SentimentSkillV3();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedSentimentSkillV3.setInputs(inputs);
                } else if ("outputs".equals(fieldName)) {
                    List<OutputFieldMappingEntry> outputs
                        = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    deserializedSentimentSkillV3.setOutputs(outputs);
                } else if ("name".equals(fieldName)) {
                    deserializedSentimentSkillV3.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSentimentSkillV3.setDescription(reader.getString());
                } else if ("context".equals(fieldName)) {
                    deserializedSentimentSkillV3.setContext(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedSentimentSkillV3.odataType = reader.getString();
                } else if ("defaultLanguageCode".equals(fieldName)) {
                    deserializedSentimentSkillV3.defaultLanguageCode = reader.getString();
                } else if ("includeOpinionMining".equals(fieldName)) {
                    deserializedSentimentSkillV3.includeOpinionMining = reader.getNullable(JsonReader::getBoolean);
                } else if ("modelVersion".equals(fieldName)) {
                    deserializedSentimentSkillV3.modelVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSentimentSkillV3;
        });
    }
}
