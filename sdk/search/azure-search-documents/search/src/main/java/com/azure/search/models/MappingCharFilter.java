// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A character filter that applies mappings defined with the mappings option. Matching is greedy (longest pattern
 * matching at a given point wins). Replacement is allowed to be the empty string. This character filter is implemented
 * using Apache Lucene.
 */
@Fluent
public final class MappingCharFilter extends CharFilter {
    /*
     * A URI fragment specifying the type of char filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.MappingCharFilter";

    /*
     * A list of mappings of the following format: "a=>b" (all occurrences of the character "a" will be replaced with
     * character "b").
     */
    @Generated
    private List<String> mappings;

    /**
     * Creates an instance of MappingCharFilter class.
     */
    @Generated
    public MappingCharFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of char filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the mappings property: A list of mappings of the following format: "a=&gt;b" (all occurrences of the
     * character "a" will be replaced with character "b").
     * 
     * @return the mappings value.
     */
    @Generated
    public List<String> getMappings() {
        return this.mappings;
    }

    /**
     * Set the mappings property: A list of mappings of the following format: "a=&gt;b" (all occurrences of the
     * character "a" will be replaced with character "b").
     * 
     * @param mappings the mappings value to set.
     * @return the MappingCharFilter object itself.
     */
    @Generated
    public MappingCharFilter setMappings(List<String> mappings) {
        this.mappings = mappings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MappingCharFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("mappings", this.mappings, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MappingCharFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MappingCharFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MappingCharFilter.
     */
    @Generated
    public static MappingCharFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MappingCharFilter deserializedMappingCharFilter = new MappingCharFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMappingCharFilter.setName(reader.getString());
                } else if ("mappings".equals(fieldName)) {
                    List<String> mappings = reader.readArray(reader1 -> reader1.getString());
                    deserializedMappingCharFilter.mappings = mappings;
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedMappingCharFilter.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMappingCharFilter;
        });
    }
}
