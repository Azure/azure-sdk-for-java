// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Knowledge Source targeting a search index.
 */
@Fluent
public final class SearchIndexKnowledgeSource extends KnowledgeSource {
    /*
     * The type of the knowledge source.
     */
    @Generated
    private KnowledgeSourceKind kind = KnowledgeSourceKind.SEARCH_INDEX;

    /*
     * The parameters for the knowledge source.
     */
    @Generated
    private SearchIndexKnowledgeSourceParameters searchIndexParameters;

    /**
     * Creates an instance of SearchIndexKnowledgeSource class.
     */
    @Generated
    public SearchIndexKnowledgeSource() {
    }

    /**
     * Get the kind property: The type of the knowledge source.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public KnowledgeSourceKind getKind() {
        return this.kind;
    }

    /**
     * Get the searchIndexParameters property: The parameters for the knowledge source.
     * 
     * @return the searchIndexParameters value.
     */
    @Generated
    public SearchIndexKnowledgeSourceParameters getSearchIndexParameters() {
        return this.searchIndexParameters;
    }

    /**
     * Set the searchIndexParameters property: The parameters for the knowledge source.
     * 
     * @param searchIndexParameters the searchIndexParameters value to set.
     * @return the SearchIndexKnowledgeSource object itself.
     */
    @Generated
    public SearchIndexKnowledgeSource
        setSearchIndexParameters(SearchIndexKnowledgeSourceParameters searchIndexParameters) {
        this.searchIndexParameters = searchIndexParameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexKnowledgeSource setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexKnowledgeSource setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexKnowledgeSource setETag(String eTag) {
        super.setETag(eTag);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexKnowledgeSource setEncryptionKey(SearchResourceEncryptionKey encryptionKey) {
        super.setEncryptionKey(encryptionKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("@odata.etag", getETag());
        jsonWriter.writeJsonField("encryptionKey", getEncryptionKey());
        jsonWriter.writeJsonField("searchIndexParameters", this.searchIndexParameters);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexKnowledgeSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexKnowledgeSource if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexKnowledgeSource.
     */
    @Generated
    public static SearchIndexKnowledgeSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchIndexKnowledgeSource deserializedSearchIndexKnowledgeSource = new SearchIndexKnowledgeSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource.setDescription(reader.getString());
                } else if ("@odata.etag".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource.setETag(reader.getString());
                } else if ("encryptionKey".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource
                        .setEncryptionKey(SearchResourceEncryptionKey.fromJson(reader));
                } else if ("searchIndexParameters".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource.searchIndexParameters
                        = SearchIndexKnowledgeSourceParameters.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedSearchIndexKnowledgeSource.kind = KnowledgeSourceKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchIndexKnowledgeSource;
        });
    }
}
