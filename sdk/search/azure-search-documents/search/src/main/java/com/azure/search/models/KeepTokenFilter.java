// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A token filter that only keeps tokens with text contained in a specified list of words. This token filter is
 * implemented using Apache Lucene.
 */
@Fluent
public final class KeepTokenFilter extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.KeepTokenFilter";

    /*
     * The list of words to keep.
     */
    @Generated
    private List<String> keepWords;

    /*
     * A value indicating whether to lower case all words first. Default is false.
     */
    @Generated
    private Boolean lowerCaseKeepWords;

    /**
     * Creates an instance of KeepTokenFilter class.
     */
    @Generated
    public KeepTokenFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the keepWords property: The list of words to keep.
     * 
     * @return the keepWords value.
     */
    @Generated
    public List<String> getKeepWords() {
        return this.keepWords;
    }

    /**
     * Set the keepWords property: The list of words to keep.
     * 
     * @param keepWords the keepWords value to set.
     * @return the KeepTokenFilter object itself.
     */
    @Generated
    public KeepTokenFilter setKeepWords(List<String> keepWords) {
        this.keepWords = keepWords;
        return this;
    }

    /**
     * Get the lowerCaseKeepWords property: A value indicating whether to lower case all words first. Default is false.
     * 
     * @return the lowerCaseKeepWords value.
     */
    @Generated
    public Boolean isLowerCaseKeepWords() {
        return this.lowerCaseKeepWords;
    }

    /**
     * Set the lowerCaseKeepWords property: A value indicating whether to lower case all words first. Default is false.
     * 
     * @param lowerCaseKeepWords the lowerCaseKeepWords value to set.
     * @return the KeepTokenFilter object itself.
     */
    @Generated
    public KeepTokenFilter setLowerCaseKeepWords(Boolean lowerCaseKeepWords) {
        this.lowerCaseKeepWords = lowerCaseKeepWords;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KeepTokenFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("keepWords", this.keepWords, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeBooleanField("keepWordsCase", this.lowerCaseKeepWords);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeepTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeepTokenFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeepTokenFilter.
     */
    @Generated
    public static KeepTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeepTokenFilter deserializedKeepTokenFilter = new KeepTokenFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedKeepTokenFilter.setName(reader.getString());
                } else if ("keepWords".equals(fieldName)) {
                    List<String> keepWords = reader.readArray(reader1 -> reader1.getString());
                    deserializedKeepTokenFilter.keepWords = keepWords;
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedKeepTokenFilter.odataType = reader.getString();
                } else if ("keepWordsCase".equals(fieldName)) {
                    deserializedKeepTokenFilter.lowerCaseKeepWords = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeepTokenFilter;
        });
    }
}
