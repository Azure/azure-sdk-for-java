// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response from a get service statistics request. If successful, it includes service level counters, indexer runtime
 * information, and limits.
 */
@Fluent
public final class ServiceStatistics implements JsonSerializable<ServiceStatistics> {
    /*
     * Service level resource counters.
     */
    @Generated
    private ServiceCounters counters;

    /*
     * Service level indexers runtime information.
     */
    @Generated
    private ServiceIndexersRuntime indexersRuntime;

    /*
     * Service level general limits.
     */
    @Generated
    private ServiceLimits limits;

    /**
     * Creates an instance of ServiceStatistics class.
     */
    @Generated
    public ServiceStatistics() {
    }

    /**
     * Get the counters property: Service level resource counters.
     * 
     * @return the counters value.
     */
    @Generated
    public ServiceCounters getCounters() {
        return this.counters;
    }

    /**
     * Set the counters property: Service level resource counters.
     * 
     * @param counters the counters value to set.
     * @return the ServiceStatistics object itself.
     */
    @Generated
    public ServiceStatistics setCounters(ServiceCounters counters) {
        this.counters = counters;
        return this;
    }

    /**
     * Get the indexersRuntime property: Service level indexers runtime information.
     * 
     * @return the indexersRuntime value.
     */
    @Generated
    public ServiceIndexersRuntime getIndexersRuntime() {
        return this.indexersRuntime;
    }

    /**
     * Set the indexersRuntime property: Service level indexers runtime information.
     * 
     * @param indexersRuntime the indexersRuntime value to set.
     * @return the ServiceStatistics object itself.
     */
    @Generated
    public ServiceStatistics setIndexersRuntime(ServiceIndexersRuntime indexersRuntime) {
        this.indexersRuntime = indexersRuntime;
        return this;
    }

    /**
     * Get the limits property: Service level general limits.
     * 
     * @return the limits value.
     */
    @Generated
    public ServiceLimits getLimits() {
        return this.limits;
    }

    /**
     * Set the limits property: Service level general limits.
     * 
     * @param limits the limits value to set.
     * @return the ServiceStatistics object itself.
     */
    @Generated
    public ServiceStatistics setLimits(ServiceLimits limits) {
        this.limits = limits;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("counters", this.counters);
        jsonWriter.writeJsonField("indexersRuntime", this.indexersRuntime);
        jsonWriter.writeJsonField("limits", this.limits);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceStatistics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceStatistics.
     */
    @Generated
    public static ServiceStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceStatistics deserializedServiceStatistics = new ServiceStatistics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("counters".equals(fieldName)) {
                    deserializedServiceStatistics.counters = ServiceCounters.fromJson(reader);
                } else if ("indexersRuntime".equals(fieldName)) {
                    deserializedServiceStatistics.indexersRuntime = ServiceIndexersRuntime.fromJson(reader);
                } else if ("limits".equals(fieldName)) {
                    deserializedServiceStatistics.limits = ServiceLimits.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceStatistics;
        });
    }
}
