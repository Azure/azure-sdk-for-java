// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of additional projections to azure blob, table, or files, of enriched data.
 */
@Fluent
public final class SearchIndexerKnowledgeStore implements JsonSerializable<SearchIndexerKnowledgeStore> {
    /*
     * The connection string to the storage account projections will be stored in.
     */
    @Generated
    private String storageConnectionString;

    /*
     * A list of additional projections to perform during indexing.
     */
    @Generated
    private List<SearchIndexerKnowledgeStoreProjection> projections;

    /*
     * The user-assigned managed identity used for connections to Azure Storage when writing knowledge store
     * projections. If the connection string indicates an identity (ResourceId) and it's not specified, the
     * system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the value
     * remains unchanged. If set to "none", the value of this property is cleared.
     */
    @Generated
    private SearchIndexerDataIdentity identity;

    /*
     * A dictionary of knowledge store-specific configuration properties. Each name is the name of a specific property.
     * Each value must be of a primitive type.
     */
    @Generated
    private SearchIndexerKnowledgeStoreParameters parameters;

    /**
     * Creates an instance of SearchIndexerKnowledgeStore class.
     */
    @Generated
    public SearchIndexerKnowledgeStore() {
    }

    /**
     * Get the storageConnectionString property: The connection string to the storage account projections will be stored
     * in.
     * 
     * @return the storageConnectionString value.
     */
    @Generated
    public String getStorageConnectionString() {
        return this.storageConnectionString;
    }

    /**
     * Set the storageConnectionString property: The connection string to the storage account projections will be stored
     * in.
     * 
     * @param storageConnectionString the storageConnectionString value to set.
     * @return the SearchIndexerKnowledgeStore object itself.
     */
    @Generated
    public SearchIndexerKnowledgeStore setStorageConnectionString(String storageConnectionString) {
        this.storageConnectionString = storageConnectionString;
        return this;
    }

    /**
     * Get the projections property: A list of additional projections to perform during indexing.
     * 
     * @return the projections value.
     */
    @Generated
    public List<SearchIndexerKnowledgeStoreProjection> getProjections() {
        return this.projections;
    }

    /**
     * Set the projections property: A list of additional projections to perform during indexing.
     * 
     * @param projections the projections value to set.
     * @return the SearchIndexerKnowledgeStore object itself.
     */
    @Generated
    public SearchIndexerKnowledgeStore setProjections(List<SearchIndexerKnowledgeStoreProjection> projections) {
        this.projections = projections;
        return this;
    }

    /**
     * Get the identity property: The user-assigned managed identity used for connections to Azure Storage when writing
     * knowledge store projections. If the connection string indicates an identity (ResourceId) and it's not specified,
     * the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the
     * value remains unchanged. If set to "none", the value of this property is cleared.
     * 
     * @return the identity value.
     */
    @Generated
    public SearchIndexerDataIdentity getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: The user-assigned managed identity used for connections to Azure Storage when writing
     * knowledge store projections. If the connection string indicates an identity (ResourceId) and it's not specified,
     * the system-assigned managed identity is used. On updates to the indexer, if the identity is unspecified, the
     * value remains unchanged. If set to "none", the value of this property is cleared.
     * 
     * @param identity the identity value to set.
     * @return the SearchIndexerKnowledgeStore object itself.
     */
    @Generated
    public SearchIndexerKnowledgeStore setIdentity(SearchIndexerDataIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the parameters property: A dictionary of knowledge store-specific configuration properties. Each name is the
     * name of a specific property. Each value must be of a primitive type.
     * 
     * @return the parameters value.
     */
    @Generated
    public SearchIndexerKnowledgeStoreParameters getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: A dictionary of knowledge store-specific configuration properties. Each name is the
     * name of a specific property. Each value must be of a primitive type.
     * 
     * @param parameters the parameters value to set.
     * @return the SearchIndexerKnowledgeStore object itself.
     */
    @Generated
    public SearchIndexerKnowledgeStore setParameters(SearchIndexerKnowledgeStoreParameters parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageConnectionString", this.storageConnectionString);
        jsonWriter.writeArrayField("projections", this.projections, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexerKnowledgeStore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerKnowledgeStore if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexerKnowledgeStore.
     */
    @Generated
    public static SearchIndexerKnowledgeStore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchIndexerKnowledgeStore deserializedSearchIndexerKnowledgeStore = new SearchIndexerKnowledgeStore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageConnectionString".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStore.storageConnectionString = reader.getString();
                } else if ("projections".equals(fieldName)) {
                    List<SearchIndexerKnowledgeStoreProjection> projections
                        = reader.readArray(reader1 -> SearchIndexerKnowledgeStoreProjection.fromJson(reader1));
                    deserializedSearchIndexerKnowledgeStore.projections = projections;
                } else if ("identity".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStore.identity = SearchIndexerDataIdentity.fromJson(reader);
                } else if ("parameters".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStore.parameters
                        = SearchIndexerKnowledgeStoreParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchIndexerKnowledgeStore;
        });
    }
}
