// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Language specific stemming filter. This token filter is implemented using Apache Lucene.
 */
@Fluent
public final class StemmerTokenFilter extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.StemmerTokenFilter";

    /*
     * The language to use.
     */
    @Generated
    private StemmerTokenFilterLanguage language;

    /**
     * Creates an instance of StemmerTokenFilter class.
     */
    @Generated
    public StemmerTokenFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the language property: The language to use.
     * 
     * @return the language value.
     */
    @Generated
    public StemmerTokenFilterLanguage getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: The language to use.
     * 
     * @param language the language value to set.
     * @return the StemmerTokenFilter object itself.
     */
    @Generated
    public StemmerTokenFilter setLanguage(StemmerTokenFilterLanguage language) {
        this.language = language;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StemmerTokenFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("language", this.language == null ? null : this.language.toString());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StemmerTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StemmerTokenFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StemmerTokenFilter.
     */
    @Generated
    public static StemmerTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StemmerTokenFilter deserializedStemmerTokenFilter = new StemmerTokenFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStemmerTokenFilter.setName(reader.getString());
                } else if ("language".equals(fieldName)) {
                    deserializedStemmerTokenFilter.language = StemmerTokenFilterLanguage.fromString(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedStemmerTokenFilter.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStemmerTokenFilter;
        });
    }
}
