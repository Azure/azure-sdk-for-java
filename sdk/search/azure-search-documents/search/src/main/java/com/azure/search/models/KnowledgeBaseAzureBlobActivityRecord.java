// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents a azure blob retrieval activity record.
 */
@Fluent
public final class KnowledgeBaseAzureBlobActivityRecord extends KnowledgeBaseRetrievalActivityRecord {
    /*
     * The type of the activity record.
     */
    @Generated
    private String type = "azureBlob";

    /*
     * The azure blob arguments for the retrieval activity.
     */
    @Generated
    private KnowledgeBaseAzureBlobActivityArguments azureBlobArguments;

    /**
     * Creates an instance of KnowledgeBaseAzureBlobActivityRecord class.
     */
    @Generated
    public KnowledgeBaseAzureBlobActivityRecord() {
    }

    /**
     * Get the type property: The type of the activity record.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the azureBlobArguments property: The azure blob arguments for the retrieval activity.
     * 
     * @return the azureBlobArguments value.
     */
    @Generated
    public KnowledgeBaseAzureBlobActivityArguments getAzureBlobArguments() {
        return this.azureBlobArguments;
    }

    /**
     * Set the azureBlobArguments property: The azure blob arguments for the retrieval activity.
     * 
     * @param azureBlobArguments the azureBlobArguments value to set.
     * @return the KnowledgeBaseAzureBlobActivityRecord object itself.
     */
    @Generated
    public KnowledgeBaseAzureBlobActivityRecord
        setAzureBlobArguments(KnowledgeBaseAzureBlobActivityArguments azureBlobArguments) {
        this.azureBlobArguments = azureBlobArguments;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setKnowledgeSourceName(String knowledgeSourceName) {
        super.setKnowledgeSourceName(knowledgeSourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setQueryTime(OffsetDateTime queryTime) {
        super.setQueryTime(queryTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setCount(Integer count) {
        super.setCount(count);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setId(int id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setElapsedMs(Integer elapsedMs) {
        super.setElapsedMs(elapsedMs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseAzureBlobActivityRecord setError(KnowledgeBaseErrorDetail error) {
        super.setError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", getId());
        jsonWriter.writeNumberField("elapsedMs", getElapsedMs());
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("knowledgeSourceName", getKnowledgeSourceName());
        jsonWriter.writeStringField("queryTime",
            getQueryTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getQueryTime()));
        jsonWriter.writeNumberField("count", getCount());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("azureBlobArguments", this.azureBlobArguments);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeBaseAzureBlobActivityRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeBaseAzureBlobActivityRecord if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeBaseAzureBlobActivityRecord.
     */
    @Generated
    public static KnowledgeBaseAzureBlobActivityRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KnowledgeBaseAzureBlobActivityRecord deserializedKnowledgeBaseAzureBlobActivityRecord
                = new KnowledgeBaseAzureBlobActivityRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.setId(reader.getInt());
                } else if ("elapsedMs".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord
                        .setElapsedMs(reader.getNullable(JsonReader::getInt));
                } else if ("error".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord
                        .setError(KnowledgeBaseErrorDetail.fromJson(reader));
                } else if ("knowledgeSourceName".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.setKnowledgeSourceName(reader.getString());
                } else if ("queryTime".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.setQueryTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("count".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.setCount(reader.getNullable(JsonReader::getInt));
                } else if ("type".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.type = reader.getString();
                } else if ("azureBlobArguments".equals(fieldName)) {
                    deserializedKnowledgeBaseAzureBlobActivityRecord.azureBlobArguments
                        = KnowledgeBaseAzureBlobActivityArguments.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKnowledgeBaseAzureBlobActivityRecord;
        });
    }
}
