// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Decomposes compound words found in many Germanic languages. This token filter is implemented using Apache Lucene.
 */
@Fluent
public final class DictionaryDecompounderTokenFilter extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter";

    /*
     * The list of words to match against.
     */
    @Generated
    private List<String> wordList;

    /*
     * The minimum word size. Only words longer than this get processed. Default is 5. Maximum is 300.
     */
    @Generated
    private Integer minWordSize;

    /*
     * The minimum subword size. Only subwords longer than this are outputted. Default is 2. Maximum is 300.
     */
    @Generated
    private Integer minSubwordSize;

    /*
     * The maximum subword size. Only subwords shorter than this are outputted. Default is 15. Maximum is 300.
     */
    @Generated
    private Integer maxSubwordSize;

    /*
     * A value indicating whether to add only the longest matching subword to the output. Default is false.
     */
    @Generated
    private Boolean onlyLongestMatch;

    /**
     * Creates an instance of DictionaryDecompounderTokenFilter class.
     */
    @Generated
    public DictionaryDecompounderTokenFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the wordList property: The list of words to match against.
     * 
     * @return the wordList value.
     */
    @Generated
    public List<String> getWordList() {
        return this.wordList;
    }

    /**
     * Set the wordList property: The list of words to match against.
     * 
     * @param wordList the wordList value to set.
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    @Generated
    public DictionaryDecompounderTokenFilter setWordList(List<String> wordList) {
        this.wordList = wordList;
        return this;
    }

    /**
     * Get the minWordSize property: The minimum word size. Only words longer than this get processed. Default is 5.
     * Maximum is 300.
     * 
     * @return the minWordSize value.
     */
    @Generated
    public Integer getMinWordSize() {
        return this.minWordSize;
    }

    /**
     * Set the minWordSize property: The minimum word size. Only words longer than this get processed. Default is 5.
     * Maximum is 300.
     * 
     * @param minWordSize the minWordSize value to set.
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    @Generated
    public DictionaryDecompounderTokenFilter setMinWordSize(Integer minWordSize) {
        this.minWordSize = minWordSize;
        return this;
    }

    /**
     * Get the minSubwordSize property: The minimum subword size. Only subwords longer than this are outputted. Default
     * is 2. Maximum is 300.
     * 
     * @return the minSubwordSize value.
     */
    @Generated
    public Integer getMinSubwordSize() {
        return this.minSubwordSize;
    }

    /**
     * Set the minSubwordSize property: The minimum subword size. Only subwords longer than this are outputted. Default
     * is 2. Maximum is 300.
     * 
     * @param minSubwordSize the minSubwordSize value to set.
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    @Generated
    public DictionaryDecompounderTokenFilter setMinSubwordSize(Integer minSubwordSize) {
        this.minSubwordSize = minSubwordSize;
        return this;
    }

    /**
     * Get the maxSubwordSize property: The maximum subword size. Only subwords shorter than this are outputted. Default
     * is 15. Maximum is 300.
     * 
     * @return the maxSubwordSize value.
     */
    @Generated
    public Integer getMaxSubwordSize() {
        return this.maxSubwordSize;
    }

    /**
     * Set the maxSubwordSize property: The maximum subword size. Only subwords shorter than this are outputted. Default
     * is 15. Maximum is 300.
     * 
     * @param maxSubwordSize the maxSubwordSize value to set.
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    @Generated
    public DictionaryDecompounderTokenFilter setMaxSubwordSize(Integer maxSubwordSize) {
        this.maxSubwordSize = maxSubwordSize;
        return this;
    }

    /**
     * Get the onlyLongestMatch property: A value indicating whether to add only the longest matching subword to the
     * output. Default is false.
     * 
     * @return the onlyLongestMatch value.
     */
    @Generated
    public Boolean isOnlyLongestMatch() {
        return this.onlyLongestMatch;
    }

    /**
     * Set the onlyLongestMatch property: A value indicating whether to add only the longest matching subword to the
     * output. Default is false.
     * 
     * @param onlyLongestMatch the onlyLongestMatch value to set.
     * @return the DictionaryDecompounderTokenFilter object itself.
     */
    @Generated
    public DictionaryDecompounderTokenFilter setOnlyLongestMatch(Boolean onlyLongestMatch) {
        this.onlyLongestMatch = onlyLongestMatch;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DictionaryDecompounderTokenFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("wordList", this.wordList, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeNumberField("minWordSize", this.minWordSize);
        jsonWriter.writeNumberField("minSubwordSize", this.minSubwordSize);
        jsonWriter.writeNumberField("maxSubwordSize", this.maxSubwordSize);
        jsonWriter.writeBooleanField("onlyLongestMatch", this.onlyLongestMatch);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DictionaryDecompounderTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DictionaryDecompounderTokenFilter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DictionaryDecompounderTokenFilter.
     */
    @Generated
    public static DictionaryDecompounderTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DictionaryDecompounderTokenFilter deserializedDictionaryDecompounderTokenFilter
                = new DictionaryDecompounderTokenFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.setName(reader.getString());
                } else if ("wordList".equals(fieldName)) {
                    List<String> wordList = reader.readArray(reader1 -> reader1.getString());
                    deserializedDictionaryDecompounderTokenFilter.wordList = wordList;
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.odataType = reader.getString();
                } else if ("minWordSize".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.minWordSize = reader.getNullable(JsonReader::getInt);
                } else if ("minSubwordSize".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.minSubwordSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxSubwordSize".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.maxSubwordSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("onlyLongestMatch".equals(fieldName)) {
                    deserializedDictionaryDecompounderTokenFilter.onlyLongestMatch
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDictionaryDecompounderTokenFilter;
        });
    }
}
