// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The query parameters to use for vector search when a raw vector value is provided.
 */
@Fluent
public final class VectorizedQuery extends VectorQuery {
    /*
     * The kind of vector query being performed.
     */
    @Generated
    private VectorQueryKind kind = VectorQueryKind.VECTOR;

    /*
     * The vector representation of a search query.
     */
    @Generated
    private List<Float> vector;

    /**
     * Creates an instance of VectorizedQuery class.
     */
    @Generated
    public VectorizedQuery() {
    }

    /**
     * Get the kind property: The kind of vector query being performed.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public VectorQueryKind getKind() {
        return this.kind;
    }

    /**
     * Get the vector property: The vector representation of a search query.
     * 
     * @return the vector value.
     */
    @Generated
    public List<Float> getVector() {
        return this.vector;
    }

    /**
     * Set the vector property: The vector representation of a search query.
     * 
     * @param vector the vector value to set.
     * @return the VectorizedQuery object itself.
     */
    @Generated
    public VectorizedQuery setVector(List<Float> vector) {
        this.vector = vector;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setK(Integer k) {
        super.setK(k);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setFields(String fields) {
        super.setFields(fields);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setExhaustive(Boolean exhaustive) {
        super.setExhaustive(exhaustive);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setOversampling(Double oversampling) {
        super.setOversampling(oversampling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setWeight(Float weight) {
        super.setWeight(weight);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setThreshold(VectorThreshold threshold) {
        super.setThreshold(threshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setFilterOverride(String filterOverride) {
        super.setFilterOverride(filterOverride);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public VectorizedQuery setPerDocumentVectorLimit(Integer perDocumentVectorLimit) {
        super.setPerDocumentVectorLimit(perDocumentVectorLimit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("k", getK());
        jsonWriter.writeStringField("fields", getFields());
        jsonWriter.writeBooleanField("exhaustive", isExhaustive());
        jsonWriter.writeNumberField("oversampling", getOversampling());
        jsonWriter.writeNumberField("weight", getWeight());
        jsonWriter.writeJsonField("threshold", getThreshold());
        jsonWriter.writeStringField("filterOverride", getFilterOverride());
        jsonWriter.writeNumberField("perDocumentVectorLimit", getPerDocumentVectorLimit());
        jsonWriter.writeArrayField("vector", this.vector, (writer, element) -> writer.writeFloat(element));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorizedQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorizedQuery if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VectorizedQuery.
     */
    @Generated
    public static VectorizedQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VectorizedQuery deserializedVectorizedQuery = new VectorizedQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("k".equals(fieldName)) {
                    deserializedVectorizedQuery.setK(reader.getNullable(JsonReader::getInt));
                } else if ("fields".equals(fieldName)) {
                    deserializedVectorizedQuery.setFields(reader.getString());
                } else if ("exhaustive".equals(fieldName)) {
                    deserializedVectorizedQuery.setExhaustive(reader.getNullable(JsonReader::getBoolean));
                } else if ("oversampling".equals(fieldName)) {
                    deserializedVectorizedQuery.setOversampling(reader.getNullable(JsonReader::getDouble));
                } else if ("weight".equals(fieldName)) {
                    deserializedVectorizedQuery.setWeight(reader.getNullable(JsonReader::getFloat));
                } else if ("threshold".equals(fieldName)) {
                    deserializedVectorizedQuery.setThreshold(VectorThreshold.fromJson(reader));
                } else if ("filterOverride".equals(fieldName)) {
                    deserializedVectorizedQuery.setFilterOverride(reader.getString());
                } else if ("perDocumentVectorLimit".equals(fieldName)) {
                    deserializedVectorizedQuery.setPerDocumentVectorLimit(reader.getNullable(JsonReader::getInt));
                } else if ("vector".equals(fieldName)) {
                    List<Float> vector = reader.readArray(reader1 -> reader1.getFloat());
                    deserializedVectorizedQuery.vector = vector;
                } else if ("kind".equals(fieldName)) {
                    deserializedVectorizedQuery.kind = VectorQueryKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVectorizedQuery;
        });
    }
}
