// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents a search index retrieval activity record.
 */
@Fluent
public final class KnowledgeBaseSearchIndexActivityRecord extends KnowledgeBaseRetrievalActivityRecord {
    /*
     * The type of the activity record.
     */
    @Generated
    private String type = "searchIndex";

    /*
     * The search index arguments for the retrieval activity.
     */
    @Generated
    private KnowledgeBaseSearchIndexActivityArguments searchIndexArguments;

    /**
     * Creates an instance of KnowledgeBaseSearchIndexActivityRecord class.
     */
    @Generated
    public KnowledgeBaseSearchIndexActivityRecord() {
    }

    /**
     * Get the type property: The type of the activity record.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the searchIndexArguments property: The search index arguments for the retrieval activity.
     * 
     * @return the searchIndexArguments value.
     */
    @Generated
    public KnowledgeBaseSearchIndexActivityArguments getSearchIndexArguments() {
        return this.searchIndexArguments;
    }

    /**
     * Set the searchIndexArguments property: The search index arguments for the retrieval activity.
     * 
     * @param searchIndexArguments the searchIndexArguments value to set.
     * @return the KnowledgeBaseSearchIndexActivityRecord object itself.
     */
    @Generated
    public KnowledgeBaseSearchIndexActivityRecord
        setSearchIndexArguments(KnowledgeBaseSearchIndexActivityArguments searchIndexArguments) {
        this.searchIndexArguments = searchIndexArguments;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setKnowledgeSourceName(String knowledgeSourceName) {
        super.setKnowledgeSourceName(knowledgeSourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setQueryTime(OffsetDateTime queryTime) {
        super.setQueryTime(queryTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setCount(Integer count) {
        super.setCount(count);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setId(int id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setElapsedMs(Integer elapsedMs) {
        super.setElapsedMs(elapsedMs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseSearchIndexActivityRecord setError(KnowledgeBaseErrorDetail error) {
        super.setError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", getId());
        jsonWriter.writeNumberField("elapsedMs", getElapsedMs());
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("knowledgeSourceName", getKnowledgeSourceName());
        jsonWriter.writeStringField("queryTime",
            getQueryTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getQueryTime()));
        jsonWriter.writeNumberField("count", getCount());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("searchIndexArguments", this.searchIndexArguments);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeBaseSearchIndexActivityRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeBaseSearchIndexActivityRecord if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeBaseSearchIndexActivityRecord.
     */
    @Generated
    public static KnowledgeBaseSearchIndexActivityRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KnowledgeBaseSearchIndexActivityRecord deserializedKnowledgeBaseSearchIndexActivityRecord
                = new KnowledgeBaseSearchIndexActivityRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.setId(reader.getInt());
                } else if ("elapsedMs".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord
                        .setElapsedMs(reader.getNullable(JsonReader::getInt));
                } else if ("error".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord
                        .setError(KnowledgeBaseErrorDetail.fromJson(reader));
                } else if ("knowledgeSourceName".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.setKnowledgeSourceName(reader.getString());
                } else if ("queryTime".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.setQueryTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("count".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.setCount(reader.getNullable(JsonReader::getInt));
                } else if ("type".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.type = reader.getString();
                } else if ("searchIndexArguments".equals(fieldName)) {
                    deserializedKnowledgeBaseSearchIndexActivityRecord.searchIndexArguments
                        = KnowledgeBaseSearchIndexActivityArguments.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKnowledgeBaseSearchIndexActivityRecord;
        });
    }
}
