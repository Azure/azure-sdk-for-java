// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or
 * decrypt data-at-rest, such as indexes and synonym maps.
 */
@Fluent
public final class SearchResourceEncryptionKey implements JsonSerializable<SearchResourceEncryptionKey> {
    /*
     * The name of your Azure Key Vault key to be used to encrypt your data at rest.
     */
    @Generated
    private String keyName;

    /*
     * The version of your Azure Key Vault key to be used to encrypt your data at rest.
     */
    @Generated
    private String keyVersion;

    /*
     * The URI of your Azure Key Vault, also referred to as DNS name, that contains the key to be used to encrypt your
     * data at rest. An example URI might be `https://my-keyvault-name.vault.azure.net`.
     */
    @Generated
    private String vaultUri;

    /*
     * Optional Azure Active Directory credentials used for accessing your Azure Key Vault. Not required if using
     * managed identity instead.
     */
    @Generated
    private AzureActiveDirectoryApplicationCredentials accessCredentials;

    /*
     * An explicit managed identity to use for this encryption key. If not specified and the access credentials property
     * is null, the system-assigned managed identity is used. On update to the resource, if the explicit identity is
     * unspecified, it remains unchanged. If "none" is specified, the value of this property is cleared.
     */
    @Generated
    private SearchIndexerDataIdentity identity;

    /**
     * Creates an instance of SearchResourceEncryptionKey class.
     */
    @Generated
    public SearchResourceEncryptionKey() {
    }

    /**
     * Get the keyName property: The name of your Azure Key Vault key to be used to encrypt your data at rest.
     * 
     * @return the keyName value.
     */
    @Generated
    public String getKeyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The name of your Azure Key Vault key to be used to encrypt your data at rest.
     * 
     * @param keyName the keyName value to set.
     * @return the SearchResourceEncryptionKey object itself.
     */
    @Generated
    public SearchResourceEncryptionKey setKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: The version of your Azure Key Vault key to be used to encrypt your data at rest.
     * 
     * @return the keyVersion value.
     */
    @Generated
    public String getKeyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: The version of your Azure Key Vault key to be used to encrypt your data at rest.
     * 
     * @param keyVersion the keyVersion value to set.
     * @return the SearchResourceEncryptionKey object itself.
     */
    @Generated
    public SearchResourceEncryptionKey setKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Get the vaultUri property: The URI of your Azure Key Vault, also referred to as DNS name, that contains the key
     * to be used to encrypt your data at rest. An example URI might be `https://my-keyvault-name.vault.azure.net`.
     * 
     * @return the vaultUri value.
     */
    @Generated
    public String getVaultUri() {
        return this.vaultUri;
    }

    /**
     * Set the vaultUri property: The URI of your Azure Key Vault, also referred to as DNS name, that contains the key
     * to be used to encrypt your data at rest. An example URI might be `https://my-keyvault-name.vault.azure.net`.
     * 
     * @param vaultUri the vaultUri value to set.
     * @return the SearchResourceEncryptionKey object itself.
     */
    @Generated
    public SearchResourceEncryptionKey setVaultUri(String vaultUri) {
        this.vaultUri = vaultUri;
        return this;
    }

    /**
     * Get the accessCredentials property: Optional Azure Active Directory credentials used for accessing your Azure Key
     * Vault. Not required if using managed identity instead.
     * 
     * @return the accessCredentials value.
     */
    @Generated
    public AzureActiveDirectoryApplicationCredentials getAccessCredentials() {
        return this.accessCredentials;
    }

    /**
     * Set the accessCredentials property: Optional Azure Active Directory credentials used for accessing your Azure Key
     * Vault. Not required if using managed identity instead.
     * 
     * @param accessCredentials the accessCredentials value to set.
     * @return the SearchResourceEncryptionKey object itself.
     */
    @Generated
    public SearchResourceEncryptionKey
        setAccessCredentials(AzureActiveDirectoryApplicationCredentials accessCredentials) {
        this.accessCredentials = accessCredentials;
        return this;
    }

    /**
     * Get the identity property: An explicit managed identity to use for this encryption key. If not specified and the
     * access credentials property is null, the system-assigned managed identity is used. On update to the resource, if
     * the explicit identity is unspecified, it remains unchanged. If "none" is specified, the value of this property is
     * cleared.
     * 
     * @return the identity value.
     */
    @Generated
    public SearchIndexerDataIdentity getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: An explicit managed identity to use for this encryption key. If not specified and the
     * access credentials property is null, the system-assigned managed identity is used. On update to the resource, if
     * the explicit identity is unspecified, it remains unchanged. If "none" is specified, the value of this property is
     * cleared.
     * 
     * @param identity the identity value to set.
     * @return the SearchResourceEncryptionKey object itself.
     */
    @Generated
    public SearchResourceEncryptionKey setIdentity(SearchIndexerDataIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultKeyName", this.keyName);
        jsonWriter.writeStringField("keyVaultUri", this.vaultUri);
        jsonWriter.writeStringField("keyVaultKeyVersion", this.keyVersion);
        jsonWriter.writeJsonField("accessCredentials", this.accessCredentials);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchResourceEncryptionKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchResourceEncryptionKey if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchResourceEncryptionKey.
     */
    @Generated
    public static SearchResourceEncryptionKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchResourceEncryptionKey deserializedSearchResourceEncryptionKey = new SearchResourceEncryptionKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultKeyName".equals(fieldName)) {
                    deserializedSearchResourceEncryptionKey.keyName = reader.getString();
                } else if ("keyVaultUri".equals(fieldName)) {
                    deserializedSearchResourceEncryptionKey.vaultUri = reader.getString();
                } else if ("keyVaultKeyVersion".equals(fieldName)) {
                    deserializedSearchResourceEncryptionKey.keyVersion = reader.getString();
                } else if ("accessCredentials".equals(fieldName)) {
                    deserializedSearchResourceEncryptionKey.accessCredentials
                        = AzureActiveDirectoryApplicationCredentials.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedSearchResourceEncryptionKey.identity = SearchIndexerDataIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchResourceEncryptionKey;
        });
    }
}
