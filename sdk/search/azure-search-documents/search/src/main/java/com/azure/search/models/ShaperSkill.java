// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A skill for reshaping the outputs. It creates a complex type to support composite fields (also known as multipart
 * fields).
 */
@Fluent
public final class ShaperSkill extends SearchIndexerSkill {
    /*
     * A URI fragment specifying the type of skill.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Util.ShaperSkill";

    /**
     * Creates an instance of ShaperSkill class.
     */
    @Generated
    public ShaperSkill() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of skill.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ShaperSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ShaperSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ShaperSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ShaperSkill setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ShaperSkill setOutputs(List<OutputFieldMappingEntry> outputs) {
        super.setOutputs(outputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShaperSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShaperSkill if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ShaperSkill.
     */
    @Generated
    public static ShaperSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShaperSkill deserializedShaperSkill = new ShaperSkill();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedShaperSkill.setInputs(inputs);
                } else if ("outputs".equals(fieldName)) {
                    List<OutputFieldMappingEntry> outputs
                        = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    deserializedShaperSkill.setOutputs(outputs);
                } else if ("name".equals(fieldName)) {
                    deserializedShaperSkill.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedShaperSkill.setDescription(reader.getString());
                } else if ("context".equals(fieldName)) {
                    deserializedShaperSkill.setContext(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedShaperSkill.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShaperSkill;
        });
    }
}
