// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Represents an Azure Blob Storage document reference.
 */
@Fluent
public final class KnowledgeBaseIndexedSharePointReference extends KnowledgeBaseReference {
    /*
     * The type of the reference.
     */
    @Generated
    private String type = "indexedSharePoint";

    /*
     * The document URL for the reference.
     */
    @Generated
    private String docUrl;

    /**
     * Creates an instance of KnowledgeBaseIndexedSharePointReference class.
     */
    @Generated
    public KnowledgeBaseIndexedSharePointReference() {
    }

    /**
     * Get the type property: The type of the reference.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the docUrl property: The document URL for the reference.
     * 
     * @return the docUrl value.
     */
    @Generated
    public String getDocUrl() {
        return this.docUrl;
    }

    /**
     * Set the docUrl property: The document URL for the reference.
     * 
     * @param docUrl the docUrl value to set.
     * @return the KnowledgeBaseIndexedSharePointReference object itself.
     */
    @Generated
    public KnowledgeBaseIndexedSharePointReference setDocUrl(String docUrl) {
        this.docUrl = docUrl;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseIndexedSharePointReference setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseIndexedSharePointReference setActivitySource(int activitySource) {
        super.setActivitySource(activitySource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseIndexedSharePointReference setSourceData(Map<String, Object> sourceData) {
        super.setSourceData(sourceData);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseIndexedSharePointReference setRerankerScore(Float rerankerScore) {
        super.setRerankerScore(rerankerScore);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeIntField("activitySource", getActivitySource());
        jsonWriter.writeMapField("sourceData", getSourceData(), (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeNumberField("rerankerScore", getRerankerScore());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("docUrl", this.docUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeBaseIndexedSharePointReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeBaseIndexedSharePointReference if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeBaseIndexedSharePointReference.
     */
    @Generated
    public static KnowledgeBaseIndexedSharePointReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KnowledgeBaseIndexedSharePointReference deserializedKnowledgeBaseIndexedSharePointReference
                = new KnowledgeBaseIndexedSharePointReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedKnowledgeBaseIndexedSharePointReference.setId(reader.getString());
                } else if ("activitySource".equals(fieldName)) {
                    deserializedKnowledgeBaseIndexedSharePointReference.setActivitySource(reader.getInt());
                } else if ("sourceData".equals(fieldName)) {
                    Map<String, Object> sourceData = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedKnowledgeBaseIndexedSharePointReference.setSourceData(sourceData);
                } else if ("rerankerScore".equals(fieldName)) {
                    deserializedKnowledgeBaseIndexedSharePointReference
                        .setRerankerScore(reader.getNullable(JsonReader::getFloat));
                } else if ("type".equals(fieldName)) {
                    deserializedKnowledgeBaseIndexedSharePointReference.type = reader.getString();
                } else if ("docUrl".equals(fieldName)) {
                    deserializedKnowledgeBaseIndexedSharePointReference.docUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKnowledgeBaseIndexedSharePointReference;
        });
    }
}
