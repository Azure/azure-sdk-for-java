// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status of an indexing operation for a single document.
 */
@Immutable
public final class IndexingResult implements JsonSerializable<IndexingResult> {
    /*
     * The key of a document that was in the indexing request.
     */
    @Generated
    private String key;

    /*
     * The error message explaining why the indexing operation failed for the document identified by the key; null if
     * indexing succeeded.
     */
    @Generated
    private String errorMessage;

    /*
     * A value indicating whether the indexing operation succeeded for the document identified by the key.
     */
    @Generated
    private boolean succeeded;

    /*
     * The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201
     * for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a
     * version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
     */
    @Generated
    private int statusCode;

    /**
     * Creates an instance of IndexingResult class.
     */
    @Generated
    public IndexingResult() {
    }

    /**
     * Get the key property: The key of a document that was in the indexing request.
     * 
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the errorMessage property: The error message explaining why the indexing operation failed for the document
     * identified by the key; null if indexing succeeded.
     * 
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the succeeded property: A value indicating whether the indexing operation succeeded for the document
     * identified by the key.
     * 
     * @return the succeeded value.
     */
    @Generated
    public boolean isSucceeded() {
        return this.succeeded;
    }

    /**
     * Get the statusCode property: The status code of the indexing operation. Possible values include: 200 for a
     * successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for
     * document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when
     * the service is too busy.
     * 
     * @return the statusCode value.
     */
    @Generated
    public int getStatusCode() {
        return this.statusCode;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexingResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexingResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexingResult.
     */
    @Generated
    public static IndexingResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexingResult deserializedIndexingResult = new IndexingResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedIndexingResult.key = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedIndexingResult.succeeded = reader.getBoolean();
                } else if ("statusCode".equals(fieldName)) {
                    deserializedIndexingResult.statusCode = reader.getInt();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedIndexingResult.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexingResult;
        });
    }
}
