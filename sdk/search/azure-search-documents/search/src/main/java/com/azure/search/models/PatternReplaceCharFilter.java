// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A character filter that replaces characters in the input string. It uses a regular expression to identify character
 * sequences to preserve and a replacement pattern to identify characters to replace. For example, given the input text
 * "aa bb aa bb", pattern "(aa)\s+(bb)", and replacement "$1#$2", the result would be "aa#bb aa#bb". This character
 * filter is implemented using Apache Lucene.
 */
@Fluent
public final class PatternReplaceCharFilter extends CharFilter {
    /*
     * A URI fragment specifying the type of char filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.PatternReplaceCharFilter";

    /*
     * A regular expression pattern.
     */
    @Generated
    private String pattern;

    /*
     * The replacement text.
     */
    @Generated
    private String replacement;

    /**
     * Creates an instance of PatternReplaceCharFilter class.
     */
    @Generated
    public PatternReplaceCharFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of char filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the pattern property: A regular expression pattern.
     * 
     * @return the pattern value.
     */
    @Generated
    public String getPattern() {
        return this.pattern;
    }

    /**
     * Set the pattern property: A regular expression pattern.
     * 
     * @param pattern the pattern value to set.
     * @return the PatternReplaceCharFilter object itself.
     */
    @Generated
    public PatternReplaceCharFilter setPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get the replacement property: The replacement text.
     * 
     * @return the replacement value.
     */
    @Generated
    public String getReplacement() {
        return this.replacement;
    }

    /**
     * Set the replacement property: The replacement text.
     * 
     * @param replacement the replacement value to set.
     * @return the PatternReplaceCharFilter object itself.
     */
    @Generated
    public PatternReplaceCharFilter setReplacement(String replacement) {
        this.replacement = replacement;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PatternReplaceCharFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeStringField("replacement", this.replacement);
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatternReplaceCharFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatternReplaceCharFilter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PatternReplaceCharFilter.
     */
    @Generated
    public static PatternReplaceCharFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatternReplaceCharFilter deserializedPatternReplaceCharFilter = new PatternReplaceCharFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPatternReplaceCharFilter.setName(reader.getString());
                } else if ("pattern".equals(fieldName)) {
                    deserializedPatternReplaceCharFilter.pattern = reader.getString();
                } else if ("replacement".equals(fieldName)) {
                    deserializedPatternReplaceCharFilter.replacement = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedPatternReplaceCharFilter.odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPatternReplaceCharFilter;
        });
    }
}
