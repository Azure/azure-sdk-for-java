// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.search.models.ErrorResponseException;
import com.azure.search.models.IndexStatisticsSummary;
import com.azure.search.models.ListIndexStatsSummary;
import com.azure.search.models.RequestOptions;
import com.azure.search.models.ServiceStatistics;
import java.util.UUID;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the SearchClient type.
 */
public final class SearchClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SearchClientService service;

    /**
     * The endpoint URL of the search service.
     */
    private final String endpoint;

    /**
     * Gets The endpoint URL of the search service.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * The name of the knowledge base.
     */
    private final String knowledgeBaseName;

    /**
     * Gets The name of the knowledge base.
     * 
     * @return the knowledgeBaseName value.
     */
    public String getKnowledgeBaseName() {
        return this.knowledgeBaseName;
    }

    /**
     * The name of the index.
     */
    private final String indexName;

    /**
     * Gets The name of the index.
     * 
     * @return the indexName value.
     */
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The KnowledgeRetrievals object to access its operations.
     */
    private final KnowledgeRetrievals knowledgeRetrievals;

    /**
     * Gets the KnowledgeRetrievals object to access its operations.
     * 
     * @return the KnowledgeRetrievals object.
     */
    public KnowledgeRetrievals getKnowledgeRetrievals() {
        return this.knowledgeRetrievals;
    }

    /**
     * The KnowledgeBases object to access its operations.
     */
    private final KnowledgeBases knowledgeBases;

    /**
     * Gets the KnowledgeBases object to access its operations.
     * 
     * @return the KnowledgeBases object.
     */
    public KnowledgeBases getKnowledgeBases() {
        return this.knowledgeBases;
    }

    /**
     * The KnowledgeSources object to access its operations.
     */
    private final KnowledgeSources knowledgeSources;

    /**
     * Gets the KnowledgeSources object to access its operations.
     * 
     * @return the KnowledgeSources object.
     */
    public KnowledgeSources getKnowledgeSources() {
        return this.knowledgeSources;
    }

    /**
     * The DataSources object to access its operations.
     */
    private final DataSources dataSources;

    /**
     * Gets the DataSources object to access its operations.
     * 
     * @return the DataSources object.
     */
    public DataSources getDataSources() {
        return this.dataSources;
    }

    /**
     * The Indexers object to access its operations.
     */
    private final Indexers indexers;

    /**
     * Gets the Indexers object to access its operations.
     * 
     * @return the Indexers object.
     */
    public Indexers getIndexers() {
        return this.indexers;
    }

    /**
     * The Skillsets object to access its operations.
     */
    private final Skillsets skillsets;

    /**
     * Gets the Skillsets object to access its operations.
     * 
     * @return the Skillsets object.
     */
    public Skillsets getSkillsets() {
        return this.skillsets;
    }

    /**
     * The SynonymMaps object to access its operations.
     */
    private final SynonymMaps synonymMaps;

    /**
     * Gets the SynonymMaps object to access its operations.
     * 
     * @return the SynonymMaps object.
     */
    public SynonymMaps getSynonymMaps() {
        return this.synonymMaps;
    }

    /**
     * The Indexes object to access its operations.
     */
    private final Indexes indexes;

    /**
     * Gets the Indexes object to access its operations.
     * 
     * @return the Indexes object.
     */
    public Indexes getIndexes() {
        return this.indexes;
    }

    /**
     * The Aliases object to access its operations.
     */
    private final Aliases aliases;

    /**
     * Gets the Aliases object to access its operations.
     * 
     * @return the Aliases object.
     */
    public Aliases getAliases() {
        return this.aliases;
    }

    /**
     * The Documents object to access its operations.
     */
    private final Documents documents;

    /**
     * Gets the Documents object to access its operations.
     * 
     * @return the Documents object.
     */
    public Documents getDocuments() {
        return this.documents;
    }

    /**
     * Initializes an instance of SearchClient client.
     * 
     * @param endpoint The endpoint URL of the search service.
     * @param knowledgeBaseName The name of the knowledge base.
     * @param indexName The name of the index.
     * @param apiVersion Api Version.
     */
    SearchClient(String endpoint, String knowledgeBaseName, String indexName, String apiVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, knowledgeBaseName, indexName, apiVersion);
    }

    /**
     * Initializes an instance of SearchClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The endpoint URL of the search service.
     * @param knowledgeBaseName The name of the knowledge base.
     * @param indexName The name of the index.
     * @param apiVersion Api Version.
     */
    SearchClient(HttpPipeline httpPipeline, String endpoint, String knowledgeBaseName, String indexName,
        String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, knowledgeBaseName, indexName,
            apiVersion);
    }

    /**
     * Initializes an instance of SearchClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The endpoint URL of the search service.
     * @param knowledgeBaseName The name of the knowledge base.
     * @param indexName The name of the index.
     * @param apiVersion Api Version.
     */
    SearchClient(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        String knowledgeBaseName, String indexName, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.knowledgeBaseName = knowledgeBaseName;
        this.indexName = indexName;
        this.apiVersion = apiVersion;
        this.knowledgeRetrievals = new KnowledgeRetrievals(this);
        this.knowledgeBases = new KnowledgeBases(this);
        this.knowledgeSources = new KnowledgeSources(this);
        this.dataSources = new DataSources(this);
        this.indexers = new Indexers(this);
        this.skillsets = new Skillsets(this);
        this.synonymMaps = new SynonymMaps(this);
        this.indexes = new Indexes(this);
        this.aliases = new Aliases(this);
        this.documents = new Documents(this);
        this.service = RestProxy.create(SearchClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for SearchClient to be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SearchClient")
    public interface SearchClientService {
        @Get("/servicestats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ServiceStatistics>> getServiceStatistics(@HostParam("endpoint") String endpoint,
            @HeaderParam("x-ms-client-request-id") UUID xMsClientRequestId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Get("/indexstats")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ListIndexStatsSummary>> getIndexStatsSummary(@HostParam("endpoint") String endpoint,
            @HeaderParam("x-ms-client-request-id") UUID xMsClientRequestId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets service level statistics for a search service.
     * 
     * @param requestOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service level statistics for a search service along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceStatistics>> getServiceStatisticsWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> getServiceStatisticsWithResponseAsync(requestOptions, context));
    }

    /**
     * Gets service level statistics for a search service.
     * 
     * @param requestOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service level statistics for a search service along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ServiceStatistics>> getServiceStatisticsWithResponseAsync(RequestOptions requestOptions,
        Context context) {
        final String accept = "application/json";
        UUID xMsClientRequestIdInternal = null;
        if (requestOptions != null) {
            xMsClientRequestIdInternal = requestOptions.getXMsClientRequestId();
        }
        UUID xMsClientRequestId = xMsClientRequestIdInternal;
        return service.getServiceStatistics(this.getEndpoint(), xMsClientRequestId, this.getApiVersion(), accept,
            context);
    }

    /**
     * Gets service level statistics for a search service.
     * 
     * @param requestOptions Parameter group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service level statistics for a search service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceStatistics> getServiceStatisticsAsync(RequestOptions requestOptions) {
        return getServiceStatisticsWithResponseAsync(requestOptions).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets service level statistics for a search service.
     * 
     * @param requestOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service level statistics for a search service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServiceStatistics> getServiceStatisticsAsync(RequestOptions requestOptions, Context context) {
        return getServiceStatisticsWithResponseAsync(requestOptions, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves a summary of statistics for all indexes in the search service.
     * 
     * @param requestOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a request to retrieve stats summary of all indexes along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<IndexStatisticsSummary>>
        getIndexStatsSummarySinglePageAsync(RequestOptions requestOptions, Context context) {
        final String accept = "application/json";
        UUID xMsClientRequestIdInternal = null;
        if (requestOptions != null) {
            xMsClientRequestIdInternal = requestOptions.getXMsClientRequestId();
        }
        UUID xMsClientRequestId = xMsClientRequestIdInternal;
        return service
            .getIndexStatsSummary(this.getEndpoint(), xMsClientRequestId, this.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().getIndexesStatistics(), null, null));
    }

    /**
     * Retrieves a summary of statistics for all indexes in the search service.
     * 
     * @param requestOptions Parameter group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response from a request to retrieve stats summary of all indexes as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<IndexStatisticsSummary> getIndexStatsSummaryAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(() -> getIndexStatsSummarySinglePageAsync(requestOptions, context));
    }
}
