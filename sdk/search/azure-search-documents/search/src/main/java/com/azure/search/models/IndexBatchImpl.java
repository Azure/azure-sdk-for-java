// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains a batch of document write actions to send to the index.
 */
@Fluent
public final class IndexBatchImpl implements JsonSerializable<IndexBatchImpl> {
    /*
     * The actions in the batch.
     */
    @Generated
    private List<IndexAction> actions;

    /**
     * Creates an instance of IndexBatchImpl class.
     */
    @Generated
    public IndexBatchImpl() {
    }

    /**
     * Get the actions property: The actions in the batch.
     * 
     * @return the actions value.
     */
    @Generated
    public List<IndexAction> getActions() {
        return this.actions;
    }

    /**
     * Set the actions property: The actions in the batch.
     * 
     * @param actions the actions value to set.
     * @return the IndexBatchImpl object itself.
     */
    @Generated
    public IndexBatchImpl setActions(List<IndexAction> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.actions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexBatchImpl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexBatchImpl if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexBatchImpl.
     */
    @Generated
    public static IndexBatchImpl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexBatchImpl deserializedIndexBatchImpl = new IndexBatchImpl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<IndexAction> actions = reader.readArray(reader1 -> IndexAction.fromJson(reader1));
                    deserializedIndexBatchImpl.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexBatchImpl;
        });
    }
}
