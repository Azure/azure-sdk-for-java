// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an LLM query planning activity record.
 */
@Fluent
public final class KnowledgeBaseModelQueryPlanningActivityRecord extends KnowledgeBaseActivityRecord {
    /*
     * The type of the activity record.
     */
    @Generated
    private String type = "modelQueryPlanning";

    /*
     * The number of input tokens for the LLM query planning activity.
     */
    @Generated
    private Integer inputTokens;

    /*
     * The number of output tokens for the LLM query planning activity.
     */
    @Generated
    private Integer outputTokens;

    /**
     * Creates an instance of KnowledgeBaseModelQueryPlanningActivityRecord class.
     */
    @Generated
    public KnowledgeBaseModelQueryPlanningActivityRecord() {
    }

    /**
     * Get the type property: The type of the activity record.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the inputTokens property: The number of input tokens for the LLM query planning activity.
     * 
     * @return the inputTokens value.
     */
    @Generated
    public Integer getInputTokens() {
        return this.inputTokens;
    }

    /**
     * Set the inputTokens property: The number of input tokens for the LLM query planning activity.
     * 
     * @param inputTokens the inputTokens value to set.
     * @return the KnowledgeBaseModelQueryPlanningActivityRecord object itself.
     */
    @Generated
    public KnowledgeBaseModelQueryPlanningActivityRecord setInputTokens(Integer inputTokens) {
        this.inputTokens = inputTokens;
        return this;
    }

    /**
     * Get the outputTokens property: The number of output tokens for the LLM query planning activity.
     * 
     * @return the outputTokens value.
     */
    @Generated
    public Integer getOutputTokens() {
        return this.outputTokens;
    }

    /**
     * Set the outputTokens property: The number of output tokens for the LLM query planning activity.
     * 
     * @param outputTokens the outputTokens value to set.
     * @return the KnowledgeBaseModelQueryPlanningActivityRecord object itself.
     */
    @Generated
    public KnowledgeBaseModelQueryPlanningActivityRecord setOutputTokens(Integer outputTokens) {
        this.outputTokens = outputTokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseModelQueryPlanningActivityRecord setId(int id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseModelQueryPlanningActivityRecord setElapsedMs(Integer elapsedMs) {
        super.setElapsedMs(elapsedMs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public KnowledgeBaseModelQueryPlanningActivityRecord setError(KnowledgeBaseErrorDetail error) {
        super.setError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("id", getId());
        jsonWriter.writeNumberField("elapsedMs", getElapsedMs());
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeNumberField("inputTokens", this.inputTokens);
        jsonWriter.writeNumberField("outputTokens", this.outputTokens);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeBaseModelQueryPlanningActivityRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeBaseModelQueryPlanningActivityRecord if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeBaseModelQueryPlanningActivityRecord.
     */
    @Generated
    public static KnowledgeBaseModelQueryPlanningActivityRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KnowledgeBaseModelQueryPlanningActivityRecord deserializedKnowledgeBaseModelQueryPlanningActivityRecord
                = new KnowledgeBaseModelQueryPlanningActivityRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord.setId(reader.getInt());
                } else if ("elapsedMs".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord
                        .setElapsedMs(reader.getNullable(JsonReader::getInt));
                } else if ("error".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord
                        .setError(KnowledgeBaseErrorDetail.fromJson(reader));
                } else if ("type".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord.type = reader.getString();
                } else if ("inputTokens".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord.inputTokens
                        = reader.getNullable(JsonReader::getInt);
                } else if ("outputTokens".equals(fieldName)) {
                    deserializedKnowledgeBaseModelQueryPlanningActivityRecord.outputTokens
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKnowledgeBaseModelQueryPlanningActivityRecord;
        });
    }
}
