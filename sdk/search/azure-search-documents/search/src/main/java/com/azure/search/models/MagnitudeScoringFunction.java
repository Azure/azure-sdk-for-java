// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a function that boosts scores based on the magnitude of a numeric field.
 */
@Fluent
public final class MagnitudeScoringFunction extends ScoringFunction {
    /*
     * Indicates the type of function to use. Valid values include magnitude, freshness, distance, and tag. The function
     * type must be lower case.
     */
    @Generated
    private String type = "magnitude";

    /*
     * Parameter values for the magnitude scoring function.
     */
    @Generated
    private MagnitudeScoringParameters parameters;

    /**
     * Creates an instance of MagnitudeScoringFunction class.
     */
    @Generated
    public MagnitudeScoringFunction() {
    }

    /**
     * Get the type property: Indicates the type of function to use. Valid values include magnitude, freshness,
     * distance, and tag. The function type must be lower case.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the parameters property: Parameter values for the magnitude scoring function.
     * 
     * @return the parameters value.
     */
    @Generated
    public MagnitudeScoringParameters getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameter values for the magnitude scoring function.
     * 
     * @param parameters the parameters value to set.
     * @return the MagnitudeScoringFunction object itself.
     */
    @Generated
    public MagnitudeScoringFunction setParameters(MagnitudeScoringParameters parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MagnitudeScoringFunction setFieldName(String fieldName) {
        super.setFieldName(fieldName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MagnitudeScoringFunction setBoost(double boost) {
        super.setBoost(boost);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public MagnitudeScoringFunction setInterpolation(ScoringFunctionInterpolation interpolation) {
        super.setInterpolation(interpolation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldName", getFieldName());
        jsonWriter.writeDoubleField("boost", getBoost());
        jsonWriter.writeStringField("interpolation", getInterpolation() == null ? null : getInterpolation().toString());
        jsonWriter.writeJsonField("magnitude", this.parameters);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MagnitudeScoringFunction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MagnitudeScoringFunction if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MagnitudeScoringFunction.
     */
    @Generated
    public static MagnitudeScoringFunction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MagnitudeScoringFunction deserializedMagnitudeScoringFunction = new MagnitudeScoringFunction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldName".equals(jsonFieldName)) {
                    deserializedMagnitudeScoringFunction.setFieldName(reader.getString());
                } else if ("boost".equals(jsonFieldName)) {
                    deserializedMagnitudeScoringFunction.setBoost(reader.getDouble());
                } else if ("interpolation".equals(jsonFieldName)) {
                    deserializedMagnitudeScoringFunction
                        .setInterpolation(ScoringFunctionInterpolation.fromString(reader.getString()));
                } else if ("magnitude".equals(jsonFieldName)) {
                    deserializedMagnitudeScoringFunction.parameters = MagnitudeScoringParameters.fromJson(reader);
                } else if ("type".equals(jsonFieldName)) {
                    deserializedMagnitudeScoringFunction.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMagnitudeScoringFunction;
        });
    }
}
