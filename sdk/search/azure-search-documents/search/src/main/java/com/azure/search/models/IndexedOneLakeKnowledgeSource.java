// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for OneLake knowledge source.
 */
@Fluent
public final class IndexedOneLakeKnowledgeSource extends KnowledgeSource {
    /*
     * The type of the knowledge source.
     */
    @Generated
    private KnowledgeSourceKind kind = KnowledgeSourceKind.INDEXED_ONE_LAKE;

    /*
     * The parameters for the OneLake knowledge source.
     */
    @Generated
    private IndexedOneLakeKnowledgeSourceParameters indexedOneLakeParameters;

    /**
     * Creates an instance of IndexedOneLakeKnowledgeSource class.
     */
    @Generated
    public IndexedOneLakeKnowledgeSource() {
    }

    /**
     * Get the kind property: The type of the knowledge source.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public KnowledgeSourceKind getKind() {
        return this.kind;
    }

    /**
     * Get the indexedOneLakeParameters property: The parameters for the OneLake knowledge source.
     * 
     * @return the indexedOneLakeParameters value.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters getIndexedOneLakeParameters() {
        return this.indexedOneLakeParameters;
    }

    /**
     * Set the indexedOneLakeParameters property: The parameters for the OneLake knowledge source.
     * 
     * @param indexedOneLakeParameters the indexedOneLakeParameters value to set.
     * @return the IndexedOneLakeKnowledgeSource object itself.
     */
    @Generated
    public IndexedOneLakeKnowledgeSource
        setIndexedOneLakeParameters(IndexedOneLakeKnowledgeSourceParameters indexedOneLakeParameters) {
        this.indexedOneLakeParameters = indexedOneLakeParameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSource setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSource setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSource setETag(String eTag) {
        super.setETag(eTag);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSource setEncryptionKey(SearchResourceEncryptionKey encryptionKey) {
        super.setEncryptionKey(encryptionKey);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("@odata.etag", getETag());
        jsonWriter.writeJsonField("encryptionKey", getEncryptionKey());
        jsonWriter.writeJsonField("indexedOneLakeParameters", this.indexedOneLakeParameters);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexedOneLakeKnowledgeSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexedOneLakeKnowledgeSource if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexedOneLakeKnowledgeSource.
     */
    @Generated
    public static IndexedOneLakeKnowledgeSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexedOneLakeKnowledgeSource deserializedIndexedOneLakeKnowledgeSource
                = new IndexedOneLakeKnowledgeSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource.setDescription(reader.getString());
                } else if ("@odata.etag".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource.setETag(reader.getString());
                } else if ("encryptionKey".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource
                        .setEncryptionKey(SearchResourceEncryptionKey.fromJson(reader));
                } else if ("indexedOneLakeParameters".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource.indexedOneLakeParameters
                        = IndexedOneLakeKnowledgeSourceParameters.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSource.kind = KnowledgeSourceKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexedOneLakeKnowledgeSource;
        });
    }
}
