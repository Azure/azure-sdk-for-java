// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A skill to split a string into chunks of text.
 */
@Fluent
public final class SplitSkill extends SearchIndexerSkill {
    /*
     * A URI fragment specifying the type of skill.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Text.SplitSkill";

    /*
     * A value indicating which language code to use. Default is `en`.
     */
    @Generated
    private SplitSkillLanguage defaultLanguageCode;

    /*
     * A value indicating which split mode to perform.
     */
    @Generated
    private TextSplitMode textSplitMode;

    /*
     * The desired maximum page length. Default is 10000.
     */
    @Generated
    private Integer maximumPageLength;

    /*
     * Only applicable when textSplitMode is set to 'pages'. If specified, n+1th chunk will start with this number of
     * characters/tokens from the end of the nth chunk.
     */
    @Generated
    private Integer pageOverlapLength;

    /*
     * Only applicable when textSplitMode is set to 'pages'. If specified, the SplitSkill will discontinue splitting
     * after processing the first 'maximumPagesToTake' pages, in order to improve performance when only a few initial
     * pages are needed from each document.
     */
    @Generated
    private Integer maximumPagesToTake;

    /*
     * Only applies if textSplitMode is set to pages. There are two possible values. The choice of the values will
     * decide the length (maximumPageLength and pageOverlapLength) measurement. The default is 'characters', which means
     * the length will be measured by character.
     */
    @Generated
    private SplitSkillUnit unit;

    /*
     * Only applies if the unit is set to azureOpenAITokens. If specified, the splitSkill will use these parameters when
     * performing the tokenization. The parameters are a valid 'encoderModelName' and an optional 'allowedSpecialTokens'
     * property.
     */
    @Generated
    private AzureOpenAITokenizerParameters azureOpenAITokenizerParameters;

    /**
     * Creates an instance of SplitSkill class.
     */
    @Generated
    public SplitSkill() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of skill.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @return the defaultLanguageCode value.
     */
    @Generated
    public SplitSkillLanguage getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setDefaultLanguageCode(SplitSkillLanguage defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the textSplitMode property: A value indicating which split mode to perform.
     * 
     * @return the textSplitMode value.
     */
    @Generated
    public TextSplitMode getTextSplitMode() {
        return this.textSplitMode;
    }

    /**
     * Set the textSplitMode property: A value indicating which split mode to perform.
     * 
     * @param textSplitMode the textSplitMode value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setTextSplitMode(TextSplitMode textSplitMode) {
        this.textSplitMode = textSplitMode;
        return this;
    }

    /**
     * Get the maximumPageLength property: The desired maximum page length. Default is 10000.
     * 
     * @return the maximumPageLength value.
     */
    @Generated
    public Integer getMaximumPageLength() {
        return this.maximumPageLength;
    }

    /**
     * Set the maximumPageLength property: The desired maximum page length. Default is 10000.
     * 
     * @param maximumPageLength the maximumPageLength value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setMaximumPageLength(Integer maximumPageLength) {
        this.maximumPageLength = maximumPageLength;
        return this;
    }

    /**
     * Get the pageOverlapLength property: Only applicable when textSplitMode is set to 'pages'. If specified, n+1th
     * chunk will start with this number of characters/tokens from the end of the nth chunk.
     * 
     * @return the pageOverlapLength value.
     */
    @Generated
    public Integer getPageOverlapLength() {
        return this.pageOverlapLength;
    }

    /**
     * Set the pageOverlapLength property: Only applicable when textSplitMode is set to 'pages'. If specified, n+1th
     * chunk will start with this number of characters/tokens from the end of the nth chunk.
     * 
     * @param pageOverlapLength the pageOverlapLength value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setPageOverlapLength(Integer pageOverlapLength) {
        this.pageOverlapLength = pageOverlapLength;
        return this;
    }

    /**
     * Get the maximumPagesToTake property: Only applicable when textSplitMode is set to 'pages'. If specified, the
     * SplitSkill will discontinue splitting after processing the first 'maximumPagesToTake' pages, in order to improve
     * performance when only a few initial pages are needed from each document.
     * 
     * @return the maximumPagesToTake value.
     */
    @Generated
    public Integer getMaximumPagesToTake() {
        return this.maximumPagesToTake;
    }

    /**
     * Set the maximumPagesToTake property: Only applicable when textSplitMode is set to 'pages'. If specified, the
     * SplitSkill will discontinue splitting after processing the first 'maximumPagesToTake' pages, in order to improve
     * performance when only a few initial pages are needed from each document.
     * 
     * @param maximumPagesToTake the maximumPagesToTake value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setMaximumPagesToTake(Integer maximumPagesToTake) {
        this.maximumPagesToTake = maximumPagesToTake;
        return this;
    }

    /**
     * Get the unit property: Only applies if textSplitMode is set to pages. There are two possible values. The choice
     * of the values will decide the length (maximumPageLength and pageOverlapLength) measurement. The default is
     * 'characters', which means the length will be measured by character.
     * 
     * @return the unit value.
     */
    @Generated
    public SplitSkillUnit getUnit() {
        return this.unit;
    }

    /**
     * Set the unit property: Only applies if textSplitMode is set to pages. There are two possible values. The choice
     * of the values will decide the length (maximumPageLength and pageOverlapLength) measurement. The default is
     * 'characters', which means the length will be measured by character.
     * 
     * @param unit the unit value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setUnit(SplitSkillUnit unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the azureOpenAITokenizerParameters property: Only applies if the unit is set to azureOpenAITokens. If
     * specified, the splitSkill will use these parameters when performing the tokenization. The parameters are a valid
     * 'encoderModelName' and an optional 'allowedSpecialTokens' property.
     * 
     * @return the azureOpenAITokenizerParameters value.
     */
    @Generated
    public AzureOpenAITokenizerParameters getAzureOpenAITokenizerParameters() {
        return this.azureOpenAITokenizerParameters;
    }

    /**
     * Set the azureOpenAITokenizerParameters property: Only applies if the unit is set to azureOpenAITokens. If
     * specified, the splitSkill will use these parameters when performing the tokenization. The parameters are a valid
     * 'encoderModelName' and an optional 'allowedSpecialTokens' property.
     * 
     * @param azureOpenAITokenizerParameters the azureOpenAITokenizerParameters value to set.
     * @return the SplitSkill object itself.
     */
    @Generated
    public SplitSkill setAzureOpenAITokenizerParameters(AzureOpenAITokenizerParameters azureOpenAITokenizerParameters) {
        this.azureOpenAITokenizerParameters = azureOpenAITokenizerParameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SplitSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SplitSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SplitSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SplitSkill setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SplitSkill setOutputs(List<OutputFieldMappingEntry> outputs) {
        super.setOutputs(outputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("defaultLanguageCode",
            this.defaultLanguageCode == null ? null : this.defaultLanguageCode.toString());
        jsonWriter.writeStringField("textSplitMode", this.textSplitMode == null ? null : this.textSplitMode.toString());
        jsonWriter.writeNumberField("maximumPageLength", this.maximumPageLength);
        jsonWriter.writeNumberField("pageOverlapLength", this.pageOverlapLength);
        jsonWriter.writeNumberField("maximumPagesToTake", this.maximumPagesToTake);
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeJsonField("azureOpenAITokenizerParameters", this.azureOpenAITokenizerParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SplitSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SplitSkill if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SplitSkill.
     */
    @Generated
    public static SplitSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SplitSkill deserializedSplitSkill = new SplitSkill();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedSplitSkill.setInputs(inputs);
                } else if ("outputs".equals(fieldName)) {
                    List<OutputFieldMappingEntry> outputs
                        = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    deserializedSplitSkill.setOutputs(outputs);
                } else if ("name".equals(fieldName)) {
                    deserializedSplitSkill.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSplitSkill.setDescription(reader.getString());
                } else if ("context".equals(fieldName)) {
                    deserializedSplitSkill.setContext(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedSplitSkill.odataType = reader.getString();
                } else if ("defaultLanguageCode".equals(fieldName)) {
                    deserializedSplitSkill.defaultLanguageCode = SplitSkillLanguage.fromString(reader.getString());
                } else if ("textSplitMode".equals(fieldName)) {
                    deserializedSplitSkill.textSplitMode = TextSplitMode.fromString(reader.getString());
                } else if ("maximumPageLength".equals(fieldName)) {
                    deserializedSplitSkill.maximumPageLength = reader.getNullable(JsonReader::getInt);
                } else if ("pageOverlapLength".equals(fieldName)) {
                    deserializedSplitSkill.pageOverlapLength = reader.getNullable(JsonReader::getInt);
                } else if ("maximumPagesToTake".equals(fieldName)) {
                    deserializedSplitSkill.maximumPagesToTake = reader.getNullable(JsonReader::getInt);
                } else if ("unit".equals(fieldName)) {
                    deserializedSplitSkill.unit = SplitSkillUnit.fromString(reader.getString());
                } else if ("azureOpenAITokenizerParameters".equals(fieldName)) {
                    deserializedSplitSkill.azureOpenAITokenizerParameters
                        = AzureOpenAITokenizerParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSplitSkill;
        });
    }
}
