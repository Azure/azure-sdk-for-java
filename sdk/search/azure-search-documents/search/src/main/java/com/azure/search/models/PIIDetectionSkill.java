// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Using the Text Analytics API, extracts personal information from an input text and gives you the option of masking
 * it.
 */
@Fluent
public final class PIIDetectionSkill extends SearchIndexerSkill {
    /*
     * A URI fragment specifying the type of skill.
     */
    @Generated
    private String odataType = "#Microsoft.Skills.Text.PIIDetectionSkill";

    /*
     * A value indicating which language code to use. Default is `en`.
     */
    @Generated
    private String defaultLanguageCode;

    /*
     * A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value
     * specified. If not set (default), or if explicitly set to null, all entities will be included.
     */
    @Generated
    private Double minimumPrecision;

    /*
     * A parameter that provides various ways to mask the personal information detected in the input text. Default is
     * 'none'.
     */
    @Generated
    private PIIDetectionSkillMaskingMode maskingMode;

    /*
     * The character used to mask the text if the maskingMode parameter is set to replace. Default is '*'.
     */
    @Generated
    private String mask;

    /*
     * The version of the model to use when calling the Text Analytics service. It will default to the latest available
     * when not specified. We recommend you do not specify this value unless absolutely necessary.
     */
    @Generated
    private String modelVersion;

    /*
     * A list of PII entity categories that should be extracted and masked.
     */
    @Generated
    private List<String> piiCategories;

    /*
     * If specified, will set the PII domain to include only a subset of the entity categories. Possible values include:
     * 'phi', 'none'. Default is 'none'.
     */
    @Generated
    private String domain;

    /**
     * Creates an instance of PIIDetectionSkill class.
     */
    @Generated
    public PIIDetectionSkill() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of skill.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @return the defaultLanguageCode value.
     */
    @Generated
    public String getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is `en`.
     * 
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setDefaultLanguageCode(String defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     * 
     * @return the minimumPrecision value.
     */
    @Generated
    public Double getMinimumPrecision() {
        return this.minimumPrecision;
    }

    /**
     * Set the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     * 
     * @param minimumPrecision the minimumPrecision value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setMinimumPrecision(Double minimumPrecision) {
        this.minimumPrecision = minimumPrecision;
        return this;
    }

    /**
     * Get the maskingMode property: A parameter that provides various ways to mask the personal information detected in
     * the input text. Default is 'none'.
     * 
     * @return the maskingMode value.
     */
    @Generated
    public PIIDetectionSkillMaskingMode getMaskingMode() {
        return this.maskingMode;
    }

    /**
     * Set the maskingMode property: A parameter that provides various ways to mask the personal information detected in
     * the input text. Default is 'none'.
     * 
     * @param maskingMode the maskingMode value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setMaskingMode(PIIDetectionSkillMaskingMode maskingMode) {
        this.maskingMode = maskingMode;
        return this;
    }

    /**
     * Get the mask property: The character used to mask the text if the maskingMode parameter is set to replace.
     * Default is '*'.
     * 
     * @return the mask value.
     */
    @Generated
    public String getMask() {
        return this.mask;
    }

    /**
     * Set the mask property: The character used to mask the text if the maskingMode parameter is set to replace.
     * Default is '*'.
     * 
     * @param mask the mask value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setMask(String mask) {
        this.mask = mask;
        return this;
    }

    /**
     * Get the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     * 
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Set the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     * 
     * @param modelVersion the modelVersion value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setModelVersion(String modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }

    /**
     * Get the piiCategories property: A list of PII entity categories that should be extracted and masked.
     * 
     * @return the piiCategories value.
     */
    @Generated
    public List<String> getPiiCategories() {
        return this.piiCategories;
    }

    /**
     * Set the piiCategories property: A list of PII entity categories that should be extracted and masked.
     * 
     * @param piiCategories the piiCategories value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setPiiCategories(List<String> piiCategories) {
        this.piiCategories = piiCategories;
        return this;
    }

    /**
     * Get the domain property: If specified, will set the PII domain to include only a subset of the entity categories.
     * Possible values include: 'phi', 'none'. Default is 'none'.
     * 
     * @return the domain value.
     */
    @Generated
    public String getDomain() {
        return this.domain;
    }

    /**
     * Set the domain property: If specified, will set the PII domain to include only a subset of the entity categories.
     * Possible values include: 'phi', 'none'. Default is 'none'.
     * 
     * @param domain the domain value to set.
     * @return the PIIDetectionSkill object itself.
     */
    @Generated
    public PIIDetectionSkill setDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PIIDetectionSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PIIDetectionSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PIIDetectionSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PIIDetectionSkill setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public PIIDetectionSkill setOutputs(List<OutputFieldMappingEntry> outputs) {
        super.setOutputs(outputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("defaultLanguageCode", this.defaultLanguageCode);
        jsonWriter.writeNumberField("minimumPrecision", this.minimumPrecision);
        jsonWriter.writeStringField("maskingMode", this.maskingMode == null ? null : this.maskingMode.toString());
        jsonWriter.writeStringField("maskingCharacter", this.mask);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        jsonWriter.writeArrayField("piiCategories", this.piiCategories,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("domain", this.domain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PIIDetectionSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PIIDetectionSkill if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PIIDetectionSkill.
     */
    @Generated
    public static PIIDetectionSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PIIDetectionSkill deserializedPIIDetectionSkill = new PIIDetectionSkill();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedPIIDetectionSkill.setInputs(inputs);
                } else if ("outputs".equals(fieldName)) {
                    List<OutputFieldMappingEntry> outputs
                        = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    deserializedPIIDetectionSkill.setOutputs(outputs);
                } else if ("name".equals(fieldName)) {
                    deserializedPIIDetectionSkill.setName(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedPIIDetectionSkill.setDescription(reader.getString());
                } else if ("context".equals(fieldName)) {
                    deserializedPIIDetectionSkill.setContext(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedPIIDetectionSkill.odataType = reader.getString();
                } else if ("defaultLanguageCode".equals(fieldName)) {
                    deserializedPIIDetectionSkill.defaultLanguageCode = reader.getString();
                } else if ("minimumPrecision".equals(fieldName)) {
                    deserializedPIIDetectionSkill.minimumPrecision = reader.getNullable(JsonReader::getDouble);
                } else if ("maskingMode".equals(fieldName)) {
                    deserializedPIIDetectionSkill.maskingMode
                        = PIIDetectionSkillMaskingMode.fromString(reader.getString());
                } else if ("maskingCharacter".equals(fieldName)) {
                    deserializedPIIDetectionSkill.mask = reader.getString();
                } else if ("modelVersion".equals(fieldName)) {
                    deserializedPIIDetectionSkill.modelVersion = reader.getString();
                } else if ("piiCategories".equals(fieldName)) {
                    List<String> piiCategories = reader.readArray(reader1 -> reader1.getString());
                    deserializedPIIDetectionSkill.piiCategories = piiCategories;
                } else if ("domain".equals(fieldName)) {
                    deserializedPIIDetectionSkill.domain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPIIDetectionSkill;
        });
    }
}
