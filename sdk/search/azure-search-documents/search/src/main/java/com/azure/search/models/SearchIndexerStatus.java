// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the current status and execution history of an indexer.
 */
@Immutable
public final class SearchIndexerStatus implements JsonSerializable<SearchIndexerStatus> {
    /*
     * The name of the indexer.
     */
    @Generated
    private String name;

    /*
     * Overall indexer status.
     */
    @Generated
    private IndexerStatus status;

    /*
     * Snapshot of the indexer’s cumulative runtime consumption for the service over the current UTC period.
     */
    @Generated
    private IndexerRuntime runtime;

    /*
     * The result of the most recent or an in-progress indexer execution.
     */
    @Generated
    private IndexerExecutionResult lastResult;

    /*
     * History of the recent indexer executions, sorted in reverse chronological order.
     */
    @Generated
    private List<IndexerExecutionResult> executionHistory;

    /*
     * The execution limits for the indexer.
     */
    @Generated
    private SearchIndexerLimits limits;

    /*
     * All of the state that defines and dictates the indexer's current execution.
     */
    @Generated
    private IndexerCurrentState currentState;

    /**
     * Creates an instance of SearchIndexerStatus class.
     */
    @Generated
    public SearchIndexerStatus() {
    }

    /**
     * Get the name property: The name of the indexer.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the status property: Overall indexer status.
     * 
     * @return the status value.
     */
    @Generated
    public IndexerStatus getStatus() {
        return this.status;
    }

    /**
     * Get the runtime property: Snapshot of the indexer’s cumulative runtime consumption for the service over the
     * current UTC period.
     * 
     * @return the runtime value.
     */
    @Generated
    public IndexerRuntime getRuntime() {
        return this.runtime;
    }

    /**
     * Get the lastResult property: The result of the most recent or an in-progress indexer execution.
     * 
     * @return the lastResult value.
     */
    @Generated
    public IndexerExecutionResult getLastResult() {
        return this.lastResult;
    }

    /**
     * Get the executionHistory property: History of the recent indexer executions, sorted in reverse chronological
     * order.
     * 
     * @return the executionHistory value.
     */
    @Generated
    public List<IndexerExecutionResult> getExecutionHistory() {
        return this.executionHistory;
    }

    /**
     * Get the limits property: The execution limits for the indexer.
     * 
     * @return the limits value.
     */
    @Generated
    public SearchIndexerLimits getLimits() {
        return this.limits;
    }

    /**
     * Get the currentState property: All of the state that defines and dictates the indexer's current execution.
     * 
     * @return the currentState value.
     */
    @Generated
    public IndexerCurrentState getCurrentState() {
        return this.currentState;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexerStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexerStatus.
     */
    @Generated
    public static SearchIndexerStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchIndexerStatus deserializedSearchIndexerStatus = new SearchIndexerStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSearchIndexerStatus.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSearchIndexerStatus.status = IndexerStatus.fromString(reader.getString());
                } else if ("runtime".equals(fieldName)) {
                    deserializedSearchIndexerStatus.runtime = IndexerRuntime.fromJson(reader);
                } else if ("executionHistory".equals(fieldName)) {
                    List<IndexerExecutionResult> executionHistory
                        = reader.readArray(reader1 -> IndexerExecutionResult.fromJson(reader1));
                    deserializedSearchIndexerStatus.executionHistory = executionHistory;
                } else if ("limits".equals(fieldName)) {
                    deserializedSearchIndexerStatus.limits = SearchIndexerLimits.fromJson(reader);
                } else if ("lastResult".equals(fieldName)) {
                    deserializedSearchIndexerStatus.lastResult = IndexerExecutionResult.fromJson(reader);
                } else if ("currentState".equals(fieldName)) {
                    deserializedSearchIndexerStatus.currentState = IndexerCurrentState.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchIndexerStatus;
        });
    }
}
