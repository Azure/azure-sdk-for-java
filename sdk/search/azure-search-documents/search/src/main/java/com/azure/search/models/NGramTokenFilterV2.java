// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Generates n-grams of the given size(s). This token filter is implemented using Apache Lucene.
 */
@Fluent
public final class NGramTokenFilterV2 extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.NGramTokenFilterV2";

    /*
     * The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of maxGram.
     */
    @Generated
    private Integer minGram;

    /*
     * The maximum n-gram length. Default is 2. Maximum is 300.
     */
    @Generated
    private Integer maxGram;

    /**
     * Creates an instance of NGramTokenFilterV2 class.
     */
    @Generated
    public NGramTokenFilterV2() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the minGram property: The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of
     * maxGram.
     * 
     * @return the minGram value.
     */
    @Generated
    public Integer getMinGram() {
        return this.minGram;
    }

    /**
     * Set the minGram property: The minimum n-gram length. Default is 1. Maximum is 300. Must be less than the value of
     * maxGram.
     * 
     * @param minGram the minGram value to set.
     * @return the NGramTokenFilterV2 object itself.
     */
    @Generated
    public NGramTokenFilterV2 setMinGram(Integer minGram) {
        this.minGram = minGram;
        return this;
    }

    /**
     * Get the maxGram property: The maximum n-gram length. Default is 2. Maximum is 300.
     * 
     * @return the maxGram value.
     */
    @Generated
    public Integer getMaxGram() {
        return this.maxGram;
    }

    /**
     * Set the maxGram property: The maximum n-gram length. Default is 2. Maximum is 300.
     * 
     * @param maxGram the maxGram value to set.
     * @return the NGramTokenFilterV2 object itself.
     */
    @Generated
    public NGramTokenFilterV2 setMaxGram(Integer maxGram) {
        this.maxGram = maxGram;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public NGramTokenFilterV2 setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeNumberField("minGram", this.minGram);
        jsonWriter.writeNumberField("maxGram", this.maxGram);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NGramTokenFilterV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NGramTokenFilterV2 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NGramTokenFilterV2.
     */
    @Generated
    public static NGramTokenFilterV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NGramTokenFilterV2 deserializedNGramTokenFilterV2 = new NGramTokenFilterV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNGramTokenFilterV2.setName(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedNGramTokenFilterV2.odataType = reader.getString();
                } else if ("minGram".equals(fieldName)) {
                    deserializedNGramTokenFilterV2.minGram = reader.getNullable(JsonReader::getInt);
                } else if ("maxGram".equals(fieldName)) {
                    deserializedNGramTokenFilterV2.maxGram = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNGramTokenFilterV2;
        });
    }
}
