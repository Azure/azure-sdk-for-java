// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Divides text at non-letters; Applies the lowercase and stopword token filters. This analyzer is implemented using
 * Apache Lucene.
 */
@Fluent
public final class StopAnalyzer extends LexicalAnalyzer {
    /*
     * A URI fragment specifying the type of analyzer.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.StopAnalyzer";

    /*
     * A list of stopwords.
     */
    @Generated
    private List<String> stopwords;

    /**
     * Creates an instance of StopAnalyzer class.
     */
    @Generated
    public StopAnalyzer() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of analyzer.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the stopwords property: A list of stopwords.
     * 
     * @return the stopwords value.
     */
    @Generated
    public List<String> getStopwords() {
        return this.stopwords;
    }

    /**
     * Set the stopwords property: A list of stopwords.
     * 
     * @param stopwords the stopwords value to set.
     * @return the StopAnalyzer object itself.
     */
    @Generated
    public StopAnalyzer setStopwords(List<String> stopwords) {
        this.stopwords = stopwords;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public StopAnalyzer setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeArrayField("stopwords", this.stopwords, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StopAnalyzer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StopAnalyzer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StopAnalyzer.
     */
    @Generated
    public static StopAnalyzer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StopAnalyzer deserializedStopAnalyzer = new StopAnalyzer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStopAnalyzer.setName(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedStopAnalyzer.odataType = reader.getString();
                } else if ("stopwords".equals(fieldName)) {
                    List<String> stopwords = reader.readArray(reader1 -> reader1.getString());
                    deserializedStopAnalyzer.stopwords = stopwords;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStopAnalyzer;
        });
    }
}
