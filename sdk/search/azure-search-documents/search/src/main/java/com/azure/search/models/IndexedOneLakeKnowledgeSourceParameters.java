// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Parameters for OneLake knowledge source.
 */
@Fluent
public final class IndexedOneLakeKnowledgeSourceParameters
    implements JsonSerializable<IndexedOneLakeKnowledgeSourceParameters> {
    /*
     * OneLake workspace ID.
     */
    @Generated
    private String fabricWorkspaceId;

    /*
     * Specifies which OneLake lakehouse to access.
     */
    @Generated
    private String lakehouseId;

    /*
     * Optional OneLakehouse folder or shortcut to filter OneLake content.
     */
    @Generated
    private String targetPath;

    /*
     * Consolidates all general ingestion settings.
     */
    @Generated
    private KnowledgeSourceIngestionParameters ingestionParameters;

    /*
     * Resources created by the knowledge source.
     */
    @Generated
    private Map<String, String> createdResources;

    /**
     * Creates an instance of IndexedOneLakeKnowledgeSourceParameters class.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters() {
    }

    /**
     * Get the fabricWorkspaceId property: OneLake workspace ID.
     * 
     * @return the fabricWorkspaceId value.
     */
    @Generated
    public String getFabricWorkspaceId() {
        return this.fabricWorkspaceId;
    }

    /**
     * Set the fabricWorkspaceId property: OneLake workspace ID.
     * 
     * @param fabricWorkspaceId the fabricWorkspaceId value to set.
     * @return the IndexedOneLakeKnowledgeSourceParameters object itself.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters setFabricWorkspaceId(String fabricWorkspaceId) {
        this.fabricWorkspaceId = fabricWorkspaceId;
        return this;
    }

    /**
     * Get the lakehouseId property: Specifies which OneLake lakehouse to access.
     * 
     * @return the lakehouseId value.
     */
    @Generated
    public String getLakehouseId() {
        return this.lakehouseId;
    }

    /**
     * Set the lakehouseId property: Specifies which OneLake lakehouse to access.
     * 
     * @param lakehouseId the lakehouseId value to set.
     * @return the IndexedOneLakeKnowledgeSourceParameters object itself.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters setLakehouseId(String lakehouseId) {
        this.lakehouseId = lakehouseId;
        return this;
    }

    /**
     * Get the targetPath property: Optional OneLakehouse folder or shortcut to filter OneLake content.
     * 
     * @return the targetPath value.
     */
    @Generated
    public String getTargetPath() {
        return this.targetPath;
    }

    /**
     * Set the targetPath property: Optional OneLakehouse folder or shortcut to filter OneLake content.
     * 
     * @param targetPath the targetPath value to set.
     * @return the IndexedOneLakeKnowledgeSourceParameters object itself.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters setTargetPath(String targetPath) {
        this.targetPath = targetPath;
        return this;
    }

    /**
     * Get the ingestionParameters property: Consolidates all general ingestion settings.
     * 
     * @return the ingestionParameters value.
     */
    @Generated
    public KnowledgeSourceIngestionParameters getIngestionParameters() {
        return this.ingestionParameters;
    }

    /**
     * Set the ingestionParameters property: Consolidates all general ingestion settings.
     * 
     * @param ingestionParameters the ingestionParameters value to set.
     * @return the IndexedOneLakeKnowledgeSourceParameters object itself.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParameters
        setIngestionParameters(KnowledgeSourceIngestionParameters ingestionParameters) {
        this.ingestionParameters = ingestionParameters;
        return this;
    }

    /**
     * Get the createdResources property: Resources created by the knowledge source.
     * 
     * @return the createdResources value.
     */
    @Generated
    public Map<String, String> getCreatedResources() {
        return this.createdResources;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fabricWorkspaceId", this.fabricWorkspaceId);
        jsonWriter.writeStringField("lakehouseId", this.lakehouseId);
        jsonWriter.writeStringField("targetPath", this.targetPath);
        jsonWriter.writeJsonField("ingestionParameters", this.ingestionParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexedOneLakeKnowledgeSourceParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexedOneLakeKnowledgeSourceParameters if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexedOneLakeKnowledgeSourceParameters.
     */
    @Generated
    public static IndexedOneLakeKnowledgeSourceParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexedOneLakeKnowledgeSourceParameters deserializedIndexedOneLakeKnowledgeSourceParameters
                = new IndexedOneLakeKnowledgeSourceParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fabricWorkspaceId".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParameters.fabricWorkspaceId = reader.getString();
                } else if ("lakehouseId".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParameters.lakehouseId = reader.getString();
                } else if ("targetPath".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParameters.targetPath = reader.getString();
                } else if ("ingestionParameters".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParameters.ingestionParameters
                        = KnowledgeSourceIngestionParameters.fromJson(reader);
                } else if ("createdResources".equals(fieldName)) {
                    Map<String, String> createdResources = reader.readMap(reader1 -> reader1.getString());
                    deserializedIndexedOneLakeKnowledgeSourceParameters.createdResources = createdResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexedOneLakeKnowledgeSourceParameters;
        });
    }
}
