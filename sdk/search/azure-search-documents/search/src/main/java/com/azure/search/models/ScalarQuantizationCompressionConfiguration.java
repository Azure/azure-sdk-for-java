// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains configuration options specific to the scalar quantization compression method used during indexing and
 * querying.
 */
@Fluent
public final class ScalarQuantizationCompressionConfiguration extends VectorSearchCompressionConfiguration {
    /*
     * The name of the kind of compression method being configured for use with vector search.
     */
    @Generated
    private VectorSearchCompressionKind kind = VectorSearchCompressionKind.SCALAR_QUANTIZATION;

    /*
     * Contains the parameters specific to Scalar Quantization.
     */
    @Generated
    private ScalarQuantizationParameters parameters;

    /**
     * Creates an instance of ScalarQuantizationCompressionConfiguration class.
     */
    @Generated
    public ScalarQuantizationCompressionConfiguration() {
    }

    /**
     * Get the kind property: The name of the kind of compression method being configured for use with vector search.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public VectorSearchCompressionKind getKind() {
        return this.kind;
    }

    /**
     * Get the parameters property: Contains the parameters specific to Scalar Quantization.
     * 
     * @return the parameters value.
     */
    @Generated
    public ScalarQuantizationParameters getParameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Contains the parameters specific to Scalar Quantization.
     * 
     * @param parameters the parameters value to set.
     * @return the ScalarQuantizationCompressionConfiguration object itself.
     */
    @Generated
    public ScalarQuantizationCompressionConfiguration setParameters(ScalarQuantizationParameters parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ScalarQuantizationCompressionConfiguration setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ScalarQuantizationCompressionConfiguration setRerankWithOriginalVectors(Boolean rerankWithOriginalVectors) {
        super.setRerankWithOriginalVectors(rerankWithOriginalVectors);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ScalarQuantizationCompressionConfiguration setDefaultOversampling(Double defaultOversampling) {
        super.setDefaultOversampling(defaultOversampling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ScalarQuantizationCompressionConfiguration setRescoringOptions(RescoringOptions rescoringOptions) {
        super.setRescoringOptions(rescoringOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ScalarQuantizationCompressionConfiguration setTruncationDimension(Integer truncationDimension) {
        super.setTruncationDimension(truncationDimension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeBooleanField("rerankWithOriginalVectors", isRerankWithOriginalVectors());
        jsonWriter.writeNumberField("defaultOversampling", getDefaultOversampling());
        jsonWriter.writeJsonField("rescoringOptions", getRescoringOptions());
        jsonWriter.writeNumberField("truncationDimension", getTruncationDimension());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("scalarQuantizationParameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScalarQuantizationCompressionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScalarQuantizationCompressionConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScalarQuantizationCompressionConfiguration.
     */
    @Generated
    public static ScalarQuantizationCompressionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScalarQuantizationCompressionConfiguration deserializedScalarQuantizationCompressionConfiguration
                = new ScalarQuantizationCompressionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration.setName(reader.getString());
                } else if ("rerankWithOriginalVectors".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration
                        .setRerankWithOriginalVectors(reader.getNullable(JsonReader::getBoolean));
                } else if ("defaultOversampling".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration
                        .setDefaultOversampling(reader.getNullable(JsonReader::getDouble));
                } else if ("rescoringOptions".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration
                        .setRescoringOptions(RescoringOptions.fromJson(reader));
                } else if ("truncationDimension".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration
                        .setTruncationDimension(reader.getNullable(JsonReader::getInt));
                } else if ("kind".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration.kind
                        = VectorSearchCompressionKind.fromString(reader.getString());
                } else if ("scalarQuantizationParameters".equals(fieldName)) {
                    deserializedScalarQuantizationCompressionConfiguration.parameters
                        = ScalarQuantizationParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScalarQuantizationCompressionConfiguration;
        });
    }
}
