// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies an Azure Machine Learning endpoint deployed via the Azure AI Foundry Model Catalog for generating the
 * vector embedding of a query string.
 */
@Fluent
public final class AMLVectorizer extends VectorSearchVectorizer {
    /*
     * The name of the kind of vectorization method being configured for use with vector search.
     */
    @Generated
    private VectorSearchVectorizerKind kind = VectorSearchVectorizerKind.AML;

    /*
     * Specifies the properties of the AML vectorizer.
     */
    @Generated
    private AMLParameters aMLParameters;

    /**
     * Creates an instance of AMLVectorizer class.
     */
    @Generated
    public AMLVectorizer() {
    }

    /**
     * Get the kind property: The name of the kind of vectorization method being configured for use with vector search.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public VectorSearchVectorizerKind getKind() {
        return this.kind;
    }

    /**
     * Get the aMLParameters property: Specifies the properties of the AML vectorizer.
     * 
     * @return the aMLParameters value.
     */
    @Generated
    public AMLParameters getAMLParameters() {
        return this.aMLParameters;
    }

    /**
     * Set the aMLParameters property: Specifies the properties of the AML vectorizer.
     * 
     * @param aMLParameters the aMLParameters value to set.
     * @return the AMLVectorizer object itself.
     */
    @Generated
    public AMLVectorizer setAMLParameters(AMLParameters aMLParameters) {
        this.aMLParameters = aMLParameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public AMLVectorizer setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("amlParameters", this.aMLParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AMLVectorizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AMLVectorizer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AMLVectorizer.
     */
    @Generated
    public static AMLVectorizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AMLVectorizer deserializedAMLVectorizer = new AMLVectorizer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAMLVectorizer.setName(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedAMLVectorizer.kind = VectorSearchVectorizerKind.fromString(reader.getString());
                } else if ("amlParameters".equals(fieldName)) {
                    deserializedAMLVectorizer.aMLParameters = AMLParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAMLVectorizer;
        });
    }
}
