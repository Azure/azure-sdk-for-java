// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Projection definition for what data to store in Azure Files.
 */
@Fluent
public final class SearchIndexerKnowledgeStoreFileProjectionSelector
    extends SearchIndexerKnowledgeStoreBlobProjectionSelector {
    /**
     * Creates an instance of SearchIndexerKnowledgeStoreFileProjectionSelector class.
     */
    @Generated
    public SearchIndexerKnowledgeStoreFileProjectionSelector() {
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setStorageContainer(String storageContainer) {
        super.setStorageContainer(storageContainer);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setReferenceKeyName(String referenceKeyName) {
        super.setReferenceKeyName(referenceKeyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setGeneratedKeyName(String generatedKeyName) {
        super.setGeneratedKeyName(generatedKeyName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setSource(String source) {
        super.setSource(source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setSourceContext(String sourceContext) {
        super.setSourceContext(sourceContext);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public SearchIndexerKnowledgeStoreFileProjectionSelector setInputs(List<InputFieldMappingEntry> inputs) {
        super.setInputs(inputs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageContainer", getStorageContainer());
        jsonWriter.writeStringField("referenceKeyName", getReferenceKeyName());
        jsonWriter.writeStringField("generatedKeyName", getGeneratedKeyName());
        jsonWriter.writeStringField("source", getSource());
        jsonWriter.writeStringField("sourceContext", getSourceContext());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchIndexerKnowledgeStoreFileProjectionSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerKnowledgeStoreFileProjectionSelector if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchIndexerKnowledgeStoreFileProjectionSelector.
     */
    @Generated
    public static SearchIndexerKnowledgeStoreFileProjectionSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchIndexerKnowledgeStoreFileProjectionSelector deserializedSearchIndexerKnowledgeStoreFileProjectionSelector
                = new SearchIndexerKnowledgeStoreFileProjectionSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageContainer".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector
                        .setStorageContainer(reader.getString());
                } else if ("referenceKeyName".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector
                        .setReferenceKeyName(reader.getString());
                } else if ("generatedKeyName".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector
                        .setGeneratedKeyName(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector.setSource(reader.getString());
                } else if ("sourceContext".equals(fieldName)) {
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector.setSourceContext(reader.getString());
                } else if ("inputs".equals(fieldName)) {
                    List<InputFieldMappingEntry> inputs
                        = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    deserializedSearchIndexerKnowledgeStoreFileProjectionSelector.setInputs(inputs);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchIndexerKnowledgeStoreFileProjectionSelector;
        });
    }
}
