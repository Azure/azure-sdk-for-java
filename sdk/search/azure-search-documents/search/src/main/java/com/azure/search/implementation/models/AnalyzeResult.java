// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.search.models.AnalyzedTokenInfo;
import java.io.IOException;
import java.util.List;

/**
 * The result of testing an analyzer on text.
 */
@Fluent
public final class AnalyzeResult implements JsonSerializable<AnalyzeResult> {
    /*
     * The list of tokens returned by the analyzer specified in the request.
     */
    @Generated
    private List<AnalyzedTokenInfo> tokens;

    /**
     * Creates an instance of AnalyzeResult class.
     */
    @Generated
    public AnalyzeResult() {
    }

    /**
     * Get the tokens property: The list of tokens returned by the analyzer specified in the request.
     * 
     * @return the tokens value.
     */
    @Generated
    public List<AnalyzedTokenInfo> getTokens() {
        return this.tokens;
    }

    /**
     * Set the tokens property: The list of tokens returned by the analyzer specified in the request.
     * 
     * @param tokens the tokens value to set.
     * @return the AnalyzeResult object itself.
     */
    @Generated
    public AnalyzeResult setTokens(List<AnalyzedTokenInfo> tokens) {
        this.tokens = tokens;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tokens", this.tokens, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeResult.
     */
    @Generated
    public static AnalyzeResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeResult deserializedAnalyzeResult = new AnalyzeResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tokens".equals(fieldName)) {
                    List<AnalyzedTokenInfo> tokens = reader.readArray(reader1 -> AnalyzedTokenInfo.fromJson(reader1));
                    deserializedAnalyzeResult.tokens = tokens;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeResult;
        });
    }
}
