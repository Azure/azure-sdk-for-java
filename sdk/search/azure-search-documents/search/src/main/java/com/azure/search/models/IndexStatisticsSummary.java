// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Statistics for a given index. Statistics are collected periodically and are not guaranteed to always be up-to-date.
 */
@Fluent
public final class IndexStatisticsSummary implements JsonSerializable<IndexStatisticsSummary> {
    /*
     * The name of the index.
     */
    @Generated
    private String name;

    /*
     * The number of documents in the index.
     */
    @Generated
    private long documentCount;

    /*
     * The amount of storage in bytes consumed by the index.
     */
    @Generated
    private long storageSize;

    /*
     * The amount of memory in bytes consumed by vectors in the index.
     */
    @Generated
    private long vectorIndexSize;

    /**
     * Creates an instance of IndexStatisticsSummary class.
     */
    @Generated
    public IndexStatisticsSummary() {
    }

    /**
     * Get the name property: The name of the index.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the index.
     * 
     * @param name the name value to set.
     * @return the IndexStatisticsSummary object itself.
     */
    @Generated
    public IndexStatisticsSummary setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the documentCount property: The number of documents in the index.
     * 
     * @return the documentCount value.
     */
    @Generated
    public long getDocumentCount() {
        return this.documentCount;
    }

    /**
     * Get the storageSize property: The amount of storage in bytes consumed by the index.
     * 
     * @return the storageSize value.
     */
    @Generated
    public long getStorageSize() {
        return this.storageSize;
    }

    /**
     * Get the vectorIndexSize property: The amount of memory in bytes consumed by vectors in the index.
     * 
     * @return the vectorIndexSize value.
     */
    @Generated
    public long getVectorIndexSize() {
        return this.vectorIndexSize;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexStatisticsSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexStatisticsSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexStatisticsSummary.
     */
    @Generated
    public static IndexStatisticsSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexStatisticsSummary deserializedIndexStatisticsSummary = new IndexStatisticsSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIndexStatisticsSummary.name = reader.getString();
                } else if ("documentCount".equals(fieldName)) {
                    deserializedIndexStatisticsSummary.documentCount = reader.getLong();
                } else if ("storageSize".equals(fieldName)) {
                    deserializedIndexStatisticsSummary.storageSize = reader.getLong();
                } else if ("vectorIndexSize".equals(fieldName)) {
                    deserializedIndexStatisticsSummary.vectorIndexSize = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexStatisticsSummary;
        });
    }
}
