// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides parameter values to a distance scoring function.
 */
@Fluent
public final class DistanceScoringParameters implements JsonSerializable<DistanceScoringParameters> {
    /*
     * The name of the parameter passed in search queries to specify the reference location.
     */
    @Generated
    private String referencePointParameter;

    /*
     * The distance in kilometers from the reference location where the boosting range ends.
     */
    @Generated
    private double boostingDistance;

    /**
     * Creates an instance of DistanceScoringParameters class.
     */
    @Generated
    public DistanceScoringParameters() {
    }

    /**
     * Get the referencePointParameter property: The name of the parameter passed in search queries to specify the
     * reference location.
     * 
     * @return the referencePointParameter value.
     */
    @Generated
    public String getReferencePointParameter() {
        return this.referencePointParameter;
    }

    /**
     * Set the referencePointParameter property: The name of the parameter passed in search queries to specify the
     * reference location.
     * 
     * @param referencePointParameter the referencePointParameter value to set.
     * @return the DistanceScoringParameters object itself.
     */
    @Generated
    public DistanceScoringParameters setReferencePointParameter(String referencePointParameter) {
        this.referencePointParameter = referencePointParameter;
        return this;
    }

    /**
     * Get the boostingDistance property: The distance in kilometers from the reference location where the boosting
     * range ends.
     * 
     * @return the boostingDistance value.
     */
    @Generated
    public double getBoostingDistance() {
        return this.boostingDistance;
    }

    /**
     * Set the boostingDistance property: The distance in kilometers from the reference location where the boosting
     * range ends.
     * 
     * @param boostingDistance the boostingDistance value to set.
     * @return the DistanceScoringParameters object itself.
     */
    @Generated
    public DistanceScoringParameters setBoostingDistance(double boostingDistance) {
        this.boostingDistance = boostingDistance;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("referencePointParameter", this.referencePointParameter);
        jsonWriter.writeDoubleField("boostingDistance", this.boostingDistance);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistanceScoringParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistanceScoringParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DistanceScoringParameters.
     */
    @Generated
    public static DistanceScoringParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistanceScoringParameters deserializedDistanceScoringParameters = new DistanceScoringParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referencePointParameter".equals(fieldName)) {
                    deserializedDistanceScoringParameters.referencePointParameter = reader.getString();
                } else if ("boostingDistance".equals(fieldName)) {
                    deserializedDistanceScoringParameters.boostingDistance = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistanceScoringParameters;
        });
    }
}
