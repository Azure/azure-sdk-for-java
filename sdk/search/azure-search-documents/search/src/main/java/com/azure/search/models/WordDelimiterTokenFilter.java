// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Splits words into subwords and performs optional transformations on subword groups. This token filter is implemented
 * using Apache Lucene.
 */
@Fluent
public final class WordDelimiterTokenFilter extends TokenFilter {
    /*
     * A URI fragment specifying the type of token filter.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.WordDelimiterTokenFilter";

    /*
     * A value indicating whether to generate part words. If set, causes parts of words to be generated; for example
     * "AzureSearch" becomes "Azure" "Search". Default is true.
     */
    @Generated
    private Boolean generateWordParts;

    /*
     * A value indicating whether to generate number subwords. Default is true.
     */
    @Generated
    private Boolean generateNumberParts;

    /*
     * A value indicating whether maximum runs of word parts will be catenated. For example, if this is set to true,
     * "Azure-Search" becomes "AzureSearch". Default is false.
     */
    @Generated
    private Boolean catenateWords;

    /*
     * A value indicating whether maximum runs of number parts will be catenated. For example, if this is set to true,
     * "1-2" becomes "12". Default is false.
     */
    @Generated
    private Boolean catenateNumbers;

    /*
     * A value indicating whether all subword parts will be catenated. For example, if this is set to true,
     * "Azure-Search-1" becomes "AzureSearch1". Default is false.
     */
    @Generated
    private Boolean catenateAll;

    /*
     * A value indicating whether to split words on caseChange. For example, if this is set to true, "AzureSearch"
     * becomes "Azure" "Search". Default is true.
     */
    @Generated
    private Boolean splitOnCaseChange;

    /*
     * A value indicating whether original words will be preserved and added to the subword list. Default is false.
     */
    @Generated
    private Boolean preserveOriginal;

    /*
     * A value indicating whether to split on numbers. For example, if this is set to true, "Azure1Search" becomes
     * "Azure" "1" "Search". Default is true.
     */
    @Generated
    private Boolean splitOnNumerics;

    /*
     * A value indicating whether to remove trailing "'s" for each subword. Default is true.
     */
    @Generated
    private Boolean stemEnglishPossessive;

    /*
     * A list of tokens to protect from being delimited.
     */
    @Generated
    private List<String> protectedWords;

    /**
     * Creates an instance of WordDelimiterTokenFilter class.
     */
    @Generated
    public WordDelimiterTokenFilter() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of token filter.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the generateWordParts property: A value indicating whether to generate part words. If set, causes parts of
     * words to be generated; for example "AzureSearch" becomes "Azure" "Search". Default is true.
     * 
     * @return the generateWordParts value.
     */
    @Generated
    public Boolean isGenerateWordParts() {
        return this.generateWordParts;
    }

    /**
     * Set the generateWordParts property: A value indicating whether to generate part words. If set, causes parts of
     * words to be generated; for example "AzureSearch" becomes "Azure" "Search". Default is true.
     * 
     * @param generateWordParts the generateWordParts value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setGenerateWordParts(Boolean generateWordParts) {
        this.generateWordParts = generateWordParts;
        return this;
    }

    /**
     * Get the generateNumberParts property: A value indicating whether to generate number subwords. Default is true.
     * 
     * @return the generateNumberParts value.
     */
    @Generated
    public Boolean isGenerateNumberParts() {
        return this.generateNumberParts;
    }

    /**
     * Set the generateNumberParts property: A value indicating whether to generate number subwords. Default is true.
     * 
     * @param generateNumberParts the generateNumberParts value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setGenerateNumberParts(Boolean generateNumberParts) {
        this.generateNumberParts = generateNumberParts;
        return this;
    }

    /**
     * Get the catenateWords property: A value indicating whether maximum runs of word parts will be catenated. For
     * example, if this is set to true, "Azure-Search" becomes "AzureSearch". Default is false.
     * 
     * @return the catenateWords value.
     */
    @Generated
    public Boolean isCatenateWords() {
        return this.catenateWords;
    }

    /**
     * Set the catenateWords property: A value indicating whether maximum runs of word parts will be catenated. For
     * example, if this is set to true, "Azure-Search" becomes "AzureSearch". Default is false.
     * 
     * @param catenateWords the catenateWords value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setCatenateWords(Boolean catenateWords) {
        this.catenateWords = catenateWords;
        return this;
    }

    /**
     * Get the catenateNumbers property: A value indicating whether maximum runs of number parts will be catenated. For
     * example, if this is set to true, "1-2" becomes "12". Default is false.
     * 
     * @return the catenateNumbers value.
     */
    @Generated
    public Boolean isCatenateNumbers() {
        return this.catenateNumbers;
    }

    /**
     * Set the catenateNumbers property: A value indicating whether maximum runs of number parts will be catenated. For
     * example, if this is set to true, "1-2" becomes "12". Default is false.
     * 
     * @param catenateNumbers the catenateNumbers value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setCatenateNumbers(Boolean catenateNumbers) {
        this.catenateNumbers = catenateNumbers;
        return this;
    }

    /**
     * Get the catenateAll property: A value indicating whether all subword parts will be catenated. For example, if
     * this is set to true, "Azure-Search-1" becomes "AzureSearch1". Default is false.
     * 
     * @return the catenateAll value.
     */
    @Generated
    public Boolean isCatenateAll() {
        return this.catenateAll;
    }

    /**
     * Set the catenateAll property: A value indicating whether all subword parts will be catenated. For example, if
     * this is set to true, "Azure-Search-1" becomes "AzureSearch1". Default is false.
     * 
     * @param catenateAll the catenateAll value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setCatenateAll(Boolean catenateAll) {
        this.catenateAll = catenateAll;
        return this;
    }

    /**
     * Get the splitOnCaseChange property: A value indicating whether to split words on caseChange. For example, if this
     * is set to true, "AzureSearch" becomes "Azure" "Search". Default is true.
     * 
     * @return the splitOnCaseChange value.
     */
    @Generated
    public Boolean isSplitOnCaseChange() {
        return this.splitOnCaseChange;
    }

    /**
     * Set the splitOnCaseChange property: A value indicating whether to split words on caseChange. For example, if this
     * is set to true, "AzureSearch" becomes "Azure" "Search". Default is true.
     * 
     * @param splitOnCaseChange the splitOnCaseChange value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setSplitOnCaseChange(Boolean splitOnCaseChange) {
        this.splitOnCaseChange = splitOnCaseChange;
        return this;
    }

    /**
     * Get the preserveOriginal property: A value indicating whether original words will be preserved and added to the
     * subword list. Default is false.
     * 
     * @return the preserveOriginal value.
     */
    @Generated
    public Boolean isPreserveOriginal() {
        return this.preserveOriginal;
    }

    /**
     * Set the preserveOriginal property: A value indicating whether original words will be preserved and added to the
     * subword list. Default is false.
     * 
     * @param preserveOriginal the preserveOriginal value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setPreserveOriginal(Boolean preserveOriginal) {
        this.preserveOriginal = preserveOriginal;
        return this;
    }

    /**
     * Get the splitOnNumerics property: A value indicating whether to split on numbers. For example, if this is set to
     * true, "Azure1Search" becomes "Azure" "1" "Search". Default is true.
     * 
     * @return the splitOnNumerics value.
     */
    @Generated
    public Boolean isSplitOnNumerics() {
        return this.splitOnNumerics;
    }

    /**
     * Set the splitOnNumerics property: A value indicating whether to split on numbers. For example, if this is set to
     * true, "Azure1Search" becomes "Azure" "1" "Search". Default is true.
     * 
     * @param splitOnNumerics the splitOnNumerics value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setSplitOnNumerics(Boolean splitOnNumerics) {
        this.splitOnNumerics = splitOnNumerics;
        return this;
    }

    /**
     * Get the stemEnglishPossessive property: A value indicating whether to remove trailing "'s" for each subword.
     * Default is true.
     * 
     * @return the stemEnglishPossessive value.
     */
    @Generated
    public Boolean isStemEnglishPossessive() {
        return this.stemEnglishPossessive;
    }

    /**
     * Set the stemEnglishPossessive property: A value indicating whether to remove trailing "'s" for each subword.
     * Default is true.
     * 
     * @param stemEnglishPossessive the stemEnglishPossessive value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setStemEnglishPossessive(Boolean stemEnglishPossessive) {
        this.stemEnglishPossessive = stemEnglishPossessive;
        return this;
    }

    /**
     * Get the protectedWords property: A list of tokens to protect from being delimited.
     * 
     * @return the protectedWords value.
     */
    @Generated
    public List<String> getProtectedWords() {
        return this.protectedWords;
    }

    /**
     * Set the protectedWords property: A list of tokens to protect from being delimited.
     * 
     * @param protectedWords the protectedWords value to set.
     * @return the WordDelimiterTokenFilter object itself.
     */
    @Generated
    public WordDelimiterTokenFilter setProtectedWords(List<String> protectedWords) {
        this.protectedWords = protectedWords;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public WordDelimiterTokenFilter setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeBooleanField("generateWordParts", this.generateWordParts);
        jsonWriter.writeBooleanField("generateNumberParts", this.generateNumberParts);
        jsonWriter.writeBooleanField("catenateWords", this.catenateWords);
        jsonWriter.writeBooleanField("catenateNumbers", this.catenateNumbers);
        jsonWriter.writeBooleanField("catenateAll", this.catenateAll);
        jsonWriter.writeBooleanField("splitOnCaseChange", this.splitOnCaseChange);
        jsonWriter.writeBooleanField("preserveOriginal", this.preserveOriginal);
        jsonWriter.writeBooleanField("splitOnNumerics", this.splitOnNumerics);
        jsonWriter.writeBooleanField("stemEnglishPossessive", this.stemEnglishPossessive);
        jsonWriter.writeArrayField("protectedWords", this.protectedWords,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WordDelimiterTokenFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WordDelimiterTokenFilter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WordDelimiterTokenFilter.
     */
    @Generated
    public static WordDelimiterTokenFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WordDelimiterTokenFilter deserializedWordDelimiterTokenFilter = new WordDelimiterTokenFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.setName(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.odataType = reader.getString();
                } else if ("generateWordParts".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.generateWordParts = reader.getNullable(JsonReader::getBoolean);
                } else if ("generateNumberParts".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.generateNumberParts
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("catenateWords".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.catenateWords = reader.getNullable(JsonReader::getBoolean);
                } else if ("catenateNumbers".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.catenateNumbers = reader.getNullable(JsonReader::getBoolean);
                } else if ("catenateAll".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.catenateAll = reader.getNullable(JsonReader::getBoolean);
                } else if ("splitOnCaseChange".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.splitOnCaseChange = reader.getNullable(JsonReader::getBoolean);
                } else if ("preserveOriginal".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.preserveOriginal = reader.getNullable(JsonReader::getBoolean);
                } else if ("splitOnNumerics".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.splitOnNumerics = reader.getNullable(JsonReader::getBoolean);
                } else if ("stemEnglishPossessive".equals(fieldName)) {
                    deserializedWordDelimiterTokenFilter.stemEnglishPossessive
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("protectedWords".equals(fieldName)) {
                    List<String> protectedWords = reader.readArray(reader1 -> reader1.getString());
                    deserializedWordDelimiterTokenFilter.protectedWords = protectedWords;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWordDelimiterTokenFilter;
        });
    }
}
