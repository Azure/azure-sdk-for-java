// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Breaks text following the Unicode Text Segmentation rules. This tokenizer is implemented using Apache Lucene.
 */
@Fluent
public final class LuceneStandardTokenizer extends LexicalTokenizer {
    /*
     * A URI fragment specifying the type of tokenizer.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.StandardTokenizer";

    /*
     * The maximum token length. Default is 255. Tokens longer than the maximum length are split.
     */
    @Generated
    private Integer maxTokenLength;

    /**
     * Creates an instance of LuceneStandardTokenizer class.
     */
    @Generated
    public LuceneStandardTokenizer() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of tokenizer.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the maxTokenLength property: The maximum token length. Default is 255. Tokens longer than the maximum length
     * are split.
     * 
     * @return the maxTokenLength value.
     */
    @Generated
    public Integer getMaxTokenLength() {
        return this.maxTokenLength;
    }

    /**
     * Set the maxTokenLength property: The maximum token length. Default is 255. Tokens longer than the maximum length
     * are split.
     * 
     * @param maxTokenLength the maxTokenLength value to set.
     * @return the LuceneStandardTokenizer object itself.
     */
    @Generated
    public LuceneStandardTokenizer setMaxTokenLength(Integer maxTokenLength) {
        this.maxTokenLength = maxTokenLength;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LuceneStandardTokenizer setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeNumberField("maxTokenLength", this.maxTokenLength);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LuceneStandardTokenizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LuceneStandardTokenizer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LuceneStandardTokenizer.
     */
    @Generated
    public static LuceneStandardTokenizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LuceneStandardTokenizer deserializedLuceneStandardTokenizer = new LuceneStandardTokenizer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLuceneStandardTokenizer.setName(reader.getString());
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedLuceneStandardTokenizer.odataType = reader.getString();
                } else if ("maxTokenLength".equals(fieldName)) {
                    deserializedLuceneStandardTokenizer.maxTokenLength = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLuceneStandardTokenizer;
        });
    }
}
