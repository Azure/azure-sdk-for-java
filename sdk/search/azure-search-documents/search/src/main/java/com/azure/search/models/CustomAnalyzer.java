// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Allows you to take control over the process of converting text into indexable/searchable tokens. It's a user-defined
 * configuration consisting of a single predefined tokenizer and one or more filters. The tokenizer is responsible for
 * breaking text into tokens, and the filters for modifying tokens emitted by the tokenizer.
 */
@Fluent
public final class CustomAnalyzer extends LexicalAnalyzer {
    /*
     * A URI fragment specifying the type of analyzer.
     */
    @Generated
    private String odataType = "#Microsoft.Azure.Search.CustomAnalyzer";

    /*
     * The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as breaking a sentence
     * into words.
     */
    @Generated
    private String tokenizer;

    /*
     * A list of token filters used to filter out or modify the tokens generated by a tokenizer. For example, you can
     * specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which
     * they are listed.
     */
    @Generated
    private List<String> tokenFilters;

    /*
     * A list of character filters used to prepare input text before it is processed by the tokenizer. For instance,
     * they can replace certain characters or symbols. The filters are run in the order in which they are listed.
     */
    @Generated
    private List<String> charFilters;

    /**
     * Creates an instance of CustomAnalyzer class.
     */
    @Generated
    public CustomAnalyzer() {
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of analyzer.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the tokenizer property: The name of the tokenizer to use to divide continuous text into a sequence of tokens,
     * such as breaking a sentence into words.
     * 
     * @return the tokenizer value.
     */
    @Generated
    public String getTokenizer() {
        return this.tokenizer;
    }

    /**
     * Set the tokenizer property: The name of the tokenizer to use to divide continuous text into a sequence of tokens,
     * such as breaking a sentence into words.
     * 
     * @param tokenizer the tokenizer value to set.
     * @return the CustomAnalyzer object itself.
     */
    @Generated
    public CustomAnalyzer setTokenizer(String tokenizer) {
        this.tokenizer = tokenizer;
        return this;
    }

    /**
     * Get the tokenFilters property: A list of token filters used to filter out or modify the tokens generated by a
     * tokenizer. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters
     * are run in the order in which they are listed.
     * 
     * @return the tokenFilters value.
     */
    @Generated
    public List<String> getTokenFilters() {
        return this.tokenFilters;
    }

    /**
     * Set the tokenFilters property: A list of token filters used to filter out or modify the tokens generated by a
     * tokenizer. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters
     * are run in the order in which they are listed.
     * 
     * @param tokenFilters the tokenFilters value to set.
     * @return the CustomAnalyzer object itself.
     */
    @Generated
    public CustomAnalyzer setTokenFilters(List<String> tokenFilters) {
        this.tokenFilters = tokenFilters;
        return this;
    }

    /**
     * Get the charFilters property: A list of character filters used to prepare input text before it is processed by
     * the tokenizer. For instance, they can replace certain characters or symbols. The filters are run in the order in
     * which they are listed.
     * 
     * @return the charFilters value.
     */
    @Generated
    public List<String> getCharFilters() {
        return this.charFilters;
    }

    /**
     * Set the charFilters property: A list of character filters used to prepare input text before it is processed by
     * the tokenizer. For instance, they can replace certain characters or symbols. The filters are run in the order in
     * which they are listed.
     * 
     * @param charFilters the charFilters value to set.
     * @return the CustomAnalyzer object itself.
     */
    @Generated
    public CustomAnalyzer setCharFilters(List<String> charFilters) {
        this.charFilters = charFilters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CustomAnalyzer setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("tokenizer", this.tokenizer);
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeArrayField("tokenFilters", this.tokenFilters, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("charFilters", this.charFilters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomAnalyzer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomAnalyzer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomAnalyzer.
     */
    @Generated
    public static CustomAnalyzer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomAnalyzer deserializedCustomAnalyzer = new CustomAnalyzer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCustomAnalyzer.setName(reader.getString());
                } else if ("tokenizer".equals(fieldName)) {
                    deserializedCustomAnalyzer.tokenizer = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    deserializedCustomAnalyzer.odataType = reader.getString();
                } else if ("tokenFilters".equals(fieldName)) {
                    List<String> tokenFilters = reader.readArray(reader1 -> reader1.getString());
                    deserializedCustomAnalyzer.tokenFilters = tokenFilters;
                } else if ("charFilters".equals(fieldName)) {
                    List<String> charFilters = reader.readArray(reader1 -> reader1.getString());
                    deserializedCustomAnalyzer.charFilters = charFilters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomAnalyzer;
        });
    }
}
