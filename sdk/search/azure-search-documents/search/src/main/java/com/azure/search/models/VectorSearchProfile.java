// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a combination of configurations to use with vector search.
 */
@Fluent
public final class VectorSearchProfile implements JsonSerializable<VectorSearchProfile> {
    /*
     * The name to associate with this particular vector search profile.
     */
    @Generated
    private String name;

    /*
     * The name of the vector search algorithm configuration that specifies the algorithm and optional parameters.
     */
    @Generated
    private String algorithmConfigurationName;

    /*
     * The name of the vectorization being configured for use with vector search.
     */
    @Generated
    private String vectorizerName;

    /*
     * The name of the compression method configuration that specifies the compression method and optional parameters.
     */
    @Generated
    private String compressionConfigurationName;

    /**
     * Creates an instance of VectorSearchProfile class.
     */
    @Generated
    public VectorSearchProfile() {
    }

    /**
     * Get the name property: The name to associate with this particular vector search profile.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name to associate with this particular vector search profile.
     * 
     * @param name the name value to set.
     * @return the VectorSearchProfile object itself.
     */
    @Generated
    public VectorSearchProfile setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the algorithmConfigurationName property: The name of the vector search algorithm configuration that specifies
     * the algorithm and optional parameters.
     * 
     * @return the algorithmConfigurationName value.
     */
    @Generated
    public String getAlgorithmConfigurationName() {
        return this.algorithmConfigurationName;
    }

    /**
     * Set the algorithmConfigurationName property: The name of the vector search algorithm configuration that specifies
     * the algorithm and optional parameters.
     * 
     * @param algorithmConfigurationName the algorithmConfigurationName value to set.
     * @return the VectorSearchProfile object itself.
     */
    @Generated
    public VectorSearchProfile setAlgorithmConfigurationName(String algorithmConfigurationName) {
        this.algorithmConfigurationName = algorithmConfigurationName;
        return this;
    }

    /**
     * Get the vectorizerName property: The name of the vectorization being configured for use with vector search.
     * 
     * @return the vectorizerName value.
     */
    @Generated
    public String getVectorizerName() {
        return this.vectorizerName;
    }

    /**
     * Set the vectorizerName property: The name of the vectorization being configured for use with vector search.
     * 
     * @param vectorizerName the vectorizerName value to set.
     * @return the VectorSearchProfile object itself.
     */
    @Generated
    public VectorSearchProfile setVectorizerName(String vectorizerName) {
        this.vectorizerName = vectorizerName;
        return this;
    }

    /**
     * Get the compressionConfigurationName property: The name of the compression method configuration that specifies
     * the compression method and optional parameters.
     * 
     * @return the compressionConfigurationName value.
     */
    @Generated
    public String getCompressionConfigurationName() {
        return this.compressionConfigurationName;
    }

    /**
     * Set the compressionConfigurationName property: The name of the compression method configuration that specifies
     * the compression method and optional parameters.
     * 
     * @param compressionConfigurationName the compressionConfigurationName value to set.
     * @return the VectorSearchProfile object itself.
     */
    @Generated
    public VectorSearchProfile setCompressionConfigurationName(String compressionConfigurationName) {
        this.compressionConfigurationName = compressionConfigurationName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("algorithm", this.algorithmConfigurationName);
        jsonWriter.writeStringField("vectorizer", this.vectorizerName);
        jsonWriter.writeStringField("compression", this.compressionConfigurationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorSearchProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorSearchProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VectorSearchProfile.
     */
    @Generated
    public static VectorSearchProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VectorSearchProfile deserializedVectorSearchProfile = new VectorSearchProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedVectorSearchProfile.name = reader.getString();
                } else if ("algorithm".equals(fieldName)) {
                    deserializedVectorSearchProfile.algorithmConfigurationName = reader.getString();
                } else if ("vectorizer".equals(fieldName)) {
                    deserializedVectorSearchProfile.vectorizerName = reader.getString();
                } else if ("compression".equals(fieldName)) {
                    deserializedVectorSearchProfile.compressionConfigurationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVectorSearchProfile;
        });
    }
}
