// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies runtime parameters for a indexed OneLake knowledge source.
 */
@Fluent
public final class IndexedOneLakeKnowledgeSourceParams extends KnowledgeSourceParams {
    /*
     * The type of the knowledge source.
     */
    @Generated
    private KnowledgeSourceKind kind = KnowledgeSourceKind.INDEXED_ONE_LAKE;

    /**
     * Creates an instance of IndexedOneLakeKnowledgeSourceParams class.
     */
    @Generated
    public IndexedOneLakeKnowledgeSourceParams() {
    }

    /**
     * Get the kind property: The type of the knowledge source.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public KnowledgeSourceKind getKind() {
        return this.kind;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSourceParams setKnowledgeSourceName(String knowledgeSourceName) {
        super.setKnowledgeSourceName(knowledgeSourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSourceParams setIncludeReferences(Boolean includeReferences) {
        super.setIncludeReferences(includeReferences);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSourceParams setIncludeReferenceSourceData(Boolean includeReferenceSourceData) {
        super.setIncludeReferenceSourceData(includeReferenceSourceData);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSourceParams setAlwaysQuerySource(Boolean alwaysQuerySource) {
        super.setAlwaysQuerySource(alwaysQuerySource);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public IndexedOneLakeKnowledgeSourceParams setRerankerThreshold(Float rerankerThreshold) {
        super.setRerankerThreshold(rerankerThreshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("knowledgeSourceName", getKnowledgeSourceName());
        jsonWriter.writeBooleanField("includeReferences", isIncludeReferences());
        jsonWriter.writeBooleanField("includeReferenceSourceData", isIncludeReferenceSourceData());
        jsonWriter.writeBooleanField("alwaysQuerySource", isAlwaysQuerySource());
        jsonWriter.writeNumberField("rerankerThreshold", getRerankerThreshold());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IndexedOneLakeKnowledgeSourceParams from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IndexedOneLakeKnowledgeSourceParams if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IndexedOneLakeKnowledgeSourceParams.
     */
    @Generated
    public static IndexedOneLakeKnowledgeSourceParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IndexedOneLakeKnowledgeSourceParams deserializedIndexedOneLakeKnowledgeSourceParams
                = new IndexedOneLakeKnowledgeSourceParams();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("knowledgeSourceName".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams.setKnowledgeSourceName(reader.getString());
                } else if ("includeReferences".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams
                        .setIncludeReferences(reader.getNullable(JsonReader::getBoolean));
                } else if ("includeReferenceSourceData".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams
                        .setIncludeReferenceSourceData(reader.getNullable(JsonReader::getBoolean));
                } else if ("alwaysQuerySource".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams
                        .setAlwaysQuerySource(reader.getNullable(JsonReader::getBoolean));
                } else if ("rerankerThreshold".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams
                        .setRerankerThreshold(reader.getNullable(JsonReader::getFloat));
                } else if ("kind".equals(fieldName)) {
                    deserializedIndexedOneLakeKnowledgeSourceParams.kind
                        = KnowledgeSourceKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIndexedOneLakeKnowledgeSourceParams;
        });
    }
}
