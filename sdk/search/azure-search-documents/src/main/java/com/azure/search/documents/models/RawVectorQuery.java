// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Objects;

/** The query parameters to use for vector search when a raw vector value is provided. */
@Fluent
public final class RawVectorQuery extends VectorQuery {
    /*
     * The kind of vector query being performed.
     */
    private static final VectorQueryKind KIND = VectorQueryKind.VECTOR;

    /*
     * The vector representation of a search query.
     */
    private List<Float> vector;

    /** Creates an instance of RawVectorQuery class. */
    public RawVectorQuery() {}

    /**
     * Get the vector property: The vector representation of a search query.
     *
     * @return the vector value.
     */
    public List<Float> getVector() {
        return this.vector;
    }

    /**
     * Set the vector property: The vector representation of a search query.
     *
     * @param vector the vector value to set.
     * @return the RawVectorQuery object itself.
     */
    public RawVectorQuery setVector(List<Float> vector) {
        this.vector = vector;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RawVectorQuery setKNearestNeighborsCount(Integer kNearestNeighborsCount) {
        super.setKNearestNeighborsCount(kNearestNeighborsCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RawVectorQuery setFields(String... fields) {
        super.setFields(fields);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public RawVectorQuery setExhaustive(Boolean exhaustive) {
        super.setExhaustive(exhaustive);
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", Objects.toString(KIND, null));
        jsonWriter.writeNumberField("k", getKNearestNeighborsCount());
        jsonWriter.writeStringField("fields", getFields());
        jsonWriter.writeBooleanField("exhaustive", isExhaustive());
        jsonWriter.writeArrayField("vector", this.vector, (writer, element) -> writer.writeFloat(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RawVectorQuery from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RawVectorQuery if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing the polymorphic discriminator.
     * @throws IOException If an error occurs while reading the RawVectorQuery.
     */
    public static RawVectorQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    RawVectorQuery deserializedRawVectorQuery = new RawVectorQuery();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("kind".equals(fieldName)) {
                            String kind = reader.getString();
                            if (!KIND.toString().equals(kind)) {
                                throw new IllegalStateException(
                                        "'kind' was expected to be non-null and equal to '"
                                                + KIND
                                                + "'. The found 'kind' was '"
                                                + kind
                                                + "'.");
                            }
                        } else if ("k".equals(fieldName)) {
                            deserializedRawVectorQuery.setKNearestNeighborsCount(
                                    reader.getNullable(JsonReader::getInt));
                        } else if ("fields".equals(fieldName)) {
                            deserializedRawVectorQuery.setFields(reader.getString());
                        } else if ("exhaustive".equals(fieldName)) {
                            deserializedRawVectorQuery.setExhaustive(reader.getNullable(JsonReader::getBoolean));
                        } else if ("vector".equals(fieldName)) {
                            List<Float> vector = reader.readArray(reader1 -> reader1.getFloat());
                            deserializedRawVectorQuery.vector = vector;
                        } else {
                            reader.skipChildren();
                        }
                    }

                    return deserializedRawVectorQuery;
                });
    }
}
