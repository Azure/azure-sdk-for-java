// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** A skill that extracts content from a file within the enrichment pipeline. */
@Fluent
public final class DocumentExtractionSkill extends SearchIndexerSkill {
    private String odataType = "#Microsoft.Skills.Util.DocumentExtractionSkill";

    private String parsingMode;

    private String dataToExtract;

    private Map<String, Object> configuration;

    /**
     * Creates an instance of DocumentExtractionSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public DocumentExtractionSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the parsingMode property: The parsingMode for the skill. Will be set to 'default' if not defined.
     *
     * @return the parsingMode value.
     */
    public String getParsingMode() {
        return this.parsingMode;
    }

    /**
     * Set the parsingMode property: The parsingMode for the skill. Will be set to 'default' if not defined.
     *
     * @param parsingMode the parsingMode value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    public DocumentExtractionSkill setParsingMode(String parsingMode) {
        this.parsingMode = parsingMode;
        return this;
    }

    /**
     * Get the dataToExtract property: The type of data to be extracted for the skill. Will be set to
     * 'contentAndMetadata' if not defined.
     *
     * @return the dataToExtract value.
     */
    public String getDataToExtract() {
        return this.dataToExtract;
    }

    /**
     * Set the dataToExtract property: The type of data to be extracted for the skill. Will be set to
     * 'contentAndMetadata' if not defined.
     *
     * @param dataToExtract the dataToExtract value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    public DocumentExtractionSkill setDataToExtract(String dataToExtract) {
        this.dataToExtract = dataToExtract;
        return this;
    }

    /**
     * Get the configuration property: A dictionary of configurations for the skill.
     *
     * @return the configuration value.
     */
    public Map<String, Object> getConfiguration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: A dictionary of configurations for the skill.
     *
     * @param configuration the configuration value to set.
     * @return the DocumentExtractionSkill object itself.
     */
    public DocumentExtractionSkill setConfiguration(Map<String, Object> configuration) {
        this.configuration = configuration;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        JsonUtils.writeArray(jsonWriter, "inputs", getInputs(), (writer, element) -> writer.writeJson(element, false));
        JsonUtils.writeArray(
                jsonWriter, "outputs", getOutputs(), (writer, element) -> writer.writeJson(element, false));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        jsonWriter.writeStringField("parsingMode", this.parsingMode, false);
        jsonWriter.writeStringField("dataToExtract", this.dataToExtract, false);
        JsonUtils.writeMap(
                jsonWriter,
                "configuration",
                this.configuration,
                (writer, element) -> JsonUtils.writeUntypedField(writer, element));
        return jsonWriter.writeEndObject().flush();
    }

    public static DocumentExtractionSkill fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean odataTypeFound = false;
                    String odataType = null;
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    String parsingMode = null;
                    String dataToExtract = null;
                    Map<String, Object> configuration = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataTypeFound = true;
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> InputFieldMappingEntry.fromJson(reader)));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> OutputFieldMappingEntry.fromJson(reader)));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("parsingMode".equals(fieldName)) {
                            parsingMode = reader.getStringValue();
                        } else if ("dataToExtract".equals(fieldName)) {
                            dataToExtract = reader.getStringValue();
                        } else if ("configuration".equals(fieldName)) {
                            if (configuration == null) {
                                configuration = new LinkedHashMap<>();
                            }

                            while (reader.nextToken() != JsonToken.END_OBJECT) {
                                fieldName = reader.getFieldName();
                                reader.nextToken();

                                configuration.put(
                                        fieldName,
                                        JsonUtils.getNullableProperty(reader, r -> JsonUtils.readUntypedField(reader)));
                            }
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!odataTypeFound
                            || !Objects.equals(odataType, "#Microsoft.Skills.Util.DocumentExtractionSkill")) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Util.DocumentExtractionSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    DocumentExtractionSkill deserializedValue = new DocumentExtractionSkill(inputs, outputs);
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.setParsingMode(parsingMode);
                    deserializedValue.setDataToExtract(dataToExtract);
                    deserializedValue.setConfiguration(configuration);

                    return deserializedValue;
                });
    }
}
