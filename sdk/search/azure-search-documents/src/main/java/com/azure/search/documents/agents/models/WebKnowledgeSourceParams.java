// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.agents.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies runtime parameters for a web knowledge source.
 */
@Fluent
public final class WebKnowledgeSourceParams extends KnowledgeSourceParams {
    /*
     * The type of the knowledge source.
     */
    @Generated
    private KnowledgeSourceKind kind = KnowledgeSourceKind.WEB;

    /*
     * The freshness of web results.
     */
    @Generated
    private String freshness;

    /**
     * Creates an instance of WebKnowledgeSourceParams class.
     * 
     * @param knowledgeSourceName the knowledgeSourceName value to set.
     */
    @Generated
    public WebKnowledgeSourceParams(String knowledgeSourceName) {
        super(knowledgeSourceName);
    }

    /**
     * Get the kind property: The type of the knowledge source.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public KnowledgeSourceKind getKind() {
        return this.kind;
    }

    /**
     * Get the freshness property: The freshness of web results.
     * 
     * @return the freshness value.
     */
    @Generated
    public String getFreshness() {
        return this.freshness;
    }

    /**
     * Set the freshness property: The freshness of web results.
     * 
     * @param freshness the freshness value to set.
     * @return the WebKnowledgeSourceParams object itself.
     */
    @Generated
    public WebKnowledgeSourceParams setFreshness(String freshness) {
        this.freshness = freshness;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("knowledgeSourceName", getKnowledgeSourceName());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("freshness", this.freshness);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebKnowledgeSourceParams from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebKnowledgeSourceParams if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebKnowledgeSourceParams.
     */
    @Generated
    public static WebKnowledgeSourceParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean knowledgeSourceNameFound = false;
            String knowledgeSourceName = null;
            KnowledgeSourceKind kind = KnowledgeSourceKind.WEB;
            String freshness = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("knowledgeSourceName".equals(fieldName)) {
                    knowledgeSourceName = reader.getString();
                    knowledgeSourceNameFound = true;
                } else if ("kind".equals(fieldName)) {
                    kind = KnowledgeSourceKind.fromString(reader.getString());
                } else if ("freshness".equals(fieldName)) {
                    freshness = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (knowledgeSourceNameFound) {
                WebKnowledgeSourceParams deserializedWebKnowledgeSourceParams
                    = new WebKnowledgeSourceParams(knowledgeSourceName);
                deserializedWebKnowledgeSourceParams.kind = kind;
                deserializedWebKnowledgeSourceParams.freshness = freshness;

                return deserializedWebKnowledgeSourceParams;
            }
            throw new IllegalStateException("Missing required property: knowledgeSourceName");
        });
    }
}
