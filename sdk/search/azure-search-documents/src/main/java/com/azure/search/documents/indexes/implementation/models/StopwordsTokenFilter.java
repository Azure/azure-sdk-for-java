// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.search.documents.indexes.models.StopwordsList;
import java.util.ArrayList;
import java.util.List;

/** Removes stop words from a token stream. This token filter is implemented using Apache Lucene. */
@Fluent
public final class StopwordsTokenFilter extends TokenFilter {
    private String odataType;

    private List<String> stopwords;

    private StopwordsList stopwordsList;

    private Boolean ignoreCase;

    private Boolean removeTrailingStopWords;

    /**
     * Creates an instance of StopwordsTokenFilter class.
     *
     * @param name the name value to set.
     */
    public StopwordsTokenFilter(String name) {
        super(name);
    }

    /**
     * Get the stopwords property: The list of stopwords. This property and the stopwords list property cannot both be
     * set.
     *
     * @return the stopwords value.
     */
    public List<String> getStopwords() {
        return this.stopwords;
    }

    /**
     * Set the stopwords property: The list of stopwords. This property and the stopwords list property cannot both be
     * set.
     *
     * @param stopwords the stopwords value to set.
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter setStopwords(List<String> stopwords) {
        this.stopwords = stopwords;
        return this;
    }

    /**
     * Get the stopwordsList property: A predefined list of stopwords to use. This property and the stopwords property
     * cannot both be set. Default is English.
     *
     * @return the stopwordsList value.
     */
    public StopwordsList getStopwordsList() {
        return this.stopwordsList;
    }

    /**
     * Set the stopwordsList property: A predefined list of stopwords to use. This property and the stopwords property
     * cannot both be set. Default is English.
     *
     * @param stopwordsList the stopwordsList value to set.
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter setStopwordsList(StopwordsList stopwordsList) {
        this.stopwordsList = stopwordsList;
        return this;
    }

    /**
     * Get the ignoreCase property: A value indicating whether to ignore case. If true, all words are converted to lower
     * case first. Default is false.
     *
     * @return the ignoreCase value.
     */
    public Boolean isIgnoreCase() {
        return this.ignoreCase;
    }

    /**
     * Set the ignoreCase property: A value indicating whether to ignore case. If true, all words are converted to lower
     * case first. Default is false.
     *
     * @param ignoreCase the ignoreCase value to set.
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter setIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }

    /**
     * Get the removeTrailingStopWords property: A value indicating whether to ignore the last search term if it's a
     * stop word. Default is true.
     *
     * @return the removeTrailingStopWords value.
     */
    public Boolean isRemoveTrailingStopWords() {
        return this.removeTrailingStopWords;
    }

    /**
     * Set the removeTrailingStopWords property: A value indicating whether to ignore the last search term if it's a
     * stop word. Default is true.
     *
     * @param removeTrailingStopWords the removeTrailingStopWords value to set.
     * @return the StopwordsTokenFilter object itself.
     */
    public StopwordsTokenFilter setRemoveTrailingStopWords(Boolean removeTrailingStopWords) {
        this.removeTrailingStopWords = removeTrailingStopWords;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeStringField("name", getName(), false);
        JsonUtils.writeArray(
                jsonWriter, "stopwords", this.stopwords, (writer, element) -> writer.writeString(element, false));
        jsonWriter.writeStringField(
                "stopwordsList", this.stopwordsList == null ? null : this.stopwordsList.toString(), false);
        jsonWriter.writeBooleanField("ignoreCase", this.ignoreCase, false);
        jsonWriter.writeBooleanField("removeTrailing", this.removeTrailingStopWords, false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of StopwordsTokenFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StopwordsTokenFilter if the JsonReader was pointing to an instance of it, or null if it
     *     was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     */
    public static StopwordsTokenFilter fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    String odataType = null;
                    boolean nameFound = false;
                    String name = null;
                    List<String> stopwords = null;
                    StopwordsList stopwordsList = null;
                    Boolean ignoreCase = null;
                    Boolean removeTrailingStopWords = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataType = reader.getStringValue();
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                            nameFound = true;
                        } else if ("stopwords".equals(fieldName)) {
                            stopwords = JsonUtils.readArray(reader, reader1 -> reader1.getStringValue());
                        } else if ("stopwordsList".equals(fieldName)) {
                            stopwordsList = StopwordsList.fromString(reader.getStringValue());
                        } else if ("ignoreCase".equals(fieldName)) {
                            ignoreCase = JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else if ("removeTrailing".equals(fieldName)) {
                            removeTrailingStopWords =
                                    JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!"#Microsoft.Azure.Search.StopwordsTokenFilter".equals(odataType)) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Azure.Search.StopwordsTokenFilter'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!nameFound) {
                        missingProperties.add("name");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    StopwordsTokenFilter deserializedValue = new StopwordsTokenFilter(name);
                    deserializedValue.odataType = odataType;
                    deserializedValue.stopwords = stopwords;
                    deserializedValue.stopwordsList = stopwordsList;
                    deserializedValue.ignoreCase = ignoreCase;
                    deserializedValue.removeTrailingStopWords = removeTrailingStopWords;

                    return deserializedValue;
                });
    }
}
