// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.List;

/** Container object for various projection selectors. */
@Fluent
public final class SearchIndexerKnowledgeStoreProjection
        implements JsonSerializable<SearchIndexerKnowledgeStoreProjection> {
    private List<SearchIndexerKnowledgeStoreTableProjectionSelector> tables;

    private List<SearchIndexerKnowledgeStoreObjectProjectionSelector> objects;

    private List<SearchIndexerKnowledgeStoreFileProjectionSelector> files;

    /**
     * Get the tables property: Projections to Azure Table storage.
     *
     * @return the tables value.
     */
    public List<SearchIndexerKnowledgeStoreTableProjectionSelector> getTables() {
        return this.tables;
    }

    /**
     * Set the tables property: Projections to Azure Table storage.
     *
     * @param tables the tables value to set.
     * @return the SearchIndexerKnowledgeStoreProjection object itself.
     */
    public SearchIndexerKnowledgeStoreProjection setTables(
            List<SearchIndexerKnowledgeStoreTableProjectionSelector> tables) {
        this.tables = tables;
        return this;
    }

    /**
     * Get the objects property: Projections to Azure Blob storage.
     *
     * @return the objects value.
     */
    public List<SearchIndexerKnowledgeStoreObjectProjectionSelector> getObjects() {
        return this.objects;
    }

    /**
     * Set the objects property: Projections to Azure Blob storage.
     *
     * @param objects the objects value to set.
     * @return the SearchIndexerKnowledgeStoreProjection object itself.
     */
    public SearchIndexerKnowledgeStoreProjection setObjects(
            List<SearchIndexerKnowledgeStoreObjectProjectionSelector> objects) {
        this.objects = objects;
        return this;
    }

    /**
     * Get the files property: Projections to Azure File storage.
     *
     * @return the files value.
     */
    public List<SearchIndexerKnowledgeStoreFileProjectionSelector> getFiles() {
        return this.files;
    }

    /**
     * Set the files property: Projections to Azure File storage.
     *
     * @param files the files value to set.
     * @return the SearchIndexerKnowledgeStoreProjection object itself.
     */
    public SearchIndexerKnowledgeStoreProjection setFiles(
            List<SearchIndexerKnowledgeStoreFileProjectionSelector> files) {
        this.files = files;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        JsonUtils.writeArray(jsonWriter, "tables", this.tables, (writer, element) -> writer.writeJson(element, false));
        JsonUtils.writeArray(
                jsonWriter, "objects", this.objects, (writer, element) -> writer.writeJson(element, false));
        JsonUtils.writeArray(jsonWriter, "files", this.files, (writer, element) -> writer.writeJson(element, false));
        return jsonWriter.writeEndObject().flush();
    }

    public static SearchIndexerKnowledgeStoreProjection fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    List<SearchIndexerKnowledgeStoreTableProjectionSelector> tables = null;
                    List<SearchIndexerKnowledgeStoreObjectProjectionSelector> objects = null;
                    List<SearchIndexerKnowledgeStoreFileProjectionSelector> files = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("tables".equals(fieldName)) {
                            tables =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r,
                                                            r1 ->
                                                                    SearchIndexerKnowledgeStoreTableProjectionSelector
                                                                            .fromJson(reader)));
                        } else if ("objects".equals(fieldName)) {
                            objects =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r,
                                                            r1 ->
                                                                    SearchIndexerKnowledgeStoreObjectProjectionSelector
                                                                            .fromJson(reader)));
                        } else if ("files".equals(fieldName)) {
                            files =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r,
                                                            r1 ->
                                                                    SearchIndexerKnowledgeStoreFileProjectionSelector
                                                                            .fromJson(reader)));
                        } else {
                            reader.skipChildren();
                        }
                    }
                    SearchIndexerKnowledgeStoreProjection deserializedValue =
                            new SearchIndexerKnowledgeStoreProjection();
                    deserializedValue.setTables(tables);
                    deserializedValue.setObjects(objects);
                    deserializedValue.setFiles(files);

                    return deserializedValue;
                });
    }
}
