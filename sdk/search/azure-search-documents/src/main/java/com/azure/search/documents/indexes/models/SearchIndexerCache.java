// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

/** The SearchIndexerCache model. */
@Fluent
public final class SearchIndexerCache implements JsonSerializable<SearchIndexerCache> {
    /*
     * The connection string to the storage account where the cache data will be persisted.
     */
    private String storageConnectionString;

    /*
     * Specifies whether incremental reprocessing is enabled.
     */
    private Boolean enableReprocessing;

    /**
     * Get the storageConnectionString property: The connection string to the storage account where the cache data will
     * be persisted.
     *
     * @return the storageConnectionString value.
     */
    public String getStorageConnectionString() {
        return this.storageConnectionString;
    }

    /**
     * Set the storageConnectionString property: The connection string to the storage account where the cache data will
     * be persisted.
     *
     * @param storageConnectionString the storageConnectionString value to set.
     * @return the SearchIndexerCache object itself.
     */
    public SearchIndexerCache setStorageConnectionString(String storageConnectionString) {
        this.storageConnectionString = storageConnectionString;
        return this;
    }

    /**
     * Get the enableReprocessing property: Specifies whether incremental reprocessing is enabled.
     *
     * @return the enableReprocessing value.
     */
    public Boolean isEnableReprocessing() {
        return this.enableReprocessing;
    }

    /**
     * Set the enableReprocessing property: Specifies whether incremental reprocessing is enabled.
     *
     * @param enableReprocessing the enableReprocessing value to set.
     * @return the SearchIndexerCache object itself.
     */
    public SearchIndexerCache setEnableReprocessing(Boolean enableReprocessing) {
        this.enableReprocessing = enableReprocessing;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageConnectionString", this.storageConnectionString, false);
        jsonWriter.writeBooleanField("enableReprocessing", this.enableReprocessing, false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of SearchIndexerCache from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchIndexerCache if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     */
    public static SearchIndexerCache fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    String storageConnectionString = null;
                    Boolean enableReprocessing = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("storageConnectionString".equals(fieldName)) {
                            storageConnectionString = reader.getStringValue();
                        } else if ("enableReprocessing".equals(fieldName)) {
                            enableReprocessing = reader.getBooleanNullableValue();
                        } else {
                            reader.skipChildren();
                        }
                    }
                    SearchIndexerCache deserializedValue = new SearchIndexerCache();
                    deserializedValue.storageConnectionString = storageConnectionString;
                    deserializedValue.enableReprocessing = enableReprocessing;

                    return deserializedValue;
                });
    }
}
