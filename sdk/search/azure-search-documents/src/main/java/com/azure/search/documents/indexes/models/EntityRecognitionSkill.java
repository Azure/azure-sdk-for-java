// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Text analytics entity recognition. */
@Fluent
public final class EntityRecognitionSkill extends SearchIndexerSkill {
    private String odataType = "#Microsoft.Skills.Text.EntityRecognitionSkill";

    private List<EntityCategory> categories;

    private EntityRecognitionSkillLanguage defaultLanguageCode;

    private Boolean includeTypelessEntities;

    private Double minimumPrecision;

    /**
     * Creates an instance of EntityRecognitionSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public EntityRecognitionSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the categories property: A list of entity categories that should be extracted.
     *
     * @return the categories value.
     */
    public List<EntityCategory> getCategories() {
        return this.categories;
    }

    /**
     * Set the categories property: A list of entity categories that should be extracted.
     *
     * @param categories the categories value to set.
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill setCategories(List<EntityCategory> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @return the defaultLanguageCode value.
     */
    public EntityRecognitionSkillLanguage getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill setDefaultLanguageCode(EntityRecognitionSkillLanguage defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the includeTypelessEntities property: Determines whether or not to include entities which are well known but
     * don't conform to a pre-defined type. If this configuration is not set (default), set to null or set to false,
     * entities which don't conform to one of the pre-defined types will not be surfaced.
     *
     * @return the includeTypelessEntities value.
     */
    public Boolean isIncludeTypelessEntities() {
        return this.includeTypelessEntities;
    }

    /**
     * Set the includeTypelessEntities property: Determines whether or not to include entities which are well known but
     * don't conform to a pre-defined type. If this configuration is not set (default), set to null or set to false,
     * entities which don't conform to one of the pre-defined types will not be surfaced.
     *
     * @param includeTypelessEntities the includeTypelessEntities value to set.
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill setIncludeTypelessEntities(Boolean includeTypelessEntities) {
        this.includeTypelessEntities = includeTypelessEntities;
        return this;
    }

    /**
     * Get the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     *
     * @return the minimumPrecision value.
     */
    public Double getMinimumPrecision() {
        return this.minimumPrecision;
    }

    /**
     * Set the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     *
     * @param minimumPrecision the minimumPrecision value to set.
     * @return the EntityRecognitionSkill object itself.
     */
    public EntityRecognitionSkill setMinimumPrecision(Double minimumPrecision) {
        this.minimumPrecision = minimumPrecision;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        JsonUtils.writeArray(jsonWriter, "inputs", getInputs(), (writer, element) -> writer.writeJson(element, false));
        JsonUtils.writeArray(
                jsonWriter, "outputs", getOutputs(), (writer, element) -> writer.writeJson(element, false));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        JsonUtils.writeArray(
                jsonWriter,
                "categories",
                this.categories,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField(
                "defaultLanguageCode",
                this.defaultLanguageCode == null ? null : this.defaultLanguageCode.toString(),
                false);
        jsonWriter.writeBooleanField("includeTypelessEntities", this.includeTypelessEntities, false);
        jsonWriter.writeDoubleField("minimumPrecision", this.minimumPrecision, false);
        return jsonWriter.writeEndObject().flush();
    }

    public static EntityRecognitionSkill fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean odataTypeFound = false;
                    String odataType = null;
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    List<EntityCategory> categories = null;
                    EntityRecognitionSkillLanguage defaultLanguageCode = null;
                    Boolean includeTypelessEntities = null;
                    Double minimumPrecision = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataTypeFound = true;
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> InputFieldMappingEntry.fromJson(reader)));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> OutputFieldMappingEntry.fromJson(reader)));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("categories".equals(fieldName)) {
                            categories =
                                    JsonUtils.readArray(
                                            reader, r -> EntityCategory.fromString(reader.getStringValue()));
                        } else if ("defaultLanguageCode".equals(fieldName)) {
                            defaultLanguageCode = EntityRecognitionSkillLanguage.fromString(reader.getStringValue());
                        } else if ("includeTypelessEntities".equals(fieldName)) {
                            includeTypelessEntities =
                                    JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else if ("minimumPrecision".equals(fieldName)) {
                            minimumPrecision = JsonUtils.getNullableProperty(reader, r -> reader.getDoubleValue());
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!odataTypeFound
                            || !Objects.equals(odataType, "#Microsoft.Skills.Text.EntityRecognitionSkill")) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Text.EntityRecognitionSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    EntityRecognitionSkill deserializedValue = new EntityRecognitionSkill(inputs, outputs);
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.setCategories(categories);
                    deserializedValue.setDefaultLanguageCode(defaultLanguageCode);
                    deserializedValue.setIncludeTypelessEntities(includeTypelessEntities);
                    deserializedValue.setMinimumPrecision(minimumPrecision);

                    return deserializedValue;
                });
    }
}
