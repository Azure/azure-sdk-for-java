// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;

/** Filters out tokens with same text as the previous token. This token filter is implemented using Apache Lucene. */
@Fluent
public final class UniqueTokenFilter extends TokenFilter {
    /*
     * Identifies the concrete type of the token filter.
     */
    private String odataType = "#Microsoft.Azure.Search.UniqueTokenFilter";

    /*
     * A value indicating whether to remove duplicates only at the same position. Default is false.
     */
    private Boolean onlyOnSamePosition;

    /**
     * Creates an instance of UniqueTokenFilter class.
     *
     * @param name the name value to set.
     */
    public UniqueTokenFilter(String name) {
        super(name);
    }

    /**
     * Get the onlyOnSamePosition property: A value indicating whether to remove duplicates only at the same position.
     * Default is false.
     *
     * @return the onlyOnSamePosition value.
     */
    public Boolean isOnlyOnSamePosition() {
        return this.onlyOnSamePosition;
    }

    /**
     * Set the onlyOnSamePosition property: A value indicating whether to remove duplicates only at the same position.
     * Default is false.
     *
     * @param onlyOnSamePosition the onlyOnSamePosition value to set.
     * @return the UniqueTokenFilter object itself.
     */
    public UniqueTokenFilter setOnlyOnSamePosition(Boolean onlyOnSamePosition) {
        this.onlyOnSamePosition = onlyOnSamePosition;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeBooleanField("onlyOnSamePosition", this.onlyOnSamePosition, false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of UniqueTokenFilter from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UniqueTokenFilter if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     */
    public static UniqueTokenFilter fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    String odataType = "#Microsoft.Azure.Search.UniqueTokenFilter";
                    boolean nameFound = false;
                    String name = null;
                    Boolean onlyOnSamePosition = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataType = reader.getStringValue();
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                            nameFound = true;
                        } else if ("onlyOnSamePosition".equals(fieldName)) {
                            onlyOnSamePosition = reader.getBooleanNullableValue();
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!"#Microsoft.Azure.Search.UniqueTokenFilter".equals(odataType)) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Azure.Search.UniqueTokenFilter'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!nameFound) {
                        missingProperties.add("name");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    UniqueTokenFilter deserializedValue = new UniqueTokenFilter(name);
                    deserializedValue.odataType = odataType;
                    deserializedValue.onlyOnSamePosition = onlyOnSamePosition;

                    return deserializedValue;
                });
    }
}
