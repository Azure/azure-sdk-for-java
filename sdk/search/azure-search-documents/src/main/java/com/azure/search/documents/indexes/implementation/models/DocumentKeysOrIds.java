// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.List;

/** The DocumentKeysOrIds model. */
@Fluent
public final class DocumentKeysOrIds implements JsonSerializable<DocumentKeysOrIds> {
    /*
     * document keys to be reset
     */
    private List<String> documentKeys;

    /*
     * datasource document identifiers to be reset
     */
    private List<String> datasourceDocumentIds;

    /**
     * Get the documentKeys property: document keys to be reset.
     *
     * @return the documentKeys value.
     */
    public List<String> getDocumentKeys() {
        return this.documentKeys;
    }

    /**
     * Set the documentKeys property: document keys to be reset.
     *
     * @param documentKeys the documentKeys value to set.
     * @return the DocumentKeysOrIds object itself.
     */
    public DocumentKeysOrIds setDocumentKeys(List<String> documentKeys) {
        this.documentKeys = documentKeys;
        return this;
    }

    /**
     * Get the datasourceDocumentIds property: datasource document identifiers to be reset.
     *
     * @return the datasourceDocumentIds value.
     */
    public List<String> getDatasourceDocumentIds() {
        return this.datasourceDocumentIds;
    }

    /**
     * Set the datasourceDocumentIds property: datasource document identifiers to be reset.
     *
     * @param datasourceDocumentIds the datasourceDocumentIds value to set.
     * @return the DocumentKeysOrIds object itself.
     */
    public DocumentKeysOrIds setDatasourceDocumentIds(List<String> datasourceDocumentIds) {
        this.datasourceDocumentIds = datasourceDocumentIds;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField(
                "documentKeys", this.documentKeys, false, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField(
                "datasourceDocumentIds",
                this.datasourceDocumentIds,
                false,
                (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of DocumentKeysOrIds from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentKeysOrIds if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     */
    public static DocumentKeysOrIds fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    List<String> documentKeys = null;
                    List<String> datasourceDocumentIds = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("documentKeys".equals(fieldName)) {
                            documentKeys = reader.readArray(reader1 -> reader1.getStringValue());
                        } else if ("datasourceDocumentIds".equals(fieldName)) {
                            datasourceDocumentIds = reader.readArray(reader1 -> reader1.getStringValue());
                        } else {
                            reader.skipChildren();
                        }
                    }
                    DocumentKeysOrIds deserializedValue = new DocumentKeysOrIds();
                    deserializedValue.documentKeys = documentKeys;
                    deserializedValue.datasourceDocumentIds = datasourceDocumentIds;

                    return deserializedValue;
                });
    }
}
