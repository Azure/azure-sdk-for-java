// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** A skill that analyzes image files. It extracts a rich set of visual features based on the image content. */
@Fluent
public final class ImageAnalysisSkill extends SearchIndexerSkill {
    private String odataType = "#Microsoft.Skills.Vision.ImageAnalysisSkill";

    private ImageAnalysisSkillLanguage defaultLanguageCode;

    private List<VisualFeature> visualFeatures;

    private List<ImageDetail> details;

    /**
     * Creates an instance of ImageAnalysisSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public ImageAnalysisSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @return the defaultLanguageCode value.
     */
    public ImageAnalysisSkillLanguage getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the ImageAnalysisSkill object itself.
     */
    public ImageAnalysisSkill setDefaultLanguageCode(ImageAnalysisSkillLanguage defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the visualFeatures property: A list of visual features.
     *
     * @return the visualFeatures value.
     */
    public List<VisualFeature> getVisualFeatures() {
        return this.visualFeatures;
    }

    /**
     * Set the visualFeatures property: A list of visual features.
     *
     * @param visualFeatures the visualFeatures value to set.
     * @return the ImageAnalysisSkill object itself.
     */
    public ImageAnalysisSkill setVisualFeatures(List<VisualFeature> visualFeatures) {
        this.visualFeatures = visualFeatures;
        return this;
    }

    /**
     * Get the details property: A string indicating which domain-specific details to return.
     *
     * @return the details value.
     */
    public List<ImageDetail> getDetails() {
        return this.details;
    }

    /**
     * Set the details property: A string indicating which domain-specific details to return.
     *
     * @param details the details value to set.
     * @return the ImageAnalysisSkill object itself.
     */
    public ImageAnalysisSkill setDetails(List<ImageDetail> details) {
        this.details = details;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        JsonUtils.writeArray(jsonWriter, "inputs", getInputs(), (writer, element) -> writer.writeJson(element, false));
        JsonUtils.writeArray(
                jsonWriter, "outputs", getOutputs(), (writer, element) -> writer.writeJson(element, false));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        jsonWriter.writeStringField(
                "defaultLanguageCode",
                this.defaultLanguageCode == null ? null : this.defaultLanguageCode.toString(),
                false);
        JsonUtils.writeArray(
                jsonWriter,
                "visualFeatures",
                this.visualFeatures,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        JsonUtils.writeArray(
                jsonWriter,
                "details",
                this.details,
                (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject().flush();
    }

    public static ImageAnalysisSkill fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean odataTypeFound = false;
                    String odataType = null;
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    ImageAnalysisSkillLanguage defaultLanguageCode = null;
                    List<VisualFeature> visualFeatures = null;
                    List<ImageDetail> details = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataTypeFound = true;
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> InputFieldMappingEntry.fromJson(reader)));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs =
                                    JsonUtils.readArray(
                                            reader,
                                            r ->
                                                    JsonUtils.getNullableProperty(
                                                            r, r1 -> OutputFieldMappingEntry.fromJson(reader)));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("defaultLanguageCode".equals(fieldName)) {
                            defaultLanguageCode = ImageAnalysisSkillLanguage.fromString(reader.getStringValue());
                        } else if ("visualFeatures".equals(fieldName)) {
                            visualFeatures =
                                    JsonUtils.readArray(reader, r -> VisualFeature.fromString(reader.getStringValue()));
                        } else if ("details".equals(fieldName)) {
                            details = JsonUtils.readArray(reader, r -> ImageDetail.fromString(reader.getStringValue()));
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!odataTypeFound || !Objects.equals(odataType, "#Microsoft.Skills.Vision.ImageAnalysisSkill")) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Vision.ImageAnalysisSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    ImageAnalysisSkill deserializedValue = new ImageAnalysisSkill(inputs, outputs);
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.setDefaultLanguageCode(defaultLanguageCode);
                    deserializedValue.setVisualFeatures(visualFeatures);
                    deserializedValue.setDetails(details);

                    return deserializedValue;
                });
    }

    /**
     * Set the visualFeatures property: A list of visual features.
     *
     * @param visualFeatures the visualFeatures value to set.
     * @return the ImageAnalysisSkill object itself.
     */
    public ImageAnalysisSkill setVisualFeatures(VisualFeature... visualFeatures) {
        this.visualFeatures = (visualFeatures == null) ? null : java.util.Arrays.asList(visualFeatures);
        return this;
    }

    /**
     * Set the details property: A string indicating which domain-specific details to return.
     *
     * @param details the details value to set.
     * @return the ImageAnalysisSkill object itself.
     */
    public ImageAnalysisSkill setDetails(ImageDetail... details) {
        this.details = (details == null) ? null : java.util.Arrays.asList(details);
        return this;
    }
}
