// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.documents.indexes.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Removes words that are too long or too short. This token filter is implemented using Apache Lucene. */
@Fluent
public final class LengthTokenFilter extends TokenFilter {
    private String odataType = "#Microsoft.Azure.Search.LengthTokenFilter";

    private Integer minLength;

    private Integer maxLength;

    /**
     * Creates an instance of LengthTokenFilter class.
     *
     * @param name the name value to set.
     */
    public LengthTokenFilter(String name) {
        super(name);
    }

    /**
     * Get the minLength property: The minimum length in characters. Default is 0. Maximum is 300. Must be less than the
     * value of max.
     *
     * @return the minLength value.
     */
    public Integer getMinLength() {
        return this.minLength;
    }

    /**
     * Set the minLength property: The minimum length in characters. Default is 0. Maximum is 300. Must be less than the
     * value of max.
     *
     * @param minLength the minLength value to set.
     * @return the LengthTokenFilter object itself.
     */
    public LengthTokenFilter setMinLength(Integer minLength) {
        this.minLength = minLength;
        return this;
    }

    /**
     * Get the maxLength property: The maximum length in characters. Default and maximum is 300.
     *
     * @return the maxLength value.
     */
    public Integer getMaxLength() {
        return this.maxLength;
    }

    /**
     * Set the maxLength property: The maximum length in characters. Default and maximum is 300.
     *
     * @param maxLength the maxLength value to set.
     * @return the LengthTokenFilter object itself.
     */
    public LengthTokenFilter setMaxLength(Integer maxLength) {
        this.maxLength = maxLength;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeIntegerField("min", this.minLength, false);
        jsonWriter.writeIntegerField("max", this.maxLength, false);
        return jsonWriter.writeEndObject().flush();
    }

    public static LengthTokenFilter fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean odataTypeFound = false;
                    String odataType = null;
                    boolean nameFound = false;
                    String name = null;
                    Integer minLength = null;
                    Integer maxLength = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataTypeFound = true;
                            odataType = reader.getStringValue();
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                            nameFound = true;
                        } else if ("min".equals(fieldName)) {
                            minLength = JsonUtils.getNullableProperty(reader, r -> reader.getIntValue());
                        } else if ("max".equals(fieldName)) {
                            maxLength = JsonUtils.getNullableProperty(reader, r -> reader.getIntValue());
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!odataTypeFound || !Objects.equals(odataType, "#Microsoft.Azure.Search.LengthTokenFilter")) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Azure.Search.LengthTokenFilter'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!nameFound) {
                        missingProperties.add("name");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    LengthTokenFilter deserializedValue = new LengthTokenFilter(name);
                    deserializedValue.setMinLength(minLength);
                    deserializedValue.setMaxLength(maxLength);

                    return deserializedValue;
                });
    }
}
