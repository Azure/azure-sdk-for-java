// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Allows you to generate a vector embedding for a given text input using the Azure OpenAI resource.
 */
@Fluent
public final class AzureOpenAIEmbeddingSkill extends SearchIndexerSkill {
    /*
     * The resource URI for your Azure OpenAI resource.
     */
    private String resourceUri;

    /*
     * ID of your Azure OpenAI model deployment on the designated resource.
     */
    private String deploymentId;

    /*
     * API key for the designated Azure OpenAI resource.
     */
    private String apiKey;

    /*
     * The user-assigned managed identity used for outbound connections.
     */
    private SearchIndexerDataIdentity authIdentity;

    /**
     * Creates an instance of AzureOpenAIEmbeddingSkill class.
     * 
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public AzureOpenAIEmbeddingSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the resourceUri property: The resource URI for your Azure OpenAI resource.
     * 
     * @return the resourceUri value.
     */
    public String getResourceUri() {
        return this.resourceUri;
    }

    /**
     * Set the resourceUri property: The resource URI for your Azure OpenAI resource.
     * 
     * @param resourceUri the resourceUri value to set.
     * @return the AzureOpenAIEmbeddingSkill object itself.
     */
    public AzureOpenAIEmbeddingSkill setResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    /**
     * Get the deploymentId property: ID of your Azure OpenAI model deployment on the designated resource.
     * 
     * @return the deploymentId value.
     */
    public String getDeploymentId() {
        return this.deploymentId;
    }

    /**
     * Set the deploymentId property: ID of your Azure OpenAI model deployment on the designated resource.
     * 
     * @param deploymentId the deploymentId value to set.
     * @return the AzureOpenAIEmbeddingSkill object itself.
     */
    public AzureOpenAIEmbeddingSkill setDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }

    /**
     * Get the apiKey property: API key for the designated Azure OpenAI resource.
     * 
     * @return the apiKey value.
     */
    public String getApiKey() {
        return this.apiKey;
    }

    /**
     * Set the apiKey property: API key for the designated Azure OpenAI resource.
     * 
     * @param apiKey the apiKey value to set.
     * @return the AzureOpenAIEmbeddingSkill object itself.
     */
    public AzureOpenAIEmbeddingSkill setApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get the authIdentity property: The user-assigned managed identity used for outbound connections.
     * 
     * @return the authIdentity value.
     */
    public SearchIndexerDataIdentity getAuthIdentity() {
        return this.authIdentity;
    }

    /**
     * Set the authIdentity property: The user-assigned managed identity used for outbound connections.
     * 
     * @param authIdentity the authIdentity value to set.
     * @return the AzureOpenAIEmbeddingSkill object itself.
     */
    public AzureOpenAIEmbeddingSkill setAuthIdentity(SearchIndexerDataIdentity authIdentity) {
        this.authIdentity = authIdentity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAIEmbeddingSkill setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAIEmbeddingSkill setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureOpenAIEmbeddingSkill setContext(String context) {
        super.setContext(context);
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", "#Microsoft.Skills.Text.AzureOpenAIEmbeddingSkill");
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeStringField("context", getContext());
        jsonWriter.writeStringField("resourceUri", this.resourceUri);
        jsonWriter.writeStringField("deploymentId", this.deploymentId);
        jsonWriter.writeStringField("apiKey", this.apiKey);
        jsonWriter.writeJsonField("authIdentity", this.authIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureOpenAIEmbeddingSkill from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureOpenAIEmbeddingSkill if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the AzureOpenAIEmbeddingSkill.
     */
    public static AzureOpenAIEmbeddingSkill fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean inputsFound = false;
            List<InputFieldMappingEntry> inputs = null;
            boolean outputsFound = false;
            List<OutputFieldMappingEntry> outputs = null;
            String name = null;
            String description = null;
            String context = null;
            String resourceUri = null;
            String deploymentId = null;
            String apiKey = null;
            SearchIndexerDataIdentity authIdentity = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@odata.type".equals(fieldName)) {
                    String odataType = reader.getString();
                    if (!"#Microsoft.Skills.Text.AzureOpenAIEmbeddingSkill".equals(odataType)) {
                        throw new IllegalStateException(
                            "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Text.AzureOpenAIEmbeddingSkill'. The found '@odata.type' was '"
                                + odataType + "'.");
                    }
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                    inputsFound = true;
                } else if ("outputs".equals(fieldName)) {
                    outputs = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                    outputsFound = true;
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("context".equals(fieldName)) {
                    context = reader.getString();
                } else if ("resourceUri".equals(fieldName)) {
                    resourceUri = reader.getString();
                } else if ("deploymentId".equals(fieldName)) {
                    deploymentId = reader.getString();
                } else if ("apiKey".equals(fieldName)) {
                    apiKey = reader.getString();
                } else if ("authIdentity".equals(fieldName)) {
                    authIdentity = SearchIndexerDataIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (inputsFound && outputsFound) {
                AzureOpenAIEmbeddingSkill deserializedAzureOpenAIEmbeddingSkill
                    = new AzureOpenAIEmbeddingSkill(inputs, outputs);
                deserializedAzureOpenAIEmbeddingSkill.setName(name);
                deserializedAzureOpenAIEmbeddingSkill.setDescription(description);
                deserializedAzureOpenAIEmbeddingSkill.setContext(context);
                deserializedAzureOpenAIEmbeddingSkill.resourceUri = resourceUri;
                deserializedAzureOpenAIEmbeddingSkill.deploymentId = deploymentId;
                deserializedAzureOpenAIEmbeddingSkill.apiKey = apiKey;
                deserializedAzureOpenAIEmbeddingSkill.authIdentity = authIdentity;

                return deserializedAzureOpenAIEmbeddingSkill;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!outputsFound) {
                missingProperties.add("outputs");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
