// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** A skill that can call a Web API endpoint, allowing you to extend a skillset by having it call your custom code. */
@Fluent
public final class WebApiSkill extends SearchIndexerSkill {
    /*
     * Identifies the concrete type of the skill.
     */
    private String odataType = "#Microsoft.Skills.Custom.WebApiSkill";

    /*
     * The url for the Web API.
     */
    private final String uri;

    /*
     * The headers required to make the http request.
     */
    private Map<String, String> httpHeaders;

    /*
     * The method for the http request.
     */
    private String httpMethod;

    /*
     * The desired timeout for the request. Default is 30 seconds.
     */
    private Duration timeout;

    /*
     * The desired batch size which indicates number of documents.
     */
    private Integer batchSize;

    /*
     * If set, the number of parallel calls that can be made to the Web API.
     */
    private Integer degreeOfParallelism;

    /**
     * Creates an instance of WebApiSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     * @param uri the uri value to set.
     */
    public WebApiSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs, String uri) {
        super(inputs, outputs);
        this.uri = uri;
    }

    /**
     * Get the uri property: The url for the Web API.
     *
     * @return the uri value.
     */
    public String getUri() {
        return this.uri;
    }

    /**
     * Get the httpHeaders property: The headers required to make the http request.
     *
     * @return the httpHeaders value.
     */
    public Map<String, String> getHttpHeaders() {
        return this.httpHeaders;
    }

    /**
     * Set the httpHeaders property: The headers required to make the http request.
     *
     * @param httpHeaders the httpHeaders value to set.
     * @return the WebApiSkill object itself.
     */
    public WebApiSkill setHttpHeaders(Map<String, String> httpHeaders) {
        this.httpHeaders = httpHeaders;
        return this;
    }

    /**
     * Get the httpMethod property: The method for the http request.
     *
     * @return the httpMethod value.
     */
    public String getHttpMethod() {
        return this.httpMethod;
    }

    /**
     * Set the httpMethod property: The method for the http request.
     *
     * @param httpMethod the httpMethod value to set.
     * @return the WebApiSkill object itself.
     */
    public WebApiSkill setHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get the timeout property: The desired timeout for the request. Default is 30 seconds.
     *
     * @return the timeout value.
     */
    public Duration getTimeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The desired timeout for the request. Default is 30 seconds.
     *
     * @param timeout the timeout value to set.
     * @return the WebApiSkill object itself.
     */
    public WebApiSkill setTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the batchSize property: The desired batch size which indicates number of documents.
     *
     * @return the batchSize value.
     */
    public Integer getBatchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: The desired batch size which indicates number of documents.
     *
     * @param batchSize the batchSize value to set.
     * @return the WebApiSkill object itself.
     */
    public WebApiSkill setBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * Get the degreeOfParallelism property: If set, the number of parallel calls that can be made to the Web API.
     *
     * @return the degreeOfParallelism value.
     */
    public Integer getDegreeOfParallelism() {
        return this.degreeOfParallelism;
    }

    /**
     * Set the degreeOfParallelism property: If set, the number of parallel calls that can be made to the Web API.
     *
     * @param degreeOfParallelism the degreeOfParallelism value to set.
     * @return the WebApiSkill object itself.
     */
    public WebApiSkill setDegreeOfParallelism(Integer degreeOfParallelism) {
        this.degreeOfParallelism = degreeOfParallelism;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeArrayField("inputs", getInputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        jsonWriter.writeStringField("uri", this.uri, false);
        jsonWriter.writeMapField(
                "httpHeaders", this.httpHeaders, false, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("httpMethod", this.httpMethod, false);
        jsonWriter.writeStringField("timeout", this.timeout == null ? null : this.timeout.toString(), false);
        jsonWriter.writeIntegerField("batchSize", this.batchSize, false);
        jsonWriter.writeIntegerField("degreeOfParallelism", this.degreeOfParallelism, false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of WebApiSkill from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebApiSkill if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     */
    public static WebApiSkill fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    String odataType = "#Microsoft.Skills.Custom.WebApiSkill";
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    boolean uriFound = false;
                    String uri = null;
                    Map<String, String> httpHeaders = null;
                    String httpMethod = null;
                    Duration timeout = null;
                    Integer batchSize = null;
                    Integer degreeOfParallelism = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("uri".equals(fieldName)) {
                            uri = reader.getStringValue();
                            uriFound = true;
                        } else if ("httpHeaders".equals(fieldName)) {
                            httpHeaders = reader.readMap(reader1 -> reader1.getStringValue());
                        } else if ("httpMethod".equals(fieldName)) {
                            httpMethod = reader.getStringValue();
                        } else if ("timeout".equals(fieldName)) {
                            timeout = reader.getNullableValue(r -> Duration.parse(reader.getStringValue()));
                        } else if ("batchSize".equals(fieldName)) {
                            batchSize = reader.getIntegerNullableValue();
                        } else if ("degreeOfParallelism".equals(fieldName)) {
                            degreeOfParallelism = reader.getIntegerNullableValue();
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!"#Microsoft.Skills.Custom.WebApiSkill".equals(odataType)) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Custom.WebApiSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }
                    if (!uriFound) {
                        missingProperties.add("uri");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    WebApiSkill deserializedValue = new WebApiSkill(inputs, outputs, uri);
                    deserializedValue.odataType = odataType;
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.httpHeaders = httpHeaders;
                    deserializedValue.httpMethod = httpMethod;
                    deserializedValue.timeout = timeout;
                    deserializedValue.batchSize = batchSize;
                    deserializedValue.degreeOfParallelism = degreeOfParallelism;

                    return deserializedValue;
                });
    }
}
