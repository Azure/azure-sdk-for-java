// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
package com.azure.search.documents.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The query parameters to use for vector search when a base 64 encoded binary of an image that needs to be vectorized
 * is provided.
 */
@Fluent
public final class VectorizableImageBinaryQuery extends VectorQuery {

    /*
     * The base 64 encoded binary of an image to be vectorized to perform a vector search query.
     */
    private String base64Image;

    /**
     * Creates an instance of VectorizableImageBinaryQuery class.
     */
    public VectorizableImageBinaryQuery() {
        this.kind = VectorQueryKind.IMAGE_BINARY;
    }

    /**
     * Get the base64Image property: The base 64 encoded binary of an image to be vectorized to perform a vector search
     * query.
     *
     * @return the base64Image value.
     */
    public String getBase64Image() {
        return this.base64Image;
    }

    /**
     * Set the base64Image property: The base 64 encoded binary of an image to be vectorized to perform a vector search
     * query.
     *
     * @param base64Image the base64Image value to set.
     * @return the VectorizableImageBinaryQuery object itself.
     */
    public VectorizableImageBinaryQuery setBase64Image(String base64Image) {
        this.base64Image = base64Image;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setKNearestNeighborsCount(Integer kNearestNeighborsCount) {
        super.setKNearestNeighborsCount(kNearestNeighborsCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setFields(String... fields) {
        super.setFields(fields);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setExhaustive(Boolean exhaustive) {
        super.setExhaustive(exhaustive);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setOversampling(Double oversampling) {
        super.setOversampling(oversampling);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setWeight(Float weight) {
        super.setWeight(weight);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setThreshold(VectorThreshold threshold) {
        super.setThreshold(threshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VectorizableImageBinaryQuery setFilterOverride(String filterOverride) {
        super.setFilterOverride(filterOverride);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        jsonWriter.writeStringField("base64Image", this.base64Image);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VectorizableImageBinaryQuery from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of VectorizableImageBinaryQuery if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VectorizableImageBinaryQuery.
     */
    public static VectorizableImageBinaryQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VectorizableImageBinaryQuery deserializedVectorizableImageBinaryQuery = new VectorizableImageBinaryQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if (VectorQuery.fromJsonShared(reader, fieldName, deserializedVectorizableImageBinaryQuery)) {
                    continue;
                } else if ("base64Image".equals(fieldName)) {
                    deserializedVectorizableImageBinaryQuery.base64Image = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedVectorizableImageBinaryQuery;
        });
    }
}
