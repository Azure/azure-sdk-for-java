// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * Using the Text Analytics API, extracts personal information from an input text and gives you the option of masking
 * it.
 */
@Fluent
public final class PiiDetectionSkill extends SearchIndexerSkill {
    /*
     * Identifies the concrete type of the skill.
     */
    private String odataType = "#Microsoft.Skills.Text.PIIDetectionSkill";

    /*
     * A value indicating which language code to use. Default is en.
     */
    private String defaultLanguageCode;

    /*
     * A value between 0 and 1 that be used to only include entities whose confidence score is greater than the value
     * specified. If not set (default), or if explicitly set to null, all entities will be included.
     */
    private Double minimumPrecision;

    /*
     * A parameter that provides various ways to mask the personal information detected in the input text. Default is
     * 'none'.
     */
    private PiiDetectionSkillMaskingMode maskingMode;

    /*
     * The character used to mask the text if the maskingMode parameter is set to replace. Default is '*'.
     */
    private String maskingCharacter;

    /*
     * The version of the model to use when calling the Text Analytics service. It will default to the latest available
     * when not specified. We recommend you do not specify this value unless absolutely necessary.
     */
    private String modelVersion;

    /*
     * A list of PII entity categories that should be extracted and masked.
     */
    private List<String> piiCategories;

    /*
     * If specified, will set the PII domain to include only a subset of the entity categories. Possible values
     * include: 'phi', 'none'. Default is 'none'.
     */
    private String domain;

    /**
     * Creates an instance of PiiDetectionSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public PiiDetectionSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @return the defaultLanguageCode value.
     */
    public String getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setDefaultLanguageCode(String defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     *
     * @return the minimumPrecision value.
     */
    public Double getMinimumPrecision() {
        return this.minimumPrecision;
    }

    /**
     * Set the minimumPrecision property: A value between 0 and 1 that be used to only include entities whose confidence
     * score is greater than the value specified. If not set (default), or if explicitly set to null, all entities will
     * be included.
     *
     * @param minimumPrecision the minimumPrecision value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setMinimumPrecision(Double minimumPrecision) {
        this.minimumPrecision = minimumPrecision;
        return this;
    }

    /**
     * Get the maskingMode property: A parameter that provides various ways to mask the personal information detected in
     * the input text. Default is 'none'.
     *
     * @return the maskingMode value.
     */
    public PiiDetectionSkillMaskingMode getMaskingMode() {
        return this.maskingMode;
    }

    /**
     * Set the maskingMode property: A parameter that provides various ways to mask the personal information detected in
     * the input text. Default is 'none'.
     *
     * @param maskingMode the maskingMode value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setMaskingMode(PiiDetectionSkillMaskingMode maskingMode) {
        this.maskingMode = maskingMode;
        return this;
    }

    /**
     * Get the maskingCharacter property: The character used to mask the text if the maskingMode parameter is set to
     * replace. Default is '*'.
     *
     * @return the maskingCharacter value.
     */
    public String getMaskingCharacter() {
        return this.maskingCharacter;
    }

    /**
     * Set the maskingCharacter property: The character used to mask the text if the maskingMode parameter is set to
     * replace. Default is '*'.
     *
     * @param maskingCharacter the maskingCharacter value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setMaskingCharacter(String maskingCharacter) {
        this.maskingCharacter = maskingCharacter;
        return this;
    }

    /**
     * Get the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     *
     * @return the modelVersion value.
     */
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Set the modelVersion property: The version of the model to use when calling the Text Analytics service. It will
     * default to the latest available when not specified. We recommend you do not specify this value unless absolutely
     * necessary.
     *
     * @param modelVersion the modelVersion value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setModelVersion(String modelVersion) {
        this.modelVersion = modelVersion;
        return this;
    }

    /**
     * Get the piiCategories property: A list of PII entity categories that should be extracted and masked.
     *
     * @return the piiCategories value.
     */
    public List<String> getPiiCategories() {
        return this.piiCategories;
    }

    /**
     * Set the piiCategories property: A list of PII entity categories that should be extracted and masked.
     *
     * @param piiCategories the piiCategories value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setPiiCategories(List<String> piiCategories) {
        this.piiCategories = piiCategories;
        return this;
    }

    /**
     * Get the domain property: If specified, will set the PII domain to include only a subset of the entity categories.
     * Possible values include: 'phi', 'none'. Default is 'none'.
     *
     * @return the domain value.
     */
    public String getDomain() {
        return this.domain;
    }

    /**
     * Set the domain property: If specified, will set the PII domain to include only a subset of the entity categories.
     * Possible values include: 'phi', 'none'. Default is 'none'.
     *
     * @param domain the domain value to set.
     * @return the PiiDetectionSkill object itself.
     */
    public PiiDetectionSkill setDomain(String domain) {
        this.domain = domain;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeArrayField("inputs", getInputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        jsonWriter.writeStringField("defaultLanguageCode", this.defaultLanguageCode, false);
        jsonWriter.writeDoubleField("minimumPrecision", this.minimumPrecision, false);
        jsonWriter.writeStringField(
                "maskingMode", this.maskingMode == null ? null : this.maskingMode.toString(), false);
        jsonWriter.writeStringField("maskingCharacter", this.maskingCharacter, false);
        jsonWriter.writeStringField("modelVersion", this.modelVersion, false);
        jsonWriter.writeArrayField(
                "piiCategories", this.piiCategories, false, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("domain", this.domain, false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of PiiDetectionSkill from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PiiDetectionSkill if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     */
    public static PiiDetectionSkill fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    String odataType = "#Microsoft.Skills.Text.PIIDetectionSkill";
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    String defaultLanguageCode = null;
                    Double minimumPrecision = null;
                    PiiDetectionSkillMaskingMode maskingMode = null;
                    String maskingCharacter = null;
                    String modelVersion = null;
                    List<String> piiCategories = null;
                    String domain = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("defaultLanguageCode".equals(fieldName)) {
                            defaultLanguageCode = reader.getStringValue();
                        } else if ("minimumPrecision".equals(fieldName)) {
                            minimumPrecision = reader.getDoubleNullableValue();
                        } else if ("maskingMode".equals(fieldName)) {
                            maskingMode = PiiDetectionSkillMaskingMode.fromString(reader.getStringValue());
                        } else if ("maskingCharacter".equals(fieldName)) {
                            maskingCharacter = reader.getStringValue();
                        } else if ("modelVersion".equals(fieldName)) {
                            modelVersion = reader.getStringValue();
                        } else if ("piiCategories".equals(fieldName)) {
                            piiCategories = reader.readArray(reader1 -> reader1.getStringValue());
                        } else if ("domain".equals(fieldName)) {
                            domain = reader.getStringValue();
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!"#Microsoft.Skills.Text.PIIDetectionSkill".equals(odataType)) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Text.PIIDetectionSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    PiiDetectionSkill deserializedValue = new PiiDetectionSkill(inputs, outputs);
                    deserializedValue.odataType = odataType;
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.defaultLanguageCode = defaultLanguageCode;
                    deserializedValue.minimumPrecision = minimumPrecision;
                    deserializedValue.maskingMode = maskingMode;
                    deserializedValue.maskingCharacter = maskingCharacter;
                    deserializedValue.modelVersion = modelVersion;
                    deserializedValue.piiCategories = piiCategories;
                    deserializedValue.domain = domain;

                    return deserializedValue;
                });
    }
}
