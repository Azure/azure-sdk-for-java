// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The KnowledgeAgentTargetIndex model.
 */
@Fluent
public final class KnowledgeAgentTargetIndex implements JsonSerializable<KnowledgeAgentTargetIndex> {
    /*
     * The name of the target index.
     */
    @Generated
    private final String indexName;

    /*
     * A threshold for reranking results (range: 0-4).
     */
    @Generated
    private Float defaultRerankerThreshold;

    /*
     * Indicates whether reference source data should be included.
     */
    @Generated
    private Boolean defaultIncludeReferenceSourceData;

    /*
     * Limits the number of documents considered for ranking.
     */
    @Generated
    private Integer defaultMaxDocsForReranker;

    /**
     * Creates an instance of KnowledgeAgentTargetIndex class.
     * 
     * @param indexName the indexName value to set.
     */
    @Generated
    public KnowledgeAgentTargetIndex(String indexName) {
        this.indexName = indexName;
    }

    /**
     * Get the indexName property: The name of the target index.
     * 
     * @return the indexName value.
     */
    @Generated
    public String getIndexName() {
        return this.indexName;
    }

    /**
     * Get the defaultRerankerThreshold property: A threshold for reranking results (range: 0-4).
     * 
     * @return the defaultRerankerThreshold value.
     */
    @Generated
    public Float getDefaultRerankerThreshold() {
        return this.defaultRerankerThreshold;
    }

    /**
     * Set the defaultRerankerThreshold property: A threshold for reranking results (range: 0-4).
     * 
     * @param defaultRerankerThreshold the defaultRerankerThreshold value to set.
     * @return the KnowledgeAgentTargetIndex object itself.
     */
    @Generated
    public KnowledgeAgentTargetIndex setDefaultRerankerThreshold(Float defaultRerankerThreshold) {
        this.defaultRerankerThreshold = defaultRerankerThreshold;
        return this;
    }

    /**
     * Get the defaultIncludeReferenceSourceData property: Indicates whether reference source data should be included.
     * 
     * @return the defaultIncludeReferenceSourceData value.
     */
    @Generated
    public Boolean isDefaultIncludeReferenceSourceData() {
        return this.defaultIncludeReferenceSourceData;
    }

    /**
     * Set the defaultIncludeReferenceSourceData property: Indicates whether reference source data should be included.
     * 
     * @param defaultIncludeReferenceSourceData the defaultIncludeReferenceSourceData value to set.
     * @return the KnowledgeAgentTargetIndex object itself.
     */
    @Generated
    public KnowledgeAgentTargetIndex setDefaultIncludeReferenceSourceData(Boolean defaultIncludeReferenceSourceData) {
        this.defaultIncludeReferenceSourceData = defaultIncludeReferenceSourceData;
        return this;
    }

    /**
     * Get the defaultMaxDocsForReranker property: Limits the number of documents considered for ranking.
     * 
     * @return the defaultMaxDocsForReranker value.
     */
    @Generated
    public Integer getDefaultMaxDocsForReranker() {
        return this.defaultMaxDocsForReranker;
    }

    /**
     * Set the defaultMaxDocsForReranker property: Limits the number of documents considered for ranking.
     * 
     * @param defaultMaxDocsForReranker the defaultMaxDocsForReranker value to set.
     * @return the KnowledgeAgentTargetIndex object itself.
     */
    @Generated
    public KnowledgeAgentTargetIndex setDefaultMaxDocsForReranker(Integer defaultMaxDocsForReranker) {
        this.defaultMaxDocsForReranker = defaultMaxDocsForReranker;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("indexName", this.indexName);
        jsonWriter.writeNumberField("defaultRerankerThreshold", this.defaultRerankerThreshold);
        jsonWriter.writeBooleanField("defaultIncludeReferenceSourceData", this.defaultIncludeReferenceSourceData);
        jsonWriter.writeNumberField("defaultMaxDocsForReranker", this.defaultMaxDocsForReranker);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeAgentTargetIndex from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeAgentTargetIndex if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeAgentTargetIndex.
     */
    @Generated
    public static KnowledgeAgentTargetIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean indexNameFound = false;
            String indexName = null;
            Float defaultRerankerThreshold = null;
            Boolean defaultIncludeReferenceSourceData = null;
            Integer defaultMaxDocsForReranker = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("indexName".equals(fieldName)) {
                    indexName = reader.getString();
                    indexNameFound = true;
                } else if ("defaultRerankerThreshold".equals(fieldName)) {
                    defaultRerankerThreshold = reader.getNullable(JsonReader::getFloat);
                } else if ("defaultIncludeReferenceSourceData".equals(fieldName)) {
                    defaultIncludeReferenceSourceData = reader.getNullable(JsonReader::getBoolean);
                } else if ("defaultMaxDocsForReranker".equals(fieldName)) {
                    defaultMaxDocsForReranker = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            if (indexNameFound) {
                KnowledgeAgentTargetIndex deserializedKnowledgeAgentTargetIndex
                    = new KnowledgeAgentTargetIndex(indexName);
                deserializedKnowledgeAgentTargetIndex.defaultRerankerThreshold = defaultRerankerThreshold;
                deserializedKnowledgeAgentTargetIndex.defaultIncludeReferenceSourceData
                    = defaultIncludeReferenceSourceData;
                deserializedKnowledgeAgentTargetIndex.defaultMaxDocsForReranker = defaultMaxDocsForReranker;

                return deserializedKnowledgeAgentTargetIndex;
            }
            throw new IllegalStateException("Missing required property: indexName");
        });
    }
}
