// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.agents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The natural language message style object.
 */
@Immutable
public final class KnowledgeAgentMessage implements JsonSerializable<KnowledgeAgentMessage> {
    /*
     * The role of the tool response.
     */
    @Generated
    private final String role;

    /*
     * The content property.
     */
    @Generated
    private final List<KnowledgeAgentMessageContent> content;

    /**
     * Creates an instance of KnowledgeAgentMessage class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     */
    @Generated
    public KnowledgeAgentMessage(String role, List<KnowledgeAgentMessageContent> content) {
        this.role = role;
        this.content = content;
    }

    /**
     * Get the role property: The role of the tool response.
     * 
     * @return the role value.
     */
    @Generated
    public String getRole() {
        return this.role;
    }

    /**
     * Get the content property: The content property.
     * 
     * @return the content value.
     */
    @Generated
    public List<KnowledgeAgentMessageContent> getContent() {
        return this.content;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeArrayField("content", this.content, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KnowledgeAgentMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KnowledgeAgentMessage if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KnowledgeAgentMessage.
     */
    @Generated
    public static KnowledgeAgentMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean roleFound = false;
            String role = null;
            boolean contentFound = false;
            List<KnowledgeAgentMessageContent> content = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    role = reader.getString();
                    roleFound = true;
                } else if ("content".equals(fieldName)) {
                    content = reader.readArray(reader1 -> KnowledgeAgentMessageContent.fromJson(reader1));
                    contentFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (roleFound && contentFound) {
                return new KnowledgeAgentMessage(role, content);
            }
            List<String> missingProperties = new ArrayList<>();
            if (!roleFound) {
                missingProperties.add("role");
            }
            if (!contentFound) {
                missingProperties.add("content");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
