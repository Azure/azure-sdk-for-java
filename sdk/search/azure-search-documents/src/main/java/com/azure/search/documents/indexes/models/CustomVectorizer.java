// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Contains the parameters specific to generating vector embeddings via a custom endpoint. */
@Fluent
public final class CustomVectorizer extends VectorSearchVectorizer {
    /*
     * The name of the kind of vectorization method being configured for use with vector search.
     */
    private static final VectorSearchVectorizerKind KIND = VectorSearchVectorizerKind.CUSTOM_WEB_API;

    /*
     * Contains the parameters specific to generating vector embeddings via a custom endpoint.
     */
    private CustomVectorizerParameters customVectorizerParameters;

    /**
     * Creates an instance of CustomVectorizer class.
     *
     * @param name the name value to set.
     */
    public CustomVectorizer(String name) {
        super(name);
    }

    /**
     * Get the customVectorizerParameters property: Contains the parameters specific to generating vector embeddings via
     * a custom endpoint.
     *
     * @return the customVectorizerParameters value.
     */
    public CustomVectorizerParameters getCustomVectorizerParameters() {
        return this.customVectorizerParameters;
    }

    /**
     * Set the customVectorizerParameters property: Contains the parameters specific to generating vector embeddings via
     * a custom endpoint.
     *
     * @param customVectorizerParameters the customVectorizerParameters value to set.
     * @return the CustomVectorizer object itself.
     */
    public CustomVectorizer setCustomVectorizerParameters(CustomVectorizerParameters customVectorizerParameters) {
        this.customVectorizerParameters = customVectorizerParameters;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", Objects.toString(KIND, null));
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeJsonField("customVectorizerParameters", this.customVectorizerParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomVectorizer from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomVectorizer if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     * @throws IOException If an error occurs while reading the CustomVectorizer.
     */
    public static CustomVectorizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean nameFound = false;
                    String name = null;
                    CustomVectorizerParameters customVectorizerParameters = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("kind".equals(fieldName)) {
                            String kind = reader.getString();
                            if (!KIND.toString().equals(kind)) {
                                throw new IllegalStateException(
                                        "'kind' was expected to be non-null and equal to '"
                                                + KIND
                                                + "'. The found 'kind' was '"
                                                + kind
                                                + "'.");
                            }
                        } else if ("name".equals(fieldName)) {
                            name = reader.getString();
                            nameFound = true;
                        } else if ("customVectorizerParameters".equals(fieldName)) {
                            customVectorizerParameters = CustomVectorizerParameters.fromJson(reader);
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (nameFound) {
                        CustomVectorizer deserializedCustomVectorizer = new CustomVectorizer(name);
                        deserializedCustomVectorizer.customVectorizerParameters = customVectorizerParameters;

                        return deserializedCustomVectorizer;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!nameFound) {
                        missingProperties.add("name");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
