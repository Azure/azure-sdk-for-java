// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base type for analyzers.
 */
@Immutable
public class LexicalAnalyzer implements JsonSerializable<LexicalAnalyzer> {
    /*
     * A URI fragment specifying the type of analyzer.
     */
    private String odataType = "LexicalAnalyzer";

    /*
     * The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores, can only start and
     * end with alphanumeric characters, and is limited to 128 characters.
     */
    private final String name;

    /**
     * Creates an instance of LexicalAnalyzer class.
     * 
     * @param name the name value to set.
     */
    public LexicalAnalyzer(String name) {
        this.name = name;
    }

    /**
     * Get the odataType property: A URI fragment specifying the type of analyzer.
     * 
     * @return the odataType value.
     */
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the name property: The name of the analyzer. It must only contain letters, digits, spaces, dashes or
     * underscores, can only start and end with alphanumeric characters, and is limited to 128 characters.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("@odata.type", this.odataType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LexicalAnalyzer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LexicalAnalyzer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LexicalAnalyzer.
     */
    public static LexicalAnalyzer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@odata.type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.Azure.Search.CustomAnalyzer".equals(discriminatorValue)) {
                    return CustomAnalyzer.fromJson(readerToUse.reset());
                } else if ("#Microsoft.Azure.Search.PatternAnalyzer".equals(discriminatorValue)) {
                    return PatternAnalyzer.fromJson(readerToUse.reset());
                } else if ("#Microsoft.Azure.Search.StandardAnalyzer".equals(discriminatorValue)) {
                    return LuceneStandardAnalyzer.fromJson(readerToUse.reset());
                } else if ("#Microsoft.Azure.Search.StopAnalyzer".equals(discriminatorValue)) {
                    return StopAnalyzer.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static LexicalAnalyzer fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            String odataType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound) {
                LexicalAnalyzer deserializedLexicalAnalyzer = new LexicalAnalyzer(name);
                deserializedLexicalAnalyzer.odataType = odataType;

                return deserializedLexicalAnalyzer;
            }
            throw new IllegalStateException("Missing required property: name");
        });
    }
}
