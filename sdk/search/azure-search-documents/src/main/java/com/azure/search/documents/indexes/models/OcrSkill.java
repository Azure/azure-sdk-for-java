// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;

/** A skill that extracts text from image files. */
@Fluent
public final class OcrSkill extends SearchIndexerSkill {
    /*
     * Identifies the concrete type of the skill.
     */
    private String odataType = "#Microsoft.Skills.Vision.OcrSkill";

    /*
     * A value indicating which language code to use. Default is en.
     */
    private OcrSkillLanguage defaultLanguageCode;

    /*
     * A value indicating to turn orientation detection on or not. Default is false.
     */
    private Boolean shouldDetectOrientation;

    /*
     * Defines the sequence of characters to use between the lines of text recognized by the OCR skill. The default
     * value is "space".
     */
    private LineEnding lineEnding;

    /**
     * Creates an instance of OcrSkill class.
     *
     * @param inputs the inputs value to set.
     * @param outputs the outputs value to set.
     */
    public OcrSkill(List<InputFieldMappingEntry> inputs, List<OutputFieldMappingEntry> outputs) {
        super(inputs, outputs);
    }

    /**
     * Get the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @return the defaultLanguageCode value.
     */
    public OcrSkillLanguage getDefaultLanguageCode() {
        return this.defaultLanguageCode;
    }

    /**
     * Set the defaultLanguageCode property: A value indicating which language code to use. Default is en.
     *
     * @param defaultLanguageCode the defaultLanguageCode value to set.
     * @return the OcrSkill object itself.
     */
    public OcrSkill setDefaultLanguageCode(OcrSkillLanguage defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }

    /**
     * Get the shouldDetectOrientation property: A value indicating to turn orientation detection on or not. Default is
     * false.
     *
     * @return the shouldDetectOrientation value.
     */
    public Boolean isShouldDetectOrientation() {
        return this.shouldDetectOrientation;
    }

    /**
     * Set the shouldDetectOrientation property: A value indicating to turn orientation detection on or not. Default is
     * false.
     *
     * @param shouldDetectOrientation the shouldDetectOrientation value to set.
     * @return the OcrSkill object itself.
     */
    public OcrSkill setShouldDetectOrientation(Boolean shouldDetectOrientation) {
        this.shouldDetectOrientation = shouldDetectOrientation;
        return this;
    }

    /**
     * Get the lineEnding property: Defines the sequence of characters to use between the lines of text recognized by
     * the OCR skill. The default value is "space".
     *
     * @return the lineEnding value.
     */
    public LineEnding getLineEnding() {
        return this.lineEnding;
    }

    /**
     * Set the lineEnding property: Defines the sequence of characters to use between the lines of text recognized by
     * the OCR skill. The default value is "space".
     *
     * @param lineEnding the lineEnding value to set.
     * @return the OcrSkill object itself.
     */
    public OcrSkill setLineEnding(LineEnding lineEnding) {
        this.lineEnding = lineEnding;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@odata.type", odataType);
        jsonWriter.writeArrayField("inputs", getInputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("outputs", getOutputs(), false, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeStringField("description", getDescription(), false);
        jsonWriter.writeStringField("context", getContext(), false);
        jsonWriter.writeStringField(
                "defaultLanguageCode",
                this.defaultLanguageCode == null ? null : this.defaultLanguageCode.toString(),
                false);
        jsonWriter.writeBooleanField("detectOrientation", this.shouldDetectOrientation, false);
        jsonWriter.writeStringField("lineEnding", this.lineEnding == null ? null : this.lineEnding.toString(), false);
        return jsonWriter.writeEndObject().flush();
    }

    /**
     * Reads an instance of OcrSkill from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OcrSkill if the JsonReader was pointing to an instance of it, or null if it was pointing
     *     to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     */
    public static OcrSkill fromJson(JsonReader jsonReader) {
        return jsonReader.readObject(
                reader -> {
                    String odataType = "#Microsoft.Skills.Vision.OcrSkill";
                    boolean inputsFound = false;
                    List<InputFieldMappingEntry> inputs = null;
                    boolean outputsFound = false;
                    List<OutputFieldMappingEntry> outputs = null;
                    String name = null;
                    String description = null;
                    String context = null;
                    OcrSkillLanguage defaultLanguageCode = null;
                    Boolean shouldDetectOrientation = null;
                    LineEnding lineEnding = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("@odata.type".equals(fieldName)) {
                            odataType = reader.getStringValue();
                        } else if ("inputs".equals(fieldName)) {
                            inputs = reader.readArray(reader1 -> InputFieldMappingEntry.fromJson(reader1));
                            inputsFound = true;
                        } else if ("outputs".equals(fieldName)) {
                            outputs = reader.readArray(reader1 -> OutputFieldMappingEntry.fromJson(reader1));
                            outputsFound = true;
                        } else if ("name".equals(fieldName)) {
                            name = reader.getStringValue();
                        } else if ("description".equals(fieldName)) {
                            description = reader.getStringValue();
                        } else if ("context".equals(fieldName)) {
                            context = reader.getStringValue();
                        } else if ("defaultLanguageCode".equals(fieldName)) {
                            defaultLanguageCode = OcrSkillLanguage.fromString(reader.getStringValue());
                        } else if ("detectOrientation".equals(fieldName)) {
                            shouldDetectOrientation = reader.getBooleanNullableValue();
                        } else if ("lineEnding".equals(fieldName)) {
                            lineEnding = LineEnding.fromString(reader.getStringValue());
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!"#Microsoft.Skills.Vision.OcrSkill".equals(odataType)) {
                        throw new IllegalStateException(
                                "'@odata.type' was expected to be non-null and equal to '#Microsoft.Skills.Vision.OcrSkill'. The found '@odata.type' was '"
                                        + odataType
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!inputsFound) {
                        missingProperties.add("inputs");
                    }
                    if (!outputsFound) {
                        missingProperties.add("outputs");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    OcrSkill deserializedValue = new OcrSkill(inputs, outputs);
                    deserializedValue.odataType = odataType;
                    deserializedValue.setName(name);
                    deserializedValue.setDescription(description);
                    deserializedValue.setContext(context);
                    deserializedValue.defaultLanguageCode = defaultLanguageCode;
                    deserializedValue.shouldDetectOrientation = shouldDetectOrientation;
                    deserializedValue.lineEnding = lineEnding;

                    return deserializedValue;
                });
    }

    /**
     * Get the shouldDetectOrientation property: A value indicating to turn orientation detection on or not. Default is
     * false.
     *
     * @return the shouldDetectOrientation value.
     * @deprecated Use {@link #isShouldDetectOrientation()} instead.
     */
    @Deprecated
    public Boolean setShouldDetectOrientation() {
        return this.shouldDetectOrientation;
    }
}
