// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package com.azure.search.documents.indexes.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the Azure OpenAI resource used to vectorize a query string.
 */
@Fluent
public final class AzureOpenAIVectorizer extends VectorSearchVectorizer {
    /*
     * Contains the parameters specific to Azure OpenAI embedding vectorization.
     */
    private AzureOpenAIParameters azureOpenAIParameters;

    /**
     * Creates an instance of AzureOpenAIVectorizer class.
     * 
     * @param name the name value to set.
     */
    public AzureOpenAIVectorizer(String name) {
        super(name);
    }

    /**
     * Get the azureOpenAIParameters property: Contains the parameters specific to Azure OpenAI embedding
     * vectorization.
     * 
     * @return the azureOpenAIParameters value.
     */
    public AzureOpenAIParameters getAzureOpenAIParameters() {
        return this.azureOpenAIParameters;
    }

    /**
     * Set the azureOpenAIParameters property: Contains the parameters specific to Azure OpenAI embedding
     * vectorization.
     * 
     * @param azureOpenAIParameters the azureOpenAIParameters value to set.
     * @return the AzureOpenAIVectorizer object itself.
     */
    public AzureOpenAIVectorizer setAzureOpenAIParameters(AzureOpenAIParameters azureOpenAIParameters) {
        this.azureOpenAIParameters = azureOpenAIParameters;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", VectorSearchVectorizerKind.AZURE_OPEN_AI == null ? null
            : VectorSearchVectorizerKind.AZURE_OPEN_AI.toString());
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeJsonField("azureOpenAIParameters", this.azureOpenAIParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureOpenAIVectorizer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureOpenAIVectorizer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the AzureOpenAIVectorizer.
     */
    public static AzureOpenAIVectorizer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            AzureOpenAIParameters azureOpenAIParameters = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    String kind = reader.getString();
                    if (!"azureOpenAI".equals(kind)) {
                        throw new IllegalStateException(
                            "'kind' was expected to be non-null and equal to 'azureOpenAI'. The found 'kind' was '"
                                + kind + "'.");
                    }
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("azureOpenAIParameters".equals(fieldName)) {
                    azureOpenAIParameters = AzureOpenAIParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound) {
                AzureOpenAIVectorizer deserializedAzureOpenAIVectorizer = new AzureOpenAIVectorizer(name);
                deserializedAzureOpenAIVectorizer.azureOpenAIParameters = azureOpenAIParameters;

                return deserializedAzureOpenAIVectorizer;
            }
            throw new IllegalStateException("Missing required property: name");
        });
    }
}
