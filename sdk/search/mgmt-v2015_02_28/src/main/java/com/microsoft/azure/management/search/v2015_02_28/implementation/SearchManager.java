/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.search.v2015_02_28.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.search.v2015_02_28.AdminKeys;
import com.microsoft.azure.management.search.v2015_02_28.QueryKeys;
import com.microsoft.azure.management.search.v2015_02_28.Services;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Search resource management.
 */
public final class SearchManager extends ManagerCore<SearchManager, SearchManagementClientImpl> {
    private AdminKeys adminKeys;
    private QueryKeys queryKeys;
    private Services services;
    /**
    * Get a Configurable instance that can be used to create SearchManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new SearchManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of SearchManager that exposes Search resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the SearchManager
    */
    public static SearchManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new SearchManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of SearchManager that exposes Search resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the SearchManager
    */
    public static SearchManager authenticate(RestClient restClient, String subscriptionId) {
        return new SearchManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of SearchManager that exposes Search management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Search management API entry points that work across subscriptions
        */
        SearchManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage AdminKeys.
     */
    public AdminKeys adminKeys() {
        if (this.adminKeys == null) {
            this.adminKeys = new AdminKeysImpl(this);
        }
        return this.adminKeys;
    }

    /**
     * @return Entry point to manage QueryKeys.
     */
    public QueryKeys queryKeys() {
        if (this.queryKeys == null) {
            this.queryKeys = new QueryKeysImpl(this);
        }
        return this.queryKeys;
    }

    /**
     * @return Entry point to manage Services.
     */
    public Services services() {
        if (this.services == null) {
            this.services = new ServicesImpl(this);
        }
        return this.services;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public SearchManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return SearchManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private SearchManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new SearchManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
