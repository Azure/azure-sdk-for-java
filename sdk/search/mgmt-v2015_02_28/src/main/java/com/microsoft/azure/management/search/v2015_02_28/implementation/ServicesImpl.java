/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.search.v2015_02_28.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.search.v2015_02_28.Services;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.search.v2015_02_28.SearchServiceResource;

class ServicesImpl extends WrapperImpl<ServicesInner> implements Services {
    private PagedListConverter<SearchServiceResourceInner, SearchServiceResource> converter;
    private final SearchManager manager;

    ServicesImpl(SearchManager manager) {
        super(manager.inner().services());
        this.manager = manager;
        this.converter = new PagedListConverter<SearchServiceResourceInner, SearchServiceResource>() {
            @Override
            public Observable<SearchServiceResource> typeConvertAsync(SearchServiceResourceInner inner) {
                return Observable.just((SearchServiceResource) wrapModel(inner));
            }
        };
    }

    public SearchManager manager() {
        return this.manager;
    }

    @Override
    public SearchServiceResourceImpl define(String name) {
        return wrapModel(name);
    }

    private SearchServiceResourceImpl wrapModel(SearchServiceResourceInner inner) {
        return  new SearchServiceResourceImpl(inner, manager());
    }

    private SearchServiceResourceImpl wrapModel(String name) {
        return new SearchServiceResourceImpl(name, this.manager());
    }

    @Override
    public PagedList<SearchServiceResource> listByResourceGroup(String resourceGroupName) {
        ServicesInner client = this.inner();
        return converter.convert(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<SearchServiceResource> listByResourceGroupAsync(String resourceGroupName) {
        ServicesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<SearchServiceResourceInner>, Observable<SearchServiceResourceInner>>() {
            @Override
            public Observable<SearchServiceResourceInner> call(Page<SearchServiceResourceInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<SearchServiceResourceInner, SearchServiceResource>() {
            @Override
            public SearchServiceResource call(SearchServiceResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.deleteByResourceGroupAsync(resourceGroupName, name).await();
    }

    @Override
    public Completable deleteByResourceGroupAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public ServiceFuture<Void> deleteByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteByResourceGroupAsync(resourceGroupName, name), serviceCallback);
    }

}
