/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.search.v2020_08_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.search.v2020_08_01.SearchService;
import rx.Observable;
import com.microsoft.azure.management.search.v2020_08_01.SearchManagementRequestOptions;
import java.util.UUID;
import com.microsoft.azure.management.search.v2020_08_01.SearchServiceUpdate;
import java.util.List;
import com.microsoft.azure.management.search.v2020_08_01.HostingMode;
import com.microsoft.azure.management.search.v2020_08_01.PublicNetworkAccess;
import com.microsoft.azure.management.search.v2020_08_01.SearchServiceStatus;
import com.microsoft.azure.management.search.v2020_08_01.ProvisioningState;
import com.microsoft.azure.management.search.v2020_08_01.NetworkRuleSet;
import com.microsoft.azure.management.search.v2020_08_01.Sku;
import com.microsoft.azure.management.search.v2020_08_01.Identity;
import java.util.ArrayList;
import com.microsoft.azure.management.search.v2020_08_01.PrivateEndpointConnection;
import com.microsoft.azure.management.search.v2020_08_01.SharedPrivateLinkResource;
import rx.functions.Func1;

class SearchServiceImpl extends GroupableResourceCoreImpl<SearchService, SearchServiceInner, SearchServiceImpl, SearchManager> implements SearchService, SearchService.Definition, SearchService.Update {
    private SearchManagementRequestOptions csearchManagementRequestOptions;
    private SearchManagementRequestOptions usearchManagementRequestOptions;
    private SearchServiceUpdate updateParameter;
    SearchServiceImpl(String name, SearchServiceInner inner, SearchManager manager) {
        super(name, inner, manager);
        this.csearchManagementRequestOptions = new SearchManagementRequestOptions();
        this.usearchManagementRequestOptions = new SearchManagementRequestOptions();
        this.updateParameter = new SearchServiceUpdate();
    }

    @Override
    public Observable<SearchService> createResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner(), this.csearchManagementRequestOptions)
            .map(new Func1<SearchServiceInner, SearchServiceInner>() {
               @Override
               public SearchServiceInner call(SearchServiceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SearchService> updateResourceAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter, this.usearchManagementRequestOptions)
            .map(new Func1<SearchServiceInner, SearchServiceInner>() {
               @Override
               public SearchServiceInner call(SearchServiceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SearchServiceInner> getInnerAsync() {
        ServicesInner client = this.manager().inner().services();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.csearchManagementRequestOptions = new SearchManagementRequestOptions();
        this.usearchManagementRequestOptions = new SearchManagementRequestOptions();
        this.updateParameter = new SearchServiceUpdate();
    }

    @Override
    public HostingMode hostingMode() {
        return this.inner().hostingMode();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public NetworkRuleSet networkRuleSet() {
        return this.inner().networkRuleSet();
    }

    @Override
    public Integer partitionCount() {
        return this.inner().partitionCount();
    }

    @Override
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnection> lst = new ArrayList<PrivateEndpointConnection>();
        if (this.inner().privateEndpointConnections() != null) {
            for (PrivateEndpointConnectionInner inner : this.inner().privateEndpointConnections()) {
                lst.add( new PrivateEndpointConnectionImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PublicNetworkAccess publicNetworkAccess() {
        return this.inner().publicNetworkAccess();
    }

    @Override
    public Integer replicaCount() {
        return this.inner().replicaCount();
    }

    @Override
    public List<SharedPrivateLinkResource> sharedPrivateLinkResources() {
        List<SharedPrivateLinkResource> lst = new ArrayList<SharedPrivateLinkResource>();
        if (this.inner().sharedPrivateLinkResources() != null) {
            for (SharedPrivateLinkResourceInner inner : this.inner().sharedPrivateLinkResources()) {
                lst.add( new SharedPrivateLinkResourceImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public Sku sku() {
        return this.inner().sku();
    }

    @Override
    public SearchServiceStatus status() {
        return this.inner().status();
    }

    @Override
    public String statusDetails() {
        return this.inner().statusDetails();
    }

    @Override
    public SearchServiceImpl withSearchManagementRequestOptions(SearchManagementRequestOptions searchManagementRequestOptions) {
        if (isInCreateMode()) {
            this.csearchManagementRequestOptions = searchManagementRequestOptions;
        } else {
            this.usearchManagementRequestOptions = searchManagementRequestOptions;
        }
        return this;
    }

    @Override
    public SearchServiceImpl withHostingMode(HostingMode hostingMode) {
        if (isInCreateMode()) {
            this.inner().withHostingMode(hostingMode);
        } else {
            this.updateParameter.withHostingMode(hostingMode);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.inner().withIdentity(identity);
        } else {
            this.updateParameter.withIdentity(identity);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withNetworkRuleSet(NetworkRuleSet networkRuleSet) {
        if (isInCreateMode()) {
            this.inner().withNetworkRuleSet(networkRuleSet);
        } else {
            this.updateParameter.withNetworkRuleSet(networkRuleSet);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withPartitionCount(Integer partitionCount) {
        if (isInCreateMode()) {
            this.inner().withPartitionCount(partitionCount);
        } else {
            this.updateParameter.withPartitionCount(partitionCount);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (isInCreateMode()) {
            this.inner().withPublicNetworkAccess(publicNetworkAccess);
        } else {
            this.updateParameter.withPublicNetworkAccess(publicNetworkAccess);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withReplicaCount(Integer replicaCount) {
        if (isInCreateMode()) {
            this.inner().withReplicaCount(replicaCount);
        } else {
            this.updateParameter.withReplicaCount(replicaCount);
        }
        return this;
    }

    @Override
    public SearchServiceImpl withSku(Sku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

}
