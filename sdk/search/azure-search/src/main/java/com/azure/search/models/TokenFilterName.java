// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for TokenFilterName.
 */
public enum TokenFilterName {
    /**
     * Enum value arabic_normalization.
     */
    ARABIC_NORMALIZATION("arabic_normalization"),

    /**
     * Enum value apostrophe.
     */
    APOSTROPHE("apostrophe"),

    /**
     * Enum value asciifolding.
     */
    ASCIIFOLDING("asciifolding"),

    /**
     * Enum value cjk_bigram.
     */
    CJK_BIGRAM("cjk_bigram"),

    /**
     * Enum value cjk_width.
     */
    CJK_WIDTH("cjk_width"),

    /**
     * Enum value classic.
     */
    CLASSIC("classic"),

    /**
     * Enum value common_grams.
     */
    COMMON_GRAMS("common_grams"),

    /**
     * Enum value edgeNGram_v2.
     */
    EDGE_NGRAM_V2("edgeNGram_v2"),

    /**
     * Enum value elision.
     */
    ELISION("elision"),

    /**
     * Enum value german_normalization.
     */
    GERMAN_NORMALIZATION("german_normalization"),

    /**
     * Enum value hindi_normalization.
     */
    HINDI_NORMALIZATION("hindi_normalization"),

    /**
     * Enum value indic_normalization.
     */
    INDIC_NORMALIZATION("indic_normalization"),

    /**
     * Enum value keyword_repeat.
     */
    KEYWORD_REPEAT("keyword_repeat"),

    /**
     * Enum value kstem.
     */
    KSTEM("kstem"),

    /**
     * Enum value length.
     */
    LENGTH("length"),

    /**
     * Enum value limit.
     */
    LIMIT("limit"),

    /**
     * Enum value lowercase.
     */
    LOWERCASE("lowercase"),

    /**
     * Enum value nGram_v2.
     */
    N_GRAM_V2("nGram_v2"),

    /**
     * Enum value persian_normalization.
     */
    PERSIAN_NORMALIZATION("persian_normalization"),

    /**
     * Enum value phonetic.
     */
    PHONETIC("phonetic"),

    /**
     * Enum value porter_stem.
     */
    PORTER_STEM("porter_stem"),

    /**
     * Enum value reverse.
     */
    REVERSE("reverse"),

    /**
     * Enum value scandinavian_normalization.
     */
    SCANDINAVIAN_NORMALIZATION("scandinavian_normalization"),

    /**
     * Enum value scandinavian_folding.
     */
    SCANDINAVIAN_FOLDING("scandinavian_folding"),

    /**
     * Enum value shingle.
     */
    SHINGLE("shingle"),

    /**
     * Enum value snowball.
     */
    SNOWBALL("snowball"),

    /**
     * Enum value sorani_normalization.
     */
    SORANI_NORMALIZATION("sorani_normalization"),

    /**
     * Enum value stemmer.
     */
    STEMMER("stemmer"),

    /**
     * Enum value stopwords.
     */
    STOPWORDS("stopwords"),

    /**
     * Enum value trim.
     */
    TRIM("trim"),

    /**
     * Enum value truncate.
     */
    TRUNCATE("truncate"),

    /**
     * Enum value unique.
     */
    UNIQUE("unique"),

    /**
     * Enum value uppercase.
     */
    UPPERCASE("uppercase"),

    /**
     * Enum value word_delimiter.
     */
    WORD_DELIMITER("word_delimiter");

    /**
     * The actual serialized value for a TokenFilterName instance.
     */
    private final String value;

    TokenFilterName(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a TokenFilterName instance.
     *
     * @param value the serialized value to parse.
     * @return the parsed TokenFilterName object, or null if unable to parse.
     */
    @JsonCreator
    public static TokenFilterName fromString(String value) {
        TokenFilterName[] items = TokenFilterName.values();
        for (TokenFilterName item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    @JsonValue
    @Override
    public String toString() {
        return this.value;
    }
}
