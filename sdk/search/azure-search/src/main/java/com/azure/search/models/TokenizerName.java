// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.search.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for TokenizerName.
 */
public enum TokenizerName {
    /**
     * Enum value classic.
     */
    CLASSIC("classic"),

    /**
     * Enum value edgeNGram.
     */
    EDGE_NGRAM("edgeNGram"),

    /**
     * Enum value keyword_v2.
     */
    KEYWORD_V2("keyword_v2"),

    /**
     * Enum value letter.
     */
    LETTER("letter"),

    /**
     * Enum value lowercase.
     */
    LOWERCASE("lowercase"),

    /**
     * Enum value microsoft_language_tokenizer.
     */
    MICROSOFT_LANGUAGE_TOKENIZER("microsoft_language_tokenizer"),

    /**
     * Enum value microsoft_language_stemming_tokenizer.
     */
    MICROSOFT_LANGUAGE_STEMMING_TOKENIZER("microsoft_language_stemming_tokenizer"),

    /**
     * Enum value nGram.
     */
    N_GRAM("nGram"),

    /**
     * Enum value path_hierarchy_v2.
     */
    PATH_HIERARCHY_V2("path_hierarchy_v2"),

    /**
     * Enum value pattern.
     */
    PATTERN("pattern"),

    /**
     * Enum value standard_v2.
     */
    STANDARD_V2("standard_v2"),

    /**
     * Enum value uax_url_email.
     */
    UAX_URL_EMAIL("uax_url_email"),

    /**
     * Enum value whitespace.
     */
    WHITESPACE("whitespace");

    /**
     * The actual serialized value for a TokenizerName instance.
     */
    private final String value;

    TokenizerName(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a TokenizerName instance.
     *
     * @param value the serialized value to parse.
     * @return the parsed TokenizerName object, or null if unable to parse.
     */
    @JsonCreator
    public static TokenizerName fromString(String value) {
        TokenizerName[] items = TokenizerName.values();
        for (TokenizerName item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    @JsonValue
    @Override
    public String toString() {
        return this.value;
    }
}
