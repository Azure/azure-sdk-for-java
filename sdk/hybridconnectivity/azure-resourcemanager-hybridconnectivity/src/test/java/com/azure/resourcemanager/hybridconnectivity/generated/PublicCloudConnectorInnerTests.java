// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.PublicCloudConnectorInner;
import com.azure.resourcemanager.hybridconnectivity.models.AwsCloudProfile;
import com.azure.resourcemanager.hybridconnectivity.models.HostType;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnectorProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PublicCloudConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PublicCloudConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"awsCloudProfile\":{\"accountId\":\"lgbquxig\",\"excludedAccounts\":[\"gzjaoyfhrtxilne\",\"kujysvlejuvfq\",\"wrlyxwjkcprb\"],\"isOrganizationalAccount\":false},\"hostType\":\"AWS\",\"provisioningState\":\"Canceled\",\"connectorPrimaryIdentifier\":\"tbvpysszdnru\"},\"location\":\"guhmuouqfpr\",\"tags\":{\"nwui\":\"bngui\",\"zuckyfi\":\"gazxuf\",\"htymw\":\"rfidfvzwdz\"},\"id\":\"sdkf\",\"name\":\"hwxmnteiwa\",\"type\":\"pvkmijcmmxdcuf\"}")
            .toObject(PublicCloudConnectorInner.class);
        Assertions.assertEquals("guhmuouqfpr", model.location());
        Assertions.assertEquals("bngui", model.tags().get("nwui"));
        Assertions.assertEquals("lgbquxig", model.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(false, model.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, model.properties().hostType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PublicCloudConnectorInner model
            = new PublicCloudConnectorInner().withLocation("guhmuouqfpr")
                .withTags(mapOf("nwui", "bngui", "zuckyfi", "gazxuf", "htymw", "rfidfvzwdz"))
                .withProperties(new PublicCloudConnectorProperties()
                    .withAwsCloudProfile(new AwsCloudProfile().withAccountId("lgbquxig")
                        .withExcludedAccounts(Arrays.asList("gzjaoyfhrtxilne", "kujysvlejuvfq", "wrlyxwjkcprb"))
                        .withIsOrganizationalAccount(false))
                    .withHostType(HostType.AWS));
        model = BinaryData.fromObject(model).toObject(PublicCloudConnectorInner.class);
        Assertions.assertEquals("guhmuouqfpr", model.location());
        Assertions.assertEquals("bngui", model.tags().get("nwui"));
        Assertions.assertEquals("lgbquxig", model.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("gzjaoyfhrtxilne", model.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(false, model.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, model.properties().hostType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
