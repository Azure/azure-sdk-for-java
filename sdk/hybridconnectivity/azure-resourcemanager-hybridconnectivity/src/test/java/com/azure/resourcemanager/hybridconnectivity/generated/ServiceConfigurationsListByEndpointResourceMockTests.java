// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurationResource;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServiceConfigurationsListByEndpointResourceMockTests {
    @Test
    public void testListByEndpointResource() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceName\":\"WAC\",\"resourceId\":\"kzzlvmbmpaxmodf\",\"port\":3624195401715068445,\"provisioningState\":\"Creating\"},\"id\":\"bpfvm\",\"name\":\"yhrfouyftaakcpw\",\"type\":\"yzvqt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ServiceConfigurationResource> response = manager.serviceConfigurations()
            .listByEndpointResource("rpkhjwn", "yqsluic", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ServiceName.WAC, response.iterator().next().serviceName());
        Assertions.assertEquals("kzzlvmbmpaxmodf", response.iterator().next().resourceId());
        Assertions.assertEquals(3624195401715068445L, response.iterator().next().port());
    }
}
