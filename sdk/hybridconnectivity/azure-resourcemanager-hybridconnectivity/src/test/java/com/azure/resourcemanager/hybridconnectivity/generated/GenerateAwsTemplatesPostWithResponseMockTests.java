// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.GenerateAwsTemplateRequest;
import com.azure.resourcemanager.hybridconnectivity.models.PostResponse;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionSettings;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeSettings;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GenerateAwsTemplatesPostWithResponseMockTests {
    @Test
    public void testPostWithResponse() throws Exception {
        String responseStr = "{}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PostResponse response = manager.generateAwsTemplates()
            .postWithResponse(
                new GenerateAwsTemplateRequest().withConnectorId("qyib")
                    .withSolutionTypes(Arrays.asList(
                        new SolutionTypeSettings().withSolutionType("fluszdtm")
                            .withSolutionSettings(new SolutionSettings().withAdditionalProperties(mapOf())),
                        new SolutionTypeSettings().withSolutionType("dbutauvfbtkuwhh")
                            .withSolutionSettings(new SolutionSettings().withAdditionalProperties(mapOf())))),
                com.azure.core.util.Context.NONE)
            .getValue();

    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
