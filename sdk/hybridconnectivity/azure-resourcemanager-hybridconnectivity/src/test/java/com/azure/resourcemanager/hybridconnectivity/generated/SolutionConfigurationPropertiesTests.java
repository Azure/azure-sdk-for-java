// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionConfigurationProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"solutionType\":\"kohdbiha\",\"solutionSettings\":{\"ithxqhabifpi\":\"hfcbjysa\",\"x\":\"xwczbyscnp\"},\"status\":\"Failed\",\"statusDetails\":\"y\",\"lastSyncTime\":\"2021-06-17T16:29:35Z\"}")
            .toObject(SolutionConfigurationProperties.class);
        Assertions.assertEquals("kohdbiha", model.solutionType());
        Assertions.assertEquals("hfcbjysa", model.solutionSettings().get("ithxqhabifpi"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionConfigurationProperties model = new SolutionConfigurationProperties().withSolutionType("kohdbiha")
            .withSolutionSettings(mapOf("ithxqhabifpi", "hfcbjysa", "x", "xwczbyscnp"));
        model = BinaryData.fromObject(model).toObject(SolutionConfigurationProperties.class);
        Assertions.assertEquals("kohdbiha", model.solutionType());
        Assertions.assertEquals("hfcbjysa", model.solutionSettings().get("ithxqhabifpi"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
