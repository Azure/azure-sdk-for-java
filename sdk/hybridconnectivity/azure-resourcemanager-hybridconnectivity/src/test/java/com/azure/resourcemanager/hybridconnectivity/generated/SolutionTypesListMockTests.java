// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionTypesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"solutionType\":\"gicccnxqhuex\",\"description\":\"ttlstvlzywemhz\",\"supportedAzureRegions\":[\"sdtclusiypbs\",\"gytguslfead\",\"ygqukyhejh\",\"isxgfp\"],\"solutionSettings\":[{\"name\":\"lppvksrpq\",\"displayName\":\"ujzra\",\"type\":\"htwdwrftswibyrcd\",\"description\":\"bhshfwpracstwity\",\"allowedValues\":[\"evxccedcp\",\"md\"],\"defaultValue\":\"odn\"},{\"name\":\"zxltjcvn\",\"displayName\":\"ltiugcxnavv\",\"type\":\"xqi\",\"description\":\"y\",\"allowedValues\":[\"nyowxwlmdjrkvfg\",\"vfvpdbodaciz\"],\"defaultValue\":\"j\"},{\"name\":\"lhkrribdeibqipqk\",\"displayName\":\"hvxndzwmkrefajpj\",\"type\":\"rwkq\",\"description\":\"yhgbijtjivfx\",\"allowedValues\":[\"jabibsystawf\",\"djpvkvpbjxbkz\"],\"defaultValue\":\"zkdvncja\"},{\"name\":\"udurgkakmokz\",\"displayName\":\"jjklff\",\"type\":\"mouwqlgzrfzeey\",\"description\":\"bizikayuhq\",\"allowedValues\":[\"jbsybbqw\",\"vtldgmfpgvmpip\"],\"defaultValue\":\"slthaq\"}]},\"id\":\"ss\",\"name\":\"wutwbdsre\",\"type\":\"pdrhne\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SolutionTypeResource> response = manager.solutionTypes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gicccnxqhuex", response.iterator().next().properties().solutionType());
        Assertions.assertEquals("ttlstvlzywemhz", response.iterator().next().properties().description());
        Assertions.assertEquals("sdtclusiypbs", response.iterator().next().properties().supportedAzureRegions().get(0));
        Assertions.assertEquals("lppvksrpq", response.iterator().next().properties().solutionSettings().get(0).name());
        Assertions.assertEquals("ujzra",
            response.iterator().next().properties().solutionSettings().get(0).displayName());
        Assertions.assertEquals("htwdwrftswibyrcd",
            response.iterator().next().properties().solutionSettings().get(0).type());
        Assertions.assertEquals("bhshfwpracstwity",
            response.iterator().next().properties().solutionSettings().get(0).description());
        Assertions.assertEquals("evxccedcp",
            response.iterator().next().properties().solutionSettings().get(0).allowedValues().get(0));
        Assertions.assertEquals("odn",
            response.iterator().next().properties().solutionSettings().get(0).defaultValue());
    }
}
