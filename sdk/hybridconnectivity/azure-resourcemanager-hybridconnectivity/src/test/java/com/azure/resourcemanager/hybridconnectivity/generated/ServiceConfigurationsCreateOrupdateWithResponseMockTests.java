// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurationResource;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServiceConfigurationsCreateOrupdateWithResponseMockTests {
    @Test
    public void testCreateOrupdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceName\":\"SSH\",\"resourceId\":\"edgfbcvkcvq\",\"port\":6395460850482092633,\"provisioningState\":\"Updating\"},\"id\":\"vdrhvoo\",\"name\":\"sotbob\",\"type\":\"dopcjwvnh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServiceConfigurationResource response = manager.serviceConfigurations()
            .define("ljuti")
            .withExistingEndpoint("lvithhqzonosgg", "hcohfwdsjnk")
            .withServiceName(ServiceName.SSH)
            .withResourceId("cffgdkzzewk")
            .withPort(4567739994281506426L)
            .create();

        Assertions.assertEquals(ServiceName.SSH, response.serviceName());
        Assertions.assertEquals("edgfbcvkcvq", response.resourceId());
        Assertions.assertEquals(6395460850482092633L, response.port());
    }
}
