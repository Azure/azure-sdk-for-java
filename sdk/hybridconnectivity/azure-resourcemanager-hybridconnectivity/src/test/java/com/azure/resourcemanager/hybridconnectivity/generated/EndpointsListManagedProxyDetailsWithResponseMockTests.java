// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyRequest;
import com.azure.resourcemanager.hybridconnectivity.models.ManagedProxyResource;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceName;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EndpointsListManagedProxyDetailsWithResponseMockTests {
    @Test
    public void testListManagedProxyDetailsWithResponse() throws Exception {
        String responseStr = "{\"proxy\":\"ojlpijnkrxf\",\"expiresOn\":2669373350654837958}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ManagedProxyResource response = manager.endpoints()
            .listManagedProxyDetailsWithResponse("tsbwtovvtgse", "nqfiufxqknpi",
                new ManagedProxyRequest().withService("gnepttwqmsni")
                    .withHostname("cdm")
                    .withServiceName(ServiceName.SSH),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ojlpijnkrxf", response.proxy());
        Assertions.assertEquals(2669373350654837958L, response.expiresOn());
    }
}
