// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationPropertiesUpdate;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationUpdate;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionSettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionConfigurationUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionConfigurationUpdate model = BinaryData.fromString(
            "{\"properties\":{\"solutionType\":\"v\",\"solutionSettings\":{\"pfhyhl\":\"unqecanoae\",\"atuokthfuiu\":\"rpmopjmc\",\"zydagfuaxbezyiuo\":\"odsfcpkvxodpuozm\"}},\"id\":\"twhrdxwzywqsm\",\"name\":\"surex\",\"type\":\"moryocfsfksym\"}")
            .toObject(SolutionConfigurationUpdate.class);
        Assertions.assertEquals("v", model.properties().solutionType());
        Assertions.assertEquals("odsfcpkvxodpuozm",
            model.properties().solutionSettings().additionalProperties().get("zydagfuaxbezyiuo"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionConfigurationUpdate model = new SolutionConfigurationUpdate()
            .withProperties(new SolutionConfigurationPropertiesUpdate().withSolutionType("v")
                .withSolutionSettings(new SolutionSettings().withAdditionalProperties(
                    mapOf("zydagfuaxbezyiuo", "odsfcpkvxodpuozm", "atuokthfuiu", "rpmopjmc", "pfhyhl", "unqecanoae"))));
        model = BinaryData.fromObject(model).toObject(SolutionConfigurationUpdate.class);
        Assertions.assertEquals("v", model.properties().solutionType());
        Assertions.assertEquals("odsfcpkvxodpuozm",
            model.properties().solutionSettings().additionalProperties().get("zydagfuaxbezyiuo"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
