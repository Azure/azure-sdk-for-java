// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SolutionConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SolutionConfigurationInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"solutionType\":\"rh\",\"solutionSettings\":{\"urkdtmlx\":\"cqhsm\",\"kc\":\"ekuksjtx\",\"xzdxtayrlhmwh\":\"mparcryuanzw\"},\"status\":\"Completed\",\"statusDetails\":\"qobmtukk\",\"lastSyncTime\":\"2021-03-16T09:48:53Z\"},\"id\":\"tihfx\",\"name\":\"ijbpzvgnwzsymgl\",\"type\":\"uf\"}")
            .toObject(SolutionConfigurationInner.class);
        Assertions.assertEquals("rh", model.properties().solutionType());
        Assertions.assertEquals("cqhsm", model.properties().solutionSettings().get("urkdtmlx"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SolutionConfigurationInner model = new SolutionConfigurationInner()
            .withProperties(new SolutionConfigurationProperties().withSolutionType("rh")
                .withSolutionSettings(mapOf("urkdtmlx", "cqhsm", "kc", "ekuksjtx", "xzdxtayrlhmwh", "mparcryuanzw")));
        model = BinaryData.fromObject(model).toObject(SolutionConfigurationInner.class);
        Assertions.assertEquals("rh", model.properties().solutionType());
        Assertions.assertEquals("cqhsm", model.properties().solutionSettings().get("urkdtmlx"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
