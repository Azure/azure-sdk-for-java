// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridconnectivity.models.GenerateAwsTemplateRequest;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GenerateAwsTemplateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GenerateAwsTemplateRequest model = BinaryData.fromString(
            "{\"connectorId\":\"kdosvqw\",\"solutionTypes\":[{\"solutionType\":\"dgbb\",\"solutionSettings\":{\"bexppb\":\"dgmb\",\"rolfpfp\":\"tq\"}},{\"solutionType\":\"algbquxigjyjg\",\"solutionSettings\":{\"fhrtxilnerkujysv\":\"o\",\"fqawrlyxw\":\"eju\",\"xgjvtbv\":\"kcprbnw\",\"uouq\":\"ysszdnrujqguh\"}},{\"solutionType\":\"prwzwbnguitnwui\",\"solutionSettings\":{\"ckyfih\":\"zxufiz\"}}]}")
            .toObject(GenerateAwsTemplateRequest.class);
        Assertions.assertEquals("kdosvqw", model.connectorId());
        Assertions.assertEquals("dgbb", model.solutionTypes().get(0).solutionType());
        Assertions.assertEquals("dgmb", model.solutionTypes().get(0).solutionSettings().get("bexppb"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GenerateAwsTemplateRequest model = new GenerateAwsTemplateRequest().withConnectorId("kdosvqw")
            .withSolutionTypes(Arrays.asList(
                new SolutionTypeSettings().withSolutionType("dgbb")
                    .withSolutionSettings(mapOf("bexppb", "dgmb", "rolfpfp", "tq")),
                new SolutionTypeSettings().withSolutionType("algbquxigjyjg")
                    .withSolutionSettings(mapOf("fhrtxilnerkujysv", "o", "fqawrlyxw", "eju", "xgjvtbv", "kcprbnw",
                        "uouq", "ysszdnrujqguh")),
                new SolutionTypeSettings().withSolutionType("prwzwbnguitnwui")
                    .withSolutionSettings(mapOf("ckyfih", "zxufiz"))));
        model = BinaryData.fromObject(model).toObject(GenerateAwsTemplateRequest.class);
        Assertions.assertEquals("kdosvqw", model.connectorId());
        Assertions.assertEquals("dgbb", model.solutionTypes().get(0).solutionType());
        Assertions.assertEquals("dgmb", model.solutionTypes().get(0).solutionSettings().get("bexppb"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
