// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationProperties;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionSettings;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SolutionConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"solutionType\":\"mbzonokix\",\"solutionSettings\":{\"\":{\"rlazszrnw\":\"irgzp\",\"fpwpjylwbt\":\"iin\"}},\"status\":\"InProgress\",\"statusDetails\":\"sj\",\"lastSyncTime\":\"2021-10-21T17:47:33Z\"},\"id\":\"zfjvfbgofe\",\"name\":\"jagrqmqhldvr\",\"type\":\"iiojnal\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SolutionConfiguration response = manager.solutionConfigurations()
            .define("jabudurgkakmo")
            .withExistingResourceUri("jxbkzbzkdvn")
            .withProperties(new SolutionConfigurationProperties().withSolutionType("jk")
                .withSolutionSettings(new SolutionSettings().withAdditionalProperties(mapOf())))
            .create();

        Assertions.assertEquals("mbzonokix", response.properties().solutionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
