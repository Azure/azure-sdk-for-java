// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager;
import com.azure.resourcemanager.hybridconnectivity.models.AwsCloudProfile;
import com.azure.resourcemanager.hybridconnectivity.models.HostType;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnector;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnectorProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PublicCloudConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"awsCloudProfile\":{\"accountId\":\"kzevdlhewpusds\",\"excludedAccounts\":[\"vogvbbejdcngqqmo\",\"kufgmj\",\"rwr\"],\"isOrganizationalAccount\":true},\"hostType\":\"AWS\",\"provisioningState\":\"Succeeded\",\"connectorPrimaryIdentifier\":\"nuuzkopbm\"},\"location\":\"rfdwoyu\",\"tags\":{\"mzqhoftrmaequi\":\"iuiefozbhdmsm\",\"iyylhalnswhccsp\":\"hxicslfaoqz\",\"scywuggwoluhc\":\"kaivwit\"},\"id\":\"bwemhairs\",\"name\":\"rgzdwmsweyp\",\"type\":\"w\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridConnectivityManager manager = HybridConnectivityManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PublicCloudConnector response = manager.publicCloudConnectors()
            .define("efkifr")
            .withRegion("szufoxciqopidoa")
            .withExistingResourceGroup("q")
            .withTags(mapOf("xkhnzbonlwnto", "odhkha", "zcmrvexztvb", "gokdwbwhks", "lmnguxaw", "qgsfraoyzkoow",
                "uximerqfobw", "aldsy"))
            .withProperties(new PublicCloudConnectorProperties()
                .withAwsCloudProfile(new AwsCloudProfile().withAccountId("puqujmqlgkfbtn")
                    .withExcludedAccounts(Arrays.asList("ongbjcnt", "jitcjedftwwaez"))
                    .withIsOrganizationalAccount(true))
                .withHostType(HostType.AWS))
            .create();

        Assertions.assertEquals("rfdwoyu", response.location());
        Assertions.assertEquals("iuiefozbhdmsm", response.tags().get("mzqhoftrmaequi"));
        Assertions.assertEquals("kzevdlhewpusds", response.properties().awsCloudProfile().accountId());
        Assertions.assertEquals("vogvbbejdcngqqmo", response.properties().awsCloudProfile().excludedAccounts().get(0));
        Assertions.assertEquals(true, response.properties().awsCloudProfile().isOrganizationalAccount());
        Assertions.assertEquals(HostType.AWS, response.properties().hostType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
