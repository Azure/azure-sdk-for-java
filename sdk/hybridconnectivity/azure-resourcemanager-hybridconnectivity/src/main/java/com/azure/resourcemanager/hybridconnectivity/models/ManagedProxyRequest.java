// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represent ManageProxy Request object.
 */
@Fluent
public final class ManagedProxyRequest implements JsonSerializable<ManagedProxyRequest> {
    /*
     * The name of the service.
     */
    private String service;

    /*
     * The target host name.
     */
    private String hostname;

    /*
     * The name of the service. It is an optional property, if not provided, service configuration tokens issue code
     * would be by passed.
     */
    private ServiceName serviceName;

    /**
     * Creates an instance of ManagedProxyRequest class.
     */
    public ManagedProxyRequest() {
    }

    /**
     * Get the service property: The name of the service.
     * 
     * @return the service value.
     */
    public String service() {
        return this.service;
    }

    /**
     * Set the service property: The name of the service.
     * 
     * @param service the service value to set.
     * @return the ManagedProxyRequest object itself.
     */
    public ManagedProxyRequest withService(String service) {
        this.service = service;
        return this;
    }

    /**
     * Get the hostname property: The target host name.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The target host name.
     * 
     * @param hostname the hostname value to set.
     * @return the ManagedProxyRequest object itself.
     */
    public ManagedProxyRequest withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the serviceName property: The name of the service. It is an optional property, if not provided, service
     * configuration tokens issue code would be by passed.
     * 
     * @return the serviceName value.
     */
    public ServiceName serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: The name of the service. It is an optional property, if not provided, service
     * configuration tokens issue code would be by passed.
     * 
     * @param serviceName the serviceName value to set.
     * @return the ManagedProxyRequest object itself.
     */
    public ManagedProxyRequest withServiceName(ServiceName serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (service() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property service in model ManagedProxyRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedProxyRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("service", this.service);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("serviceName", this.serviceName == null ? null : this.serviceName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedProxyRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedProxyRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedProxyRequest.
     */
    public static ManagedProxyRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedProxyRequest deserializedManagedProxyRequest = new ManagedProxyRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("service".equals(fieldName)) {
                    deserializedManagedProxyRequest.service = reader.getString();
                } else if ("hostname".equals(fieldName)) {
                    deserializedManagedProxyRequest.hostname = reader.getString();
                } else if ("serviceName".equals(fieldName)) {
                    deserializedManagedProxyRequest.serviceName = ServiceName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedProxyRequest;
        });
    }
}
