// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.hybridconnectivity.fluent.InventoriesClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.InventoryResourceInner;
import com.azure.resourcemanager.hybridconnectivity.implementation.models.InventoryResourceListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in InventoriesClient.
 */
public final class InventoriesClientImpl implements InventoriesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final InventoriesService service;

    /**
     * The service client containing this operation class.
     */
    private final HybridConnectivityMgmtClientImpl client;

    /**
     * Initializes an instance of InventoriesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    InventoriesClientImpl(HybridConnectivityMgmtClientImpl client) {
        this.service
            = RestProxy.create(InventoriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridConnectivityMgmtClientInventories to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "HybridConnectivityMg")
    public interface InventoriesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("solutionConfiguration") String solutionConfiguration,
            @PathParam("inventoryId") String inventoryId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryResourceListResult>> listBySolutionConfiguration(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("solutionConfiguration") String solutionConfiguration, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InventoryResourceListResult>> listBySolutionConfigurationNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a InventoryResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param inventoryId Inventory resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InventoryResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryResourceInner>> getWithResponseAsync(String resourceUri,
        String solutionConfiguration, String inventoryId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (solutionConfiguration == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionConfiguration is required and cannot be null."));
        }
        if (inventoryId == null) {
            return Mono.error(new IllegalArgumentException("Parameter inventoryId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                solutionConfiguration, inventoryId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a InventoryResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param inventoryId Inventory resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InventoryResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InventoryResourceInner>> getWithResponseAsync(String resourceUri,
        String solutionConfiguration, String inventoryId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (solutionConfiguration == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionConfiguration is required and cannot be null."));
        }
        if (inventoryId == null) {
            return Mono.error(new IllegalArgumentException("Parameter inventoryId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, solutionConfiguration,
            inventoryId, accept, context);
    }

    /**
     * Get a InventoryResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param inventoryId Inventory resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InventoryResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InventoryResourceInner> getAsync(String resourceUri, String solutionConfiguration,
        String inventoryId) {
        return getWithResponseAsync(resourceUri, solutionConfiguration, inventoryId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a InventoryResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param inventoryId Inventory resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InventoryResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InventoryResourceInner> getWithResponse(String resourceUri, String solutionConfiguration,
        String inventoryId, Context context) {
        return getWithResponseAsync(resourceUri, solutionConfiguration, inventoryId, context).block();
    }

    /**
     * Get a InventoryResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param inventoryId Inventory resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a InventoryResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InventoryResourceInner get(String resourceUri, String solutionConfiguration, String inventoryId) {
        return getWithResponse(resourceUri, solutionConfiguration, inventoryId, Context.NONE).getValue();
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryResourceInner>> listBySolutionConfigurationSinglePageAsync(String resourceUri,
        String solutionConfiguration) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (solutionConfiguration == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionConfiguration is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySolutionConfiguration(this.client.getEndpoint(),
                this.client.getApiVersion(), resourceUri, solutionConfiguration, accept, context))
            .<PagedResponse<InventoryResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryResourceInner>> listBySolutionConfigurationSinglePageAsync(String resourceUri,
        String solutionConfiguration, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (solutionConfiguration == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionConfiguration is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySolutionConfiguration(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                solutionConfiguration, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InventoryResourceInner> listBySolutionConfigurationAsync(String resourceUri,
        String solutionConfiguration) {
        return new PagedFlux<>(() -> listBySolutionConfigurationSinglePageAsync(resourceUri, solutionConfiguration),
            nextLink -> listBySolutionConfigurationNextSinglePageAsync(nextLink));
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<InventoryResourceInner> listBySolutionConfigurationAsync(String resourceUri,
        String solutionConfiguration, Context context) {
        return new PagedFlux<>(
            () -> listBySolutionConfigurationSinglePageAsync(resourceUri, solutionConfiguration, context),
            nextLink -> listBySolutionConfigurationNextSinglePageAsync(nextLink, context));
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InventoryResourceInner> listBySolutionConfiguration(String resourceUri,
        String solutionConfiguration) {
        return new PagedIterable<>(listBySolutionConfigurationAsync(resourceUri, solutionConfiguration));
    }

    /**
     * List InventoryResource resources by SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<InventoryResourceInner> listBySolutionConfiguration(String resourceUri,
        String solutionConfiguration, Context context) {
        return new PagedIterable<>(listBySolutionConfigurationAsync(resourceUri, solutionConfiguration, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryResourceInner>>
        listBySolutionConfigurationNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listBySolutionConfigurationNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<InventoryResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a InventoryResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<InventoryResourceInner>> listBySolutionConfigurationNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySolutionConfigurationNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
