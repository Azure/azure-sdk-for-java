// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner;

/**
 * An immutable client-side representation of SolutionConfiguration.
 */
public interface SolutionConfiguration {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: The resource-specific properties for this resource.
     * 
     * @return the properties value.
     */
    SolutionConfigurationProperties properties();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the inner com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner object.
     * 
     * @return the inner object.
     */
    SolutionConfigurationInner innerModel();

    /**
     * The entirety of the SolutionConfiguration definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }

    /**
     * The SolutionConfiguration definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the SolutionConfiguration definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the SolutionConfiguration definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies resourceUri.
             * 
             * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceUri(String resourceUri);
        }

        /**
         * The stage of the SolutionConfiguration definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            SolutionConfiguration create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SolutionConfiguration create(Context context);
        }

        /**
         * The stage of the SolutionConfiguration definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The resource-specific properties for this resource..
             * 
             * @param properties The resource-specific properties for this resource.
             * @return the next definition stage.
             */
            WithCreate withProperties(SolutionConfigurationProperties properties);
        }
    }

    /**
     * Begins update for the SolutionConfiguration resource.
     * 
     * @return the stage of resource update.
     */
    SolutionConfiguration.Update update();

    /**
     * The template for SolutionConfiguration update.
     */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        SolutionConfiguration apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SolutionConfiguration apply(Context context);
    }

    /**
     * The SolutionConfiguration update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the SolutionConfiguration update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: The resource-specific properties for this resource..
             * 
             * @param properties The resource-specific properties for this resource.
             * @return the next definition stage.
             */
            Update withProperties(SolutionConfigurationProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    SolutionConfiguration refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SolutionConfiguration refresh(Context context);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    OperationStatusResult syncNow();

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    OperationStatusResult syncNow(Context context);
}
