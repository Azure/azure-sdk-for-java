// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Solution type resource.
 */
@Immutable
public final class SolutionTypeProperties implements JsonSerializable<SolutionTypeProperties> {
    /*
     * The name of the solution type.
     */
    private String solutionType;

    /*
     * Short description of solution type.
     */
    private String description;

    /*
     * The locations this solution is supported in.
     */
    private List<String> supportedAzureRegions;

    /*
     * Array of solution settings and its description.
     */
    private List<SolutionTypeSettingsProperties> solutionSettings;

    /**
     * Creates an instance of SolutionTypeProperties class.
     */
    private SolutionTypeProperties() {
    }

    /**
     * Get the solutionType property: The name of the solution type.
     * 
     * @return the solutionType value.
     */
    public String solutionType() {
        return this.solutionType;
    }

    /**
     * Get the description property: Short description of solution type.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the supportedAzureRegions property: The locations this solution is supported in.
     * 
     * @return the supportedAzureRegions value.
     */
    public List<String> supportedAzureRegions() {
        return this.supportedAzureRegions;
    }

    /**
     * Get the solutionSettings property: Array of solution settings and its description.
     * 
     * @return the solutionSettings value.
     */
    public List<SolutionTypeSettingsProperties> solutionSettings() {
        return this.solutionSettings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionSettings() != null) {
            solutionSettings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionType", this.solutionType);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("supportedAzureRegions", this.supportedAzureRegions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("solutionSettings", this.solutionSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTypeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionTypeProperties.
     */
    public static SolutionTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTypeProperties deserializedSolutionTypeProperties = new SolutionTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionType".equals(fieldName)) {
                    deserializedSolutionTypeProperties.solutionType = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSolutionTypeProperties.description = reader.getString();
                } else if ("supportedAzureRegions".equals(fieldName)) {
                    List<String> supportedAzureRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionTypeProperties.supportedAzureRegions = supportedAzureRegions;
                } else if ("solutionSettings".equals(fieldName)) {
                    List<SolutionTypeSettingsProperties> solutionSettings
                        = reader.readArray(reader1 -> SolutionTypeSettingsProperties.fromJson(reader1));
                    deserializedSolutionTypeProperties.solutionSettings = solutionSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTypeProperties;
        });
    }
}
