// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of SolutionConfigurations.
 */
public interface SolutionConfigurations {
    /**
     * Get a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration along with {@link Response}.
     */
    Response<SolutionConfiguration> getWithResponse(String resourceUri, String solutionConfiguration, Context context);

    /**
     * Get a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration.
     */
    SolutionConfiguration get(String resourceUri, String solutionConfiguration);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String solutionConfiguration, Context context);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceUri, String solutionConfiguration);

    /**
     * List SolutionConfiguration resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionConfiguration list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionConfiguration> list(String resourceUri);

    /**
     * List SolutionConfiguration resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionConfiguration list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionConfiguration> list(String resourceUri, Context context);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    OperationStatusResult syncNow(String resourceUri, String solutionConfiguration);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    OperationStatusResult syncNow(String resourceUri, String solutionConfiguration, Context context);

    /**
     * Get a SolutionConfiguration.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration along with {@link Response}.
     */
    SolutionConfiguration getById(String id);

    /**
     * Get a SolutionConfiguration.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration along with {@link Response}.
     */
    Response<SolutionConfiguration> getByIdWithResponse(String id, Context context);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SolutionConfiguration resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SolutionConfiguration definition.
     */
    SolutionConfiguration.DefinitionStages.Blank define(String name);
}
