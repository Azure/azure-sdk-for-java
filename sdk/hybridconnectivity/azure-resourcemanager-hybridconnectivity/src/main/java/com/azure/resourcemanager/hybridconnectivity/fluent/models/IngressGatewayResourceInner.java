// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ingress gateway access credentials.
 */
@Immutable
public final class IngressGatewayResourceInner implements JsonSerializable<IngressGatewayResourceInner> {
    /*
     * Azure relay hybrid connection access properties
     */
    private RelayNamespaceAccessProperties innerRelay;

    /*
     * Ingress gateway profile
     */
    private IngressProfileProperties innerIngress;

    /**
     * Creates an instance of IngressGatewayResourceInner class.
     */
    private IngressGatewayResourceInner() {
    }

    /**
     * Get the innerRelay property: Azure relay hybrid connection access properties.
     * 
     * @return the innerRelay value.
     */
    private RelayNamespaceAccessProperties innerRelay() {
        return this.innerRelay;
    }

    /**
     * Get the innerIngress property: Ingress gateway profile.
     * 
     * @return the innerIngress value.
     */
    private IngressProfileProperties innerIngress() {
        return this.innerIngress;
    }

    /**
     * Get the namespaceName property: The namespace name.
     * 
     * @return the namespaceName value.
     */
    public String namespaceName() {
        return this.innerRelay() == null ? null : this.innerRelay().namespaceName();
    }

    /**
     * Get the namespaceNameSuffix property: The suffix domain name of relay namespace.
     * 
     * @return the namespaceNameSuffix value.
     */
    public String namespaceNameSuffix() {
        return this.innerRelay() == null ? null : this.innerRelay().namespaceNameSuffix();
    }

    /**
     * Get the hybridConnectionName property: Azure Relay hybrid connection name for the resource.
     * 
     * @return the hybridConnectionName value.
     */
    public String hybridConnectionName() {
        return this.innerRelay() == null ? null : this.innerRelay().hybridConnectionName();
    }

    /**
     * Get the accessKey property: Access key for hybrid connection.
     * 
     * @return the accessKey value.
     */
    public String accessKey() {
        return this.innerRelay() == null ? null : this.innerRelay().accessKey();
    }

    /**
     * Get the expiresOn property: The expiration of access key in unix time.
     * 
     * @return the expiresOn value.
     */
    public Long expiresOn() {
        return this.innerRelay() == null ? null : this.innerRelay().expiresOn();
    }

    /**
     * Get the serviceConfigurationToken property: The token to access the enabled service.
     * 
     * @return the serviceConfigurationToken value.
     */
    public String serviceConfigurationToken() {
        return this.innerRelay() == null ? null : this.innerRelay().serviceConfigurationToken();
    }

    /**
     * Get the hostname property: The ingress hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.innerIngress() == null ? null : this.innerIngress().hostname();
    }

    /**
     * Get the serverId property: The arc ingress gateway server app id.
     * 
     * @return the serverId value.
     */
    public String serverId() {
        return this.innerIngress() == null ? null : this.innerIngress().serverId();
    }

    /**
     * Get the tenantId property: The target resource home tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerIngress() == null ? null : this.innerIngress().tenantId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerRelay() != null) {
            innerRelay().validate();
        }
        if (innerIngress() != null) {
            innerIngress().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("relay", this.innerRelay);
        jsonWriter.writeJsonField("ingress", this.innerIngress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngressGatewayResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngressGatewayResourceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IngressGatewayResourceInner.
     */
    public static IngressGatewayResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngressGatewayResourceInner deserializedIngressGatewayResourceInner = new IngressGatewayResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("relay".equals(fieldName)) {
                    deserializedIngressGatewayResourceInner.innerRelay
                        = RelayNamespaceAccessProperties.fromJson(reader);
                } else if ("ingress".equals(fieldName)) {
                    deserializedIngressGatewayResourceInner.innerIngress = IngressProfileProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIngressGatewayResourceInner;
        });
    }
}
