// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AAD Profile.
 */
@Fluent
public final class AadProfileProperties implements JsonSerializable<AadProfileProperties> {
    /*
     * The arc ingress gateway server app id.
     */
    private String serverId;

    /*
     * The target resource home tenant id.
     */
    private String tenantId;

    /**
     * Creates an instance of AadProfileProperties class.
     */
    public AadProfileProperties() {
    }

    /**
     * Get the serverId property: The arc ingress gateway server app id.
     * 
     * @return the serverId value.
     */
    public String serverId() {
        return this.serverId;
    }

    /**
     * Set the serverId property: The arc ingress gateway server app id.
     * 
     * @param serverId the serverId value to set.
     * @return the AadProfileProperties object itself.
     */
    public AadProfileProperties withServerId(String serverId) {
        this.serverId = serverId;
        return this;
    }

    /**
     * Get the tenantId property: The target resource home tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The target resource home tenant id.
     * 
     * @param tenantId the tenantId value to set.
     * @return the AadProfileProperties object itself.
     */
    public AadProfileProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serverId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property serverId in model AadProfileProperties"));
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tenantId in model AadProfileProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AadProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverId", this.serverId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AadProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AadProfileProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AadProfileProperties.
     */
    public static AadProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AadProfileProperties deserializedAadProfileProperties = new AadProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverId".equals(fieldName)) {
                    deserializedAadProfileProperties.serverId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAadProfileProperties.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAadProfileProperties;
        });
    }
}
