// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.PublicCloudConnectorsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.PublicCloudConnectorInner;
import com.azure.resourcemanager.hybridconnectivity.models.OperationStatusResult;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnector;
import com.azure.resourcemanager.hybridconnectivity.models.PublicCloudConnectors;

public final class PublicCloudConnectorsImpl implements PublicCloudConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(PublicCloudConnectorsImpl.class);

    private final PublicCloudConnectorsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public PublicCloudConnectorsImpl(PublicCloudConnectorsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<PublicCloudConnector> getByResourceGroupWithResponse(String resourceGroupName,
        String publicCloudConnector, Context context) {
        Response<PublicCloudConnectorInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, publicCloudConnector, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PublicCloudConnectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PublicCloudConnector getByResourceGroup(String resourceGroupName, String publicCloudConnector) {
        PublicCloudConnectorInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, publicCloudConnector);
        if (inner != null) {
            return new PublicCloudConnectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String publicCloudConnector,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, publicCloudConnector, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String publicCloudConnector) {
        this.serviceClient().delete(resourceGroupName, publicCloudConnector);
    }

    public PagedIterable<PublicCloudConnector> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PublicCloudConnectorInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PublicCloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCloudConnector> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PublicCloudConnectorInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PublicCloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCloudConnector> list() {
        PagedIterable<PublicCloudConnectorInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PublicCloudConnectorImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCloudConnector> list(Context context) {
        PagedIterable<PublicCloudConnectorInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PublicCloudConnectorImpl(inner1, this.manager()));
    }

    public OperationStatusResult testPermissions(String resourceGroupName, String publicCloudConnector) {
        OperationStatusResultInner inner
            = this.serviceClient().testPermissions(resourceGroupName, publicCloudConnector);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult testPermissions(String resourceGroupName, String publicCloudConnector,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().testPermissions(resourceGroupName, publicCloudConnector, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PublicCloudConnector getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicCloudConnector = ResourceManagerUtils.getValueFromIdByName(id, "publicCloudConnectors");
        if (publicCloudConnector == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicCloudConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, publicCloudConnector, Context.NONE).getValue();
    }

    public Response<PublicCloudConnector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicCloudConnector = ResourceManagerUtils.getValueFromIdByName(id, "publicCloudConnectors");
        if (publicCloudConnector == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicCloudConnectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, publicCloudConnector, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicCloudConnector = ResourceManagerUtils.getValueFromIdByName(id, "publicCloudConnectors");
        if (publicCloudConnector == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicCloudConnectors'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, publicCloudConnector, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String publicCloudConnector = ResourceManagerUtils.getValueFromIdByName(id, "publicCloudConnectors");
        if (publicCloudConnector == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'publicCloudConnectors'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, publicCloudConnector, context);
    }

    private PublicCloudConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public PublicCloudConnectorImpl define(String name) {
        return new PublicCloudConnectorImpl(name, this.manager());
    }
}
