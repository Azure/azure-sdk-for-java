// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Ingress gateway profile.
 */
@Immutable
public final class IngressProfileProperties implements JsonSerializable<IngressProfileProperties> {
    /*
     * The ingress hostname.
     */
    private String hostname;

    /*
     * The AAD Profile
     */
    private AADProfileProperties innerAadProfile;

    /**
     * Creates an instance of IngressProfileProperties class.
     */
    private IngressProfileProperties() {
    }

    /**
     * Get the hostname property: The ingress hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Get the innerAadProfile property: The AAD Profile.
     * 
     * @return the innerAadProfile value.
     */
    private AADProfileProperties innerAadProfile() {
        return this.innerAadProfile;
    }

    /**
     * Get the serverId property: The arc ingress gateway server app id.
     * 
     * @return the serverId value.
     */
    public String serverId() {
        return this.innerAadProfile() == null ? null : this.innerAadProfile().serverId();
    }

    /**
     * Get the tenantId property: The target resource home tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerAadProfile() == null ? null : this.innerAadProfile().tenantId();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostname() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostname in model IngressProfileProperties"));
        }
        if (innerAadProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerAadProfile in model IngressProfileProperties"));
        } else {
            innerAadProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IngressProfileProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeJsonField("aadProfile", this.innerAadProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IngressProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IngressProfileProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IngressProfileProperties.
     */
    public static IngressProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IngressProfileProperties deserializedIngressProfileProperties = new IngressProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostname".equals(fieldName)) {
                    deserializedIngressProfileProperties.hostname = reader.getString();
                } else if ("aadProfile".equals(fieldName)) {
                    deserializedIngressProfileProperties.innerAadProfile = AADProfileProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIngressProfileProperties;
        });
    }
}
