// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of inventory.
 */
@Fluent
public final class InventoryProperties implements JsonSerializable<InventoryProperties> {
    /*
     * Gets or sets the cloud native resource type.
     */
    private CloudNativeType cloudNativeType;

    /*
     * Gets or sets the cloud native resource name.
     */
    private String cloudNativeResourceId;

    /*
     * Gets or sets the mapped azure resource id.
     */
    private String azureResourceId;

    /*
     * Gets or sets the status of the inventory.
     */
    private SolutionConfigurationStatus status;

    /*
     * Gets or sets the status details.
     */
    private String statusDetails;

    /*
     * The resource provisioning state.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of InventoryProperties class.
     */
    public InventoryProperties() {
    }

    /**
     * Get the cloudNativeType property: Gets or sets the cloud native resource type.
     * 
     * @return the cloudNativeType value.
     */
    public CloudNativeType cloudNativeType() {
        return this.cloudNativeType;
    }

    /**
     * Set the cloudNativeType property: Gets or sets the cloud native resource type.
     * 
     * @param cloudNativeType the cloudNativeType value to set.
     * @return the InventoryProperties object itself.
     */
    public InventoryProperties withCloudNativeType(CloudNativeType cloudNativeType) {
        this.cloudNativeType = cloudNativeType;
        return this;
    }

    /**
     * Get the cloudNativeResourceId property: Gets or sets the cloud native resource name.
     * 
     * @return the cloudNativeResourceId value.
     */
    public String cloudNativeResourceId() {
        return this.cloudNativeResourceId;
    }

    /**
     * Set the cloudNativeResourceId property: Gets or sets the cloud native resource name.
     * 
     * @param cloudNativeResourceId the cloudNativeResourceId value to set.
     * @return the InventoryProperties object itself.
     */
    public InventoryProperties withCloudNativeResourceId(String cloudNativeResourceId) {
        this.cloudNativeResourceId = cloudNativeResourceId;
        return this;
    }

    /**
     * Get the azureResourceId property: Gets or sets the mapped azure resource id.
     * 
     * @return the azureResourceId value.
     */
    public String azureResourceId() {
        return this.azureResourceId;
    }

    /**
     * Set the azureResourceId property: Gets or sets the mapped azure resource id.
     * 
     * @param azureResourceId the azureResourceId value to set.
     * @return the InventoryProperties object itself.
     */
    public InventoryProperties withAzureResourceId(String azureResourceId) {
        this.azureResourceId = azureResourceId;
        return this;
    }

    /**
     * Get the status property: Gets or sets the status of the inventory.
     * 
     * @return the status value.
     */
    public SolutionConfigurationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Gets or sets the status of the inventory.
     * 
     * @param status the status value to set.
     * @return the InventoryProperties object itself.
     */
    public InventoryProperties withStatus(SolutionConfigurationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: Gets or sets the status details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: Gets or sets the status details.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the InventoryProperties object itself.
     */
    public InventoryProperties withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cloudNativeType",
            this.cloudNativeType == null ? null : this.cloudNativeType.toString());
        jsonWriter.writeStringField("cloudNativeResourceId", this.cloudNativeResourceId);
        jsonWriter.writeStringField("azureResourceId", this.azureResourceId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InventoryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InventoryProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InventoryProperties.
     */
    public static InventoryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InventoryProperties deserializedInventoryProperties = new InventoryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudNativeType".equals(fieldName)) {
                    deserializedInventoryProperties.cloudNativeType = CloudNativeType.fromString(reader.getString());
                } else if ("cloudNativeResourceId".equals(fieldName)) {
                    deserializedInventoryProperties.cloudNativeResourceId = reader.getString();
                } else if ("azureResourceId".equals(fieldName)) {
                    deserializedInventoryProperties.azureResourceId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedInventoryProperties.status = SolutionConfigurationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedInventoryProperties.statusDetails = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInventoryProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInventoryProperties;
        });
    }
}
