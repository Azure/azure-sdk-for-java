// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The endpoint access for the target resource. */
@Fluent
public final class EndpointAccessResourceInner {
    /*
     * Azure relay hybrid connection access properties
     */
    @JsonProperty(value = "relay")
    private RelayNamespaceAccessProperties innerRelay;

    /** Creates an instance of EndpointAccessResourceInner class. */
    public EndpointAccessResourceInner() {
    }

    /**
     * Get the innerRelay property: Azure relay hybrid connection access properties.
     *
     * @return the innerRelay value.
     */
    private RelayNamespaceAccessProperties innerRelay() {
        return this.innerRelay;
    }

    /**
     * Get the namespaceName property: The namespace name.
     *
     * @return the namespaceName value.
     */
    public String namespaceName() {
        return this.innerRelay() == null ? null : this.innerRelay().namespaceName();
    }

    /**
     * Set the namespaceName property: The namespace name.
     *
     * @param namespaceName the namespaceName value to set.
     * @return the EndpointAccessResourceInner object itself.
     */
    public EndpointAccessResourceInner withNamespaceName(String namespaceName) {
        if (this.innerRelay() == null) {
            this.innerRelay = new RelayNamespaceAccessProperties();
        }
        this.innerRelay().withNamespaceName(namespaceName);
        return this;
    }

    /**
     * Get the namespaceNameSuffix property: The suffix domain name of relay namespace.
     *
     * @return the namespaceNameSuffix value.
     */
    public String namespaceNameSuffix() {
        return this.innerRelay() == null ? null : this.innerRelay().namespaceNameSuffix();
    }

    /**
     * Set the namespaceNameSuffix property: The suffix domain name of relay namespace.
     *
     * @param namespaceNameSuffix the namespaceNameSuffix value to set.
     * @return the EndpointAccessResourceInner object itself.
     */
    public EndpointAccessResourceInner withNamespaceNameSuffix(String namespaceNameSuffix) {
        if (this.innerRelay() == null) {
            this.innerRelay = new RelayNamespaceAccessProperties();
        }
        this.innerRelay().withNamespaceNameSuffix(namespaceNameSuffix);
        return this;
    }

    /**
     * Get the hybridConnectionName property: Azure Relay hybrid connection name for the resource.
     *
     * @return the hybridConnectionName value.
     */
    public String hybridConnectionName() {
        return this.innerRelay() == null ? null : this.innerRelay().hybridConnectionName();
    }

    /**
     * Set the hybridConnectionName property: Azure Relay hybrid connection name for the resource.
     *
     * @param hybridConnectionName the hybridConnectionName value to set.
     * @return the EndpointAccessResourceInner object itself.
     */
    public EndpointAccessResourceInner withHybridConnectionName(String hybridConnectionName) {
        if (this.innerRelay() == null) {
            this.innerRelay = new RelayNamespaceAccessProperties();
        }
        this.innerRelay().withHybridConnectionName(hybridConnectionName);
        return this;
    }

    /**
     * Get the accessKey property: Access key for hybrid connection.
     *
     * @return the accessKey value.
     */
    public String accessKey() {
        return this.innerRelay() == null ? null : this.innerRelay().accessKey();
    }

    /**
     * Get the expiresOn property: The expiration of access key in unix time.
     *
     * @return the expiresOn value.
     */
    public Long expiresOn() {
        return this.innerRelay() == null ? null : this.innerRelay().expiresOn();
    }

    /**
     * Set the expiresOn property: The expiration of access key in unix time.
     *
     * @param expiresOn the expiresOn value to set.
     * @return the EndpointAccessResourceInner object itself.
     */
    public EndpointAccessResourceInner withExpiresOn(Long expiresOn) {
        if (this.innerRelay() == null) {
            this.innerRelay = new RelayNamespaceAccessProperties();
        }
        this.innerRelay().withExpiresOn(expiresOn);
        return this;
    }

    /**
     * Get the serviceConfigurationToken property: The token to access the enabled service.
     *
     * @return the serviceConfigurationToken value.
     */
    public String serviceConfigurationToken() {
        return this.innerRelay() == null ? null : this.innerRelay().serviceConfigurationToken();
    }

    /**
     * Set the serviceConfigurationToken property: The token to access the enabled service.
     *
     * @param serviceConfigurationToken the serviceConfigurationToken value to set.
     * @return the EndpointAccessResourceInner object itself.
     */
    public EndpointAccessResourceInner withServiceConfigurationToken(String serviceConfigurationToken) {
        if (this.innerRelay() == null) {
            this.innerRelay = new RelayNamespaceAccessProperties();
        }
        this.innerRelay().withServiceConfigurationToken(serviceConfigurationToken);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerRelay() != null) {
            innerRelay().validate();
        }
    }
}
