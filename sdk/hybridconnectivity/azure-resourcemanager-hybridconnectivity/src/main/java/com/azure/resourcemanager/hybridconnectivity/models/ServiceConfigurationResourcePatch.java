// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.ServiceConfigurationPropertiesPatch;
import java.io.IOException;

/**
 * The service details under service configuration for the target endpoint resource.
 */
@Fluent
public final class ServiceConfigurationResourcePatch implements JsonSerializable<ServiceConfigurationResourcePatch> {
    /*
     * The service configuration properties.
     */
    private ServiceConfigurationPropertiesPatch innerProperties;

    /**
     * Creates an instance of ServiceConfigurationResourcePatch class.
     */
    public ServiceConfigurationResourcePatch() {
    }

    /**
     * Get the innerProperties property: The service configuration properties.
     * 
     * @return the innerProperties value.
     */
    private ServiceConfigurationPropertiesPatch innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the port property: The port on which service is enabled.
     * 
     * @return the port value.
     */
    public Long port() {
        return this.innerProperties() == null ? null : this.innerProperties().port();
    }

    /**
     * Set the port property: The port on which service is enabled.
     * 
     * @param port the port value to set.
     * @return the ServiceConfigurationResourcePatch object itself.
     */
    public ServiceConfigurationResourcePatch withPort(Long port) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceConfigurationPropertiesPatch();
        }
        this.innerProperties().withPort(port);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConfigurationResourcePatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConfigurationResourcePatch if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConfigurationResourcePatch.
     */
    public static ServiceConfigurationResourcePatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConfigurationResourcePatch deserializedServiceConfigurationResourcePatch
                = new ServiceConfigurationResourcePatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedServiceConfigurationResourcePatch.innerProperties
                        = ServiceConfigurationPropertiesPatch.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConfigurationResourcePatch;
        });
    }
}
