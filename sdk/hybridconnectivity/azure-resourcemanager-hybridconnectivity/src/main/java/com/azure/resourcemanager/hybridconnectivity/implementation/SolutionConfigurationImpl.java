// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner;
import com.azure.resourcemanager.hybridconnectivity.models.OperationStatusResult;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurationProperties;

public final class SolutionConfigurationImpl
    implements SolutionConfiguration, SolutionConfiguration.Definition, SolutionConfiguration.Update {
    private SolutionConfigurationInner innerObject;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SolutionConfigurationProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public SolutionConfigurationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    private String resourceUri;

    private String solutionConfiguration;

    public SolutionConfigurationImpl withExistingResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    public SolutionConfiguration create() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .createOrUpdateWithResponse(resourceUri, solutionConfiguration, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SolutionConfiguration create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .createOrUpdateWithResponse(resourceUri, solutionConfiguration, this.innerModel(), context)
            .getValue();
        return this;
    }

    SolutionConfigurationImpl(String name,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = new SolutionConfigurationInner();
        this.serviceManager = serviceManager;
        this.solutionConfiguration = name;
    }

    public SolutionConfigurationImpl update() {
        return this;
    }

    public SolutionConfiguration apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .updateWithResponse(resourceUri, solutionConfiguration, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public SolutionConfiguration apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .updateWithResponse(resourceUri, solutionConfiguration, this.innerModel(), context)
            .getValue();
        return this;
    }

    SolutionConfigurationImpl(SolutionConfigurationInner innerObject,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "resourceUri");
        this.solutionConfiguration = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "solutionConfiguration");
    }

    public SolutionConfiguration refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .getWithResponse(resourceUri, solutionConfiguration, Context.NONE)
            .getValue();
        return this;
    }

    public SolutionConfiguration refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionConfigurations()
            .getWithResponse(resourceUri, solutionConfiguration, context)
            .getValue();
        return this;
    }

    public OperationStatusResult syncNow() {
        return serviceManager.solutionConfigurations().syncNow(resourceUri, solutionConfiguration);
    }

    public OperationStatusResult syncNow(Context context) {
        return serviceManager.solutionConfigurations().syncNow(resourceUri, solutionConfiguration, context);
    }

    public SolutionConfigurationImpl withProperties(SolutionConfigurationProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
