// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.ServiceConfigurationsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.ServiceConfigurationResourceInner;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurationResource;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceConfigurations;

public final class ServiceConfigurationsImpl implements ServiceConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(ServiceConfigurationsImpl.class);

    private final ServiceConfigurationsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public ServiceConfigurationsImpl(
        ServiceConfigurationsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServiceConfigurationResource> listByEndpointResource(String resourceUri, String endpointName) {
        PagedIterable<ServiceConfigurationResourceInner> inner =
            this.serviceClient().listByEndpointResource(resourceUri, endpointName);
        return Utils.mapPage(inner, inner1 -> new ServiceConfigurationResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceConfigurationResource> listByEndpointResource(
        String resourceUri, String endpointName, Context context) {
        PagedIterable<ServiceConfigurationResourceInner> inner =
            this.serviceClient().listByEndpointResource(resourceUri, endpointName, context);
        return Utils.mapPage(inner, inner1 -> new ServiceConfigurationResourceImpl(inner1, this.manager()));
    }

    public Response<ServiceConfigurationResource> getWithResponse(
        String resourceUri, String endpointName, String serviceConfigurationName, Context context) {
        Response<ServiceConfigurationResourceInner> inner =
            this.serviceClient().getWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServiceConfigurationResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServiceConfigurationResource get(String resourceUri, String endpointName, String serviceConfigurationName) {
        ServiceConfigurationResourceInner inner =
            this.serviceClient().get(resourceUri, endpointName, serviceConfigurationName);
        if (inner != null) {
            return new ServiceConfigurationResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(
        String resourceUri, String endpointName, String serviceConfigurationName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    public void delete(String resourceUri, String endpointName, String serviceConfigurationName) {
        this.serviceClient().delete(resourceUri, endpointName, serviceConfigurationName);
    }

    public ServiceConfigurationResource getById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "endpointName");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.",
                                id)));
        }
        return this.getWithResponse(resourceUri, endpointName, serviceConfigurationName, Context.NONE).getValue();
    }

    public Response<ServiceConfigurationResource> getByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "endpointName");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.",
                                id)));
        }
        return this.getWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    public void deleteById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "endpointName");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.",
                                id)));
        }
        this.deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "endpointName");
        if (endpointName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        String serviceConfigurationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/serviceConfigurations/{serviceConfigurationName}",
                    "serviceConfigurationName");
        if (serviceConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceConfigurations'.",
                                id)));
        }
        return this.deleteWithResponse(resourceUri, endpointName, serviceConfigurationName, context);
    }

    private ServiceConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public ServiceConfigurationResourceImpl define(String name) {
        return new ServiceConfigurationResourceImpl(name, this.manager());
    }
}
