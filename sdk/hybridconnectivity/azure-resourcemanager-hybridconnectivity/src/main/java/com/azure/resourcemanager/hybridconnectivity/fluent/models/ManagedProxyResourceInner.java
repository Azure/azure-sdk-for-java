// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Managed Proxy. */
@Fluent
public final class ManagedProxyResourceInner {
    /*
     * The short lived proxy name.
     */
    @JsonProperty(value = "proxy", required = true)
    private String proxy;

    /*
     * The expiration time of short lived proxy name in unix epoch.
     */
    @JsonProperty(value = "expiresOn", required = true)
    private long expiresOn;

    /** Creates an instance of ManagedProxyResourceInner class. */
    public ManagedProxyResourceInner() {
    }

    /**
     * Get the proxy property: The short lived proxy name.
     *
     * @return the proxy value.
     */
    public String proxy() {
        return this.proxy;
    }

    /**
     * Set the proxy property: The short lived proxy name.
     *
     * @param proxy the proxy value to set.
     * @return the ManagedProxyResourceInner object itself.
     */
    public ManagedProxyResourceInner withProxy(String proxy) {
        this.proxy = proxy;
        return this;
    }

    /**
     * Get the expiresOn property: The expiration time of short lived proxy name in unix epoch.
     *
     * @return the expiresOn value.
     */
    public long expiresOn() {
        return this.expiresOn;
    }

    /**
     * Set the expiresOn property: The expiration time of short lived proxy name in unix epoch.
     *
     * @param expiresOn the expiresOn value to set.
     * @return the ManagedProxyResourceInner object itself.
     */
    public ManagedProxyResourceInner withExpiresOn(long expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (proxy() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property proxy in model ManagedProxyResourceInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedProxyResourceInner.class);
}
