// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.models.ProvisioningState;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceName;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Service configuration details. */
@Fluent
public final class ServiceConfigurationProperties {
    /*
     * Name of the service.
     */
    @JsonProperty(value = "serviceName", required = true)
    private ServiceName serviceName;

    /*
     * The resource Id of the connectivity endpoint (optional).
     */
    @JsonProperty(value = "resourceId")
    private String resourceId;

    /*
     * The port on which service is enabled.
     */
    @JsonProperty(value = "port")
    private Long port;

    /*
     * The resource provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of ServiceConfigurationProperties class. */
    public ServiceConfigurationProperties() {
    }

    /**
     * Get the serviceName property: Name of the service.
     *
     * @return the serviceName value.
     */
    public ServiceName serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Name of the service.
     *
     * @param serviceName the serviceName value to set.
     * @return the ServiceConfigurationProperties object itself.
     */
    public ServiceConfigurationProperties withServiceName(ServiceName serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the resourceId property: The resource Id of the connectivity endpoint (optional).
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource Id of the connectivity endpoint (optional).
     *
     * @param resourceId the resourceId value to set.
     * @return the ServiceConfigurationProperties object itself.
     */
    public ServiceConfigurationProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the port property: The port on which service is enabled.
     *
     * @return the port value.
     */
    public Long port() {
        return this.port;
    }

    /**
     * Set the port property: The port on which service is enabled.
     *
     * @param port the port value to set.
     * @return the ServiceConfigurationProperties object itself.
     */
    public ServiceConfigurationProperties withPort(Long port) {
        this.port = port;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property serviceName in model ServiceConfigurationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ServiceConfigurationProperties.class);
}
