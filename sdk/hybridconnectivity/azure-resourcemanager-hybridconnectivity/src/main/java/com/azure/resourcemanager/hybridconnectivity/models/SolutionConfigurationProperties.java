// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Solution configuration resource.
 */
@Fluent
public final class SolutionConfigurationProperties implements JsonSerializable<SolutionConfigurationProperties> {
    /*
     * The resource provisioning state.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * The type of the solution
     */
    private String solutionType;

    /*
     * Solution settings
     */
    private SolutionSettings solutionSettings;

    /*
     * The status of solution configurations
     */
    private SolutionConfigurationStatus status;

    /*
     * The detailed message of status details
     */
    private String statusDetails;

    /*
     * The last time resources were inventoried
     */
    private OffsetDateTime lastSyncTime;

    /**
     * Creates an instance of SolutionConfigurationProperties class.
     */
    public SolutionConfigurationProperties() {
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the solutionType property: The type of the solution.
     * 
     * @return the solutionType value.
     */
    public String solutionType() {
        return this.solutionType;
    }

    /**
     * Set the solutionType property: The type of the solution.
     * 
     * @param solutionType the solutionType value to set.
     * @return the SolutionConfigurationProperties object itself.
     */
    public SolutionConfigurationProperties withSolutionType(String solutionType) {
        this.solutionType = solutionType;
        return this;
    }

    /**
     * Get the solutionSettings property: Solution settings.
     * 
     * @return the solutionSettings value.
     */
    public SolutionSettings solutionSettings() {
        return this.solutionSettings;
    }

    /**
     * Set the solutionSettings property: Solution settings.
     * 
     * @param solutionSettings the solutionSettings value to set.
     * @return the SolutionConfigurationProperties object itself.
     */
    public SolutionConfigurationProperties withSolutionSettings(SolutionSettings solutionSettings) {
        this.solutionSettings = solutionSettings;
        return this;
    }

    /**
     * Get the status property: The status of solution configurations.
     * 
     * @return the status value.
     */
    public SolutionConfigurationStatus status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: The detailed message of status details.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the lastSyncTime property: The last time resources were inventoried.
     * 
     * @return the lastSyncTime value.
     */
    public OffsetDateTime lastSyncTime() {
        return this.lastSyncTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionType in model SolutionConfigurationProperties"));
        }
        if (solutionSettings() != null) {
            solutionSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionType", this.solutionType);
        jsonWriter.writeJsonField("solutionSettings", this.solutionSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionConfigurationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionConfigurationProperties.
     */
    public static SolutionConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionConfigurationProperties deserializedSolutionConfigurationProperties
                = new SolutionConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionType".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.solutionType = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("solutionSettings".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.solutionSettings = SolutionSettings.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.status
                        = SolutionConfigurationStatus.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.statusDetails = reader.getString();
                } else if ("lastSyncTime".equals(fieldName)) {
                    deserializedSolutionConfigurationProperties.lastSyncTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionConfigurationProperties;
        });
    }
}
