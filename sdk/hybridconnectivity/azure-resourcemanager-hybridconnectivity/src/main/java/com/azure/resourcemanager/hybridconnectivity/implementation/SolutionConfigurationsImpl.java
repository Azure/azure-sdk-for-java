// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.SolutionConfigurationsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner;
import com.azure.resourcemanager.hybridconnectivity.models.OperationStatusResult;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfiguration;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionConfigurations;

public final class SolutionConfigurationsImpl implements SolutionConfigurations {
    private static final ClientLogger LOGGER = new ClientLogger(SolutionConfigurationsImpl.class);

    private final SolutionConfigurationsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public SolutionConfigurationsImpl(SolutionConfigurationsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SolutionConfiguration> getWithResponse(String resourceUri, String solutionConfiguration,
        Context context) {
        Response<SolutionConfigurationInner> inner
            = this.serviceClient().getWithResponse(resourceUri, solutionConfiguration, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SolutionConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SolutionConfiguration get(String resourceUri, String solutionConfiguration) {
        SolutionConfigurationInner inner = this.serviceClient().get(resourceUri, solutionConfiguration);
        if (inner != null) {
            return new SolutionConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceUri, String solutionConfiguration,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, solutionConfiguration, context);
    }

    public void deleteByResourceGroup(String resourceUri, String solutionConfiguration) {
        this.serviceClient().delete(resourceUri, solutionConfiguration);
    }

    public PagedIterable<SolutionConfiguration> list(String resourceUri) {
        PagedIterable<SolutionConfigurationInner> inner = this.serviceClient().list(resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionConfiguration> list(String resourceUri, Context context) {
        PagedIterable<SolutionConfigurationInner> inner = this.serviceClient().list(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionConfigurationImpl(inner1, this.manager()));
    }

    public OperationStatusResult syncNow(String resourceUri, String solutionConfiguration) {
        OperationStatusResultInner inner = this.serviceClient().syncNow(resourceUri, solutionConfiguration);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult syncNow(String resourceUri, String solutionConfiguration, Context context) {
        OperationStatusResultInner inner = this.serviceClient().syncNow(resourceUri, solutionConfiguration, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SolutionConfiguration getById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String solutionConfiguration = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "solutionConfiguration");
        if (solutionConfiguration == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'solutionConfigurations'.", id)));
        }
        return this.getWithResponse(resourceUri, solutionConfiguration, Context.NONE).getValue();
    }

    public Response<SolutionConfiguration> getByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String solutionConfiguration = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "solutionConfiguration");
        if (solutionConfiguration == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'solutionConfigurations'.", id)));
        }
        return this.getWithResponse(resourceUri, solutionConfiguration, context);
    }

    public void deleteById(String id) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String solutionConfiguration = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "solutionConfiguration");
        if (solutionConfiguration == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'solutionConfigurations'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceUri, solutionConfiguration, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "resourceUri");
        if (resourceUri == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String solutionConfiguration = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}",
            "solutionConfiguration");
        if (solutionConfiguration == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'solutionConfigurations'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceUri, solutionConfiguration, context);
    }

    private SolutionConfigurationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public SolutionConfigurationImpl define(String name) {
        return new SolutionConfigurationImpl(name, this.manager());
    }
}
