// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionConfigurationInner;

/**
 * An instance of this class provides access to all the operations defined in SolutionConfigurationsClient.
 */
public interface SolutionConfigurationsClient {
    /**
     * Get a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionConfigurationInner> getWithResponse(String resourceUri, String solutionConfiguration,
        Context context);

    /**
     * Get a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SolutionConfiguration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionConfigurationInner get(String resourceUri, String solutionConfiguration);

    /**
     * Create a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionConfigurationInner> createOrUpdateWithResponse(String resourceUri, String solutionConfiguration,
        SolutionConfigurationInner resource, Context context);

    /**
     * Create a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionConfigurationInner createOrUpdate(String resourceUri, String solutionConfiguration,
        SolutionConfigurationInner resource);

    /**
     * Update a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionConfigurationInner> updateWithResponse(String resourceUri, String solutionConfiguration,
        SolutionConfigurationInner properties, Context context);

    /**
     * Update a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionConfigurationInner update(String resourceUri, String solutionConfiguration,
        SolutionConfigurationInner properties);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceUri, String solutionConfiguration, Context context);

    /**
     * Delete a SolutionConfiguration.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String solutionConfiguration);

    /**
     * List SolutionConfiguration resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionConfiguration list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionConfigurationInner> list(String resourceUri);

    /**
     * List SolutionConfiguration resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SolutionConfiguration list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SolutionConfigurationInner> list(String resourceUri, Context context);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginSyncNow(String resourceUri,
        String solutionConfiguration);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginSyncNow(String resourceUri,
        String solutionConfiguration, Context context);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner syncNow(String resourceUri, String solutionConfiguration);

    /**
     * Trigger immediate sync with source cloud.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param solutionConfiguration Represent Solution Configuration Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner syncNow(String resourceUri, String solutionConfiguration, Context context);
}
