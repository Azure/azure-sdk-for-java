// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.hybridconnectivity.models.ProvisioningState;
import com.azure.resourcemanager.hybridconnectivity.models.ServiceName;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The service configuration details associated with the target resource. */
@Fluent
public final class ServiceConfigurationResourceInner extends ProxyResource {
    /*
     * The service configuration properties.
     */
    @JsonProperty(value = "properties")
    private ServiceConfigurationProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ServiceConfigurationResourceInner class. */
    public ServiceConfigurationResourceInner() {
    }

    /**
     * Get the innerProperties property: The service configuration properties.
     *
     * @return the innerProperties value.
     */
    private ServiceConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the serviceName property: Name of the service.
     *
     * @return the serviceName value.
     */
    public ServiceName serviceName() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceName();
    }

    /**
     * Set the serviceName property: Name of the service.
     *
     * @param serviceName the serviceName value to set.
     * @return the ServiceConfigurationResourceInner object itself.
     */
    public ServiceConfigurationResourceInner withServiceName(ServiceName serviceName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceConfigurationProperties();
        }
        this.innerProperties().withServiceName(serviceName);
        return this;
    }

    /**
     * Get the resourceId property: The resource Id of the connectivity endpoint (optional).
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceId();
    }

    /**
     * Set the resourceId property: The resource Id of the connectivity endpoint (optional).
     *
     * @param resourceId the resourceId value to set.
     * @return the ServiceConfigurationResourceInner object itself.
     */
    public ServiceConfigurationResourceInner withResourceId(String resourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceConfigurationProperties();
        }
        this.innerProperties().withResourceId(resourceId);
        return this;
    }

    /**
     * Get the port property: The port on which service is enabled.
     *
     * @return the port value.
     */
    public Long port() {
        return this.innerProperties() == null ? null : this.innerProperties().port();
    }

    /**
     * Set the port property: The port on which service is enabled.
     *
     * @param port the port value to set.
     * @return the ServiceConfigurationResourceInner object itself.
     */
    public ServiceConfigurationResourceInner withPort(Long port) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceConfigurationProperties();
        }
        this.innerProperties().withPort(port);
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
