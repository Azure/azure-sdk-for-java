// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.EndpointsClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.EndpointAccessResourceInner;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.EndpointResourceInner;
import com.azure.resourcemanager.hybridconnectivity.models.EndpointAccessResource;
import com.azure.resourcemanager.hybridconnectivity.models.EndpointResource;
import com.azure.resourcemanager.hybridconnectivity.models.Endpoints;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class EndpointsImpl implements Endpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(EndpointsImpl.class);

    private final EndpointsClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public EndpointsImpl(
        EndpointsClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EndpointResource> list(String resourceUri) {
        PagedIterable<EndpointResourceInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EndpointResource> list(String resourceUri, Context context) {
        PagedIterable<EndpointResourceInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new EndpointResourceImpl(inner1, this.manager()));
    }

    public EndpointResource get(String resourceUri, String endpointName) {
        EndpointResourceInner inner = this.serviceClient().get(resourceUri, endpointName);
        if (inner != null) {
            return new EndpointResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EndpointResource> getWithResponse(String resourceUri, String endpointName, Context context) {
        Response<EndpointResourceInner> inner =
            this.serviceClient().getWithResponse(resourceUri, endpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EndpointResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String endpointName) {
        this.serviceClient().delete(resourceUri, endpointName);
    }

    public Response<Void> deleteWithResponse(String resourceUri, String endpointName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, endpointName, context);
    }

    public EndpointAccessResource listCredentials(String resourceUri, String endpointName) {
        EndpointAccessResourceInner inner = this.serviceClient().listCredentials(resourceUri, endpointName);
        if (inner != null) {
            return new EndpointAccessResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<EndpointAccessResource> listCredentialsWithResponse(
        String resourceUri, String endpointName, Long expiresin, Context context) {
        Response<EndpointAccessResourceInner> inner =
            this.serviceClient().listCredentialsWithResponse(resourceUri, endpointName, expiresin, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new EndpointAccessResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EndpointResource getById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "endpointName");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, Context.NONE).getValue();
    }

    public Response<EndpointResource> getByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "endpointName");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.getWithResponse(resourceUri, endpointName, context);
    }

    public void deleteById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "endpointName");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        this.deleteWithResponse(resourceUri, endpointName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String endpointName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}",
                    "endpointName");
        if (endpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'endpoints'.", id)));
        }
        return this.deleteWithResponse(resourceUri, endpointName, context);
    }

    private EndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }

    public EndpointResourceImpl define(String name) {
        return new EndpointResourceImpl(name, this.manager());
    }
}
