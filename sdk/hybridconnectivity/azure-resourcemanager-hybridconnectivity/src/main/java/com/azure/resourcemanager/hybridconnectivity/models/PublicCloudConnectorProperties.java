// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of public cloud connectors.
 */
@Fluent
public final class PublicCloudConnectorProperties implements JsonSerializable<PublicCloudConnectorProperties> {
    /*
     * Cloud profile for AWS.
     */
    private AwsCloudProfile awsCloudProfile;

    /*
     * Host cloud the public cloud connector.
     */
    private HostType hostType;

    /*
     * The resource provisioning state.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Connector primary identifier.
     */
    private String connectorPrimaryIdentifier;

    /**
     * Creates an instance of PublicCloudConnectorProperties class.
     */
    public PublicCloudConnectorProperties() {
    }

    /**
     * Get the awsCloudProfile property: Cloud profile for AWS.
     * 
     * @return the awsCloudProfile value.
     */
    public AwsCloudProfile awsCloudProfile() {
        return this.awsCloudProfile;
    }

    /**
     * Set the awsCloudProfile property: Cloud profile for AWS.
     * 
     * @param awsCloudProfile the awsCloudProfile value to set.
     * @return the PublicCloudConnectorProperties object itself.
     */
    public PublicCloudConnectorProperties withAwsCloudProfile(AwsCloudProfile awsCloudProfile) {
        this.awsCloudProfile = awsCloudProfile;
        return this;
    }

    /**
     * Get the hostType property: Host cloud the public cloud connector.
     * 
     * @return the hostType value.
     */
    public HostType hostType() {
        return this.hostType;
    }

    /**
     * Set the hostType property: Host cloud the public cloud connector.
     * 
     * @param hostType the hostType value to set.
     * @return the PublicCloudConnectorProperties object itself.
     */
    public PublicCloudConnectorProperties withHostType(HostType hostType) {
        this.hostType = hostType;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the connectorPrimaryIdentifier property: Connector primary identifier.
     * 
     * @return the connectorPrimaryIdentifier value.
     */
    public String connectorPrimaryIdentifier() {
        return this.connectorPrimaryIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (awsCloudProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property awsCloudProfile in model PublicCloudConnectorProperties"));
        } else {
            awsCloudProfile().validate();
        }
        if (hostType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hostType in model PublicCloudConnectorProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PublicCloudConnectorProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("awsCloudProfile", this.awsCloudProfile);
        jsonWriter.writeStringField("hostType", this.hostType == null ? null : this.hostType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicCloudConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicCloudConnectorProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PublicCloudConnectorProperties.
     */
    public static PublicCloudConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicCloudConnectorProperties deserializedPublicCloudConnectorProperties
                = new PublicCloudConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("awsCloudProfile".equals(fieldName)) {
                    deserializedPublicCloudConnectorProperties.awsCloudProfile = AwsCloudProfile.fromJson(reader);
                } else if ("hostType".equals(fieldName)) {
                    deserializedPublicCloudConnectorProperties.hostType = HostType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPublicCloudConnectorProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("connectorPrimaryIdentifier".equals(fieldName)) {
                    deserializedPublicCloudConnectorProperties.connectorPrimaryIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicCloudConnectorProperties;
        });
    }
}
