// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridconnectivity.fluent.SolutionTypesClient;
import com.azure.resourcemanager.hybridconnectivity.fluent.models.SolutionTypeResourceInner;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypeResource;
import com.azure.resourcemanager.hybridconnectivity.models.SolutionTypes;

public final class SolutionTypesImpl implements SolutionTypes {
    private static final ClientLogger LOGGER = new ClientLogger(SolutionTypesImpl.class);

    private final SolutionTypesClient innerClient;

    private final com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager;

    public SolutionTypesImpl(SolutionTypesClient innerClient,
        com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SolutionTypeResource> getByResourceGroupWithResponse(String resourceGroupName, String solutionType,
        Context context) {
        Response<SolutionTypeResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, solutionType, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SolutionTypeResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SolutionTypeResource getByResourceGroup(String resourceGroupName, String solutionType) {
        SolutionTypeResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, solutionType);
        if (inner != null) {
            return new SolutionTypeResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SolutionTypeResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SolutionTypeResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTypeResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTypeResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SolutionTypeResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTypeResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTypeResource> list() {
        PagedIterable<SolutionTypeResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTypeResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SolutionTypeResource> list(Context context) {
        PagedIterable<SolutionTypeResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SolutionTypeResourceImpl(inner1, this.manager()));
    }

    private SolutionTypesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridconnectivity.HybridConnectivityManager manager() {
        return this.serviceManager;
    }
}
