// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridconnectivity.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure relay hybrid connection access properties.
 */
@Fluent
public final class RelayNamespaceAccessProperties implements JsonSerializable<RelayNamespaceAccessProperties> {
    /*
     * The namespace name.
     */
    private String namespaceName;

    /*
     * The suffix domain name of relay namespace.
     */
    private String namespaceNameSuffix;

    /*
     * Azure Relay hybrid connection name for the resource.
     */
    private String hybridConnectionName;

    /*
     * Access key for hybrid connection.
     */
    private String accessKey;

    /*
     * The expiration of access key in unix time.
     */
    private Long expiresOn;

    /*
     * The token to access the enabled service.
     */
    private String serviceConfigurationToken;

    /**
     * Creates an instance of RelayNamespaceAccessProperties class.
     */
    public RelayNamespaceAccessProperties() {
    }

    /**
     * Get the namespaceName property: The namespace name.
     * 
     * @return the namespaceName value.
     */
    public String namespaceName() {
        return this.namespaceName;
    }

    /**
     * Set the namespaceName property: The namespace name.
     * 
     * @param namespaceName the namespaceName value to set.
     * @return the RelayNamespaceAccessProperties object itself.
     */
    public RelayNamespaceAccessProperties withNamespaceName(String namespaceName) {
        this.namespaceName = namespaceName;
        return this;
    }

    /**
     * Get the namespaceNameSuffix property: The suffix domain name of relay namespace.
     * 
     * @return the namespaceNameSuffix value.
     */
    public String namespaceNameSuffix() {
        return this.namespaceNameSuffix;
    }

    /**
     * Set the namespaceNameSuffix property: The suffix domain name of relay namespace.
     * 
     * @param namespaceNameSuffix the namespaceNameSuffix value to set.
     * @return the RelayNamespaceAccessProperties object itself.
     */
    public RelayNamespaceAccessProperties withNamespaceNameSuffix(String namespaceNameSuffix) {
        this.namespaceNameSuffix = namespaceNameSuffix;
        return this;
    }

    /**
     * Get the hybridConnectionName property: Azure Relay hybrid connection name for the resource.
     * 
     * @return the hybridConnectionName value.
     */
    public String hybridConnectionName() {
        return this.hybridConnectionName;
    }

    /**
     * Set the hybridConnectionName property: Azure Relay hybrid connection name for the resource.
     * 
     * @param hybridConnectionName the hybridConnectionName value to set.
     * @return the RelayNamespaceAccessProperties object itself.
     */
    public RelayNamespaceAccessProperties withHybridConnectionName(String hybridConnectionName) {
        this.hybridConnectionName = hybridConnectionName;
        return this;
    }

    /**
     * Get the accessKey property: Access key for hybrid connection.
     * 
     * @return the accessKey value.
     */
    public String accessKey() {
        return this.accessKey;
    }

    /**
     * Get the expiresOn property: The expiration of access key in unix time.
     * 
     * @return the expiresOn value.
     */
    public Long expiresOn() {
        return this.expiresOn;
    }

    /**
     * Set the expiresOn property: The expiration of access key in unix time.
     * 
     * @param expiresOn the expiresOn value to set.
     * @return the RelayNamespaceAccessProperties object itself.
     */
    public RelayNamespaceAccessProperties withExpiresOn(Long expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }

    /**
     * Get the serviceConfigurationToken property: The token to access the enabled service.
     * 
     * @return the serviceConfigurationToken value.
     */
    public String serviceConfigurationToken() {
        return this.serviceConfigurationToken;
    }

    /**
     * Set the serviceConfigurationToken property: The token to access the enabled service.
     * 
     * @param serviceConfigurationToken the serviceConfigurationToken value to set.
     * @return the RelayNamespaceAccessProperties object itself.
     */
    public RelayNamespaceAccessProperties withServiceConfigurationToken(String serviceConfigurationToken) {
        this.serviceConfigurationToken = serviceConfigurationToken;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (namespaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property namespaceName in model RelayNamespaceAccessProperties"));
        }
        if (namespaceNameSuffix() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property namespaceNameSuffix in model RelayNamespaceAccessProperties"));
        }
        if (hybridConnectionName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hybridConnectionName in model RelayNamespaceAccessProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelayNamespaceAccessProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespaceName", this.namespaceName);
        jsonWriter.writeStringField("namespaceNameSuffix", this.namespaceNameSuffix);
        jsonWriter.writeStringField("hybridConnectionName", this.hybridConnectionName);
        jsonWriter.writeNumberField("expiresOn", this.expiresOn);
        jsonWriter.writeStringField("serviceConfigurationToken", this.serviceConfigurationToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelayNamespaceAccessProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelayNamespaceAccessProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelayNamespaceAccessProperties.
     */
    public static RelayNamespaceAccessProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelayNamespaceAccessProperties deserializedRelayNamespaceAccessProperties
                = new RelayNamespaceAccessProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespaceName".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.namespaceName = reader.getString();
                } else if ("namespaceNameSuffix".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.namespaceNameSuffix = reader.getString();
                } else if ("hybridConnectionName".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.hybridConnectionName = reader.getString();
                } else if ("accessKey".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.accessKey = reader.getString();
                } else if ("expiresOn".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.expiresOn = reader.getNullable(JsonReader::getLong);
                } else if ("serviceConfigurationToken".equals(fieldName)) {
                    deserializedRelayNamespaceAccessProperties.serviceConfigurationToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelayNamespaceAccessProperties;
        });
    }
}
