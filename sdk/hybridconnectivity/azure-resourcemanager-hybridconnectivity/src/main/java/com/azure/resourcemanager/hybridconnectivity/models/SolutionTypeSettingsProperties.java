// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.hybridconnectivity.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represent Solution settings properties description array.
 */
@Immutable
public final class SolutionTypeSettingsProperties implements JsonSerializable<SolutionTypeSettingsProperties> {
    /*
     * The name of the solution setting property.
     */
    private String name;

    /*
     * The UI friendly name of the solution setting property.
     */
    private String displayName;

    /*
     * Type of the solution setting property, represented as a string.
     */
    private String type;

    /*
     * Description of solution setting property.
     */
    private String description;

    /*
     * Array of allowed values for this solution settings property.
     */
    private List<String> allowedValues;

    /*
     * Default value for this solution settings property.
     */
    private String defaultValue;

    /**
     * Creates an instance of SolutionTypeSettingsProperties class.
     */
    private SolutionTypeSettingsProperties() {
    }

    /**
     * Get the name property: The name of the solution setting property.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the displayName property: The UI friendly name of the solution setting property.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the type property: Type of the solution setting property, represented as a string.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the description property: Description of solution setting property.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the allowedValues property: Array of allowed values for this solution settings property.
     * 
     * @return the allowedValues value.
     */
    public List<String> allowedValues() {
        return this.allowedValues;
    }

    /**
     * Get the defaultValue property: Default value for this solution settings property.
     * 
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model SolutionTypeSettingsProperties"));
        }
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model SolutionTypeSettingsProperties"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model SolutionTypeSettingsProperties"));
        }
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model SolutionTypeSettingsProperties"));
        }
        if (allowedValues() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property allowedValues in model SolutionTypeSettingsProperties"));
        }
        if (defaultValue() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property defaultValue in model SolutionTypeSettingsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionTypeSettingsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("allowedValues", this.allowedValues,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("defaultValue", this.defaultValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionTypeSettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionTypeSettingsProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionTypeSettingsProperties.
     */
    public static SolutionTypeSettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionTypeSettingsProperties deserializedSolutionTypeSettingsProperties
                = new SolutionTypeSettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSolutionTypeSettingsProperties.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSolutionTypeSettingsProperties.displayName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSolutionTypeSettingsProperties.type = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSolutionTypeSettingsProperties.description = reader.getString();
                } else if ("allowedValues".equals(fieldName)) {
                    List<String> allowedValues = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionTypeSettingsProperties.allowedValues = allowedValues;
                } else if ("defaultValue".equals(fieldName)) {
                    deserializedSolutionTypeSettingsProperties.defaultValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionTypeSettingsProperties;
        });
    }
}
