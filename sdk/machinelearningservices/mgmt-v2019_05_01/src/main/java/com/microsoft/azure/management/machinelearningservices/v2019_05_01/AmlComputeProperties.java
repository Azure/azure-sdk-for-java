/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningservices.v2019_05_01;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AML Compute properties.
 */
public class AmlComputeProperties {
    /**
     * Virtual Machine Size.
     */
    @JsonProperty(value = "vmSize")
    private String vmSize;

    /**
     * Virtual Machine priority. Possible values include: 'Dedicated',
     * 'LowPriority'.
     */
    @JsonProperty(value = "vmPriority")
    private VmPriority vmPriority;

    /**
     * Scale settings for AML Compute.
     */
    @JsonProperty(value = "scaleSettings")
    private ScaleSettings scaleSettings;

    /**
     * User account credentials.
     * Credentials for an administrator user account that will be created on
     * each compute node.
     */
    @JsonProperty(value = "userAccountCredentials")
    private UserAccountCredentials userAccountCredentials;

    /**
     * Subnet.
     * Virtual network subnet resource ID the compute nodes belong to.
     */
    @JsonProperty(value = "subnet")
    private ResourceId subnet;

    /**
     * Allocation state.
     * Allocation state of the compute. Possible values are: steady - Indicates
     * that the compute is not resizing. There are no changes to the number of
     * compute nodes in the compute in progress. A compute enters this state
     * when it is created and when no operations are being performed on the
     * compute to change the number of compute nodes. resizing - Indicates that
     * the compute is resizing; that is, compute nodes are being added to or
     * removed from the compute. Possible values include: 'Steady', 'Resizing'.
     */
    @JsonProperty(value = "allocationState", access = JsonProperty.Access.WRITE_ONLY)
    private AllocationState allocationState;

    /**
     * Allocation state transition time.
     * The time at which the compute entered its current allocation state.
     */
    @JsonProperty(value = "allocationStateTransitionTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime allocationStateTransitionTime;

    /**
     * Errors.
     * Collection of errors encountered by various compute nodes during node
     * setup.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private List<MachineLearningServiceError> errors;

    /**
     * Current node count.
     * The number of compute nodes currently assigned to the compute.
     */
    @JsonProperty(value = "currentNodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer currentNodeCount;

    /**
     * Target node count.
     * The target number of compute nodes for the compute. If the
     * allocationState is resizing, this property denotes the target node count
     * for the ongoing resize operation. If the allocationState is steady, this
     * property denotes the target node count for the previous resize
     * operation.
     */
    @JsonProperty(value = "targetNodeCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer targetNodeCount;

    /**
     * Node state counts.
     * Counts of various node states on the compute.
     */
    @JsonProperty(value = "nodeStateCounts", access = JsonProperty.Access.WRITE_ONLY)
    private NodeStateCounts nodeStateCounts;

    /**
     * Get virtual Machine Size.
     *
     * @return the vmSize value
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set virtual Machine Size.
     *
     * @param vmSize the vmSize value to set
     * @return the AmlComputeProperties object itself.
     */
    public AmlComputeProperties withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get virtual Machine priority. Possible values include: 'Dedicated', 'LowPriority'.
     *
     * @return the vmPriority value
     */
    public VmPriority vmPriority() {
        return this.vmPriority;
    }

    /**
     * Set virtual Machine priority. Possible values include: 'Dedicated', 'LowPriority'.
     *
     * @param vmPriority the vmPriority value to set
     * @return the AmlComputeProperties object itself.
     */
    public AmlComputeProperties withVmPriority(VmPriority vmPriority) {
        this.vmPriority = vmPriority;
        return this;
    }

    /**
     * Get scale settings for AML Compute.
     *
     * @return the scaleSettings value
     */
    public ScaleSettings scaleSettings() {
        return this.scaleSettings;
    }

    /**
     * Set scale settings for AML Compute.
     *
     * @param scaleSettings the scaleSettings value to set
     * @return the AmlComputeProperties object itself.
     */
    public AmlComputeProperties withScaleSettings(ScaleSettings scaleSettings) {
        this.scaleSettings = scaleSettings;
        return this;
    }

    /**
     * Get credentials for an administrator user account that will be created on each compute node.
     *
     * @return the userAccountCredentials value
     */
    public UserAccountCredentials userAccountCredentials() {
        return this.userAccountCredentials;
    }

    /**
     * Set credentials for an administrator user account that will be created on each compute node.
     *
     * @param userAccountCredentials the userAccountCredentials value to set
     * @return the AmlComputeProperties object itself.
     */
    public AmlComputeProperties withUserAccountCredentials(UserAccountCredentials userAccountCredentials) {
        this.userAccountCredentials = userAccountCredentials;
        return this;
    }

    /**
     * Get virtual network subnet resource ID the compute nodes belong to.
     *
     * @return the subnet value
     */
    public ResourceId subnet() {
        return this.subnet;
    }

    /**
     * Set virtual network subnet resource ID the compute nodes belong to.
     *
     * @param subnet the subnet value to set
     * @return the AmlComputeProperties object itself.
     */
    public AmlComputeProperties withSubnet(ResourceId subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute. Possible values include: 'Steady', 'Resizing'.
     *
     * @return the allocationState value
     */
    public AllocationState allocationState() {
        return this.allocationState;
    }

    /**
     * Get the time at which the compute entered its current allocation state.
     *
     * @return the allocationStateTransitionTime value
     */
    public DateTime allocationStateTransitionTime() {
        return this.allocationStateTransitionTime;
    }

    /**
     * Get collection of errors encountered by various compute nodes during node setup.
     *
     * @return the errors value
     */
    public List<MachineLearningServiceError> errors() {
        return this.errors;
    }

    /**
     * Get the number of compute nodes currently assigned to the compute.
     *
     * @return the currentNodeCount value
     */
    public Integer currentNodeCount() {
        return this.currentNodeCount;
    }

    /**
     * Get the target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     *
     * @return the targetNodeCount value
     */
    public Integer targetNodeCount() {
        return this.targetNodeCount;
    }

    /**
     * Get counts of various node states on the compute.
     *
     * @return the nodeStateCounts value
     */
    public NodeStateCounts nodeStateCounts() {
        return this.nodeStateCounts;
    }

}
