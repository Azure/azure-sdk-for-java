/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.machinelearningservices.v2019_05_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ClusterUpdateParameters;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputeCreateOrUpdateHeaders;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputeDeleteHeaders;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningServiceErrorException;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.ScaleSettings;
import com.microsoft.azure.management.machinelearningservices.v2019_05_01.UnderlyingResourceAction;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MachineLearningComputes.
 */
public class MachineLearningComputesInner {
    /** The Retrofit service to perform REST calls. */
    private MachineLearningComputesService service;
    /** The service client containing this operation class. */
    private AzureMachineLearningWorkspacesImpl client;

    /**
     * Initializes an instance of MachineLearningComputesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MachineLearningComputesInner(Retrofit retrofit, AzureMachineLearningWorkspacesImpl client) {
        this.service = retrofit.create(MachineLearningComputesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MachineLearningComputes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MachineLearningComputesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes listByWorkspace" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes")
        Observable<Response<ResponseBody>> listByWorkspace(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Query("api-version") String apiVersion, @Query("$skiptoken") String skiptoken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Body ComputeResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Body ComputeResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ClusterUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ClusterUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Query("underlyingResourceAction") UnderlyingResourceAction underlyingResourceAction1, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Query("underlyingResourceAction") UnderlyingResourceAction underlyingResourceAction1, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes listNodes" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}/listNodes")
        Observable<Response<ResponseBody>> listNodes(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes listKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}/listKeys")
        Observable<Response<ResponseBody>> listKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("workspaceName") String workspaceName, @Path("computeName") String computeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.machinelearningservices.v2019_05_01.MachineLearningComputes listByWorkspaceNext" })
        @GET
        Observable<Response<ResponseBody>> listByWorkspaceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComputeResourceInner&gt; object if successful.
     */
    public PagedList<ComputeResourceInner> listByWorkspace(final String resourceGroupName, final String workspaceName) {
        ServiceResponse<Page<ComputeResourceInner>> response = listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName).toBlocking().single();
        return new PagedList<ComputeResourceInner>(response.body()) {
            @Override
            public Page<ComputeResourceInner> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComputeResourceInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName, final ListOperationCallback<ComputeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName),
            new Func1<String, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<Page<ComputeResourceInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName)
            .map(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Page<ComputeResourceInner>>() {
                @Override
                public Page<ComputeResourceInner> call(ServiceResponse<Page<ComputeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceWithServiceResponseAsync(final String resourceGroupName, final String workspaceName) {
        return listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName)
            .concatMap(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(ServiceResponse<Page<ComputeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComputeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceSinglePageAsync(final String resourceGroupName, final String workspaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String skiptoken = null;
        return service.listByWorkspace(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ComputeResourceInner>> result = listByWorkspaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComputeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComputeResourceInner&gt; object if successful.
     */
    public PagedList<ComputeResourceInner> listByWorkspace(final String resourceGroupName, final String workspaceName, final String skiptoken) {
        ServiceResponse<Page<ComputeResourceInner>> response = listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName, skiptoken).toBlocking().single();
        return new PagedList<ComputeResourceInner>(response.body()) {
            @Override
            public Page<ComputeResourceInner> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param skiptoken Continuation token for pagination.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComputeResourceInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName, final String skiptoken, final ListOperationCallback<ComputeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName, skiptoken),
            new Func1<String, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<Page<ComputeResourceInner>> listByWorkspaceAsync(final String resourceGroupName, final String workspaceName, final String skiptoken) {
        return listByWorkspaceWithServiceResponseAsync(resourceGroupName, workspaceName, skiptoken)
            .map(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Page<ComputeResourceInner>>() {
                @Override
                public Page<ComputeResourceInner> call(ServiceResponse<Page<ComputeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceWithServiceResponseAsync(final String resourceGroupName, final String workspaceName, final String skiptoken) {
        return listByWorkspaceSinglePageAsync(resourceGroupName, workspaceName, skiptoken)
            .concatMap(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(ServiceResponse<Page<ComputeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
    ServiceResponse<PageImpl1<ComputeResourceInner>> * @param resourceGroupName Name of the resource group in which workspace is located.
    ServiceResponse<PageImpl1<ComputeResourceInner>> * @param workspaceName Name of Azure Machine Learning workspace.
    ServiceResponse<PageImpl1<ComputeResourceInner>> * @param skiptoken Continuation token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComputeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceSinglePageAsync(final String resourceGroupName, final String workspaceName, final String skiptoken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByWorkspace(this.client.subscriptionId(), resourceGroupName, workspaceName, this.client.apiVersion(), skiptoken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ComputeResourceInner>> result = listByWorkspaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComputeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ComputeResourceInner>> listByWorkspaceDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<ComputeResourceInner>, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<ComputeResourceInner>>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

    /**
     * Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use 'keys' nested resource to get them.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner get(String resourceGroupName, String workspaceName, String computeName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).toBlocking().single().body();
    }

    /**
     * Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use 'keys' nested resource to get them.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> getAsync(String resourceGroupName, String workspaceName, String computeName, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, workspaceName, computeName), serviceCallback);
    }

    /**
     * Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use 'keys' nested resource to get them.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ComputeResourceInner> getAsync(String resourceGroupName, String workspaceName, String computeName) {
        return getWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).map(new Func1<ServiceResponse<ComputeResourceInner>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponse<ComputeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use 'keys' nested resource to get them.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ServiceResponse<ComputeResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComputeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ComputeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComputeResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ComputeResourceInner> getDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ComputeResourceInner, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ComputeResourceInner>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner createOrUpdate(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters), serviceCallback);
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ComputeResourceInner> createOrUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters).map(new Func1<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<ComputeResourceInner>() { }.getType(), MachineLearningComputeCreateOrUpdateHeaders.class);
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner beginCreateOrUpdate(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters), serviceCallback);
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ComputeResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, parameters).map(new Func1<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param parameters Payload with Machine Learning compute definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, ComputeResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ComputeResourceInner, MachineLearningComputeCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ComputeResourceInner, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ComputeResourceInner>() { }.getType())
                .register(201, new TypeToken<ComputeResourceInner>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .buildWithHeaders(response, MachineLearningComputeCreateOrUpdateHeaders.class);
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner update(String resourceGroupName, String workspaceName, String computeName) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).toBlocking().last().body();
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> updateAsync(String resourceGroupName, String workspaceName, String computeName, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName), serviceCallback);
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ComputeResourceInner> updateAsync(String resourceGroupName, String workspaceName, String computeName) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).map(new Func1<ServiceResponse<ComputeResourceInner>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponse<ComputeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ComputeResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ScaleSettings scaleSettings = null;
        ClusterUpdateParameters parameters = new ClusterUpdateParameters();
        parameters.withScaleSettings(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ComputeResourceInner>() { }.getType());
    }
    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner update(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings).toBlocking().last().body();
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> updateAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings), serviceCallback);
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ComputeResourceInner> updateAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        return updateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings).map(new Func1<ServiceResponse<ComputeResourceInner>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponse<ComputeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ComputeResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(scaleSettings);
        ClusterUpdateParameters parameters = new ClusterUpdateParameters();
        parameters.withScaleSettings(scaleSettings);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ComputeResourceInner>() { }.getType());
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner beginUpdate(String resourceGroupName, String workspaceName, String computeName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).toBlocking().single().body();
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> beginUpdateAsync(String resourceGroupName, String workspaceName, String computeName, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName), serviceCallback);
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ComputeResourceInner> beginUpdateAsync(String resourceGroupName, String workspaceName, String computeName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).map(new Func1<ServiceResponse<ComputeResourceInner>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponse<ComputeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ServiceResponse<ComputeResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final ScaleSettings scaleSettings = null;
        ClusterUpdateParameters parameters = new ClusterUpdateParameters();
        parameters.withScaleSettings(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComputeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ComputeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComputeResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeResourceInner object if successful.
     */
    public ComputeResourceInner beginUpdate(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings).toBlocking().single().body();
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeResourceInner> beginUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings, final ServiceCallback<ComputeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings), serviceCallback);
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ComputeResourceInner> beginUpdateAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, scaleSettings).map(new Func1<ServiceResponse<ComputeResourceInner>, ComputeResourceInner>() {
            @Override
            public ComputeResourceInner call(ServiceResponse<ComputeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates properties of a compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param scaleSettings Scale settings. Desired scale settings for the amlCompute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeResourceInner object
     */
    public Observable<ServiceResponse<ComputeResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, ScaleSettings scaleSettings) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(scaleSettings);
        ClusterUpdateParameters parameters = new ClusterUpdateParameters();
        parameters.withScaleSettings(scaleSettings);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComputeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ComputeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComputeResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ComputeResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ComputeResourceInner, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ComputeResourceInner>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        deleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction).toBlocking().last().body();
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction), serviceCallback);
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        return deleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction).map(new Func1<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (underlyingResourceAction == null) {
            throw new IllegalArgumentException("Parameter underlyingResourceAction is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), underlyingResourceAction, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), MachineLearningComputeDeleteHeaders.class);
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction).toBlocking().single().body();
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction), serviceCallback);
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, workspaceName, computeName, underlyingResourceAction).map(new Func1<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes specified Machine Learning compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param underlyingResourceAction Delete the underlying compute if 'Delete', or detach the underlying compute from workspace if 'Detach'. Possible values include: 'Delete', 'Detach'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName, UnderlyingResourceAction underlyingResourceAction) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (underlyingResourceAction == null) {
            throw new IllegalArgumentException("Parameter underlyingResourceAction is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), underlyingResourceAction, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, MachineLearningComputeDeleteHeaders> beginDeleteDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .buildWithHeaders(response, MachineLearningComputeDeleteHeaders.class);
    }

    /**
     * Get the details (e.g IP address, port etc) of all the compute nodes in the compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AmlComputeNodesInformationInner object if successful.
     */
    public AmlComputeNodesInformationInner listNodes(String resourceGroupName, String workspaceName, String computeName) {
        return listNodesWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).toBlocking().single().body();
    }

    /**
     * Get the details (e.g IP address, port etc) of all the compute nodes in the compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AmlComputeNodesInformationInner> listNodesAsync(String resourceGroupName, String workspaceName, String computeName, final ServiceCallback<AmlComputeNodesInformationInner> serviceCallback) {
        return ServiceFuture.fromResponse(listNodesWithServiceResponseAsync(resourceGroupName, workspaceName, computeName), serviceCallback);
    }

    /**
     * Get the details (e.g IP address, port etc) of all the compute nodes in the compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AmlComputeNodesInformationInner object
     */
    public Observable<AmlComputeNodesInformationInner> listNodesAsync(String resourceGroupName, String workspaceName, String computeName) {
        return listNodesWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).map(new Func1<ServiceResponse<AmlComputeNodesInformationInner>, AmlComputeNodesInformationInner>() {
            @Override
            public AmlComputeNodesInformationInner call(ServiceResponse<AmlComputeNodesInformationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the details (e.g IP address, port etc) of all the compute nodes in the compute.
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AmlComputeNodesInformationInner object
     */
    public Observable<ServiceResponse<AmlComputeNodesInformationInner>> listNodesWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listNodes(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AmlComputeNodesInformationInner>>>() {
                @Override
                public Observable<ServiceResponse<AmlComputeNodesInformationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AmlComputeNodesInformationInner> clientResponse = listNodesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AmlComputeNodesInformationInner> listNodesDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AmlComputeNodesInformationInner, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AmlComputeNodesInformationInner>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

    /**
     * Gets secrets related to Machine Learning compute (storage keys, service credentials, etc).
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ComputeSecretsInner object if successful.
     */
    public ComputeSecretsInner listKeys(String resourceGroupName, String workspaceName, String computeName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).toBlocking().single().body();
    }

    /**
     * Gets secrets related to Machine Learning compute (storage keys, service credentials, etc).
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ComputeSecretsInner> listKeysAsync(String resourceGroupName, String workspaceName, String computeName, final ServiceCallback<ComputeSecretsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listKeysWithServiceResponseAsync(resourceGroupName, workspaceName, computeName), serviceCallback);
    }

    /**
     * Gets secrets related to Machine Learning compute (storage keys, service credentials, etc).
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeSecretsInner object
     */
    public Observable<ComputeSecretsInner> listKeysAsync(String resourceGroupName, String workspaceName, String computeName) {
        return listKeysWithServiceResponseAsync(resourceGroupName, workspaceName, computeName).map(new Func1<ServiceResponse<ComputeSecretsInner>, ComputeSecretsInner>() {
            @Override
            public ComputeSecretsInner call(ServiceResponse<ComputeSecretsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets secrets related to Machine Learning compute (storage keys, service credentials, etc).
     *
     * @param resourceGroupName Name of the resource group in which workspace is located.
     * @param workspaceName Name of Azure Machine Learning workspace.
     * @param computeName Name of the Azure Machine Learning compute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ComputeSecretsInner object
     */
    public Observable<ServiceResponse<ComputeSecretsInner>> listKeysWithServiceResponseAsync(String resourceGroupName, String workspaceName, String computeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (workspaceName == null) {
            throw new IllegalArgumentException("Parameter workspaceName is required and cannot be null.");
        }
        if (computeName == null) {
            throw new IllegalArgumentException("Parameter computeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeys(this.client.subscriptionId(), resourceGroupName, workspaceName, computeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ComputeSecretsInner>>>() {
                @Override
                public Observable<ServiceResponse<ComputeSecretsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ComputeSecretsInner> clientResponse = listKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ComputeSecretsInner> listKeysDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ComputeSecretsInner, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ComputeSecretsInner>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MachineLearningServiceErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ComputeResourceInner&gt; object if successful.
     */
    public PagedList<ComputeResourceInner> listByWorkspaceNext(final String nextPageLink) {
        ServiceResponse<Page<ComputeResourceInner>> response = listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ComputeResourceInner>(response.body()) {
            @Override
            public Page<ComputeResourceInner> nextPage(String nextPageLink) {
                return listByWorkspaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ComputeResourceInner>> listByWorkspaceNextAsync(final String nextPageLink, final ServiceFuture<List<ComputeResourceInner>> serviceFuture, final ListOperationCallback<ComputeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByWorkspaceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(String nextPageLink) {
                    return listByWorkspaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<Page<ComputeResourceInner>> listByWorkspaceNextAsync(final String nextPageLink) {
        return listByWorkspaceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Page<ComputeResourceInner>>() {
                @Override
                public Page<ComputeResourceInner> call(ServiceResponse<Page<ComputeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ComputeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByWorkspaceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ComputeResourceInner>>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(ServiceResponse<Page<ComputeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByWorkspaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets computes in specified workspace.
     *
    ServiceResponse<PageImpl1<ComputeResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ComputeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ComputeResourceInner>>> listByWorkspaceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByWorkspaceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ComputeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ComputeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ComputeResourceInner>> result = listByWorkspaceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ComputeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ComputeResourceInner>> listByWorkspaceNextDelegate(Response<ResponseBody> response) throws MachineLearningServiceErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<ComputeResourceInner>, MachineLearningServiceErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<ComputeResourceInner>>() { }.getType())
                .registerError(MachineLearningServiceErrorException.class)
                .build(response);
    }

}
