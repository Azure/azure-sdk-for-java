// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.machinelearningservices;

import com.azure.resourcemanager.machinelearningservices.models.EncryptionProperty;
import com.azure.resourcemanager.machinelearningservices.models.EncryptionStatus;
import com.azure.resourcemanager.machinelearningservices.models.Identity;
import com.azure.resourcemanager.machinelearningservices.models.IdentityForCmk;
import com.azure.resourcemanager.machinelearningservices.models.KeyVaultProperties;
import com.azure.resourcemanager.machinelearningservices.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.machinelearningservices.models.ResourceIdentityType;
import com.azure.resourcemanager.machinelearningservices.models.SharedPrivateLinkResource;
import java.util.Arrays;

public final class WorkspacesCreateOrUpdateSamples {
    public static void createWorkspace(
        com.azure.resourcemanager.machinelearningservices.MachineLearningServicesManager
            machineLearningServicesManager) {
        machineLearningServicesManager
            .workspaces()
            .define("testworkspace")
            .withRegion("eastus2euap")
            .withExistingResourceGroup("workspace-1234")
            .withDescription("test description")
            .withFriendlyName("HelloName")
            .withKeyVault(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers"
                    + "/Microsoft.KeyVault/vaults/testkv")
            .withApplicationInsights(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers"
                    + "/microsoft.insights/components/testinsights")
            .withContainerRegistry(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234/providers"
                    + "/Microsoft.ContainerRegistry/registries/testRegistry")
            .withStorageAccount(
                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers"
                    + "/Microsoft.Storage/storageAccounts/testStorageAccount")
            .withEncryption(
                new EncryptionProperty()
                    .withStatus(EncryptionStatus.ENABLED)
                    .withIdentity(
                        new IdentityForCmk()
                            .withUserAssignedIdentity(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234"
                                    + "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/testuai"))
                    .withKeyVaultProperties(
                        new KeyVaultProperties()
                            .withKeyVaultArmId(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234"
                                    + "/providers/Microsoft.KeyVault/vaults/testkv")
                            .withKeyIdentifier(
                                "https://testkv.vault.azure.net/keys/testkey/aabbccddee112233445566778899aabb")
                            .withIdentityClientId("")))
            .withHbiWorkspace(false)
            .withSharedPrivateLinkResources(
                Arrays
                    .asList(
                        new SharedPrivateLinkResource()
                            .withName("testdbresource")
                            .withPrivateLinkResourceId(
                                "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-1234"
                                    + "/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource"
                                    + "/privateLinkResources/Sql")
                            .withGroupId("Sql")
                            .withRequestMessage("Please approve")
                            .withStatus(PrivateEndpointServiceConnectionStatus.APPROVED)))
            .withIdentity(
                new Identity()
                    .withType(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(null))
            .create();
    }
}
