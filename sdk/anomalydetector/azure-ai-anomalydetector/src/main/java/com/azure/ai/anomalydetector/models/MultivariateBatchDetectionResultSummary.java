// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Multivariate anomaly detection status.
 */
@Immutable
public final class MultivariateBatchDetectionResultSummary
    implements JsonSerializable<MultivariateBatchDetectionResultSummary> {

    /*
     * Status of detection results.
     */
    @Generated
    private final MultivariateBatchDetectionStatus status;

    /*
     * Error message when detection fails.
     */
    @Generated
    private List<ErrorResponse> errors;

    /*
     * Variable status.
     */
    @Generated
    private List<VariableState> variableStates;

    /*
     * Detection request for batch inference. This is an asynchronous inference that
     * will need another API to get detection results.
     */
    @Generated
    private final MultivariateBatchDetectionOptions setupInfo;

    /**
     * Creates an instance of MultivariateBatchDetectionResultSummary class.
     *
     * @param status the status value to set.
     * @param setupInfo the setupInfo value to set.
     */
    @Generated
    private MultivariateBatchDetectionResultSummary(MultivariateBatchDetectionStatus status,
        MultivariateBatchDetectionOptions setupInfo) {
        this.status = status;
        this.setupInfo = setupInfo;
    }

    /**
     * Get the status property: Status of detection results.
     *
     * @return the status value.
     */
    @Generated
    public MultivariateBatchDetectionStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errors property: Error message when detection fails.
     *
     * @return the errors value.
     */
    @Generated
    public List<ErrorResponse> getErrors() {
        return this.errors;
    }

    /**
     * Get the variableStates property: Variable status.
     *
     * @return the variableStates value.
     */
    @Generated
    public List<VariableState> getVariableStates() {
        return this.variableStates;
    }

    /**
     * Get the setupInfo property: Detection request for batch inference. This is an asynchronous inference that
     * will need another API to get detection results.
     *
     * @return the setupInfo value.
     */
    @Generated
    public MultivariateBatchDetectionOptions getSetupInfo() {
        return this.setupInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("setupInfo", this.setupInfo);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("variableStates", this.variableStates,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MultivariateBatchDetectionResultSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MultivariateBatchDetectionResultSummary if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MultivariateBatchDetectionResultSummary.
     */
    @Generated
    public static MultivariateBatchDetectionResultSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MultivariateBatchDetectionStatus status = null;
            MultivariateBatchDetectionOptions setupInfo = null;
            List<ErrorResponse> errors = null;
            List<VariableState> variableStates = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("status".equals(fieldName)) {
                    status = MultivariateBatchDetectionStatus.fromString(reader.getString());
                } else if ("setupInfo".equals(fieldName)) {
                    setupInfo = MultivariateBatchDetectionOptions.fromJson(reader);
                } else if ("errors".equals(fieldName)) {
                    errors = reader.readArray(reader1 -> ErrorResponse.fromJson(reader1));
                } else if ("variableStates".equals(fieldName)) {
                    variableStates = reader.readArray(reader1 -> VariableState.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            MultivariateBatchDetectionResultSummary deserializedMultivariateBatchDetectionResultSummary
                = new MultivariateBatchDetectionResultSummary(status, setupInfo);
            deserializedMultivariateBatchDetectionResultSummary.errors = errors;
            deserializedMultivariateBatchDetectionResultSummary.variableStates = variableStates;
            return deserializedMultivariateBatchDetectionResultSummary;
        });
    }
}
