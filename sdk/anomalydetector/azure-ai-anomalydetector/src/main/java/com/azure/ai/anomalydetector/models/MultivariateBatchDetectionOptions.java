// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Detection request for batch inference. This is an asynchronous inference that
 * will need another API to get detection results.
 */
@Fluent
public final class MultivariateBatchDetectionOptions implements JsonSerializable<MultivariateBatchDetectionOptions> {

    /*
     * Source link to the input data to indicate an accessible Azure Storage URI.
     * It either points to an Azure Blob Storage folder or points to a CSV file in
     * Azure Blob Storage, based on your data schema selection. The data schema should
     * be exactly the same as those used in the training phase. The input data must
     * contain at least slidingWindow entries preceding the start time of the data
     * to be detected.
     */
    @Generated
    private final String dataSource;

    /*
     * Number of top contributed variables for one anomalous time stamp in the response.
     */
    @Generated
    private Integer topContributorCount;

    /*
     * Start date/time of data for detection, which should
     * be in ISO 8601 format.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * End date/time of data for detection, which should
     * be in ISO 8601 format.
     */
    @Generated
    private final OffsetDateTime endTime;

    /**
     * Creates an instance of MultivariateBatchDetectionOptions class.
     *
     * @param dataSource the dataSource value to set.
     * @param startTime the startTime value to set.
     * @param endTime the endTime value to set.
     */
    @Generated
    public MultivariateBatchDetectionOptions(String dataSource, OffsetDateTime startTime, OffsetDateTime endTime) {
        this.dataSource = dataSource;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    /**
     * Get the dataSource property: Source link to the input data to indicate an accessible Azure Storage URI.
     * It either points to an Azure Blob Storage folder or points to a CSV file in
     * Azure Blob Storage, based on your data schema selection. The data schema should
     * be exactly the same as those used in the training phase. The input data must
     * contain at least slidingWindow entries preceding the start time of the data
     * to be detected.
     *
     * @return the dataSource value.
     */
    @Generated
    public String getDataSource() {
        return this.dataSource;
    }

    /**
     * Get the topContributorCount property: Number of top contributed variables for one anomalous time stamp in the
     * response.
     *
     * @return the topContributorCount value.
     */
    @Generated
    public Integer getTopContributorCount() {
        return this.topContributorCount;
    }

    /**
     * Set the topContributorCount property: Number of top contributed variables for one anomalous time stamp in the
     * response.
     *
     * @param topContributorCount the topContributorCount value to set.
     * @return the MultivariateBatchDetectionOptions object itself.
     */
    @Generated
    public MultivariateBatchDetectionOptions setTopContributorCount(Integer topContributorCount) {
        this.topContributorCount = topContributorCount;
        return this;
    }

    /**
     * Get the startTime property: Start date/time of data for detection, which should
     * be in ISO 8601 format.
     *
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End date/time of data for detection, which should
     * be in ISO 8601 format.
     *
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeNumberField("topContributorCount", this.topContributorCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MultivariateBatchDetectionOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MultivariateBatchDetectionOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MultivariateBatchDetectionOptions.
     */
    @Generated
    public static MultivariateBatchDetectionOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String dataSource = null;
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            Integer topContributorCount = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("dataSource".equals(fieldName)) {
                    dataSource = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("topContributorCount".equals(fieldName)) {
                    topContributorCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            MultivariateBatchDetectionOptions deserializedMultivariateBatchDetectionOptions
                = new MultivariateBatchDetectionOptions(dataSource, startTime, endTime);
            deserializedMultivariateBatchDetectionOptions.topContributorCount = topContributorCount;
            return deserializedMultivariateBatchDetectionOptions;
        });
    }
}
