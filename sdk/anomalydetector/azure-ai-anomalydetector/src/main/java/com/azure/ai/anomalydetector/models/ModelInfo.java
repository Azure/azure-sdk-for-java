// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Train result of a model including status, errors and diagnose info for model and variables. */
@Fluent
public final class ModelInfo {
    /*
     * An optional field, indicating how many previous points will be used to
     * compute the anomaly score of the subsequent point.
     */
    @JsonProperty(value = "slidingWindow")
    private Integer slidingWindow;

    /*
     * The alignPolicy property.
     */
    @JsonProperty(value = "alignPolicy")
    private AlignPolicy alignPolicy;

    /*
     * Source link to the input variables. Each variable should be a csv file
     * with two columns, `timestamp` and `value`. By default, the file name of
     * the variable will be used as its variable name.
     */
    @JsonProperty(value = "source", required = true)
    private String source;

    /*
     * A required field, indicating the start time of training data. Should be
     * date-time.
     */
    @JsonProperty(value = "startTime", required = true)
    private OffsetDateTime startTime;

    /*
     * A required field, indicating the end time of training data. Should be
     * date-time.
     */
    @JsonProperty(value = "endTime", required = true)
    private OffsetDateTime endTime;

    /*
     * An optional field. The name of the model whose maximum length is 24.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * Model training status.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ModelStatus status;

    /*
     * Error messages when failed to create a model.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ErrorResponse> errors;

    /*
     * The diagnosticsInfo property.
     */
    @JsonProperty(value = "diagnosticsInfo", access = JsonProperty.Access.WRITE_ONLY)
    private DiagnosticsInfo diagnosticsInfo;

    /**
     * Get the slidingWindow property: An optional field, indicating how many previous points will be used to compute
     * the anomaly score of the subsequent point.
     *
     * @return the slidingWindow value.
     */
    public Integer getSlidingWindow() {
        return this.slidingWindow;
    }

    /**
     * Set the slidingWindow property: An optional field, indicating how many previous points will be used to compute
     * the anomaly score of the subsequent point.
     *
     * @param slidingWindow the slidingWindow value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setSlidingWindow(Integer slidingWindow) {
        this.slidingWindow = slidingWindow;
        return this;
    }

    /**
     * Get the alignPolicy property: The alignPolicy property.
     *
     * @return the alignPolicy value.
     */
    public AlignPolicy getAlignPolicy() {
        return this.alignPolicy;
    }

    /**
     * Set the alignPolicy property: The alignPolicy property.
     *
     * @param alignPolicy the alignPolicy value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setAlignPolicy(AlignPolicy alignPolicy) {
        this.alignPolicy = alignPolicy;
        return this;
    }

    /**
     * Get the source property: Source link to the input variables. Each variable should be a csv file with two columns,
     * `timestamp` and `value`. By default, the file name of the variable will be used as its variable name.
     *
     * @return the source value.
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Set the source property: Source link to the input variables. Each variable should be a csv file with two columns,
     * `timestamp` and `value`. By default, the file name of the variable will be used as its variable name.
     *
     * @param source the source value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the startTime property: A required field, indicating the start time of training data. Should be date-time.
     *
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: A required field, indicating the start time of training data. Should be date-time.
     *
     * @param startTime the startTime value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: A required field, indicating the end time of training data. Should be date-time.
     *
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: A required field, indicating the end time of training data. Should be date-time.
     *
     * @param endTime the endTime value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the displayName property: An optional field. The name of the model whose maximum length is 24.
     *
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: An optional field. The name of the model whose maximum length is 24.
     *
     * @param displayName the displayName value to set.
     * @return the ModelInfo object itself.
     */
    public ModelInfo setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the status property: Model training status.
     *
     * @return the status value.
     */
    public ModelStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errors property: Error messages when failed to create a model.
     *
     * @return the errors value.
     */
    public List<ErrorResponse> getErrors() {
        return this.errors;
    }

    /**
     * Get the diagnosticsInfo property: The diagnosticsInfo property.
     *
     * @return the diagnosticsInfo value.
     */
    public DiagnosticsInfo getDiagnosticsInfo() {
        return this.diagnosticsInfo;
    }
}
