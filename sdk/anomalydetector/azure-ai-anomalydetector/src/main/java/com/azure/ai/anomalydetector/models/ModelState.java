// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model status.
 */
@Immutable
public final class ModelState implements JsonSerializable<ModelState> {

    /*
     * Number of passes of the entire training dataset that the
     * algorithm has completed.
     */
    @Generated
    private List<Integer> epochIds;

    /*
     * List of metrics used to assess how the model fits the training data for each
     * epoch.
     */
    @Generated
    private List<Double> trainLosses;

    /*
     * List of metrics used to assess how the model fits the validation set for each
     * epoch.
     */
    @Generated
    private List<Double> validationLosses;

    /*
     * Latency for each epoch.
     */
    @Generated
    private List<Double> latenciesInSeconds;

    /**
     * Creates an instance of ModelState class.
     */
    @Generated
    private ModelState() {
    }

    /**
     * Get the epochIds property: Number of passes of the entire training dataset that the
     * algorithm has completed.
     *
     * @return the epochIds value.
     */
    @Generated
    public List<Integer> getEpochIds() {
        return this.epochIds;
    }

    /**
     * Get the trainLosses property: List of metrics used to assess how the model fits the training data for each
     * epoch.
     *
     * @return the trainLosses value.
     */
    @Generated
    public List<Double> getTrainLosses() {
        return this.trainLosses;
    }

    /**
     * Get the validationLosses property: List of metrics used to assess how the model fits the validation set for each
     * epoch.
     *
     * @return the validationLosses value.
     */
    @Generated
    public List<Double> getValidationLosses() {
        return this.validationLosses;
    }

    /**
     * Get the latenciesInSeconds property: Latency for each epoch.
     *
     * @return the latenciesInSeconds value.
     */
    @Generated
    public List<Double> getLatenciesInSeconds() {
        return this.latenciesInSeconds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("epochIds", this.epochIds, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("trainLosses", this.trainLosses, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("validationLosses", this.validationLosses,
            (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("latenciesInSeconds", this.latenciesInSeconds,
            (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModelState from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModelState if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ModelState.
     */
    @Generated
    public static ModelState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModelState deserializedModelState = new ModelState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("epochIds".equals(fieldName)) {
                    List<Integer> epochIds = reader.readArray(reader1 -> reader1.getInt());
                    deserializedModelState.epochIds = epochIds;
                } else if ("trainLosses".equals(fieldName)) {
                    List<Double> trainLosses = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedModelState.trainLosses = trainLosses;
                } else if ("validationLosses".equals(fieldName)) {
                    List<Double> validationLosses = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedModelState.validationLosses = validationLosses;
                } else if ("latenciesInSeconds".equals(fieldName)) {
                    List<Double> latenciesInSeconds = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedModelState.latenciesInSeconds = latenciesInSeconds;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedModelState;
        });
    }
}
