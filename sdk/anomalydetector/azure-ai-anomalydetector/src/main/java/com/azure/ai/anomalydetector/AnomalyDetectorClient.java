// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.anomalydetector;

import com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl;
import com.azure.ai.anomalydetector.models.AnomalyDetectorErrorException;
import com.azure.ai.anomalydetector.models.ChangePointDetectRequest;
import com.azure.ai.anomalydetector.models.ChangePointDetectResponse;
import com.azure.ai.anomalydetector.models.DetectAnomalyHeaders;
import com.azure.ai.anomalydetector.models.DetectRequest;
import com.azure.ai.anomalydetector.models.DetectionRequest;
import com.azure.ai.anomalydetector.models.DetectionResult;
import com.azure.ai.anomalydetector.models.EntireDetectResponse;
import com.azure.ai.anomalydetector.models.ErrorResponseException;
import com.azure.ai.anomalydetector.models.LastDetectResponse;
import com.azure.ai.anomalydetector.models.LastDetectionRequest;
import com.azure.ai.anomalydetector.models.LastDetectionResult;
import com.azure.ai.anomalydetector.models.Model;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.ModelSnapshot;
import com.azure.ai.anomalydetector.models.TrainMultivariateModelHeaders;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import java.util.UUID;

/** Initializes a new instance of the synchronous AnomalyDetectorClient type. */
@ServiceClient(builder = AnomalyDetectorClientBuilder.class)
public final class AnomalyDetectorClient {
    @Generated private final AnomalyDetectorClientImpl serviceClient;

    /**
     * Initializes an instance of AnomalyDetectorClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AnomalyDetectorClient(AnomalyDetectorClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EntireDetectResponse> detectEntireSeriesSyncWithResponse(DetectRequest body) {
        return this.serviceClient.detectEntireSeriesSyncWithResponse(body);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EntireDetectResponse> detectEntireSeriesSyncWithResponse(DetectRequest body, Context context) {
        return this.serviceClient.detectEntireSeriesSyncWithResponse(body, context);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EntireDetectResponse detectEntireSeriesSync(DetectRequest body) {
        return this.serviceClient.detectEntireSeriesSync(body);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EntireDetectResponse detectEntireSeriesSync(DetectRequest body, Context context) {
        return this.serviceClient.detectEntireSeriesSync(body, context);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectResponse> detectLastPointSyncWithResponse(DetectRequest body) {
        return this.serviceClient.detectLastPointSyncWithResponse(body);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectResponse> detectLastPointSyncWithResponse(DetectRequest body, Context context) {
        return this.serviceClient.detectLastPointSyncWithResponse(body, context);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectResponse detectLastPointSync(DetectRequest body) {
        return this.serviceClient.detectLastPointSync(body);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectResponse detectLastPointSync(DetectRequest body, Context context) {
        return this.serviceClient.detectLastPointSync(body, context);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChangePointDetectResponse> detectChangePointSyncWithResponse(ChangePointDetectRequest body) {
        return this.serviceClient.detectChangePointSyncWithResponse(body);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChangePointDetectResponse> detectChangePointSyncWithResponse(
            ChangePointDetectRequest body, Context context) {
        return this.serviceClient.detectChangePointSyncWithResponse(body, context);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChangePointDetectResponse detectChangePointSync(ChangePointDetectRequest body) {
        return this.serviceClient.detectChangePointSync(body);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChangePointDetectResponse detectChangePointSync(ChangePointDetectRequest body, Context context) {
        return this.serviceClient.detectChangePointSync(body, context);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<TrainMultivariateModelHeaders, Void> trainMultivariateModelSyncWithResponse(ModelInfo body) {
        return this.serviceClient.trainMultivariateModelSyncWithResponse(body);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<TrainMultivariateModelHeaders, Void> trainMultivariateModelSyncWithResponse(
            ModelInfo body, Context context) {
        return this.serviceClient.trainMultivariateModelSyncWithResponse(body, context);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainMultivariateModelSync(ModelInfo body) {
        this.serviceClient.trainMultivariateModelSync(body);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainMultivariateModelSync(ModelInfo body, Context context) {
        this.serviceClient.trainMultivariateModelSync(body, context);
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModelSync(Integer skip, Integer top) {
        return this.serviceClient.listMultivariateModelSync(skip, top);
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModelSync(Integer skip, Integer top, Context context) {
        return this.serviceClient.listMultivariateModelSync(skip, top, context);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Model> getMultivariateModelSyncWithResponse(UUID modelId) {
        return this.serviceClient.getMultivariateModelSyncWithResponse(modelId);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Model> getMultivariateModelSyncWithResponse(UUID modelId, Context context) {
        return this.serviceClient.getMultivariateModelSyncWithResponse(modelId, context);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model getMultivariateModelSync(UUID modelId) {
        return this.serviceClient.getMultivariateModelSync(modelId);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model getMultivariateModelSync(UUID modelId, Context context) {
        return this.serviceClient.getMultivariateModelSync(modelId, context);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelSyncWithResponse(UUID modelId) {
        return this.serviceClient.deleteMultivariateModelSyncWithResponse(modelId);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelSyncWithResponse(UUID modelId, Context context) {
        return this.serviceClient.deleteMultivariateModelSyncWithResponse(modelId, context);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModelSync(UUID modelId) {
        this.serviceClient.deleteMultivariateModelSync(modelId);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModelSync(UUID modelId, Context context) {
        this.serviceClient.deleteMultivariateModelSync(modelId, context);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<DetectAnomalyHeaders, Void> detectAnomalySyncWithResponse(UUID modelId, DetectionRequest body) {
        return this.serviceClient.detectAnomalySyncWithResponse(modelId, body);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<DetectAnomalyHeaders, Void> detectAnomalySyncWithResponse(
            UUID modelId, DetectionRequest body, Context context) {
        return this.serviceClient.detectAnomalySyncWithResponse(modelId, body, context);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void detectAnomalySync(UUID modelId, DetectionRequest body) {
        this.serviceClient.detectAnomalySync(modelId, body);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void detectAnomalySync(UUID modelId, DetectionRequest body, Context context) {
        this.serviceClient.detectAnomalySync(modelId, body, context);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DetectionResult> getDetectionResultSyncWithResponse(UUID resultId) {
        return this.serviceClient.getDetectionResultSyncWithResponse(resultId);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DetectionResult> getDetectionResultSyncWithResponse(UUID resultId, Context context) {
        return this.serviceClient.getDetectionResultSyncWithResponse(resultId, context);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectionResult getDetectionResultSync(UUID resultId) {
        return this.serviceClient.getDetectionResultSync(resultId);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectionResult getDetectionResultSync(UUID resultId, Context context) {
        return this.serviceClient.getDetectionResultSync(resultId, context);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> exportModelSyncWithResponse(UUID modelId) {
        return this.serviceClient.exportModelSyncWithResponse(modelId);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> exportModelSyncWithResponse(UUID modelId, Context context) {
        return this.serviceClient.exportModelSyncWithResponse(modelId, context);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData exportModelSync(UUID modelId) {
        return this.serviceClient.exportModelSync(modelId);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData exportModelSync(UUID modelId, Context context) {
        return this.serviceClient.exportModelSync(modelId, context);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectionResult> lastDetectAnomalySyncWithResponse(UUID modelId, LastDetectionRequest body) {
        return this.serviceClient.lastDetectAnomalySyncWithResponse(modelId, body);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectionResult> lastDetectAnomalySyncWithResponse(
            UUID modelId, LastDetectionRequest body, Context context) {
        return this.serviceClient.lastDetectAnomalySyncWithResponse(modelId, body, context);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectionResult lastDetectAnomalySync(UUID modelId, LastDetectionRequest body) {
        return this.serviceClient.lastDetectAnomalySync(modelId, body);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectionResult lastDetectAnomalySync(UUID modelId, LastDetectionRequest body, Context context) {
        return this.serviceClient.lastDetectAnomalySync(modelId, body, context);
    }
}
