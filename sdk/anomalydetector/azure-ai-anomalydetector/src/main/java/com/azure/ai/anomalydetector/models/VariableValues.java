// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Variable values.
 */
@Immutable
public final class VariableValues implements JsonSerializable<VariableValues> {

    /*
     * Variable name of the last detection request.
     */
    @Generated
    private final String variable;

    /*
     * Time stamps of the last detection request.
     */
    @Generated
    private final List<String> timestamps;

    /*
     * Values of variables.
     */
    @Generated
    private final List<Double> values;

    /**
     * Creates an instance of VariableValues class.
     *
     * @param variable the variable value to set.
     * @param timestamps the timestamps value to set.
     * @param values the values value to set.
     */
    @Generated
    public VariableValues(String variable, List<String> timestamps, List<Double> values) {
        this.variable = variable;
        this.timestamps = timestamps;
        this.values = values;
    }

    /**
     * Get the variable property: Variable name of the last detection request.
     *
     * @return the variable value.
     */
    @Generated
    public String getVariable() {
        return this.variable;
    }

    /**
     * Get the timestamps property: Time stamps of the last detection request.
     *
     * @return the timestamps value.
     */
    @Generated
    public List<String> getTimestamps() {
        return this.timestamps;
    }

    /**
     * Get the values property: Values of variables.
     *
     * @return the values value.
     */
    @Generated
    public List<Double> getValues() {
        return this.values;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("variable", this.variable);
        jsonWriter.writeArrayField("timestamps", this.timestamps, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VariableValues from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of VariableValues if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VariableValues.
     */
    @Generated
    public static VariableValues fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String variable = null;
            List<String> timestamps = null;
            List<Double> values = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("variable".equals(fieldName)) {
                    variable = reader.getString();
                } else if ("timestamps".equals(fieldName)) {
                    timestamps = reader.readArray(reader1 -> reader1.getString());
                } else if ("values".equals(fieldName)) {
                    values = reader.readArray(reader1 -> reader1.getDouble());
                } else {
                    reader.skipChildren();
                }
            }
            return new VariableValues(variable, timestamps, values);
        });
    }
}
