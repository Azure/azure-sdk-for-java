// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Variable status.
 */
@Immutable
public final class VariableState implements JsonSerializable<VariableState> {

    /*
     * Variable name in variable states.
     */
    @Generated
    private String variable;

    /*
     * Proportion of missing values that need to be filled by fillNAMethod.
     */
    @Generated
    private Double filledNARatio;

    /*
     * Number of effective data points before fillNAMethod is applied.
     */
    @Generated
    private Integer effectiveCount;

    /*
     * First valid time stamp with a value of input data.
     */
    @Generated
    private OffsetDateTime firstTimestamp;

    /*
     * Last valid time stamp with a value of input data.
     */
    @Generated
    private OffsetDateTime lastTimestamp;

    /**
     * Creates an instance of VariableState class.
     */
    @Generated
    private VariableState() {
    }

    /**
     * Get the variable property: Variable name in variable states.
     *
     * @return the variable value.
     */
    @Generated
    public String getVariable() {
        return this.variable;
    }

    /**
     * Get the filledNARatio property: Proportion of missing values that need to be filled by fillNAMethod.
     *
     * @return the filledNARatio value.
     */
    @Generated
    public Double getFilledNARatio() {
        return this.filledNARatio;
    }

    /**
     * Get the effectiveCount property: Number of effective data points before fillNAMethod is applied.
     *
     * @return the effectiveCount value.
     */
    @Generated
    public Integer getEffectiveCount() {
        return this.effectiveCount;
    }

    /**
     * Get the firstTimestamp property: First valid time stamp with a value of input data.
     *
     * @return the firstTimestamp value.
     */
    @Generated
    public OffsetDateTime getFirstTimestamp() {
        return this.firstTimestamp;
    }

    /**
     * Get the lastTimestamp property: Last valid time stamp with a value of input data.
     *
     * @return the lastTimestamp value.
     */
    @Generated
    public OffsetDateTime getLastTimestamp() {
        return this.lastTimestamp;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("variable", this.variable);
        jsonWriter.writeNumberField("filledNARatio", this.filledNARatio);
        jsonWriter.writeNumberField("effectiveCount", this.effectiveCount);
        jsonWriter.writeStringField("firstTimestamp",
            this.firstTimestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstTimestamp));
        jsonWriter.writeStringField("lastTimestamp",
            this.lastTimestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastTimestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VariableState from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of VariableState if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VariableState.
     */
    @Generated
    public static VariableState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VariableState deserializedVariableState = new VariableState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("variable".equals(fieldName)) {
                    deserializedVariableState.variable = reader.getString();
                } else if ("filledNARatio".equals(fieldName)) {
                    deserializedVariableState.filledNARatio = reader.getNullable(JsonReader::getDouble);
                } else if ("effectiveCount".equals(fieldName)) {
                    deserializedVariableState.effectiveCount = reader.getNullable(JsonReader::getInt);
                } else if ("firstTimestamp".equals(fieldName)) {
                    deserializedVariableState.firstTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastTimestamp".equals(fieldName)) {
                    deserializedVariableState.lastTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedVariableState;
        });
    }
}
