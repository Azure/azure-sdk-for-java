// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response of change point detection.
 */
@Immutable
public final class UnivariateChangePointDetectionResult
    implements JsonSerializable<UnivariateChangePointDetectionResult> {

    /*
     * Frequency extracted from the series. Zero means no recurrent pattern has been
     * found.
     */
    @Generated
    private Integer period;

    /*
     * Change point properties for each input point. True means
     * an anomaly (either negative or positive) has been detected. The index of the
     * array is consistent with the input series.
     */
    @Generated
    private List<Boolean> isChangePoint;

    /*
     * Change point confidence of each point.
     */
    @Generated
    private List<Double> confidenceScores;

    /**
     * Creates an instance of UnivariateChangePointDetectionResult class.
     */
    @Generated
    private UnivariateChangePointDetectionResult() {
    }

    /**
     * Get the period property: Frequency extracted from the series. Zero means no recurrent pattern has been
     * found.
     *
     * @return the period value.
     */
    @Generated
    public Integer getPeriod() {
        return this.period;
    }

    /**
     * Get the isChangePoint property: Change point properties for each input point. True means
     * an anomaly (either negative or positive) has been detected. The index of the
     * array is consistent with the input series.
     *
     * @return the isChangePoint value.
     */
    @Generated
    public List<Boolean> getIsChangePoint() {
        return this.isChangePoint;
    }

    /**
     * Get the confidenceScores property: Change point confidence of each point.
     *
     * @return the confidenceScores value.
     */
    @Generated
    public List<Double> getConfidenceScores() {
        return this.confidenceScores;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("isChangePoint", this.isChangePoint,
            (writer, element) -> writer.writeBoolean(element));
        jsonWriter.writeArrayField("confidenceScores", this.confidenceScores,
            (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnivariateChangePointDetectionResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnivariateChangePointDetectionResult if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UnivariateChangePointDetectionResult.
     */
    @Generated
    public static UnivariateChangePointDetectionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UnivariateChangePointDetectionResult deserializedUnivariateChangePointDetectionResult
                = new UnivariateChangePointDetectionResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("period".equals(fieldName)) {
                    deserializedUnivariateChangePointDetectionResult.period = reader.getNullable(JsonReader::getInt);
                } else if ("isChangePoint".equals(fieldName)) {
                    List<Boolean> isChangePoint = reader.readArray(reader1 -> reader1.getBoolean());
                    deserializedUnivariateChangePointDetectionResult.isChangePoint = isChangePoint;
                } else if ("confidenceScores".equals(fieldName)) {
                    List<Double> confidenceScores = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedUnivariateChangePointDetectionResult.confidenceScores = confidenceScores;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedUnivariateChangePointDetectionResult;
        });
    }
}
