// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request of change point detection.
 */
@Fluent
public final class UnivariateChangePointDetectionOptions
    implements JsonSerializable<UnivariateChangePointDetectionOptions> {

    /*
     * Time series data points. Points should be sorted by time stamp in ascending
     * order to match the change point detection result.
     */
    @Generated
    private final List<TimeSeriesPoint> series;

    /*
     * Granularity is used to verify whether the input series is valid.
     */
    @Generated
    private final TimeGranularity granularity;

    /*
     * A custom interval is used to set a nonstandard time interval. For example, if the
     * series is 5 minutes, the request can be set as {"granularity":"minutely",
     * "customInterval":5}.
     */
    @Generated
    private Integer customInterval;

    /*
     * Argument that indicates the periodic value of a time series. If the value is null or
     * not present, the API will determine the period automatically.
     */
    @Generated
    private Integer period;

    /*
     * Argument that indicates an advanced model parameter. A default stableTrendWindow value will
     * be used in detection.
     */
    @Generated
    private Integer stableTrendWindow;

    /*
     * Argument that indicates an advanced model parameter between 0.0 and 1.0. The lower the
     * value is, the larger the trend error is, which means less change point will
     * be accepted.
     */
    @Generated
    private Double threshold;

    /**
     * Creates an instance of UnivariateChangePointDetectionOptions class.
     *
     * @param series the series value to set.
     * @param granularity the granularity value to set.
     */
    @Generated
    public UnivariateChangePointDetectionOptions(List<TimeSeriesPoint> series, TimeGranularity granularity) {
        this.series = series;
        this.granularity = granularity;
    }

    /**
     * Get the series property: Time series data points. Points should be sorted by time stamp in ascending
     * order to match the change point detection result.
     *
     * @return the series value.
     */
    @Generated
    public List<TimeSeriesPoint> getSeries() {
        return this.series;
    }

    /**
     * Get the granularity property: Granularity is used to verify whether the input series is valid.
     *
     * @return the granularity value.
     */
    @Generated
    public TimeGranularity getGranularity() {
        return this.granularity;
    }

    /**
     * Get the customInterval property: A custom interval is used to set a nonstandard time interval. For example, if
     * the
     * series is 5 minutes, the request can be set as {"granularity":"minutely",
     * "customInterval":5}.
     *
     * @return the customInterval value.
     */
    @Generated
    public Integer getCustomInterval() {
        return this.customInterval;
    }

    /**
     * Set the customInterval property: A custom interval is used to set a nonstandard time interval. For example, if
     * the
     * series is 5 minutes, the request can be set as {"granularity":"minutely",
     * "customInterval":5}.
     *
     * @param customInterval the customInterval value to set.
     * @return the UnivariateChangePointDetectionOptions object itself.
     */
    @Generated
    public UnivariateChangePointDetectionOptions setCustomInterval(Integer customInterval) {
        this.customInterval = customInterval;
        return this;
    }

    /**
     * Get the period property: Argument that indicates the periodic value of a time series. If the value is null or
     * not present, the API will determine the period automatically.
     *
     * @return the period value.
     */
    @Generated
    public Integer getPeriod() {
        return this.period;
    }

    /**
     * Set the period property: Argument that indicates the periodic value of a time series. If the value is null or
     * not present, the API will determine the period automatically.
     *
     * @param period the period value to set.
     * @return the UnivariateChangePointDetectionOptions object itself.
     */
    @Generated
    public UnivariateChangePointDetectionOptions setPeriod(Integer period) {
        this.period = period;
        return this;
    }

    /**
     * Get the stableTrendWindow property: Argument that indicates an advanced model parameter. A default
     * stableTrendWindow value will
     * be used in detection.
     *
     * @return the stableTrendWindow value.
     */
    @Generated
    public Integer getStableTrendWindow() {
        return this.stableTrendWindow;
    }

    /**
     * Set the stableTrendWindow property: Argument that indicates an advanced model parameter. A default
     * stableTrendWindow value will
     * be used in detection.
     *
     * @param stableTrendWindow the stableTrendWindow value to set.
     * @return the UnivariateChangePointDetectionOptions object itself.
     */
    @Generated
    public UnivariateChangePointDetectionOptions setStableTrendWindow(Integer stableTrendWindow) {
        this.stableTrendWindow = stableTrendWindow;
        return this;
    }

    /**
     * Get the threshold property: Argument that indicates an advanced model parameter between 0.0 and 1.0. The lower
     * the
     * value is, the larger the trend error is, which means less change point will
     * be accepted.
     *
     * @return the threshold value.
     */
    @Generated
    public Double getThreshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: Argument that indicates an advanced model parameter between 0.0 and 1.0. The lower
     * the
     * value is, the larger the trend error is, which means less change point will
     * be accepted.
     *
     * @param threshold the threshold value to set.
     * @return the UnivariateChangePointDetectionOptions object itself.
     */
    @Generated
    public UnivariateChangePointDetectionOptions setThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("series", this.series, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("granularity", this.granularity == null ? null : this.granularity.toString());
        jsonWriter.writeNumberField("customInterval", this.customInterval);
        jsonWriter.writeNumberField("period", this.period);
        jsonWriter.writeNumberField("stableTrendWindow", this.stableTrendWindow);
        jsonWriter.writeNumberField("threshold", this.threshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnivariateChangePointDetectionOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnivariateChangePointDetectionOptions if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UnivariateChangePointDetectionOptions.
     */
    @Generated
    public static UnivariateChangePointDetectionOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<TimeSeriesPoint> series = null;
            TimeGranularity granularity = null;
            Integer customInterval = null;
            Integer period = null;
            Integer stableTrendWindow = null;
            Double threshold = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("series".equals(fieldName)) {
                    series = reader.readArray(reader1 -> TimeSeriesPoint.fromJson(reader1));
                } else if ("granularity".equals(fieldName)) {
                    granularity = TimeGranularity.fromString(reader.getString());
                } else if ("customInterval".equals(fieldName)) {
                    customInterval = reader.getNullable(JsonReader::getInt);
                } else if ("period".equals(fieldName)) {
                    period = reader.getNullable(JsonReader::getInt);
                } else if ("stableTrendWindow".equals(fieldName)) {
                    stableTrendWindow = reader.getNullable(JsonReader::getInt);
                } else if ("threshold".equals(fieldName)) {
                    threshold = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            UnivariateChangePointDetectionOptions deserializedUnivariateChangePointDetectionOptions
                = new UnivariateChangePointDetectionOptions(series, granularity);
            deserializedUnivariateChangePointDetectionOptions.customInterval = customInterval;
            deserializedUnivariateChangePointDetectionOptions.period = period;
            deserializedUnivariateChangePointDetectionOptions.stableTrendWindow = stableTrendWindow;
            deserializedUnivariateChangePointDetectionOptions.threshold = threshold;
            return deserializedUnivariateChangePointDetectionOptions;
        });
    }
}
