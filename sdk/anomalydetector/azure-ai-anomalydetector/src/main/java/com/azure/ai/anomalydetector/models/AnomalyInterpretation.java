// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Interpretation of the anomalous time stamp.
 */
@Immutable
public final class AnomalyInterpretation implements JsonSerializable<AnomalyInterpretation> {

    /*
     * Variable.
     */
    @Generated
    private String variable;

    /*
     * This score shows the percentage that contributes to the anomalous time stamp. It's a
     * number between 0 and 1.
     */
    @Generated
    private Double contributionScore;

    /*
     * Correlation changes among the anomalous variables.
     */
    @Generated
    private CorrelationChanges correlationChanges;

    /**
     * Creates an instance of AnomalyInterpretation class.
     */
    @Generated
    private AnomalyInterpretation() {
    }

    /**
     * Get the variable property: Variable.
     *
     * @return the variable value.
     */
    @Generated
    public String getVariable() {
        return this.variable;
    }

    /**
     * Get the contributionScore property: This score shows the percentage that contributes to the anomalous time stamp.
     * It's a
     * number between 0 and 1.
     *
     * @return the contributionScore value.
     */
    @Generated
    public Double getContributionScore() {
        return this.contributionScore;
    }

    /**
     * Get the correlationChanges property: Correlation changes among the anomalous variables.
     *
     * @return the correlationChanges value.
     */
    @Generated
    public CorrelationChanges getCorrelationChanges() {
        return this.correlationChanges;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("variable", this.variable);
        jsonWriter.writeNumberField("contributionScore", this.contributionScore);
        jsonWriter.writeJsonField("correlationChanges", this.correlationChanges);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnomalyInterpretation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnomalyInterpretation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnomalyInterpretation.
     */
    @Generated
    public static AnomalyInterpretation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnomalyInterpretation deserializedAnomalyInterpretation = new AnomalyInterpretation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("variable".equals(fieldName)) {
                    deserializedAnomalyInterpretation.variable = reader.getString();
                } else if ("contributionScore".equals(fieldName)) {
                    deserializedAnomalyInterpretation.contributionScore = reader.getNullable(JsonReader::getDouble);
                } else if ("correlationChanges".equals(fieldName)) {
                    deserializedAnomalyInterpretation.correlationChanges = CorrelationChanges.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAnomalyInterpretation;
        });
    }
}
