// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector;

import com.azure.ai.anomalydetector.implementation.MultivariatesImpl;
import com.azure.ai.anomalydetector.models.AnomalyDetectionModel;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions;
import com.azure.ai.anomalydetector.models.MultivariateDetectionResult;
import com.azure.ai.anomalydetector.models.MultivariateLastDetectionOptions;
import com.azure.ai.anomalydetector.models.MultivariateLastDetectionResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous AnomalyDetectorClient type.
 */
@ServiceClient(builder = AnomalyDetectorClientBuilder.class)
public final class MultivariateClient {

    @Generated
    private final MultivariatesImpl serviceClient;

    /**
     * Initializes an instance of MultivariateClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    MultivariateClient(MultivariatesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * For asynchronous inference, get a multivariate anomaly detection result based on the
     * resultId value that the BatchDetectAnomaly API returns.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     resultId: String (Required)
     *     summary (Required): {
     *         status: String(CREATED/RUNNING/READY/FAILED) (Required)
     *         errors (Optional): [
     *              (Optional){
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *         ]
     *         variableStates (Optional): [
     *              (Optional){
     *                 variable: String (Optional)
     *                 filledNARatio: Double (Optional)
     *                 effectiveCount: Integer (Optional)
     *                 firstTimestamp: OffsetDateTime (Optional)
     *                 lastTimestamp: OffsetDateTime (Optional)
     *             }
     *         ]
     *         setupInfo (Required): {
     *             dataSource: String (Required)
     *             topContributorCount: Integer (Optional)
     *             startTime: OffsetDateTime (Required)
     *             endTime: OffsetDateTime (Required)
     *         }
     *     }
     *     results (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             value (Optional): {
     *                 isAnomaly: boolean (Required)
     *                 severity: double (Required)
     *                 score: double (Required)
     *                 interpretation (Optional): [
     *                      (Optional){
     *                         variable: String (Optional)
     *                         contributionScore: Double (Optional)
     *                         correlationChanges (Optional): {
     *                             changedVariables (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param resultId ID of a batch detection result.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detection results for the resultId value along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMultivariateBatchDetectionResultWithResponse(String resultId,
        RequestOptions requestOptions) {
        return this.serviceClient.getMultivariateBatchDetectionResultWithResponse(resultId, requestOptions);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * Create and train a multivariate anomaly detection model. The request must
     * include a source parameter to indicate an Azure Blob
     * Storage URI that's accessible to the service. There are two types of data input. The Blob Storage URI can point
     * to an Azure Blob
     * Storage folder that contains multiple CSV files, where each CSV file has
     * two columns, time stamp and variable. Or the Blob Storage URI can point to a single blob that contains a CSV file
     * that has all the variables and a
     * time stamp column.
     * The model object will be created and returned in the response, but the
     * training process happens asynchronously. To check the training status, call
     * GetMultivariateModel with the modelId value and check the status field in the
     * modelInfo object.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     dataSource: String (Required)
     *     dataSchema: String(OneTable/MultiTable) (Optional)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Required)
     *     displayName: String (Optional)
     *     slidingWindow: Integer (Optional)
     *     alignPolicy (Optional): {
     *         alignMode: String(Inner/Outer) (Optional)
     *         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)
     *         paddingValue: Double (Optional)
     *     }
     *     status: String(CREATED/RUNNING/READY/FAILED) (Optional)
     *     errors (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     diagnosticsInfo (Optional): {
     *         modelState (Optional): {
     *             epochIds (Optional): [
     *                 int (Optional)
     *             ]
     *             trainLosses (Optional): [
     *                 double (Optional)
     *             ]
     *             validationLosses (Optional): [
     *                 double (Optional)
     *             ]
     *             latenciesInSeconds (Optional): [
     *                 double (Optional)
     *             ]
     *         }
     *         variableStates (Optional): [
     *              (Optional){
     *                 variable: String (Optional)
     *                 filledNARatio: Double (Optional)
     *                 effectiveCount: Integer (Optional)
     *                 firstTimestamp: OffsetDateTime (Optional)
     *                 lastTimestamp: OffsetDateTime (Optional)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     createdTime: OffsetDateTime (Required)
     *     lastUpdatedTime: OffsetDateTime (Required)
     *     modelInfo (Optional): {
     *         dataSource: String (Required)
     *         dataSchema: String(OneTable/MultiTable) (Optional)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         displayName: String (Optional)
     *         slidingWindow: Integer (Optional)
     *         alignPolicy (Optional): {
     *             alignMode: String(Inner/Outer) (Optional)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)
     *             paddingValue: Double (Optional)
     *         }
     *         status: String(CREATED/RUNNING/READY/FAILED) (Optional)
     *         errors (Optional): [
     *              (Optional){
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *         ]
     *         diagnosticsInfo (Optional): {
     *             modelState (Optional): {
     *                 epochIds (Optional): [
     *                     int (Optional)
     *                 ]
     *                 trainLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validationLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 latenciesInSeconds (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             variableStates (Optional): [
     *                  (Optional){
     *                     variable: String (Optional)
     *                     filledNARatio: Double (Optional)
     *                     effectiveCount: Integer (Optional)
     *                     firstTimestamp: OffsetDateTime (Optional)
     *                     lastTimestamp: OffsetDateTime (Optional)
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelInfo Model information.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of getting a model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> trainMultivariateModelWithResponse(BinaryData modelInfo,
        RequestOptions requestOptions) {
        return this.serviceClient.trainMultivariateModelWithResponse(modelInfo, requestOptions);
    }

    /**
     * List Multivariate Models
     *
     * List models of a resource.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     createdTime: OffsetDateTime (Required)
     *     lastUpdatedTime: OffsetDateTime (Required)
     *     modelInfo (Optional): {
     *         dataSource: String (Required)
     *         dataSchema: String(OneTable/MultiTable) (Optional)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         displayName: String (Optional)
     *         slidingWindow: Integer (Optional)
     *         alignPolicy (Optional): {
     *             alignMode: String(Inner/Outer) (Optional)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)
     *             paddingValue: Double (Optional)
     *         }
     *         status: String(CREATED/RUNNING/READY/FAILED) (Optional)
     *         errors (Optional): [
     *              (Optional){
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *         ]
     *         diagnosticsInfo (Optional): {
     *             modelState (Optional): {
     *                 epochIds (Optional): [
     *                     int (Optional)
     *                 ]
     *                 trainLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validationLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 latenciesInSeconds (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             variableStates (Optional): [
     *                  (Optional){
     *                     variable: String (Optional)
     *                     filledNARatio: Double (Optional)
     *                     effectiveCount: Integer (Optional)
     *                     firstTimestamp: OffsetDateTime (Optional)
     *                     lastTimestamp: OffsetDateTime (Optional)
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMultivariateModels(RequestOptions requestOptions) {
        return this.serviceClient.listMultivariateModels(requestOptions);
    }

    /**
     * Delete Multivariate Model
     *
     * Delete an existing multivariate model according to the modelId value.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.deleteMultivariateModelWithResponse(modelId, requestOptions);
    }

    /**
     * Get Multivariate Model
     *
     * Get detailed information about the multivariate model, including the training status
     * and variables used in the model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     createdTime: OffsetDateTime (Required)
     *     lastUpdatedTime: OffsetDateTime (Required)
     *     modelInfo (Optional): {
     *         dataSource: String (Required)
     *         dataSchema: String(OneTable/MultiTable) (Optional)
     *         startTime: OffsetDateTime (Required)
     *         endTime: OffsetDateTime (Required)
     *         displayName: String (Optional)
     *         slidingWindow: Integer (Optional)
     *         alignPolicy (Optional): {
     *             alignMode: String(Inner/Outer) (Optional)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)
     *             paddingValue: Double (Optional)
     *         }
     *         status: String(CREATED/RUNNING/READY/FAILED) (Optional)
     *         errors (Optional): [
     *              (Optional){
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *         ]
     *         diagnosticsInfo (Optional): {
     *             modelState (Optional): {
     *                 epochIds (Optional): [
     *                     int (Optional)
     *                 ]
     *                 trainLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validationLosses (Optional): [
     *                     double (Optional)
     *                 ]
     *                 latenciesInSeconds (Optional): [
     *                     double (Optional)
     *                 ]
     *             }
     *             variableStates (Optional): [
     *                  (Optional){
     *                     variable: String (Optional)
     *                     filledNARatio: Double (Optional)
     *                     effectiveCount: Integer (Optional)
     *                     firstTimestamp: OffsetDateTime (Optional)
     *                     lastTimestamp: OffsetDateTime (Optional)
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information about the multivariate model, including the training status
     * and variables used in the model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.getMultivariateModelWithResponse(modelId, requestOptions);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * Submit a multivariate anomaly detection task with the modelId value of a trained model
     * and inference data. The input schema should be the same with the training
     * request. The request will finish asynchronously and return a resultId value to
     * query the detection result. The request should be a source link to indicate an
     * externally accessible Azure Storage URI that either points to an Azure Blob
     * Storage folder or points to a CSV file in Azure Blob Storage.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     dataSource: String (Required)
     *     topContributorCount: Integer (Optional)
     *     startTime: OffsetDateTime (Required)
     *     endTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     resultId: String (Required)
     *     summary (Required): {
     *         status: String(CREATED/RUNNING/READY/FAILED) (Required)
     *         errors (Optional): [
     *              (Optional){
     *                 code: String (Required)
     *                 message: String (Required)
     *             }
     *         ]
     *         variableStates (Optional): [
     *              (Optional){
     *                 variable: String (Optional)
     *                 filledNARatio: Double (Optional)
     *                 effectiveCount: Integer (Optional)
     *                 firstTimestamp: OffsetDateTime (Optional)
     *                 lastTimestamp: OffsetDateTime (Optional)
     *             }
     *         ]
     *         setupInfo (Required): {
     *             dataSource: String (Required)
     *             topContributorCount: Integer (Optional)
     *             startTime: OffsetDateTime (Required)
     *             endTime: OffsetDateTime (Required)
     *         }
     *     }
     *     results (Required): [
     *          (Required){
     *             timestamp: OffsetDateTime (Required)
     *             value (Optional): {
     *                 isAnomaly: boolean (Required)
     *                 severity: double (Required)
     *                 score: double (Required)
     *                 interpretation (Optional): [
     *                      (Optional){
     *                         variable: String (Optional)
     *                         contributionScore: Double (Optional)
     *                         correlationChanges (Optional): {
     *                             changedVariables (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param options Request of multivariate anomaly detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detection results for the resultId value along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectMultivariateBatchAnomalyWithResponse(String modelId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.detectMultivariateBatchAnomalyWithResponse(modelId, options, requestOptions);
    }

    /**
     * Detect anomalies in the last point of the request body
     *
     * Submit a multivariate anomaly detection task with the modelId value of a trained model
     * and inference data. The inference data should be put into the request body in
     * JSON format. The request will finish synchronously and return the detection
     * immediately in the response body.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     variables (Required): [
     *          (Required){
     *             variable: String (Required)
     *             timestamps (Required): [
     *                 String (Required)
     *             ]
     *             values (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     ]
     *     topContributorCount: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     variableStates (Optional): [
     *          (Optional){
     *             variable: String (Optional)
     *             filledNARatio: Double (Optional)
     *             effectiveCount: Integer (Optional)
     *             firstTimestamp: OffsetDateTime (Optional)
     *             lastTimestamp: OffsetDateTime (Optional)
     *         }
     *     ]
     *     results (Optional): [
     *          (Optional){
     *             timestamp: OffsetDateTime (Required)
     *             value (Optional): {
     *                 isAnomaly: boolean (Required)
     *                 severity: double (Required)
     *                 score: double (Required)
     *                 interpretation (Optional): [
     *                      (Optional){
     *                         variable: String (Optional)
     *                         contributionScore: Double (Optional)
     *                         correlationChanges (Optional): {
     *                             changedVariables (Optional): [
     *                                 String (Optional)
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors (Optional): [
     *                  (Optional){
     *                     code: String (Required)
     *                     message: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param options Request of the last detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return results of the last detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectMultivariateLastAnomalyWithResponse(String modelId, BinaryData options,
        RequestOptions requestOptions) {
        return this.serviceClient.detectMultivariateLastAnomalyWithResponse(modelId, options, requestOptions);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * For asynchronous inference, get a multivariate anomaly detection result based on the
     * resultId value that the BatchDetectAnomaly API returns.
     *
     * @param resultId ID of a batch detection result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detection results for the resultId value.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultivariateDetectionResult getMultivariateBatchDetectionResult(String resultId) {
        // Generated convenience method for getMultivariateBatchDetectionResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMultivariateBatchDetectionResultWithResponse(resultId, requestOptions).getValue()
            .toObject(MultivariateDetectionResult.class);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * Create and train a multivariate anomaly detection model. The request must
     * include a source parameter to indicate an Azure Blob
     * Storage URI that's accessible to the service. There are two types of data input. The Blob Storage URI can point
     * to an Azure Blob
     * Storage folder that contains multiple CSV files, where each CSV file has
     * two columns, time stamp and variable. Or the Blob Storage URI can point to a single blob that contains a CSV file
     * that has all the variables and a
     * time stamp column.
     * The model object will be created and returned in the response, but the
     * training process happens asynchronously. To check the training status, call
     * GetMultivariateModel with the modelId value and check the status field in the
     * modelInfo object.
     *
     * @param modelInfo Model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of getting a model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnomalyDetectionModel trainMultivariateModel(ModelInfo modelInfo) {
        // Generated convenience method for trainMultivariateModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return trainMultivariateModelWithResponse(BinaryData.fromObject(modelInfo), requestOptions).getValue()
            .toObject(AnomalyDetectionModel.class);
    }

    /**
     * List Multivariate Models
     *
     * List models of a resource.
     *
     * @param skip The number of result items to skip.
     * @param top The number of result items to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnomalyDetectionModel> listMultivariateModels(Integer skip, Integer top) {
        // Generated convenience method for listMultivariateModels
        RequestOptions requestOptions = new RequestOptions();
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return serviceClient.listMultivariateModels(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(AnomalyDetectionModel.class));
    }

    /**
     * List Multivariate Models
     *
     * List models of a resource.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnomalyDetectionModel> listMultivariateModels() {
        // Generated convenience method for listMultivariateModels
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listMultivariateModels(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(AnomalyDetectionModel.class));
    }

    /**
     * Delete Multivariate Model
     *
     * Delete an existing multivariate model according to the modelId value.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModel(String modelId) {
        // Generated convenience method for deleteMultivariateModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteMultivariateModelWithResponse(modelId, requestOptions).getValue();
    }

    /**
     * Get Multivariate Model
     *
     * Get detailed information about the multivariate model, including the training status
     * and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information about the multivariate model, including the training status
     * and variables used in the model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnomalyDetectionModel getMultivariateModel(String modelId) {
        // Generated convenience method for getMultivariateModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMultivariateModelWithResponse(modelId, requestOptions).getValue()
            .toObject(AnomalyDetectionModel.class);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * Submit a multivariate anomaly detection task with the modelId value of a trained model
     * and inference data. The input schema should be the same with the training
     * request. The request will finish asynchronously and return a resultId value to
     * query the detection result. The request should be a source link to indicate an
     * externally accessible Azure Storage URI that either points to an Azure Blob
     * Storage folder or points to a CSV file in Azure Blob Storage.
     *
     * @param modelId Model identifier.
     * @param options Request of multivariate anomaly detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detection results for the resultId value.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultivariateDetectionResult detectMultivariateBatchAnomaly(String modelId,
        MultivariateBatchDetectionOptions options) {
        // Generated convenience method for detectMultivariateBatchAnomalyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return detectMultivariateBatchAnomalyWithResponse(modelId, BinaryData.fromObject(options), requestOptions)
            .getValue()
            .toObject(MultivariateDetectionResult.class);
    }

    /**
     * Detect anomalies in the last point of the request body
     *
     * Submit a multivariate anomaly detection task with the modelId value of a trained model
     * and inference data. The inference data should be put into the request body in
     * JSON format. The request will finish synchronously and return the detection
     * immediately in the response body.
     *
     * @param modelId Model identifier.
     * @param options Request of the last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return results of the last detection.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MultivariateLastDetectionResult detectMultivariateLastAnomaly(String modelId,
        MultivariateLastDetectionOptions options) {
        // Generated convenience method for detectMultivariateLastAnomalyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return detectMultivariateLastAnomalyWithResponse(modelId, BinaryData.fromObject(options), requestOptions)
            .getValue()
            .toObject(MultivariateLastDetectionResult.class);
    }
}
