// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Anomaly status and information.
 */
@Immutable
public final class AnomalyState implements JsonSerializable<AnomalyState> {

    /*
     * Time stamp for this anomaly.
     */
    @Generated
    private final OffsetDateTime timestamp;

    /*
     * Detailed value of this anomalous time stamp.
     */
    @Generated
    private AnomalyValue value;

    /*
     * Error message for the current time stamp.
     */
    @Generated
    private List<ErrorResponse> errors;

    /**
     * Creates an instance of AnomalyState class.
     *
     * @param timestamp the timestamp value to set.
     */
    @Generated
    private AnomalyState(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Get the timestamp property: Time stamp for this anomaly.
     *
     * @return the timestamp value.
     */
    @Generated
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the value property: Detailed value of this anomalous time stamp.
     *
     * @return the value value.
     */
    @Generated
    public AnomalyValue getValue() {
        return this.value;
    }

    /**
     * Get the errors property: Error message for the current time stamp.
     *
     * @return the errors value.
     */
    @Generated
    public List<ErrorResponse> getErrors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeJsonField("value", this.value);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnomalyState from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnomalyState if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnomalyState.
     */
    @Generated
    public static AnomalyState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime timestamp = null;
            AnomalyValue value = null;
            List<ErrorResponse> errors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("value".equals(fieldName)) {
                    value = AnomalyValue.fromJson(reader);
                } else if ("errors".equals(fieldName)) {
                    errors = reader.readArray(reader1 -> ErrorResponse.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AnomalyState deserializedAnomalyState = new AnomalyState(timestamp);
            deserializedAnomalyState.value = value;
            deserializedAnomalyState.errors = errors;
            return deserializedAnomalyState;
        });
    }
}
