// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of input time series points.
 */
@Fluent
public final class TimeSeriesPoint implements JsonSerializable<TimeSeriesPoint> {

    /*
     * Argument that indicates the time stamp of a data point (ISO8601 format).
     */
    @Generated
    private OffsetDateTime timestamp;

    /*
     * Measurement of that point.
     */
    @Generated
    private final double value;

    /**
     * Creates an instance of TimeSeriesPoint class.
     *
     * @param value the value value to set.
     */
    @Generated
    public TimeSeriesPoint(double value) {
        this.value = value;
    }

    /**
     * Get the timestamp property: Argument that indicates the time stamp of a data point (ISO8601 format).
     *
     * @return the timestamp value.
     */
    @Generated
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Argument that indicates the time stamp of a data point (ISO8601 format).
     *
     * @param timestamp the timestamp value to set.
     * @return the TimeSeriesPoint object itself.
     */
    @Generated
    public TimeSeriesPoint setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the value property: Measurement of that point.
     *
     * @return the value value.
     */
    @Generated
    public double getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("value", this.value);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeSeriesPoint from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeSeriesPoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TimeSeriesPoint.
     */
    @Generated
    public static TimeSeriesPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double value = 0.0;
            OffsetDateTime timestamp = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("value".equals(fieldName)) {
                    value = reader.getDouble();
                } else if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            TimeSeriesPoint deserializedTimeSeriesPoint = new TimeSeriesPoint(value);
            deserializedTimeSeriesPoint.timestamp = timestamp;
            return deserializedTimeSeriesPoint;
        });
    }
}
