// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Detailed information of the anomalous time stamp.
 */
@Immutable
public final class AnomalyValue implements JsonSerializable<AnomalyValue> {

    /*
     * True if an anomaly is detected at the current time stamp.
     */
    @Generated
    private final boolean isAnomaly;

    /*
     * Indicates the significance of the anomaly. The higher the severity, the more
     * significant the anomaly is.
     */
    @Generated
    private final double severity;

    /*
     * Raw anomaly score of severity, to help indicate the degree of abnormality.
     */
    @Generated
    private final double score;

    /*
     * Interpretation of this anomalous time stamp.
     */
    @Generated
    private List<AnomalyInterpretation> interpretation;

    /**
     * Creates an instance of AnomalyValue class.
     *
     * @param isAnomaly the isAnomaly value to set.
     * @param severity the severity value to set.
     * @param score the score value to set.
     */
    @Generated
    private AnomalyValue(boolean isAnomaly, double severity, double score) {
        this.isAnomaly = isAnomaly;
        this.severity = severity;
        this.score = score;
    }

    /**
     * Get the isAnomaly property: True if an anomaly is detected at the current time stamp.
     *
     * @return the isAnomaly value.
     */
    @Generated
    public boolean isAnomaly() {
        return this.isAnomaly;
    }

    /**
     * Get the severity property: Indicates the significance of the anomaly. The higher the severity, the more
     * significant the anomaly is.
     *
     * @return the severity value.
     */
    @Generated
    public double getSeverity() {
        return this.severity;
    }

    /**
     * Get the score property: Raw anomaly score of severity, to help indicate the degree of abnormality.
     *
     * @return the score value.
     */
    @Generated
    public double getScore() {
        return this.score;
    }

    /**
     * Get the interpretation property: Interpretation of this anomalous time stamp.
     *
     * @return the interpretation value.
     */
    @Generated
    public List<AnomalyInterpretation> getInterpretation() {
        return this.interpretation;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isAnomaly", this.isAnomaly);
        jsonWriter.writeDoubleField("severity", this.severity);
        jsonWriter.writeDoubleField("score", this.score);
        jsonWriter.writeArrayField("interpretation", this.interpretation,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnomalyValue from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnomalyValue if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnomalyValue.
     */
    @Generated
    public static AnomalyValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean isAnomaly = false;
            double severity = 0.0;
            double score = 0.0;
            List<AnomalyInterpretation> interpretation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("isAnomaly".equals(fieldName)) {
                    isAnomaly = reader.getBoolean();
                } else if ("severity".equals(fieldName)) {
                    severity = reader.getDouble();
                } else if ("score".equals(fieldName)) {
                    score = reader.getDouble();
                } else if ("interpretation".equals(fieldName)) {
                    interpretation = reader.readArray(reader1 -> AnomalyInterpretation.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            AnomalyValue deserializedAnomalyValue = new AnomalyValue(isAnomaly, severity, score);
            deserializedAnomalyValue.interpretation = interpretation;
            return deserializedAnomalyValue;
        });
    }
}
