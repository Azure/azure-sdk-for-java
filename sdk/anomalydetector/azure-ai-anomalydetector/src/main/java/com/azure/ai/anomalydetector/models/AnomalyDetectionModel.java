// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Response of getting a model.
 */
@Immutable
public final class AnomalyDetectionModel implements JsonSerializable<AnomalyDetectionModel> {

    /*
     * Model identifier.
     */
    @Generated
    private String modelId;

    /*
     * Date and time (UTC) when the model was created.
     */
    @Generated
    private final OffsetDateTime createdTime;

    /*
     * Date and time (UTC) when the model was last updated.
     */
    @Generated
    private final OffsetDateTime lastUpdatedTime;

    /*
     * Training result of a model, including its status, errors, and diagnostics
     * information.
     */
    @Generated
    private ModelInfo modelInfo;

    /**
     * Creates an instance of AnomalyDetectionModel class.
     *
     * @param createdTime the createdTime value to set.
     * @param lastUpdatedTime the lastUpdatedTime value to set.
     */
    @Generated
    private AnomalyDetectionModel(OffsetDateTime createdTime, OffsetDateTime lastUpdatedTime) {
        this.createdTime = createdTime;
        this.lastUpdatedTime = lastUpdatedTime;
    }

    /**
     * Get the modelId property: Model identifier.
     *
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the createdTime property: Date and time (UTC) when the model was created.
     *
     * @return the createdTime value.
     */
    @Generated
    public OffsetDateTime getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Get the lastUpdatedTime property: Date and time (UTC) when the model was last updated.
     *
     * @return the lastUpdatedTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Get the modelInfo property: Training result of a model, including its status, errors, and diagnostics
     * information.
     *
     * @return the modelInfo value.
     */
    @Generated
    public ModelInfo getModelInfo() {
        return this.modelInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdTime",
            this.createdTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTime));
        jsonWriter.writeStringField("lastUpdatedTime",
            this.lastUpdatedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedTime));
        jsonWriter.writeJsonField("modelInfo", this.modelInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnomalyDetectionModel from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnomalyDetectionModel if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnomalyDetectionModel.
     */
    @Generated
    public static AnomalyDetectionModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelId = null;
            OffsetDateTime createdTime = null;
            OffsetDateTime lastUpdatedTime = null;
            ModelInfo modelInfo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("createdTime".equals(fieldName)) {
                    createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedTime".equals(fieldName)) {
                    lastUpdatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("modelInfo".equals(fieldName)) {
                    modelInfo = ModelInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AnomalyDetectionModel deserializedAnomalyDetectionModel
                = new AnomalyDetectionModel(createdTime, lastUpdatedTime);
            deserializedAnomalyDetectionModel.modelId = modelId;
            deserializedAnomalyDetectionModel.modelInfo = modelInfo;
            return deserializedAnomalyDetectionModel;
        });
    }
}
