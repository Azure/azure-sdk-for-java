// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.anomalydetector.implementation;

import com.azure.ai.anomalydetector.models.AnomalyDetectorErrorException;
import com.azure.ai.anomalydetector.models.ChangePointDetectRequest;
import com.azure.ai.anomalydetector.models.ChangePointDetectResponse;
import com.azure.ai.anomalydetector.models.DetectAnomalyResponse;
import com.azure.ai.anomalydetector.models.DetectRequest;
import com.azure.ai.anomalydetector.models.DetectionRequest;
import com.azure.ai.anomalydetector.models.DetectionResult;
import com.azure.ai.anomalydetector.models.EntireDetectResponse;
import com.azure.ai.anomalydetector.models.ErrorResponseException;
import com.azure.ai.anomalydetector.models.LastDetectResponse;
import com.azure.ai.anomalydetector.models.Model;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.ModelList;
import com.azure.ai.anomalydetector.models.ModelSnapshot;
import com.azure.ai.anomalydetector.models.TrainMultivariateModelResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AnomalyDetectorClient type. */
public final class AnomalyDetectorClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AnomalyDetectorClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     */
    public AnomalyDetectorClientImpl(String endpoint) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     */
    public AnomalyDetectorClientImpl(HttpPipeline httpPipeline, String endpoint) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     */
    public AnomalyDetectorClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.service =
                RestProxy.create(AnomalyDetectorClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AnomalyDetectorClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/anomalydetector/v1.1-preview")
    @ServiceInterface(name = "AnomalyDetectorClien")
    private interface AnomalyDetectorClientService {
        @Post("/timeseries/entire/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<EntireDetectResponse>> detectEntireSeries(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<LastDetectResponse>> detectLastPoint(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/changepoint/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<ChangePointDetectResponse>> detectChangePoint(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") ChangePointDetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<TrainMultivariateModelResponse> trainMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") ModelInfo modelRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Model>> getMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/multivariate/models/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models/{modelId}/detect")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<DetectAnomalyResponse> detectAnomaly(
                @HostParam("Endpoint") String endpoint,
                @PathParam("modelId") UUID modelId,
                @BodyParam("application/json") DetectionRequest detectionRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/results/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DetectionResult>> getDetectionResult(
                @HostParam("Endpoint") String endpoint,
                @PathParam("resultId") UUID resultId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> exportModel(
                @HostParam("Endpoint") String endpoint,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ModelList>> listMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @QueryParam("$skip") Integer skip,
                @QueryParam("$top") Integer top,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ModelList>> listMultivariateModelNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntireDetectResponse>> detectEntireSeriesWithResponseAsync(DetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.detectEntireSeries(this.getEndpoint(), body, accept, context));
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntireDetectResponse>> detectEntireSeriesWithResponseAsync(
            DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectEntireSeries(this.getEndpoint(), body, accept, context);
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntireDetectResponse> detectEntireSeriesAsync(DetectRequest body) {
        return detectEntireSeriesWithResponseAsync(body)
                .flatMap(
                        (Response<EntireDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntireDetectResponse> detectEntireSeriesAsync(DetectRequest body, Context context) {
        return detectEntireSeriesWithResponseAsync(body, context)
                .flatMap(
                        (Response<EntireDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EntireDetectResponse detectEntireSeries(DetectRequest body) {
        return detectEntireSeriesAsync(body).block();
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EntireDetectResponse> detectEntireSeriesWithResponse(DetectRequest body, Context context) {
        return detectEntireSeriesWithResponseAsync(body, context).block();
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectResponse>> detectLastPointWithResponseAsync(DetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.detectLastPoint(this.getEndpoint(), body, accept, context));
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectResponse>> detectLastPointWithResponseAsync(DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectLastPoint(this.getEndpoint(), body, accept, context);
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectResponse> detectLastPointAsync(DetectRequest body) {
        return detectLastPointWithResponseAsync(body)
                .flatMap(
                        (Response<LastDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectResponse> detectLastPointAsync(DetectRequest body, Context context) {
        return detectLastPointWithResponseAsync(body, context)
                .flatMap(
                        (Response<LastDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectResponse detectLastPoint(DetectRequest body) {
        return detectLastPointAsync(body).block();
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectResponse> detectLastPointWithResponse(DetectRequest body, Context context) {
        return detectLastPointWithResponseAsync(body, context).block();
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChangePointDetectResponse>> detectChangePointWithResponseAsync(ChangePointDetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.detectChangePoint(this.getEndpoint(), body, accept, context));
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChangePointDetectResponse>> detectChangePointWithResponseAsync(
            ChangePointDetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectChangePoint(this.getEndpoint(), body, accept, context);
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChangePointDetectResponse> detectChangePointAsync(ChangePointDetectRequest body) {
        return detectChangePointWithResponseAsync(body)
                .flatMap(
                        (Response<ChangePointDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChangePointDetectResponse> detectChangePointAsync(ChangePointDetectRequest body, Context context) {
        return detectChangePointWithResponseAsync(body, context)
                .flatMap(
                        (Response<ChangePointDetectResponse> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChangePointDetectResponse detectChangePoint(ChangePointDetectRequest body) {
        return detectChangePointAsync(body).block();
    }

    /**
     * Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChangePointDetectResponse> detectChangePointWithResponse(
            ChangePointDetectRequest body, Context context) {
        return detectChangePointWithResponseAsync(body, context).block();
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainMultivariateModelResponse> trainMultivariateModelWithResponseAsync(ModelInfo modelRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.trainMultivariateModel(this.getEndpoint(), modelRequest, accept, context));
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainMultivariateModelResponse> trainMultivariateModelWithResponseAsync(
            ModelInfo modelRequest, Context context) {
        final String accept = "application/json";
        return service.trainMultivariateModel(this.getEndpoint(), modelRequest, accept, context);
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainMultivariateModelAsync(ModelInfo modelRequest) {
        return trainMultivariateModelWithResponseAsync(modelRequest)
                .flatMap((TrainMultivariateModelResponse res) -> Mono.empty());
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainMultivariateModelAsync(ModelInfo modelRequest, Context context) {
        return trainMultivariateModelWithResponseAsync(modelRequest, context)
                .flatMap((TrainMultivariateModelResponse res) -> Mono.empty());
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainMultivariateModel(ModelInfo modelRequest) {
        trainMultivariateModelAsync(modelRequest).block();
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * @param modelRequest Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainMultivariateModelResponse trainMultivariateModelWithResponse(ModelInfo modelRequest, Context context) {
        return trainMultivariateModelWithResponseAsync(modelRequest, context).block();
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Model>> getMultivariateModelWithResponseAsync(UUID modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getMultivariateModel(this.getEndpoint(), modelId, accept, context));
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Model>> getMultivariateModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.getMultivariateModel(this.getEndpoint(), modelId, accept, context);
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Model> getMultivariateModelAsync(UUID modelId) {
        return getMultivariateModelWithResponseAsync(modelId)
                .flatMap(
                        (Response<Model> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Model> getMultivariateModelAsync(UUID modelId, Context context) {
        return getMultivariateModelWithResponseAsync(modelId, context)
                .flatMap(
                        (Response<Model> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model getMultivariateModel(UUID modelId) {
        return getMultivariateModelAsync(modelId).block();
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Model> getMultivariateModelWithResponse(UUID modelId, Context context) {
        return getMultivariateModelWithResponseAsync(modelId, context).block();
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(UUID modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.deleteMultivariateModel(this.getEndpoint(), modelId, accept, context));
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.deleteMultivariateModel(this.getEndpoint(), modelId, accept, context);
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultivariateModelAsync(UUID modelId) {
        return deleteMultivariateModelWithResponseAsync(modelId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultivariateModelAsync(UUID modelId, Context context) {
        return deleteMultivariateModelWithResponseAsync(modelId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModel(UUID modelId) {
        deleteMultivariateModelAsync(modelId).block();
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelWithResponse(UUID modelId, Context context) {
        return deleteMultivariateModelWithResponseAsync(modelId, context).block();
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectAnomalyResponse> detectAnomalyWithResponseAsync(UUID modelId, DetectionRequest detectionRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.detectAnomaly(this.getEndpoint(), modelId, detectionRequest, accept, context));
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectAnomalyResponse> detectAnomalyWithResponseAsync(
            UUID modelId, DetectionRequest detectionRequest, Context context) {
        final String accept = "application/json";
        return service.detectAnomaly(this.getEndpoint(), modelId, detectionRequest, accept, context);
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> detectAnomalyAsync(UUID modelId, DetectionRequest detectionRequest) {
        return detectAnomalyWithResponseAsync(modelId, detectionRequest)
                .flatMap((DetectAnomalyResponse res) -> Mono.empty());
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> detectAnomalyAsync(UUID modelId, DetectionRequest detectionRequest, Context context) {
        return detectAnomalyWithResponseAsync(modelId, detectionRequest, context)
                .flatMap((DetectAnomalyResponse res) -> Mono.empty());
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void detectAnomaly(UUID modelId, DetectionRequest detectionRequest) {
        detectAnomalyAsync(modelId, detectionRequest).block();
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * @param modelId Model identifier.
     * @param detectionRequest Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectAnomalyResponse detectAnomalyWithResponse(
            UUID modelId, DetectionRequest detectionRequest, Context context) {
        return detectAnomalyWithResponseAsync(modelId, detectionRequest, context).block();
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DetectionResult>> getDetectionResultWithResponseAsync(UUID resultId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getDetectionResult(this.getEndpoint(), resultId, accept, context));
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DetectionResult>> getDetectionResultWithResponseAsync(UUID resultId, Context context) {
        final String accept = "application/json";
        return service.getDetectionResult(this.getEndpoint(), resultId, accept, context);
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectionResult> getDetectionResultAsync(UUID resultId) {
        return getDetectionResultWithResponseAsync(resultId)
                .flatMap(
                        (Response<DetectionResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectionResult> getDetectionResultAsync(UUID resultId, Context context) {
        return getDetectionResultWithResponseAsync(resultId, context)
                .flatMap(
                        (Response<DetectionResult> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectionResult getDetectionResult(UUID resultId) {
        return getDetectionResultAsync(resultId).block();
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DetectionResult> getDetectionResultWithResponse(UUID resultId, Context context) {
        return getDetectionResultWithResponseAsync(resultId, context).block();
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> exportModelWithResponseAsync(UUID modelId) {
        final String accept = "application/zip";
        return FluxUtil.withContext(context -> service.exportModel(this.getEndpoint(), modelId, accept, context));
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> exportModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/zip";
        return service.exportModel(this.getEndpoint(), modelId, accept, context);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> exportModelAsync(UUID modelId) {
        return exportModelWithResponseAsync(modelId).flatMapMany(StreamResponse::getValue);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> exportModelAsync(UUID modelId, Context context) {
        return exportModelWithResponseAsync(modelId, context).flatMapMany(StreamResponse::getValue);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream exportModel(UUID modelId) {
        Iterator<ByteBufferBackedInputStream> iterator =
                exportModelAsync(modelId).map(ByteBufferBackedInputStream::new).toStream().iterator();
        Enumeration<InputStream> enumeration =
                new Enumeration<InputStream>() {
                    @Override
                    public boolean hasMoreElements() {
                        return iterator.hasNext();
                    }

                    @Override
                    public InputStream nextElement() {
                        return iterator.next();
                    }
                };
        return new SequenceInputStream(enumeration);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StreamResponse exportModelWithResponse(UUID modelId, Context context) {
        return exportModelWithResponseAsync(modelId, context).block();
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelSinglePageAsync(Integer skip, Integer top) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listMultivariateModel(this.getEndpoint(), skip, top, accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelSinglePageAsync(
            Integer skip, Integer top, Context context) {
        final String accept = "application/json";
        return service.listMultivariateModel(this.getEndpoint(), skip, top, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSnapshot> listMultivariateModelAsync(Integer skip, Integer top) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(skip, top),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink));
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSnapshot> listMultivariateModelAsync(Integer skip, Integer top, Context context) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(skip, top, context),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink, context));
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModel(Integer skip, Integer top) {
        return new PagedIterable<>(listMultivariateModelAsync(skip, top));
    }

    /**
     * List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModel(Integer skip, Integer top, Context context) {
        return new PagedIterable<>(listMultivariateModelAsync(skip, top, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listMultivariateModelNext(nextLink, this.getEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to the list models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.listMultivariateModelNext(nextLink, this.getEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
