// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.anomalydetector.implementation;

import com.azure.ai.anomalydetector.models.AnomalyDetectorErrorException;
import com.azure.ai.anomalydetector.models.ChangePointDetectRequest;
import com.azure.ai.anomalydetector.models.ChangePointDetectResponse;
import com.azure.ai.anomalydetector.models.DetectAnomalyResponse;
import com.azure.ai.anomalydetector.models.DetectRequest;
import com.azure.ai.anomalydetector.models.DetectionRequest;
import com.azure.ai.anomalydetector.models.DetectionResult;
import com.azure.ai.anomalydetector.models.EntireDetectResponse;
import com.azure.ai.anomalydetector.models.ErrorResponseException;
import com.azure.ai.anomalydetector.models.LastDetectResponse;
import com.azure.ai.anomalydetector.models.LastDetectionRequest;
import com.azure.ai.anomalydetector.models.LastDetectionResult;
import com.azure.ai.anomalydetector.models.Model;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.ModelList;
import com.azure.ai.anomalydetector.models.ModelSnapshot;
import com.azure.ai.anomalydetector.models.TrainMultivariateModelResponse;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.UUID;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AnomalyDetectorClient type. */
public final class AnomalyDetectorClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AnomalyDetectorClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Anomaly Detector API version (for example, v1.0). */
    private final String apiVersion;

    /**
     * Gets Anomaly Detector API version (for example, v1.0).
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Anomaly Detector API version (for example, v1.0).
     */
    public AnomalyDetectorClientImpl(String endpoint, String apiVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                apiVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Anomaly Detector API version (for example, v1.0).
     */
    public AnomalyDetectorClientImpl(HttpPipeline httpPipeline, String endpoint, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, apiVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param apiVersion Anomaly Detector API version (for example, v1.0).
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint, String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.apiVersion = apiVersion;
        this.service =
                RestProxy.create(AnomalyDetectorClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AnomalyDetectorClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/anomalydetector/{ApiVersion}")
    @ServiceInterface(name = "AnomalyDetectorClien")
    public interface AnomalyDetectorClientService {
        @Post("/timeseries/entire/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<EntireDetectResponse>> detectEntireSeries(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/entire/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Response<EntireDetectResponse> detectEntireSeriesSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<LastDetectResponse>> detectLastPoint(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Response<LastDetectResponse> detectLastPointSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") DetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/changepoint/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Mono<Response<ChangePointDetectResponse>> detectChangePoint(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") ChangePointDetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/timeseries/changepoint/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(AnomalyDetectorErrorException.class)
        Response<ChangePointDetectResponse> detectChangePointSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") ChangePointDetectRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<TrainMultivariateModelResponse> trainMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") ModelInfo body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        TrainMultivariateModelResponse trainMultivariateModelSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") ModelInfo body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ModelList>> listMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @QueryParam("$skip") Integer skip,
                @QueryParam("$top") Integer top,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<ModelList> listMultivariateModelSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @QueryParam("$skip") Integer skip,
                @QueryParam("$top") Integer top,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Model>> getMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<Model> getMultivariateModelSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/multivariate/models/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> deleteMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/multivariate/models/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<Void> deleteMultivariateModelSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models/{modelId}/detect")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<DetectAnomalyResponse> detectAnomaly(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @BodyParam("application/json") DetectionRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models/{modelId}/detect")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        DetectAnomalyResponse detectAnomalySync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @BodyParam("application/json") DetectionRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/results/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<DetectionResult>> getDetectionResult(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("resultId") UUID resultId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/results/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<DetectionResult> getDetectionResultSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("resultId") UUID resultId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<BinaryData>> exportModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/multivariate/models/{modelId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<BinaryData> exportModelSync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models/{modelId}/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<LastDetectionResult>> lastDetectAnomaly(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @BodyParam("application/json") LastDetectionRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/multivariate/models/{modelId}/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<LastDetectionResult> lastDetectAnomalySync(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") UUID modelId,
                @BodyParam("application/json") LastDetectionRequest body,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<ModelList>> listMultivariateModelNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<ModelList> listMultivariateModelNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntireDetectResponse>> detectEntireSeriesWithResponseAsync(DetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.detectEntireSeries(this.getEndpoint(), this.getApiVersion(), body, accept, context));
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<EntireDetectResponse>> detectEntireSeriesWithResponseAsync(
            DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectEntireSeries(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntireDetectResponse> detectEntireSeriesAsync(DetectRequest body) {
        return detectEntireSeriesWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<EntireDetectResponse> detectEntireSeriesAsync(DetectRequest body, Context context) {
        return detectEntireSeriesWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EntireDetectResponse> detectEntireSeriesSyncWithResponse(DetectRequest body) {
        final String accept = "application/json";
        return service.detectEntireSeriesSync(this.getEndpoint(), this.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EntireDetectResponse> detectEntireSeriesSyncWithResponse(DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectEntireSeriesSync(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EntireDetectResponse detectEntireSeriesSync(DetectRequest body) {
        return detectEntireSeriesSyncWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Detect anomalies for the entire series in batch.
     *
     * <p>This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of entire anomaly detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EntireDetectResponse detectEntireSeriesSync(DetectRequest body, Context context) {
        return detectEntireSeriesSyncWithResponse(body, context).getValue();
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectResponse>> detectLastPointWithResponseAsync(DetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.detectLastPoint(this.getEndpoint(), this.getApiVersion(), body, accept, context));
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectResponse>> detectLastPointWithResponseAsync(DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectLastPoint(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectResponse> detectLastPointAsync(DetectRequest body) {
        return detectLastPointWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectResponse> detectLastPointAsync(DetectRequest body, Context context) {
        return detectLastPointWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectResponse> detectLastPointSyncWithResponse(DetectRequest body) {
        final String accept = "application/json";
        return service.detectLastPointSync(this.getEndpoint(), this.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectResponse> detectLastPointSyncWithResponse(DetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectLastPointSync(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectResponse detectLastPointSync(DetectRequest body) {
        return detectLastPointSyncWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * <p>This operation generates a model using points before the latest one. With this method, only historical points
     * are used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of last anomaly detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectResponse detectLastPointSync(DetectRequest body, Context context) {
        return detectLastPointSyncWithResponse(body, context).getValue();
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChangePointDetectResponse>> detectChangePointWithResponseAsync(ChangePointDetectRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.detectChangePoint(this.getEndpoint(), this.getApiVersion(), body, accept, context));
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ChangePointDetectResponse>> detectChangePointWithResponseAsync(
            ChangePointDetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectChangePoint(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChangePointDetectResponse> detectChangePointAsync(ChangePointDetectRequest body) {
        return detectChangePointWithResponseAsync(body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ChangePointDetectResponse> detectChangePointAsync(ChangePointDetectRequest body, Context context) {
        return detectChangePointWithResponseAsync(body, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChangePointDetectResponse> detectChangePointSyncWithResponse(ChangePointDetectRequest body) {
        final String accept = "application/json";
        return service.detectChangePointSync(this.getEndpoint(), this.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ChangePointDetectResponse> detectChangePointSyncWithResponse(
            ChangePointDetectRequest body, Context context) {
        final String accept = "application/json";
        return service.detectChangePointSync(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChangePointDetectResponse detectChangePointSync(ChangePointDetectRequest body) {
        return detectChangePointSyncWithResponse(body, Context.NONE).getValue();
    }

    /**
     * Detect change point for the entire series
     *
     * <p>Evaluate change point score of every series point.
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws AnomalyDetectorErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of change point detection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ChangePointDetectResponse detectChangePointSync(ChangePointDetectRequest body, Context context) {
        return detectChangePointSyncWithResponse(body, context).getValue();
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainMultivariateModelResponse> trainMultivariateModelWithResponseAsync(ModelInfo body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.trainMultivariateModel(
                                this.getEndpoint(), this.getApiVersion(), body, accept, context));
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TrainMultivariateModelResponse> trainMultivariateModelWithResponseAsync(
            ModelInfo body, Context context) {
        final String accept = "application/json";
        return service.trainMultivariateModel(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainMultivariateModelAsync(ModelInfo body) {
        return trainMultivariateModelWithResponseAsync(body).flatMap(ignored -> Mono.empty());
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> trainMultivariateModelAsync(ModelInfo body, Context context) {
        return trainMultivariateModelWithResponseAsync(body, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainMultivariateModelResponse trainMultivariateModelSyncWithResponse(ModelInfo body) {
        final String accept = "application/json";
        return service.trainMultivariateModelSync(this.getEndpoint(), this.getApiVersion(), body, accept, Context.NONE);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TrainMultivariateModelResponse trainMultivariateModelSyncWithResponse(ModelInfo body, Context context) {
        final String accept = "application/json";
        return service.trainMultivariateModelSync(this.getEndpoint(), this.getApiVersion(), body, accept, context);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainMultivariateModelSync(ModelInfo body) {
        trainMultivariateModelSyncWithResponse(body, Context.NONE);
    }

    /**
     * Train a Multivariate Anomaly Detection Model
     *
     * <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to
     * indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series
     * used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in
     * which the first column is timestamp and the second column is value.
     *
     * @param body Training request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void trainMultivariateModelSync(ModelInfo body, Context context) {
        trainMultivariateModelSyncWithResponse(body, context);
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelSinglePageAsync(Integer skip, Integer top) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listMultivariateModel(
                                        this.getEndpoint(), this.getApiVersion(), skip, top, accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelSinglePageAsync(
            Integer skip, Integer top, Context context) {
        final String accept = "application/json";
        return service.listMultivariateModel(this.getEndpoint(), this.getApiVersion(), skip, top, accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSnapshot> listMultivariateModelAsync(Integer skip, Integer top) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(skip, top),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink));
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ModelSnapshot> listMultivariateModelAsync(Integer skip, Integer top, Context context) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(skip, top, context),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink, context));
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ModelSnapshot> listMultivariateModelSyncSinglePage(Integer skip, Integer top) {
        final String accept = "application/json";
        Response<ModelList> res =
                service.listMultivariateModelSync(
                        this.getEndpoint(), this.getApiVersion(), skip, top, accept, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().getModels(),
                res.getValue().getNextLink(),
                null);
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ModelSnapshot> listMultivariateModelSyncSinglePage(
            Integer skip, Integer top, Context context) {
        final String accept = "application/json";
        Response<ModelList> res =
                service.listMultivariateModelSync(this.getEndpoint(), this.getApiVersion(), skip, top, accept, context);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().getModels(),
                res.getValue().getNextLink(),
                null);
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModelSync(Integer skip, Integer top) {
        return new PagedIterable<>(
                () -> listMultivariateModelSyncSinglePage(skip, top, Context.NONE),
                nextLink -> listMultivariateModelNextSyncSinglePage(nextLink));
    }

    /**
     * List Multivariate Models
     *
     * <p>List models of a subscription.
     *
     * @param skip $skip indicates how many models will be skipped.
     * @param top $top indicates how many models will be fetched.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ModelSnapshot> listMultivariateModelSync(Integer skip, Integer top, Context context) {
        return new PagedIterable<>(
                () -> listMultivariateModelSyncSinglePage(skip, top, context),
                nextLink -> listMultivariateModelNextSyncSinglePage(nextLink, context));
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Model>> getMultivariateModelWithResponseAsync(UUID modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getMultivariateModel(
                                this.getEndpoint(), this.getApiVersion(), modelId, accept, context));
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Model>> getMultivariateModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.getMultivariateModel(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Model> getMultivariateModelAsync(UUID modelId) {
        return getMultivariateModelWithResponseAsync(modelId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Model> getMultivariateModelAsync(UUID modelId, Context context) {
        return getMultivariateModelWithResponseAsync(modelId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Model> getMultivariateModelSyncWithResponse(UUID modelId) {
        final String accept = "application/json";
        return service.getMultivariateModelSync(
                this.getEndpoint(), this.getApiVersion(), modelId, accept, Context.NONE);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Model> getMultivariateModelSyncWithResponse(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.getMultivariateModelSync(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model getMultivariateModelSync(UUID modelId) {
        return getMultivariateModelSyncWithResponse(modelId, Context.NONE).getValue();
    }

    /**
     * Get Multivariate Model
     *
     * <p>Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return detailed information of multivariate model, including the training status and variables used in the
     *     model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model getMultivariateModelSync(UUID modelId, Context context) {
        return getMultivariateModelSyncWithResponse(modelId, context).getValue();
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(UUID modelId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteMultivariateModel(
                                this.getEndpoint(), this.getApiVersion(), modelId, accept, context));
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.deleteMultivariateModel(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultivariateModelAsync(UUID modelId) {
        return deleteMultivariateModelWithResponseAsync(modelId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteMultivariateModelAsync(UUID modelId, Context context) {
        return deleteMultivariateModelWithResponseAsync(modelId, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelSyncWithResponse(UUID modelId) {
        final String accept = "application/json";
        return service.deleteMultivariateModelSync(
                this.getEndpoint(), this.getApiVersion(), modelId, accept, Context.NONE);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelSyncWithResponse(UUID modelId, Context context) {
        final String accept = "application/json";
        return service.deleteMultivariateModelSync(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModelSync(UUID modelId) {
        deleteMultivariateModelSyncWithResponse(modelId, Context.NONE);
    }

    /**
     * Delete Multivariate Model
     *
     * <p>Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteMultivariateModelSync(UUID modelId, Context context) {
        deleteMultivariateModelSyncWithResponse(modelId, context);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectAnomalyResponse> detectAnomalyWithResponseAsync(UUID modelId, DetectionRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.detectAnomaly(
                                this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context));
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectAnomalyResponse> detectAnomalyWithResponseAsync(
            UUID modelId, DetectionRequest body, Context context) {
        final String accept = "application/json";
        return service.detectAnomaly(this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> detectAnomalyAsync(UUID modelId, DetectionRequest body) {
        return detectAnomalyWithResponseAsync(modelId, body).flatMap(ignored -> Mono.empty());
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> detectAnomalyAsync(UUID modelId, DetectionRequest body, Context context) {
        return detectAnomalyWithResponseAsync(modelId, body, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectAnomalyResponse detectAnomalySyncWithResponse(UUID modelId, DetectionRequest body) {
        final String accept = "application/json";
        return service.detectAnomalySync(this.getEndpoint(), this.getApiVersion(), modelId, body, accept, Context.NONE);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectAnomalyResponse detectAnomalySyncWithResponse(UUID modelId, DetectionRequest body, Context context) {
        final String accept = "application/json";
        return service.detectAnomalySync(this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void detectAnomalySync(UUID modelId, DetectionRequest body) {
        detectAnomalySyncWithResponse(modelId, body, Context.NONE);
    }

    /**
     * Detect Multivariate Anomaly
     *
     * <p>Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the
     * same with the training request. Thus request will be complete asynchronously and will return a resultId for
     * querying the detection result.The request should be a source link to indicate an externally accessible Azure
     * storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped
     * into one single file. Each time-series will be as follows: the first column is timestamp and the second column is
     * value.
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void detectAnomalySync(UUID modelId, DetectionRequest body, Context context) {
        detectAnomalySyncWithResponse(modelId, body, context);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DetectionResult>> getDetectionResultWithResponseAsync(UUID resultId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getDetectionResult(
                                this.getEndpoint(), this.getApiVersion(), resultId, accept, context));
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<DetectionResult>> getDetectionResultWithResponseAsync(UUID resultId, Context context) {
        final String accept = "application/json";
        return service.getDetectionResult(this.getEndpoint(), this.getApiVersion(), resultId, accept, context);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectionResult> getDetectionResultAsync(UUID resultId) {
        return getDetectionResultWithResponseAsync(resultId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectionResult> getDetectionResultAsync(UUID resultId, Context context) {
        return getDetectionResultWithResponseAsync(resultId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DetectionResult> getDetectionResultSyncWithResponse(UUID resultId) {
        final String accept = "application/json";
        return service.getDetectionResultSync(this.getEndpoint(), this.getApiVersion(), resultId, accept, Context.NONE);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DetectionResult> getDetectionResultSyncWithResponse(UUID resultId, Context context) {
        final String accept = "application/json";
        return service.getDetectionResultSync(this.getEndpoint(), this.getApiVersion(), resultId, accept, context);
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectionResult getDetectionResultSync(UUID resultId) {
        return getDetectionResultSyncWithResponse(resultId, Context.NONE).getValue();
    }

    /**
     * Get Multivariate Anomaly Detection Result
     *
     * <p>Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * @param resultId Result identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectionResult getDetectionResultSync(UUID resultId, Context context) {
        return getDetectionResultSyncWithResponse(resultId, context).getValue();
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> exportModelWithResponseAsync(UUID modelId) {
        final String accept = "application/zip, application/json";
        return FluxUtil.withContext(
                context -> service.exportModel(this.getEndpoint(), this.getApiVersion(), modelId, accept, context));
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> exportModelWithResponseAsync(UUID modelId, Context context) {
        final String accept = "application/zip, application/json";
        return service.exportModel(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> exportModelAsync(UUID modelId) {
        return exportModelWithResponseAsync(modelId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> exportModelAsync(UUID modelId, Context context) {
        return exportModelWithResponseAsync(modelId, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> exportModelSyncWithResponse(UUID modelId) {
        final String accept = "application/zip, application/json";
        return service.exportModelSync(this.getEndpoint(), this.getApiVersion(), modelId, accept, Context.NONE);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> exportModelSyncWithResponse(UUID modelId, Context context) {
        final String accept = "application/zip, application/json";
        return service.exportModelSync(this.getEndpoint(), this.getApiVersion(), modelId, accept, context);
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData exportModelSync(UUID modelId) {
        return exportModelSyncWithResponse(modelId, Context.NONE).getValue();
    }

    /**
     * Export Multivariate Anomaly Detection Model as Zip file
     *
     * <p>Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData exportModelSync(UUID modelId, Context context) {
        return exportModelSyncWithResponse(modelId, context).getValue();
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectionResult>> lastDetectAnomalyWithResponseAsync(
            UUID modelId, LastDetectionRequest body) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.lastDetectAnomaly(
                                this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context));
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<LastDetectionResult>> lastDetectAnomalyWithResponseAsync(
            UUID modelId, LastDetectionRequest body, Context context) {
        final String accept = "application/json";
        return service.lastDetectAnomaly(this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectionResult> lastDetectAnomalyAsync(UUID modelId, LastDetectionRequest body) {
        return lastDetectAnomalyWithResponseAsync(modelId, body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LastDetectionResult> lastDetectAnomalyAsync(UUID modelId, LastDetectionRequest body, Context context) {
        return lastDetectAnomalyWithResponseAsync(modelId, body, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectionResult> lastDetectAnomalySyncWithResponse(UUID modelId, LastDetectionRequest body) {
        final String accept = "application/json";
        return service.lastDetectAnomalySync(
                this.getEndpoint(), this.getApiVersion(), modelId, body, accept, Context.NONE);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LastDetectionResult> lastDetectAnomalySyncWithResponse(
            UUID modelId, LastDetectionRequest body, Context context) {
        final String accept = "application/json";
        return service.lastDetectAnomalySync(this.getEndpoint(), this.getApiVersion(), modelId, body, accept, context);
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectionResult lastDetectAnomalySync(UUID modelId, LastDetectionRequest body) {
        return lastDetectAnomalySyncWithResponse(modelId, body, Context.NONE).getValue();
    }

    /**
     * Detect anomalies in the last a few points of the request body.
     *
     * <p>Synchronized API for anomaly detection.
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LastDetectionResult lastDetectAnomalySync(UUID modelId, LastDetectionRequest body, Context context) {
        return lastDetectAnomalySyncWithResponse(modelId, body, context).getValue();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listMultivariateModelNext(
                                        nextLink, this.getEndpoint(), this.getApiVersion(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.listMultivariateModelNext(nextLink, this.getEndpoint(), this.getApiVersion(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getModels(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ModelSnapshot> listMultivariateModelNextSyncSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<ModelList> res =
                service.listMultivariateModelNextSync(
                        nextLink, this.getEndpoint(), this.getApiVersion(), accept, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().getModels(),
                res.getValue().getNextLink(),
                null);
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of listing models along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PagedResponse<ModelSnapshot> listMultivariateModelNextSyncSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<ModelList> res =
                service.listMultivariateModelNextSync(
                        nextLink, this.getEndpoint(), this.getApiVersion(), accept, context);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                res.getValue().getModels(),
                res.getValue().getNextLink(),
                null);
    }
}
