// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Diagnostics information to help inspect the states of a model or variable.
 */
@Immutable
public final class DiagnosticsInfo implements JsonSerializable<DiagnosticsInfo> {

    /*
     * Model status.
     */
    @Generated
    private ModelState modelState;

    /*
     * Variable status.
     */
    @Generated
    private List<VariableState> variableStates;

    /**
     * Creates an instance of DiagnosticsInfo class.
     */
    @Generated
    private DiagnosticsInfo() {
    }

    /**
     * Get the modelState property: Model status.
     *
     * @return the modelState value.
     */
    @Generated
    public ModelState getModelState() {
        return this.modelState;
    }

    /**
     * Get the variableStates property: Variable status.
     *
     * @return the variableStates value.
     */
    @Generated
    public List<VariableState> getVariableStates() {
        return this.variableStates;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("modelState", this.modelState);
        jsonWriter.writeArrayField("variableStates", this.variableStates,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticsInfo from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticsInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticsInfo.
     */
    @Generated
    public static DiagnosticsInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticsInfo deserializedDiagnosticsInfo = new DiagnosticsInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("modelState".equals(fieldName)) {
                    deserializedDiagnosticsInfo.modelState = ModelState.fromJson(reader);
                } else if ("variableStates".equals(fieldName)) {
                    List<VariableState> variableStates = reader.readArray(reader1 -> VariableState.fromJson(reader1));
                    deserializedDiagnosticsInfo.variableStates = variableStates;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDiagnosticsInfo;
        });
    }
}
