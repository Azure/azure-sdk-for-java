// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response of the last anomaly detection.
 */
@Immutable
public final class UnivariateLastDetectionResult implements JsonSerializable<UnivariateLastDetectionResult> {

    /*
     * Frequency extracted from the series. Zero means no recurrent pattern has been
     * found.
     */
    @Generated
    private final int period;

    /*
     * Suggested input series points needed for detecting the latest point.
     */
    @Generated
    private final int suggestedWindow;

    /*
     * Expected value of the latest point.
     */
    @Generated
    private final double expectedValue;

    /*
     * Upper margin of the latest point. UpperMargin is used to calculate
     * upperBoundary, which is equal to expectedValue + (100 - marginScale)*upperMargin.
     * If the value of latest point is between upperBoundary and lowerBoundary, it
     * should be treated as a normal value. Adjusting the marginScale value enables the anomaly
     * status of the latest point to be changed.
     */
    @Generated
    private final double upperMargin;

    /*
     * Lower margin of the latest point. LowerMargin is used to calculate
     * lowerBoundary, which is equal to expectedValue - (100 - marginScale)*lowerMargin.
     */
    @Generated
    private final double lowerMargin;

    /*
     * Anomaly status of the latest point. True means the latest point is an anomaly,
     * either in the negative direction or in the positive direction.
     */
    @Generated
    private final boolean isAnomaly;

    /*
     * Anomaly status of the latest point in a negative direction. True means the latest
     * point is an anomaly and its real value is smaller than the expected one.
     */
    @Generated
    private final boolean isNegativeAnomaly;

    /*
     * Anomaly status of the latest point in a positive direction. True means the latest
     * point is an anomaly and its real value is larger than the expected one.
     */
    @Generated
    private final boolean isPositiveAnomaly;

    /*
     * Severity score for the last input point. The larger the value is, the more
     * severe the anomaly is. For normal points, the severity is always 0.
     */
    @Generated
    private Double severity;

    /**
     * Creates an instance of UnivariateLastDetectionResult class.
     *
     * @param period the period value to set.
     * @param suggestedWindow the suggestedWindow value to set.
     * @param expectedValue the expectedValue value to set.
     * @param upperMargin the upperMargin value to set.
     * @param lowerMargin the lowerMargin value to set.
     * @param isAnomaly the isAnomaly value to set.
     * @param isNegativeAnomaly the isNegativeAnomaly value to set.
     * @param isPositiveAnomaly the isPositiveAnomaly value to set.
     */
    @Generated
    private UnivariateLastDetectionResult(int period, int suggestedWindow, double expectedValue, double upperMargin,
        double lowerMargin, boolean isAnomaly, boolean isNegativeAnomaly, boolean isPositiveAnomaly) {
        this.period = period;
        this.suggestedWindow = suggestedWindow;
        this.expectedValue = expectedValue;
        this.upperMargin = upperMargin;
        this.lowerMargin = lowerMargin;
        this.isAnomaly = isAnomaly;
        this.isNegativeAnomaly = isNegativeAnomaly;
        this.isPositiveAnomaly = isPositiveAnomaly;
    }

    /**
     * Get the period property: Frequency extracted from the series. Zero means no recurrent pattern has been
     * found.
     *
     * @return the period value.
     */
    @Generated
    public int getPeriod() {
        return this.period;
    }

    /**
     * Get the suggestedWindow property: Suggested input series points needed for detecting the latest point.
     *
     * @return the suggestedWindow value.
     */
    @Generated
    public int getSuggestedWindow() {
        return this.suggestedWindow;
    }

    /**
     * Get the expectedValue property: Expected value of the latest point.
     *
     * @return the expectedValue value.
     */
    @Generated
    public double getExpectedValue() {
        return this.expectedValue;
    }

    /**
     * Get the upperMargin property: Upper margin of the latest point. UpperMargin is used to calculate
     * upperBoundary, which is equal to expectedValue + (100 - marginScale)*upperMargin.
     * If the value of latest point is between upperBoundary and lowerBoundary, it
     * should be treated as a normal value. Adjusting the marginScale value enables the anomaly
     * status of the latest point to be changed.
     *
     * @return the upperMargin value.
     */
    @Generated
    public double getUpperMargin() {
        return this.upperMargin;
    }

    /**
     * Get the lowerMargin property: Lower margin of the latest point. LowerMargin is used to calculate
     * lowerBoundary, which is equal to expectedValue - (100 - marginScale)*lowerMargin.
     *
     * @return the lowerMargin value.
     */
    @Generated
    public double getLowerMargin() {
        return this.lowerMargin;
    }

    /**
     * Get the isAnomaly property: Anomaly status of the latest point. True means the latest point is an anomaly,
     * either in the negative direction or in the positive direction.
     *
     * @return the isAnomaly value.
     */
    @Generated
    public boolean isAnomaly() {
        return this.isAnomaly;
    }

    /**
     * Get the isNegativeAnomaly property: Anomaly status of the latest point in a negative direction. True means the
     * latest
     * point is an anomaly and its real value is smaller than the expected one.
     *
     * @return the isNegativeAnomaly value.
     */
    @Generated
    public boolean isNegativeAnomaly() {
        return this.isNegativeAnomaly;
    }

    /**
     * Get the isPositiveAnomaly property: Anomaly status of the latest point in a positive direction. True means the
     * latest
     * point is an anomaly and its real value is larger than the expected one.
     *
     * @return the isPositiveAnomaly value.
     */
    @Generated
    public boolean isPositiveAnomaly() {
        return this.isPositiveAnomaly;
    }

    /**
     * Get the severity property: Severity score for the last input point. The larger the value is, the more
     * severe the anomaly is. For normal points, the severity is always 0.
     *
     * @return the severity value.
     */
    @Generated
    public Double getSeverity() {
        return this.severity;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("period", this.period);
        jsonWriter.writeIntField("suggestedWindow", this.suggestedWindow);
        jsonWriter.writeDoubleField("expectedValue", this.expectedValue);
        jsonWriter.writeDoubleField("upperMargin", this.upperMargin);
        jsonWriter.writeDoubleField("lowerMargin", this.lowerMargin);
        jsonWriter.writeBooleanField("isAnomaly", this.isAnomaly);
        jsonWriter.writeBooleanField("isNegativeAnomaly", this.isNegativeAnomaly);
        jsonWriter.writeBooleanField("isPositiveAnomaly", this.isPositiveAnomaly);
        jsonWriter.writeNumberField("severity", this.severity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnivariateLastDetectionResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnivariateLastDetectionResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UnivariateLastDetectionResult.
     */
    @Generated
    public static UnivariateLastDetectionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int period = 0;
            int suggestedWindow = 0;
            double expectedValue = 0.0;
            double upperMargin = 0.0;
            double lowerMargin = 0.0;
            boolean isAnomaly = false;
            boolean isNegativeAnomaly = false;
            boolean isPositiveAnomaly = false;
            Double severity = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("period".equals(fieldName)) {
                    period = reader.getInt();
                } else if ("suggestedWindow".equals(fieldName)) {
                    suggestedWindow = reader.getInt();
                } else if ("expectedValue".equals(fieldName)) {
                    expectedValue = reader.getDouble();
                } else if ("upperMargin".equals(fieldName)) {
                    upperMargin = reader.getDouble();
                } else if ("lowerMargin".equals(fieldName)) {
                    lowerMargin = reader.getDouble();
                } else if ("isAnomaly".equals(fieldName)) {
                    isAnomaly = reader.getBoolean();
                } else if ("isNegativeAnomaly".equals(fieldName)) {
                    isNegativeAnomaly = reader.getBoolean();
                } else if ("isPositiveAnomaly".equals(fieldName)) {
                    isPositiveAnomaly = reader.getBoolean();
                } else if ("severity".equals(fieldName)) {
                    severity = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            UnivariateLastDetectionResult deserializedUnivariateLastDetectionResult
                = new UnivariateLastDetectionResult(period, suggestedWindow, expectedValue, upperMargin, lowerMargin,
                    isAnomaly, isNegativeAnomaly, isPositiveAnomaly);
            deserializedUnivariateLastDetectionResult.severity = severity;
            return deserializedUnivariateLastDetectionResult;
        });
    }
}
