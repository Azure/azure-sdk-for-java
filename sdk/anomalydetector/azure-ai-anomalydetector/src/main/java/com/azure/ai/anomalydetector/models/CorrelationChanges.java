// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Correlation changes among the anomalous variables.
 */
@Immutable
public final class CorrelationChanges implements JsonSerializable<CorrelationChanges> {

    /*
     * Correlated variables that have correlation changes under an anomaly.
     */
    @Generated
    private List<String> changedVariables;

    /**
     * Creates an instance of CorrelationChanges class.
     */
    @Generated
    private CorrelationChanges() {
    }

    /**
     * Get the changedVariables property: Correlated variables that have correlation changes under an anomaly.
     *
     * @return the changedVariables value.
     */
    @Generated
    public List<String> getChangedVariables() {
        return this.changedVariables;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("changedVariables", this.changedVariables,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CorrelationChanges from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CorrelationChanges if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CorrelationChanges.
     */
    @Generated
    public static CorrelationChanges fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CorrelationChanges deserializedCorrelationChanges = new CorrelationChanges();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("changedVariables".equals(fieldName)) {
                    List<String> changedVariables = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorrelationChanges.changedVariables = changedVariables;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCorrelationChanges;
        });
    }
}
