// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.anomalydetector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Manner of aligning multiple variables.
 */
@Fluent
public final class AlignPolicy implements JsonSerializable<AlignPolicy> {

    /*
     * Field that indicates how to align different variables to the same
     * time range.
     */
    @Generated
    private AlignMode alignMode;

    /*
     * Field that indicates how missing values will be filled.
     */
    @Generated
    private FillNAMethod fillNAMethod;

    /*
     * Field that's required when fillNAMethod is Fixed.
     */
    @Generated
    private Double paddingValue;

    /**
     * Creates an instance of AlignPolicy class.
     */
    @Generated
    public AlignPolicy() {
    }

    /**
     * Get the alignMode property: Field that indicates how to align different variables to the same
     * time range.
     *
     * @return the alignMode value.
     */
    @Generated
    public AlignMode getAlignMode() {
        return this.alignMode;
    }

    /**
     * Set the alignMode property: Field that indicates how to align different variables to the same
     * time range.
     *
     * @param alignMode the alignMode value to set.
     * @return the AlignPolicy object itself.
     */
    @Generated
    public AlignPolicy setAlignMode(AlignMode alignMode) {
        this.alignMode = alignMode;
        return this;
    }

    /**
     * Get the fillNAMethod property: Field that indicates how missing values will be filled.
     *
     * @return the fillNAMethod value.
     */
    @Generated
    public FillNAMethod getFillNAMethod() {
        return this.fillNAMethod;
    }

    /**
     * Set the fillNAMethod property: Field that indicates how missing values will be filled.
     *
     * @param fillNAMethod the fillNAMethod value to set.
     * @return the AlignPolicy object itself.
     */
    @Generated
    public AlignPolicy setFillNAMethod(FillNAMethod fillNAMethod) {
        this.fillNAMethod = fillNAMethod;
        return this;
    }

    /**
     * Get the paddingValue property: Field that's required when fillNAMethod is Fixed.
     *
     * @return the paddingValue value.
     */
    @Generated
    public Double getPaddingValue() {
        return this.paddingValue;
    }

    /**
     * Set the paddingValue property: Field that's required when fillNAMethod is Fixed.
     *
     * @param paddingValue the paddingValue value to set.
     * @return the AlignPolicy object itself.
     */
    @Generated
    public AlignPolicy setPaddingValue(Double paddingValue) {
        this.paddingValue = paddingValue;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("alignMode", this.alignMode == null ? null : this.alignMode.toString());
        jsonWriter.writeStringField("fillNAMethod", this.fillNAMethod == null ? null : this.fillNAMethod.toString());
        jsonWriter.writeNumberField("paddingValue", this.paddingValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlignPolicy from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlignPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlignPolicy.
     */
    @Generated
    public static AlignPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlignPolicy deserializedAlignPolicy = new AlignPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("alignMode".equals(fieldName)) {
                    deserializedAlignPolicy.alignMode = AlignMode.fromString(reader.getString());
                } else if ("fillNAMethod".equals(fieldName)) {
                    deserializedAlignPolicy.fillNAMethod = FillNAMethod.fromString(reader.getString());
                } else if ("paddingValue".equals(fieldName)) {
                    deserializedAlignPolicy.paddingValue = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAlignPolicy;
        });
    }
}
