// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.anomalydetector.generated;

import com.azure.ai.anomalydetector.models.AnomalyState;
import com.azure.ai.anomalydetector.models.AnomalyValue;
import com.azure.ai.anomalydetector.models.ErrorResponse;
import com.azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions;
import com.azure.ai.anomalydetector.models.MultivariateBatchDetectionResultSummary;
import com.azure.ai.anomalydetector.models.MultivariateBatchDetectionStatus;
import com.azure.ai.anomalydetector.models.MultivariateDetectionResult;
import com.azure.ai.anomalydetector.models.VariableState;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GetMultivariateBatchDetectionResultTests extends AnomalyDetectorClientTestBase {
    @Test
    @Disabled
    public void testGetMultivariateBatchDetectionResultTests() {
        // method invocation
        MultivariateDetectionResult response
            = multivariateClient.getMultivariateBatchDetectionResult("663884e6-b117-11ea-b3de-0242ac130004");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "resultId"
        Assertions.assertEquals("663884e6-b117-11ea-b3de-0242ac130004", response.getResultId());
        // verify property "summary"
        MultivariateBatchDetectionResultSummary responseSummary = response.getSummary();
        Assertions.assertNotNull(responseSummary);
        Assertions.assertEquals(MultivariateBatchDetectionStatus.READY, responseSummary.getStatus());
        List<ErrorResponse> responseSummaryErrors = responseSummary.getErrors();
        Assertions.assertEquals(0, responseSummaryErrors.size());
        List<VariableState> responseSummaryVariableStates = responseSummary.getVariableStates();
        VariableState responseSummaryVariableStatesFirstItem = responseSummaryVariableStates.iterator().next();
        Assertions.assertNotNull(responseSummaryVariableStatesFirstItem);
        Assertions.assertEquals("variable_1", responseSummaryVariableStatesFirstItem.getVariable());
        Assertions.assertEquals(0.0D, responseSummaryVariableStatesFirstItem.getFilledNARatio());
        Assertions.assertEquals(30, responseSummaryVariableStatesFirstItem.getEffectiveCount());
        Assertions.assertNotNull(responseSummaryVariableStatesFirstItem.getFirstTimestamp());
        Assertions.assertNotNull(responseSummaryVariableStatesFirstItem.getLastTimestamp());
        MultivariateBatchDetectionOptions responseSummarySetupInfo = responseSummary.getSetupInfo();
        Assertions.assertNotNull(responseSummarySetupInfo);
        Assertions.assertEquals("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
            responseSummarySetupInfo.getDataSource());
        Assertions.assertEquals(10, responseSummarySetupInfo.getTopContributorCount());
        Assertions.assertNotNull(responseSummarySetupInfo.getStartTime());
        Assertions.assertNotNull(responseSummarySetupInfo.getEndTime());
        // verify property "results"
        List<AnomalyState> responseResults = response.getResults();
        AnomalyState responseResultsFirstItem = responseResults.iterator().next();
        Assertions.assertNotNull(responseResultsFirstItem);
        Assertions.assertNotNull(responseResultsFirstItem.getTimestamp());
        AnomalyValue responseResultsFirstItemValue = responseResultsFirstItem.getValue();
        Assertions.assertNotNull(responseResultsFirstItemValue);
        Assertions.assertEquals(false, responseResultsFirstItemValue.isAnomaly());
        Assertions.assertEquals(0.0, responseResultsFirstItemValue.getSeverity());
        Assertions.assertEquals(0.6928471326828003, responseResultsFirstItemValue.getScore());
        List<ErrorResponse> responseResultsFirstItemErrors = responseResultsFirstItem.getErrors();
        Assertions.assertEquals(0, responseResultsFirstItemErrors.size());
    }
}
