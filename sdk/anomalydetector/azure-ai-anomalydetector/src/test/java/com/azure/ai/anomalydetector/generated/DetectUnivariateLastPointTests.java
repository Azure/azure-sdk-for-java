// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.anomalydetector.generated;

import com.azure.ai.anomalydetector.models.ImputeMode;
import com.azure.ai.anomalydetector.models.TimeGranularity;
import com.azure.ai.anomalydetector.models.TimeSeriesPoint;
import com.azure.ai.anomalydetector.models.UnivariateDetectionOptions;
import com.azure.ai.anomalydetector.models.UnivariateLastDetectionResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class DetectUnivariateLastPointTests extends AnomalyDetectorClientTestBase {
    @Test
    @Disabled
    public void testDetectUnivariateLastPointTests() {
        // method invocation
        UnivariateLastDetectionResult response
            = univariateClient.detectUnivariateLastPoint(new UnivariateDetectionOptions(
                Arrays.asList(new TimeSeriesPoint(826.0).setTimestamp(OffsetDateTime.parse("1972-01-01T00:00:00Z")),
                    new TimeSeriesPoint(799.0).setTimestamp(OffsetDateTime.parse("1972-02-01T00:00:00Z")),
                    new TimeSeriesPoint(890.0).setTimestamp(OffsetDateTime.parse("1972-03-01T00:00:00Z")),
                    new TimeSeriesPoint(900.0).setTimestamp(OffsetDateTime.parse("1972-04-01T00:00:00Z")),
                    new TimeSeriesPoint(961.0).setTimestamp(OffsetDateTime.parse("1972-05-01T00:00:00Z")),
                    new TimeSeriesPoint(935.0).setTimestamp(OffsetDateTime.parse("1972-06-01T00:00:00Z")),
                    new TimeSeriesPoint(894.0).setTimestamp(OffsetDateTime.parse("1972-07-01T00:00:00Z")),
                    new TimeSeriesPoint(855.0).setTimestamp(OffsetDateTime.parse("1972-08-01T00:00:00Z")),
                    new TimeSeriesPoint(809.0).setTimestamp(OffsetDateTime.parse("1972-09-01T00:00:00Z")),
                    new TimeSeriesPoint(810.0).setTimestamp(OffsetDateTime.parse("1972-10-01T00:00:00Z")),
                    new TimeSeriesPoint(766.0).setTimestamp(OffsetDateTime.parse("1972-11-01T00:00:00Z")),
                    new TimeSeriesPoint(805.0).setTimestamp(OffsetDateTime.parse("1972-12-01T00:00:00Z")),
                    new TimeSeriesPoint(821.0).setTimestamp(OffsetDateTime.parse("1973-01-01T00:00:00Z")),
                    new TimeSeriesPoint(773.0).setTimestamp(OffsetDateTime.parse("1973-02-01T00:00:00Z")),
                    new TimeSeriesPoint(883.0).setTimestamp(OffsetDateTime.parse("1973-03-01T00:00:00Z")),
                    new TimeSeriesPoint(898.0).setTimestamp(OffsetDateTime.parse("1973-04-01T00:00:00Z")),
                    new TimeSeriesPoint(957.0).setTimestamp(OffsetDateTime.parse("1973-05-01T00:00:00Z")),
                    new TimeSeriesPoint(924.0).setTimestamp(OffsetDateTime.parse("1973-06-01T00:00:00Z")),
                    new TimeSeriesPoint(881.0).setTimestamp(OffsetDateTime.parse("1973-07-01T00:00:00Z")),
                    new TimeSeriesPoint(837.0).setTimestamp(OffsetDateTime.parse("1973-08-01T00:00:00Z")),
                    new TimeSeriesPoint(784.0).setTimestamp(OffsetDateTime.parse("1973-09-01T00:00:00Z")),
                    new TimeSeriesPoint(791.0).setTimestamp(OffsetDateTime.parse("1973-10-01T00:00:00Z")),
                    new TimeSeriesPoint(760.0).setTimestamp(OffsetDateTime.parse("1973-11-01T00:00:00Z")),
                    new TimeSeriesPoint(802.0).setTimestamp(OffsetDateTime.parse("1973-12-01T00:00:00Z")),
                    new TimeSeriesPoint(828.0).setTimestamp(OffsetDateTime.parse("1974-01-01T00:00:00Z")),
                    new TimeSeriesPoint(1030.0).setTimestamp(OffsetDateTime.parse("1974-02-01T00:00:00Z")),
                    new TimeSeriesPoint(889.0).setTimestamp(OffsetDateTime.parse("1974-03-01T00:00:00Z")),
                    new TimeSeriesPoint(902.0).setTimestamp(OffsetDateTime.parse("1974-04-01T00:00:00Z")),
                    new TimeSeriesPoint(969.0).setTimestamp(OffsetDateTime.parse("1974-05-01T00:00:00Z")),
                    new TimeSeriesPoint(947.0).setTimestamp(OffsetDateTime.parse("1974-06-01T00:00:00Z")),
                    new TimeSeriesPoint(908.0).setTimestamp(OffsetDateTime.parse("1974-07-01T00:00:00Z")),
                    new TimeSeriesPoint(867.0).setTimestamp(OffsetDateTime.parse("1974-08-01T00:00:00Z")),
                    new TimeSeriesPoint(815.0).setTimestamp(OffsetDateTime.parse("1974-09-01T00:00:00Z")),
                    new TimeSeriesPoint(812.0).setTimestamp(OffsetDateTime.parse("1974-10-01T00:00:00Z")),
                    new TimeSeriesPoint(773.0).setTimestamp(OffsetDateTime.parse("1974-11-01T00:00:00Z")),
                    new TimeSeriesPoint(813.0).setTimestamp(OffsetDateTime.parse("1974-12-01T00:00:00Z")),
                    new TimeSeriesPoint(834.0).setTimestamp(OffsetDateTime.parse("1975-01-01T00:00:00Z")),
                    new TimeSeriesPoint(782.0).setTimestamp(OffsetDateTime.parse("1975-02-01T00:00:00Z")),
                    new TimeSeriesPoint(892.0).setTimestamp(OffsetDateTime.parse("1975-03-01T00:00:00Z")),
                    new TimeSeriesPoint(903.0).setTimestamp(OffsetDateTime.parse("1975-04-01T00:00:00Z")),
                    new TimeSeriesPoint(966.0).setTimestamp(OffsetDateTime.parse("1975-05-01T00:00:00Z")),
                    new TimeSeriesPoint(937.0).setTimestamp(OffsetDateTime.parse("1975-06-01T00:00:00Z")),
                    new TimeSeriesPoint(896.0).setTimestamp(OffsetDateTime.parse("1975-07-01T00:00:00Z")),
                    new TimeSeriesPoint(858.0).setTimestamp(OffsetDateTime.parse("1975-08-01T00:00:00Z")),
                    new TimeSeriesPoint(817.0).setTimestamp(OffsetDateTime.parse("1975-09-01T00:00:00Z")),
                    new TimeSeriesPoint(827.0).setTimestamp(OffsetDateTime.parse("1975-10-01T00:00:00Z")),
                    new TimeSeriesPoint(797.0).setTimestamp(OffsetDateTime.parse("1975-11-01T00:00:00Z")),
                    new TimeSeriesPoint(843.0).setTimestamp(OffsetDateTime.parse("1975-12-01T00:00:00Z"))))
                        .setGranularity(TimeGranularity.MONTHLY)
                        .setMaxAnomalyRatio(0.25D)
                        .setSensitivity(95)
                        .setImputeMode(ImputeMode.FIXED)
                        .setImputeFixedValue(800.0D));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "period"
        Assertions.assertEquals(12, response.getPeriod());
        // verify property "suggestedWindow"
        Assertions.assertEquals(49, response.getSuggestedWindow());
        // verify property "expectedValue"
        Assertions.assertEquals(809.2328084659704, response.getExpectedValue());
        // verify property "upperMargin"
        Assertions.assertEquals(40.46164042329852, response.getUpperMargin());
        // verify property "lowerMargin"
        Assertions.assertEquals(40.46164042329852, response.getLowerMargin());
        // verify property "isAnomaly"
        Assertions.assertEquals(false, response.isAnomaly());
        // verify property "isNegativeAnomaly"
        Assertions.assertEquals(false, response.isNegativeAnomaly());
        // verify property "isPositiveAnomaly"
        Assertions.assertEquals(false, response.isPositiveAnomaly());
        // verify property "severity"
        Assertions.assertEquals(0.0D, response.getSeverity());
    }
}
