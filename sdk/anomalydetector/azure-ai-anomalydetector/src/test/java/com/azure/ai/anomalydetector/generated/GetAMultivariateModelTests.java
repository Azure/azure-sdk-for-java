// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.anomalydetector.generated;

import com.azure.ai.anomalydetector.models.AlignMode;
import com.azure.ai.anomalydetector.models.AlignPolicy;
import com.azure.ai.anomalydetector.models.AnomalyDetectionModel;
import com.azure.ai.anomalydetector.models.DataSchema;
import com.azure.ai.anomalydetector.models.DiagnosticsInfo;
import com.azure.ai.anomalydetector.models.ErrorResponse;
import com.azure.ai.anomalydetector.models.FillNAMethod;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.ModelState;
import com.azure.ai.anomalydetector.models.ModelStatus;
import com.azure.ai.anomalydetector.models.VariableState;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class GetAMultivariateModelTests extends AnomalyDetectorClientTestBase {
    @Test
    @Disabled
    public void testGetAMultivariateModelTests() {
        // method invocation
        AnomalyDetectionModel response
            = multivariateClient.getMultivariateModel("45aad126-aafd-11ea-b8fb-d89ef3400c5f");

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "modelId"
        Assertions.assertEquals("45aad126-aafd-11ea-b8fb-d89ef3400c5f", response.getModelId());
        // verify property "createdTime"
        Assertions.assertNotNull(response.getCreatedTime());
        // verify property "lastUpdatedTime"
        Assertions.assertNotNull(response.getLastUpdatedTime());
        // verify property "modelInfo"
        ModelInfo responseModelInfo = response.getModelInfo();
        Assertions.assertNotNull(responseModelInfo);
        Assertions.assertEquals("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
            responseModelInfo.getDataSource());
        Assertions.assertEquals(DataSchema.ONE_TABLE, responseModelInfo.getDataSchema());
        Assertions.assertNotNull(responseModelInfo.getStartTime());
        Assertions.assertNotNull(responseModelInfo.getEndTime());
        Assertions.assertEquals("Devops-MultiAD", responseModelInfo.getDisplayName());
        Assertions.assertEquals(20, responseModelInfo.getSlidingWindow());
        AlignPolicy responseModelInfoAlignPolicy = responseModelInfo.getAlignPolicy();
        Assertions.assertNotNull(responseModelInfoAlignPolicy);
        Assertions.assertEquals(AlignMode.OUTER, responseModelInfoAlignPolicy.getAlignMode());
        Assertions.assertEquals(FillNAMethod.LINEAR, responseModelInfoAlignPolicy.getFillNAMethod());
        Assertions.assertEquals(0.0D, responseModelInfoAlignPolicy.getPaddingValue());
        Assertions.assertEquals(ModelStatus.READY, responseModelInfo.getStatus());
        List<ErrorResponse> responseModelInfoErrors = responseModelInfo.getErrors();
        Assertions.assertEquals(0, responseModelInfoErrors.size());
        DiagnosticsInfo responseModelInfoDiagnosticsInfo = responseModelInfo.getDiagnosticsInfo();
        Assertions.assertNotNull(responseModelInfoDiagnosticsInfo);
        ModelState responseModelInfoDiagnosticsInfoModelState = responseModelInfoDiagnosticsInfo.getModelState();
        Assertions.assertNotNull(responseModelInfoDiagnosticsInfoModelState);
        List<Integer> responseModelInfoDiagnosticsInfoModelStateEpochIds
            = responseModelInfoDiagnosticsInfoModelState.getEpochIds();
        Assertions.assertEquals(10, responseModelInfoDiagnosticsInfoModelStateEpochIds.iterator().next());
        List<Double> responseModelInfoDiagnosticsInfoModelStateTrainLosses
            = responseModelInfoDiagnosticsInfoModelState.getTrainLosses();
        Assertions.assertEquals(0.6291328072547913,
            responseModelInfoDiagnosticsInfoModelStateTrainLosses.iterator().next());
        List<Double> responseModelInfoDiagnosticsInfoModelStateValidationLosses
            = responseModelInfoDiagnosticsInfoModelState.getValidationLosses();
        Assertions.assertEquals(1.9232804775238037,
            responseModelInfoDiagnosticsInfoModelStateValidationLosses.iterator().next());
        List<Double> responseModelInfoDiagnosticsInfoModelStateLatenciesInSeconds
            = responseModelInfoDiagnosticsInfoModelState.getLatenciesInSeconds();
        Assertions.assertEquals(0.3398594856262207,
            responseModelInfoDiagnosticsInfoModelStateLatenciesInSeconds.iterator().next());
        List<VariableState> responseModelInfoDiagnosticsInfoVariableStates
            = responseModelInfoDiagnosticsInfo.getVariableStates();
        VariableState responseModelInfoDiagnosticsInfoVariableStatesFirstItem
            = responseModelInfoDiagnosticsInfoVariableStates.iterator().next();
        Assertions.assertNotNull(responseModelInfoDiagnosticsInfoVariableStatesFirstItem);
        Assertions.assertEquals("ad_input", responseModelInfoDiagnosticsInfoVariableStatesFirstItem.getVariable());
        Assertions.assertEquals(0.0D, responseModelInfoDiagnosticsInfoVariableStatesFirstItem.getFilledNARatio());
        Assertions.assertEquals(1441, responseModelInfoDiagnosticsInfoVariableStatesFirstItem.getEffectiveCount());
        Assertions.assertNotNull(responseModelInfoDiagnosticsInfoVariableStatesFirstItem.getFirstTimestamp());
        Assertions.assertNotNull(responseModelInfoDiagnosticsInfoVariableStatesFirstItem.getLastTimestamp());
    }
}
