// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.anomalydetector.generated;

import com.azure.ai.anomalydetector.models.AlignMode;
import com.azure.ai.anomalydetector.models.AlignPolicy;
import com.azure.ai.anomalydetector.models.AnomalyDetectionModel;
import com.azure.ai.anomalydetector.models.DataSchema;
import com.azure.ai.anomalydetector.models.DiagnosticsInfo;
import com.azure.ai.anomalydetector.models.ErrorResponse;
import com.azure.ai.anomalydetector.models.FillNAMethod;
import com.azure.ai.anomalydetector.models.ModelInfo;
import com.azure.ai.anomalydetector.models.ModelState;
import com.azure.ai.anomalydetector.models.ModelStatus;
import com.azure.ai.anomalydetector.models.VariableState;
import com.azure.core.http.rest.PagedIterable;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ListMultivariateModelsTests extends AnomalyDetectorClientTestBase {
    @Test
    @Disabled
    public void testListMultivariateModelsTests() {
        // method invocation
        PagedIterable<AnomalyDetectionModel> response = multivariateClient.listMultivariateModels(0, 10);

        // response assertion
        Assertions.assertEquals(200, response.iterableByPage().iterator().next().getStatusCode());
        AnomalyDetectionModel firstItem = response.iterator().next();
        Assertions.assertNotNull(firstItem);
        // verify property "modelId"
        Assertions.assertEquals("45aad126-aafd-11ea-b8fb-d89ef3400c5f", firstItem.getModelId());
        // verify property "createdTime"
        Assertions.assertNotNull(firstItem.getCreatedTime());
        // verify property "lastUpdatedTime"
        Assertions.assertNotNull(firstItem.getLastUpdatedTime());
        // verify property "modelInfo"
        ModelInfo firstItemModelInfo = firstItem.getModelInfo();
        Assertions.assertNotNull(firstItemModelInfo);
        Assertions.assertEquals("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
            firstItemModelInfo.getDataSource());
        Assertions.assertEquals(DataSchema.ONE_TABLE, firstItemModelInfo.getDataSchema());
        Assertions.assertNotNull(firstItemModelInfo.getStartTime());
        Assertions.assertNotNull(firstItemModelInfo.getEndTime());
        Assertions.assertEquals("Devops-MultiAD", firstItemModelInfo.getDisplayName());
        Assertions.assertEquals(20, firstItemModelInfo.getSlidingWindow());
        AlignPolicy firstItemModelInfoAlignPolicy = firstItemModelInfo.getAlignPolicy();
        Assertions.assertNotNull(firstItemModelInfoAlignPolicy);
        Assertions.assertEquals(AlignMode.OUTER, firstItemModelInfoAlignPolicy.getAlignMode());
        Assertions.assertEquals(FillNAMethod.LINEAR, firstItemModelInfoAlignPolicy.getFillNAMethod());
        Assertions.assertEquals(0.0D, firstItemModelInfoAlignPolicy.getPaddingValue());
        Assertions.assertEquals(ModelStatus.READY, firstItemModelInfo.getStatus());
        List<ErrorResponse> firstItemModelInfoErrors = firstItemModelInfo.getErrors();
        Assertions.assertEquals(0, firstItemModelInfoErrors.size());
        DiagnosticsInfo firstItemModelInfoDiagnosticsInfo = firstItemModelInfo.getDiagnosticsInfo();
        Assertions.assertNotNull(firstItemModelInfoDiagnosticsInfo);
        ModelState firstItemModelInfoDiagnosticsInfoModelState = firstItemModelInfoDiagnosticsInfo.getModelState();
        Assertions.assertNotNull(firstItemModelInfoDiagnosticsInfoModelState);
        List<Integer> firstItemModelInfoDiagnosticsInfoModelStateEpochIds
            = firstItemModelInfoDiagnosticsInfoModelState.getEpochIds();
        Assertions.assertEquals(10, firstItemModelInfoDiagnosticsInfoModelStateEpochIds.iterator().next());
        List<Double> firstItemModelInfoDiagnosticsInfoModelStateTrainLosses
            = firstItemModelInfoDiagnosticsInfoModelState.getTrainLosses();
        Assertions.assertEquals(0.6291328072547913,
            firstItemModelInfoDiagnosticsInfoModelStateTrainLosses.iterator().next());
        List<Double> firstItemModelInfoDiagnosticsInfoModelStateValidationLosses
            = firstItemModelInfoDiagnosticsInfoModelState.getValidationLosses();
        Assertions.assertEquals(1.9232804775238037,
            firstItemModelInfoDiagnosticsInfoModelStateValidationLosses.iterator().next());
        List<Double> firstItemModelInfoDiagnosticsInfoModelStateLatenciesInSeconds
            = firstItemModelInfoDiagnosticsInfoModelState.getLatenciesInSeconds();
        Assertions.assertEquals(0.3398594856262207,
            firstItemModelInfoDiagnosticsInfoModelStateLatenciesInSeconds.iterator().next());
        List<VariableState> firstItemModelInfoDiagnosticsInfoVariableStates
            = firstItemModelInfoDiagnosticsInfo.getVariableStates();
        VariableState firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem
            = firstItemModelInfoDiagnosticsInfoVariableStates.iterator().next();
        Assertions.assertNotNull(firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem);
        Assertions.assertEquals("ad_input", firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem.getVariable());
        Assertions.assertEquals(0.0D, firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem.getFilledNARatio());
        Assertions.assertEquals(1441, firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem.getEffectiveCount());
        Assertions.assertNotNull(firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem.getFirstTimestamp());
        Assertions.assertNotNull(firstItemModelInfoDiagnosticsInfoVariableStatesFirstItem.getLastTimestamp());
    }
}
