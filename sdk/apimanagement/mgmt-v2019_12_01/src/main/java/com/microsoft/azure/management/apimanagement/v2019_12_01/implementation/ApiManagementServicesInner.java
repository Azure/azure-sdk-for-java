/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServiceApplyNetworkConfigurationParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServiceBackupRestoreParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServiceCheckNameAvailabilityParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServiceUpdateParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in ApiManagementServices.
 */
public class ApiManagementServicesInner implements InnerSupportsGet<ApiManagementServiceResourceInner>, InnerSupportsDelete<ApiManagementServiceResourceInner>, InnerSupportsListing<ApiManagementServiceResourceInner> {
    /** The Retrofit service to perform REST calls. */
    private ApiManagementServicesService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ApiManagementServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApiManagementServicesInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ApiManagementServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApiManagementServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApiManagementServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices restore" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore")
        Observable<Response<ResponseBody>> restore(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceBackupRestoreParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginRestore" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore")
        Observable<Response<ResponseBody>> beginRestore(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceBackupRestoreParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices backup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup")
        Observable<Response<ResponseBody>> backup(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceBackupRestoreParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginBackup" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup")
        Observable<Response<ResponseBody>> beginBackup(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceBackupRestoreParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceResourceInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceResourceInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Body ApiManagementServiceUpdateParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices getSsoToken" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/getssotoken")
        Observable<Response<ResponseBody>> getSsoToken(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApiManagementServiceCheckNameAvailabilityParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices applyNetworkConfigurationUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/applynetworkconfigurationupdates")
        Observable<Response<ResponseBody>> applyNetworkConfigurationUpdates(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApiManagementServiceApplyNetworkConfigurationParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices beginApplyNetworkConfigurationUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/applynetworkconfigurationupdates")
        Observable<Response<ResponseBody>> beginApplyNetworkConfigurationUpdates(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ApiManagementServiceApplyNetworkConfigurationParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiManagementServices listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner restore(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return restoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> restoreAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(restoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> restoreAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return restoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> restoreWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.restore(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginRestore(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return beginRestoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginRestoreAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginRestoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginRestoreAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return beginRestoreWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup operation on the current service. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginRestoreWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginRestore(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginRestoreDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginRestoreDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner backup(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return backupWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> backupAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(backupWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> backupAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return backupWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> backupWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.backup(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginBackup(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return beginBackupWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginBackupAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginBackupWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginBackupAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        return beginBackupWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginBackupWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceBackupRestoreParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginBackup(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginBackupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginBackupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner createOrUpdate(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> createOrUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginCreateOrUpdate(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates an API Management service. This is long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceResourceInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(201, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner update(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> updateAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> updateAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginUpdate(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginUpdateAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, ApiManagementServiceUpdateParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginUpdate(resourceGroupName, serviceName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets an API Management service resource description.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner getByResourceGroup(String resourceGroupName, String serviceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Gets an API Management service resource description.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> getByResourceGroupAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Gets an API Management service resource description.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> getByResourceGroupAsync(String resourceGroupName, String serviceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an API Management service resource description.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner delete(String resourceGroupName, String serviceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().last().body();
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> deleteAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> deleteAsync(String resourceGroupName, String serviceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginDelete(String resourceGroupName, String serviceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginDeleteAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginDeleteAsync(String resourceGroupName, String serviceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing API Management service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object if successful.
     */
    public PagedList<ApiManagementServiceResourceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ApiManagementServiceResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ApiManagementServiceResourceInner>(response.body()) {
            @Override
            public Page<ApiManagementServiceResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiManagementServiceResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<Page<ApiManagementServiceResourceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Page<ApiManagementServiceResourceInner>>() {
                @Override
                public Page<ApiManagementServiceResourceInner> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all API Management services within a resource group.
     *
    ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiManagementServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiManagementServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiManagementServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object if successful.
     */
    public PagedList<ApiManagementServiceResourceInner> list() {
        ServiceResponse<Page<ApiManagementServiceResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ApiManagementServiceResourceInner>(response.body()) {
            @Override
            public Page<ApiManagementServiceResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiManagementServiceResourceInner>> listAsync(final ListOperationCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<Page<ApiManagementServiceResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Page<ApiManagementServiceResourceInner>>() {
                @Override
                public Page<ApiManagementServiceResourceInner> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiManagementServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiManagementServiceResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiManagementServiceResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid for 5 Minutes.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceGetSsoTokenResultInner object if successful.
     */
    public ApiManagementServiceGetSsoTokenResultInner getSsoToken(String resourceGroupName, String serviceName) {
        return getSsoTokenWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid for 5 Minutes.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceGetSsoTokenResultInner> getSsoTokenAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceGetSsoTokenResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(getSsoTokenWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid for 5 Minutes.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceGetSsoTokenResultInner object
     */
    public Observable<ApiManagementServiceGetSsoTokenResultInner> getSsoTokenAsync(String resourceGroupName, String serviceName) {
        return getSsoTokenWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceGetSsoTokenResultInner>, ApiManagementServiceGetSsoTokenResultInner>() {
            @Override
            public ApiManagementServiceGetSsoTokenResultInner call(ServiceResponse<ApiManagementServiceGetSsoTokenResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the Single-Sign-On token for the API Management Service which is valid for 5 Minutes.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceGetSsoTokenResultInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceGetSsoTokenResultInner>> getSsoTokenWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getSsoToken(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceGetSsoTokenResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceGetSsoTokenResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceGetSsoTokenResultInner> clientResponse = getSsoTokenDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceGetSsoTokenResultInner> getSsoTokenDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceGetSsoTokenResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceGetSsoTokenResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param name The name to check for availability.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceNameAvailabilityResultInner object if successful.
     */
    public ApiManagementServiceNameAvailabilityResultInner checkNameAvailability(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param name The name to check for availability.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceNameAvailabilityResultInner> checkNameAvailabilityAsync(String name, final ServiceCallback<ApiManagementServiceNameAvailabilityResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param name The name to check for availability.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceNameAvailabilityResultInner object
     */
    public Observable<ApiManagementServiceNameAvailabilityResultInner> checkNameAvailabilityAsync(String name) {
        return checkNameAvailabilityWithServiceResponseAsync(name).map(new Func1<ServiceResponse<ApiManagementServiceNameAvailabilityResultInner>, ApiManagementServiceNameAvailabilityResultInner>() {
            @Override
            public ApiManagementServiceNameAvailabilityResultInner call(ServiceResponse<ApiManagementServiceNameAvailabilityResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks availability and correctness of a name for an API Management service.
     *
     * @param name The name to check for availability.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceNameAvailabilityResultInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceNameAvailabilityResultInner>> checkNameAvailabilityWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        ApiManagementServiceCheckNameAvailabilityParameters parameters = new ApiManagementServiceCheckNameAvailabilityParameters();
        parameters.withName(name);
        return service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceNameAvailabilityResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceNameAvailabilityResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceNameAvailabilityResultInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceNameAvailabilityResultInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceNameAvailabilityResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceNameAvailabilityResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner applyNetworkConfigurationUpdates(String resourceGroupName, String serviceName) {
        return applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().last().body();
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> applyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> applyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName) {
        return applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> applyNetworkConfigurationUpdatesWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        ApiManagementServiceApplyNetworkConfigurationParameters parameters = new ApiManagementServiceApplyNetworkConfigurationParameters();
        parameters.withLocation(null);
        Observable<Response<ResponseBody>> observable = service.applyNetworkConfigurationUpdates(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }
    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner applyNetworkConfigurationUpdates(String resourceGroupName, String serviceName, String location) {
        return applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location).toBlocking().last().body();
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> applyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, String location, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location), serviceCallback);
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiManagementServiceResourceInner> applyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, String location) {
        return applyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> applyNetworkConfigurationUpdatesWithServiceResponseAsync(String resourceGroupName, String serviceName, String location) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        ApiManagementServiceApplyNetworkConfigurationParameters parameters = null;
        if (location != null) {
            parameters = new ApiManagementServiceApplyNetworkConfigurationParameters();
            parameters.withLocation(location);
        }
        Observable<Response<ResponseBody>> observable = service.applyNetworkConfigurationUpdates(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<ApiManagementServiceResourceInner>() { }.getType());
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginApplyNetworkConfigurationUpdates(String resourceGroupName, String serviceName) {
        return beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginApplyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginApplyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName) {
        return beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        ApiManagementServiceApplyNetworkConfigurationParameters parameters = new ApiManagementServiceApplyNetworkConfigurationParameters();
        parameters.withLocation(null);
        return service.beginApplyNetworkConfigurationUpdates(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginApplyNetworkConfigurationUpdatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiManagementServiceResourceInner object if successful.
     */
    public ApiManagementServiceResourceInner beginApplyNetworkConfigurationUpdates(String resourceGroupName, String serviceName, String location) {
        return beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location).toBlocking().single().body();
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiManagementServiceResourceInner> beginApplyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, String location, final ServiceCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location), serviceCallback);
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ApiManagementServiceResourceInner> beginApplyNetworkConfigurationUpdatesAsync(String resourceGroupName, String serviceName, String location) {
        return beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(resourceGroupName, serviceName, location).map(new Func1<ServiceResponse<ApiManagementServiceResourceInner>, ApiManagementServiceResourceInner>() {
            @Override
            public ApiManagementServiceResourceInner call(ServiceResponse<ApiManagementServiceResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated network settings.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param location Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiManagementServiceResourceInner object
     */
    public Observable<ServiceResponse<ApiManagementServiceResourceInner>> beginApplyNetworkConfigurationUpdatesWithServiceResponseAsync(String resourceGroupName, String serviceName, String location) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        ApiManagementServiceApplyNetworkConfigurationParameters parameters = null;
        if (location != null) {
            parameters = new ApiManagementServiceApplyNetworkConfigurationParameters();
            parameters.withLocation(location);
        }
        return service.beginApplyNetworkConfigurationUpdates(resourceGroupName, serviceName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ApiManagementServiceResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ApiManagementServiceResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ApiManagementServiceResourceInner> clientResponse = beginApplyNetworkConfigurationUpdatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ApiManagementServiceResourceInner> beginApplyNetworkConfigurationUpdatesDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiManagementServiceResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiManagementServiceResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object if successful.
     */
    public PagedList<ApiManagementServiceResourceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ApiManagementServiceResourceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApiManagementServiceResourceInner>(response.body()) {
            @Override
            public Page<ApiManagementServiceResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiManagementServiceResourceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ApiManagementServiceResourceInner>> serviceFuture, final ListOperationCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<Page<ApiManagementServiceResourceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Page<ApiManagementServiceResourceInner>>() {
                @Override
                public Page<ApiManagementServiceResourceInner> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List all API Management services within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List all API Management services within a resource group.
     *
    ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiManagementServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiManagementServiceResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiManagementServiceResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object if successful.
     */
    public PagedList<ApiManagementServiceResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ApiManagementServiceResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApiManagementServiceResourceInner>(response.body()) {
            @Override
            public Page<ApiManagementServiceResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiManagementServiceResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApiManagementServiceResourceInner>> serviceFuture, final ListOperationCallback<ApiManagementServiceResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<Page<ApiManagementServiceResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Page<ApiManagementServiceResourceInner>>() {
                @Override
                public Page<ApiManagementServiceResourceInner> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiManagementServiceResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApiManagementServiceResourceInner>>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(ServiceResponse<Page<ApiManagementServiceResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all API Management services within an Azure subscription.
     *
    ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiManagementServiceResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiManagementServiceResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiManagementServiceResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiManagementServiceResourceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiManagementServiceResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiManagementServiceResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
