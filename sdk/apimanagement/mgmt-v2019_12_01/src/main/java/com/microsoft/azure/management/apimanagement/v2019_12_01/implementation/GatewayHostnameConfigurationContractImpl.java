/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurationContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class GatewayHostnameConfigurationContractImpl extends CreatableUpdatableImpl<GatewayHostnameConfigurationContract, GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationContractImpl> implements GatewayHostnameConfigurationContract, GatewayHostnameConfigurationContract.Definition, GatewayHostnameConfigurationContract.Update {
    private final ApiManagementManager manager;
    private String resourceGroupName;
    private String serviceName;
    private String gatewayId;
    private String hcId;

    GatewayHostnameConfigurationContractImpl(String name, ApiManagementManager manager) {
        super(name, new GatewayHostnameConfigurationContractInner());
        this.manager = manager;
        // Set resource name
        this.hcId = name;
        //
    }

    GatewayHostnameConfigurationContractImpl(GatewayHostnameConfigurationContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.hcId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.gatewayId = IdParsingUtils.getValueFromIdByName(inner.id(), "gateways");
        this.hcId = IdParsingUtils.getValueFromIdByName(inner.id(), "hostnameConfigurations");
        //
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<GatewayHostnameConfigurationContract> createResourceAsync() {
        GatewayHostnameConfigurationsInner client = this.manager().inner().gatewayHostnameConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.gatewayId, this.hcId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<GatewayHostnameConfigurationContract> updateResourceAsync() {
        GatewayHostnameConfigurationsInner client = this.manager().inner().gatewayHostnameConfigurations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.gatewayId, this.hcId, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<GatewayHostnameConfigurationContractInner> getInnerAsync() {
        GatewayHostnameConfigurationsInner client = this.manager().inner().gatewayHostnameConfigurations();
        return client.getAsync(this.resourceGroupName, this.serviceName, this.gatewayId, this.hcId);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String certificateId() {
        return this.inner().certificateId();
    }

    @Override
    public String hostname() {
        return this.inner().hostname();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Boolean negotiateClientCertificate() {
        return this.inner().negotiateClientCertificate();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public GatewayHostnameConfigurationContractImpl withExistingGateway(String resourceGroupName, String serviceName, String gatewayId) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.gatewayId = gatewayId;
        return this;
    }

    @Override
    public GatewayHostnameConfigurationContractImpl withCertificateId(String certificateId) {
        this.inner().withCertificateId(certificateId);
        return this;
    }

    @Override
    public GatewayHostnameConfigurationContractImpl withHostname(String hostname) {
        this.inner().withHostname(hostname);
        return this;
    }

    @Override
    public GatewayHostnameConfigurationContractImpl withNegotiateClientCertificate(Boolean negotiateClientCertificate) {
        this.inner().withNegotiateClientCertificate(negotiateClientCertificate);
        return this;
    }

}
