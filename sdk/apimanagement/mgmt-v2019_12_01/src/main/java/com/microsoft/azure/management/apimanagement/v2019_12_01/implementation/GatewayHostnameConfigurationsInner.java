/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurationCreateOrUpdateHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurationGetEntityTagHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurationGetHeaders;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in GatewayHostnameConfigurations.
 */
public class GatewayHostnameConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private GatewayHostnameConfigurationsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of GatewayHostnameConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GatewayHostnameConfigurationsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(GatewayHostnameConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for GatewayHostnameConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GatewayHostnameConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations listByService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations")
        Observable<Response<ResponseBody>> listByService(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("gatewayId") String gatewayId, @Path("subscriptionId") String subscriptionId, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations getEntityTag" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}")
        Observable<Response<Void>> getEntityTag(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("gatewayId") String gatewayId, @Path("hcId") String hcId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("gatewayId") String gatewayId, @Path("hcId") String hcId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("gatewayId") String gatewayId, @Path("hcId") String hcId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body GatewayHostnameConfigurationContractInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/{gatewayId}/hostnameConfigurations/{hcId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("gatewayId") String gatewayId, @Path("hcId") String hcId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.GatewayHostnameConfigurations listByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object if successful.
     */
    public PagedList<GatewayHostnameConfigurationContractInner> listByService(final String resourceGroupName, final String serviceName, final String gatewayId) {
        ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId).toBlocking().single();
        return new PagedList<GatewayHostnameConfigurationContractInner>(response.body()) {
            @Override
            public Page<GatewayHostnameConfigurationContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayHostnameConfigurationContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String gatewayId, final ListOperationCallback<GatewayHostnameConfigurationContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId),
            new Func1<String, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<Page<GatewayHostnameConfigurationContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String gatewayId) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId)
            .map(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Page<GatewayHostnameConfigurationContractInner>>() {
                @Override
                public Page<GatewayHostnameConfigurationContractInner> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String gatewayId) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId)
            .concatMap(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String gatewayId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        return service.listByService(resourceGroupName, serviceName, gatewayId, this.client.subscriptionId(), top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object if successful.
     */
    public PagedList<GatewayHostnameConfigurationContractInner> listByService(final String resourceGroupName, final String serviceName, final String gatewayId, final Integer top, final Integer skip) {
        ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId, top, skip).toBlocking().single();
        return new PagedList<GatewayHostnameConfigurationContractInner>(response.body()) {
            @Override
            public Page<GatewayHostnameConfigurationContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayHostnameConfigurationContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String gatewayId, final Integer top, final Integer skip, final ListOperationCallback<GatewayHostnameConfigurationContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<Page<GatewayHostnameConfigurationContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String gatewayId, final Integer top, final Integer skip) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, top, skip)
            .map(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Page<GatewayHostnameConfigurationContractInner>>() {
                @Override
                public Page<GatewayHostnameConfigurationContractInner> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String gatewayId, final Integer top, final Integer skip) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, gatewayId, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String gatewayId, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByService(resourceGroupName, serviceName, gatewayId, this.client.subscriptionId(), top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> listByServiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayHostnameConfigurationContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayHostnameConfigurationContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityTag(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).toBlocking().single().body();
    }

    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId), serviceCallback);
    }

    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        return getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).map(new Func1<ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks that hostname configuration entity specified by identifier exists for specified Gateway entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders>> getEntityTagWithServiceResponseAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (hcId == null) {
            throw new IllegalArgumentException("Parameter hcId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityTag(resourceGroupName, serviceName, gatewayId, hcId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders> clientResponse = getEntityTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, GatewayHostnameConfigurationGetEntityTagHeaders> getEntityTagDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, GatewayHostnameConfigurationGetEntityTagHeaders.class);
    }

    /**
     * Gets the details of the Gateway hostname configuration specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayHostnameConfigurationContractInner object if successful.
     */
    public GatewayHostnameConfigurationContractInner get(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).toBlocking().single().body();
    }

    /**
     * Gets the details of the Gateway hostname configuration specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayHostnameConfigurationContractInner> getAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, final ServiceCallback<GatewayHostnameConfigurationContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId), serviceCallback);
    }

    /**
     * Gets the details of the Gateway hostname configuration specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayHostnameConfigurationContractInner object
     */
    public Observable<GatewayHostnameConfigurationContractInner> getAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).map(new Func1<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders>, GatewayHostnameConfigurationContractInner>() {
            @Override
            public GatewayHostnameConfigurationContractInner call(ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of the Gateway hostname configuration specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayHostnameConfigurationContractInner object
     */
    public Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (hcId == null) {
            throw new IllegalArgumentException("Parameter hcId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, gatewayId, hcId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationGetHeaders> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayHostnameConfigurationContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayHostnameConfigurationContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, GatewayHostnameConfigurationGetHeaders.class);
    }

    /**
     * Creates of updates hostname configuration for a Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param parameters the GatewayHostnameConfigurationContractInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayHostnameConfigurationContractInner object if successful.
     */
    public GatewayHostnameConfigurationContractInner createOrUpdate(String resourceGroupName, String serviceName, String gatewayId, String hcId, GatewayHostnameConfigurationContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId, parameters).toBlocking().single().body();
    }

    /**
     * Creates of updates hostname configuration for a Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param parameters the GatewayHostnameConfigurationContractInner value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayHostnameConfigurationContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, GatewayHostnameConfigurationContractInner parameters, final ServiceCallback<GatewayHostnameConfigurationContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId, parameters), serviceCallback);
    }

    /**
     * Creates of updates hostname configuration for a Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param parameters the GatewayHostnameConfigurationContractInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayHostnameConfigurationContractInner object
     */
    public Observable<GatewayHostnameConfigurationContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, GatewayHostnameConfigurationContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId, parameters).map(new Func1<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders>, GatewayHostnameConfigurationContractInner>() {
            @Override
            public GatewayHostnameConfigurationContractInner call(ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates of updates hostname configuration for a Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param parameters the GatewayHostnameConfigurationContractInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayHostnameConfigurationContractInner object
     */
    public Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, GatewayHostnameConfigurationContractInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (hcId == null) {
            throw new IllegalArgumentException("Parameter hcId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, serviceName, gatewayId, hcId, this.client.subscriptionId(), this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<GatewayHostnameConfigurationContractInner, GatewayHostnameConfigurationCreateOrUpdateHeaders> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayHostnameConfigurationContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayHostnameConfigurationContractInner>() { }.getType())
                .register(201, new TypeToken<GatewayHostnameConfigurationContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, GatewayHostnameConfigurationCreateOrUpdateHeaders.class);
    }

    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).toBlocking().single().body();
    }

    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId), serviceCallback);
    }

    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, gatewayId, hcId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified hostname configuration from the specified Gateway.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param gatewayId Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value 'managed'
     * @param hcId Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String gatewayId, String hcId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (hcId == null) {
            throw new IllegalArgumentException("Parameter hcId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, gatewayId, hcId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object if successful.
     */
    public PagedList<GatewayHostnameConfigurationContractInner> listByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response = listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<GatewayHostnameConfigurationContractInner>(response.body()) {
            @Override
            public Page<GatewayHostnameConfigurationContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayHostnameConfigurationContractInner>> listByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<GatewayHostnameConfigurationContractInner>> serviceFuture, final ListOperationCallback<GatewayHostnameConfigurationContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<Page<GatewayHostnameConfigurationContractInner>> listByServiceNextAsync(final String nextPageLink) {
        return listByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Page<GatewayHostnameConfigurationContractInner>>() {
                @Override
                public Page<GatewayHostnameConfigurationContractInner> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(ServiceResponse<Page<GatewayHostnameConfigurationContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of hostname configurations for the specified gateway.
     *
    ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayHostnameConfigurationContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> listByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> result = listByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayHostnameConfigurationContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayHostnameConfigurationContractInner>> listByServiceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayHostnameConfigurationContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayHostnameConfigurationContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
