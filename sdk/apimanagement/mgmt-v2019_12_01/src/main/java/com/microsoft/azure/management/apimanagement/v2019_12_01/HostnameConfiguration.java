/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Custom hostname configuration.
 */
public class HostnameConfiguration {
    /**
     * Hostname type. Possible values include: 'Proxy', 'Portal', 'Management',
     * 'Scm', 'DeveloperPortal'.
     */
    @JsonProperty(value = "type", required = true)
    private HostnameType type;

    /**
     * Hostname to configure on the Api Management service.
     */
    @JsonProperty(value = "hostName", required = true)
    private String hostName;

    /**
     * Url to the KeyVault Secret containing the Ssl Certificate. If absolute
     * Url containing version is provided, auto-update of ssl certificate will
     * not work. This requires Api Management service to be configured with
     * MSI. The secret should be of type *application/x-pkcs12*.
     */
    @JsonProperty(value = "keyVaultId")
    private String keyVaultId;

    /**
     * Base64 Encoded certificate.
     */
    @JsonProperty(value = "encodedCertificate")
    private String encodedCertificate;

    /**
     * Certificate Password.
     */
    @JsonProperty(value = "certificatePassword")
    private String certificatePassword;

    /**
     * Specify true to setup the certificate associated with this Hostname as
     * the Default SSL Certificate. If a client does not send the SNI header,
     * then this will be the certificate that will be challenged. The property
     * is useful if a service has multiple custom hostname enabled and it needs
     * to decide on the default ssl certificate. The setting only applied to
     * Proxy Hostname Type.
     */
    @JsonProperty(value = "defaultSslBinding")
    private Boolean defaultSslBinding;

    /**
     * Specify true to always negotiate client certificate on the hostname.
     * Default Value is false.
     */
    @JsonProperty(value = "negotiateClientCertificate")
    private Boolean negotiateClientCertificate;

    /**
     * Certificate information.
     */
    @JsonProperty(value = "certificate")
    private CertificateInformation certificate;

    /**
     * Get hostname type. Possible values include: 'Proxy', 'Portal', 'Management', 'Scm', 'DeveloperPortal'.
     *
     * @return the type value
     */
    public HostnameType type() {
        return this.type;
    }

    /**
     * Set hostname type. Possible values include: 'Proxy', 'Portal', 'Management', 'Scm', 'DeveloperPortal'.
     *
     * @param type the type value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withType(HostnameType type) {
        this.type = type;
        return this;
    }

    /**
     * Get hostname to configure on the Api Management service.
     *
     * @return the hostName value
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * Set hostname to configure on the Api Management service.
     *
     * @param hostName the hostName value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }

    /**
     * Get url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*.
     *
     * @return the keyVaultId value
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Set url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with MSI. The secret should be of type *application/x-pkcs12*.
     *
     * @param keyVaultId the keyVaultId value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withKeyVaultId(String keyVaultId) {
        this.keyVaultId = keyVaultId;
        return this;
    }

    /**
     * Get base64 Encoded certificate.
     *
     * @return the encodedCertificate value
     */
    public String encodedCertificate() {
        return this.encodedCertificate;
    }

    /**
     * Set base64 Encoded certificate.
     *
     * @param encodedCertificate the encodedCertificate value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withEncodedCertificate(String encodedCertificate) {
        this.encodedCertificate = encodedCertificate;
        return this;
    }

    /**
     * Get certificate Password.
     *
     * @return the certificatePassword value
     */
    public String certificatePassword() {
        return this.certificatePassword;
    }

    /**
     * Set certificate Password.
     *
     * @param certificatePassword the certificatePassword value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withCertificatePassword(String certificatePassword) {
        this.certificatePassword = certificatePassword;
        return this;
    }

    /**
     * Get specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     *
     * @return the defaultSslBinding value
     */
    public Boolean defaultSslBinding() {
        return this.defaultSslBinding;
    }

    /**
     * Set specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     *
     * @param defaultSslBinding the defaultSslBinding value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withDefaultSslBinding(Boolean defaultSslBinding) {
        this.defaultSslBinding = defaultSslBinding;
        return this;
    }

    /**
     * Get specify true to always negotiate client certificate on the hostname. Default Value is false.
     *
     * @return the negotiateClientCertificate value
     */
    public Boolean negotiateClientCertificate() {
        return this.negotiateClientCertificate;
    }

    /**
     * Set specify true to always negotiate client certificate on the hostname. Default Value is false.
     *
     * @param negotiateClientCertificate the negotiateClientCertificate value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withNegotiateClientCertificate(Boolean negotiateClientCertificate) {
        this.negotiateClientCertificate = negotiateClientCertificate;
        return this;
    }

    /**
     * Get certificate information.
     *
     * @return the certificate value
     */
    public CertificateInformation certificate() {
        return this.certificate;
    }

    /**
     * Set certificate information.
     *
     * @param certificate the certificate value to set
     * @return the HostnameConfiguration object itself.
     */
    public HostnameConfiguration withCertificate(CertificateInformation certificate) {
        this.certificate = certificate;
        return this;
    }

}
