/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagAssignToApiHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagCreateOrUpdateHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagCreateUpdateParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetByApiHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetByOperationHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetByProductHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetEntityStateByApiHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetEntityStateByOperationHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetEntityStateByProductHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetEntityStateHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagGetHeaders;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Tags.
 */
public class TagsInner {
    /** The Retrofit service to perform REST calls. */
    private TagsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of TagsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TagsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(TagsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Tags to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TagsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByOperation" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags")
        Observable<Response<ResponseBody>> listByOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("operationId") String operationId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getEntityStateByOperation" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}")
        Observable<Response<Void>> getEntityStateByOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("operationId") String operationId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getByOperation" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}")
        Observable<Response<ResponseBody>> getByOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("operationId") String operationId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags assignToOperation" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}")
        Observable<Response<ResponseBody>> assignToOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("operationId") String operationId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags detachFromOperation" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> detachFromOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("operationId") String operationId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByApi" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags")
        Observable<Response<ResponseBody>> listByApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getEntityStateByApi" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}")
        Observable<Response<Void>> getEntityStateByApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getByApi" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}")
        Observable<Response<ResponseBody>> getByApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags assignToApi" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}")
        Observable<Response<ResponseBody>> assignToApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags detachFromApi" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> detachFromApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByProduct" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags")
        Observable<Response<ResponseBody>> listByProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getEntityStateByProduct" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}")
        Observable<Response<Void>> getEntityStateByProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getByProduct" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}")
        Observable<Response<ResponseBody>> getByProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags assignToProduct" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}")
        Observable<Response<ResponseBody>> assignToProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags detachFromProduct" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> detachFromProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags")
        Observable<Response<ResponseBody>> listByService(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("scope") String scope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags getEntityState" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}")
        Observable<Response<Void>> getEntityState(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TagCreateUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TagCreateUpdateParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("tagId") String tagId, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByOperationNext" })
        @GET
        Observable<Response<ResponseBody>> listByOperationNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByApiNext" })
        @GET
        Observable<Response<ResponseBody>> listByApiNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByProductNext" })
        @GET
        Observable<Response<ResponseBody>> listByProductNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Tags listByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByOperation(final String resourceGroupName, final String serviceName, final String apiId, final String operationId) {
        ServiceResponse<Page<TagContractInner>> response = listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId) {
        return listByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId) {
        return listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        return service.listByOperation(resourceGroupName, serviceName, apiId, operationId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByOperationDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByOperation(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<TagContractInner>> response = listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId, filter, top, skip).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final String filter, final Integer top, final Integer skip, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final String filter, final Integer top, final Integer skip) {
        return listByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final String filter, final Integer top, final Integer skip) {
        return listByOperationSinglePageAsync(resourceGroupName, serviceName, apiId, operationId, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<TagContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<TagContractInner>> * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
    ServiceResponse<PageImpl<TagContractInner>> * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
    ServiceResponse<PageImpl<TagContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<TagContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<TagContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId, final String operationId, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByOperation(resourceGroupName, serviceName, apiId, operationId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByOperationDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByOperationDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityStateByOperation(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        getEntityStateByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).toBlocking().single().body();
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityStateByOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityStateByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId), serviceCallback);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityStateByOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return getEntityStateByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).map(new Func1<ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders>> getEntityStateByOperationWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityStateByOperation(resourceGroupName, serviceName, apiId, operationId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders> clientResponse = getEntityStateByOperationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, TagGetEntityStateByOperationHeaders> getEntityStateByOperationDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, TagGetEntityStateByOperationHeaders.class);
    }

    /**
     * Get tag associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner getByOperation(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return getByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).toBlocking().single().body();
    }

    /**
     * Get tag associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> getByOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId), serviceCallback);
    }

    /**
     * Get tag associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> getByOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return getByOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get tag associated with the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders>> getByOperationWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByOperation(resourceGroupName, serviceName, apiId, operationId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders> clientResponse = getByOperationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagGetByOperationHeaders> getByOperationDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagGetByOperationHeaders.class);
    }

    /**
     * Assign tag to the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner assignToOperation(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return assignToOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).toBlocking().single().body();
    }

    /**
     * Assign tag to the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> assignToOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(assignToOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId), serviceCallback);
    }

    /**
     * Assign tag to the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> assignToOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return assignToOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).map(new Func1<ServiceResponse<TagContractInner>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponse<TagContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Assign tag to the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponse<TagContractInner>> assignToOperationWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.assignToOperation(resourceGroupName, serviceName, apiId, operationId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TagContractInner>>>() {
                @Override
                public Observable<ServiceResponse<TagContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TagContractInner> clientResponse = assignToOperationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TagContractInner> assignToOperationDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .register(201, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Detach the tag from the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void detachFromOperation(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        detachFromOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).toBlocking().single().body();
    }

    /**
     * Detach the tag from the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> detachFromOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(detachFromOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId), serviceCallback);
    }

    /**
     * Detach the tag from the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> detachFromOperationAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        return detachFromOperationWithServiceResponseAsync(resourceGroupName, serviceName, apiId, operationId, tagId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Detach the tag from the Operation.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> detachFromOperationWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.detachFromOperation(resourceGroupName, serviceName, apiId, operationId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = detachFromOperationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> detachFromOperationDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByApi(final String resourceGroupName, final String serviceName, final String apiId) {
        ServiceResponse<Page<TagContractInner>> response = listByApiSinglePageAsync(resourceGroupName, serviceName, apiId).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiSinglePageAsync(resourceGroupName, serviceName, apiId),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        return listByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        return listByApiSinglePageAsync(resourceGroupName, serviceName, apiId)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        return service.listByApi(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByApiDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByApi(final String resourceGroupName, final String serviceName, final String apiId, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<TagContractInner>> response = listByApiSinglePageAsync(resourceGroupName, serviceName, apiId, filter, top, skip).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId, final String filter, final Integer top, final Integer skip, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiSinglePageAsync(resourceGroupName, serviceName, apiId, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId, final String filter, final Integer top, final Integer skip) {
        return listByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId, final String filter, final Integer top, final Integer skip) {
        return listByApiSinglePageAsync(resourceGroupName, serviceName, apiId, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<TagContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<TagContractInner>> * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
    ServiceResponse<PageImpl<TagContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<TagContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<TagContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByApi(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByApiDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByApiDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityStateByApi(String resourceGroupName, String serviceName, String apiId, String tagId) {
        getEntityStateByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).toBlocking().single().body();
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityStateByApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityStateByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId), serviceCallback);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityStateByApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return getEntityStateByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).map(new Func1<ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders>> getEntityStateByApiWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityStateByApi(resourceGroupName, serviceName, apiId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders> clientResponse = getEntityStateByApiDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, TagGetEntityStateByApiHeaders> getEntityStateByApiDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, TagGetEntityStateByApiHeaders.class);
    }

    /**
     * Get tag associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner getByApi(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return getByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).toBlocking().single().body();
    }

    /**
     * Get tag associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> getByApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId), serviceCallback);
    }

    /**
     * Get tag associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> getByApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return getByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get tag associated with the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders>> getByApiWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByApi(resourceGroupName, serviceName, apiId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders> clientResponse = getByApiDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagGetByApiHeaders> getByApiDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagGetByApiHeaders.class);
    }

    /**
     * Assign tag to the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner assignToApi(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return assignToApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).toBlocking().single().body();
    }

    /**
     * Assign tag to the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> assignToApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(assignToApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId), serviceCallback);
    }

    /**
     * Assign tag to the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> assignToApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return assignToApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Assign tag to the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders>> assignToApiWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.assignToApi(resourceGroupName, serviceName, apiId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders> clientResponse = assignToApiDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagAssignToApiHeaders> assignToApiDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .register(201, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagAssignToApiHeaders.class);
    }

    /**
     * Detach the tag from the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void detachFromApi(String resourceGroupName, String serviceName, String apiId, String tagId) {
        detachFromApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).toBlocking().single().body();
    }

    /**
     * Detach the tag from the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> detachFromApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(detachFromApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId), serviceCallback);
    }

    /**
     * Detach the tag from the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> detachFromApiAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        return detachFromApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId, tagId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Detach the tag from the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> detachFromApiWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.detachFromApi(resourceGroupName, serviceName, apiId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = detachFromApiDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> detachFromApiDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String productId) {
        ServiceResponse<Page<TagContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, productId).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, productId),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String productId) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, productId)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String productId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        return service.listByProduct(resourceGroupName, serviceName, productId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<TagContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<TagContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<TagContractInner>> * @param productId Product identifier. Must be unique in the current API Management service instance.
    ServiceResponse<PageImpl<TagContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<TagContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<TagContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByProduct(resourceGroupName, serviceName, productId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByProductDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityStateByProduct(String resourceGroupName, String serviceName, String productId, String tagId) {
        getEntityStateByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).toBlocking().single().body();
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityStateByProductAsync(String resourceGroupName, String serviceName, String productId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityStateByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId), serviceCallback);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityStateByProductAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        return getEntityStateByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).map(new Func1<ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders>> getEntityStateByProductWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityStateByProduct(resourceGroupName, serviceName, productId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders> clientResponse = getEntityStateByProductDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, TagGetEntityStateByProductHeaders> getEntityStateByProductDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, TagGetEntityStateByProductHeaders.class);
    }

    /**
     * Get tag associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner getByProduct(String resourceGroupName, String serviceName, String productId, String tagId) {
        return getByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).toBlocking().single().body();
    }

    /**
     * Get tag associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> getByProductAsync(String resourceGroupName, String serviceName, String productId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId), serviceCallback);
    }

    /**
     * Get tag associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> getByProductAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        return getByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get tag associated with the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders>> getByProductWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByProduct(resourceGroupName, serviceName, productId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders> clientResponse = getByProductDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagGetByProductHeaders> getByProductDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagGetByProductHeaders.class);
    }

    /**
     * Assign tag to the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner assignToProduct(String resourceGroupName, String serviceName, String productId, String tagId) {
        return assignToProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).toBlocking().single().body();
    }

    /**
     * Assign tag to the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> assignToProductAsync(String resourceGroupName, String serviceName, String productId, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(assignToProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId), serviceCallback);
    }

    /**
     * Assign tag to the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> assignToProductAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        return assignToProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).map(new Func1<ServiceResponse<TagContractInner>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponse<TagContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Assign tag to the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponse<TagContractInner>> assignToProductWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.assignToProduct(resourceGroupName, serviceName, productId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TagContractInner>>>() {
                @Override
                public Observable<ServiceResponse<TagContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TagContractInner> clientResponse = assignToProductDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TagContractInner> assignToProductDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .register(201, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Detach the tag from the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void detachFromProduct(String resourceGroupName, String serviceName, String productId, String tagId) {
        detachFromProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).toBlocking().single().body();
    }

    /**
     * Detach the tag from the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> detachFromProductAsync(String resourceGroupName, String serviceName, String productId, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(detachFromProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId), serviceCallback);
    }

    /**
     * Detach the tag from the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> detachFromProductAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        return detachFromProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, tagId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Detach the tag from the Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> detachFromProductWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.detachFromProduct(resourceGroupName, serviceName, productId, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = detachFromProductDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> detachFromProductDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByService(final String resourceGroupName, final String serviceName) {
        ServiceResponse<Page<TagContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        final String scope = null;
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, scope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param scope Scope like 'apis', 'products' or 'apis/{apiId}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByService(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String scope) {
        ServiceResponse<Page<TagContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, scope).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param scope Scope like 'apis', 'products' or 'apis/{apiId}
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String scope, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, scope),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param scope Scope like 'apis', 'products' or 'apis/{apiId}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String scope) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, scope)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param scope Scope like 'apis', 'products' or 'apis/{apiId}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String scope) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, scope)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<TagContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<TagContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<TagContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<TagContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<TagContractInner>> * @param scope Scope like 'apis', 'products' or 'apis/{apiId}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String scope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, scope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByServiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityState(String resourceGroupName, String serviceName, String tagId) {
        getEntityStateWithServiceResponseAsync(resourceGroupName, serviceName, tagId).toBlocking().single().body();
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityStateAsync(String resourceGroupName, String serviceName, String tagId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityStateWithServiceResponseAsync(resourceGroupName, serviceName, tagId), serviceCallback);
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityStateAsync(String resourceGroupName, String serviceName, String tagId) {
        return getEntityStateWithServiceResponseAsync(resourceGroupName, serviceName, tagId).map(new Func1<ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders>> getEntityStateWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityState(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders> clientResponse = getEntityStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, TagGetEntityStateHeaders> getEntityStateDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, TagGetEntityStateHeaders.class);
    }

    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner get(String resourceGroupName, String serviceName, String tagId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, tagId).toBlocking().single().body();
    }

    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> getAsync(String resourceGroupName, String serviceName, String tagId, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, tagId), serviceCallback);
    }

    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> getAsync(String resourceGroupName, String serviceName, String tagId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, tagId).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagGetHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagGetHeaders> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagGetHeaders> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagGetHeaders.class);
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner createOrUpdate(String resourceGroupName, String serviceName, String tagId, String displayName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName).toBlocking().single().body();
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String tagId, String displayName, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName), serviceCallback);
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String tagId, String displayName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId, String displayName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (displayName == null) {
            throw new IllegalArgumentException("Parameter displayName is required and cannot be null.");
        }
        final String ifMatch = null;
        TagCreateUpdateParameters parameters = new TagCreateUpdateParameters();
        parameters.withDisplayName(displayName);
        return service.createOrUpdate(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagContractInner object if successful.
     */
    public TagContractInner createOrUpdate(String resourceGroupName, String serviceName, String tagId, String displayName, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String tagId, String displayName, String ifMatch, final ServiceCallback<TagContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName, ifMatch), serviceCallback);
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<TagContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String tagId, String displayName, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, displayName, ifMatch).map(new Func1<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>, TagContractInner>() {
            @Override
            public TagContractInner call(ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a tag.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param displayName Tag name.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagContractInner object
     */
    public Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId, String displayName, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (displayName == null) {
            throw new IllegalArgumentException("Parameter displayName is required and cannot be null.");
        }
        TagCreateUpdateParameters parameters = new TagCreateUpdateParameters();
        parameters.withDisplayName(displayName);
        return service.createOrUpdate(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<TagContractInner, TagCreateOrUpdateHeaders> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagContractInner>() { }.getType())
                .register(201, new TypeToken<TagContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, TagCreateOrUpdateHeaders.class);
    }

    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String resourceGroupName, String serviceName, String tagId, String ifMatch, String displayName) {
        updateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch, displayName).toBlocking().single().body();
    }

    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param displayName Tag name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch, String displayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch, displayName), serviceCallback);
    }

    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch, String displayName) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch, displayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the details of the tag specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param displayName Tag name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch, String displayName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (displayName == null) {
            throw new IllegalArgumentException("Parameter displayName is required and cannot be null.");
        }
        TagCreateUpdateParameters parameters = new TagCreateUpdateParameters();
        parameters.withDisplayName(displayName);
        return service.update(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String tagId, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch).toBlocking().single().body();
    }

    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch), serviceCallback);
    }

    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, tagId, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes specific tag of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param tagId Tag identifier. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String tagId, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (tagId == null) {
            throw new IllegalArgumentException("Parameter tagId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, tagId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByOperationNext(final String nextPageLink) {
        ServiceResponse<Page<TagContractInner>> response = listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByOperationNextAsync(final String nextPageLink, final ServiceFuture<List<TagContractInner>> serviceFuture, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByOperationNextAsync(final String nextPageLink) {
        return listByOperationNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationNextWithServiceResponseAsync(final String nextPageLink) {
        return listByOperationNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Operation.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByOperationNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByOperationNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByOperationNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByOperationNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByApiNext(final String nextPageLink) {
        ServiceResponse<Page<TagContractInner>> response = listByApiNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByApiNextAsync(final String nextPageLink, final ServiceFuture<List<TagContractInner>> serviceFuture, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByApiNextAsync(final String nextPageLink) {
        return listByApiNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiNextWithServiceResponseAsync(final String nextPageLink) {
        return listByApiNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the API.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByApiNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByApiNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByApiNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByApiNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByProductNext(final String nextPageLink) {
        ServiceResponse<Page<TagContractInner>> response = listByProductNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByProductNextAsync(final String nextPageLink, final ServiceFuture<List<TagContractInner>> serviceFuture, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByProductNextAsync(final String nextPageLink) {
        return listByProductNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductNextWithServiceResponseAsync(final String nextPageLink) {
        return listByProductNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all Tags associated with the Product.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByProductNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByProductNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByProductNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByProductNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagContractInner&gt; object if successful.
     */
    public PagedList<TagContractInner> listByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<TagContractInner>> response = listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TagContractInner>(response.body()) {
            @Override
            public Page<TagContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagContractInner>> listByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<TagContractInner>> serviceFuture, final ListOperationCallback<TagContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<Page<TagContractInner>> listByServiceNextAsync(final String nextPageLink) {
        return listByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TagContractInner>>, Page<TagContractInner>>() {
                @Override
                public Page<TagContractInner> call(ServiceResponse<Page<TagContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TagContractInner>>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(ServiceResponse<Page<TagContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of tags defined within a service instance.
     *
    ServiceResponse<PageImpl<TagContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagContractInner>>> listByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagContractInner>> result = listByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagContractInner>> listByServiceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
