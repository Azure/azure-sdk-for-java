/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.RecipientEmailContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.NotificationName;

class RecipientEmailContractImpl extends CreatableUpdatableImpl<RecipientEmailContract, RecipientEmailContractInner, RecipientEmailContractImpl> implements RecipientEmailContract, RecipientEmailContract.Definition, RecipientEmailContract.Update {
    private final ApiManagementManager manager;
    private String resourceGroupName;
    private String serviceName;
    private NotificationName notificationName;
    private String email;

    RecipientEmailContractImpl(String name, ApiManagementManager manager) {
        super(name, new RecipientEmailContractInner());
        this.manager = manager;
        // Set resource name
        this.email = name;
        //
    }

    RecipientEmailContractImpl(RecipientEmailContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.email = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.notificationName = NotificationName.fromString(IdParsingUtils.getValueFromIdByName(inner.id(), "notifications"));
        this.email = IdParsingUtils.getValueFromIdByName(inner.id(), "recipientEmails");
        //
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<RecipientEmailContract> createResourceAsync() {
        NotificationRecipientEmailsInner client = this.manager().inner().notificationRecipientEmails();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.notificationName, this.email)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<RecipientEmailContract> updateResourceAsync() {
        NotificationRecipientEmailsInner client = this.manager().inner().notificationRecipientEmails();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.notificationName, this.email)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<RecipientEmailContractInner> getInnerAsync() {
        NotificationRecipientEmailsInner client = this.manager().inner().notificationRecipientEmails();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String email() {
        return this.inner().email();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public RecipientEmailContractImpl withExistingNotification(String resourceGroupName, String serviceName, NotificationName notificationName) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.notificationName = notificationName;
        return this;
    }

}
