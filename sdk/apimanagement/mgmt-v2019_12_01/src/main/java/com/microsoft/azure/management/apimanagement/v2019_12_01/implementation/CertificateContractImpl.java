/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.CertificateContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.CertificateCreateOrUpdateParameters;
import org.joda.time.DateTime;
import rx.functions.Func1;

class CertificateContractImpl extends CreatableUpdatableImpl<CertificateContract, CertificateContractInner, CertificateContractImpl> implements CertificateContract, CertificateContract.Definition, CertificateContract.Update {
    private String resourceGroupName;
    private String serviceName;
    private String certificateId;
    private String cifMatch;
    private String uifMatch;
    private CertificateCreateOrUpdateParameters createOrUpdateParameter;
    private final ApiManagementManager manager;

    CertificateContractImpl(String name, ApiManagementManager manager) {
        super(name, new CertificateContractInner());
        this.manager = manager;
        // Set resource name
        this.certificateId = name;
        //
        this.createOrUpdateParameter = new CertificateCreateOrUpdateParameters();
    }

    CertificateContractImpl(CertificateContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.certificateId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.certificateId = IdParsingUtils.getValueFromIdByName(inner.id(), "certificates");
        // set other parameters for create and update
        this.createOrUpdateParameter = new CertificateCreateOrUpdateParameters();
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CertificateContract> createResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.certificateId, this.createOrUpdateParameter, this.cifMatch)
            .map(new Func1<CertificateContractInner, CertificateContractInner>() {
               @Override
               public CertificateContractInner call(CertificateContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<CertificateContract> updateResourceAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.certificateId, this.createOrUpdateParameter, this.uifMatch)
            .map(new Func1<CertificateContractInner, CertificateContractInner>() {
               @Override
               public CertificateContractInner call(CertificateContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CertificateContractInner> getInnerAsync() {
        CertificatesInner client = this.manager().inner().certificates();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new CertificateCreateOrUpdateParameters();
    }

    @Override
    public DateTime expirationDate() {
        return this.inner().expirationDate();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String subject() {
        return this.inner().subject();
    }

    @Override
    public String thumbprint() {
        return this.inner().thumbprint();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public CertificateContractImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public CertificateContractImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public CertificateContractImpl withData(String data) {
        this.createOrUpdateParameter.withData(data);
        return this;
    }

    @Override
    public CertificateContractImpl withPassword(String password) {
        this.createOrUpdateParameter.withPassword(password);
        return this;
    }

    @Override
    public CertificateContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

}
