/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.UserContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.UserCreateParameters;
import java.util.List;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GroupContractProperties;
import java.util.ArrayList;
import com.microsoft.azure.management.apimanagement.v2019_12_01.UserIdentityContract;
import org.joda.time.DateTime;
import com.microsoft.azure.management.apimanagement.v2019_12_01.UserState;
import com.microsoft.azure.management.apimanagement.v2019_12_01.AppType;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Confirmation;
import rx.functions.Func1;

class UserContractImpl extends CreatableUpdatableImpl<UserContract, UserContractInner, UserContractImpl> implements UserContract, UserContract.Definition, UserContract.Update {
    private String resourceGroupName;
    private String serviceName;
    private String userId;
    private String cifMatch;
    private String uifMatch;
    private UserCreateParameters createOrUpdateParameter;
    private final ApiManagementManager manager;

    UserContractImpl(String name, ApiManagementManager manager) {
        super(name, new UserContractInner());
        this.manager = manager;
        // Set resource name
        this.userId = name;
        //
        this.createOrUpdateParameter = new UserCreateParameters();
    }

    UserContractImpl(UserContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.userId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.userId = IdParsingUtils.getValueFromIdByName(inner.id(), "users");
        // set other parameters for create and update
        this.createOrUpdateParameter = new UserCreateParameters();
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<UserContract> createResourceAsync() {
        UsersInner client = this.manager().inner().users();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.userId, this.createOrUpdateParameter, this.cifMatch)
            .map(new Func1<UserContractInner, UserContractInner>() {
               @Override
               public UserContractInner call(UserContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<UserContract> updateResourceAsync() {
        UsersInner client = this.manager().inner().users();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.userId, this.createOrUpdateParameter, this.uifMatch)
            .map(new Func1<UserContractInner, UserContractInner>() {
               @Override
               public UserContractInner call(UserContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<UserContractInner> getInnerAsync() {
        UsersInner client = this.manager().inner().users();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new UserCreateParameters();
    }

    @Override
    public String email() {
        return this.inner().email();
    }

    @Override
    public String firstName() {
        return this.inner().firstName();
    }

    @Override
    public List<GroupContractProperties> groups() {
        return this.inner().groups();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<UserIdentityContract> identities() {
        List<UserIdentityContract> lst = new ArrayList<UserIdentityContract>();
        if (this.inner().identities() != null) {
            for (UserIdentityContractInner inner : this.inner().identities()) {
                lst.add( new UserIdentityContractImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String lastName() {
        return this.inner().lastName();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String note() {
        return this.inner().note();
    }

    @Override
    public DateTime registrationDate() {
        return this.inner().registrationDate();
    }

    @Override
    public UserState state() {
        return this.inner().state();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public UserContractImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public UserContractImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public UserContractImpl withEmail(String email) {
        this.createOrUpdateParameter.withEmail(email);
        return this;
    }

    @Override
    public UserContractImpl withFirstName(String firstName) {
        this.createOrUpdateParameter.withFirstName(firstName);
        return this;
    }

    @Override
    public UserContractImpl withLastName(String lastName) {
        this.createOrUpdateParameter.withLastName(lastName);
        return this;
    }

    @Override
    public UserContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public UserContractImpl withAppType(AppType appType) {
        this.createOrUpdateParameter.withAppType(appType);
        return this;
    }

    @Override
    public UserContractImpl withConfirmation(Confirmation confirmation) {
        this.createOrUpdateParameter.withConfirmation(confirmation);
        return this;
    }

    @Override
    public UserContractImpl withIdentities(List<UserIdentityContractInner> identities) {
        this.createOrUpdateParameter.withIdentities(identities);
        return this;
    }

    @Override
    public UserContractImpl withNote(String note) {
        this.createOrUpdateParameter.withNote(note);
        return this;
    }

    @Override
    public UserContractImpl withPassword(String password) {
        this.createOrUpdateParameter.withPassword(password);
        return this;
    }

    @Override
    public UserContractImpl withState(UserState state) {
        this.createOrUpdateParameter.withState(state);
        return this;
    }

}
