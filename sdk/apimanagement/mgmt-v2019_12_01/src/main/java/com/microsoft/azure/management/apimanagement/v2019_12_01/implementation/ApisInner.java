/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiCreateOrUpdateHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiCreateOrUpdateParameter;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiGetEntityTagHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiGetHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiUpdateContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Apis.
 */
public class ApisInner {
    /** The Retrofit service to perform REST calls. */
    private ApisService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ApisInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApisInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ApisService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Apis to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApisService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis listByService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis")
        Observable<Response<ResponseBody>> listByService(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("tags") String tags, @Query("expandApiVersionSet") Boolean expandApiVersionSet, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis getEntityTag" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}")
        Observable<Response<Void>> getEntityTag(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Body ApiCreateOrUpdateParameter parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Body ApiCreateOrUpdateParameter parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Body ApiUpdateContract parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Query("deleteRevisions") Boolean deleteRevisions, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis listByTags" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apisByTags")
        Observable<Response<ResponseBody>> listByTags(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("includeNotTaggedApis") Boolean includeNotTaggedApis, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis listByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Apis listByTagsNext" })
        @GET
        Observable<Response<ResponseBody>> listByTagsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiContractInner&gt; object if successful.
     */
    public PagedList<ApiContractInner> listByService(final String resourceGroupName, final String serviceName) {
        ServiceResponse<Page<ApiContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName).toBlocking().single();
        return new PagedList<ApiContractInner>(response.body()) {
            @Override
            public Page<ApiContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final ListOperationCallback<ApiContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName),
            new Func1<String, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<Page<ApiContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName)
            .map(new Func1<ServiceResponse<Page<ApiContractInner>>, Page<ApiContractInner>>() {
                @Override
                public Page<ApiContractInner> call(ServiceResponse<Page<ApiContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName)
            .concatMap(new Func1<ServiceResponse<Page<ApiContractInner>>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(ServiceResponse<Page<ApiContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        final String tags = null;
        final Boolean expandApiVersionSet = null;
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, tags, expandApiVersionSet, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param tags Include tags in the response.
     * @param expandApiVersionSet Include full ApiVersionSet resource in response
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiContractInner&gt; object if successful.
     */
    public PagedList<ApiContractInner> listByService(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String tags, final Boolean expandApiVersionSet) {
        ServiceResponse<Page<ApiContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, tags, expandApiVersionSet).toBlocking().single();
        return new PagedList<ApiContractInner>(response.body()) {
            @Override
            public Page<ApiContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param tags Include tags in the response.
     * @param expandApiVersionSet Include full ApiVersionSet resource in response
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String tags, final Boolean expandApiVersionSet, final ListOperationCallback<ApiContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, tags, expandApiVersionSet),
            new Func1<String, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param tags Include tags in the response.
     * @param expandApiVersionSet Include full ApiVersionSet resource in response
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<Page<ApiContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String tags, final Boolean expandApiVersionSet) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, tags, expandApiVersionSet)
            .map(new Func1<ServiceResponse<Page<ApiContractInner>>, Page<ApiContractInner>>() {
                @Override
                public Page<ApiContractInner> call(ServiceResponse<Page<ApiContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param tags Include tags in the response.
     * @param expandApiVersionSet Include full ApiVersionSet resource in response
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String tags, final Boolean expandApiVersionSet) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, tags, expandApiVersionSet)
            .concatMap(new Func1<ServiceResponse<Page<ApiContractInner>>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(ServiceResponse<Page<ApiContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
    ServiceResponse<PageImpl<ApiContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ApiContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ApiContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<ApiContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ApiContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ApiContractInner>> * @param tags Include tags in the response.
    ServiceResponse<PageImpl<ApiContractInner>> * @param expandApiVersionSet Include full ApiVersionSet resource in response
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String tags, final Boolean expandApiVersionSet) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, tags, expandApiVersionSet, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiContractInner>> listByServiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityTag(String resourceGroupName, String serviceName, String apiId) {
        getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId).toBlocking().single().body();
    }

    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId), serviceCallback);
    }

    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId) {
        return getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId).map(new Func1<ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state (Etag) version of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders>> getEntityTagWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityTag(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders> clientResponse = getEntityTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, ApiGetEntityTagHeaders> getEntityTagDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, ApiGetEntityTagHeaders.class);
    }

    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiContractInner object if successful.
     */
    public ApiContractInner get(String resourceGroupName, String serviceName, String apiId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId).toBlocking().single().body();
    }

    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiContractInner> getAsync(String resourceGroupName, String serviceName, String apiId, final ServiceCallback<ApiContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, apiId), serviceCallback);
    }

    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ApiContractInner> getAsync(String resourceGroupName, String serviceName, String apiId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId).map(new Func1<ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders>, ApiContractInner>() {
            @Override
            public ApiContractInner call(ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of the API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ApiContractInner, ApiGetHeaders> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiGetHeaders.class);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiContractInner object if successful.
     */
    public ApiContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters).toBlocking().last().body();
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, final ServiceCallback<ApiContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters), serviceCallback);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters).map(new Func1<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>, ApiContractInner>() {
            @Override
            public ApiContractInner call(ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<ApiContractInner>() { }.getType(), ApiCreateOrUpdateHeaders.class);
    }
    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiContractInner object if successful.
     */
    public ApiContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).toBlocking().last().body();
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch, final ServiceCallback<ApiContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch), serviceCallback);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ApiContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).map(new Func1<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>, ApiContractInner>() {
            @Override
            public ApiContractInner call(ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<ApiContractInner>() { }.getType(), ApiCreateOrUpdateHeaders.class);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiContractInner object if successful.
     */
    public ApiContractInner beginCreateOrUpdate(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters).toBlocking().single().body();
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiContractInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, final ServiceCallback<ApiContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters), serviceCallback);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ApiContractInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters).map(new Func1<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>, ApiContractInner>() {
            @Override
            public ApiContractInner call(ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        return service.beginCreateOrUpdate(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApiContractInner object if successful.
     */
    public ApiContractInner beginCreateOrUpdate(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ApiContractInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch, final ServiceCallback<ApiContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch), serviceCallback);
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ApiContractInner> beginCreateOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).map(new Func1<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>, ApiContractInner>() {
            @Override
            public ApiContractInner call(ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates new or updates existing specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters Create or update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApiContractInner object
     */
    public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, ApiCreateOrUpdateParameter parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<ApiContractInner, ApiCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ApiContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ApiContractInner>() { }.getType())
                .register(201, new TypeToken<ApiContractInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiCreateOrUpdateHeaders.class);
    }

    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters API Update Contract parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String resourceGroupName, String serviceName, String apiId, ApiUpdateContract parameters, String ifMatch) {
        updateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).toBlocking().single().body();
    }

    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters API Update Contract parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String resourceGroupName, String serviceName, String apiId, ApiUpdateContract parameters, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch), serviceCallback);
    }

    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters API Update Contract parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String resourceGroupName, String serviceName, String apiId, ApiUpdateContract parameters, String ifMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, parameters, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters API Update Contract parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, ApiUpdateContract parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String apiId, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch).toBlocking().single().body();
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch), serviceCallback);
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean deleteRevisions = null;
        return service.delete(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), deleteRevisions, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param deleteRevisions Delete all revisions of the Api.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String apiId, String ifMatch, Boolean deleteRevisions) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch, deleteRevisions).toBlocking().single().body();
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param deleteRevisions Delete all revisions of the Api.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch, Boolean deleteRevisions, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch, deleteRevisions), serviceCallback);
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param deleteRevisions Delete all revisions of the Api.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch, Boolean deleteRevisions) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, ifMatch, deleteRevisions).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified API of the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param deleteRevisions Delete all revisions of the Api.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch, Boolean deleteRevisions) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), deleteRevisions, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagResourceContractInner&gt; object if successful.
     */
    public PagedList<TagResourceContractInner> listByTags(final String resourceGroupName, final String serviceName) {
        ServiceResponse<Page<TagResourceContractInner>> response = listByTagsSinglePageAsync(resourceGroupName, serviceName).toBlocking().single();
        return new PagedList<TagResourceContractInner>(response.body()) {
            @Override
            public Page<TagResourceContractInner> nextPage(String nextPageLink) {
                return listByTagsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagResourceContractInner>> listByTagsAsync(final String resourceGroupName, final String serviceName, final ListOperationCallback<TagResourceContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTagsSinglePageAsync(resourceGroupName, serviceName),
            new Func1<String, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(String nextPageLink) {
                    return listByTagsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<Page<TagResourceContractInner>> listByTagsAsync(final String resourceGroupName, final String serviceName) {
        return listByTagsWithServiceResponseAsync(resourceGroupName, serviceName)
            .map(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Page<TagResourceContractInner>>() {
                @Override
                public Page<TagResourceContractInner> call(ServiceResponse<Page<TagResourceContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsWithServiceResponseAsync(final String resourceGroupName, final String serviceName) {
        return listByTagsSinglePageAsync(resourceGroupName, serviceName)
            .concatMap(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(ServiceResponse<Page<TagResourceContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTagsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagResourceContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsSinglePageAsync(final String resourceGroupName, final String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        final Boolean includeNotTaggedApis = null;
        return service.listByTags(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, includeNotTaggedApis, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagResourceContractInner>> result = listByTagsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagResourceContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter | Field       | Supported operators    | Supported functions               |
     |-------------|------------------------|-----------------------------------|
     |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |isCurrent | eq |    |
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param includeNotTaggedApis Include not tagged APIs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagResourceContractInner&gt; object if successful.
     */
    public PagedList<TagResourceContractInner> listByTags(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final Boolean includeNotTaggedApis) {
        ServiceResponse<Page<TagResourceContractInner>> response = listByTagsSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, includeNotTaggedApis).toBlocking().single();
        return new PagedList<TagResourceContractInner>(response.body()) {
            @Override
            public Page<TagResourceContractInner> nextPage(String nextPageLink) {
                return listByTagsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter | Field       | Supported operators    | Supported functions               |
     |-------------|------------------------|-----------------------------------|
     |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |isCurrent | eq |    |
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param includeNotTaggedApis Include not tagged APIs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagResourceContractInner>> listByTagsAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final Boolean includeNotTaggedApis, final ListOperationCallback<TagResourceContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTagsSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, includeNotTaggedApis),
            new Func1<String, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(String nextPageLink) {
                    return listByTagsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter | Field       | Supported operators    | Supported functions               |
     |-------------|------------------------|-----------------------------------|
     |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |isCurrent | eq |    |
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param includeNotTaggedApis Include not tagged APIs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<Page<TagResourceContractInner>> listByTagsAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final Boolean includeNotTaggedApis) {
        return listByTagsWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, includeNotTaggedApis)
            .map(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Page<TagResourceContractInner>>() {
                @Override
                public Page<TagResourceContractInner> call(ServiceResponse<Page<TagResourceContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter | Field       | Supported operators    | Supported functions               |
     |-------------|------------------------|-----------------------------------|
     |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |isCurrent | eq |    |
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param includeNotTaggedApis Include not tagged APIs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final Boolean includeNotTaggedApis) {
        return listByTagsSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, includeNotTaggedApis)
            .concatMap(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(ServiceResponse<Page<TagResourceContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTagsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param filter | Field       | Supported operators    | Supported functions               |
     |-------------|------------------------|-----------------------------------|
     |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |apiRevision | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |path | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |serviceUrl | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith|
     |isCurrent | eq |    |
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param includeNotTaggedApis Include not tagged APIs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagResourceContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final Boolean includeNotTaggedApis) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByTags(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, includeNotTaggedApis, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagResourceContractInner>> result = listByTagsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagResourceContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagResourceContractInner>> listByTagsDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagResourceContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagResourceContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ApiContractInner&gt; object if successful.
     */
    public PagedList<ApiContractInner> listByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<ApiContractInner>> response = listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ApiContractInner>(response.body()) {
            @Override
            public Page<ApiContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ApiContractInner>> listByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<ApiContractInner>> serviceFuture, final ListOperationCallback<ApiContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<Page<ApiContractInner>> listByServiceNextAsync(final String nextPageLink) {
        return listByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ApiContractInner>>, Page<ApiContractInner>>() {
                @Override
                public Page<ApiContractInner> call(ServiceResponse<Page<ApiContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ApiContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ApiContractInner>>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(ServiceResponse<Page<ApiContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all APIs of the API Management service instance.
     *
    ServiceResponse<PageImpl<ApiContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ApiContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ApiContractInner>>> listByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ApiContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ApiContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ApiContractInner>> result = listByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ApiContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ApiContractInner>> listByServiceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ApiContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ApiContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;TagResourceContractInner&gt; object if successful.
     */
    public PagedList<TagResourceContractInner> listByTagsNext(final String nextPageLink) {
        ServiceResponse<Page<TagResourceContractInner>> response = listByTagsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<TagResourceContractInner>(response.body()) {
            @Override
            public Page<TagResourceContractInner> nextPage(String nextPageLink) {
                return listByTagsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<TagResourceContractInner>> listByTagsNextAsync(final String nextPageLink, final ServiceFuture<List<TagResourceContractInner>> serviceFuture, final ListOperationCallback<TagResourceContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTagsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(String nextPageLink) {
                    return listByTagsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<Page<TagResourceContractInner>> listByTagsNextAsync(final String nextPageLink) {
        return listByTagsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Page<TagResourceContractInner>>() {
                @Override
                public Page<TagResourceContractInner> call(ServiceResponse<Page<TagResourceContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;TagResourceContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsNextWithServiceResponseAsync(final String nextPageLink) {
        return listByTagsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<TagResourceContractInner>>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(ServiceResponse<Page<TagResourceContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTagsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of apis associated with tags.
     *
    ServiceResponse<PageImpl<TagResourceContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;TagResourceContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<TagResourceContractInner>>> listByTagsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByTagsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<TagResourceContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<TagResourceContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<TagResourceContractInner>> result = listByTagsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<TagResourceContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<TagResourceContractInner>> listByTagsNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<TagResourceContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<TagResourceContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
