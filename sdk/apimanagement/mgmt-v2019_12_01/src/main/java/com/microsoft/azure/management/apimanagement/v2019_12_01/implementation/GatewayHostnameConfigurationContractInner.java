/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Gateway hostname configuration details.
 */
@JsonFlatten
public class GatewayHostnameConfigurationContractInner extends ProxyResource {
    /**
     * Hostname value. Supports valid domain name, partial or full wildcard.
     */
    @JsonProperty(value = "properties.hostname")
    private String hostname;

    /**
     * Identifier of Certificate entity that will be used for TLS connection
     * establishment.
     */
    @JsonProperty(value = "properties.certificateId")
    private String certificateId;

    /**
     * Determines whether gateway requests client certificate.
     */
    @JsonProperty(value = "properties.negotiateClientCertificate")
    private Boolean negotiateClientCertificate;

    /**
     * Get hostname value. Supports valid domain name, partial or full wildcard.
     *
     * @return the hostname value
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set hostname value. Supports valid domain name, partial or full wildcard.
     *
     * @param hostname the hostname value to set
     * @return the GatewayHostnameConfigurationContractInner object itself.
     */
    public GatewayHostnameConfigurationContractInner withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get identifier of Certificate entity that will be used for TLS connection establishment.
     *
     * @return the certificateId value
     */
    public String certificateId() {
        return this.certificateId;
    }

    /**
     * Set identifier of Certificate entity that will be used for TLS connection establishment.
     *
     * @param certificateId the certificateId value to set
     * @return the GatewayHostnameConfigurationContractInner object itself.
     */
    public GatewayHostnameConfigurationContractInner withCertificateId(String certificateId) {
        this.certificateId = certificateId;
        return this;
    }

    /**
     * Get determines whether gateway requests client certificate.
     *
     * @return the negotiateClientCertificate value
     */
    public Boolean negotiateClientCertificate() {
        return this.negotiateClientCertificate;
    }

    /**
     * Set determines whether gateway requests client certificate.
     *
     * @param negotiateClientCertificate the negotiateClientCertificate value to set
     * @return the GatewayHostnameConfigurationContractInner object itself.
     */
    public GatewayHostnameConfigurationContractInner withNegotiateClientCertificate(Boolean negotiateClientCertificate) {
        this.negotiateClientCertificate = negotiateClientCertificate;
        return this;
    }

}
