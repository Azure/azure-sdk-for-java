/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.ProductContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ProductState;

class ProductContractImpl extends CreatableUpdatableImpl<ProductContract, ProductContractInner, ProductContractImpl> implements ProductContract, ProductContract.Definition, ProductContract.Update {
    private String resourceGroupName;
    private String serviceName;
    private String productId;
    private String cifMatch;
    private String uifMatch;
    private final ApiManagementManager manager;

    ProductContractImpl(String name, ApiManagementManager manager) {
        super(name, new ProductContractInner());
        this.manager = manager;
        // Set resource name
        this.productId = name;
        //
    }

    ProductContractImpl(ProductContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.productId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.productId = IdParsingUtils.getValueFromIdByName(inner.id(), "products");
        // set other parameters for create and update
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ProductContract> createResourceAsync() {
        ProductsInner client = this.manager().inner().products();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.productId, this.inner(), this.cifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ProductContract> updateResourceAsync() {
        ProductsInner client = this.manager().inner().products();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.productId, this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ProductContractInner> getInnerAsync() {
        ProductsInner client = this.manager().inner().products();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Boolean approvalRequired() {
        return this.inner().approvalRequired();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProductState state() {
        return this.inner().state();
    }

    @Override
    public Boolean subscriptionRequired() {
        return this.inner().subscriptionRequired();
    }

    @Override
    public Integer subscriptionsLimit() {
        return this.inner().subscriptionsLimit();
    }

    @Override
    public String terms() {
        return this.inner().terms();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ProductContractImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public ProductContractImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public ProductContractImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public ProductContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public ProductContractImpl withApprovalRequired(Boolean approvalRequired) {
        this.inner().withApprovalRequired(approvalRequired);
        return this;
    }

    @Override
    public ProductContractImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public ProductContractImpl withState(ProductState state) {
        this.inner().withState(state);
        return this;
    }

    @Override
    public ProductContractImpl withSubscriptionRequired(Boolean subscriptionRequired) {
        this.inner().withSubscriptionRequired(subscriptionRequired);
        return this;
    }

    @Override
    public ProductContractImpl withSubscriptionsLimit(Integer subscriptionsLimit) {
        this.inner().withSubscriptionsLimit(subscriptionsLimit);
        return this;
    }

    @Override
    public ProductContractImpl withTerms(String terms) {
        this.inner().withTerms(terms);
        return this;
    }

}
