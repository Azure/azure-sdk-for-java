/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendProperties;
import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendCredentialsContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendProxyContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendTlsProperties;
import com.microsoft.azure.management.apimanagement.v2019_12_01.BackendProtocol;

class BackendContractImpl extends CreatableUpdatableImpl<BackendContract, BackendContractInner, BackendContractImpl> implements BackendContract, BackendContract.Definition, BackendContract.Update {
    private String resourceGroupName;
    private String serviceName;
    private String backendId;
    private String cifMatch;
    private String uifMatch;
    private final ApiManagementManager manager;

    BackendContractImpl(String name, ApiManagementManager manager) {
        super(name, new BackendContractInner());
        this.manager = manager;
        // Set resource name
        this.backendId = name;
        //
    }

    BackendContractImpl(BackendContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.backendId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.backendId = IdParsingUtils.getValueFromIdByName(inner.id(), "backends");
        // set other parameters for create and update
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<BackendContract> createResourceAsync() {
        BackendsInner client = this.manager().inner().backends();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.backendId, this.inner(), this.cifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<BackendContract> updateResourceAsync() {
        BackendsInner client = this.manager().inner().backends();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.backendId, this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<BackendContractInner> getInnerAsync() {
        BackendsInner client = this.manager().inner().backends();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public BackendCredentialsContract credentials() {
        return this.inner().credentials();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public BackendProperties properties() {
        return this.inner().properties();
    }

    @Override
    public BackendProtocol protocol() {
        return this.inner().protocol();
    }

    @Override
    public BackendProxyContract proxy() {
        return this.inner().proxy();
    }

    @Override
    public String resourceId() {
        return this.inner().resourceId();
    }

    @Override
    public String title() {
        return this.inner().title();
    }

    @Override
    public BackendTlsProperties tls() {
        return this.inner().tls();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String url() {
        return this.inner().url();
    }

    @Override
    public BackendContractImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public BackendContractImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public BackendContractImpl withProtocol(BackendProtocol protocol) {
        this.inner().withProtocol(protocol);
        return this;
    }

    @Override
    public BackendContractImpl withUrl(String url) {
        this.inner().withUrl(url);
        return this;
    }

    @Override
    public BackendContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public BackendContractImpl withCredentials(BackendCredentialsContract credentials) {
        this.inner().withCredentials(credentials);
        return this;
    }

    @Override
    public BackendContractImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public BackendContractImpl withProperties(BackendProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

    @Override
    public BackendContractImpl withProxy(BackendProxyContract proxy) {
        this.inner().withProxy(proxy);
        return this;
    }

    @Override
    public BackendContractImpl withResourceId(String resourceId) {
        this.inner().withResourceId(resourceId);
        return this;
    }

    @Override
    public BackendContractImpl withTitle(String title) {
        this.inner().withTitle(title);
        return this;
    }

    @Override
    public BackendContractImpl withTls(BackendTlsProperties tls) {
        this.inner().withTls(tls);
        return this;
    }

}
