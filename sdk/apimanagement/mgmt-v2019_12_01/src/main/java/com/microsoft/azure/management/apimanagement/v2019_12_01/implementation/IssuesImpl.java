/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Issues;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.IssueContract;

class IssuesImpl extends WrapperImpl<IssuesInner> implements Issues {
    private final ApiManagementManager manager;

    IssuesImpl(ApiManagementManager manager) {
        super(manager.inner().issues());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<IssueContract> listByServiceAsync(final String resourceGroupName, final String serviceName) {
        IssuesInner client = this.inner();
        return client.listByServiceAsync(resourceGroupName, serviceName)
        .flatMapIterable(new Func1<Page<IssueContractInner>, Iterable<IssueContractInner>>() {
            @Override
            public Iterable<IssueContractInner> call(Page<IssueContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<IssueContractInner, IssueContract>() {
            @Override
            public IssueContract call(IssueContractInner inner) {
                return new IssueContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<IssueContract> getAsync(String resourceGroupName, String serviceName, String issueId) {
        IssuesInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, issueId)
        .map(new Func1<IssueContractInner, IssueContract>() {
            @Override
            public IssueContract call(IssueContractInner inner) {
                return new IssueContractImpl(inner, manager());
            }
        });
    }

}
