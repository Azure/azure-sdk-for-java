/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import org.joda.time.Period;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Reports.
 */
public class ReportsInner {
    /** The Retrofit service to perform REST calls. */
    private ReportsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ReportsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReportsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ReportsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Reports to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReportsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByApi" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byApi")
        Observable<Response<ResponseBody>> listByApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByUser" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byUser")
        Observable<Response<ResponseBody>> listByUser(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByOperation" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byOperation")
        Observable<Response<ResponseBody>> listByOperation(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByProduct" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byProduct")
        Observable<Response<ResponseBody>> listByProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByGeo" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byGeo")
        Observable<Response<ResponseBody>> listByGeo(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listBySubscription" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/bySubscription")
        Observable<Response<ResponseBody>> listBySubscription(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByTime" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byTime")
        Observable<Response<ResponseBody>> listByTime(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("$orderby") String orderby, @Query("interval") Period interval, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByRequest" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/reports/byRequest")
        Observable<Response<ResponseBody>> listByRequest(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByApiNext" })
        @GET
        Observable<Response<ResponseBody>> listByApiNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByUserNext" })
        @GET
        Observable<Response<ResponseBody>> listByUserNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByOperationNext" })
        @GET
        Observable<Response<ResponseBody>> listByOperationNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByProductNext" })
        @GET
        Observable<Response<ResponseBody>> listByProductNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByGeoNext" })
        @GET
        Observable<Response<ResponseBody>> listByGeoNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listBySubscriptionNext" })
        @GET
        Observable<Response<ResponseBody>> listBySubscriptionNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.Reports listByTimeNext" })
        @GET
        Observable<Response<ResponseBody>> listByTimeNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByApi(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByApiSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByApiWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByApiSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listByApi(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByApiDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByApi(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByApiSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByApiWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter The filter to apply on the operation.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByApiSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter The filter to apply on the operation.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByApi(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByApiDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByApiDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByUser(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByUserSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByUserNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByUserAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByUserSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByUserNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByUserAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByUserWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByUserSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByUserNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listByUser(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByUserDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByUser(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByUserSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByUserNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByUserAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByUserSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByUserNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByUserAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByUserWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by User.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByUserSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByUserNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by User.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByUser(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByUserDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByUserDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByOperation(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByOperationSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByOperationWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByOperationSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listByOperation(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByOperationDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByOperation(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByOperationSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByOperationAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByOperationWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByOperationSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByOperation(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByOperationDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByOperationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listByProduct(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Product.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByProduct(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByProductDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByGeo(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByGeoSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByGeoNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByGeoAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByGeoSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByGeoNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByGeoAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByGeoWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listByGeoSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByGeoNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        return service.listByGeo(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByGeoDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByGeo(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByGeoSinglePageAsync(resourceGroupName, serviceName, filter, top, skip).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByGeoNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByGeoAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByGeoSinglePageAsync(resourceGroupName, serviceName, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByGeoNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByGeoAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip) {
        return listByGeoWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by geography.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip) {
        return listByGeoSinglePageAsync(resourceGroupName, serviceName, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByGeoNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by geography.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| country | select |     |     | &lt;/br&gt;| region | select |     |     | &lt;/br&gt;| zip | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByGeo(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByGeoDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByGeoDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listBySubscription(final String resourceGroupName, final String serviceName, final String filter) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listBySubscriptionAsync(final String resourceGroupName, final String serviceName, final String filter, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listBySubscriptionAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listBySubscriptionWithServiceResponseAsync(resourceGroupName, serviceName, filter)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter) {
        return listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listBySubscription(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listBySubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listBySubscription(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listBySubscriptionAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listBySubscriptionAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listBySubscriptionWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        return listBySubscriptionSinglePageAsync(resourceGroupName, serviceName, filter, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| displayName | select, orderBy |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | select, filter | eq |     | &lt;/br&gt;| productId | select, filter | eq |     | &lt;/br&gt;| subscriptionId | select, filter | eq |     | &lt;/br&gt;| callCountSuccess | select, orderBy |     |     | &lt;/br&gt;| callCountBlocked | select, orderBy |     |     | &lt;/br&gt;| callCountFailed | select, orderBy |     |     | &lt;/br&gt;| callCountOther | select, orderBy |     |     | &lt;/br&gt;| callCountTotal | select, orderBy |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select, orderBy |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listBySubscription(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listBySubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listBySubscriptionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByTime(final String resourceGroupName, final String serviceName, final String filter, final Period interval) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByTimeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByTimeAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByTimeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByTimeAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval) {
        return listByTimeWithServiceResponseAsync(resourceGroupName, serviceName, filter, interval)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval) {
        return listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTimeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (interval == null) {
            throw new IllegalArgumentException("Parameter interval is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        final String orderby = null;
        return service.listByTime(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, interval, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByTimeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByTime(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final Integer top, final Integer skip, final String orderby) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval, top, skip, orderby).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByTimeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByTimeAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final Integer top, final Integer skip, final String orderby, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval, top, skip, orderby),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByTimeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByTimeAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final Integer top, final Integer skip, final String orderby) {
        return listByTimeWithServiceResponseAsync(resourceGroupName, serviceName, filter, interval, top, skip, orderby)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Time.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
     * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final Integer top, final Integer skip, final String orderby) {
        return listByTimeSinglePageAsync(resourceGroupName, serviceName, filter, interval, top, skip, orderby)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTimeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Time.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter, select | ge, le |     | &lt;/br&gt;| interval | select |     |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| callCountSuccess | select |     |     | &lt;/br&gt;| callCountBlocked | select |     |     | &lt;/br&gt;| callCountFailed | select |     |     | &lt;/br&gt;| callCountOther | select |     |     | &lt;/br&gt;| bandwidth | select, orderBy |     |     | &lt;/br&gt;| cacheHitsCount | select |     |     | &lt;/br&gt;| cacheMissCount | select |     |     | &lt;/br&gt;| apiTimeAvg | select |     |     | &lt;/br&gt;| apiTimeMin | select |     |     | &lt;/br&gt;| apiTimeMax | select |     |     | &lt;/br&gt;| serviceTimeAvg | select |     |     | &lt;/br&gt;| serviceTimeMin | select |     |     | &lt;/br&gt;| serviceTimeMax | select |     |     | &lt;/br&gt;
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param interval By time interval. Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param skip Number of records to skip.
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param orderby OData order by query option.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeSinglePageAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval, final Integer top, final Integer skip, final String orderby) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (interval == null) {
            throw new IllegalArgumentException("Parameter interval is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByTime(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, orderby, interval, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByTimeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByTimeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RequestReportRecordContractInner&gt; object if successful.
     */
    public List<RequestReportRecordContractInner> listByRequest(String resourceGroupName, String serviceName, String filter) {
        return listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter).toBlocking().single().body();
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RequestReportRecordContractInner>> listByRequestAsync(String resourceGroupName, String serviceName, String filter, final ServiceCallback<List<RequestReportRecordContractInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter), serviceCallback);
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RequestReportRecordContractInner&gt; object
     */
    public Observable<List<RequestReportRecordContractInner>> listByRequestAsync(String resourceGroupName, String serviceName, String filter) {
        return listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter).map(new Func1<ServiceResponse<List<RequestReportRecordContractInner>>, List<RequestReportRecordContractInner>>() {
            @Override
            public List<RequestReportRecordContractInner> call(ServiceResponse<List<RequestReportRecordContractInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RequestReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<List<RequestReportRecordContractInner>>> listByRequestWithServiceResponseAsync(String resourceGroupName, String serviceName, String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        return service.listByRequest(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<RequestReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<RequestReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RequestReportRecordContractInner>> result = listByRequestDelegate(response);
                        List<RequestReportRecordContractInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<RequestReportRecordContractInner>> clientResponse = new ServiceResponse<List<RequestReportRecordContractInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RequestReportRecordContractInner&gt; object if successful.
     */
    public List<RequestReportRecordContractInner> listByRequest(String resourceGroupName, String serviceName, String filter, Integer top, Integer skip) {
        return listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip).toBlocking().single().body();
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RequestReportRecordContractInner>> listByRequestAsync(String resourceGroupName, String serviceName, String filter, Integer top, Integer skip, final ServiceCallback<List<RequestReportRecordContractInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip), serviceCallback);
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RequestReportRecordContractInner&gt; object
     */
    public Observable<List<RequestReportRecordContractInner>> listByRequestAsync(String resourceGroupName, String serviceName, String filter, Integer top, Integer skip) {
        return listByRequestWithServiceResponseAsync(resourceGroupName, serviceName, filter, top, skip).map(new Func1<ServiceResponse<List<RequestReportRecordContractInner>>, List<RequestReportRecordContractInner>>() {
            @Override
            public List<RequestReportRecordContractInner> call(ServiceResponse<List<RequestReportRecordContractInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists report records by Request.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| timestamp | filter | ge, le |     | &lt;/br&gt;| apiId | filter | eq |     | &lt;/br&gt;| operationId | filter | eq |     | &lt;/br&gt;| productId | filter | eq |     | &lt;/br&gt;| userId | filter | eq |     | &lt;/br&gt;| apiRegion | filter | eq |     | &lt;/br&gt;| subscriptionId | filter | eq |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RequestReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<List<RequestReportRecordContractInner>>> listByRequestWithServiceResponseAsync(String resourceGroupName, String serviceName, String filter, Integer top, Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (filter == null) {
            throw new IllegalArgumentException("Parameter filter is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByRequest(resourceGroupName, serviceName, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<RequestReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<RequestReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RequestReportRecordContractInner>> result = listByRequestDelegate(response);
                        List<RequestReportRecordContractInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<RequestReportRecordContractInner>> clientResponse = new ServiceResponse<List<RequestReportRecordContractInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<RequestReportRecordContractInner>> listByRequestDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<RequestReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<RequestReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByApiNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByApiNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByApiNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByApiNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByApiNextAsync(final String nextPageLink) {
        return listByApiNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiNextWithServiceResponseAsync(final String nextPageLink) {
        return listByApiNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByApiNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByApiNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByApiNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByApiNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by User.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByUserNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByUserNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByUserNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by User.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByUserNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByUserNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByUserNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by User.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByUserNextAsync(final String nextPageLink) {
        return listByUserNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by User.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserNextWithServiceResponseAsync(final String nextPageLink) {
        return listByUserNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByUserNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by User.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByUserNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByUserNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByUserNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByUserNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by API Operations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByOperationNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByOperationNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by API Operations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByOperationNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByOperationNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByOperationNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by API Operations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByOperationNextAsync(final String nextPageLink) {
        return listByOperationNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationNextWithServiceResponseAsync(final String nextPageLink) {
        return listByOperationNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByOperationNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by API Operations.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByOperationNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByOperationNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByOperationNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByOperationNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByProductNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByProductNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByProductNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByProductNextAsync(final String nextPageLink) {
        return listByProductNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductNextWithServiceResponseAsync(final String nextPageLink) {
        return listByProductNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Product.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByProductNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByProductNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByProductNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByProductNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by geography.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByGeoNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByGeoNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByGeoNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by geography.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByGeoNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByGeoNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByGeoNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by geography.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByGeoNextAsync(final String nextPageLink) {
        return listByGeoNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by geography.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoNextWithServiceResponseAsync(final String nextPageLink) {
        return listByGeoNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByGeoNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by geography.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByGeoNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByGeoNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByGeoNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByGeoNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listBySubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listBySubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listBySubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listBySubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listBySubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listBySubscriptionNextAsync(final String nextPageLink) {
        return listBySubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listBySubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listBySubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by subscription.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listBySubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBySubscriptionNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listBySubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listBySubscriptionNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists report records by Time.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ReportRecordContractInner&gt; object if successful.
     */
    public PagedList<ReportRecordContractInner> listByTimeNext(final String nextPageLink) {
        ServiceResponse<Page<ReportRecordContractInner>> response = listByTimeNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ReportRecordContractInner>(response.body()) {
            @Override
            public Page<ReportRecordContractInner> nextPage(String nextPageLink) {
                return listByTimeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists report records by Time.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ReportRecordContractInner>> listByTimeNextAsync(final String nextPageLink, final ServiceFuture<List<ReportRecordContractInner>> serviceFuture, final ListOperationCallback<ReportRecordContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByTimeNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(String nextPageLink) {
                    return listByTimeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists report records by Time.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<Page<ReportRecordContractInner>> listByTimeNextAsync(final String nextPageLink) {
        return listByTimeNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Page<ReportRecordContractInner>>() {
                @Override
                public Page<ReportRecordContractInner> call(ServiceResponse<Page<ReportRecordContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists report records by Time.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ReportRecordContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeNextWithServiceResponseAsync(final String nextPageLink) {
        return listByTimeNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ReportRecordContractInner>>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(ServiceResponse<Page<ReportRecordContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTimeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists report records by Time.
     *
    ServiceResponse<PageImpl<ReportRecordContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ReportRecordContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ReportRecordContractInner>>> listByTimeNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByTimeNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ReportRecordContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ReportRecordContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ReportRecordContractInner>> result = listByTimeNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ReportRecordContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ReportRecordContractInner>> listByTimeNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ReportRecordContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ReportRecordContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
