/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.AlwaysLog;
import com.microsoft.azure.management.apimanagement.v2019_12_01.SamplingSettings;
import com.microsoft.azure.management.apimanagement.v2019_12_01.PipelineDiagnosticSettings;
import com.microsoft.azure.management.apimanagement.v2019_12_01.HttpCorrelationProtocol;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Verbosity;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Diagnostic details.
 */
@JsonFlatten
public class DiagnosticContractInner extends ProxyResource {
    /**
     * Specifies for what type of messages sampling settings should not apply.
     * Possible values include: 'allErrors'.
     */
    @JsonProperty(value = "properties.alwaysLog")
    private AlwaysLog alwaysLog;

    /**
     * Resource Id of a target logger.
     */
    @JsonProperty(value = "properties.loggerId", required = true)
    private String loggerId;

    /**
     * Sampling settings for Diagnostic.
     */
    @JsonProperty(value = "properties.sampling")
    private SamplingSettings sampling;

    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     */
    @JsonProperty(value = "properties.frontend")
    private PipelineDiagnosticSettings frontend;

    /**
     * Diagnostic settings for incoming/outgoing HTTP messages to the Backend.
     */
    @JsonProperty(value = "properties.backend")
    private PipelineDiagnosticSettings backend;

    /**
     * Log the ClientIP. Default is false.
     */
    @JsonProperty(value = "properties.logClientIp")
    private Boolean logClientIp;

    /**
     * Sets correlation protocol to use for Application Insights diagnostics.
     * Possible values include: 'None', 'Legacy', 'W3C'.
     */
    @JsonProperty(value = "properties.httpCorrelationProtocol")
    private HttpCorrelationProtocol httpCorrelationProtocol;

    /**
     * The verbosity level applied to traces emitted by trace policies.
     * Possible values include: 'verbose', 'information', 'error'.
     */
    @JsonProperty(value = "properties.verbosity")
    private Verbosity verbosity;

    /**
     * Get specifies for what type of messages sampling settings should not apply. Possible values include: 'allErrors'.
     *
     * @return the alwaysLog value
     */
    public AlwaysLog alwaysLog() {
        return this.alwaysLog;
    }

    /**
     * Set specifies for what type of messages sampling settings should not apply. Possible values include: 'allErrors'.
     *
     * @param alwaysLog the alwaysLog value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withAlwaysLog(AlwaysLog alwaysLog) {
        this.alwaysLog = alwaysLog;
        return this;
    }

    /**
     * Get resource Id of a target logger.
     *
     * @return the loggerId value
     */
    public String loggerId() {
        return this.loggerId;
    }

    /**
     * Set resource Id of a target logger.
     *
     * @param loggerId the loggerId value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withLoggerId(String loggerId) {
        this.loggerId = loggerId;
        return this;
    }

    /**
     * Get sampling settings for Diagnostic.
     *
     * @return the sampling value
     */
    public SamplingSettings sampling() {
        return this.sampling;
    }

    /**
     * Set sampling settings for Diagnostic.
     *
     * @param sampling the sampling value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withSampling(SamplingSettings sampling) {
        this.sampling = sampling;
        return this;
    }

    /**
     * Get diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     *
     * @return the frontend value
     */
    public PipelineDiagnosticSettings frontend() {
        return this.frontend;
    }

    /**
     * Set diagnostic settings for incoming/outgoing HTTP messages to the Gateway.
     *
     * @param frontend the frontend value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withFrontend(PipelineDiagnosticSettings frontend) {
        this.frontend = frontend;
        return this;
    }

    /**
     * Get diagnostic settings for incoming/outgoing HTTP messages to the Backend.
     *
     * @return the backend value
     */
    public PipelineDiagnosticSettings backend() {
        return this.backend;
    }

    /**
     * Set diagnostic settings for incoming/outgoing HTTP messages to the Backend.
     *
     * @param backend the backend value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withBackend(PipelineDiagnosticSettings backend) {
        this.backend = backend;
        return this;
    }

    /**
     * Get log the ClientIP. Default is false.
     *
     * @return the logClientIp value
     */
    public Boolean logClientIp() {
        return this.logClientIp;
    }

    /**
     * Set log the ClientIP. Default is false.
     *
     * @param logClientIp the logClientIp value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withLogClientIp(Boolean logClientIp) {
        this.logClientIp = logClientIp;
        return this;
    }

    /**
     * Get sets correlation protocol to use for Application Insights diagnostics. Possible values include: 'None', 'Legacy', 'W3C'.
     *
     * @return the httpCorrelationProtocol value
     */
    public HttpCorrelationProtocol httpCorrelationProtocol() {
        return this.httpCorrelationProtocol;
    }

    /**
     * Set sets correlation protocol to use for Application Insights diagnostics. Possible values include: 'None', 'Legacy', 'W3C'.
     *
     * @param httpCorrelationProtocol the httpCorrelationProtocol value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withHttpCorrelationProtocol(HttpCorrelationProtocol httpCorrelationProtocol) {
        this.httpCorrelationProtocol = httpCorrelationProtocol;
        return this;
    }

    /**
     * Get the verbosity level applied to traces emitted by trace policies. Possible values include: 'verbose', 'information', 'error'.
     *
     * @return the verbosity value
     */
    public Verbosity verbosity() {
        return this.verbosity;
    }

    /**
     * Set the verbosity level applied to traces emitted by trace policies. Possible values include: 'verbose', 'information', 'error'.
     *
     * @param verbosity the verbosity value to set
     * @return the DiagnosticContractInner object itself.
     */
    public DiagnosticContractInner withVerbosity(Verbosity verbosity) {
        this.verbosity = verbosity;
        return this;
    }

}
