/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Apis;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.TagResourceContract;

class ApisImpl extends WrapperImpl<ApisInner> implements Apis {
    private final ApiManagementManager manager;

    ApisImpl(ApiManagementManager manager) {
        super(manager.inner().apis());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public ApiContractImpl define(String name) {
        return wrapModel(name);
    }

    private ApiContractImpl wrapModel(ApiContractInner inner) {
        return  new ApiContractImpl(inner, manager());
    }

    private ApiContractImpl wrapModel(String name) {
        return new ApiContractImpl(name, this.manager());
    }

    @Override
    public Observable<ApiContract> listByServiceAsync(final String resourceGroupName, final String serviceName) {
        ApisInner client = this.inner();
        return client.listByServiceAsync(resourceGroupName, serviceName)
        .flatMapIterable(new Func1<Page<ApiContractInner>, Iterable<ApiContractInner>>() {
            @Override
            public Iterable<ApiContractInner> call(Page<ApiContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApiContractInner, ApiContract>() {
            @Override
            public ApiContract call(ApiContractInner inner) {
                return new ApiContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getEntityTagAsync(String resourceGroupName, String serviceName, String apiId) {
        ApisInner client = this.inner();
        return client.getEntityTagAsync(resourceGroupName, serviceName, apiId).toCompletable();
    }

    @Override
    public Observable<ApiContract> getAsync(String resourceGroupName, String serviceName, String apiId) {
        ApisInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, apiId)
        .map(new Func1<ApiContractInner, ApiContract>() {
            @Override
            public ApiContract call(ApiContractInner inner) {
                return new ApiContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String apiId, String ifMatch) {
        ApisInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, apiId, ifMatch).toCompletable();
    }

    @Override
    public Observable<TagResourceContract> listByTagsAsync(final String resourceGroupName, final String serviceName) {
        ApisInner client = this.inner();
        return client.listByTagsAsync(resourceGroupName, serviceName)
        .flatMapIterable(new Func1<Page<TagResourceContractInner>, Iterable<TagResourceContractInner>>() {
            @Override
            public Iterable<TagResourceContractInner> call(Page<TagResourceContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TagResourceContractInner, TagResourceContract>() {
            @Override
            public TagResourceContract call(TagResourceContractInner inner) {
                return new TagResourceContractImpl(inner, manager());
            }
        });
    }

}
