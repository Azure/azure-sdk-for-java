/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.apimanagement.v2019_12_01.implementation.LoggerContractInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.apimanagement.v2019_12_01.implementation.ApiManagementManager;
import java.util.Map;

/**
 * Type representing LoggerContract.
 */
public interface LoggerContract extends HasInner<LoggerContractInner>, Indexable, Updatable<LoggerContract.Update>, HasManager<ApiManagementManager> {
    /**
     * @return the credentials value.
     */
    Map<String, String> credentials();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the isBuffered value.
     */
    Boolean isBuffered();

    /**
     * @return the loggerType value.
     */
    LoggerType loggerType();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the resourceId value.
     */
    String resourceId();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the LoggerContract definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithServiceName, DefinitionStages.WithIfMatch, DefinitionStages.WithCredentials, DefinitionStages.WithLoggerType, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of LoggerContract definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a LoggerContract definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the loggercontract definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            * @param resourceGroupName The name of the resource group
            * @return the next definition stage
            */
            WithServiceName withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the loggercontract definition allowing to specify ServiceName.
         */
        interface WithServiceName {
           /**
            * Specifies serviceName.
            * @param serviceName The name of the API Management service
            * @return the next definition stage
            */
            WithIfMatch withServiceName(String serviceName);
        }

        /**
         * The stage of the loggercontract definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
            * @return the next definition stage
            */
            WithCredentials withIfMatch(String ifMatch);
        }

        /**
         * The stage of the loggercontract definition allowing to specify Credentials.
         */
        interface WithCredentials {
           /**
            * Specifies credentials.
            * @param credentials The name and SendRule connection string of the event hub for azureEventHub logger.
 Instrumentation key for applicationInsights logger
            * @return the next definition stage
            */
            WithLoggerType withCredentials(Map<String, String> credentials);
        }

        /**
         * The stage of the loggercontract definition allowing to specify LoggerType.
         */
        interface WithLoggerType {
           /**
            * Specifies loggerType.
            * @param loggerType Logger type. Possible values include: 'azureEventHub', 'applicationInsights'
            * @return the next definition stage
            */
            WithCreate withLoggerType(LoggerType loggerType);
        }

        /**
         * The stage of the loggercontract definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Logger description
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the loggercontract definition allowing to specify IsBuffered.
         */
        interface WithIsBuffered {
            /**
             * Specifies isBuffered.
             * @param isBuffered Whether records are buffered in the logger before publishing. Default is assumed to be true
             * @return the next definition stage
             */
            WithCreate withIsBuffered(Boolean isBuffered);
        }

        /**
         * The stage of the loggercontract definition allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource)
             * @return the next definition stage
             */
            WithCreate withResourceId(String resourceId);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<LoggerContract>, DefinitionStages.WithDescription, DefinitionStages.WithIsBuffered, DefinitionStages.WithResourceId {
        }
    }
    /**
     * The template for a LoggerContract update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<LoggerContract>, UpdateStages.WithIfMatch, UpdateStages.WithDescription, UpdateStages.WithIsBuffered, UpdateStages.WithResourceId {
    }

    /**
     * Grouping of LoggerContract update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the loggercontract update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the loggercontract update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Logger description
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the loggercontract update allowing to specify IsBuffered.
         */
        interface WithIsBuffered {
            /**
             * Specifies isBuffered.
             * @param isBuffered Whether records are buffered in the logger before publishing. Default is assumed to be true
             * @return the next update stage
             */
            Update withIsBuffered(Boolean isBuffered);
        }

        /**
         * The stage of the loggercontract update allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource)
             * @return the next update stage
             */
            Update withResourceId(String resourceId);
        }

    }
}
