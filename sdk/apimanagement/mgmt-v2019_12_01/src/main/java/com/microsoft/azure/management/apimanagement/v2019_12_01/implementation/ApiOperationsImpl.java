/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiOperations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.OperationContract;

class ApiOperationsImpl extends WrapperImpl<ApiOperationsInner> implements ApiOperations {
    private final ApiManagementManager manager;

    ApiOperationsImpl(ApiManagementManager manager) {
        super(manager.inner().apiOperations());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public OperationContractImpl define(String name) {
        return wrapModel(name);
    }

    private OperationContractImpl wrapModel(OperationContractInner inner) {
        return  new OperationContractImpl(inner, manager());
    }

    private OperationContractImpl wrapModel(String name) {
        return new OperationContractImpl(name, this.manager());
    }

    @Override
    public Completable getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String operationId) {
        ApiOperationsInner client = this.inner();
        return client.getEntityTagAsync(resourceGroupName, serviceName, apiId, operationId).toCompletable();
    }

    @Override
    public Observable<OperationContract> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        ApiOperationsInner client = this.inner();
        return client.listByApiAsync(resourceGroupName, serviceName, apiId)
        .flatMapIterable(new Func1<Page<OperationContractInner>, Iterable<OperationContractInner>>() {
            @Override
            public Iterable<OperationContractInner> call(Page<OperationContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<OperationContractInner, OperationContract>() {
            @Override
            public OperationContract call(OperationContractInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<OperationContract> getAsync(String resourceGroupName, String serviceName, String apiId, String operationId) {
        ApiOperationsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, apiId, operationId)
        .flatMap(new Func1<OperationContractInner, Observable<OperationContract>>() {
            @Override
            public Observable<OperationContract> call(OperationContractInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((OperationContract)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch) {
        ApiOperationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, apiId, operationId, ifMatch).toCompletable();
    }

}
