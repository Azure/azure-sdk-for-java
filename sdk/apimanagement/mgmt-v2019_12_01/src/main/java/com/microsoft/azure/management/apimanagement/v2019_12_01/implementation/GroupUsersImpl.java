/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GroupUsers;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.GroupUserContract;

class GroupUsersImpl extends WrapperImpl<GroupUsersInner> implements GroupUsers {
    private final ApiManagementManager manager;

    GroupUsersImpl(ApiManagementManager manager) {
        super(manager.inner().groupUsers());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public GroupUserContractImpl define(String name) {
        return wrapModel(name);
    }

    private GroupUserContractImpl wrapModel(UserContractInner inner) {
        return  new GroupUserContractImpl(inner, manager());
    }

    private GroupUserContractImpl wrapModel(String name) {
        return new GroupUserContractImpl(name, this.manager());
    }

    @Override
    public Observable<Boolean> checkEntityExistsAsync(String resourceGroupName, String serviceName, String groupId, String userId) {
        GroupUsersInner client = this.inner();
        return client.checkEntityExistsAsync(resourceGroupName, serviceName, groupId, userId)
    ;}

    @Override
    public Observable<GroupUserContract> listAsync(final String resourceGroupName, final String serviceName, final String groupId) {
        GroupUsersInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceName, groupId)
        .flatMapIterable(new Func1<Page<UserContractInner>, Iterable<UserContractInner>>() {
            @Override
            public Iterable<UserContractInner> call(Page<UserContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<UserContractInner, GroupUserContract>() {
            @Override
            public GroupUserContract call(UserContractInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String groupId, String userId) {
        GroupUsersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, groupId, userId).toCompletable();
    }

}
