/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiProducts;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiProductContract;

class ApiProductsImpl extends WrapperImpl<ApiProductsInner> implements ApiProducts {
    private final ApiManagementManager manager;

    ApiProductsImpl(ApiManagementManager manager) {
        super(manager.inner().apiProducts());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    private ApiProductContractImpl wrapModel(ProductContractInner inner) {
        return  new ApiProductContractImpl(inner, manager());
    }

    @Override
    public Observable<ApiProductContract> listByApisAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        ApiProductsInner client = this.inner();
        return client.listByApisAsync(resourceGroupName, serviceName, apiId)
        .flatMapIterable(new Func1<Page<ProductContractInner>, Iterable<ProductContractInner>>() {
            @Override
            public Iterable<ProductContractInner> call(Page<ProductContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ProductContractInner, ApiProductContract>() {
            @Override
            public ApiProductContract call(ProductContractInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
