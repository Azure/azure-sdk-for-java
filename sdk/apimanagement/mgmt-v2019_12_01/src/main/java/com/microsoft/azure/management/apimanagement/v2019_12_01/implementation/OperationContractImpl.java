/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.OperationContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ParameterContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.RequestContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ResponseContract;

class OperationContractImpl extends CreatableUpdatableImpl<OperationContract, OperationContractInner, OperationContractImpl> implements OperationContract, OperationContract.Definition, OperationContract.Update {
    private final ApiManagementManager manager;
    private String resourceGroupName;
    private String serviceName;
    private String apiId;
    private String operationId;
    private String cifMatch;
    private String uifMatch;

    OperationContractImpl(String name, ApiManagementManager manager) {
        super(name, new OperationContractInner());
        this.manager = manager;
        // Set resource name
        this.operationId = name;
        //
    }

    OperationContractImpl(OperationContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.operationId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.apiId = IdParsingUtils.getValueFromIdByName(inner.id(), "apis");
        this.operationId = IdParsingUtils.getValueFromIdByName(inner.id(), "operations");
        //
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<OperationContract> createResourceAsync() {
        ApiOperationsInner client = this.manager().inner().apiOperations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.apiId, this.operationId, this.inner(), this.cifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<OperationContract> updateResourceAsync() {
        ApiOperationsInner client = this.manager().inner().apiOperations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.apiId, this.operationId, this.inner(), this.uifMatch)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<OperationContractInner> getInnerAsync() {
        ApiOperationsInner client = this.manager().inner().apiOperations();
        return client.getAsync(this.resourceGroupName, this.serviceName, this.apiId, this.operationId);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String method() {
        return this.inner().method();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String policies() {
        return this.inner().policies();
    }

    @Override
    public RequestContract request() {
        return this.inner().request();
    }

    @Override
    public List<ResponseContract> responses() {
        return this.inner().responses();
    }

    @Override
    public List<ParameterContract> templateParameters() {
        return this.inner().templateParameters();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String urlTemplate() {
        return this.inner().urlTemplate();
    }

    @Override
    public OperationContractImpl withExistingApi(String resourceGroupName, String serviceName, String apiId) {
        this.resourceGroupName = resourceGroupName;
        this.serviceName = serviceName;
        this.apiId = apiId;
        return this;
    }

    @Override
    public OperationContractImpl withDisplayName(String displayName) {
        this.inner().withDisplayName(displayName);
        return this;
    }

    @Override
    public OperationContractImpl withMethod(String method) {
        this.inner().withMethod(method);
        return this;
    }

    @Override
    public OperationContractImpl withUrlTemplate(String urlTemplate) {
        this.inner().withUrlTemplate(urlTemplate);
        return this;
    }

    @Override
    public OperationContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public OperationContractImpl withDescription(String description) {
        this.inner().withDescription(description);
        return this;
    }

    @Override
    public OperationContractImpl withPolicies(String policies) {
        this.inner().withPolicies(policies);
        return this;
    }

    @Override
    public OperationContractImpl withRequest(RequestContract request) {
        this.inner().withRequest(request);
        return this;
    }

    @Override
    public OperationContractImpl withResponses(List<ResponseContract> responses) {
        this.inner().withResponses(responses);
        return this;
    }

    @Override
    public OperationContractImpl withTemplateParameters(List<ParameterContract> templateParameters) {
        this.inner().withTemplateParameters(templateParameters);
        return this;
    }

}
