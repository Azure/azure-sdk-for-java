/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Subscriptions;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ProductSubscriptionContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.SubscriptionKeysContract;

class SubscriptionsImpl extends WrapperImpl<SubscriptionsInner> implements Subscriptions {
    private final ApiManagementManager manager;

    SubscriptionsImpl(ApiManagementManager manager) {
        super(manager.inner().subscriptions());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public SubscriptionContractImpl define(String name) {
        return wrapModel(name);
    }

    private SubscriptionContractImpl wrapModel(SubscriptionContractInner inner) {
        return  new SubscriptionContractImpl(inner, manager());
    }

    private SubscriptionContractImpl wrapModel(String name) {
        return new SubscriptionContractImpl(name, this.manager());
    }

    @Override
    public Observable<ProductSubscriptionContract> listAsync(final String resourceGroupName, final String serviceName) {
        SubscriptionsInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceName)
        .flatMapIterable(new Func1<Page<SubscriptionContractInner>, Iterable<SubscriptionContractInner>>() {
            @Override
            public Iterable<SubscriptionContractInner> call(Page<SubscriptionContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SubscriptionContractInner, ProductSubscriptionContract>() {
            @Override
            public ProductSubscriptionContract call(SubscriptionContractInner inner) {
                return new ProductSubscriptionContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable getEntityTagAsync(String resourceGroupName, String serviceName, String sid) {
        SubscriptionsInner client = this.inner();
        return client.getEntityTagAsync(resourceGroupName, serviceName, sid).toCompletable();
    }

    @Override
    public Observable<ProductSubscriptionContract> getAsync(String resourceGroupName, String serviceName, String sid) {
        SubscriptionsInner client = this.inner();
        return client.getAsync(resourceGroupName, serviceName, sid)
        .map(new Func1<SubscriptionContractInner, ProductSubscriptionContract>() {
            @Override
            public ProductSubscriptionContract call(SubscriptionContractInner inner) {
                return new ProductSubscriptionContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String serviceName, String sid, String ifMatch) {
        SubscriptionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, serviceName, sid, ifMatch).toCompletable();
    }

    @Override
    public Completable regeneratePrimaryKeyAsync(String resourceGroupName, String serviceName, String sid) {
        SubscriptionsInner client = this.inner();
        return client.regeneratePrimaryKeyAsync(resourceGroupName, serviceName, sid).toCompletable();
    }

    @Override
    public Completable regenerateSecondaryKeyAsync(String resourceGroupName, String serviceName, String sid) {
        SubscriptionsInner client = this.inner();
        return client.regenerateSecondaryKeyAsync(resourceGroupName, serviceName, sid).toCompletable();
    }

    @Override
    public Observable<SubscriptionKeysContract> listSecretsAsync(String resourceGroupName, String serviceName, String sid) {
        SubscriptionsInner client = this.inner();
        return client.listSecretsAsync(resourceGroupName, serviceName, sid)
        .map(new Func1<SubscriptionKeysContractInner, SubscriptionKeysContract>() {
            @Override
            public SubscriptionKeysContract call(SubscriptionKeysContractInner inner) {
                return new SubscriptionKeysContractImpl(inner, manager());
            }
        });
    }

}
