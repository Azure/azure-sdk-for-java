/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Product Update parameters.
 */
@JsonFlatten
public class ProductUpdateParameters {
    /**
     * Product description. May include HTML formatting tags.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * Product terms of use. Developers trying to subscribe to the product will
     * be presented and required to accept these terms before they can complete
     * the subscription process.
     */
    @JsonProperty(value = "properties.terms")
    private String terms;

    /**
     * Whether a product subscription is required for accessing APIs included
     * in this product. If true, the product is referred to as "protected" and
     * a valid subscription key is required for a request to an API included in
     * the product to succeed. If false, the product is referred to as "open"
     * and requests to an API included in the product can be made without a
     * subscription key. If property is omitted when creating a new product
     * it's value is assumed to be true.
     */
    @JsonProperty(value = "properties.subscriptionRequired")
    private Boolean subscriptionRequired;

    /**
     * whether subscription approval is required. If false, new subscriptions
     * will be approved automatically enabling developers to call the product’s
     * APIs immediately after subscribing. If true, administrators must
     * manually approve the subscription before the developer can any of the
     * product’s APIs. Can be present only if subscriptionRequired property is
     * present and has a value of false.
     */
    @JsonProperty(value = "properties.approvalRequired")
    private Boolean approvalRequired;

    /**
     * Whether the number of subscriptions a user can have to this product at
     * the same time. Set to null or omit to allow unlimited per user
     * subscriptions. Can be present only if subscriptionRequired property is
     * present and has a value of false.
     */
    @JsonProperty(value = "properties.subscriptionsLimit")
    private Integer subscriptionsLimit;

    /**
     * whether product is published or not. Published products are discoverable
     * by users of developer portal. Non published products are visible only to
     * administrators. Default state of Product is notPublished. Possible
     * values include: 'notPublished', 'published'.
     */
    @JsonProperty(value = "properties.state")
    private ProductState state;

    /**
     * Product name.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /**
     * Get product description. May include HTML formatting tags.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set product description. May include HTML formatting tags.
     *
     * @param description the description value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
     *
     * @return the terms value
     */
    public String terms() {
        return this.terms;
    }

    /**
     * Set product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.
     *
     * @param terms the terms value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withTerms(String terms) {
        this.terms = terms;
        return this;
    }

    /**
     * Get whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
     *
     * @return the subscriptionRequired value
     */
    public Boolean subscriptionRequired() {
        return this.subscriptionRequired;
    }

    /**
     * Set whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.
     *
     * @param subscriptionRequired the subscriptionRequired value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withSubscriptionRequired(Boolean subscriptionRequired) {
        this.subscriptionRequired = subscriptionRequired;
        return this;
    }

    /**
     * Get whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
     *
     * @return the approvalRequired value
     */
    public Boolean approvalRequired() {
        return this.approvalRequired;
    }

    /**
     * Set whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.
     *
     * @param approvalRequired the approvalRequired value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withApprovalRequired(Boolean approvalRequired) {
        this.approvalRequired = approvalRequired;
        return this;
    }

    /**
     * Get whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
     *
     * @return the subscriptionsLimit value
     */
    public Integer subscriptionsLimit() {
        return this.subscriptionsLimit;
    }

    /**
     * Set whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false.
     *
     * @param subscriptionsLimit the subscriptionsLimit value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withSubscriptionsLimit(Integer subscriptionsLimit) {
        this.subscriptionsLimit = subscriptionsLimit;
        return this;
    }

    /**
     * Get whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. Possible values include: 'notPublished', 'published'.
     *
     * @return the state value
     */
    public ProductState state() {
        return this.state;
    }

    /**
     * Set whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. Possible values include: 'notPublished', 'published'.
     *
     * @param state the state value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withState(ProductState state) {
        this.state = state;
        return this;
    }

    /**
     * Get product name.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set product name.
     *
     * @param displayName the displayName value to set
     * @return the ProductUpdateParameters object itself.
     */
    public ProductUpdateParameters withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

}
