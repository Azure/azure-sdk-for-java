/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Certificate configuration which consist of non-trusted intermediates and
 * root certificates.
 */
public class CertificateConfiguration {
    /**
     * Base64 Encoded certificate.
     */
    @JsonProperty(value = "encodedCertificate")
    private String encodedCertificate;

    /**
     * Certificate Password.
     */
    @JsonProperty(value = "certificatePassword")
    private String certificatePassword;

    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate
     * store location. Only Root and CertificateAuthority are valid locations.
     * Possible values include: 'CertificateAuthority', 'Root'.
     */
    @JsonProperty(value = "storeName", required = true)
    private String storeName;

    /**
     * Certificate information.
     */
    @JsonProperty(value = "certificate")
    private CertificateInformation certificate;

    /**
     * Get base64 Encoded certificate.
     *
     * @return the encodedCertificate value
     */
    public String encodedCertificate() {
        return this.encodedCertificate;
    }

    /**
     * Set base64 Encoded certificate.
     *
     * @param encodedCertificate the encodedCertificate value to set
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration withEncodedCertificate(String encodedCertificate) {
        this.encodedCertificate = encodedCertificate;
        return this;
    }

    /**
     * Get certificate Password.
     *
     * @return the certificatePassword value
     */
    public String certificatePassword() {
        return this.certificatePassword;
    }

    /**
     * Set certificate Password.
     *
     * @param certificatePassword the certificatePassword value to set
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration withCertificatePassword(String certificatePassword) {
        this.certificatePassword = certificatePassword;
        return this;
    }

    /**
     * Get the System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations. Possible values include: 'CertificateAuthority', 'Root'.
     *
     * @return the storeName value
     */
    public String storeName() {
        return this.storeName;
    }

    /**
     * Set the System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations. Possible values include: 'CertificateAuthority', 'Root'.
     *
     * @param storeName the storeName value to set
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration withStoreName(String storeName) {
        this.storeName = storeName;
        return this;
    }

    /**
     * Get certificate information.
     *
     * @return the certificate value
     */
    public CertificateInformation certificate() {
        return this.certificate;
    }

    /**
     * Set certificate information.
     *
     * @param certificate the certificate value to set
     * @return the CertificateConfiguration object itself.
     */
    public CertificateConfiguration withCertificate(CertificateInformation certificate) {
        this.certificate = certificate;
        return this;
    }

}
