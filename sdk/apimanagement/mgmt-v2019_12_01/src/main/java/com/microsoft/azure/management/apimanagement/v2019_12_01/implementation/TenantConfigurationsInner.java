/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.apimanagement.v2019_12_01.DeployConfigurationParameters;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.management.apimanagement.v2019_12_01.SaveConfigurationParameter;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.LongRunningFinalState;
import com.microsoft.azure.LongRunningOperationOptions;

/**
 * An instance of this class provides access to all the operations defined
 * in TenantConfigurations.
 */
public class TenantConfigurationsInner {
    /** The Retrofit service to perform REST calls. */
    private TenantConfigurationsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of TenantConfigurationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TenantConfigurationsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(TenantConfigurationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for TenantConfigurations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TenantConfigurationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations deploy" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy")
        Observable<Response<ResponseBody>> deploy(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body DeployConfigurationParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations beginDeploy" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy")
        Observable<Response<ResponseBody>> beginDeploy(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body DeployConfigurationParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations save" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save")
        Observable<Response<ResponseBody>> save(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body SaveConfigurationParameter parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations beginSave" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save")
        Observable<Response<ResponseBody>> beginSave(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body SaveConfigurationParameter parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations validate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate")
        Observable<Response<ResponseBody>> validate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body DeployConfigurationParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations beginValidate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate")
        Observable<Response<ResponseBody>> beginValidate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Body DeployConfigurationParameters parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.TenantConfigurations getSyncState" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/syncState")
        Observable<Response<ResponseBody>> getSyncState(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Path("configurationName") String configurationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner deploy(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return deployWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> deployAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(deployWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<OperationResultContractInner> deployAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return deployWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<OperationResultContractInner>> deployWithServiceResponseAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        Observable<Response<ResponseBody>> observable = service.deploy(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<OperationResultContractInner>() { }.getType());
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner beginDeploy(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return beginDeployWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> beginDeployAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeployWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<OperationResultContractInner> beginDeployAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return beginDeployWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<ServiceResponse<OperationResultContractInner>> beginDeployWithServiceResponseAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        return service.beginDeploy(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResultContractInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationResultContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResultContractInner> clientResponse = beginDeployDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResultContractInner> beginDeployDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResultContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResultContractInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner save(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        return saveWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> saveAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(saveWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<OperationResultContractInner> saveAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        return saveWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<OperationResultContractInner>> saveWithServiceResponseAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        Observable<Response<ResponseBody>> observable = service.save(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<OperationResultContractInner>() { }.getType());
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner beginSave(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        return beginSaveWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> beginSaveAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginSaveWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<OperationResultContractInner> beginSaveAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        return beginSaveWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<ServiceResponse<OperationResultContractInner>> beginSaveWithServiceResponseAsync(String resourceGroupName, String serviceName, SaveConfigurationParameter parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        return service.beginSave(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResultContractInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationResultContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResultContractInner> clientResponse = beginSaveDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResultContractInner> beginSaveDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResultContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResultContractInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner validate(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return validateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().last().body();
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> validateAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(validateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<OperationResultContractInner> validateAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return validateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<OperationResultContractInner>> validateWithServiceResponseAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        Observable<Response<ResponseBody>> observable = service.validate(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new LongRunningOperationOptions().withFinalStateVia(LongRunningFinalState.LOCATION), new TypeToken<OperationResultContractInner>() { }.getType());
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationResultContractInner object if successful.
     */
    public OperationResultContractInner beginValidate(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return beginValidateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).toBlocking().single().body();
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OperationResultContractInner> beginValidateAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters, final ServiceCallback<OperationResultContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginValidateWithServiceResponseAsync(resourceGroupName, serviceName, parameters), serviceCallback);
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<OperationResultContractInner> beginValidateAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        return beginValidateWithServiceResponseAsync(resourceGroupName, serviceName, parameters).map(new Func1<ServiceResponse<OperationResultContractInner>, OperationResultContractInner>() {
            @Override
            public OperationResultContractInner call(ServiceResponse<OperationResultContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationResultContractInner object
     */
    public Observable<ServiceResponse<OperationResultContractInner>> beginValidateWithServiceResponseAsync(String resourceGroupName, String serviceName, DeployConfigurationParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String configurationName = "configuration";
        return service.beginValidate(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OperationResultContractInner>>>() {
                @Override
                public Observable<ServiceResponse<OperationResultContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OperationResultContractInner> clientResponse = beginValidateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OperationResultContractInner> beginValidateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<OperationResultContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<OperationResultContractInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the status of the most recent synchronization between the configuration database and the Git repository.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TenantConfigurationSyncStateContractInner object if successful.
     */
    public TenantConfigurationSyncStateContractInner getSyncState(String resourceGroupName, String serviceName) {
        return getSyncStateWithServiceResponseAsync(resourceGroupName, serviceName).toBlocking().single().body();
    }

    /**
     * Gets the status of the most recent synchronization between the configuration database and the Git repository.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TenantConfigurationSyncStateContractInner> getSyncStateAsync(String resourceGroupName, String serviceName, final ServiceCallback<TenantConfigurationSyncStateContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(getSyncStateWithServiceResponseAsync(resourceGroupName, serviceName), serviceCallback);
    }

    /**
     * Gets the status of the most recent synchronization between the configuration database and the Git repository.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TenantConfigurationSyncStateContractInner object
     */
    public Observable<TenantConfigurationSyncStateContractInner> getSyncStateAsync(String resourceGroupName, String serviceName) {
        return getSyncStateWithServiceResponseAsync(resourceGroupName, serviceName).map(new Func1<ServiceResponse<TenantConfigurationSyncStateContractInner>, TenantConfigurationSyncStateContractInner>() {
            @Override
            public TenantConfigurationSyncStateContractInner call(ServiceResponse<TenantConfigurationSyncStateContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the status of the most recent synchronization between the configuration database and the Git repository.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TenantConfigurationSyncStateContractInner object
     */
    public Observable<ServiceResponse<TenantConfigurationSyncStateContractInner>> getSyncStateWithServiceResponseAsync(String resourceGroupName, String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String configurationName = "configuration";
        return service.getSyncState(resourceGroupName, serviceName, this.client.subscriptionId(), configurationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TenantConfigurationSyncStateContractInner>>>() {
                @Override
                public Observable<ServiceResponse<TenantConfigurationSyncStateContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TenantConfigurationSyncStateContractInner> clientResponse = getSyncStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TenantConfigurationSyncStateContractInner> getSyncStateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TenantConfigurationSyncStateContractInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TenantConfigurationSyncStateContractInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
