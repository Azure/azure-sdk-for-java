/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueCommentCreateOrUpdateHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueCommentGetEntityTagHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueCommentGetHeaders;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ApiIssueComments.
 */
public class ApiIssueCommentsInner {
    /** The Retrofit service to perform REST calls. */
    private ApiIssueCommentsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ApiIssueCommentsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApiIssueCommentsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ApiIssueCommentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApiIssueComments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApiIssueCommentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments listByService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments")
        Observable<Response<ResponseBody>> listByService(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("issueId") String issueId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments getEntityTag" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}")
        Observable<Response<Void>> getEntityTag(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("issueId") String issueId, @Path("commentId") String commentId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("issueId") String issueId, @Path("commentId") String commentId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("issueId") String issueId, @Path("commentId") String commentId, @Path("subscriptionId") String subscriptionId, @Body IssueCommentContractInner parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("issueId") String issueId, @Path("commentId") String commentId, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ApiIssueComments listByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IssueCommentContractInner&gt; object if successful.
     */
    public PagedList<IssueCommentContractInner> listByService(final String resourceGroupName, final String serviceName, final String apiId, final String issueId) {
        ServiceResponse<Page<IssueCommentContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId).toBlocking().single();
        return new PagedList<IssueCommentContractInner>(response.body()) {
            @Override
            public Page<IssueCommentContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IssueCommentContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final ListOperationCallback<IssueCommentContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId),
            new Func1<String, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<Page<IssueCommentContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId)
            .map(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Page<IssueCommentContractInner>>() {
                @Override
                public Page<IssueCommentContractInner> call(ServiceResponse<Page<IssueCommentContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId)
            .concatMap(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(ServiceResponse<Page<IssueCommentContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IssueCommentContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        return service.listByService(resourceGroupName, serviceName, apiId, issueId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IssueCommentContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IssueCommentContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IssueCommentContractInner&gt; object if successful.
     */
    public PagedList<IssueCommentContractInner> listByService(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<IssueCommentContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId, filter, top, skip).toBlocking().single();
        return new PagedList<IssueCommentContractInner>(response.body()) {
            @Override
            public Page<IssueCommentContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IssueCommentContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final String filter, final Integer top, final Integer skip, final ListOperationCallback<IssueCommentContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<Page<IssueCommentContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final String filter, final Integer top, final Integer skip) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Page<IssueCommentContractInner>>() {
                @Override
                public Page<IssueCommentContractInner> call(ServiceResponse<Page<IssueCommentContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final String filter, final Integer top, final Integer skip) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, apiId, issueId, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(ServiceResponse<Page<IssueCommentContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param apiId API identifier. Must be unique in the current API Management service instance.
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param issueId Issue identifier. Must be unique in the current API Management service instance.
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IssueCommentContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId, final String issueId, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByService(resourceGroupName, serviceName, apiId, issueId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IssueCommentContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IssueCommentContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IssueCommentContractInner>> listByServiceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IssueCommentContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IssueCommentContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityTag(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId).toBlocking().single().body();
    }

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId), serviceCallback);
    }

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        return getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId).map(new Func1<ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders>> getEntityTagWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (commentId == null) {
            throw new IllegalArgumentException("Parameter commentId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityTag(resourceGroupName, serviceName, apiId, issueId, commentId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders> clientResponse = getEntityTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, ApiIssueCommentGetEntityTagHeaders> getEntityTagDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, ApiIssueCommentGetEntityTagHeaders.class);
    }

    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IssueCommentContractInner object if successful.
     */
    public IssueCommentContractInner get(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId).toBlocking().single().body();
    }

    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IssueCommentContractInner> getAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, final ServiceCallback<IssueCommentContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId), serviceCallback);
    }

    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<IssueCommentContractInner> getAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId).map(new Func1<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders>, IssueCommentContractInner>() {
            @Override
            public IssueCommentContractInner call(ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (commentId == null) {
            throw new IllegalArgumentException("Parameter commentId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, apiId, issueId, commentId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentGetHeaders> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IssueCommentContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IssueCommentContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiIssueCommentGetHeaders.class);
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IssueCommentContractInner object if successful.
     */
    public IssueCommentContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters).toBlocking().single().body();
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IssueCommentContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters, final ServiceCallback<IssueCommentContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters), serviceCallback);
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<IssueCommentContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters).map(new Func1<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>, IssueCommentContractInner>() {
            @Override
            public IssueCommentContractInner call(ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (commentId == null) {
            throw new IllegalArgumentException("Parameter commentId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        return service.createOrUpdate(resourceGroupName, serviceName, apiId, issueId, commentId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IssueCommentContractInner object if successful.
     */
    public IssueCommentContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IssueCommentContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters, String ifMatch, final ServiceCallback<IssueCommentContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters, ifMatch), serviceCallback);
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<IssueCommentContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, parameters, ifMatch).map(new Func1<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>, IssueCommentContractInner>() {
            @Override
            public IssueCommentContractInner call(ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param parameters Create parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IssueCommentContractInner object
     */
    public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, IssueCommentContractInner parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (commentId == null) {
            throw new IllegalArgumentException("Parameter commentId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, serviceName, apiId, issueId, commentId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<IssueCommentContractInner, ApiIssueCommentCreateOrUpdateHeaders> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<IssueCommentContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<IssueCommentContractInner>() { }.getType())
                .register(201, new TypeToken<IssueCommentContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiIssueCommentCreateOrUpdateHeaders.class);
    }

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, ifMatch).toBlocking().single().body();
    }

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, ifMatch), serviceCallback);
    }

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, issueId, commentId, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified comment from an Issue.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API identifier. Must be unique in the current API Management service instance.
     * @param issueId Issue identifier. Must be unique in the current API Management service instance.
     * @param commentId Comment identifier within an Issue. Must be unique in the current Issue.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String issueId, String commentId, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (issueId == null) {
            throw new IllegalArgumentException("Parameter issueId is required and cannot be null.");
        }
        if (commentId == null) {
            throw new IllegalArgumentException("Parameter commentId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, apiId, issueId, commentId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;IssueCommentContractInner&gt; object if successful.
     */
    public PagedList<IssueCommentContractInner> listByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<IssueCommentContractInner>> response = listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<IssueCommentContractInner>(response.body()) {
            @Override
            public Page<IssueCommentContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IssueCommentContractInner>> listByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<IssueCommentContractInner>> serviceFuture, final ListOperationCallback<IssueCommentContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<Page<IssueCommentContractInner>> listByServiceNextAsync(final String nextPageLink) {
        return listByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Page<IssueCommentContractInner>>() {
                @Override
                public Page<IssueCommentContractInner> call(ServiceResponse<Page<IssueCommentContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;IssueCommentContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<IssueCommentContractInner>>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(ServiceResponse<Page<IssueCommentContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
    ServiceResponse<PageImpl<IssueCommentContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;IssueCommentContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<IssueCommentContractInner>>> listByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<IssueCommentContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<IssueCommentContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<IssueCommentContractInner>> result = listByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<IssueCommentContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<IssueCommentContractInner>> listByServiceNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<IssueCommentContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<IssueCommentContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
