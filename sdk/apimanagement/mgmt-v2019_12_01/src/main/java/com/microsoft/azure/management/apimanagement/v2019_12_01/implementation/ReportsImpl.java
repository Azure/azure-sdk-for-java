/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2019_12_01.Reports;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import java.util.List;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ReportRecordContract;
import com.microsoft.azure.management.apimanagement.v2019_12_01.RequestReportRecordContract;
import org.joda.time.Period;

class ReportsImpl extends WrapperImpl<ReportsInner> implements Reports {
    private final ApiManagementManager manager;

    ReportsImpl(ApiManagementManager manager) {
        super(manager.inner().reports());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ReportRecordContract> listByApiAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listByApiAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listByUserAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listByUserAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listByOperationAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listByOperationAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listByProductAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listByProductAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listByGeoAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listByGeoAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listBySubscriptionAsync(final String resourceGroupName, final String serviceName, final String filter) {
        ReportsInner client = this.inner();
        return client.listBySubscriptionAsync(resourceGroupName, serviceName, filter)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ReportRecordContract> listByTimeAsync(final String resourceGroupName, final String serviceName, final String filter, final Period interval) {
        ReportsInner client = this.inner();
        return client.listByTimeAsync(resourceGroupName, serviceName, filter, interval)
        .flatMapIterable(new Func1<Page<ReportRecordContractInner>, Iterable<ReportRecordContractInner>>() {
            @Override
            public Iterable<ReportRecordContractInner> call(Page<ReportRecordContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ReportRecordContractInner, ReportRecordContract>() {
            @Override
            public ReportRecordContract call(ReportRecordContractInner inner) {
                return new ReportRecordContractImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RequestReportRecordContract> listByRequestAsync(String resourceGroupName, String serviceName, String filter) {
        ReportsInner client = this.inner();
        return client.listByRequestAsync(resourceGroupName, serviceName, filter)
        .flatMap(new Func1<List<RequestReportRecordContractInner>, Observable<RequestReportRecordContractInner>>() {
            @Override
            public Observable<RequestReportRecordContractInner> call(List<RequestReportRecordContractInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<RequestReportRecordContractInner, RequestReportRecordContract>() {
            @Override
            public RequestReportRecordContract call(RequestReportRecordContractInner inner) {
                return new RequestReportRecordContractImpl(inner, manager());
            }
        });
    }

}
