/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.v2019_12_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ProductGroups.
 */
public class ProductGroupsInner {
    /** The Retrofit service to perform REST calls. */
    private ProductGroupsService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ProductGroupsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProductGroupsInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ProductGroupsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ProductGroups to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProductGroupsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ProductGroups listByProduct" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups")
        Observable<Response<ResponseBody>> listByProduct(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("subscriptionId") String subscriptionId, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ProductGroups checkEntityExists" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}")
        Observable<Response<Void>> checkEntityExists(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("groupId") String groupId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ProductGroups createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("groupId") String groupId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ProductGroups delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("productId") String productId, @Path("groupId") String groupId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.v2019_12_01.ProductGroups listByProductNext" })
        @GET
        Observable<Response<ResponseBody>> listByProductNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GroupContractInner&gt; object if successful.
     */
    public PagedList<GroupContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String productId) {
        ServiceResponse<Page<GroupContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, productId).toBlocking().single();
        return new PagedList<GroupContractInner>(response.body()) {
            @Override
            public Page<GroupContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GroupContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final ListOperationCallback<GroupContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, productId),
            new Func1<String, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<Page<GroupContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId)
            .map(new Func1<ServiceResponse<Page<GroupContractInner>>, Page<GroupContractInner>>() {
                @Override
                public Page<GroupContractInner> call(ServiceResponse<Page<GroupContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String productId) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, productId)
            .concatMap(new Func1<ServiceResponse<Page<GroupContractInner>>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(ServiceResponse<Page<GroupContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GroupContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String productId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final Integer skip = null;
        return service.listByProduct(resourceGroupName, serviceName, productId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GroupContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GroupContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt |     | &lt;/br&gt;| displayName | filter | eq, ne |     | &lt;/br&gt;| description | filter | eq, ne |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GroupContractInner&gt; object if successful.
     */
    public PagedList<GroupContractInner> listByProduct(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        ServiceResponse<Page<GroupContractInner>> response = listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip).toBlocking().single();
        return new PagedList<GroupContractInner>(response.body()) {
            @Override
            public Page<GroupContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt |     | &lt;/br&gt;| displayName | filter | eq, ne |     | &lt;/br&gt;| description | filter | eq, ne |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GroupContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip, final ListOperationCallback<GroupContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt |     | &lt;/br&gt;| displayName | filter | eq, ne |     | &lt;/br&gt;| description | filter | eq, ne |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<Page<GroupContractInner>> listByProductAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        return listByProductWithServiceResponseAsync(resourceGroupName, serviceName, productId, filter, top, skip)
            .map(new Func1<ServiceResponse<Page<GroupContractInner>>, Page<GroupContractInner>>() {
                @Override
                public Page<GroupContractInner> call(ServiceResponse<Page<GroupContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt |     | &lt;/br&gt;| displayName | filter | eq, ne |     | &lt;/br&gt;| description | filter | eq, ne |     | &lt;/br&gt;
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        return listByProductSinglePageAsync(resourceGroupName, serviceName, productId, filter, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<GroupContractInner>>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(ServiceResponse<Page<GroupContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
    ServiceResponse<PageImpl<GroupContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<GroupContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<GroupContractInner>> * @param productId Product identifier. Must be unique in the current API Management service instance.
    ServiceResponse<PageImpl<GroupContractInner>> * @param filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt |     | &lt;/br&gt;| displayName | filter | eq, ne |     | &lt;/br&gt;| description | filter | eq, ne |     | &lt;/br&gt;
    ServiceResponse<PageImpl<GroupContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<GroupContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GroupContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductSinglePageAsync(final String resourceGroupName, final String serviceName, final String productId, final String filter, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByProduct(resourceGroupName, serviceName, productId, this.client.subscriptionId(), filter, top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GroupContractInner>> result = listByProductDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GroupContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GroupContractInner>> listByProductDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GroupContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GroupContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void checkEntityExists(String resourceGroupName, String serviceName, String productId, String groupId) {
        checkEntityExistsWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).toBlocking().single().body();
    }

    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> checkEntityExistsAsync(String resourceGroupName, String serviceName, String productId, String groupId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(checkEntityExistsWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId), serviceCallback);
    }

    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> checkEntityExistsAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        return checkEntityExistsWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> checkEntityExistsWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.checkEntityExists(resourceGroupName, serviceName, productId, groupId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<Void> response) {
                    try {
                        ServiceResponse<Void> clientResponse = checkEntityExistsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> checkEntityExistsDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmpty(response);
    }

    /**
     * Adds the association between the specified developer group with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GroupContractInner object if successful.
     */
    public GroupContractInner createOrUpdate(String resourceGroupName, String serviceName, String productId, String groupId) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).toBlocking().single().body();
    }

    /**
     * Adds the association between the specified developer group with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GroupContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String productId, String groupId, final ServiceCallback<GroupContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId), serviceCallback);
    }

    /**
     * Adds the association between the specified developer group with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupContractInner object
     */
    public Observable<GroupContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).map(new Func1<ServiceResponse<GroupContractInner>, GroupContractInner>() {
            @Override
            public GroupContractInner call(ServiceResponse<GroupContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Adds the association between the specified developer group with the specified product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GroupContractInner object
     */
    public Observable<ServiceResponse<GroupContractInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.createOrUpdate(resourceGroupName, serviceName, productId, groupId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GroupContractInner>>>() {
                @Override
                public Observable<ServiceResponse<GroupContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GroupContractInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GroupContractInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GroupContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GroupContractInner>() { }.getType())
                .register(201, new TypeToken<GroupContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes the association between the specified group and product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String productId, String groupId) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).toBlocking().single().body();
    }

    /**
     * Deletes the association between the specified group and product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String productId, String groupId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId), serviceCallback);
    }

    /**
     * Deletes the association between the specified group and product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, productId, groupId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the association between the specified group and product.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String productId, String groupId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (productId == null) {
            throw new IllegalArgumentException("Parameter productId is required and cannot be null.");
        }
        if (groupId == null) {
            throw new IllegalArgumentException("Parameter groupId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, productId, groupId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GroupContractInner&gt; object if successful.
     */
    public PagedList<GroupContractInner> listByProductNext(final String nextPageLink) {
        ServiceResponse<Page<GroupContractInner>> response = listByProductNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<GroupContractInner>(response.body()) {
            @Override
            public Page<GroupContractInner> nextPage(String nextPageLink) {
                return listByProductNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GroupContractInner>> listByProductNextAsync(final String nextPageLink, final ServiceFuture<List<GroupContractInner>> serviceFuture, final ListOperationCallback<GroupContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByProductNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(String nextPageLink) {
                    return listByProductNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<Page<GroupContractInner>> listByProductNextAsync(final String nextPageLink) {
        return listByProductNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<GroupContractInner>>, Page<GroupContractInner>>() {
                @Override
                public Page<GroupContractInner> call(ServiceResponse<Page<GroupContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GroupContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductNextWithServiceResponseAsync(final String nextPageLink) {
        return listByProductNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<GroupContractInner>>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(ServiceResponse<Page<GroupContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByProductNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the collection of developer groups associated with the specified product.
     *
    ServiceResponse<PageImpl<GroupContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GroupContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GroupContractInner>>> listByProductNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByProductNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GroupContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GroupContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GroupContractInner>> result = listByProductNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GroupContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GroupContractInner>> listByProductNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GroupContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GroupContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
