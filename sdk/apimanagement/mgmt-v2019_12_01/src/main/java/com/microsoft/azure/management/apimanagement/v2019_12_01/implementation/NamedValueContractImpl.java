/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01.implementation;

import com.microsoft.azure.management.apimanagement.v2019_12_01.NamedValueContract;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.apimanagement.v2019_12_01.NamedValueUpdateParameters;
import java.util.List;
import com.microsoft.azure.management.apimanagement.v2019_12_01.NamedValueCreateContract;
import rx.functions.Func1;

class NamedValueContractImpl extends CreatableUpdatableImpl<NamedValueContract, NamedValueContractInner, NamedValueContractImpl> implements NamedValueContract, NamedValueContract.Definition, NamedValueContract.Update {
    private String resourceGroupName;
    private String serviceName;
    private String namedValueId;
    private String cifMatch;
    private String uifMatch;
    private NamedValueCreateContract createParameter;
    private NamedValueUpdateParameters updateParameter;
    private final ApiManagementManager manager;

    NamedValueContractImpl(String name, ApiManagementManager manager) {
        super(name, new NamedValueContractInner());
        this.manager = manager;
        // Set resource name
        this.namedValueId = name;
        //
        this.createParameter = new NamedValueCreateContract();
        this.updateParameter = new NamedValueUpdateParameters();
    }

    NamedValueContractImpl(NamedValueContractInner inner, ApiManagementManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.namedValueId = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "service");
        this.namedValueId = IdParsingUtils.getValueFromIdByName(inner.id(), "namedValues");
        // set other parameters for create and update
        this.createParameter = new NamedValueCreateContract();
        this.updateParameter = new NamedValueUpdateParameters();
    }

    @Override
    public ApiManagementManager manager() {
        return this.manager;
    }

    @Override
    public Observable<NamedValueContract> createResourceAsync() {
        NamedValuesInner client = this.manager().inner().namedValues();
        return client.createOrUpdateAsync(this.resourceGroupName, this.serviceName, this.namedValueId, this.createParameter, this.cifMatch)
            .map(new Func1<NamedValueContractInner, NamedValueContractInner>() {
               @Override
               public NamedValueContractInner call(NamedValueContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<NamedValueContract> updateResourceAsync() {
        NamedValuesInner client = this.manager().inner().namedValues();
        return client.updateAsync(this.resourceGroupName, this.serviceName, this.namedValueId, this.updateParameter, this.uifMatch)
            .map(new Func1<NamedValueContractInner, NamedValueContractInner>() {
               @Override
               public NamedValueContractInner call(NamedValueContractInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<NamedValueContractInner> getInnerAsync() {
        NamedValuesInner client = this.manager().inner().namedValues();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new NamedValueCreateContract();
        this.updateParameter = new NamedValueUpdateParameters();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Boolean secret() {
        return this.inner().secret();
    }

    @Override
    public List<String> tags() {
        return this.inner().tags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String value() {
        return this.inner().value();
    }

    @Override
    public NamedValueContractImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public NamedValueContractImpl withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public NamedValueContractImpl withIfMatch(String ifMatch) {
        if (isInCreateMode()) {
            this.cifMatch = ifMatch;
        } else {
            this.uifMatch = ifMatch;
        }
        return this;
    }

    @Override
    public NamedValueContractImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.createParameter.withDisplayName(displayName);
        } else {
            this.updateParameter.withDisplayName(displayName);
        }
        return this;
    }

    @Override
    public NamedValueContractImpl withValue(String value) {
        if (isInCreateMode()) {
            this.createParameter.withValue(value);
        } else {
            this.updateParameter.withValue(value);
        }
        return this;
    }

    @Override
    public NamedValueContractImpl withSecret(Boolean secret) {
        if (isInCreateMode()) {
            this.createParameter.withSecret(secret);
        } else {
            this.updateParameter.withSecret(secret);
        }
        return this;
    }

    @Override
    public NamedValueContractImpl withTags(List<String> tags) {
        if (isInCreateMode()) {
            this.createParameter.withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

}
