/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2019_12_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.apimanagement.v2019_12_01.implementation.BackendContractInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.apimanagement.v2019_12_01.implementation.ApiManagementManager;

/**
 * Type representing BackendContract.
 */
public interface BackendContract extends HasInner<BackendContractInner>, Indexable, Updatable<BackendContract.Update>, HasManager<ApiManagementManager> {
    /**
     * @return the credentials value.
     */
    BackendCredentialsContract credentials();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the properties value.
     */
    BackendProperties properties();

    /**
     * @return the protocol value.
     */
    BackendProtocol protocol();

    /**
     * @return the proxy value.
     */
    BackendProxyContract proxy();

    /**
     * @return the resourceId value.
     */
    String resourceId();

    /**
     * @return the title value.
     */
    String title();

    /**
     * @return the tls value.
     */
    BackendTlsProperties tls();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the url value.
     */
    String url();

    /**
     * The entirety of the BackendContract definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithResourceGroupName, DefinitionStages.WithServiceName, DefinitionStages.WithIfMatch, DefinitionStages.WithProtocol, DefinitionStages.WithUrl, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of BackendContract definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a BackendContract definition.
         */
        interface Blank extends WithResourceGroupName {
        }

        /**
         * The stage of the backendcontract definition allowing to specify ResourceGroupName.
         */
        interface WithResourceGroupName {
           /**
            * Specifies resourceGroupName.
            * @param resourceGroupName The name of the resource group
            * @return the next definition stage
            */
            WithServiceName withResourceGroupName(String resourceGroupName);
        }

        /**
         * The stage of the backendcontract definition allowing to specify ServiceName.
         */
        interface WithServiceName {
           /**
            * Specifies serviceName.
            * @param serviceName The name of the API Management service
            * @return the next definition stage
            */
            WithIfMatch withServiceName(String serviceName);
        }

        /**
         * The stage of the backendcontract definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
            * @return the next definition stage
            */
            WithProtocol withIfMatch(String ifMatch);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Protocol.
         */
        interface WithProtocol {
           /**
            * Specifies protocol.
            * @param protocol Backend communication protocol. Possible values include: 'http', 'soap'
            * @return the next definition stage
            */
            WithUrl withProtocol(BackendProtocol protocol);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Url.
         */
        interface WithUrl {
           /**
            * Specifies url.
            * @param url Runtime Url of the Backend
            * @return the next definition stage
            */
            WithCreate withUrl(String url);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Credentials.
         */
        interface WithCredentials {
            /**
             * Specifies credentials.
             * @param credentials Backend Credentials Contract Properties
             * @return the next definition stage
             */
            WithCreate withCredentials(BackendCredentialsContract credentials);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Backend Description
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Properties.
         */
        interface WithProperties {
            /**
             * Specifies properties.
             * @param properties Backend Properties contract
             * @return the next definition stage
             */
            WithCreate withProperties(BackendProperties properties);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Proxy.
         */
        interface WithProxy {
            /**
             * Specifies proxy.
             * @param proxy Backend Proxy Contract Properties
             * @return the next definition stage
             */
            WithCreate withProxy(BackendProxyContract proxy);
        }

        /**
         * The stage of the backendcontract definition allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps
             * @return the next definition stage
             */
            WithCreate withResourceId(String resourceId);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Title.
         */
        interface WithTitle {
            /**
             * Specifies title.
             * @param title Backend Title
             * @return the next definition stage
             */
            WithCreate withTitle(String title);
        }

        /**
         * The stage of the backendcontract definition allowing to specify Tls.
         */
        interface WithTls {
            /**
             * Specifies tls.
             * @param tls Backend TLS Properties
             * @return the next definition stage
             */
            WithCreate withTls(BackendTlsProperties tls);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<BackendContract>, DefinitionStages.WithCredentials, DefinitionStages.WithDescription, DefinitionStages.WithProperties, DefinitionStages.WithProxy, DefinitionStages.WithResourceId, DefinitionStages.WithTitle, DefinitionStages.WithTls {
        }
    }
    /**
     * The template for a BackendContract update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<BackendContract>, UpdateStages.WithIfMatch, UpdateStages.WithCredentials, UpdateStages.WithDescription, UpdateStages.WithProperties, UpdateStages.WithProxy, UpdateStages.WithResourceId, UpdateStages.WithTitle, UpdateStages.WithTls {
    }

    /**
     * Grouping of BackendContract update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the backendcontract update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the backendcontract update allowing to specify Credentials.
         */
        interface WithCredentials {
            /**
             * Specifies credentials.
             * @param credentials Backend Credentials Contract Properties
             * @return the next update stage
             */
            Update withCredentials(BackendCredentialsContract credentials);
        }

        /**
         * The stage of the backendcontract update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Backend Description
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the backendcontract update allowing to specify Properties.
         */
        interface WithProperties {
            /**
             * Specifies properties.
             * @param properties Backend Properties contract
             * @return the next update stage
             */
            Update withProperties(BackendProperties properties);
        }

        /**
         * The stage of the backendcontract update allowing to specify Proxy.
         */
        interface WithProxy {
            /**
             * Specifies proxy.
             * @param proxy Backend Proxy Contract Properties
             * @return the next update stage
             */
            Update withProxy(BackendProxyContract proxy);
        }

        /**
         * The stage of the backendcontract update allowing to specify ResourceId.
         */
        interface WithResourceId {
            /**
             * Specifies resourceId.
             * @param resourceId Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps
             * @return the next update stage
             */
            Update withResourceId(String resourceId);
        }

        /**
         * The stage of the backendcontract update allowing to specify Title.
         */
        interface WithTitle {
            /**
             * Specifies title.
             * @param title Backend Title
             * @return the next update stage
             */
            Update withTitle(String title);
        }

        /**
         * The stage of the backendcontract update allowing to specify Tls.
         */
        interface WithTls {
            /**
             * Specifies tls.
             * @param tls Backend TLS Properties
             * @return the next update stage
             */
            Update withTls(BackendTlsProperties tls);
        }

    }
}
