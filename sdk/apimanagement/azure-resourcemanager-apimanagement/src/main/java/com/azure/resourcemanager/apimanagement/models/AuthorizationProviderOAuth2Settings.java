// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** OAuth2 settings details. */
@Fluent
public final class AuthorizationProviderOAuth2Settings {
    /*
     * Redirect URL to be set in the OAuth application.
     */
    @JsonProperty(value = "redirectUrl")
    private String redirectUrl;

    /*
     * OAuth2 settings
     */
    @JsonProperty(value = "grantTypes")
    private AuthorizationProviderOAuth2GrantTypes grantTypes;

    /** Creates an instance of AuthorizationProviderOAuth2Settings class. */
    public AuthorizationProviderOAuth2Settings() {
    }

    /**
     * Get the redirectUrl property: Redirect URL to be set in the OAuth application.
     *
     * @return the redirectUrl value.
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }

    /**
     * Set the redirectUrl property: Redirect URL to be set in the OAuth application.
     *
     * @param redirectUrl the redirectUrl value to set.
     * @return the AuthorizationProviderOAuth2Settings object itself.
     */
    public AuthorizationProviderOAuth2Settings withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * Get the grantTypes property: OAuth2 settings.
     *
     * @return the grantTypes value.
     */
    public AuthorizationProviderOAuth2GrantTypes grantTypes() {
        return this.grantTypes;
    }

    /**
     * Set the grantTypes property: OAuth2 settings.
     *
     * @param grantTypes the grantTypes value to set.
     * @return the AuthorizationProviderOAuth2Settings object itself.
     */
    public AuthorizationProviderOAuth2Settings withGrantTypes(AuthorizationProviderOAuth2GrantTypes grantTypes) {
        this.grantTypes = grantTypes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (grantTypes() != null) {
            grantTypes().validate();
        }
    }
}
