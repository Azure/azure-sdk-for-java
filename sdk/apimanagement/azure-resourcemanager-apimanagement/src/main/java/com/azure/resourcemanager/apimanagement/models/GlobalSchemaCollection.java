// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.apimanagement.fluent.models.GlobalSchemaContractInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The response of the list schema operation. */
@Fluent
public final class GlobalSchemaCollection {
    /*
     * Global Schema Contract value.
     */
    @JsonProperty(value = "value", access = JsonProperty.Access.WRITE_ONLY)
    private List<GlobalSchemaContractInner> value;

    /*
     * Total record count number.
     */
    @JsonProperty(value = "count")
    private Long count;

    /*
     * Next page link if any.
     */
    @JsonProperty(value = "nextLink", access = JsonProperty.Access.WRITE_ONLY)
    private String nextLink;

    /**
     * Get the value property: Global Schema Contract value.
     *
     * @return the value value.
     */
    public List<GlobalSchemaContractInner> value() {
        return this.value;
    }

    /**
     * Get the count property: Total record count number.
     *
     * @return the count value.
     */
    public Long count() {
        return this.count;
    }

    /**
     * Set the count property: Total record count number.
     *
     * @param count the count value to set.
     * @return the GlobalSchemaCollection object itself.
     */
    public GlobalSchemaCollection withCount(Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get the nextLink property: Next page link if any.
     *
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }
}
