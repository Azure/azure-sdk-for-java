// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.apimanagement.models.AuthorizationProviderOAuth2Settings;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Authorization Provider contract. */
@Fluent
public final class AuthorizationProviderContractInner extends ProxyResource {
    /*
     * Properties of the Authorization Provider Contract.
     */
    @JsonProperty(value = "properties")
    private AuthorizationProviderContractProperties innerProperties;

    /** Creates an instance of AuthorizationProviderContractInner class. */
    public AuthorizationProviderContractInner() {
    }

    /**
     * Get the innerProperties property: Properties of the Authorization Provider Contract.
     *
     * @return the innerProperties value.
     */
    private AuthorizationProviderContractProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the displayName property: Authorization Provider name. Must be 1 to 300 characters long.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Authorization Provider name. Must be 1 to 300 characters long.
     *
     * @param displayName the displayName value to set.
     * @return the AuthorizationProviderContractInner object itself.
     */
    public AuthorizationProviderContractInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AuthorizationProviderContractProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the identityProvider property: Identity provider name. Must be 1 to 300 characters long.
     *
     * @return the identityProvider value.
     */
    public String identityProvider() {
        return this.innerProperties() == null ? null : this.innerProperties().identityProvider();
    }

    /**
     * Set the identityProvider property: Identity provider name. Must be 1 to 300 characters long.
     *
     * @param identityProvider the identityProvider value to set.
     * @return the AuthorizationProviderContractInner object itself.
     */
    public AuthorizationProviderContractInner withIdentityProvider(String identityProvider) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AuthorizationProviderContractProperties();
        }
        this.innerProperties().withIdentityProvider(identityProvider);
        return this;
    }

    /**
     * Get the oauth2 property: OAuth2 settings.
     *
     * @return the oauth2 value.
     */
    public AuthorizationProviderOAuth2Settings oauth2() {
        return this.innerProperties() == null ? null : this.innerProperties().oauth2();
    }

    /**
     * Set the oauth2 property: OAuth2 settings.
     *
     * @param oauth2 the oauth2 value to set.
     * @return the AuthorizationProviderContractInner object itself.
     */
    public AuthorizationProviderContractInner withOauth2(AuthorizationProviderOAuth2Settings oauth2) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AuthorizationProviderContractProperties();
        }
        this.innerProperties().withOauth2(oauth2);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
