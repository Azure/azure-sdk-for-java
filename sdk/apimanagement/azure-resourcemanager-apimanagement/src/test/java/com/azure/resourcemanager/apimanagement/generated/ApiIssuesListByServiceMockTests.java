// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.IssueContract;
import com.azure.resourcemanager.apimanagement.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiIssuesListByServiceMockTests {
    @Test
    public void testListByService() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"title\":\"eyodpiovnl\",\"description\":\"rwyakzuafapwxsv\",\"userId\":\"eatjiobnir\",\"createdDate\":\"2021-07-16T12:16:52Z\",\"state\":\"resolved\",\"apiId\":\"dnwt\"},\"id\":\"ntimznup\",\"name\":\"mtbsetkodsqvhe\",\"type\":\"aakghcrzmmmjyvdh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IssueContract> response = manager.apiIssues()
            .listByService("qczouanbfulvcxgl", "oqwb", "ti", "qbzbwbgwzh", true, 801804758, 850807891,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("eyodpiovnl", response.iterator().next().title());
        Assertions.assertEquals("rwyakzuafapwxsv", response.iterator().next().description());
        Assertions.assertEquals("eatjiobnir", response.iterator().next().userId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-16T12:16:52Z"), response.iterator().next().createdDate());
        Assertions.assertEquals(State.RESOLVED, response.iterator().next().state());
        Assertions.assertEquals("dnwt", response.iterator().next().apiId());
    }
}
