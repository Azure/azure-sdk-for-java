// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.ApiManagementServiceIdentity;
import com.azure.resourcemanager.apimanagement.models.ApimIdentityType;
import com.azure.resourcemanager.apimanagement.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApiManagementServiceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApiManagementServiceIdentity model = BinaryData.fromString(
            "{\"type\":\"None\",\"principalId\":\"84c6cf1a-d576-40b0-ab00-af105715d8e2\",\"tenantId\":\"ef160fd3-7a93-4e85-a42d-a7a73fff3628\",\"userAssignedIdentities\":{\"alahf\":{\"principalId\":\"uroolkolirhhm\",\"clientId\":\"usuzgfjzcvaaxo\"},\"hoqeqshavljqk\":{\"principalId\":\"ccokd\",\"clientId\":\"ukmkczynu\"},\"r\":{\"principalId\":\"rqolnthbb\",\"clientId\":\"gzukw\"},\"bpfiddhlrufz\":{\"principalId\":\"kjthfce\",\"clientId\":\"ncjmlfuyf\"}}}")
            .toObject(ApiManagementServiceIdentity.class);
        Assertions.assertEquals(ApimIdentityType.NONE, model.type());
        Assertions.assertEquals("uroolkolirhhm", model.userAssignedIdentities().get("alahf").principalId());
        Assertions.assertEquals("usuzgfjzcvaaxo", model.userAssignedIdentities().get("alahf").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApiManagementServiceIdentity model = new ApiManagementServiceIdentity().withType(ApimIdentityType.NONE)
            .withUserAssignedIdentities(mapOf("alahf",
                new UserIdentityProperties().withPrincipalId("uroolkolirhhm").withClientId("usuzgfjzcvaaxo"),
                "hoqeqshavljqk", new UserIdentityProperties().withPrincipalId("ccokd").withClientId("ukmkczynu"), "r",
                new UserIdentityProperties().withPrincipalId("rqolnthbb").withClientId("gzukw"), "bpfiddhlrufz",
                new UserIdentityProperties().withPrincipalId("kjthfce").withClientId("ncjmlfuyf")));
        model = BinaryData.fromObject(model).toObject(ApiManagementServiceIdentity.class);
        Assertions.assertEquals(ApimIdentityType.NONE, model.type());
        Assertions.assertEquals("uroolkolirhhm", model.userAssignedIdentities().get("alahf").principalId());
        Assertions.assertEquals("usuzgfjzcvaaxo", model.userAssignedIdentities().get("alahf").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
