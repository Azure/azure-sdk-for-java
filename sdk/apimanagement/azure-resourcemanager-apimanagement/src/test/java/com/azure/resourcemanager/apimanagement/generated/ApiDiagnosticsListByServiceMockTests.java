// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiDiagnosticsListByServiceMockTests {
    @Test
    public void testListByService() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"lybqfufkekzfkic\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":18.786470720685745},\"frontend\":{\"request\":{\"headers\":[\"vsryjokvlw\"],\"body\":{\"bytes\":254720511},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"a\",\"wbpzgfgqp\",\"dhgxgiea\",\"bfpxxavlozukg\"],\"body\":{\"bytes\":299984400},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"c\",\"bnbeoskemq\"],\"body\":{\"bytes\":1779899222},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{},{}]}},\"response\":{\"headers\":[\"dfkhttuobrxz\",\"hyt\",\"bjkjge\"],\"body\":{\"bytes\":199448385},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"verbose\",\"operationNameFormat\":\"Name\",\"metrics\":false},\"id\":\"mhlvyqn\",\"name\":\"lbqrmlqk\",\"type\":\"ekhjgq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<DiagnosticContract> response = manager.apiDiagnostics()
            .listByService("nzhrplc", "fmbzquuutqmh", "tqyzyc", "cmbkygvxjdqo", 448533657, 753412863,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.iterator().next().alwaysLog());
        Assertions.assertEquals("lybqfufkekzfkic", response.iterator().next().loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.iterator().next().sampling().samplingType());
        Assertions.assertEquals(18.786470720685745D, response.iterator().next().sampling().percentage());
        Assertions.assertEquals("vsryjokvlw", response.iterator().next().frontend().request().headers().get(0));
        Assertions.assertEquals(254720511, response.iterator().next().frontend().request().body().bytes());
        Assertions.assertEquals("a", response.iterator().next().frontend().response().headers().get(0));
        Assertions.assertEquals(299984400, response.iterator().next().frontend().response().body().bytes());
        Assertions.assertEquals("c", response.iterator().next().backend().request().headers().get(0));
        Assertions.assertEquals(1779899222, response.iterator().next().backend().request().body().bytes());
        Assertions.assertEquals("dfkhttuobrxz", response.iterator().next().backend().response().headers().get(0));
        Assertions.assertEquals(199448385, response.iterator().next().backend().response().body().bytes());
        Assertions.assertTrue(response.iterator().next().logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, response.iterator().next().httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, response.iterator().next().verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.iterator().next().operationNameFormat());
        Assertions.assertFalse(response.iterator().next().metrics());
    }
}
