// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.DiagnosticContractUpdateProperties;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.DataMaskingMode;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticContractUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticContractUpdateProperties model = BinaryData.fromString(
            "{\"alwaysLog\":\"allErrors\",\"loggerId\":\"gaullfsty\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":83.26198355561499},\"frontend\":{\"request\":{\"headers\":[\"mhmqmiw\"],\"body\":{\"bytes\":214389094},\"dataMasking\":{\"queryParams\":[{\"value\":\"qfgufjnbxw\",\"mode\":\"Mask\"},{\"value\":\"ukin\",\"mode\":\"Mask\"},{\"value\":\"gde\",\"mode\":\"Mask\"},{\"value\":\"ouyvew\",\"mode\":\"Mask\"}],\"headers\":[{\"value\":\"cgldohgc\",\"mode\":\"Mask\"},{\"value\":\"fhhhtestdq\",\"mode\":\"Hide\"}]}},\"response\":{\"headers\":[\"kpljdshvvfkdxc\",\"yijjimhi\"],\"body\":{\"bytes\":1408425443},\"dataMasking\":{\"queryParams\":[{\"value\":\"vvsduydwnw\",\"mode\":\"Hide\"}],\"headers\":[{\"value\":\"ldrdymnswx\",\"mode\":\"Hide\"}]}}},\"backend\":{\"request\":{\"headers\":[\"ghxnimvyujrxgunn\",\"gypuqtnylquevq\"],\"body\":{\"bytes\":1000005393},\"dataMasking\":{\"queryParams\":[{\"value\":\"uebsnznwgsqufmjx\",\"mode\":\"Hide\"},{\"value\":\"eqcazisvbrqgcy\",\"mode\":\"Hide\"}],\"headers\":[{\"value\":\"pkwonrzpghlr\",\"mode\":\"Hide\"},{\"value\":\"blxbuibrv\",\"mode\":\"Mask\"},{\"value\":\"flvsmfjihv\",\"mode\":\"Mask\"},{\"value\":\"rttjfuqmm\",\"mode\":\"Mask\"}]}},\"response\":{\"headers\":[\"q\"],\"body\":{\"bytes\":984943666},\"dataMasking\":{\"queryParams\":[{\"value\":\"ygufmwelvxgwz\",\"mode\":\"Hide\"},{\"value\":\"tlcjgpvcqz\",\"mode\":\"Hide\"}],\"headers\":[{\"value\":\"wx\",\"mode\":\"Mask\"}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"information\",\"operationNameFormat\":\"Url\",\"metrics\":false}")
            .toObject(DiagnosticContractUpdateProperties.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("gaullfsty", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(83.26198355561499D, model.sampling().percentage());
        Assertions.assertEquals("mhmqmiw", model.frontend().request().headers().get(0));
        Assertions.assertEquals(214389094, model.frontend().request().body().bytes());
        Assertions.assertEquals("qfgufjnbxw", model.frontend().request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK,
            model.frontend().request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("cgldohgc", model.frontend().request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.frontend().request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("kpljdshvvfkdxc", model.frontend().response().headers().get(0));
        Assertions.assertEquals(1408425443, model.frontend().response().body().bytes());
        Assertions.assertEquals("vvsduydwnw", model.frontend().response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.frontend().response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("ldrdymnswx", model.frontend().response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.frontend().response().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("ghxnimvyujrxgunn", model.backend().request().headers().get(0));
        Assertions.assertEquals(1000005393, model.backend().request().body().bytes());
        Assertions.assertEquals("uebsnznwgsqufmjx",
            model.backend().request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.backend().request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("pkwonrzpghlr", model.backend().request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE, model.backend().request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("q", model.backend().response().headers().get(0));
        Assertions.assertEquals(984943666, model.backend().response().body().bytes());
        Assertions.assertEquals("ygufmwelvxgwz", model.backend().response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.backend().response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("wx", model.backend().response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.backend().response().dataMasking().headers().get(0).mode());
        Assertions.assertTrue(model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.INFORMATION, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.operationNameFormat());
        Assertions.assertFalse(model.metrics());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticContractUpdateProperties model
            = new DiagnosticContractUpdateProperties().withAlwaysLog(AlwaysLog.ALL_ERRORS)
                .withLoggerId("gaullfsty")
                .withSampling(
                    new SamplingSettings().withSamplingType(SamplingType.FIXED).withPercentage(83.26198355561499D))
                .withFrontend(new PipelineDiagnosticSettings()
                    .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("mhmqmiw"))
                        .withBody(new BodyDiagnosticSettings().withBytes(214389094))
                        .withDataMasking(new DataMasking()
                            .withQueryParams(Arrays.asList(
                                new DataMaskingEntity().withValue("qfgufjnbxw").withMode(DataMaskingMode.MASK),
                                new DataMaskingEntity().withValue("ukin").withMode(DataMaskingMode.MASK),
                                new DataMaskingEntity().withValue("gde").withMode(DataMaskingMode.MASK),
                                new DataMaskingEntity().withValue("ouyvew").withMode(DataMaskingMode.MASK)))
                            .withHeaders(Arrays.asList(
                                new DataMaskingEntity().withValue("cgldohgc").withMode(DataMaskingMode.MASK),
                                new DataMaskingEntity().withValue("fhhhtestdq").withMode(DataMaskingMode.HIDE)))))
                    .withResponse(new HttpMessageDiagnostic().withHeaders(Arrays.asList("kpljdshvvfkdxc", "yijjimhi"))
                        .withBody(new BodyDiagnosticSettings().withBytes(1408425443))
                        .withDataMasking(new DataMasking()
                            .withQueryParams(Arrays
                                .asList(new DataMaskingEntity().withValue("vvsduydwnw").withMode(DataMaskingMode.HIDE)))
                            .withHeaders(Arrays.asList(
                                new DataMaskingEntity().withValue("ldrdymnswx").withMode(DataMaskingMode.HIDE))))))
                .withBackend(new PipelineDiagnosticSettings()
                    .withRequest(
                        new HttpMessageDiagnostic().withHeaders(Arrays.asList("ghxnimvyujrxgunn", "gypuqtnylquevq"))
                            .withBody(new BodyDiagnosticSettings().withBytes(1000005393))
                            .withDataMasking(new DataMasking()
                                .withQueryParams(Arrays.asList(
                                    new DataMaskingEntity().withValue("uebsnznwgsqufmjx")
                                        .withMode(DataMaskingMode.HIDE),
                                    new DataMaskingEntity().withValue("eqcazisvbrqgcy").withMode(DataMaskingMode.HIDE)))
                                .withHeaders(Arrays.asList(
                                    new DataMaskingEntity().withValue("pkwonrzpghlr").withMode(DataMaskingMode.HIDE),
                                    new DataMaskingEntity().withValue("blxbuibrv").withMode(DataMaskingMode.MASK),
                                    new DataMaskingEntity().withValue("flvsmfjihv").withMode(DataMaskingMode.MASK),
                                    new DataMaskingEntity().withValue("rttjfuqmm").withMode(DataMaskingMode.MASK)))))
                    .withResponse(
                        new HttpMessageDiagnostic().withHeaders(Arrays.asList("q"))
                            .withBody(new BodyDiagnosticSettings().withBytes(984943666))
                            .withDataMasking(
                                new DataMasking()
                                    .withQueryParams(Arrays.asList(
                                        new DataMaskingEntity().withValue("ygufmwelvxgwz")
                                            .withMode(DataMaskingMode.HIDE),
                                        new DataMaskingEntity().withValue("tlcjgpvcqz").withMode(DataMaskingMode.HIDE)))
                                    .withHeaders(Arrays.asList(
                                        new DataMaskingEntity().withValue("wx").withMode(DataMaskingMode.MASK))))))
                .withLogClientIp(true)
                .withHttpCorrelationProtocol(HttpCorrelationProtocol.LEGACY)
                .withVerbosity(Verbosity.INFORMATION)
                .withOperationNameFormat(OperationNameFormat.URL)
                .withMetrics(false);
        model = BinaryData.fromObject(model).toObject(DiagnosticContractUpdateProperties.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("gaullfsty", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(83.26198355561499D, model.sampling().percentage());
        Assertions.assertEquals("mhmqmiw", model.frontend().request().headers().get(0));
        Assertions.assertEquals(214389094, model.frontend().request().body().bytes());
        Assertions.assertEquals("qfgufjnbxw", model.frontend().request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK,
            model.frontend().request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("cgldohgc", model.frontend().request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.frontend().request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("kpljdshvvfkdxc", model.frontend().response().headers().get(0));
        Assertions.assertEquals(1408425443, model.frontend().response().body().bytes());
        Assertions.assertEquals("vvsduydwnw", model.frontend().response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.frontend().response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("ldrdymnswx", model.frontend().response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.frontend().response().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("ghxnimvyujrxgunn", model.backend().request().headers().get(0));
        Assertions.assertEquals(1000005393, model.backend().request().body().bytes());
        Assertions.assertEquals("uebsnznwgsqufmjx",
            model.backend().request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.backend().request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("pkwonrzpghlr", model.backend().request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE, model.backend().request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("q", model.backend().response().headers().get(0));
        Assertions.assertEquals(984943666, model.backend().response().body().bytes());
        Assertions.assertEquals("ygufmwelvxgwz", model.backend().response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE,
            model.backend().response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("wx", model.backend().response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.backend().response().dataMasking().headers().get(0).mode());
        Assertions.assertTrue(model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.INFORMATION, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.operationNameFormat());
        Assertions.assertFalse(model.metrics());
    }
}
