// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ApiReleaseContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiReleasesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"apiId\":\"weoj\",\"createdDateTime\":\"2020-12-27T19:59:50Z\",\"updatedDateTime\":\"2021-06-07T02:56:02Z\",\"notes\":\"ahiwfryawkc\"},\"id\":\"kapitskshfyftt\",\"name\":\"bjepzwhj\",\"type\":\"nfd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ApiReleaseContract response = manager.apiReleases()
            .define("kkjbjolpy")
            .withExistingApi("qxynqj", "satkyvscb", "ngcrusxhircpgcvs")
            .withApiId("kvuznadvhmlie")
            .withNotes("xbhtpsyioqemqw")
            .withIfMatch("pnbn")
            .create();

        Assertions.assertEquals("weoj", response.apiId());
        Assertions.assertEquals("ahiwfryawkc", response.notes());
    }
}
