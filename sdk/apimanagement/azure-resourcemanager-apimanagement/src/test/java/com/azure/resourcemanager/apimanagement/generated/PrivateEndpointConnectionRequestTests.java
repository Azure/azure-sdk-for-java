// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.PrivateEndpointConnectionRequest;
import com.azure.resourcemanager.apimanagement.models.PrivateEndpointConnectionRequestProperties;
import com.azure.resourcemanager.apimanagement.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.apimanagement.models.PrivateLinkServiceConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionRequest model = BinaryData.fromString(
            "{\"id\":\"cvvuj\",\"properties\":{\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"xrkgjn\",\"actionsRequired\":\"paslavxjfiuofpi\"}}}")
            .toObject(PrivateEndpointConnectionRequest.class);
        Assertions.assertEquals("cvvuj", model.id());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("xrkgjn", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("paslavxjfiuofpi",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionRequest model = new PrivateEndpointConnectionRequest().withId("cvvuj")
            .withProperties(new PrivateEndpointConnectionRequestProperties().withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                    .withDescription("xrkgjn")
                    .withActionsRequired("paslavxjfiuofpi")));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionRequest.class);
        Assertions.assertEquals("cvvuj", model.id());
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("xrkgjn", model.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("paslavxjfiuofpi",
            model.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
