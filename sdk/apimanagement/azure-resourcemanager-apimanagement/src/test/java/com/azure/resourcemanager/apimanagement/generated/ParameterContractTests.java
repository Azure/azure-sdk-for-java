// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.ParameterContract;
import com.azure.resourcemanager.apimanagement.models.ParameterExampleContract;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ParameterContractTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ParameterContract model = BinaryData.fromString(
            "{\"name\":\"ld\",\"description\":\"obfirclnpk\",\"type\":\"iayz\",\"defaultValue\":\"ykhyawfvjlboxqvk\",\"required\":false,\"values\":[\"omdynhdwdigum\"],\"schemaId\":\"raauzzpt\",\"typeName\":\"zysdzh\",\"examples\":{\"ekrsgs\":{\"summary\":\"vaiqyuvvf\",\"description\":\"kphhq\",\"value\":\"datakvylauyavl\",\"externalValue\":\"mncsttijfybvp\"},\"dxzxhi\":{\"summary\":\"dhuzqgnjdgk\",\"description\":\"scliq\",\"value\":\"datavhxnk\",\"externalValue\":\"tkubotppn\"},\"m\":{\"summary\":\"rbbcevq\",\"description\":\"tltdhlfkqojpy\",\"value\":\"datagtrd\",\"externalValue\":\"ifmzzsd\"},\"ud\":{\"summary\":\"nysuxmprafwgckh\",\"description\":\"xvd\",\"value\":\"datafwafqrouda\",\"externalValue\":\"avehhrvkbunzo\"}}}")
            .toObject(ParameterContract.class);
        Assertions.assertEquals("ld", model.name());
        Assertions.assertEquals("obfirclnpk", model.description());
        Assertions.assertEquals("iayz", model.type());
        Assertions.assertEquals("ykhyawfvjlboxqvk", model.defaultValue());
        Assertions.assertFalse(model.required());
        Assertions.assertEquals("omdynhdwdigum", model.values().get(0));
        Assertions.assertEquals("raauzzpt", model.schemaId());
        Assertions.assertEquals("zysdzh", model.typeName());
        Assertions.assertEquals("vaiqyuvvf", model.examples().get("ekrsgs").summary());
        Assertions.assertEquals("kphhq", model.examples().get("ekrsgs").description());
        Assertions.assertEquals("mncsttijfybvp", model.examples().get("ekrsgs").externalValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ParameterContract model = new ParameterContract().withName("ld")
            .withDescription("obfirclnpk")
            .withType("iayz")
            .withDefaultValue("ykhyawfvjlboxqvk")
            .withRequired(false)
            .withValues(Arrays.asList("omdynhdwdigum"))
            .withSchemaId("raauzzpt")
            .withTypeName("zysdzh")
            .withExamples(mapOf("ekrsgs",
                new ParameterExampleContract().withSummary("vaiqyuvvf")
                    .withDescription("kphhq")
                    .withValue("datakvylauyavl")
                    .withExternalValue("mncsttijfybvp"),
                "dxzxhi",
                new ParameterExampleContract().withSummary("dhuzqgnjdgk")
                    .withDescription("scliq")
                    .withValue("datavhxnk")
                    .withExternalValue("tkubotppn"),
                "m",
                new ParameterExampleContract().withSummary("rbbcevq")
                    .withDescription("tltdhlfkqojpy")
                    .withValue("datagtrd")
                    .withExternalValue("ifmzzsd"),
                "ud",
                new ParameterExampleContract().withSummary("nysuxmprafwgckh")
                    .withDescription("xvd")
                    .withValue("datafwafqrouda")
                    .withExternalValue("avehhrvkbunzo")));
        model = BinaryData.fromObject(model).toObject(ParameterContract.class);
        Assertions.assertEquals("ld", model.name());
        Assertions.assertEquals("obfirclnpk", model.description());
        Assertions.assertEquals("iayz", model.type());
        Assertions.assertEquals("ykhyawfvjlboxqvk", model.defaultValue());
        Assertions.assertFalse(model.required());
        Assertions.assertEquals("omdynhdwdigum", model.values().get(0));
        Assertions.assertEquals("raauzzpt", model.schemaId());
        Assertions.assertEquals("zysdzh", model.typeName());
        Assertions.assertEquals("vaiqyuvvf", model.examples().get("ekrsgs").summary());
        Assertions.assertEquals("kphhq", model.examples().get("ekrsgs").description());
        Assertions.assertEquals("mncsttijfybvp", model.examples().get("ekrsgs").externalValue());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
