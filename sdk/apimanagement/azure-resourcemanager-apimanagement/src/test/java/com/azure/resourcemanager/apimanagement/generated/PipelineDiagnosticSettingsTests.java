// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.DataMaskingMode;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PipelineDiagnosticSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PipelineDiagnosticSettings model = BinaryData.fromString(
            "{\"request\":{\"headers\":[\"tco\",\"cujp\"],\"body\":{\"bytes\":1620086774},\"dataMasking\":{\"queryParams\":[{\"value\":\"jkmvbi\",\"mode\":\"Hide\"},{\"value\":\"fqcvovj\",\"mode\":\"Hide\"},{\"value\":\"sj\",\"mode\":\"Mask\"},{\"value\":\"myejiriuxegthor\",\"mode\":\"Hide\"}],\"headers\":[{\"value\":\"pjfe\",\"mode\":\"Mask\"},{\"value\":\"pptcbgqnzmnhii\",\"mode\":\"Hide\"},{\"value\":\"w\",\"mode\":\"Mask\"},{\"value\":\"kbbccc\",\"mode\":\"Mask\"}]}},\"response\":{\"headers\":[\"xnyuffatsgftipwc\",\"byubhiqdxyurnpn\",\"hza\"],\"body\":{\"bytes\":1607484792},\"dataMasking\":{\"queryParams\":[{\"value\":\"gbylbuig\",\"mode\":\"Mask\"}],\"headers\":[{\"value\":\"crkdlbn\",\"mode\":\"Mask\"},{\"value\":\"h\",\"mode\":\"Hide\"},{\"value\":\"zlwxaeaovur\",\"mode\":\"Hide\"},{\"value\":\"d\",\"mode\":\"Mask\"}]}}}")
            .toObject(PipelineDiagnosticSettings.class);
        Assertions.assertEquals("tco", model.request().headers().get(0));
        Assertions.assertEquals(1620086774, model.request().body().bytes());
        Assertions.assertEquals("jkmvbi", model.request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE, model.request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("pjfe", model.request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("xnyuffatsgftipwc", model.response().headers().get(0));
        Assertions.assertEquals(1607484792, model.response().body().bytes());
        Assertions.assertEquals("gbylbuig", model.response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("crkdlbn", model.response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.response().dataMasking().headers().get(0).mode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PipelineDiagnosticSettings model
            = new PipelineDiagnosticSettings()
                .withRequest(
                    new HttpMessageDiagnostic().withHeaders(Arrays.asList("tco", "cujp"))
                        .withBody(new BodyDiagnosticSettings().withBytes(1620086774))
                        .withDataMasking(
                            new DataMasking()
                                .withQueryParams(Arrays.asList(
                                    new DataMaskingEntity().withValue("jkmvbi").withMode(DataMaskingMode.HIDE),
                                    new DataMaskingEntity().withValue("fqcvovj").withMode(DataMaskingMode.HIDE),
                                    new DataMaskingEntity().withValue("sj").withMode(DataMaskingMode.MASK),
                                    new DataMaskingEntity().withValue("myejiriuxegthor")
                                        .withMode(DataMaskingMode.HIDE)))
                                .withHeaders(Arrays.asList(
                                    new DataMaskingEntity().withValue("pjfe").withMode(DataMaskingMode.MASK),
                                    new DataMaskingEntity().withValue("pptcbgqnzmnhii").withMode(DataMaskingMode.HIDE),
                                    new DataMaskingEntity().withValue("w").withMode(DataMaskingMode.MASK),
                                    new DataMaskingEntity().withValue("kbbccc").withMode(DataMaskingMode.MASK)))))
                .withResponse(new HttpMessageDiagnostic()
                    .withHeaders(Arrays.asList("xnyuffatsgftipwc", "byubhiqdxyurnpn", "hza"))
                    .withBody(new BodyDiagnosticSettings().withBytes(1607484792))
                    .withDataMasking(new DataMasking()
                        .withQueryParams(
                            Arrays.asList(new DataMaskingEntity().withValue("gbylbuig").withMode(DataMaskingMode.MASK)))
                        .withHeaders(
                            Arrays.asList(new DataMaskingEntity().withValue("crkdlbn").withMode(DataMaskingMode.MASK),
                                new DataMaskingEntity().withValue("h").withMode(DataMaskingMode.HIDE),
                                new DataMaskingEntity().withValue("zlwxaeaovur").withMode(DataMaskingMode.HIDE),
                                new DataMaskingEntity().withValue("d").withMode(DataMaskingMode.MASK)))));
        model = BinaryData.fromObject(model).toObject(PipelineDiagnosticSettings.class);
        Assertions.assertEquals("tco", model.request().headers().get(0));
        Assertions.assertEquals(1620086774, model.request().body().bytes());
        Assertions.assertEquals("jkmvbi", model.request().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.HIDE, model.request().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("pjfe", model.request().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.request().dataMasking().headers().get(0).mode());
        Assertions.assertEquals("xnyuffatsgftipwc", model.response().headers().get(0));
        Assertions.assertEquals(1607484792, model.response().body().bytes());
        Assertions.assertEquals("gbylbuig", model.response().dataMasking().queryParams().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.response().dataMasking().queryParams().get(0).mode());
        Assertions.assertEquals("crkdlbn", model.response().dataMasking().headers().get(0).value());
        Assertions.assertEquals(DataMaskingMode.MASK, model.response().dataMasking().headers().get(0).mode());
    }
}
