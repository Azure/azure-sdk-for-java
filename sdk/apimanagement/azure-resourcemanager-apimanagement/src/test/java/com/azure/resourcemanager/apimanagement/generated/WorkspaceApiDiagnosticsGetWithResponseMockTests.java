// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceApiDiagnosticsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"sbmebfgbzn\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":78.2822881049729},\"frontend\":{\"request\":{\"headers\":[\"yftvyzuyqzjfvbn\",\"yjvzlscyzvvsxmy\"],\"body\":{\"bytes\":1429490152},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"az\",\"bmm\",\"a\"],\"body\":{\"bytes\":1783579020},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{}]}}},\"backend\":{\"request\":{\"headers\":[\"heggtdv\"],\"body\":{\"bytes\":2048995412},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"rsolhhvmfoej\",\"giqhj\",\"el\",\"udifierxxorsdvu\"],\"body\":{\"bytes\":301600553},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{},{}]}}},\"logClientIp\":false,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"error\",\"operationNameFormat\":\"Url\",\"metrics\":false},\"id\":\"rsqcivmirybwga\",\"name\":\"cv\",\"type\":\"kynemazgtbyn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DiagnosticContract response = manager.workspaceApiDiagnostics()
            .getWithResponse("pzrycchqz", "fge", "dzgszjhekbmd", "ch", "ojsrhgpitye", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("sbmebfgbzn", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(78.2822881049729D, response.sampling().percentage());
        Assertions.assertEquals("yftvyzuyqzjfvbn", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1429490152, response.frontend().request().body().bytes());
        Assertions.assertEquals("az", response.frontend().response().headers().get(0));
        Assertions.assertEquals(1783579020, response.frontend().response().body().bytes());
        Assertions.assertEquals("heggtdv", response.backend().request().headers().get(0));
        Assertions.assertEquals(2048995412, response.backend().request().body().bytes());
        Assertions.assertEquals("rsolhhvmfoej", response.backend().response().headers().get(0));
        Assertions.assertEquals(301600553, response.backend().response().body().bytes());
        Assertions.assertEquals(false, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, response.operationNameFormat());
        Assertions.assertEquals(false, response.metrics());
    }
}
