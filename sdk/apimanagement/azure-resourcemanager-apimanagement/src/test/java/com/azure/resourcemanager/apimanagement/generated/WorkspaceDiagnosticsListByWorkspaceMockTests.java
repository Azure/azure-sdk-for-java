// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceDiagnosticsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"atkliopgw\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":75.57769502071773},\"frontend\":{\"request\":{\"headers\":[\"xkwobbwnsdpyirtr\",\"zkpjeegzhhfn\",\"qclepcklowuthfwp\",\"nmllbljehwhxxuof\"],\"body\":{\"bytes\":905160620},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"xhtqws\",\"dxaovubfllfkeu\",\"zii\",\"uabpvdwhvnjc\"],\"body\":{\"bytes\":997163178},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"inkgbkz\",\"bomfhd\"],\"body\":{\"bytes\":1650522965},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"wedetawljat\",\"f\",\"dqspdutt\",\"jtszqexcqcwbxx\"],\"body\":{\"bytes\":1614555114},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"W3C\",\"verbosity\":\"verbose\",\"operationNameFormat\":\"Name\",\"metrics\":false},\"id\":\"hlfvmwu\",\"name\":\"arswsvtzotmwxq\",\"type\":\"fbdanfexlawkeq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<DiagnosticContract> response = manager.workspaceDiagnostics()
            .listByWorkspace("byul", "oepssoqdibygrqci", "iwkxikxiqxlx", "ksyypftrdic", 1062565177, 2102339578,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.iterator().next().alwaysLog());
        Assertions.assertEquals("atkliopgw", response.iterator().next().loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.iterator().next().sampling().samplingType());
        Assertions.assertEquals(75.57769502071773D, response.iterator().next().sampling().percentage());
        Assertions.assertEquals("xkwobbwnsdpyirtr", response.iterator().next().frontend().request().headers().get(0));
        Assertions.assertEquals(905160620, response.iterator().next().frontend().request().body().bytes());
        Assertions.assertEquals("xhtqws", response.iterator().next().frontend().response().headers().get(0));
        Assertions.assertEquals(997163178, response.iterator().next().frontend().response().body().bytes());
        Assertions.assertEquals("inkgbkz", response.iterator().next().backend().request().headers().get(0));
        Assertions.assertEquals(1650522965, response.iterator().next().backend().request().body().bytes());
        Assertions.assertEquals("wedetawljat", response.iterator().next().backend().response().headers().get(0));
        Assertions.assertEquals(1614555114, response.iterator().next().backend().response().body().bytes());
        Assertions.assertEquals(true, response.iterator().next().logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, response.iterator().next().httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, response.iterator().next().verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.iterator().next().operationNameFormat());
        Assertions.assertEquals(false, response.iterator().next().metrics());
    }
}
