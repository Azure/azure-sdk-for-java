// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.IssueContract;
import com.azure.resourcemanager.apimanagement.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiIssuesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"title\":\"yhgtrttcuayiq\",\"description\":\"lnkmmxzifbqgqex\",\"userId\":\"wqzr\",\"createdDate\":\"2021-10-28T17:36:48Z\",\"state\":\"closed\",\"apiId\":\"kvf\"},\"id\":\"gkuobpwain\",\"name\":\"gobot\",\"type\":\"xiewhpnyjtuq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        IssueContract response = manager.apiIssues()
            .define("klfqfx")
            .withExistingApi("fytkhhkemrv", "xeoj", "dyulglhelwr")
            .withTitle("xgogypbztgaexjns")
            .withDescription("vctvuzimbwttm")
            .withUserId("lvry")
            .withCreatedDate(OffsetDateTime.parse("2021-03-13T18:26:04Z"))
            .withState(State.RESOLVED)
            .withApiId("ukfaj")
            .withIfMatch("idxcorjv")
            .create();

        Assertions.assertEquals("yhgtrttcuayiq", response.title());
        Assertions.assertEquals("lnkmmxzifbqgqex", response.description());
        Assertions.assertEquals("wqzr", response.userId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-28T17:36:48Z"), response.createdDate());
        Assertions.assertEquals(State.CLOSED, response.state());
        Assertions.assertEquals("kvf", response.apiId());
    }
}
