// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.IssueContract;
import com.azure.resourcemanager.apimanagement.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiIssuesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"title\":\"pmoh\",\"description\":\"rtlikff\",\"userId\":\"dzt\",\"createdDate\":\"2021-09-28T17:32:38Z\",\"state\":\"resolved\",\"apiId\":\"ynzfwvzdteqjmyqx\"},\"id\":\"hgkaxnyprijyoxx\",\"name\":\"xbsowrrlcck\",\"type\":\"yfp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IssueContract response = manager.apiIssues()
            .define("wwlojkbgnf")
            .withExistingApi("xok", "xamqecjrzvlcivqx", "emklphx")
            .withTitle("zj")
            .withDescription("fsunh")
            .withUserId("evlahxczywyw")
            .withCreatedDate(OffsetDateTime.parse("2021-02-12T19:21:32Z"))
            .withState(State.CLOSED)
            .withApiId("rewcnnaaxqjfda")
            .withIfMatch("yzqbye")
            .create();

        Assertions.assertEquals("pmoh", response.title());
        Assertions.assertEquals("rtlikff", response.description());
        Assertions.assertEquals("dzt", response.userId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-28T17:32:38Z"), response.createdDate());
        Assertions.assertEquals(State.RESOLVED, response.state());
        Assertions.assertEquals("ynzfwvzdteqjmyqx", response.apiId());
    }
}
