// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.DiagnosticContractInner;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DiagnosticCollection;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticCollection model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"gbrt\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":93.37595227963747},\"frontend\":{\"request\":{\"headers\":[\"ajlfnthiqfyu\",\"t\"],\"body\":{},\"dataMasking\":{}},\"response\":{\"headers\":[\"vnwsw\"],\"body\":{},\"dataMasking\":{}}},\"backend\":{\"request\":{\"headers\":[\"wwgzwxjlmecvog\",\"gzyvnee\"],\"body\":{},\"dataMasking\":{}},\"response\":{\"headers\":[\"tmoqqtlffhzb\",\"rkjjjavfqnvhnq\",\"ewdogiyetesy\",\"vidbztjhqtfb\"],\"body\":{},\"dataMasking\":{}}},\"logClientIp\":false,\"httpCorrelationProtocol\":\"None\",\"verbosity\":\"verbose\",\"operationNameFormat\":\"Url\",\"metrics\":true},\"id\":\"hpsprkzyaupiac\",\"name\":\"xnafbw\",\"type\":\"ro\"}],\"count\":2370793182601058410,\"nextLink\":\"vmaonurjt\"}")
                .toObject(DiagnosticCollection.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.value().get(0).alwaysLog());
        Assertions.assertEquals("gbrt", model.value().get(0).loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.value().get(0).sampling().samplingType());
        Assertions.assertEquals(93.37595227963747D, model.value().get(0).sampling().percentage());
        Assertions.assertEquals("ajlfnthiqfyu", model.value().get(0).frontend().request().headers().get(0));
        Assertions.assertEquals("vnwsw", model.value().get(0).frontend().response().headers().get(0));
        Assertions.assertEquals("wwgzwxjlmecvog", model.value().get(0).backend().request().headers().get(0));
        Assertions.assertEquals("tmoqqtlffhzb", model.value().get(0).backend().response().headers().get(0));
        Assertions.assertEquals(false, model.value().get(0).logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.NONE, model.value().get(0).httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, model.value().get(0).verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.value().get(0).operationNameFormat());
        Assertions.assertEquals(true, model.value().get(0).metrics());
        Assertions.assertEquals(2370793182601058410L, model.count());
        Assertions.assertEquals("vmaonurjt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticCollection model =
            new DiagnosticCollection()
                .withValue(
                    Arrays
                        .asList(
                            new DiagnosticContractInner()
                                .withAlwaysLog(AlwaysLog.ALL_ERRORS)
                                .withLoggerId("gbrt")
                                .withSampling(
                                    new SamplingSettings()
                                        .withSamplingType(SamplingType.FIXED)
                                        .withPercentage(93.37595227963747D))
                                .withFrontend(
                                    new PipelineDiagnosticSettings()
                                        .withRequest(
                                            new HttpMessageDiagnostic()
                                                .withHeaders(Arrays.asList("ajlfnthiqfyu", "t"))
                                                .withBody(new BodyDiagnosticSettings())
                                                .withDataMasking(new DataMasking()))
                                        .withResponse(
                                            new HttpMessageDiagnostic()
                                                .withHeaders(Arrays.asList("vnwsw"))
                                                .withBody(new BodyDiagnosticSettings())
                                                .withDataMasking(new DataMasking())))
                                .withBackend(
                                    new PipelineDiagnosticSettings()
                                        .withRequest(
                                            new HttpMessageDiagnostic()
                                                .withHeaders(Arrays.asList("wwgzwxjlmecvog", "gzyvnee"))
                                                .withBody(new BodyDiagnosticSettings())
                                                .withDataMasking(new DataMasking()))
                                        .withResponse(
                                            new HttpMessageDiagnostic()
                                                .withHeaders(
                                                    Arrays
                                                        .asList(
                                                            "tmoqqtlffhzb",
                                                            "rkjjjavfqnvhnq",
                                                            "ewdogiyetesy",
                                                            "vidbztjhqtfb"))
                                                .withBody(new BodyDiagnosticSettings())
                                                .withDataMasking(new DataMasking())))
                                .withLogClientIp(false)
                                .withHttpCorrelationProtocol(HttpCorrelationProtocol.NONE)
                                .withVerbosity(Verbosity.VERBOSE)
                                .withOperationNameFormat(OperationNameFormat.URL)
                                .withMetrics(true)))
                .withCount(2370793182601058410L)
                .withNextLink("vmaonurjt");
        model = BinaryData.fromObject(model).toObject(DiagnosticCollection.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.value().get(0).alwaysLog());
        Assertions.assertEquals("gbrt", model.value().get(0).loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.value().get(0).sampling().samplingType());
        Assertions.assertEquals(93.37595227963747D, model.value().get(0).sampling().percentage());
        Assertions.assertEquals("ajlfnthiqfyu", model.value().get(0).frontend().request().headers().get(0));
        Assertions.assertEquals("vnwsw", model.value().get(0).frontend().response().headers().get(0));
        Assertions.assertEquals("wwgzwxjlmecvog", model.value().get(0).backend().request().headers().get(0));
        Assertions.assertEquals("tmoqqtlffhzb", model.value().get(0).backend().response().headers().get(0));
        Assertions.assertEquals(false, model.value().get(0).logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.NONE, model.value().get(0).httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, model.value().get(0).verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.value().get(0).operationNameFormat());
        Assertions.assertEquals(true, model.value().get(0).metrics());
        Assertions.assertEquals(2370793182601058410L, model.count());
        Assertions.assertEquals("vmaonurjt", model.nextLink());
    }
}
