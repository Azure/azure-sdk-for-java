// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.DiagnosticUpdateContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticUpdateContractTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticUpdateContract model = BinaryData.fromString(
            "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"hsujk\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":96.7708334103301},\"frontend\":{\"request\":{\"headers\":[\"ikxkca\"],\"body\":{\"bytes\":346710478},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"cq\",\"azmzlpcx\"],\"body\":{\"bytes\":2076594336},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{}]}}},\"backend\":{\"request\":{\"headers\":[\"vwjdthkvpy\"],\"body\":{\"bytes\":1608803069},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"pdkjrzfwkyluobdx\",\"hqdcclcvqsr\",\"p\"],\"body\":{\"bytes\":1232332475},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{}]}}},\"logClientIp\":false,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"error\",\"operationNameFormat\":\"Name\",\"metrics\":true},\"id\":\"piywqnp\",\"name\":\"ydrf\",\"type\":\"gcnyxbyxmkhm\"}")
            .toObject(DiagnosticUpdateContract.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("hsujk", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(96.7708334103301D, model.sampling().percentage());
        Assertions.assertEquals("ikxkca", model.frontend().request().headers().get(0));
        Assertions.assertEquals(346710478, model.frontend().request().body().bytes());
        Assertions.assertEquals("cq", model.frontend().response().headers().get(0));
        Assertions.assertEquals(2076594336, model.frontend().response().body().bytes());
        Assertions.assertEquals("vwjdthkvpy", model.backend().request().headers().get(0));
        Assertions.assertEquals(1608803069, model.backend().request().body().bytes());
        Assertions.assertEquals("pdkjrzfwkyluobdx", model.backend().response().headers().get(0));
        Assertions.assertEquals(1232332475, model.backend().response().body().bytes());
        Assertions.assertEquals(false, model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, model.operationNameFormat());
        Assertions.assertEquals(true, model.metrics());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticUpdateContract model
            = new DiagnosticUpdateContract().withAlwaysLog(AlwaysLog.ALL_ERRORS)
                .withLoggerId("hsujk")
                .withSampling(
                    new SamplingSettings().withSamplingType(SamplingType.FIXED).withPercentage(96.7708334103301D))
                .withFrontend(
                    new PipelineDiagnosticSettings()
                        .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("ikxkca"))
                            .withBody(new BodyDiagnosticSettings().withBytes(346710478))
                            .withDataMasking(new DataMasking().withQueryParams(Arrays.asList(new DataMaskingEntity(),
                                new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                        .withResponse(new HttpMessageDiagnostic().withHeaders(Arrays.asList("cq", "azmzlpcx"))
                            .withBody(new BodyDiagnosticSettings().withBytes(2076594336))
                            .withDataMasking(new DataMasking().withQueryParams(Arrays.asList(new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity())))))
                .withBackend(new PipelineDiagnosticSettings()
                    .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("vwjdthkvpy"))
                        .withBody(new BodyDiagnosticSettings().withBytes(1608803069))
                        .withDataMasking(new DataMasking()
                            .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))
                            .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                    .withResponse(
                        new HttpMessageDiagnostic().withHeaders(Arrays.asList("pdkjrzfwkyluobdx", "hqdcclcvqsr", "p"))
                            .withBody(new BodyDiagnosticSettings().withBytes(1232332475))
                            .withDataMasking(new DataMasking()
                                .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity())))))
                .withLogClientIp(false)
                .withHttpCorrelationProtocol(HttpCorrelationProtocol.LEGACY)
                .withVerbosity(Verbosity.ERROR)
                .withOperationNameFormat(OperationNameFormat.NAME)
                .withMetrics(true);
        model = BinaryData.fromObject(model).toObject(DiagnosticUpdateContract.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("hsujk", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(96.7708334103301D, model.sampling().percentage());
        Assertions.assertEquals("ikxkca", model.frontend().request().headers().get(0));
        Assertions.assertEquals(346710478, model.frontend().request().body().bytes());
        Assertions.assertEquals("cq", model.frontend().response().headers().get(0));
        Assertions.assertEquals(2076594336, model.frontend().response().body().bytes());
        Assertions.assertEquals("vwjdthkvpy", model.backend().request().headers().get(0));
        Assertions.assertEquals(1608803069, model.backend().request().body().bytes());
        Assertions.assertEquals("pdkjrzfwkyluobdx", model.backend().response().headers().get(0));
        Assertions.assertEquals(1232332475, model.backend().response().body().bytes());
        Assertions.assertEquals(false, model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, model.operationNameFormat());
        Assertions.assertEquals(true, model.metrics());
    }
}
