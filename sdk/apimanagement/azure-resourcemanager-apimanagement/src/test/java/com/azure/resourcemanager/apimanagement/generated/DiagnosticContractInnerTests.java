// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.DiagnosticContractInner;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticContractInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticContractInner model = BinaryData.fromString(
            "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"o\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":10.142581597790501},\"frontend\":{\"request\":{\"headers\":[\"wfd\"],\"body\":{\"bytes\":1421637251},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"yk\",\"tjknsxfwushcdp\",\"upnqrmgjfb\"],\"body\":{\"bytes\":1871925709},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"fa\"],\"body\":{\"bytes\":1495529407},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"mmfz\",\"bfw\"],\"body\":{\"bytes\":1740416627},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{}]}}},\"logClientIp\":false,\"httpCorrelationProtocol\":\"W3C\",\"verbosity\":\"error\",\"operationNameFormat\":\"Url\",\"metrics\":false},\"id\":\"zej\",\"name\":\"w\",\"type\":\"iyoypsuhbrnnhj\"}")
            .toObject(DiagnosticContractInner.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("o", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(10.142581597790501D, model.sampling().percentage());
        Assertions.assertEquals("wfd", model.frontend().request().headers().get(0));
        Assertions.assertEquals(1421637251, model.frontend().request().body().bytes());
        Assertions.assertEquals("yk", model.frontend().response().headers().get(0));
        Assertions.assertEquals(1871925709, model.frontend().response().body().bytes());
        Assertions.assertEquals("fa", model.backend().request().headers().get(0));
        Assertions.assertEquals(1495529407, model.backend().request().body().bytes());
        Assertions.assertEquals("mmfz", model.backend().response().headers().get(0));
        Assertions.assertEquals(1740416627, model.backend().response().body().bytes());
        Assertions.assertFalse(model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.operationNameFormat());
        Assertions.assertFalse(model.metrics());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticContractInner model
            = new DiagnosticContractInner().withAlwaysLog(AlwaysLog.ALL_ERRORS)
                .withLoggerId("o")
                .withSampling(
                    new SamplingSettings().withSamplingType(SamplingType.FIXED).withPercentage(10.142581597790501D))
                .withFrontend(new PipelineDiagnosticSettings()
                    .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("wfd"))
                        .withBody(new BodyDiagnosticSettings().withBytes(1421637251))
                        .withDataMasking(new DataMasking()
                            .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                new DataMaskingEntity()))
                            .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))))
                    .withResponse(
                        new HttpMessageDiagnostic().withHeaders(Arrays.asList("yk", "tjknsxfwushcdp", "upnqrmgjfb"))
                            .withBody(new BodyDiagnosticSettings().withBytes(1871925709))
                            .withDataMasking(new DataMasking()
                                .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                    new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity())))))
                .withBackend(
                    new PipelineDiagnosticSettings()
                        .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("fa"))
                            .withBody(new BodyDiagnosticSettings().withBytes(1495529407))
                            .withDataMasking(new DataMasking().withQueryParams(Arrays.asList(new DataMaskingEntity(),
                                new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                        .withResponse(new HttpMessageDiagnostic().withHeaders(Arrays.asList("mmfz", "bfw"))
                            .withBody(new BodyDiagnosticSettings().withBytes(1740416627))
                            .withDataMasking(new DataMasking()
                                .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                    new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity())))))
                .withLogClientIp(false)
                .withHttpCorrelationProtocol(HttpCorrelationProtocol.W3C)
                .withVerbosity(Verbosity.ERROR)
                .withOperationNameFormat(OperationNameFormat.URL)
                .withMetrics(false);
        model = BinaryData.fromObject(model).toObject(DiagnosticContractInner.class);
        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, model.alwaysLog());
        Assertions.assertEquals("o", model.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, model.sampling().samplingType());
        Assertions.assertEquals(10.142581597790501D, model.sampling().percentage());
        Assertions.assertEquals("wfd", model.frontend().request().headers().get(0));
        Assertions.assertEquals(1421637251, model.frontend().request().body().bytes());
        Assertions.assertEquals("yk", model.frontend().response().headers().get(0));
        Assertions.assertEquals(1871925709, model.frontend().response().body().bytes());
        Assertions.assertEquals("fa", model.backend().request().headers().get(0));
        Assertions.assertEquals(1495529407, model.backend().request().body().bytes());
        Assertions.assertEquals("mmfz", model.backend().response().headers().get(0));
        Assertions.assertEquals(1740416627, model.backend().response().body().bytes());
        Assertions.assertFalse(model.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, model.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, model.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, model.operationNameFormat());
        Assertions.assertFalse(model.metrics());
    }
}
