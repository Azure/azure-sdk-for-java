// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.GatewayHostnameConfigurationContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatewayHostnameConfigurationsListByServiceMockTests {
    @Test
    public void testListByService() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"hostname\":\"gygfohrm\",\"certificateId\":\"hlclpkr\",\"negotiateClientCertificate\":true,\"tls10Enabled\":false,\"tls11Enabled\":true,\"http2Enabled\":false},\"id\":\"utivrfnztxtmrm\",\"name\":\"ftj\",\"type\":\"ii\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<GatewayHostnameConfigurationContract> response = manager.gatewayHostnameConfigurations()
            .listByService("svaxmksaxyeedvp", "odktdut", "dvvgkmorbpcje", "fyvuztnsv", 1757561833, 1112838128,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gygfohrm", response.iterator().next().hostname());
        Assertions.assertEquals("hlclpkr", response.iterator().next().certificateId());
        Assertions.assertEquals(true, response.iterator().next().negotiateClientCertificate());
        Assertions.assertEquals(false, response.iterator().next().tls10Enabled());
        Assertions.assertEquals(true, response.iterator().next().tls11Enabled());
        Assertions.assertEquals(false, response.iterator().next().http2Enabled());
    }
}
