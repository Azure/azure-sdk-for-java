// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ProductContract;
import com.azure.resourcemanager.apimanagement.models.ProductState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProductsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"qjcphofyoqfvm\",\"description\":\"plxmuzltnne\",\"terms\":\"ghgtejtyxlsycck\",\"subscriptionRequired\":true,\"approvalRequired\":true,\"subscriptionsLimit\":1282487413,\"state\":\"notPublished\"},\"id\":\"ocjuuxqnk\",\"name\":\"c\",\"type\":\"mrwc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ProductContract response = manager.products()
            .define("eohoygowdzizzu")
            .withExistingService("sqiwlm", "gjto")
            .withDisplayName("orcppqvovsir")
            .withDescription("sepiplpexhh")
            .withTerms("atlepzbiroxamn")
            .withSubscriptionRequired(false)
            .withApprovalRequired(false)
            .withSubscriptionsLimit(1510812606)
            .withState(ProductState.PUBLISHED)
            .withIfMatch("xdmppib")
            .create();

        Assertions.assertEquals("qjcphofyoqfvm", response.displayName());
        Assertions.assertEquals("plxmuzltnne", response.description());
        Assertions.assertEquals("ghgtejtyxlsycck", response.terms());
        Assertions.assertTrue(response.subscriptionRequired());
        Assertions.assertTrue(response.approvalRequired());
        Assertions.assertEquals(1282487413, response.subscriptionsLimit());
        Assertions.assertEquals(ProductState.NOT_PUBLISHED, response.state());
    }
}
