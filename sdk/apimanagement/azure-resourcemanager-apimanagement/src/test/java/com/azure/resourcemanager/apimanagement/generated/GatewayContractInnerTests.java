// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.GatewayContractInner;
import com.azure.resourcemanager.apimanagement.models.ResourceLocationDataContract;
import org.junit.jupiter.api.Assertions;

public final class GatewayContractInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GatewayContractInner model = BinaryData.fromString(
            "{\"properties\":{\"locationData\":{\"name\":\"ntfxxcrqmipfjwfo\",\"city\":\"izmshxxba\",\"district\":\"abuln\",\"countryOrRegion\":\"skjto\"},\"description\":\"dzjs\"},\"id\":\"znvhxqqmq\",\"name\":\"paydhfn\",\"type\":\"ocxm\"}")
            .toObject(GatewayContractInner.class);
        Assertions.assertEquals("ntfxxcrqmipfjwfo", model.locationData().name());
        Assertions.assertEquals("izmshxxba", model.locationData().city());
        Assertions.assertEquals("abuln", model.locationData().district());
        Assertions.assertEquals("skjto", model.locationData().countryOrRegion());
        Assertions.assertEquals("dzjs", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GatewayContractInner model = new GatewayContractInner()
            .withLocationData(new ResourceLocationDataContract().withName("ntfxxcrqmipfjwfo")
                .withCity("izmshxxba")
                .withDistrict("abuln")
                .withCountryOrRegion("skjto"))
            .withDescription("dzjs");
        model = BinaryData.fromObject(model).toObject(GatewayContractInner.class);
        Assertions.assertEquals("ntfxxcrqmipfjwfo", model.locationData().name());
        Assertions.assertEquals("izmshxxba", model.locationData().city());
        Assertions.assertEquals("abuln", model.locationData().district());
        Assertions.assertEquals("skjto", model.locationData().countryOrRegion());
        Assertions.assertEquals("dzjs", model.description());
    }
}
