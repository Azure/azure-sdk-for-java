// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.GatewayHostnameConfigurationContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatewayHostnameConfigurationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"hostname\":\"hkmqf\",\"certificateId\":\"ksksmqmwo\",\"negotiateClientCertificate\":true,\"tls10Enabled\":true,\"tls11Enabled\":true,\"http2Enabled\":false},\"id\":\"u\",\"name\":\"jyxntmgt\",\"type\":\"uqaemoyg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GatewayHostnameConfigurationContract response = manager.gatewayHostnameConfigurations()
            .define("ngjoasnz")
            .withExistingGateway("jzaqbodswazburs", "u", "fudbkvu")
            .withHostname("owqsnix")
            .withCertificateId("dqzu")
            .withNegotiateClientCertificate(false)
            .withTls10Enabled(false)
            .withTls11Enabled(true)
            .withHttp2Enabled(false)
            .withIfMatch("swbrnbo")
            .create();

        Assertions.assertEquals("hkmqf", response.hostname());
        Assertions.assertEquals("ksksmqmwo", response.certificateId());
        Assertions.assertTrue(response.negotiateClientCertificate());
        Assertions.assertTrue(response.tls10Enabled());
        Assertions.assertTrue(response.tls11Enabled());
        Assertions.assertFalse(response.http2Enabled());
    }
}
