// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceDiagnosticsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"alcnk\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":57.793754428205204},\"frontend\":{\"request\":{\"headers\":[\"taljiqlxjjltuym\",\"aaqhscaan\",\"dlvccuvcvaf\",\"sbyjgdjvyclasdp\"],\"body\":{\"bytes\":1544063794},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"npvqczpkooa\",\"lthowcsuebt\"],\"body\":{\"bytes\":1906330430},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"xa\"],\"body\":{\"bytes\":931244432},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"lbskinmxan\",\"guadh\",\"p\"],\"body\":{\"bytes\":1290897603},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"W3C\",\"verbosity\":\"information\",\"operationNameFormat\":\"Name\",\"metrics\":true},\"id\":\"iticsh\",\"name\":\"qxgjz\",\"type\":\"lhopyqxip\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DiagnosticContract response = manager.workspaceDiagnostics()
            .getWithResponse("xjhedwhmmwbvrpa", "biigxxrez", "uzkwigifinoy", "dtlpshxjhan",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("alcnk", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(57.793754428205204D, response.sampling().percentage());
        Assertions.assertEquals("taljiqlxjjltuym", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1544063794, response.frontend().request().body().bytes());
        Assertions.assertEquals("npvqczpkooa", response.frontend().response().headers().get(0));
        Assertions.assertEquals(1906330430, response.frontend().response().body().bytes());
        Assertions.assertEquals("xa", response.backend().request().headers().get(0));
        Assertions.assertEquals(931244432, response.backend().request().body().bytes());
        Assertions.assertEquals("lbskinmxan", response.backend().response().headers().get(0));
        Assertions.assertEquals(1290897603, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.INFORMATION, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.operationNameFormat());
        Assertions.assertEquals(true, response.metrics());
    }
}
