// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"dvxlfhlzzga\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":71.30944125723592},\"frontend\":{\"request\":{\"headers\":[\"mzquuzywkgouxnro\",\"ht\"],\"body\":{\"bytes\":1070026736},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"scifrzcwuejmxlfz\"],\"body\":{\"bytes\":863107647},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"unjovlxqtvmvz\",\"niqwxmrgmnkg\",\"lhzkrazkioi\"],\"body\":{\"bytes\":1867157869},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"gheqzhehgvmmnoyz\",\"nbnyplu\",\"ypkfcdfuxi\",\"zvxotnoilqcdvhy\"],\"body\":{\"bytes\":266160213},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"verbose\",\"operationNameFormat\":\"Name\",\"metrics\":false},\"id\":\"akvokyaxxr\",\"name\":\"tqlreqbrcmmd\",\"type\":\"shzumxuczn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DiagnosticContract response = manager.diagnostics()
            .getWithResponse("tzgwjeky", "irvcpol", "vgppp", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("dvxlfhlzzga", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(71.30944125723592D, response.sampling().percentage());
        Assertions.assertEquals("mzquuzywkgouxnro", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1070026736, response.frontend().request().body().bytes());
        Assertions.assertEquals("scifrzcwuejmxlfz", response.frontend().response().headers().get(0));
        Assertions.assertEquals(863107647, response.frontend().response().body().bytes());
        Assertions.assertEquals("unjovlxqtvmvz", response.backend().request().headers().get(0));
        Assertions.assertEquals(1867157869, response.backend().request().body().bytes());
        Assertions.assertEquals("gheqzhehgvmmnoyz", response.backend().response().headers().get(0));
        Assertions.assertEquals(266160213, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.operationNameFormat());
        Assertions.assertEquals(false, response.metrics());
    }
}
