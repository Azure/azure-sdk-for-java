// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.fluent.models.PortalSignupSettingsInner;
import com.azure.resourcemanager.apimanagement.models.PortalSignupSettings;
import com.azure.resourcemanager.apimanagement.models.TermsOfServiceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SignUpSettingsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"enabled\":true,\"termsOfService\":{\"text\":\"iyikqlyoorm\",\"enabled\":true,\"consentRequired\":false}},\"id\":\"qijykck\",\"name\":\"hxuznbcpiadj\",\"type\":\"lvxsulcdwbib\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PortalSignupSettings response = manager.signUpSettings()
            .createOrUpdateWithResponse("yuhdqhqgrksypoo", "fxzobovsvhbtdgxg",
                new PortalSignupSettingsInner().withEnabled(false)
                    .withTermsOfService(new TermsOfServiceProperties().withText("ubvfxisw")
                        .withEnabled(false)
                        .withConsentRequired(false)),
                "i", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertTrue(response.enabled());
        Assertions.assertEquals("iyikqlyoorm", response.termsOfService().text());
        Assertions.assertTrue(response.termsOfService().enabled());
        Assertions.assertFalse(response.termsOfService().consentRequired());
    }
}
