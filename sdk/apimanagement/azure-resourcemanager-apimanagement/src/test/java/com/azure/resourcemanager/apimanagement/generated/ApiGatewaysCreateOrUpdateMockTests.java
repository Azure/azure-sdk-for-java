// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ApiGatewaySkuType;
import com.azure.resourcemanager.apimanagement.models.ApiManagementGatewayResource;
import com.azure.resourcemanager.apimanagement.models.ApiManagementGatewaySkuProperties;
import com.azure.resourcemanager.apimanagement.models.BackendConfiguration;
import com.azure.resourcemanager.apimanagement.models.BackendSubnetConfiguration;
import com.azure.resourcemanager.apimanagement.models.FrontendConfiguration;
import com.azure.resourcemanager.apimanagement.models.GatewayConfigurationApi;
import com.azure.resourcemanager.apimanagement.models.VirtualNetworkType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiGatewaysCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"targetProvisioningState\":\"xxrwqfmdqecvtamq\",\"createdAtUtc\":\"2021-10-27T14:14:45Z\",\"frontend\":{\"defaultHostname\":\"bfewwpsibxo\"},\"backend\":{\"subnet\":{\"id\":\"qjrkbln\"}},\"configurationApi\":{\"hostname\":\"lwgycvtqnzjcyqq\"},\"virtualNetworkType\":\"Internal\"},\"sku\":{\"name\":\"WorkspaceGatewayStandard\",\"capacity\":1065603399},\"location\":\"wnalbadpis\",\"etag\":\"leajvmvvlooub\",\"tags\":{\"skgocjomlupfaz\":\"ipjeo\",\"dhuslgdwz\":\"sj\",\"grcavqc\":\"gdqyxajc\",\"ixepbntqqwwg\":\"yzoqzkmqcwwsjnk\"},\"id\":\"gsqxilefej\",\"name\":\"ewrznequqynttw\",\"type\":\"nhajksbsyogjmq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApiManagementGatewayResource response = manager.apiGateways()
            .define("qklpmvzp")
            .withRegion("gbbfjmdgjv")
            .withExistingResourceGroup("dfpvdaahlfr")
            .withSku(
                new ApiManagementGatewaySkuProperties().withName(ApiGatewaySkuType.STANDARD).withCapacity(878035592))
            .withTags(mapOf("lsn", "phqeofy", "mcqixuanccqvjf", "owm", "xpjhcfaaradci", "gfqpmq"))
            .withFrontend(new FrontendConfiguration())
            .withBackend(new BackendConfiguration().withSubnet(new BackendSubnetConfiguration().withId("owrer")))
            .withConfigurationApi(new GatewayConfigurationApi())
            .withVirtualNetworkType(VirtualNetworkType.NONE)
            .create();

        Assertions.assertEquals("ipjeo", response.tags().get("skgocjomlupfaz"));
        Assertions.assertEquals(ApiGatewaySkuType.WORKSPACE_GATEWAY_STANDARD, response.sku().name());
        Assertions.assertEquals(1065603399, response.sku().capacity());
        Assertions.assertEquals("wnalbadpis", response.location());
        Assertions.assertEquals("qjrkbln", response.backend().subnet().id());
        Assertions.assertEquals(VirtualNetworkType.INTERNAL, response.virtualNetworkType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
