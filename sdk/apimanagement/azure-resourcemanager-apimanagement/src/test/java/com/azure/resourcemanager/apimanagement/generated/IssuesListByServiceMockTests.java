// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.IssueContract;
import com.azure.resourcemanager.apimanagement.models.State;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IssuesListByServiceMockTests {
    @Test
    public void testListByService() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"title\":\"y\",\"description\":\"sbyhwlvsvs\",\"userId\":\"ltaprq\",\"createdDate\":\"2021-10-23T00:40:15Z\",\"state\":\"closed\",\"apiId\":\"rk\"},\"id\":\"monxdwfcuhbgftf\",\"name\":\"qukkmvzeneg\",\"type\":\"dqrjylwqqsemjhh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IssueContract> response = manager.issues()
            .listByService("vxwkscwbshfihvlm", "ceylaulpuexyigxz", "yecxdslspgn", 118364922, 1832630782,
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("y", response.iterator().next().title());
        Assertions.assertEquals("sbyhwlvsvs", response.iterator().next().description());
        Assertions.assertEquals("ltaprq", response.iterator().next().userId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-23T00:40:15Z"), response.iterator().next().createdDate());
        Assertions.assertEquals(State.CLOSED, response.iterator().next().state());
        Assertions.assertEquals("rk", response.iterator().next().apiId());
    }
}
