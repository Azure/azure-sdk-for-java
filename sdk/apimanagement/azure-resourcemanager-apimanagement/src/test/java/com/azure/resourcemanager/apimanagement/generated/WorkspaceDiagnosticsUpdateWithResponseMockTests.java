// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.DiagnosticUpdateContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceDiagnosticsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"gcsco\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":91.18340118994985},\"frontend\":{\"request\":{\"headers\":[\"xzpz\",\"tust\",\"trfvogknocshmp\",\"jqtuzb\"],\"body\":{\"bytes\":1846992035},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{},{}]}},\"response\":{\"headers\":[\"ydpamct\",\"m\"],\"body\":{\"bytes\":886063663},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"reojsgkou\",\"npgkxyr\",\"ppbghyekggoaw\",\"qvuwsq\"],\"body\":{\"bytes\":1364448809},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"ngxvrpkizjnkgds\",\"rsumbcir\",\"b\",\"qpsvoxs\"],\"body\":{\"bytes\":1687093841},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"W3C\",\"verbosity\":\"information\",\"operationNameFormat\":\"Url\",\"metrics\":false},\"id\":\"bqxlsam\",\"name\":\"yjqhwsojnbb\",\"type\":\"gvmowyzxqhuhmldh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DiagnosticContract response = manager.workspaceDiagnostics()
            .updateWithResponse("ilkyhtnriy", "dbbjg", "jmcybrpwjenbxtk", "h", "rxauuhdkhkizyx",
                new DiagnosticUpdateContract().withAlwaysLog(AlwaysLog.ALL_ERRORS)
                    .withLoggerId("ubjwipfr")
                    .withSampling(
                        new SamplingSettings().withSamplingType(SamplingType.FIXED).withPercentage(88.19834432269302D))
                    .withFrontend(new PipelineDiagnosticSettings()
                        .withRequest(
                            new HttpMessageDiagnostic().withHeaders(Arrays.asList("xygfpqxsemezkpd", "mowftfrqeb"))
                                .withBody(new BodyDiagnosticSettings().withBytes(181605221))
                                .withDataMasking(new DataMasking()
                                    .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                        new DataMaskingEntity(), new DataMaskingEntity()))
                                    .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))))
                        .withResponse(
                            new HttpMessageDiagnostic().withHeaders(Arrays.asList("mg", "y", "widnrd", "dkvhui"))
                                .withBody(new BodyDiagnosticSettings().withBytes(2112365969))
                                .withDataMasking(new DataMasking()
                                    .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))
                                    .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                        new DataMaskingEntity(), new DataMaskingEntity())))))
                    .withBackend(new PipelineDiagnosticSettings()
                        .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("fdwh", "be"))
                            .withBody(new BodyDiagnosticSettings().withBytes(810461552))
                            .withDataMasking(new DataMasking()
                                .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                    new DataMaskingEntity(), new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                        .withResponse(new HttpMessageDiagnostic().withHeaders(Arrays.asList("lnjaysrjeevm"))
                            .withBody(new BodyDiagnosticSettings().withBytes(46063064))
                            .withDataMasking(new DataMasking().withQueryParams(Arrays.asList(new DataMaskingEntity()))
                                .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                    new DataMaskingEntity())))))
                    .withLogClientIp(false)
                    .withHttpCorrelationProtocol(HttpCorrelationProtocol.W3C)
                    .withVerbosity(Verbosity.INFORMATION)
                    .withOperationNameFormat(OperationNameFormat.URL)
                    .withMetrics(false),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("gcsco", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(91.18340118994985D, response.sampling().percentage());
        Assertions.assertEquals("xzpz", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1846992035, response.frontend().request().body().bytes());
        Assertions.assertEquals("ydpamct", response.frontend().response().headers().get(0));
        Assertions.assertEquals(886063663, response.frontend().response().body().bytes());
        Assertions.assertEquals("reojsgkou", response.backend().request().headers().get(0));
        Assertions.assertEquals(1364448809, response.backend().request().body().bytes());
        Assertions.assertEquals("ngxvrpkizjnkgds", response.backend().response().headers().get(0));
        Assertions.assertEquals(1687093841, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.INFORMATION, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, response.operationNameFormat());
        Assertions.assertEquals(false, response.metrics());
    }
}
