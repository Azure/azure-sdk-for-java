// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.GatewayContract;
import com.azure.resourcemanager.apimanagement.models.ResourceLocationDataContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatewaysCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"locationData\":{\"name\":\"jmfjjfexuvsveam\",\"city\":\"auuuvhxiohg\",\"district\":\"ufzu\",\"countryOrRegion\":\"szhaeemtyosd\"},\"description\":\"tsdywfge\"},\"id\":\"vwgwphwxiav\",\"name\":\"mixaqgfpuhhzwr\",\"type\":\"jumlkjsvkbt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        GatewayContract response = manager.gateways()
            .define("qbeyxwrmu")
            .withExistingService("bn", "glquarbru")
            .withLocationData(new ResourceLocationDataContract().withName("exzbhgjajkvwko")
                .withCity("fbdzllv")
                .withDistrict("tbgvlpgfyg")
                .withCountryOrRegion("faky"))
            .withDescription("psihzqieoympp")
            .withIfMatch("uoyrbdkgqdm")
            .create();

        Assertions.assertEquals("jmfjjfexuvsveam", response.locationData().name());
        Assertions.assertEquals("auuuvhxiohg", response.locationData().city());
        Assertions.assertEquals("ufzu", response.locationData().district());
        Assertions.assertEquals("szhaeemtyosd", response.locationData().countryOrRegion());
        Assertions.assertEquals("tsdywfge", response.description());
    }
}
