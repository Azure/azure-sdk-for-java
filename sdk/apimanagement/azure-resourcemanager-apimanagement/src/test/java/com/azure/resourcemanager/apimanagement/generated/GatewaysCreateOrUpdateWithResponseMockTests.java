// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.GatewayContract;
import com.azure.resourcemanager.apimanagement.models.ResourceLocationDataContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatewaysCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"locationData\":{\"name\":\"nubr\",\"city\":\"jfkxnwtzsroeqcr\",\"district\":\"cjskqsfnmiwa\",\"countryOrRegion\":\"unhdikatzmtuv\"},\"description\":\"hitjkbibxlwz\"},\"id\":\"vkcmcuiaunlo\",\"name\":\"in\",\"type\":\"fbaoboiahkp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        GatewayContract response = manager.gateways()
            .define("pdncokq")
            .withExistingService("ehojvmazu", "lfpiuuf")
            .withLocationData(new ResourceLocationDataContract().withName("vbhmnimjlyhb")
                .withCity("n")
                .withDistrict("ibgwcduy")
                .withCountryOrRegion("caygumqeob"))
            .withDescription("reud")
            .withIfMatch("xjkc")
            .create();

        Assertions.assertEquals("nubr", response.locationData().name());
        Assertions.assertEquals("jfkxnwtzsroeqcr", response.locationData().city());
        Assertions.assertEquals("cjskqsfnmiwa", response.locationData().district());
        Assertions.assertEquals("unhdikatzmtuv", response.locationData().countryOrRegion());
        Assertions.assertEquals("hitjkbibxlwz", response.description());
    }
}
