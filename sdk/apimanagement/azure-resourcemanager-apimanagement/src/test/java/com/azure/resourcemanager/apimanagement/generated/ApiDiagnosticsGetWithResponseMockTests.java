// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiDiagnosticsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"cqdfwbifnnhlsfo\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":51.94838792875722},\"frontend\":{\"request\":{\"headers\":[\"nbrpelpfijtezg\"],\"body\":{\"bytes\":1822794875},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"rzinfuivczktll\",\"swtdapsmirmnrije\"],\"body\":{\"bytes\":1520178358},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{}]}}},\"backend\":{\"request\":{\"headers\":[\"hgffmwtblgm\",\"okqoikx\",\"efwlnm\"],\"body\":{\"bytes\":570194650},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{},{}]}},\"response\":{\"headers\":[\"liejdn\",\"cotelikjiyteh\",\"xtzxqdwbymuql\",\"gncrdorcty\"],\"body\":{\"bytes\":623186360},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"verbose\",\"operationNameFormat\":\"Name\",\"metrics\":true},\"id\":\"mwc\",\"name\":\"ozvlfymt\",\"type\":\"tsvxupqtzckj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DiagnosticContract response = manager.apiDiagnostics()
            .getWithResponse("jjidodnvltcvmah", "uwkup", "bnhi", "lh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("cqdfwbifnnhlsfo", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(51.94838792875722D, response.sampling().percentage());
        Assertions.assertEquals("nbrpelpfijtezg", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1822794875, response.frontend().request().body().bytes());
        Assertions.assertEquals("rzinfuivczktll", response.frontend().response().headers().get(0));
        Assertions.assertEquals(1520178358, response.frontend().response().body().bytes());
        Assertions.assertEquals("hgffmwtblgm", response.backend().request().headers().get(0));
        Assertions.assertEquals(570194650, response.backend().request().body().bytes());
        Assertions.assertEquals("liejdn", response.backend().response().headers().get(0));
        Assertions.assertEquals(623186360, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.VERBOSE, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.operationNameFormat());
        Assertions.assertEquals(true, response.metrics());
    }
}
