// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApiDiagnosticsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"nbuvms\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":51.66775294769329},\"frontend\":{\"request\":{\"headers\":[\"eyrxparxtzayq\",\"ddigeblsplzdss\",\"wwveeozbjkjq\"],\"body\":{\"bytes\":1884210095},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"ssjdywbnklg\",\"rxactsawvxcimp\"],\"body\":{\"bytes\":269168399},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"nkn\",\"fuysjhv\",\"rllfswarm\"],\"body\":{\"bytes\":1684546781},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"qnipehfwwc\",\"fnxi\",\"juvjucfjisos\"],\"body\":{\"bytes\":161867495},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"W3C\",\"verbosity\":\"error\",\"operationNameFormat\":\"Name\",\"metrics\":true},\"id\":\"ixgofqdqwsj\",\"name\":\"ihuvrqpbxdoicqpk\",\"type\":\"tly\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        DiagnosticContract response = manager.apiDiagnostics()
            .getWithResponse("hcmcgm", "m", "nvqxuyiarznhdqse", "pdlmajpuyxoafrmz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("nbuvms", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(51.66775294769329D, response.sampling().percentage());
        Assertions.assertEquals("eyrxparxtzayq", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1884210095, response.frontend().request().body().bytes());
        Assertions.assertEquals("ssjdywbnklg", response.frontend().response().headers().get(0));
        Assertions.assertEquals(269168399, response.frontend().response().body().bytes());
        Assertions.assertEquals("nkn", response.backend().request().headers().get(0));
        Assertions.assertEquals(1684546781, response.backend().request().body().bytes());
        Assertions.assertEquals("qnipehfwwc", response.backend().response().headers().get(0));
        Assertions.assertEquals(161867495, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.W3C, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.NAME, response.operationNameFormat());
        Assertions.assertEquals(true, response.metrics());
    }
}
