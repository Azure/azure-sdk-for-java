// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ReportRecordContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsListByGeoMockTests {
    @Test
    public void testListByGeo() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"bbfgmeqhtngrxfq\",\"timestamp\":\"2021-07-11T08:14:14Z\",\"interval\":\"wfbllegezv\",\"country\":\"wii\",\"region\":\"sggjacmazilqgv\",\"zip\":\"proqp\",\"userId\":\"zykmdklwbqkmtwua\",\"productId\":\"qtmpgrzciltw\",\"apiId\":\"llp\",\"operationId\":\"ebolhyiohcjugd\",\"apiRegion\":\"ggxszmyxguyk\",\"subscriptionId\":\"zpmwzplcrzdwe\",\"callCountSuccess\":1684235761,\"callCountBlocked\":472430177,\"callCountFailed\":17110724,\"callCountOther\":558680846,\"callCountTotal\":1504464393,\"bandwidth\":5088683445144491086,\"cacheHitCount\":2114560142,\"cacheMissCount\":565176326,\"apiTimeAvg\":2.95593633544623,\"apiTimeMin\":66.67033980278863,\"apiTimeMax\":70.61867838950481,\"serviceTimeAvg\":92.40173475677146,\"serviceTimeMin\":60.32064888719908,\"serviceTimeMax\":30.20913859853134}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ReportRecordContract> response = manager.reports()
            .listByGeo("ftcjw", "fhdfo", "scwlcfcpz", 372158540, 477919150, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bbfgmeqhtngrxfq", response.iterator().next().name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-11T08:14:14Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("wfbllegezv", response.iterator().next().interval());
        Assertions.assertEquals("wii", response.iterator().next().country());
        Assertions.assertEquals("sggjacmazilqgv", response.iterator().next().region());
        Assertions.assertEquals("proqp", response.iterator().next().zip());
        Assertions.assertEquals("llp", response.iterator().next().apiId());
        Assertions.assertEquals("ebolhyiohcjugd", response.iterator().next().operationId());
        Assertions.assertEquals("ggxszmyxguyk", response.iterator().next().apiRegion());
        Assertions.assertEquals("zpmwzplcrzdwe", response.iterator().next().subscriptionId());
        Assertions.assertEquals(1684235761, response.iterator().next().callCountSuccess());
        Assertions.assertEquals(472430177, response.iterator().next().callCountBlocked());
        Assertions.assertEquals(17110724, response.iterator().next().callCountFailed());
        Assertions.assertEquals(558680846, response.iterator().next().callCountOther());
        Assertions.assertEquals(1504464393, response.iterator().next().callCountTotal());
        Assertions.assertEquals(5088683445144491086L, response.iterator().next().bandwidth());
        Assertions.assertEquals(2114560142, response.iterator().next().cacheHitCount());
        Assertions.assertEquals(565176326, response.iterator().next().cacheMissCount());
        Assertions.assertEquals(2.95593633544623D, response.iterator().next().apiTimeAvg());
        Assertions.assertEquals(66.67033980278863D, response.iterator().next().apiTimeMin());
        Assertions.assertEquals(70.61867838950481D, response.iterator().next().apiTimeMax());
        Assertions.assertEquals(92.40173475677146D, response.iterator().next().serviceTimeAvg());
        Assertions.assertEquals(60.32064888719908D, response.iterator().next().serviceTimeMin());
        Assertions.assertEquals(30.20913859853134D, response.iterator().next().serviceTimeMax());
    }
}
