// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.UserContract;
import com.azure.resourcemanager.apimanagement.models.UserState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UsersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"firstName\":\"iw\",\"lastName\":\"wdkgbzjoyyptno\",\"email\":\"oqxkz\",\"registrationDate\":\"2021-10-31T12:39:06Z\",\"groups\":[{\"displayName\":\"vje\",\"description\":\"xkflzqwkxxbo\",\"builtIn\":true,\"type\":\"custom\",\"externalId\":\"owgnwhldctnwchu\"}],\"state\":\"deleted\",\"note\":\"nmtnlcvlmrv\",\"identities\":[{\"provider\":\"bzzb\",\"id\":\"a\"},{\"provider\":\"xwcndkdlxdlh\",\"id\":\"l\"},{\"provider\":\"j\",\"id\":\"kyxowno\"}]},\"id\":\"pqussxiajicr\",\"name\":\"dgtjxlopnccaxtpp\",\"type\":\"szehij\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApiManagementManager manager =
            ApiManagementManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        UserContract response =
            manager
                .users()
                .getWithResponse("ikisppygothi", "irhhbogxw", "gpymyerpusozaou", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("iw", response.firstName());
        Assertions.assertEquals("wdkgbzjoyyptno", response.lastName());
        Assertions.assertEquals("oqxkz", response.email());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-31T12:39:06Z"), response.registrationDate());
        Assertions.assertEquals(UserState.DELETED, response.state());
        Assertions.assertEquals("nmtnlcvlmrv", response.note());
        Assertions.assertEquals("bzzb", response.identities().get(0).provider());
        Assertions.assertEquals("a", response.identities().get(0).id());
    }
}
