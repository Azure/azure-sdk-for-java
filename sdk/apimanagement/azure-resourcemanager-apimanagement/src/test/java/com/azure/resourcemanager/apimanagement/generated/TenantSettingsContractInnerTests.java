// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.TenantSettingsContractInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TenantSettingsContractInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TenantSettingsContractInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"settings\":{\"zfffhtjnwo\":\"ctqkmvjanx\",\"xzqfcwr\":\"stfjxtvl\",\"hjmbji\":\"iomxeezw\",\"hpyvdkgdet\":\"egmxdbsohc\"}},\"id\":\"z\",\"name\":\"canzb\",\"type\":\"ekwuyckyvn\"}")
                .toObject(TenantSettingsContractInner.class);
        Assertions.assertEquals("ctqkmvjanx", model.settings().get("zfffhtjnwo"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TenantSettingsContractInner model =
            new TenantSettingsContractInner()
                .withSettings(
                    mapOf(
                        "zfffhtjnwo",
                        "ctqkmvjanx",
                        "xzqfcwr",
                        "stfjxtvl",
                        "hjmbji",
                        "iomxeezw",
                        "hpyvdkgdet",
                        "egmxdbsohc"));
        model = BinaryData.fromObject(model).toObject(TenantSettingsContractInner.class);
        Assertions.assertEquals("ctqkmvjanx", model.settings().get("zfffhtjnwo"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
