// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.GatewayHostnameConfigurationContractInner;
import org.junit.jupiter.api.Assertions;

public final class GatewayHostnameConfigurationContractInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GatewayHostnameConfigurationContractInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hostname\":\"xvgjbfi\",\"certificateId\":\"pn\",\"negotiateClientCertificate\":true,\"tls10Enabled\":true,\"tls11Enabled\":true,\"http2Enabled\":false},\"id\":\"wmtqsmoxsaz\",\"name\":\"xej\",\"type\":\"wecy\"}")
                .toObject(GatewayHostnameConfigurationContractInner.class);
        Assertions.assertEquals("xvgjbfi", model.hostname());
        Assertions.assertEquals("pn", model.certificateId());
        Assertions.assertEquals(true, model.negotiateClientCertificate());
        Assertions.assertEquals(true, model.tls10Enabled());
        Assertions.assertEquals(true, model.tls11Enabled());
        Assertions.assertEquals(false, model.http2Enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GatewayHostnameConfigurationContractInner model =
            new GatewayHostnameConfigurationContractInner()
                .withHostname("xvgjbfi")
                .withCertificateId("pn")
                .withNegotiateClientCertificate(true)
                .withTls10Enabled(true)
                .withTls11Enabled(true)
                .withHttp2Enabled(false);
        model = BinaryData.fromObject(model).toObject(GatewayHostnameConfigurationContractInner.class);
        Assertions.assertEquals("xvgjbfi", model.hostname());
        Assertions.assertEquals("pn", model.certificateId());
        Assertions.assertEquals(true, model.negotiateClientCertificate());
        Assertions.assertEquals(true, model.tls10Enabled());
        Assertions.assertEquals(true, model.tls11Enabled());
        Assertions.assertEquals(false, model.http2Enabled());
    }
}
