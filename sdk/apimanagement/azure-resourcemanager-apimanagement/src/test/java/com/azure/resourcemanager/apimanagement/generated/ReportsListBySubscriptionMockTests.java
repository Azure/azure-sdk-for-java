// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ReportRecordContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsListBySubscriptionMockTests {
    @Test
    public void testListBySubscription() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"dogrtfwzecgbx\",\"timestamp\":\"2021-08-31T04:16:32Z\",\"interval\":\"vqjdxiiqwqbv\",\"country\":\"vgpxnaaiitnkruyw\",\"region\":\"nksmaebdrxj\",\"zip\":\"rsea\",\"userId\":\"eov\",\"productId\":\"rqwfuxntuegy\",\"apiId\":\"eket\",\"operationId\":\"iptqhatfg\",\"apiRegion\":\"hbxgfhgkdms\",\"subscriptionId\":\"hhbupqo\",\"callCountSuccess\":1449107492,\"callCountBlocked\":350449519,\"callCountFailed\":932770548,\"callCountOther\":1653787191,\"callCountTotal\":1245686633,\"bandwidth\":9091069818426932222,\"cacheHitCount\":1639995609,\"cacheMissCount\":1823044560,\"apiTimeAvg\":91.4571473915293,\"apiTimeMin\":20.73906149524588,\"apiTimeMax\":38.18939050463751,\"serviceTimeAvg\":35.52179655148119,\"serviceTimeMin\":31.98714929843466,\"serviceTimeMax\":68.39538560207716}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ReportRecordContract> response = manager.reports()
            .listBySubscription("ufpbfqmlmbyqyek", "w", "dxz", 1959049775, 1371292713, "u",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dogrtfwzecgbx", response.iterator().next().name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-31T04:16:32Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("vqjdxiiqwqbv", response.iterator().next().interval());
        Assertions.assertEquals("vgpxnaaiitnkruyw", response.iterator().next().country());
        Assertions.assertEquals("nksmaebdrxj", response.iterator().next().region());
        Assertions.assertEquals("rsea", response.iterator().next().zip());
        Assertions.assertEquals("eket", response.iterator().next().apiId());
        Assertions.assertEquals("iptqhatfg", response.iterator().next().operationId());
        Assertions.assertEquals("hbxgfhgkdms", response.iterator().next().apiRegion());
        Assertions.assertEquals("hhbupqo", response.iterator().next().subscriptionId());
        Assertions.assertEquals(1449107492, response.iterator().next().callCountSuccess());
        Assertions.assertEquals(350449519, response.iterator().next().callCountBlocked());
        Assertions.assertEquals(932770548, response.iterator().next().callCountFailed());
        Assertions.assertEquals(1653787191, response.iterator().next().callCountOther());
        Assertions.assertEquals(1245686633, response.iterator().next().callCountTotal());
        Assertions.assertEquals(9091069818426932222L, response.iterator().next().bandwidth());
        Assertions.assertEquals(1639995609, response.iterator().next().cacheHitCount());
        Assertions.assertEquals(1823044560, response.iterator().next().cacheMissCount());
        Assertions.assertEquals(91.4571473915293D, response.iterator().next().apiTimeAvg());
        Assertions.assertEquals(20.73906149524588D, response.iterator().next().apiTimeMin());
        Assertions.assertEquals(38.18939050463751D, response.iterator().next().apiTimeMax());
        Assertions.assertEquals(35.52179655148119D, response.iterator().next().serviceTimeAvg());
        Assertions.assertEquals(31.98714929843466D, response.iterator().next().serviceTimeMin());
        Assertions.assertEquals(68.39538560207716D, response.iterator().next().serviceTimeMax());
    }
}
