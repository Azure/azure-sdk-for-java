// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ReportRecordContract;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsListByUserMockTests {
    @Test
    public void testListByUser() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"qgneo\",\"timestamp\":\"2021-03-12T23:05:08Z\",\"interval\":\"k\",\"country\":\"ikqvaagnzb\",\"region\":\"qbjcdaucsomzvgjy\",\"zip\":\"wc\",\"userId\":\"epa\",\"productId\":\"dm\",\"apiId\":\"odp\",\"operationId\":\"blmxblcbwvsqpe\",\"apiRegion\":\"lcbbu\",\"subscriptionId\":\"pcgirsfil\",\"callCountSuccess\":1319018236,\"callCountBlocked\":817323597,\"callCountFailed\":576675144,\"callCountOther\":1562419606,\"callCountTotal\":999150611,\"bandwidth\":1230613587771211953,\"cacheHitCount\":1625936983,\"cacheMissCount\":2087639507,\"apiTimeAvg\":61.85466825197127,\"apiTimeMin\":70.08530197209767,\"apiTimeMax\":69.6809972701672,\"serviceTimeAvg\":38.10140473459164,\"serviceTimeMin\":64.10428996341305,\"serviceTimeMax\":96.76000756095051}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ReportRecordContract> response = manager.reports()
            .listByUser("czrvnezl", "vndihk", "hfzgkku", 1385933592, 1706966345, "jmgswtwms",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qgneo", response.iterator().next().name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-12T23:05:08Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("k", response.iterator().next().interval());
        Assertions.assertEquals("ikqvaagnzb", response.iterator().next().country());
        Assertions.assertEquals("qbjcdaucsomzvgjy", response.iterator().next().region());
        Assertions.assertEquals("wc", response.iterator().next().zip());
        Assertions.assertEquals("odp", response.iterator().next().apiId());
        Assertions.assertEquals("blmxblcbwvsqpe", response.iterator().next().operationId());
        Assertions.assertEquals("lcbbu", response.iterator().next().apiRegion());
        Assertions.assertEquals("pcgirsfil", response.iterator().next().subscriptionId());
        Assertions.assertEquals(1319018236, response.iterator().next().callCountSuccess());
        Assertions.assertEquals(817323597, response.iterator().next().callCountBlocked());
        Assertions.assertEquals(576675144, response.iterator().next().callCountFailed());
        Assertions.assertEquals(1562419606, response.iterator().next().callCountOther());
        Assertions.assertEquals(999150611, response.iterator().next().callCountTotal());
        Assertions.assertEquals(1230613587771211953L, response.iterator().next().bandwidth());
        Assertions.assertEquals(1625936983, response.iterator().next().cacheHitCount());
        Assertions.assertEquals(2087639507, response.iterator().next().cacheMissCount());
        Assertions.assertEquals(61.85466825197127D, response.iterator().next().apiTimeAvg());
        Assertions.assertEquals(70.08530197209767D, response.iterator().next().apiTimeMin());
        Assertions.assertEquals(69.6809972701672D, response.iterator().next().apiTimeMax());
        Assertions.assertEquals(38.10140473459164D, response.iterator().next().serviceTimeAvg());
        Assertions.assertEquals(64.10428996341305D, response.iterator().next().serviceTimeMin());
        Assertions.assertEquals(96.76000756095051D, response.iterator().next().serviceTimeMax());
    }
}
