// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkspaceApiDiagnosticsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"ncsa\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":63.174751974988574},\"frontend\":{\"request\":{\"headers\":[\"ppqajdm\",\"unntqqguhv\"],\"body\":{\"bytes\":1576159583},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{},{}]}},\"response\":{\"headers\":[\"fwfuxdtpjcs\",\"kedlclxxq\",\"yfftqombdsgqxa\",\"idu\"],\"body\":{\"bytes\":1659252034},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"ajnhpyylekubiwvj\"],\"body\":{\"bytes\":1268826546},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{}]}},\"response\":{\"headers\":[\"jvfisloquttk\",\"zwgjupjbdqm\",\"kiajqsshupxjttn\"],\"body\":{\"bytes\":2012812120},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{}]}}},\"logClientIp\":false,\"httpCorrelationProtocol\":\"Legacy\",\"verbosity\":\"error\",\"operationNameFormat\":\"Url\",\"metrics\":false},\"id\":\"tjwdlduvimgtc\",\"name\":\"ormxoxta\",\"type\":\"afbjvbkjtgzk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<DiagnosticContract> response = manager.workspaceApiDiagnostics()
            .listByWorkspace("ikvdfszxbupsx", "oj", "gxcgqkhyvtajwkrx", "zlmwfncwlwov", "zbomjbyssprkbz", 1789267618,
                32298060, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.iterator().next().alwaysLog());
        Assertions.assertEquals("ncsa", response.iterator().next().loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.iterator().next().sampling().samplingType());
        Assertions.assertEquals(63.174751974988574D, response.iterator().next().sampling().percentage());
        Assertions.assertEquals("ppqajdm", response.iterator().next().frontend().request().headers().get(0));
        Assertions.assertEquals(1576159583, response.iterator().next().frontend().request().body().bytes());
        Assertions.assertEquals("fwfuxdtpjcs", response.iterator().next().frontend().response().headers().get(0));
        Assertions.assertEquals(1659252034, response.iterator().next().frontend().response().body().bytes());
        Assertions.assertEquals("ajnhpyylekubiwvj", response.iterator().next().backend().request().headers().get(0));
        Assertions.assertEquals(1268826546, response.iterator().next().backend().request().body().bytes());
        Assertions.assertEquals("jvfisloquttk", response.iterator().next().backend().response().headers().get(0));
        Assertions.assertEquals(2012812120, response.iterator().next().backend().response().body().bytes());
        Assertions.assertFalse(response.iterator().next().logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.LEGACY, response.iterator().next().httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, response.iterator().next().verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, response.iterator().next().operationNameFormat());
        Assertions.assertFalse(response.iterator().next().metrics());
    }
}
