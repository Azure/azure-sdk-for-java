// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.models.ReportRecordContract;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ReportsListByTimeMockTests {
    @Test
    public void testListByTime() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"jd\",\"timestamp\":\"2021-05-19T08:07:41Z\",\"interval\":\"djeepukuofz\",\"country\":\"ztvucyackgka\",\"region\":\"m\",\"zip\":\"pcohfksixvwkp\",\"userId\":\"smurjab\",\"productId\":\"xohagcojgmyzjd\",\"apiId\":\"qehrqtgdipb\",\"operationId\":\"iweyuigyzsebk\",\"apiRegion\":\"ykg\",\"subscriptionId\":\"urcxxjyxyunypfkv\",\"callCountSuccess\":1583979737,\"callCountBlocked\":2029424818,\"callCountFailed\":68909390,\"callCountOther\":559146229,\"callCountTotal\":947596358,\"bandwidth\":371992806472451552,\"cacheHitCount\":404618981,\"cacheMissCount\":1833441922,\"apiTimeAvg\":21.634930432939893,\"apiTimeMin\":7.633451917218148,\"apiTimeMax\":10.226836202577182,\"serviceTimeAvg\":48.172511887658395,\"serviceTimeMin\":82.55140577080256,\"serviceTimeMax\":8.096115422760485}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ReportRecordContract> response = manager.reports()
            .listByTime("axilzdxcmpdmd", "ypksfrhiehxjou", "x", Duration.parse("PT52H38M12S"), 294433714, 516558600,
                "ecxuvkbaoqvvyhg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jd", response.iterator().next().name());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-19T08:07:41Z"), response.iterator().next().timestamp());
        Assertions.assertEquals("djeepukuofz", response.iterator().next().interval());
        Assertions.assertEquals("ztvucyackgka", response.iterator().next().country());
        Assertions.assertEquals("m", response.iterator().next().region());
        Assertions.assertEquals("pcohfksixvwkp", response.iterator().next().zip());
        Assertions.assertEquals("qehrqtgdipb", response.iterator().next().apiId());
        Assertions.assertEquals("iweyuigyzsebk", response.iterator().next().operationId());
        Assertions.assertEquals("ykg", response.iterator().next().apiRegion());
        Assertions.assertEquals("urcxxjyxyunypfkv", response.iterator().next().subscriptionId());
        Assertions.assertEquals(1583979737, response.iterator().next().callCountSuccess());
        Assertions.assertEquals(2029424818, response.iterator().next().callCountBlocked());
        Assertions.assertEquals(68909390, response.iterator().next().callCountFailed());
        Assertions.assertEquals(559146229, response.iterator().next().callCountOther());
        Assertions.assertEquals(947596358, response.iterator().next().callCountTotal());
        Assertions.assertEquals(371992806472451552L, response.iterator().next().bandwidth());
        Assertions.assertEquals(404618981, response.iterator().next().cacheHitCount());
        Assertions.assertEquals(1833441922, response.iterator().next().cacheMissCount());
        Assertions.assertEquals(21.634930432939893D, response.iterator().next().apiTimeAvg());
        Assertions.assertEquals(7.633451917218148D, response.iterator().next().apiTimeMin());
        Assertions.assertEquals(10.226836202577182D, response.iterator().next().apiTimeMax());
        Assertions.assertEquals(48.172511887658395D, response.iterator().next().serviceTimeAvg());
        Assertions.assertEquals(82.55140577080256D, response.iterator().next().serviceTimeMin());
        Assertions.assertEquals(8.096115422760485D, response.iterator().next().serviceTimeMax());
    }
}
