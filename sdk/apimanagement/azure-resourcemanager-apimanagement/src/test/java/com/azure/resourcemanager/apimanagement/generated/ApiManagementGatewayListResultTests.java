// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.fluent.models.ApiManagementGatewayResourceInner;
import com.azure.resourcemanager.apimanagement.models.ApiGatewaySkuType;
import com.azure.resourcemanager.apimanagement.models.ApiManagementGatewayListResult;
import com.azure.resourcemanager.apimanagement.models.ApiManagementGatewaySkuProperties;
import com.azure.resourcemanager.apimanagement.models.BackendConfiguration;
import com.azure.resourcemanager.apimanagement.models.BackendSubnetConfiguration;
import com.azure.resourcemanager.apimanagement.models.FrontendConfiguration;
import com.azure.resourcemanager.apimanagement.models.GatewayConfigurationApi;
import com.azure.resourcemanager.apimanagement.models.VirtualNetworkType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApiManagementGatewayListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApiManagementGatewayListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"jlxofpdvhpfxxyp\",\"targetProvisioningState\":\"i\",\"createdAtUtc\":\"2021-05-28T01:58:06Z\",\"frontend\":{\"defaultHostname\":\"uybbkpodep\"},\"backend\":{\"subnet\":{\"id\":\"nuvamiheogna\"}},\"configurationApi\":{\"hostname\":\"xth\"},\"virtualNetworkType\":\"External\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1852537816},\"location\":\"yevc\",\"etag\":\"qi\",\"tags\":{\"bwjzr\":\"un\",\"fublj\":\"fygxgispemvtzfk\",\"aeqjhqjbasvms\":\"fxqeof\"},\"id\":\"jqul\",\"name\":\"gsntnbybkzgcwr\",\"type\":\"clxxwrljdo\"},{\"properties\":{\"provisioningState\":\"kcqvkocrc\",\"targetProvisioningState\":\"kwt\",\"createdAtUtc\":\"2021-04-07T16:39:29Z\",\"frontend\":{\"defaultHostname\":\"jbiksqrglssai\"},\"backend\":{\"subnet\":{\"id\":\"wnzlljfmppeeb\"}},\"configurationApi\":{\"hostname\":\"xsabkyqdu\"},\"virtualNetworkType\":\"Internal\"},\"sku\":{\"name\":\"Standard\",\"capacity\":315440352},\"location\":\"zdzevndh\",\"etag\":\"wpdappdsbdkv\",\"tags\":{\"tjelt\":\"jfeusnh\",\"hugjzzdatqxhoc\":\"rl\",\"ozwyiftyhxhuro\":\"geablgphuticndvk\",\"wcukjfkgiawxk\":\"ftyxolniw\"},\"id\":\"ryplwckbasyypn\",\"name\":\"dhsgcba\",\"type\":\"phejkotynqgoulz\"},{\"properties\":{\"provisioningState\":\"likwyqkgfgib\",\"targetProvisioningState\":\"dgak\",\"createdAtUtc\":\"2021-01-01T02:28:26Z\",\"frontend\":{\"defaultHostname\":\"yb\"},\"backend\":{\"subnet\":{\"id\":\"dqytbciqfouflmm\"}},\"configurationApi\":{\"hostname\":\"smodmgloug\"},\"virtualNetworkType\":\"Internal\"},\"sku\":{\"name\":\"WorkspaceGatewayPremium\",\"capacity\":542784283},\"location\":\"tduqktapspwgcuer\",\"etag\":\"mkdo\",\"tags\":{\"bbjfddgmbmbexp\":\"whbmd\"},\"id\":\"bhtqqrolfpfpsa\",\"name\":\"gbquxigj\",\"type\":\"jgzjaoyfhrtx\"},{\"properties\":{\"provisioningState\":\"n\",\"targetProvisioningState\":\"kujysvlejuvfq\",\"createdAtUtc\":\"2021-04-29T02:40:58Z\",\"frontend\":{\"defaultHostname\":\"xwjkcprbnwbxg\"},\"backend\":{\"subnet\":{\"id\":\"vpys\"}},\"configurationApi\":{\"hostname\":\"nruj\"},\"virtualNetworkType\":\"Internal\"},\"sku\":{\"name\":\"WorkspaceGatewayPremium\",\"capacity\":931696713},\"location\":\"uqfprwzw\",\"etag\":\"g\",\"tags\":{\"gazxuf\":\"nwui\"},\"id\":\"zuckyfi\",\"name\":\"rfidfvzwdz\",\"type\":\"htymw\"}],\"nextLink\":\"dkfthwxmnt\"}")
            .toObject(ApiManagementGatewayListResult.class);
        Assertions.assertEquals("un", model.value().get(0).tags().get("bwjzr"));
        Assertions.assertEquals(ApiGatewaySkuType.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals(1852537816, model.value().get(0).sku().capacity());
        Assertions.assertEquals("yevc", model.value().get(0).location());
        Assertions.assertEquals("nuvamiheogna", model.value().get(0).backend().subnet().id());
        Assertions.assertEquals(VirtualNetworkType.EXTERNAL, model.value().get(0).virtualNetworkType());
        Assertions.assertEquals("dkfthwxmnt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApiManagementGatewayListResult model = new ApiManagementGatewayListResult().withValue(Arrays.asList(
            new ApiManagementGatewayResourceInner()
                .withTags(mapOf("bwjzr", "un", "fublj", "fygxgispemvtzfk", "aeqjhqjbasvms", "fxqeof"))
                .withSku(new ApiManagementGatewaySkuProperties().withName(ApiGatewaySkuType.STANDARD)
                    .withCapacity(1852537816))
                .withLocation("yevc")
                .withFrontend(new FrontendConfiguration())
                .withBackend(
                    new BackendConfiguration().withSubnet(new BackendSubnetConfiguration().withId("nuvamiheogna")))
                .withConfigurationApi(new GatewayConfigurationApi())
                .withVirtualNetworkType(VirtualNetworkType.EXTERNAL),
            new ApiManagementGatewayResourceInner()
                .withTags(mapOf("tjelt", "jfeusnh", "hugjzzdatqxhoc", "rl", "ozwyiftyhxhuro", "geablgphuticndvk",
                    "wcukjfkgiawxk", "ftyxolniw"))
                .withSku(new ApiManagementGatewaySkuProperties().withName(ApiGatewaySkuType.STANDARD)
                    .withCapacity(315440352))
                .withLocation("zdzevndh")
                .withFrontend(new FrontendConfiguration())
                .withBackend(
                    new BackendConfiguration().withSubnet(new BackendSubnetConfiguration().withId("wnzlljfmppeeb")))
                .withConfigurationApi(new GatewayConfigurationApi())
                .withVirtualNetworkType(VirtualNetworkType.INTERNAL),
            new ApiManagementGatewayResourceInner().withTags(mapOf("bbjfddgmbmbexp", "whbmd"))
                .withSku(new ApiManagementGatewaySkuProperties().withName(ApiGatewaySkuType.WORKSPACE_GATEWAY_PREMIUM)
                    .withCapacity(542784283))
                .withLocation("tduqktapspwgcuer")
                .withFrontend(new FrontendConfiguration())
                .withBackend(
                    new BackendConfiguration().withSubnet(new BackendSubnetConfiguration().withId("dqytbciqfouflmm")))
                .withConfigurationApi(new GatewayConfigurationApi())
                .withVirtualNetworkType(VirtualNetworkType.INTERNAL),
            new ApiManagementGatewayResourceInner().withTags(mapOf("gazxuf", "nwui"))
                .withSku(new ApiManagementGatewaySkuProperties().withName(ApiGatewaySkuType.WORKSPACE_GATEWAY_PREMIUM)
                    .withCapacity(931696713))
                .withLocation("uqfprwzw")
                .withFrontend(new FrontendConfiguration())
                .withBackend(new BackendConfiguration().withSubnet(new BackendSubnetConfiguration().withId("vpys")))
                .withConfigurationApi(new GatewayConfigurationApi())
                .withVirtualNetworkType(VirtualNetworkType.INTERNAL)))
            .withNextLink("dkfthwxmnt");
        model = BinaryData.fromObject(model).toObject(ApiManagementGatewayListResult.class);
        Assertions.assertEquals("un", model.value().get(0).tags().get("bwjzr"));
        Assertions.assertEquals(ApiGatewaySkuType.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals(1852537816, model.value().get(0).sku().capacity());
        Assertions.assertEquals("yevc", model.value().get(0).location());
        Assertions.assertEquals("nuvamiheogna", model.value().get(0).backend().subnet().id());
        Assertions.assertEquals(VirtualNetworkType.EXTERNAL, model.value().get(0).virtualNetworkType());
        Assertions.assertEquals("dkfthwxmnt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
