// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.ParameterContract;
import com.azure.resourcemanager.apimanagement.models.ParameterExampleContract;
import com.azure.resourcemanager.apimanagement.models.RepresentationContract;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RepresentationContractTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RepresentationContract model =
            BinaryData
                .fromString(
                    "{\"contentType\":\"mysu\",\"schemaId\":\"wq\",\"typeName\":\"tvlwijpsttexoq\",\"formParameters\":[{\"name\":\"cyyufmh\",\"description\":\"nc\",\"type\":\"wmqs\",\"defaultValue\":\"cdqzhlctddu\",\"required\":false,\"values\":[\"fpch\"],\"schemaId\":\"bnjj\",\"typeName\":\"gegydcwboxjum\",\"examples\":{\"yjdfqwmky\":{\"summary\":\"lihrraiouaubr\",\"description\":\"loqxfuojrngif\",\"value\":\"dataz\",\"externalValue\":\"sccbiuimzd\"}}},{\"name\":\"qufdvruzslzojh\",\"description\":\"tfnmdx\",\"type\":\"tngfdgugeyzihgr\",\"defaultValue\":\"ui\",\"required\":false,\"values\":[\"mfp\",\"hojeevy\"],\"schemaId\":\"hsgz\",\"typeName\":\"zbgomfgbeg\",\"examples\":{\"q\":{\"summary\":\"eohibet\",\"description\":\"uankrrfxeeeb\",\"value\":\"dataj\",\"externalValue\":\"cvbmqzb\"},\"linmfgv\":{\"summary\":\"aj\",\"description\":\"wxacevehj\",\"value\":\"datayxoaf\",\"externalValue\":\"oqltfae\"}}},{\"name\":\"irpghriypoqeyh\",\"description\":\"h\",\"type\":\"kprlpyznuc\",\"defaultValue\":\"dsmexiitdfux\",\"required\":true,\"values\":[\"ibmi\",\"bnn\"],\"schemaId\":\"tgnljhnmgixhcmav\",\"typeName\":\"foudor\",\"examples\":{\"rb\":{\"summary\":\"yprotwyp\",\"description\":\"d\",\"value\":\"dataxhugcm\",\"externalValue\":\"avlg\"},\"bdb\":{\"summary\":\"tp\",\"description\":\"tzfjltf\",\"value\":\"datazcyjtot\",\"externalValue\":\"opv\"},\"hohsd\":{\"summary\":\"gqqihedsvqwt\",\"description\":\"ky\",\"value\":\"datacysihs\",\"externalValue\":\"cw\"}}},{\"name\":\"mcdzsufcohdxbz\",\"description\":\"cmuapcvhd\",\"type\":\"evwqqxeyskonq\",\"defaultValue\":\"nkfkbgbzb\",\"required\":false,\"values\":[\"o\"],\"schemaId\":\"jmygvk\",\"typeName\":\"kjjeokbz\",\"examples\":{\"mqpnoda\":{\"summary\":\"rx\",\"description\":\"zurtleipqxbkwvz\",\"value\":\"datazvd\",\"externalValue\":\"zdix\"},\"wyyu\":{\"summary\":\"pqhe\",\"description\":\"ptmcgsbostzelnd\",\"value\":\"datatutmzl\",\"externalValue\":\"ojlvfhrbbpneqvc\"},\"cpilj\":{\"summary\":\"ochpprpr\",\"description\":\"mo\",\"value\":\"datayzejnhlbk\",\"externalValue\":\"z\"},\"apjwogqqnobpudcd\":{\"summary\":\"hzvechndbnwieho\",\"description\":\"wjwiuub\",\"value\":\"datafqsfa\",\"externalValue\":\"qtferrqwexjkmf\"}}}],\"examples\":{\"um\":{\"summary\":\"wpwyawbz\",\"description\":\"qbucljgkyexaoguy\",\"value\":\"datap\",\"externalValue\":\"sdaultxij\"},\"fzsvtuikzh\":{\"summary\":\"waz\",\"description\":\"qnmcjngzqdqx\",\"value\":\"datajw\",\"externalValue\":\"yfu\"}}}")
                .toObject(RepresentationContract.class);
        Assertions.assertEquals("mysu", model.contentType());
        Assertions.assertEquals("wq", model.schemaId());
        Assertions.assertEquals("tvlwijpsttexoq", model.typeName());
        Assertions.assertEquals("cyyufmh", model.formParameters().get(0).name());
        Assertions.assertEquals("nc", model.formParameters().get(0).description());
        Assertions.assertEquals("wmqs", model.formParameters().get(0).type());
        Assertions.assertEquals("cdqzhlctddu", model.formParameters().get(0).defaultValue());
        Assertions.assertEquals(false, model.formParameters().get(0).required());
        Assertions.assertEquals("fpch", model.formParameters().get(0).values().get(0));
        Assertions.assertEquals("bnjj", model.formParameters().get(0).schemaId());
        Assertions.assertEquals("gegydcwboxjum", model.formParameters().get(0).typeName());
        Assertions.assertEquals("lihrraiouaubr", model.formParameters().get(0).examples().get("yjdfqwmky").summary());
        Assertions
            .assertEquals("loqxfuojrngif", model.formParameters().get(0).examples().get("yjdfqwmky").description());
        Assertions
            .assertEquals("sccbiuimzd", model.formParameters().get(0).examples().get("yjdfqwmky").externalValue());
        Assertions.assertEquals("wpwyawbz", model.examples().get("um").summary());
        Assertions.assertEquals("qbucljgkyexaoguy", model.examples().get("um").description());
        Assertions.assertEquals("sdaultxij", model.examples().get("um").externalValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RepresentationContract model =
            new RepresentationContract()
                .withContentType("mysu")
                .withSchemaId("wq")
                .withTypeName("tvlwijpsttexoq")
                .withFormParameters(
                    Arrays
                        .asList(
                            new ParameterContract()
                                .withName("cyyufmh")
                                .withDescription("nc")
                                .withType("wmqs")
                                .withDefaultValue("cdqzhlctddu")
                                .withRequired(false)
                                .withValues(Arrays.asList("fpch"))
                                .withSchemaId("bnjj")
                                .withTypeName("gegydcwboxjum")
                                .withExamples(
                                    mapOf(
                                        "yjdfqwmky",
                                        new ParameterExampleContract()
                                            .withSummary("lihrraiouaubr")
                                            .withDescription("loqxfuojrngif")
                                            .withValue("dataz")
                                            .withExternalValue("sccbiuimzd"))),
                            new ParameterContract()
                                .withName("qufdvruzslzojh")
                                .withDescription("tfnmdx")
                                .withType("tngfdgugeyzihgr")
                                .withDefaultValue("ui")
                                .withRequired(false)
                                .withValues(Arrays.asList("mfp", "hojeevy"))
                                .withSchemaId("hsgz")
                                .withTypeName("zbgomfgbeg")
                                .withExamples(
                                    mapOf(
                                        "q",
                                        new ParameterExampleContract()
                                            .withSummary("eohibet")
                                            .withDescription("uankrrfxeeeb")
                                            .withValue("dataj")
                                            .withExternalValue("cvbmqzb"),
                                        "linmfgv",
                                        new ParameterExampleContract()
                                            .withSummary("aj")
                                            .withDescription("wxacevehj")
                                            .withValue("datayxoaf")
                                            .withExternalValue("oqltfae"))),
                            new ParameterContract()
                                .withName("irpghriypoqeyh")
                                .withDescription("h")
                                .withType("kprlpyznuc")
                                .withDefaultValue("dsmexiitdfux")
                                .withRequired(true)
                                .withValues(Arrays.asList("ibmi", "bnn"))
                                .withSchemaId("tgnljhnmgixhcmav")
                                .withTypeName("foudor")
                                .withExamples(
                                    mapOf(
                                        "rb",
                                        new ParameterExampleContract()
                                            .withSummary("yprotwyp")
                                            .withDescription("d")
                                            .withValue("dataxhugcm")
                                            .withExternalValue("avlg"),
                                        "bdb",
                                        new ParameterExampleContract()
                                            .withSummary("tp")
                                            .withDescription("tzfjltf")
                                            .withValue("datazcyjtot")
                                            .withExternalValue("opv"),
                                        "hohsd",
                                        new ParameterExampleContract()
                                            .withSummary("gqqihedsvqwt")
                                            .withDescription("ky")
                                            .withValue("datacysihs")
                                            .withExternalValue("cw"))),
                            new ParameterContract()
                                .withName("mcdzsufcohdxbz")
                                .withDescription("cmuapcvhd")
                                .withType("evwqqxeyskonq")
                                .withDefaultValue("nkfkbgbzb")
                                .withRequired(false)
                                .withValues(Arrays.asList("o"))
                                .withSchemaId("jmygvk")
                                .withTypeName("kjjeokbz")
                                .withExamples(
                                    mapOf(
                                        "mqpnoda",
                                        new ParameterExampleContract()
                                            .withSummary("rx")
                                            .withDescription("zurtleipqxbkwvz")
                                            .withValue("datazvd")
                                            .withExternalValue("zdix"),
                                        "wyyu",
                                        new ParameterExampleContract()
                                            .withSummary("pqhe")
                                            .withDescription("ptmcgsbostzelnd")
                                            .withValue("datatutmzl")
                                            .withExternalValue("ojlvfhrbbpneqvc"),
                                        "cpilj",
                                        new ParameterExampleContract()
                                            .withSummary("ochpprpr")
                                            .withDescription("mo")
                                            .withValue("datayzejnhlbk")
                                            .withExternalValue("z"),
                                        "apjwogqqnobpudcd",
                                        new ParameterExampleContract()
                                            .withSummary("hzvechndbnwieho")
                                            .withDescription("wjwiuub")
                                            .withValue("datafqsfa")
                                            .withExternalValue("qtferrqwexjkmf")))))
                .withExamples(
                    mapOf(
                        "um",
                        new ParameterExampleContract()
                            .withSummary("wpwyawbz")
                            .withDescription("qbucljgkyexaoguy")
                            .withValue("datap")
                            .withExternalValue("sdaultxij"),
                        "fzsvtuikzh",
                        new ParameterExampleContract()
                            .withSummary("waz")
                            .withDescription("qnmcjngzqdqx")
                            .withValue("datajw")
                            .withExternalValue("yfu")));
        model = BinaryData.fromObject(model).toObject(RepresentationContract.class);
        Assertions.assertEquals("mysu", model.contentType());
        Assertions.assertEquals("wq", model.schemaId());
        Assertions.assertEquals("tvlwijpsttexoq", model.typeName());
        Assertions.assertEquals("cyyufmh", model.formParameters().get(0).name());
        Assertions.assertEquals("nc", model.formParameters().get(0).description());
        Assertions.assertEquals("wmqs", model.formParameters().get(0).type());
        Assertions.assertEquals("cdqzhlctddu", model.formParameters().get(0).defaultValue());
        Assertions.assertEquals(false, model.formParameters().get(0).required());
        Assertions.assertEquals("fpch", model.formParameters().get(0).values().get(0));
        Assertions.assertEquals("bnjj", model.formParameters().get(0).schemaId());
        Assertions.assertEquals("gegydcwboxjum", model.formParameters().get(0).typeName());
        Assertions.assertEquals("lihrraiouaubr", model.formParameters().get(0).examples().get("yjdfqwmky").summary());
        Assertions
            .assertEquals("loqxfuojrngif", model.formParameters().get(0).examples().get("yjdfqwmky").description());
        Assertions
            .assertEquals("sccbiuimzd", model.formParameters().get(0).examples().get("yjdfqwmky").externalValue());
        Assertions.assertEquals("wpwyawbz", model.examples().get("um").summary());
        Assertions.assertEquals("qbucljgkyexaoguy", model.examples().get("um").description());
        Assertions.assertEquals("sdaultxij", model.examples().get("um").externalValue());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
