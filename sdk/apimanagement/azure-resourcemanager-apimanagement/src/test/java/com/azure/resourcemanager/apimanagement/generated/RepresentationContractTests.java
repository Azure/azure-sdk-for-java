// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.apimanagement.models.ParameterContract;
import com.azure.resourcemanager.apimanagement.models.ParameterExampleContract;
import com.azure.resourcemanager.apimanagement.models.RepresentationContract;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RepresentationContractTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RepresentationContract model = BinaryData.fromString(
            "{\"contentType\":\"pqxbkwvzgnzvdf\",\"schemaId\":\"d\",\"typeName\":\"zmqpnodawopqhewj\",\"formParameters\":[{\"name\":\"cgsbost\",\"description\":\"lnd\",\"type\":\"atutmzlbiojlvfhr\",\"defaultValue\":\"pn\",\"required\":true,\"values\":[\"wyyu\",\"mochpprprsnmok\",\"yzejnhlbk\"],\"schemaId\":\"z\",\"typeName\":\"piljhahzvech\",\"examples\":{\"pud\":{\"summary\":\"wieholewjwiu\",\"description\":\"wefqsfapaqtferr\",\"value\":\"dataex\",\"externalValue\":\"mfxapjwogqqno\"},\"um\":{\"summary\":\"abtqwpwyawbzasqb\",\"description\":\"ljgkyex\",\"value\":\"dataguyaip\",\"externalValue\":\"sdaultxij\"},\"fzsvtuikzh\":{\"summary\":\"waz\",\"description\":\"qnmcjngzqdqx\",\"value\":\"datajw\",\"externalValue\":\"yfu\"}}},{\"name\":\"jqg\",\"description\":\"fh\",\"type\":\"l\",\"defaultValue\":\"ryxynqnzrd\",\"required\":false,\"values\":[\"xznptgoeiyb\",\"abpfhvfs\",\"kvntjlrigjkskyri\"],\"schemaId\":\"vzidsxwaab\",\"typeName\":\"ifrygzn\",\"examples\":{\"xecwcro\":{\"summary\":\"ri\",\"description\":\"zob\",\"value\":\"datapxl\",\"externalValue\":\"lnelxieixynl\"}}},{\"name\":\"phslhcawjutifdw\",\"description\":\"vigorqjbttzhragl\",\"type\":\"afhonqj\",\"defaultValue\":\"eickpz\",\"required\":false,\"values\":[\"mxelnwcltyjed\",\"xxmlfmkqscazua\",\"xtzx\",\"uamwabzxrvxc\"],\"schemaId\":\"hsphaivmxyas\",\"typeName\":\"vgsgzwywakoihkn\",\"examples\":{\"jlzqnhc\":{\"summary\":\"lmljhlnymzotq\",\"description\":\"yuzcbmqqvxmvw\",\"value\":\"datatayx\",\"externalValue\":\"supe\"},\"o\":{\"summary\":\"ql\",\"description\":\"zoibgsxg\",\"value\":\"datafyq\",\"externalValue\":\"mpqoxw\"},\"vqvxk\":{\"summary\":\"bxiqxeiiqbimht\",\"description\":\"winhehfqpo\",\"value\":\"datawbcb\",\"externalValue\":\"mbnkb\"}}},{\"name\":\"ivqiheb\",\"description\":\"swbzuwfmdurage\",\"type\":\"izvcjfe\",\"defaultValue\":\"sdjubggbqigkxkbs\",\"required\":false,\"values\":[\"gacyrcmjdmspo\"],\"schemaId\":\"pv\",\"typeName\":\"rylniofrzg\",\"examples\":{\"v\":{\"summary\":\"dmstk\",\"description\":\"l\",\"value\":\"databcuiiz\",\"externalValue\":\"twfans\"}}}],\"examples\":{\"cez\":{\"summary\":\"mik\",\"description\":\"tbzbkiwbuqnyophz\",\"value\":\"datal\",\"externalValue\":\"crpfbcunez\"},\"fewz\":{\"summary\":\"fwyfwlwxjwet\",\"description\":\"sihclafzvaylp\",\"value\":\"datasqqw\",\"externalValue\":\"cmwqkchcxwa\"},\"ptfujgicgaaoept\":{\"summary\":\"jexfdeqvhp\",\"description\":\"lkkshkbffmbmx\",\"value\":\"datargywwp\",\"externalValue\":\"xs\"}}}")
            .toObject(RepresentationContract.class);
        Assertions.assertEquals("pqxbkwvzgnzvdf", model.contentType());
        Assertions.assertEquals("d", model.schemaId());
        Assertions.assertEquals("zmqpnodawopqhewj", model.typeName());
        Assertions.assertEquals("cgsbost", model.formParameters().get(0).name());
        Assertions.assertEquals("lnd", model.formParameters().get(0).description());
        Assertions.assertEquals("atutmzlbiojlvfhr", model.formParameters().get(0).type());
        Assertions.assertEquals("pn", model.formParameters().get(0).defaultValue());
        Assertions.assertTrue(model.formParameters().get(0).required());
        Assertions.assertEquals("wyyu", model.formParameters().get(0).values().get(0));
        Assertions.assertEquals("z", model.formParameters().get(0).schemaId());
        Assertions.assertEquals("piljhahzvech", model.formParameters().get(0).typeName());
        Assertions.assertEquals("wieholewjwiu", model.formParameters().get(0).examples().get("pud").summary());
        Assertions.assertEquals("wefqsfapaqtferr", model.formParameters().get(0).examples().get("pud").description());
        Assertions.assertEquals("mfxapjwogqqno", model.formParameters().get(0).examples().get("pud").externalValue());
        Assertions.assertEquals("mik", model.examples().get("cez").summary());
        Assertions.assertEquals("tbzbkiwbuqnyophz", model.examples().get("cez").description());
        Assertions.assertEquals("crpfbcunez", model.examples().get("cez").externalValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RepresentationContract model = new RepresentationContract().withContentType("pqxbkwvzgnzvdf")
            .withSchemaId("d")
            .withTypeName("zmqpnodawopqhewj")
            .withFormParameters(Arrays.asList(
                new ParameterContract().withName("cgsbost")
                    .withDescription("lnd")
                    .withType("atutmzlbiojlvfhr")
                    .withDefaultValue("pn")
                    .withRequired(true)
                    .withValues(Arrays.asList("wyyu", "mochpprprsnmok", "yzejnhlbk"))
                    .withSchemaId("z")
                    .withTypeName("piljhahzvech")
                    .withExamples(mapOf("pud",
                        new ParameterExampleContract().withSummary("wieholewjwiu")
                            .withDescription("wefqsfapaqtferr")
                            .withValue("dataex")
                            .withExternalValue("mfxapjwogqqno"),
                        "um",
                        new ParameterExampleContract().withSummary("abtqwpwyawbzasqb")
                            .withDescription("ljgkyex")
                            .withValue("dataguyaip")
                            .withExternalValue("sdaultxij"),
                        "fzsvtuikzh",
                        new ParameterExampleContract().withSummary("waz")
                            .withDescription("qnmcjngzqdqx")
                            .withValue("datajw")
                            .withExternalValue("yfu"))),
                new ParameterContract().withName("jqg")
                    .withDescription("fh")
                    .withType("l")
                    .withDefaultValue("ryxynqnzrd")
                    .withRequired(false)
                    .withValues(Arrays.asList("xznptgoeiyb", "abpfhvfs", "kvntjlrigjkskyri"))
                    .withSchemaId("vzidsxwaab")
                    .withTypeName("ifrygzn")
                    .withExamples(mapOf("xecwcro",
                        new ParameterExampleContract().withSummary("ri")
                            .withDescription("zob")
                            .withValue("datapxl")
                            .withExternalValue("lnelxieixynl"))),
                new ParameterContract().withName("phslhcawjutifdw")
                    .withDescription("vigorqjbttzhragl")
                    .withType("afhonqj")
                    .withDefaultValue("eickpz")
                    .withRequired(false)
                    .withValues(Arrays.asList("mxelnwcltyjed", "xxmlfmkqscazua", "xtzx", "uamwabzxrvxc"))
                    .withSchemaId("hsphaivmxyas")
                    .withTypeName("vgsgzwywakoihkn")
                    .withExamples(mapOf("jlzqnhc",
                        new ParameterExampleContract().withSummary("lmljhlnymzotq")
                            .withDescription("yuzcbmqqvxmvw")
                            .withValue("datatayx")
                            .withExternalValue("supe"),
                        "o",
                        new ParameterExampleContract().withSummary("ql")
                            .withDescription("zoibgsxg")
                            .withValue("datafyq")
                            .withExternalValue("mpqoxw"),
                        "vqvxk",
                        new ParameterExampleContract().withSummary("bxiqxeiiqbimht")
                            .withDescription("winhehfqpo")
                            .withValue("datawbcb")
                            .withExternalValue("mbnkb"))),
                new ParameterContract().withName("ivqiheb")
                    .withDescription("swbzuwfmdurage")
                    .withType("izvcjfe")
                    .withDefaultValue("sdjubggbqigkxkbs")
                    .withRequired(false)
                    .withValues(Arrays.asList("gacyrcmjdmspo"))
                    .withSchemaId("pv")
                    .withTypeName("rylniofrzg")
                    .withExamples(mapOf("v",
                        new ParameterExampleContract().withSummary("dmstk")
                            .withDescription("l")
                            .withValue("databcuiiz")
                            .withExternalValue("twfans")))))
            .withExamples(mapOf("cez",
                new ParameterExampleContract().withSummary("mik")
                    .withDescription("tbzbkiwbuqnyophz")
                    .withValue("datal")
                    .withExternalValue("crpfbcunez"),
                "fewz",
                new ParameterExampleContract().withSummary("fwyfwlwxjwet")
                    .withDescription("sihclafzvaylp")
                    .withValue("datasqqw")
                    .withExternalValue("cmwqkchcxwa"),
                "ptfujgicgaaoept",
                new ParameterExampleContract().withSummary("jexfdeqvhp")
                    .withDescription("lkkshkbffmbmx")
                    .withValue("datargywwp")
                    .withExternalValue("xs")));
        model = BinaryData.fromObject(model).toObject(RepresentationContract.class);
        Assertions.assertEquals("pqxbkwvzgnzvdf", model.contentType());
        Assertions.assertEquals("d", model.schemaId());
        Assertions.assertEquals("zmqpnodawopqhewj", model.typeName());
        Assertions.assertEquals("cgsbost", model.formParameters().get(0).name());
        Assertions.assertEquals("lnd", model.formParameters().get(0).description());
        Assertions.assertEquals("atutmzlbiojlvfhr", model.formParameters().get(0).type());
        Assertions.assertEquals("pn", model.formParameters().get(0).defaultValue());
        Assertions.assertTrue(model.formParameters().get(0).required());
        Assertions.assertEquals("wyyu", model.formParameters().get(0).values().get(0));
        Assertions.assertEquals("z", model.formParameters().get(0).schemaId());
        Assertions.assertEquals("piljhahzvech", model.formParameters().get(0).typeName());
        Assertions.assertEquals("wieholewjwiu", model.formParameters().get(0).examples().get("pud").summary());
        Assertions.assertEquals("wefqsfapaqtferr", model.formParameters().get(0).examples().get("pud").description());
        Assertions.assertEquals("mfxapjwogqqno", model.formParameters().get(0).examples().get("pud").externalValue());
        Assertions.assertEquals("mik", model.examples().get("cez").summary());
        Assertions.assertEquals("tbzbkiwbuqnyophz", model.examples().get("cez").description());
        Assertions.assertEquals("crpfbcunez", model.examples().get("cez").externalValue());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
