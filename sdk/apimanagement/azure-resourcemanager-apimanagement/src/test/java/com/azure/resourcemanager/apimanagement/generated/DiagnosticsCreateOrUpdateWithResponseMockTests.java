// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.apimanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.apimanagement.ApiManagementManager;
import com.azure.resourcemanager.apimanagement.fluent.models.DiagnosticContractInner;
import com.azure.resourcemanager.apimanagement.models.AlwaysLog;
import com.azure.resourcemanager.apimanagement.models.BodyDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.DataMasking;
import com.azure.resourcemanager.apimanagement.models.DataMaskingEntity;
import com.azure.resourcemanager.apimanagement.models.DiagnosticContract;
import com.azure.resourcemanager.apimanagement.models.HttpCorrelationProtocol;
import com.azure.resourcemanager.apimanagement.models.HttpMessageDiagnostic;
import com.azure.resourcemanager.apimanagement.models.OperationNameFormat;
import com.azure.resourcemanager.apimanagement.models.PipelineDiagnosticSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingSettings;
import com.azure.resourcemanager.apimanagement.models.SamplingType;
import com.azure.resourcemanager.apimanagement.models.Verbosity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"alwaysLog\":\"allErrors\",\"loggerId\":\"lqeronz\",\"sampling\":{\"samplingType\":\"fixed\",\"percentage\":27.00835432939276},\"frontend\":{\"request\":{\"headers\":[\"vytqa\"],\"body\":{\"bytes\":1072008796},\"dataMasking\":{\"queryParams\":[{},{},{},{}],\"headers\":[{}]}},\"response\":{\"headers\":[\"vzpfdkaxgbiw\"],\"body\":{\"bytes\":1585461596},\"dataMasking\":{\"queryParams\":[{},{},{}],\"headers\":[{},{},{}]}}},\"backend\":{\"request\":{\"headers\":[\"rmt\",\"x\",\"jmpdvrjzwaw\",\"ewajccsdjuz\"],\"body\":{\"bytes\":1320483469},\"dataMasking\":{\"queryParams\":[{},{}],\"headers\":[{},{},{},{}]}},\"response\":{\"headers\":[\"u\",\"p\",\"pxhhboigzxkop\",\"lrzhtocjzfppexu\"],\"body\":{\"bytes\":696163506},\"dataMasking\":{\"queryParams\":[{}],\"headers\":[{},{},{},{}]}}},\"logClientIp\":true,\"httpCorrelationProtocol\":\"None\",\"verbosity\":\"error\",\"operationNameFormat\":\"Url\",\"metrics\":false},\"id\":\"b\",\"name\":\"swskbbbj\",\"type\":\"yp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ApiManagementManager manager = ApiManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DiagnosticContract response
            = manager.diagnostics()
                .createOrUpdateWithResponse("kphvdlo", "xzpqditudcltf", "ieileemw",
                    new DiagnosticContractInner().withAlwaysLog(AlwaysLog.ALL_ERRORS)
                        .withLoggerId("ldop")
                        .withSampling(new SamplingSettings().withSamplingType(SamplingType.FIXED)
                            .withPercentage(6.853512205600265D))
                        .withFrontend(
                            new PipelineDiagnosticSettings()
                                .withRequest(new HttpMessageDiagnostic().withHeaders(Arrays.asList("km", "bn", "dpidi"))
                                    .withBody(new BodyDiagnosticSettings().withBytes(1851019598))
                                    .withDataMasking(new DataMasking()
                                        .withQueryParams(
                                            Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity()))
                                        .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                                .withResponse(new HttpMessageDiagnostic()
                                    .withHeaders(Arrays.asList("loqavst", "zavkyjjludnmbj", "bngzldvvd", "optythctoxo"))
                                    .withBody(new BodyDiagnosticSettings().withBytes(1200940908))
                                    .withDataMasking(new DataMasking()
                                        .withQueryParams(Arrays.asList(new DataMaskingEntity()))
                                        .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity())))))
                        .withBackend(
                            new PipelineDiagnosticSettings()
                                .withRequest(new HttpMessageDiagnostic()
                                    .withHeaders(Arrays.asList("dsssfzsgzguspej", "meqgxhwispsogdbl", "jsbaqxaxtuxir"))
                                    .withBody(new BodyDiagnosticSettings().withBytes(958061811))
                                    .withDataMasking(new DataMasking()
                                        .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                            new DataMaskingEntity()))
                                        .withHeaders(Arrays.asList(new DataMaskingEntity()))))
                                .withResponse(new HttpMessageDiagnostic()
                                    .withHeaders(Arrays.asList("uixwonkrnizd", "ywab", "itn"))
                                    .withBody(new BodyDiagnosticSettings().withBytes(1190842512))
                                    .withDataMasking(new DataMasking()
                                        .withQueryParams(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                            new DataMaskingEntity(), new DataMaskingEntity()))
                                        .withHeaders(Arrays.asList(new DataMaskingEntity(), new DataMaskingEntity(),
                                            new DataMaskingEntity())))))
                        .withLogClientIp(false)
                        .withHttpCorrelationProtocol(HttpCorrelationProtocol.NONE)
                        .withVerbosity(Verbosity.INFORMATION)
                        .withOperationNameFormat(OperationNameFormat.URL)
                        .withMetrics(false),
                    "dgzfoiqzsuspa", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(AlwaysLog.ALL_ERRORS, response.alwaysLog());
        Assertions.assertEquals("lqeronz", response.loggerId());
        Assertions.assertEquals(SamplingType.FIXED, response.sampling().samplingType());
        Assertions.assertEquals(27.00835432939276D, response.sampling().percentage());
        Assertions.assertEquals("vytqa", response.frontend().request().headers().get(0));
        Assertions.assertEquals(1072008796, response.frontend().request().body().bytes());
        Assertions.assertEquals("vzpfdkaxgbiw", response.frontend().response().headers().get(0));
        Assertions.assertEquals(1585461596, response.frontend().response().body().bytes());
        Assertions.assertEquals("rmt", response.backend().request().headers().get(0));
        Assertions.assertEquals(1320483469, response.backend().request().body().bytes());
        Assertions.assertEquals("u", response.backend().response().headers().get(0));
        Assertions.assertEquals(696163506, response.backend().response().body().bytes());
        Assertions.assertEquals(true, response.logClientIp());
        Assertions.assertEquals(HttpCorrelationProtocol.NONE, response.httpCorrelationProtocol());
        Assertions.assertEquals(Verbosity.ERROR, response.verbosity());
        Assertions.assertEquals(OperationNameFormat.URL, response.operationNameFormat());
        Assertions.assertEquals(false, response.metrics());
    }
}
