/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.v2018_06_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.implementation.PolicyContractInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.implementation.ApiManagementManager;

/**
 * Type representing ProductPolicyContract.
 */
public interface ProductPolicyContract extends HasInner<PolicyContractInner>, Indexable, Refreshable<ProductPolicyContract>, Updatable<ProductPolicyContract.Update>, HasManager<ApiManagementManager> {
    /**
     * @return the contentFormat value.
     */
    PolicyContentFormat contentFormat();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the policyContent value.
     */
    String policyContent();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the ProductPolicyContract definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithProduct, DefinitionStages.WithIfMatch, DefinitionStages.WithPolicyContent, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ProductPolicyContract definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ProductPolicyContract definition.
         */
        interface Blank extends WithProduct {
        }

        /**
         * The stage of the productpolicycontract definition allowing to specify Product.
         */
        interface WithProduct {
           /**
            * Specifies resourceGroupName, serviceName, productId.
            * @param resourceGroupName The name of the resource group
            * @param serviceName The name of the API Management service
            * @param productId Product identifier. Must be unique in the current API Management service instance
            * @return the next definition stage
            */
            WithIfMatch withExistingProduct(String resourceGroupName, String serviceName, String productId);
        }

        /**
         * The stage of the productpolicycontract definition allowing to specify IfMatch.
         */
        interface WithIfMatch {
           /**
            * Specifies ifMatch.
            * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
            * @return the next definition stage
            */
            WithPolicyContent withIfMatch(String ifMatch);
        }

        /**
         * The stage of the productpolicycontract definition allowing to specify PolicyContent.
         */
        interface WithPolicyContent {
           /**
            * Specifies policyContent.
            * @param policyContent Json escaped Xml Encoded contents of the Policy
            * @return the next definition stage
            */
            WithCreate withPolicyContent(String policyContent);
        }

        /**
         * The stage of the productpolicycontract definition allowing to specify ContentFormat.
         */
        interface WithContentFormat {
            /**
             * Specifies contentFormat.
             * @param contentFormat Format of the policyContent. Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
             * @return the next definition stage
             */
            WithCreate withContentFormat(PolicyContentFormat contentFormat);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ProductPolicyContract>, DefinitionStages.WithContentFormat {
        }
    }
    /**
     * The template for a ProductPolicyContract update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ProductPolicyContract>, UpdateStages.WithIfMatch, UpdateStages.WithContentFormat {
    }

    /**
     * Grouping of ProductPolicyContract update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the productpolicycontract update allowing to specify IfMatch.
         */
        interface WithIfMatch {
            /**
             * Specifies ifMatch.
             * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity
             * @return the next update stage
             */
            Update withIfMatch(String ifMatch);
        }

        /**
         * The stage of the productpolicycontract update allowing to specify ContentFormat.
         */
        interface WithContentFormat {
            /**
             * Specifies contentFormat.
             * @param contentFormat Format of the policyContent. Possible values include: 'xml', 'xml-link', 'rawxml', 'rawxml-link'
             * @return the next update stage
             */
            Update withContentFormat(PolicyContentFormat contentFormat);
        }

    }
}
