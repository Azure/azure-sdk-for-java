/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.apimanagement.v2018_06_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.ApiRevisions;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.apimanagement.v2018_06_01_preview.ApiRevisionContract;

class ApiRevisionsImpl extends WrapperImpl<ApiRevisionsInner> implements ApiRevisions {
    private final ApiManagementManager manager;

    ApiRevisionsImpl(ApiManagementManager manager) {
        super(manager.inner().apiRevisions());
        this.manager = manager;
    }

    public ApiManagementManager manager() {
        return this.manager;
    }

    private ApiRevisionContractImpl wrapModel(ApiRevisionContractInner inner) {
        return  new ApiRevisionContractImpl(inner, manager());
    }

    @Override
    public Observable<ApiRevisionContract> listAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        ApiRevisionsInner client = this.inner();
        return client.listAsync(resourceGroupName, serviceName, apiId)
        .flatMapIterable(new Func1<Page<ApiRevisionContractInner>, Iterable<ApiRevisionContractInner>>() {
            @Override
            public Iterable<ApiRevisionContractInner> call(Page<ApiRevisionContractInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ApiRevisionContractInner, ApiRevisionContract>() {
            @Override
            public ApiRevisionContract call(ApiRevisionContractInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
