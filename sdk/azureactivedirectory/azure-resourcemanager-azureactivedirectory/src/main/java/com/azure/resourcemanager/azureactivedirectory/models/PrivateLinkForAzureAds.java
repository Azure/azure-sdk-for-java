// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureactivedirectory.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of PrivateLinkForAzureAds. */
public interface PrivateLinkForAzureAds {
    /**
     * Gets a private link policy with a given name.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name.
     */
    PrivateLinkPolicy getByResourceGroup(String resourceGroupName, String policyName);

    /**
     * Gets a private link policy with a given name.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name along with {@link Response}.
     */
    Response<PrivateLinkPolicy> getByResourceGroupWithResponse(
        String resourceGroupName, String policyName, Context context);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String policyName);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String policyName, Context context);

    /**
     * Lists all Private Link Policies For AzureAD in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkPolicy> list();

    /**
     * Lists all Private Link Policies For AzureAD in the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkPolicy> list(Context context);

    /**
     * Operation to return the list of Private Link Policies For AzureAD scoped to the resourceGroup.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkPolicy> listByResourceGroup(String resourceGroupName);

    /**
     * Operation to return the list of Private Link Policies For AzureAD scoped to the resourceGroup.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PrivateLinkPolicy> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets a private link policy with a given name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name along with {@link Response}.
     */
    PrivateLinkPolicy getById(String id);

    /**
     * Gets a private link policy with a given name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name along with {@link Response}.
     */
    Response<PrivateLinkPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new PrivateLinkPolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new PrivateLinkPolicy definition.
     */
    PrivateLinkPolicy.DefinitionStages.Blank define(String name);
}
