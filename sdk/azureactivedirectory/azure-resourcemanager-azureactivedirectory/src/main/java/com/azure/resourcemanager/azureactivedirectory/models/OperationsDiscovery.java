// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureactivedirectory.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Operations discovery class. */
@Fluent
public final class OperationsDiscovery {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OperationsDiscovery.class);

    /*
     * Name of the API. The name of the operation being performed on this
     * particular object. It should match the action name that appears in RBAC
     * / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action *
     * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write *
     * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in
     * order: (1) Resource Provider Namespace (2) Type hierarchy for which the
     * action applies (e.g. server/databases for a SQL Azure database) (3)
     * Read, Write, Action or Delete indicating which type applies. If it is a
     * PUT/PATCH on a collection or named value, Write should be used. If it is
     * a GET, Read should be used. If it is a DELETE, Delete should be used. If
     * it is a POST, Action should be used.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Indicates whether the operation applies to data-plane. Set the value to
     * true for data-plane operations and false for ARM/control-plane
     * operations.
     */
    @JsonProperty(value = "isDataAction")
    private Boolean isDataAction;

    /*
     * Object type
     */
    @JsonProperty(value = "display")
    private Display display;

    /*
     * Origin. The intended executor of the operation; governs the display of
     * the operation in the RBAC UX and the audit logs UX. Default value is
     * "user,system"
     */
    @JsonProperty(value = "origin")
    private String origin;

    /*
     * Properties. Reserved for future use.
     */
    @JsonProperty(value = "properties")
    private Object properties;

    /**
     * Get the name property: Name of the API. The name of the operation being performed on this particular object. It
     * should match the action name that appears in RBAC / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2)
     * Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write,
     * Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should
     * be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action
     * should be used.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the API. The name of the operation being performed on this particular object. It
     * should match the action name that appears in RBAC / the event service. Examples of operations include: *
     * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action *
     * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read *
     * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2)
     * Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write,
     * Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should
     * be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action
     * should be used.
     *
     * @param name the name value to set.
     * @return the OperationsDiscovery object itself.
     */
    public OperationsDiscovery withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the isDataAction property: Indicates whether the operation applies to data-plane. Set the value to true for
     * data-plane operations and false for ARM/control-plane operations.
     *
     * @return the isDataAction value.
     */
    public Boolean isDataAction() {
        return this.isDataAction;
    }

    /**
     * Set the isDataAction property: Indicates whether the operation applies to data-plane. Set the value to true for
     * data-plane operations and false for ARM/control-plane operations.
     *
     * @param isDataAction the isDataAction value to set.
     * @return the OperationsDiscovery object itself.
     */
    public OperationsDiscovery withIsDataAction(Boolean isDataAction) {
        this.isDataAction = isDataAction;
        return this;
    }

    /**
     * Get the display property: Object type.
     *
     * @return the display value.
     */
    public Display display() {
        return this.display;
    }

    /**
     * Set the display property: Object type.
     *
     * @param display the display value to set.
     * @return the OperationsDiscovery object itself.
     */
    public OperationsDiscovery withDisplay(Display display) {
        this.display = display;
        return this;
    }

    /**
     * Get the origin property: Origin. The intended executor of the operation; governs the display of the operation in
     * the RBAC UX and the audit logs UX. Default value is "user,system".
     *
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Set the origin property: Origin. The intended executor of the operation; governs the display of the operation in
     * the RBAC UX and the audit logs UX. Default value is "user,system".
     *
     * @param origin the origin value to set.
     * @return the OperationsDiscovery object itself.
     */
    public OperationsDiscovery withOrigin(String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the properties property: Properties. Reserved for future use.
     *
     * @return the properties value.
     */
    public Object properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties. Reserved for future use.
     *
     * @param properties the properties value to set.
     * @return the OperationsDiscovery object itself.
     */
    public OperationsDiscovery withProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (display() != null) {
            display().validate();
        }
    }
}
