// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureactivedirectory.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureactivedirectory.fluent.PrivateLinkForAzureAdsClient;
import com.azure.resourcemanager.azureactivedirectory.fluent.models.PrivateLinkPolicyInner;
import com.azure.resourcemanager.azureactivedirectory.models.PrivateLinkForAzureAds;
import com.azure.resourcemanager.azureactivedirectory.models.PrivateLinkPolicy;

public final class PrivateLinkForAzureAdsImpl implements PrivateLinkForAzureAds {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateLinkForAzureAdsImpl.class);

    private final PrivateLinkForAzureAdsClient innerClient;

    private final com.azure.resourcemanager.azureactivedirectory.AzureactivedirectoryManager serviceManager;

    public PrivateLinkForAzureAdsImpl(
        PrivateLinkForAzureAdsClient innerClient,
        com.azure.resourcemanager.azureactivedirectory.AzureactivedirectoryManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PrivateLinkPolicy getByResourceGroup(String resourceGroupName, String policyName) {
        PrivateLinkPolicyInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, policyName);
        if (inner != null) {
            return new PrivateLinkPolicyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateLinkPolicy> getByResourceGroupWithResponse(
        String resourceGroupName, String policyName, Context context) {
        Response<PrivateLinkPolicyInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, policyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateLinkPolicyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String policyName) {
        this.serviceClient().delete(resourceGroupName, policyName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String policyName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, policyName, context);
    }

    public PagedIterable<PrivateLinkPolicy> list() {
        PagedIterable<PrivateLinkPolicyInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new PrivateLinkPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateLinkPolicy> list(Context context) {
        PagedIterable<PrivateLinkPolicyInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new PrivateLinkPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateLinkPolicy> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PrivateLinkPolicyInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new PrivateLinkPolicyImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateLinkPolicy> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PrivateLinkPolicyInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new PrivateLinkPolicyImpl(inner1, this.manager()));
    }

    public PrivateLinkPolicy getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "privateLinkForAzureAd");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkForAzureAd'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, policyName, Context.NONE).getValue();
    }

    public Response<PrivateLinkPolicy> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "privateLinkForAzureAd");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkForAzureAd'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, policyName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "privateLinkForAzureAd");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkForAzureAd'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, policyName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourcegroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourcegroups'.", id)));
        }
        String policyName = Utils.getValueFromIdByName(id, "privateLinkForAzureAd");
        if (policyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkForAzureAd'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, policyName, context);
    }

    private PrivateLinkForAzureAdsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureactivedirectory.AzureactivedirectoryManager manager() {
        return this.serviceManager;
    }

    public PrivateLinkPolicyImpl define(String name) {
        return new PrivateLinkPolicyImpl(name, this.manager());
    }
}
