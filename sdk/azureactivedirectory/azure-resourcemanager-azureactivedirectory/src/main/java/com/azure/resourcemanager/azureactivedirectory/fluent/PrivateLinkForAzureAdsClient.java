// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureactivedirectory.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azureactivedirectory.fluent.models.PrivateLinkPolicyInner;
import com.azure.resourcemanager.azureactivedirectory.models.PrivateLinkPolicyUpdateParameter;

/** An instance of this class provides access to all the operations defined in PrivateLinkForAzureAdsClient. */
public interface PrivateLinkForAzureAdsClient {
    /**
     * Creates a private link policy.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param privateLinkPolicy private link Policy supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of privateLink Policy configuration object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PrivateLinkPolicyInner>, PrivateLinkPolicyInner> beginCreate(
        String resourceGroupName, String policyName, PrivateLinkPolicyInner privateLinkPolicy);

    /**
     * Creates a private link policy.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param privateLinkPolicy private link Policy supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of privateLink Policy configuration object.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PrivateLinkPolicyInner>, PrivateLinkPolicyInner> beginCreate(
        String resourceGroupName, String policyName, PrivateLinkPolicyInner privateLinkPolicy, Context context);

    /**
     * Creates a private link policy.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param privateLinkPolicy private link Policy supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return privateLink Policy configuration object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrivateLinkPolicyInner create(
        String resourceGroupName, String policyName, PrivateLinkPolicyInner privateLinkPolicy);

    /**
     * Creates a private link policy.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param privateLinkPolicy private link Policy supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return privateLink Policy configuration object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrivateLinkPolicyInner create(
        String resourceGroupName, String policyName, PrivateLinkPolicyInner privateLinkPolicy, Context context);

    /**
     * Updates private link policy tags with specified values.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return privateLink Policy configuration object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrivateLinkPolicyInner update(String resourceGroupName, String policyName);

    /**
     * Updates private link policy tags with specified values.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param privateLinkPolicy Private Link Policy resource with the tags to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return privateLink Policy configuration object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PrivateLinkPolicyInner> updateWithResponse(
        String resourceGroupName,
        String policyName,
        PrivateLinkPolicyUpdateParameter privateLinkPolicy,
        Context context);

    /**
     * Gets a private link policy with a given name.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrivateLinkPolicyInner getByResourceGroup(String resourceGroupName, String policyName);

    /**
     * Gets a private link policy with a given name.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a private link policy with a given name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PrivateLinkPolicyInner> getByResourceGroupWithResponse(
        String resourceGroupName, String policyName, Context context);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String policyName);

    /**
     * Deletes a private link policy. When operation completes, status code 200 returned without content.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param policyName The name of the private link policy in Azure AD.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String policyName, Context context);

    /**
     * Lists all Private Link Policies For AzureAD in the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrivateLinkPolicyInner> list();

    /**
     * Lists all Private Link Policies For AzureAD in the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrivateLinkPolicyInner> list(Context context);

    /**
     * Operation to return the list of Private Link Policies For AzureAD scoped to the resourceGroup.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrivateLinkPolicyInner> listByResourceGroup(String resourceGroupName);

    /**
     * Operation to return the list of Private Link Policies For AzureAD scoped to the resourceGroup.
     *
     * @param resourceGroupName Name of an Azure resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of private link policies as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrivateLinkPolicyInner> listByResourceGroup(String resourceGroupName, Context context);
}
