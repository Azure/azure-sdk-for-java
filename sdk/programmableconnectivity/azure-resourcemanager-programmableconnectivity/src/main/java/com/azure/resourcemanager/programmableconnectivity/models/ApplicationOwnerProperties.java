// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details about the Application Owner (i.e. organization) that would use the Operator's Network APIs.
 */
@Fluent
public final class ApplicationOwnerProperties implements JsonSerializable<ApplicationOwnerProperties> {
    /*
     * Common name of the organization owning the application.
     */
    private String name;

    /*
     * Legal name of the organization owning the application.
     */
    private String legalName;

    /*
     * Trading name of the organization owning the application.
     */
    private String tradingName;

    /*
     * A description of the organization owning the application.
     */
    private String organizationDescription;

    /*
     * Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased.
     */
    private String taxNumber;

    /*
     * The type of organization that the Application Owner is.
     */
    private OrganizationType organizationType;

    /*
     * ID number for official identification of the organization.
     */
    private String organizationIdentificationId;

    /*
     * Issuing organization of the ID for official identification of the organization.
     */
    private String organizationIdentificationIssuer;

    /*
     * Type of official identification of the organization.
     */
    private String organizationIdentificationType;

    /*
     * Email address for the person responsible for the use of Network APIs in this application.
     */
    private String contactEmailAddress;

    /*
     * Legal representative of the organization.
     */
    private Person legalRepresentative;

    /*
     * Privacy manager of the organization.
     */
    private Person privacyManager;

    /*
     * Data Protection Officer of the organization.
     */
    private Person dataProtectionOfficer;

    /*
     * Registered Geographic address.
     */
    private GeographicAddress registeredGeographicAddress;

    /*
     * URL for the organization's privacy policy.
     */
    private String privacyPolicyUrl;

    /*
     * List of local representatives.
     */
    private List<LocalRepresentative> localRepresentatives;

    /**
     * Creates an instance of ApplicationOwnerProperties class.
     */
    public ApplicationOwnerProperties() {
    }

    /**
     * Get the name property: Common name of the organization owning the application.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Common name of the organization owning the application.
     * 
     * @param name the name value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the legalName property: Legal name of the organization owning the application.
     * 
     * @return the legalName value.
     */
    public String legalName() {
        return this.legalName;
    }

    /**
     * Set the legalName property: Legal name of the organization owning the application.
     * 
     * @param legalName the legalName value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withLegalName(String legalName) {
        this.legalName = legalName;
        return this;
    }

    /**
     * Get the tradingName property: Trading name of the organization owning the application.
     * 
     * @return the tradingName value.
     */
    public String tradingName() {
        return this.tradingName;
    }

    /**
     * Set the tradingName property: Trading name of the organization owning the application.
     * 
     * @param tradingName the tradingName value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withTradingName(String tradingName) {
        this.tradingName = tradingName;
        return this;
    }

    /**
     * Get the organizationDescription property: A description of the organization owning the application.
     * 
     * @return the organizationDescription value.
     */
    public String organizationDescription() {
        return this.organizationDescription;
    }

    /**
     * Set the organizationDescription property: A description of the organization owning the application.
     * 
     * @param organizationDescription the organizationDescription value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withOrganizationDescription(String organizationDescription) {
        this.organizationDescription = organizationDescription;
        return this;
    }

    /**
     * Get the taxNumber property: Unique Tax Number for the user's organization in the country/region the APC Gateway
     * is being purchased.
     * 
     * @return the taxNumber value.
     */
    public String taxNumber() {
        return this.taxNumber;
    }

    /**
     * Set the taxNumber property: Unique Tax Number for the user's organization in the country/region the APC Gateway
     * is being purchased.
     * 
     * @param taxNumber the taxNumber value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withTaxNumber(String taxNumber) {
        this.taxNumber = taxNumber;
        return this;
    }

    /**
     * Get the organizationType property: The type of organization that the Application Owner is.
     * 
     * @return the organizationType value.
     */
    public OrganizationType organizationType() {
        return this.organizationType;
    }

    /**
     * Set the organizationType property: The type of organization that the Application Owner is.
     * 
     * @param organizationType the organizationType value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withOrganizationType(OrganizationType organizationType) {
        this.organizationType = organizationType;
        return this;
    }

    /**
     * Get the organizationIdentificationId property: ID number for official identification of the organization.
     * 
     * @return the organizationIdentificationId value.
     */
    public String organizationIdentificationId() {
        return this.organizationIdentificationId;
    }

    /**
     * Set the organizationIdentificationId property: ID number for official identification of the organization.
     * 
     * @param organizationIdentificationId the organizationIdentificationId value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withOrganizationIdentificationId(String organizationIdentificationId) {
        this.organizationIdentificationId = organizationIdentificationId;
        return this;
    }

    /**
     * Get the organizationIdentificationIssuer property: Issuing organization of the ID for official identification of
     * the organization.
     * 
     * @return the organizationIdentificationIssuer value.
     */
    public String organizationIdentificationIssuer() {
        return this.organizationIdentificationIssuer;
    }

    /**
     * Set the organizationIdentificationIssuer property: Issuing organization of the ID for official identification of
     * the organization.
     * 
     * @param organizationIdentificationIssuer the organizationIdentificationIssuer value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withOrganizationIdentificationIssuer(String organizationIdentificationIssuer) {
        this.organizationIdentificationIssuer = organizationIdentificationIssuer;
        return this;
    }

    /**
     * Get the organizationIdentificationType property: Type of official identification of the organization.
     * 
     * @return the organizationIdentificationType value.
     */
    public String organizationIdentificationType() {
        return this.organizationIdentificationType;
    }

    /**
     * Set the organizationIdentificationType property: Type of official identification of the organization.
     * 
     * @param organizationIdentificationType the organizationIdentificationType value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withOrganizationIdentificationType(String organizationIdentificationType) {
        this.organizationIdentificationType = organizationIdentificationType;
        return this;
    }

    /**
     * Get the contactEmailAddress property: Email address for the person responsible for the use of Network APIs in
     * this application.
     * 
     * @return the contactEmailAddress value.
     */
    public String contactEmailAddress() {
        return this.contactEmailAddress;
    }

    /**
     * Set the contactEmailAddress property: Email address for the person responsible for the use of Network APIs in
     * this application.
     * 
     * @param contactEmailAddress the contactEmailAddress value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withContactEmailAddress(String contactEmailAddress) {
        this.contactEmailAddress = contactEmailAddress;
        return this;
    }

    /**
     * Get the legalRepresentative property: Legal representative of the organization.
     * 
     * @return the legalRepresentative value.
     */
    public Person legalRepresentative() {
        return this.legalRepresentative;
    }

    /**
     * Set the legalRepresentative property: Legal representative of the organization.
     * 
     * @param legalRepresentative the legalRepresentative value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withLegalRepresentative(Person legalRepresentative) {
        this.legalRepresentative = legalRepresentative;
        return this;
    }

    /**
     * Get the privacyManager property: Privacy manager of the organization.
     * 
     * @return the privacyManager value.
     */
    public Person privacyManager() {
        return this.privacyManager;
    }

    /**
     * Set the privacyManager property: Privacy manager of the organization.
     * 
     * @param privacyManager the privacyManager value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withPrivacyManager(Person privacyManager) {
        this.privacyManager = privacyManager;
        return this;
    }

    /**
     * Get the dataProtectionOfficer property: Data Protection Officer of the organization.
     * 
     * @return the dataProtectionOfficer value.
     */
    public Person dataProtectionOfficer() {
        return this.dataProtectionOfficer;
    }

    /**
     * Set the dataProtectionOfficer property: Data Protection Officer of the organization.
     * 
     * @param dataProtectionOfficer the dataProtectionOfficer value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withDataProtectionOfficer(Person dataProtectionOfficer) {
        this.dataProtectionOfficer = dataProtectionOfficer;
        return this;
    }

    /**
     * Get the registeredGeographicAddress property: Registered Geographic address.
     * 
     * @return the registeredGeographicAddress value.
     */
    public GeographicAddress registeredGeographicAddress() {
        return this.registeredGeographicAddress;
    }

    /**
     * Set the registeredGeographicAddress property: Registered Geographic address.
     * 
     * @param registeredGeographicAddress the registeredGeographicAddress value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withRegisteredGeographicAddress(GeographicAddress registeredGeographicAddress) {
        this.registeredGeographicAddress = registeredGeographicAddress;
        return this;
    }

    /**
     * Get the privacyPolicyUrl property: URL for the organization's privacy policy.
     * 
     * @return the privacyPolicyUrl value.
     */
    public String privacyPolicyUrl() {
        return this.privacyPolicyUrl;
    }

    /**
     * Set the privacyPolicyUrl property: URL for the organization's privacy policy.
     * 
     * @param privacyPolicyUrl the privacyPolicyUrl value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withPrivacyPolicyUrl(String privacyPolicyUrl) {
        this.privacyPolicyUrl = privacyPolicyUrl;
        return this;
    }

    /**
     * Get the localRepresentatives property: List of local representatives.
     * 
     * @return the localRepresentatives value.
     */
    public List<LocalRepresentative> localRepresentatives() {
        return this.localRepresentatives;
    }

    /**
     * Set the localRepresentatives property: List of local representatives.
     * 
     * @param localRepresentatives the localRepresentatives value to set.
     * @return the ApplicationOwnerProperties object itself.
     */
    public ApplicationOwnerProperties withLocalRepresentatives(List<LocalRepresentative> localRepresentatives) {
        this.localRepresentatives = localRepresentatives;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property name in model ApplicationOwnerProperties"));
        }
        if (legalName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property legalName in model ApplicationOwnerProperties"));
        }
        if (tradingName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tradingName in model ApplicationOwnerProperties"));
        }
        if (organizationDescription() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationDescription in model ApplicationOwnerProperties"));
        }
        if (taxNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property taxNumber in model ApplicationOwnerProperties"));
        }
        if (organizationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationType in model ApplicationOwnerProperties"));
        }
        if (organizationIdentificationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationIdentificationId in model ApplicationOwnerProperties"));
        }
        if (organizationIdentificationIssuer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationIdentificationIssuer in model ApplicationOwnerProperties"));
        }
        if (organizationIdentificationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationIdentificationType in model ApplicationOwnerProperties"));
        }
        if (contactEmailAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property contactEmailAddress in model ApplicationOwnerProperties"));
        }
        if (legalRepresentative() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property legalRepresentative in model ApplicationOwnerProperties"));
        } else {
            legalRepresentative().validate();
        }
        if (privacyManager() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privacyManager in model ApplicationOwnerProperties"));
        } else {
            privacyManager().validate();
        }
        if (dataProtectionOfficer() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataProtectionOfficer in model ApplicationOwnerProperties"));
        } else {
            dataProtectionOfficer().validate();
        }
        if (registeredGeographicAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property registeredGeographicAddress in model ApplicationOwnerProperties"));
        } else {
            registeredGeographicAddress().validate();
        }
        if (privacyPolicyUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privacyPolicyUrl in model ApplicationOwnerProperties"));
        }
        if (localRepresentatives() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property localRepresentatives in model ApplicationOwnerProperties"));
        } else {
            localRepresentatives().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationOwnerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("legalName", this.legalName);
        jsonWriter.writeStringField("tradingName", this.tradingName);
        jsonWriter.writeStringField("organizationDescription", this.organizationDescription);
        jsonWriter.writeStringField("taxNumber", this.taxNumber);
        jsonWriter.writeStringField("organizationType",
            this.organizationType == null ? null : this.organizationType.toString());
        jsonWriter.writeStringField("organizationIdentificationId", this.organizationIdentificationId);
        jsonWriter.writeStringField("organizationIdentificationIssuer", this.organizationIdentificationIssuer);
        jsonWriter.writeStringField("organizationIdentificationType", this.organizationIdentificationType);
        jsonWriter.writeStringField("contactEmailAddress", this.contactEmailAddress);
        jsonWriter.writeJsonField("legalRepresentative", this.legalRepresentative);
        jsonWriter.writeJsonField("privacyManager", this.privacyManager);
        jsonWriter.writeJsonField("dataProtectionOfficer", this.dataProtectionOfficer);
        jsonWriter.writeJsonField("registeredGeographicAddress", this.registeredGeographicAddress);
        jsonWriter.writeStringField("privacyPolicyUrl", this.privacyPolicyUrl);
        jsonWriter.writeArrayField("localRepresentatives", this.localRepresentatives,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationOwnerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationOwnerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationOwnerProperties.
     */
    public static ApplicationOwnerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationOwnerProperties deserializedApplicationOwnerProperties = new ApplicationOwnerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.name = reader.getString();
                } else if ("legalName".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.legalName = reader.getString();
                } else if ("tradingName".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.tradingName = reader.getString();
                } else if ("organizationDescription".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.organizationDescription = reader.getString();
                } else if ("taxNumber".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.taxNumber = reader.getString();
                } else if ("organizationType".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.organizationType
                        = OrganizationType.fromString(reader.getString());
                } else if ("organizationIdentificationId".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.organizationIdentificationId = reader.getString();
                } else if ("organizationIdentificationIssuer".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.organizationIdentificationIssuer = reader.getString();
                } else if ("organizationIdentificationType".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.organizationIdentificationType = reader.getString();
                } else if ("contactEmailAddress".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.contactEmailAddress = reader.getString();
                } else if ("legalRepresentative".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.legalRepresentative = Person.fromJson(reader);
                } else if ("privacyManager".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.privacyManager = Person.fromJson(reader);
                } else if ("dataProtectionOfficer".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.dataProtectionOfficer = Person.fromJson(reader);
                } else if ("registeredGeographicAddress".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.registeredGeographicAddress
                        = GeographicAddress.fromJson(reader);
                } else if ("privacyPolicyUrl".equals(fieldName)) {
                    deserializedApplicationOwnerProperties.privacyPolicyUrl = reader.getString();
                } else if ("localRepresentatives".equals(fieldName)) {
                    List<LocalRepresentative> localRepresentatives
                        = reader.readArray(reader1 -> LocalRepresentative.fromJson(reader1));
                    deserializedApplicationOwnerProperties.localRepresentatives = localRepresentatives;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationOwnerProperties;
        });
    }
}
