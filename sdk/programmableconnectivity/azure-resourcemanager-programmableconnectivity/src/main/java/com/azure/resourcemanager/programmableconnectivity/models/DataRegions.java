// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model defining the information required about the countries/regions the data transits through or is stored in.
 */
@Fluent
public final class DataRegions implements JsonSerializable<DataRegions> {
    /*
     * The country code of the country/region the data transits through or is stored in.
     */
    private String countryCode;

    /*
     * The commercial organization who is managing the data.
     */
    private String commercialOrganization;

    /*
     * Flag to indicate if commercial activity applies to this data management.
     */
    private boolean commercialActivity;

    /*
     * URL of the organization or governmental data privacy framework.
     */
    private String dataPrivacyFrameworkUrl;

    /**
     * Creates an instance of DataRegions class.
     */
    public DataRegions() {
    }

    /**
     * Get the countryCode property: The country code of the country/region the data transits through or is stored in.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: The country code of the country/region the data transits through or is stored in.
     * 
     * @param countryCode the countryCode value to set.
     * @return the DataRegions object itself.
     */
    public DataRegions withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get the commercialOrganization property: The commercial organization who is managing the data.
     * 
     * @return the commercialOrganization value.
     */
    public String commercialOrganization() {
        return this.commercialOrganization;
    }

    /**
     * Set the commercialOrganization property: The commercial organization who is managing the data.
     * 
     * @param commercialOrganization the commercialOrganization value to set.
     * @return the DataRegions object itself.
     */
    public DataRegions withCommercialOrganization(String commercialOrganization) {
        this.commercialOrganization = commercialOrganization;
        return this;
    }

    /**
     * Get the commercialActivity property: Flag to indicate if commercial activity applies to this data management.
     * 
     * @return the commercialActivity value.
     */
    public boolean commercialActivity() {
        return this.commercialActivity;
    }

    /**
     * Set the commercialActivity property: Flag to indicate if commercial activity applies to this data management.
     * 
     * @param commercialActivity the commercialActivity value to set.
     * @return the DataRegions object itself.
     */
    public DataRegions withCommercialActivity(boolean commercialActivity) {
        this.commercialActivity = commercialActivity;
        return this;
    }

    /**
     * Get the dataPrivacyFrameworkUrl property: URL of the organization or governmental data privacy framework.
     * 
     * @return the dataPrivacyFrameworkUrl value.
     */
    public String dataPrivacyFrameworkUrl() {
        return this.dataPrivacyFrameworkUrl;
    }

    /**
     * Set the dataPrivacyFrameworkUrl property: URL of the organization or governmental data privacy framework.
     * 
     * @param dataPrivacyFrameworkUrl the dataPrivacyFrameworkUrl value to set.
     * @return the DataRegions object itself.
     */
    public DataRegions withDataPrivacyFrameworkUrl(String dataPrivacyFrameworkUrl) {
        this.dataPrivacyFrameworkUrl = dataPrivacyFrameworkUrl;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeBooleanField("commercialActivity", this.commercialActivity);
        jsonWriter.writeStringField("dataPrivacyFrameworkUrl", this.dataPrivacyFrameworkUrl);
        jsonWriter.writeStringField("commercialOrganization", this.commercialOrganization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataRegions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataRegions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataRegions.
     */
    public static DataRegions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataRegions deserializedDataRegions = new DataRegions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("countryCode".equals(fieldName)) {
                    deserializedDataRegions.countryCode = reader.getString();
                } else if ("commercialActivity".equals(fieldName)) {
                    deserializedDataRegions.commercialActivity = reader.getBoolean();
                } else if ("dataPrivacyFrameworkUrl".equals(fieldName)) {
                    deserializedDataRegions.dataPrivacyFrameworkUrl = reader.getString();
                } else if ("commercialOrganization".equals(fieldName)) {
                    deserializedDataRegions.commercialOrganization = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataRegions;
        });
    }
}
