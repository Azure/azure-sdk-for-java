// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.programmableconnectivity.fluent.OperatorApiConnectionsClient;
import com.azure.resourcemanager.programmableconnectivity.fluent.models.OperatorApiConnectionInner;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnection;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnections;

public final class OperatorApiConnectionsImpl implements OperatorApiConnections {
    private static final ClientLogger LOGGER = new ClientLogger(OperatorApiConnectionsImpl.class);

    private final OperatorApiConnectionsClient innerClient;

    private final com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager;

    public OperatorApiConnectionsImpl(OperatorApiConnectionsClient innerClient,
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<OperatorApiConnection> getByResourceGroupWithResponse(String resourceGroupName,
        String operatorApiConnectionName, Context context) {
        Response<OperatorApiConnectionInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, operatorApiConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new OperatorApiConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public OperatorApiConnection getByResourceGroup(String resourceGroupName, String operatorApiConnectionName) {
        OperatorApiConnectionInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, operatorApiConnectionName);
        if (inner != null) {
            return new OperatorApiConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String operatorApiConnectionName) {
        this.serviceClient().delete(resourceGroupName, operatorApiConnectionName);
    }

    public void delete(String resourceGroupName, String operatorApiConnectionName, Context context) {
        this.serviceClient().delete(resourceGroupName, operatorApiConnectionName, context);
    }

    public PagedIterable<OperatorApiConnection> listByResourceGroup(String resourceGroupName) {
        PagedIterable<OperatorApiConnectionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OperatorApiConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<OperatorApiConnection> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<OperatorApiConnectionInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OperatorApiConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<OperatorApiConnection> list() {
        PagedIterable<OperatorApiConnectionInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OperatorApiConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<OperatorApiConnection> list(Context context) {
        PagedIterable<OperatorApiConnectionInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new OperatorApiConnectionImpl(inner1, this.manager()));
    }

    public OperatorApiConnection getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String operatorApiConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "operatorApiConnections");
        if (operatorApiConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'operatorApiConnections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, operatorApiConnectionName, Context.NONE)
            .getValue();
    }

    public Response<OperatorApiConnection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String operatorApiConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "operatorApiConnections");
        if (operatorApiConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'operatorApiConnections'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, operatorApiConnectionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String operatorApiConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "operatorApiConnections");
        if (operatorApiConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'operatorApiConnections'.", id)));
        }
        this.delete(resourceGroupName, operatorApiConnectionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String operatorApiConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "operatorApiConnections");
        if (operatorApiConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'operatorApiConnections'.", id)));
        }
        this.delete(resourceGroupName, operatorApiConnectionName, context);
    }

    private OperatorApiConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager() {
        return this.serviceManager;
    }

    public OperatorApiConnectionImpl define(String name) {
        return new OperatorApiConnectionImpl(name, this.manager());
    }
}
