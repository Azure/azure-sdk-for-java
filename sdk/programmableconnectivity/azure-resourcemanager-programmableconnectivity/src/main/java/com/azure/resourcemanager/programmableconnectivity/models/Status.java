// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description of the current status of the OperatorApiConnection resource.
 */
@Immutable
public final class Status implements JsonSerializable<Status> {
    /*
     * Current state of the OperatorApiConnection resource.
     */
    private String state;

    /*
     * Explanation of the current state of the OperatorApiConnection resource.
     */
    private String reason;

    /**
     * Creates an instance of Status class.
     */
    private Status() {
    }

    /**
     * Get the state property: Current state of the OperatorApiConnection resource.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the reason property: Explanation of the current state of the OperatorApiConnection resource.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("reason", this.reason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Status from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Status if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Status.
     */
    public static Status fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Status deserializedStatus = new Status();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedStatus.state = reader.getString();
                } else if ("reason".equals(fieldName)) {
                    deserializedStatus.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatus;
        });
    }
}
