// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model defining a contactable person.
 */
@Fluent
public final class Person implements JsonSerializable<Person> {
    /*
     * Family name of the contactable person.
     */
    private String familyName;

    /*
     * Given name of the contactable person.
     */
    private String givenName;

    /*
     * Email address of the contactable person.
     */
    private String emailAddress;

    /**
     * Creates an instance of Person class.
     */
    public Person() {
    }

    /**
     * Get the familyName property: Family name of the contactable person.
     * 
     * @return the familyName value.
     */
    public String familyName() {
        return this.familyName;
    }

    /**
     * Set the familyName property: Family name of the contactable person.
     * 
     * @param familyName the familyName value to set.
     * @return the Person object itself.
     */
    public Person withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }

    /**
     * Get the givenName property: Given name of the contactable person.
     * 
     * @return the givenName value.
     */
    public String givenName() {
        return this.givenName;
    }

    /**
     * Set the givenName property: Given name of the contactable person.
     * 
     * @param givenName the givenName value to set.
     * @return the Person object itself.
     */
    public Person withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }

    /**
     * Get the emailAddress property: Email address of the contactable person.
     * 
     * @return the emailAddress value.
     */
    public String emailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email address of the contactable person.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the Person object itself.
     */
    public Person withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (familyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property familyName in model Person"));
        }
        if (givenName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property givenName in model Person"));
        }
        if (emailAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property emailAddress in model Person"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Person.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("familyName", this.familyName);
        jsonWriter.writeStringField("givenName", this.givenName);
        jsonWriter.writeStringField("emailAddress", this.emailAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Person from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Person if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Person.
     */
    public static Person fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Person deserializedPerson = new Person();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("familyName".equals(fieldName)) {
                    deserializedPerson.familyName = reader.getString();
                } else if ("givenName".equals(fieldName)) {
                    deserializedPerson.givenName = reader.getString();
                } else if ("emailAddress".equals(fieldName)) {
                    deserializedPerson.emailAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPerson;
        });
    }
}
