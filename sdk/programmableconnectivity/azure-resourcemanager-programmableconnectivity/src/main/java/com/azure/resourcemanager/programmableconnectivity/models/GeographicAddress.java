// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model defining a geographic address.
 */
@Fluent
public final class GeographicAddress implements JsonSerializable<GeographicAddress> {
    /*
     * Street Number of the address.
     */
    private String streetNumber;

    /*
     * Street Name of the address.
     */
    private String streetName;

    /*
     * Locality of the address.
     */
    private String locality;

    /*
     * City of the address.
     */
    private String city;

    /*
     * State or province of the address.
     */
    private String stateOrProvince;

    /*
     * Postal code of the address.
     */
    private String postalCode;

    /*
     * Country code of the address.
     */
    private String countryCode;

    /**
     * Creates an instance of GeographicAddress class.
     */
    public GeographicAddress() {
    }

    /**
     * Get the streetNumber property: Street Number of the address.
     * 
     * @return the streetNumber value.
     */
    public String streetNumber() {
        return this.streetNumber;
    }

    /**
     * Set the streetNumber property: Street Number of the address.
     * 
     * @param streetNumber the streetNumber value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withStreetNumber(String streetNumber) {
        this.streetNumber = streetNumber;
        return this;
    }

    /**
     * Get the streetName property: Street Name of the address.
     * 
     * @return the streetName value.
     */
    public String streetName() {
        return this.streetName;
    }

    /**
     * Set the streetName property: Street Name of the address.
     * 
     * @param streetName the streetName value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }

    /**
     * Get the locality property: Locality of the address.
     * 
     * @return the locality value.
     */
    public String locality() {
        return this.locality;
    }

    /**
     * Set the locality property: Locality of the address.
     * 
     * @param locality the locality value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withLocality(String locality) {
        this.locality = locality;
        return this;
    }

    /**
     * Get the city property: City of the address.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: City of the address.
     * 
     * @param city the city value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the stateOrProvince property: State or province of the address.
     * 
     * @return the stateOrProvince value.
     */
    public String stateOrProvince() {
        return this.stateOrProvince;
    }

    /**
     * Set the stateOrProvince property: State or province of the address.
     * 
     * @param stateOrProvince the stateOrProvince value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withStateOrProvince(String stateOrProvince) {
        this.stateOrProvince = stateOrProvince;
        return this;
    }

    /**
     * Get the postalCode property: Postal code of the address.
     * 
     * @return the postalCode value.
     */
    public String postalCode() {
        return this.postalCode;
    }

    /**
     * Set the postalCode property: Postal code of the address.
     * 
     * @param postalCode the postalCode value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Get the countryCode property: Country code of the address.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: Country code of the address.
     * 
     * @param countryCode the countryCode value to set.
     * @return the GeographicAddress object itself.
     */
    public GeographicAddress withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeStringField("streetNumber", this.streetNumber);
        jsonWriter.writeStringField("streetName", this.streetName);
        jsonWriter.writeStringField("locality", this.locality);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("stateOrProvince", this.stateOrProvince);
        jsonWriter.writeStringField("postalCode", this.postalCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeographicAddress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeographicAddress if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeographicAddress.
     */
    public static GeographicAddress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeographicAddress deserializedGeographicAddress = new GeographicAddress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("countryCode".equals(fieldName)) {
                    deserializedGeographicAddress.countryCode = reader.getString();
                } else if ("streetNumber".equals(fieldName)) {
                    deserializedGeographicAddress.streetNumber = reader.getString();
                } else if ("streetName".equals(fieldName)) {
                    deserializedGeographicAddress.streetName = reader.getString();
                } else if ("locality".equals(fieldName)) {
                    deserializedGeographicAddress.locality = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedGeographicAddress.city = reader.getString();
                } else if ("stateOrProvince".equals(fieldName)) {
                    deserializedGeographicAddress.stateOrProvince = reader.getString();
                } else if ("postalCode".equals(fieldName)) {
                    deserializedGeographicAddress.postalCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeographicAddress;
        });
    }
}
