// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model defining how received data is processed.
 */
@Fluent
public final class DataProcessing implements JsonSerializable<DataProcessing> {
    /*
     * The operation that is performed on the data received.
     */
    private ProcessingOperation processingOperation;

    /*
     * The contexts in which the data is processed.
     */
    private List<Context> contexts;

    /*
     * The duration or temporal limitation of the data processing.
     */
    private DurationModel duration;

    /*
     * The frequency of the data processing.
     */
    private Frequency frequency;

    /*
     * The countries/regions the data transits through.
     */
    private List<DataRegions> transitRegions;

    /*
     * The countries/regions the data is stored in.
     */
    private List<DataRegions> storageRegions;

    /**
     * Creates an instance of DataProcessing class.
     */
    public DataProcessing() {
    }

    /**
     * Get the processingOperation property: The operation that is performed on the data received.
     * 
     * @return the processingOperation value.
     */
    public ProcessingOperation processingOperation() {
        return this.processingOperation;
    }

    /**
     * Set the processingOperation property: The operation that is performed on the data received.
     * 
     * @param processingOperation the processingOperation value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withProcessingOperation(ProcessingOperation processingOperation) {
        this.processingOperation = processingOperation;
        return this;
    }

    /**
     * Get the contexts property: The contexts in which the data is processed.
     * 
     * @return the contexts value.
     */
    public List<Context> contexts() {
        return this.contexts;
    }

    /**
     * Set the contexts property: The contexts in which the data is processed.
     * 
     * @param contexts the contexts value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withContexts(List<Context> contexts) {
        this.contexts = contexts;
        return this;
    }

    /**
     * Get the duration property: The duration or temporal limitation of the data processing.
     * 
     * @return the duration value.
     */
    public DurationModel duration() {
        return this.duration;
    }

    /**
     * Set the duration property: The duration or temporal limitation of the data processing.
     * 
     * @param duration the duration value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withDuration(DurationModel duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the frequency property: The frequency of the data processing.
     * 
     * @return the frequency value.
     */
    public Frequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: The frequency of the data processing.
     * 
     * @param frequency the frequency value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withFrequency(Frequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the transitRegions property: The countries/regions the data transits through.
     * 
     * @return the transitRegions value.
     */
    public List<DataRegions> transitRegions() {
        return this.transitRegions;
    }

    /**
     * Set the transitRegions property: The countries/regions the data transits through.
     * 
     * @param transitRegions the transitRegions value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withTransitRegions(List<DataRegions> transitRegions) {
        this.transitRegions = transitRegions;
        return this;
    }

    /**
     * Get the storageRegions property: The countries/regions the data is stored in.
     * 
     * @return the storageRegions value.
     */
    public List<DataRegions> storageRegions() {
        return this.storageRegions;
    }

    /**
     * Set the storageRegions property: The countries/regions the data is stored in.
     * 
     * @param storageRegions the storageRegions value to set.
     * @return the DataProcessing object itself.
     */
    public DataProcessing withStorageRegions(List<DataRegions> storageRegions) {
        this.storageRegions = storageRegions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("processingOperation",
            this.processingOperation == null ? null : this.processingOperation.toString());
        jsonWriter.writeArrayField("contexts", this.contexts,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("duration", this.duration == null ? null : this.duration.toString());
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeArrayField("transitRegions", this.transitRegions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageRegions", this.storageRegions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataProcessing from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataProcessing if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataProcessing.
     */
    public static DataProcessing fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataProcessing deserializedDataProcessing = new DataProcessing();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("processingOperation".equals(fieldName)) {
                    deserializedDataProcessing.processingOperation = ProcessingOperation.fromString(reader.getString());
                } else if ("contexts".equals(fieldName)) {
                    List<Context> contexts = reader.readArray(reader1 -> Context.fromString(reader1.getString()));
                    deserializedDataProcessing.contexts = contexts;
                } else if ("duration".equals(fieldName)) {
                    deserializedDataProcessing.duration = DurationModel.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    deserializedDataProcessing.frequency = Frequency.fromString(reader.getString());
                } else if ("transitRegions".equals(fieldName)) {
                    List<DataRegions> transitRegions = reader.readArray(reader1 -> DataRegions.fromJson(reader1));
                    deserializedDataProcessing.transitRegions = transitRegions;
                } else if ("storageRegions".equals(fieldName)) {
                    List<DataRegions> storageRegions = reader.readArray(reader1 -> DataRegions.fromJson(reader1));
                    deserializedDataProcessing.storageRegions = storageRegions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataProcessing;
        });
    }
}
