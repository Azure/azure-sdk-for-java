// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details about the Application that would use the Operator's Network APIs.
 */
@Fluent
public final class ApplicationProperties implements JsonSerializable<ApplicationProperties> {
    /*
     * Name of the application.
     */
    private String name;

    /*
     * Description of the application.
     */
    private String applicationDescription;

    /*
     * The category of the application.
     */
    private Category category;

    /*
     * Commercial name of the application.
     */
    private String commercialName;

    /*
     * Privacy rights request email address.
     */
    private String privacyRightsRequestEmailAddress;

    /*
     * URL for the organization's privacy policy.
     */
    private String privacyPolicyUrl;

    /**
     * Creates an instance of ApplicationProperties class.
     */
    public ApplicationProperties() {
    }

    /**
     * Get the name property: Name of the application.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the application.
     * 
     * @param name the name value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the applicationDescription property: Description of the application.
     * 
     * @return the applicationDescription value.
     */
    public String applicationDescription() {
        return this.applicationDescription;
    }

    /**
     * Set the applicationDescription property: Description of the application.
     * 
     * @param applicationDescription the applicationDescription value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withApplicationDescription(String applicationDescription) {
        this.applicationDescription = applicationDescription;
        return this;
    }

    /**
     * Get the category property: The category of the application.
     * 
     * @return the category value.
     */
    public Category category() {
        return this.category;
    }

    /**
     * Set the category property: The category of the application.
     * 
     * @param category the category value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withCategory(Category category) {
        this.category = category;
        return this;
    }

    /**
     * Get the commercialName property: Commercial name of the application.
     * 
     * @return the commercialName value.
     */
    public String commercialName() {
        return this.commercialName;
    }

    /**
     * Set the commercialName property: Commercial name of the application.
     * 
     * @param commercialName the commercialName value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withCommercialName(String commercialName) {
        this.commercialName = commercialName;
        return this;
    }

    /**
     * Get the privacyRightsRequestEmailAddress property: Privacy rights request email address.
     * 
     * @return the privacyRightsRequestEmailAddress value.
     */
    public String privacyRightsRequestEmailAddress() {
        return this.privacyRightsRequestEmailAddress;
    }

    /**
     * Set the privacyRightsRequestEmailAddress property: Privacy rights request email address.
     * 
     * @param privacyRightsRequestEmailAddress the privacyRightsRequestEmailAddress value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withPrivacyRightsRequestEmailAddress(String privacyRightsRequestEmailAddress) {
        this.privacyRightsRequestEmailAddress = privacyRightsRequestEmailAddress;
        return this;
    }

    /**
     * Get the privacyPolicyUrl property: URL for the organization's privacy policy.
     * 
     * @return the privacyPolicyUrl value.
     */
    public String privacyPolicyUrl() {
        return this.privacyPolicyUrl;
    }

    /**
     * Set the privacyPolicyUrl property: URL for the organization's privacy policy.
     * 
     * @param privacyPolicyUrl the privacyPolicyUrl value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withPrivacyPolicyUrl(String privacyPolicyUrl) {
        this.privacyPolicyUrl = privacyPolicyUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ApplicationProperties"));
        }
        if (applicationDescription() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applicationDescription in model ApplicationProperties"));
        }
        if (category() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property category in model ApplicationProperties"));
        }
        if (commercialName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property commercialName in model ApplicationProperties"));
        }
        if (privacyRightsRequestEmailAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privacyRightsRequestEmailAddress in model ApplicationProperties"));
        }
        if (privacyPolicyUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privacyPolicyUrl in model ApplicationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("applicationDescription", this.applicationDescription);
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("commercialName", this.commercialName);
        jsonWriter.writeStringField("privacyRightsRequestEmailAddress", this.privacyRightsRequestEmailAddress);
        jsonWriter.writeStringField("privacyPolicyUrl", this.privacyPolicyUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationProperties.
     */
    public static ApplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationProperties deserializedApplicationProperties = new ApplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedApplicationProperties.name = reader.getString();
                } else if ("applicationDescription".equals(fieldName)) {
                    deserializedApplicationProperties.applicationDescription = reader.getString();
                } else if ("category".equals(fieldName)) {
                    deserializedApplicationProperties.category = Category.fromString(reader.getString());
                } else if ("commercialName".equals(fieldName)) {
                    deserializedApplicationProperties.commercialName = reader.getString();
                } else if ("privacyRightsRequestEmailAddress".equals(fieldName)) {
                    deserializedApplicationProperties.privacyRightsRequestEmailAddress = reader.getString();
                } else if ("privacyPolicyUrl".equals(fieldName)) {
                    deserializedApplicationProperties.privacyPolicyUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationProperties;
        });
    }
}
