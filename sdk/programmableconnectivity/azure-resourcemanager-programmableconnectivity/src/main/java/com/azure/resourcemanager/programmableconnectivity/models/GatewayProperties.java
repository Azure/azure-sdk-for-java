// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Gateway resource properties.
 */
@Immutable
public final class GatewayProperties implements JsonSerializable<GatewayProperties> {
    /*
     * List of Operator API Connections selected by the user
     */
    private List<String> operatorApiConnections;

    /*
     * Base URL of the Gateway resource. This is the URL that the users would use to make Open API Gateway requests to
     * the Operators via Azure.
     */
    private String gatewayBaseUrl;

    /*
     * The status of the last operation on the Gateway resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of GatewayProperties class.
     */
    public GatewayProperties() {
    }

    /**
     * Get the operatorApiConnections property: List of Operator API Connections selected by the user.
     * 
     * @return the operatorApiConnections value.
     */
    public List<String> operatorApiConnections() {
        return this.operatorApiConnections;
    }

    /**
     * Get the gatewayBaseUrl property: Base URL of the Gateway resource. This is the URL that the users would use to
     * make Open API Gateway requests to the Operators via Azure.
     * 
     * @return the gatewayBaseUrl value.
     */
    public String gatewayBaseUrl() {
        return this.gatewayBaseUrl;
    }

    /**
     * Get the provisioningState property: The status of the last operation on the Gateway resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GatewayProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GatewayProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GatewayProperties.
     */
    public static GatewayProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GatewayProperties deserializedGatewayProperties = new GatewayProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operatorApiConnections".equals(fieldName)) {
                    List<String> operatorApiConnections = reader.readArray(reader1 -> reader1.getString());
                    deserializedGatewayProperties.operatorApiConnections = operatorApiConnections;
                } else if ("gatewayBaseUrl".equals(fieldName)) {
                    deserializedGatewayProperties.gatewayBaseUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedGatewayProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGatewayProperties;
        });
    }
}
